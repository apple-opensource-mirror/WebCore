2013-08-09  Matt Lilek  <mrl@webkit.org>

    Merge r1232721.

    2013-08-09  Ryosuke Niwa  <rniwa@webkit.org>

        <rdar://problem/14079819> [Keyboards] AB:11A385: REGRESSION: Can't select individual Arabic characters in bidirectional text, only whole words

        Reviewed by Enrica Casucci.

        Stitch selection rects even when text directions are different. In that case, use the text direction of rect
        that contained start or end so that the selection grabbers will be shown on the right side.

        Also fix a bug from the previous patch that we weren't preserving meta data of previousRect because we were
        replacing previousRect first.

        Finally, sort selection rects by logical left for real by instead of swapping consecutive rects in some cases.
        We use the insertion sort since we expect most of selection rects to be in the right order.

        * dom/Range.cpp:
        (WebCore::Range::collectSelectionRects):

2013-08-09  Matt Lilek  <mrl@webkit.org>

    Merge r1232581.

    2013-08-07  Ryosuke Niwa  <rniwa@webkit.org>

        <rdar://problem/14079819> [Keyboards] AB:11A385: REGRESSION: Can't select individual Arabic characters in bidirectional text, only whole words

        Reviewed by Enrica Casucci.

        This patch fixes two bugs:

        1. The code to close the gap between two selection rects for ruby text in vertical writing mode was extending
           selection rects to the right even when it contained the logical end of the selection. For example, consider
           bidirectional text such as "DEF abc" in a RTL block. If the user had selected "a" through "E", then we have
           one selection rect for " abc" and another one for "DE". We shouldn't be closing the gap on "F". It resulted
           in incorrect selection rect drawings.

           Fixed the bug by not closing the gap when the right edge of the line box for which a given selection rect is
           NOT contained in the rect. This happens for a LTR box that ends selection and a RTL box that starts selection.
           e.g. "[ab]c" and "[CB]A".

        2. The code to merge selection rects was not preserving information as to whether a given selection rect contains
           selection start or end and the directionality of text. This resulted in selection grabbers not being placed
           correctly because the code to determine the side of rect to place the grabbers relied upon those two meta data.

           Fixed the bug by preserving this information and not merging two rects of different directionalities.

        * dom/Range.cpp:
        (WebCore::printRects):
        (WebCore::Range::collectSelectionRects):

2013-08-05 Ryosuke Niwa <rniwa@apple.com>

        <rdar://problem/14439234> UIWebDocumentView setMarkedText:selectedRange takes long for multiple line Japanese text on N90

        Merge ToT WebKit r153734.

    2013-08-05  Ryosuke Niwa  <rniwa@webkit.org>

            Editor::updateMarkersForWordsAffectedByEditing(bool) shouldn't compute start and end of words when there are nor markers
            https://bugs.webkit.org/show_bug.cgi?id=119501

            Reviewed by Enrica Casucci.

            Exit early in updateMarkersForWordsAffectedByEditing before calling startOfWord and endOfWord if there are no document markers.

            * dom/DocumentMarkerController.h:
            (WebCore::DocumentMarkerController::hasMarkers): Added.
            * editing/Editor.cpp:
            (WebCore::Editor::updateMarkersForWordsAffectedByEditing):

2013-08-04  Andreas Kling  <akling@apple.com>

        <rdar://problem/14643948> iOS: Inserting a rule into an empty style sheet shouldn't trigger style recalc unless necessary. (119475)

        Merge ToT WebKit r153699.

    2013-08-04  Andreas Kling  <akling@apple.com>

            Inserting a rule into an empty style sheet shouldn't trigger style recalc unless necessary.
            <http://webkit.org/b/119475>
            <rdar://problem/14643481>

            Reviewed by Antti Koivisto.

            This is kind of a cheesy optimization, but it turns out that the use case is quite common.
            The pattern goes like this:

                (1) Create <style> element.
                (2) Add it to the document's <head>.
                (3) .addRule() one rule through the CSSOM API.

            Prior to this patch, (3) would always cause a full (deferred) style recalc.

            Now that we exclude empty style sheets from the document's (effective) active set,
            we can piggyback on the style invalidation analysis when transitioning from an empty
            sheet to a single-rule sheet.

            In other words, add a special code path for the first rule insertion into an empty,
            in-document style sheet to minimize the amount of invalidation that happens.

            * css/CSSStyleSheet.cpp:
            (WebCore::CSSStyleSheet::didMutateRules):
            (WebCore::CSSStyleSheet::insertRule):
            * css/CSSStyleSheet.h:
            (WebCore::CSSStyleSheet::RuleMutationScope::RuleMutationScope):
            (WebCore::CSSStyleSheet::RuleMutationScope::~RuleMutationScope):

2013-08-03  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/14642594> iOS: REGRESSION (r130783): Scrolling is broken going back to a cached page from a page that still has outstanding subresources

        Merge ToT WebKit r153649.

    2013-08-02  Brady Eidson  <beidson@apple.com>

        REGRESSION (r130783): Scrolling is broken going back to a cached page from a page that still has outstanding subresources.
        <rdar://problem/14601124> and https://bugs.webkit.org/show_bug.cgi?id=119416

        Reviewed by Darin Adler.

        Test: http/tests/loading/unfinished-load-back-to-cached-page-callbacks.html

        * loader/DocumentLoader.cpp:
        (WebCore::DocumentLoader::stopLoading): Always explicitly cancel the Document parser when stopLoading is called.

2013-08-03  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/14642554> iOS: REGRESSION(r136956): Tab with twitter.com has wrong layout when foregrounded if the window was resized while it sat untouched in background for over 30 seconds.

        Merge ToT WebKit r153595.

    2013-08-01  Andreas Kling  <akling@apple.com>

        Layout should force a StyleResolver rebuild if there isn't one at all.
        <http://webkit.org/b/119378>

        Reviewed by Antti Koivisto.

        We can't tell if viewport-dependent media queries have been invalidated at layout,
        unless we have a StyleResolver to ask about this.
        In case there isn't one, take the same path as we would with an invalidated query
        instead of relying on ensureStyleResolver() to build it.

        * page/FrameView.cpp:
        (WebCore::FrameView::layout):

2013-08-03  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/14642545> iOS: Reuse of XMLHttpRequests causes character corruption in response text (119358)

        Merge ToT WebKit r153553.

    2013-07-31  Ryosuke Niwa  <rniwa@webkit.org>

        Reuse of XMLHttpRequests causes character corruption in response text
        https://bugs.webkit.org/show_bug.cgi?id=119358

        Reviewed by Anders Carlsson.

        Merge https://chromium.googlesource.com/chromium/blink/+/6496e7bb9a0b46bc79032b86d5993b25f127a4cb

        Test: http/tests/xmlhttprequest/reopen-encoding.html

        * xml/XMLHttpRequest.cpp:
        (WebCore::XMLHttpRequest::clearResponseBuffers):
        (WebCore::XMLHttpRequest::didFinishLoading):

2013-08-03  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/14642535> iOS: FormAssociatedElement shouldn't create out-of-tree FormAttributeTargetObserver (119309)

        Merge ToT WebKit r153632.

    2013-07-31  Ryosuke Niwa  <rniwa@webkit.org>

        FormAssociatedElement shouldn't create out-of-tree FormAttributeTargetObserver
        https://bugs.webkit.org/show_bug.cgi?id=119309

        Reviewed by Kent Tamura.

        Merge https://chromium.googlesource.com/chromium/blink/+/6fbdcbf311de539107bc28711b3f7a527176e97b.

        I'm not merging the test since the attached test case only works when the shadow DOM API is enabled.

        * html/FormAssociatedElement.cpp:
        (WebCore::FormAssociatedElement::formAttributeChanged):
        (WebCore::FormAssociatedElement::resetFormAttributeTargetObserver):

2013-08-03  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/14642523> iOS: Fix crash due to unexpected Node deletion during MutationObserver registration book-keeping (119124)

        Merge ToT WebKit r153447.

    2013-07-26  Ryosuke Niwa  <rniwa@webkit.org>

        Fix crash due to unexpected Node deletion during MutationObserver registration book-keeping
        https://bugs.webkit.org/show_bug.cgi?id=119124

        Reviewed by Sam Weinig.

        Merge https://chromium.googlesource.com/chromium/blink/+/b6afb927695b3acf2c75c25f05e99682660993e2

        No new tests since I could not reproduce the crash with the test attached in the Blink change.

        The bug was caused by Node::unregisterMutationObserver removing the MutationObserverRegistration
        that holds the last ref to the node. Avoid that by explicitly allocating a local RefPtr to the node
        in MutationObserverRegistration::unregister. Also rename it to unregisterAndDelete to clarify
        the semantics and make it a static member function to be even safer.

        * dom/MutationObserver.cpp:
        (WebCore::MutationObserver::disconnect):
        * dom/MutationObserverRegistration.cpp:
        (WebCore::MutationObserverRegistration::unregisterAndDelete):
        * dom/MutationObserverRegistration.h:

2013-08-03  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/14642490> iOS: REGRESSION(r139282): Fix document leak when selection is created inside the document (119122)

        Merge ToT WebKit r153366, r153498.

    2013-07-25  Ryosuke Niwa  <rniwa@webkit.org>

        Fix document leak when selection is created inside the document
        https://bugs.webkit.org/show_bug.cgi?id=119122

        Reviewed by Andreas Kling.

        Merge https://chromium.googlesource.com/chromium/blink/+/b908cb4c8da93316d787de31c93f2a43de332a10

        The bug was caused by FrameSelection::m_previousCaretNode holding onto a Node, leaking its document.
        Fixed the bug by explicitly clearing it in FrameSelection::prepareForDestruction.

        Test: editing/selection/leak-document-with-selection-inside.html

        * editing/FrameSelection.cpp:
        (WebCore::FrameSelection::prepareForDestruction):

2013-08-03  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/14642223> iOS: Make PerformanceTests/Layout/line-layout.html 2.6-2.9% faster (118891)

        Merge ToT WebKit r152905.

    2013-07-19  Geoffrey Garen  <ggaren@apple.com>

        TrailingObjects shouldn't shrink vector capacity in a loop
        https://bugs.webkit.org/show_bug.cgi?id=118322

        Reviewed by Darin Adler.

        This seems to take about 3% off the profile of loading a large text file.

        * rendering/RenderBlockLineLayout.cpp:
        (WebCore::TrailingObjects::clear): clear() has the built-in side effect
        of throwing away existing capacity. Use shrink(0) to indicate that we
        want to keep our existing capacity.

2013-08-03  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/14642206> iOS: Use-after-free in ApplyStyleCommand::removeInlineStyle (118627)

        Merge ToT WebKit r153102.

    2013-07-24  Ryosuke Niwa  <rniwa@webkit.org>

        Use-after-free in ApplyStyleCommand::removeInlineStyle
        https://bugs.webkit.org/show_bug.cgi?id=118627

        Reviewed by Oliver Hunt.
        
        Merge https://chromium.googlesource.com/chromium/blink/+/b6471d077e012b05ccba14d0ce8e6d616106c8e6

        Unfortunately, there is no test case for this bug.

        * editing/ApplyStyleCommand.cpp:
        (WebCore::ApplyStyleCommand::removeInlineStyle):

2013-08-03  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/14641913> iOS: DFG doesn't respect typed array neutering

        Merge ToT WebKit r153613.

    2013-08-01  Filip Pizlo  <fpizlo@apple.com>

        DFG optimizations don't handle neutered arrays properly
        https://bugs.webkit.org/show_bug.cgi?id=119409

        Reviewed by Mark Hahnenberg and Oliver Hunt.

        Test: fast/js/dfg-typed-array-neuter.

        * bindings/js/SerializedScriptValue.cpp:
        (WebCore::neuterView):
        (WebCore::SerializedScriptValue::transferArrayBuffers):
        (WebCore::SerializedScriptValue::create):
        * bindings/js/SerializedScriptValue.h:

2013-08-03  Jeffrey Pfau  <jpfau@apple.com>

        <rdar://problem/14628348> REGRESSION (Innsbruck11A445): Camera does not save photo to AdSheet

        Add a frame argument to the *ImageFromCache functions to allow for
        extracting the top origin so that we can insert into cache partitions.

        Reviewed by Joseph Pecoraro.

        * WebCore.exp.in: Add modified signatures and export SecurityOrigin::cachePartition
        * loader/cache/MemoryCache.cpp: Modify functions to accept the cache partition name.
        (WebCore::MemoryCache::addImageToCache):
        (WebCore::MemoryCache::removeImageFromCache):
        * loader/cache/MemoryCache.h:

2013-08-02  Andreas Kling  <akling@apple.com>

        <rdar://problem/14639021> Removing an empty style sheet shouldn't trigger style recalc. (119428)

        Merge ToT WebKit r153672.

    2013-08-02  Andreas Kling  <akling@apple.com>

            Removing a <link> element with an empty stylesheet shouldn't trigger style recalc.
            <http://webkit.org/b/119442>
            <rdar://problem/14631785>

            Reviewed by Antti Koivisto.

            Let Document decide whether or not to do a style recalc after a <link> element is removed.
            This avoids unnecessary work when removing a <link> that refers to an empty style sheet.

            Some Facebook pages have a <link rel="stylesheet" href="data:text/css;base64,"> that gets
            removed during the initial page load, causing style recalc.

            * html/HTMLLinkElement.cpp:
            (WebCore::HTMLLinkElement::removedFrom):

                Use DeferRecalcStyleIfNeeded. Since the style sheet is being removed, it will either
                cause a recalc (because it's no longer in the set of active sheets) or do nothing.

2013-08-02  Dean Jackson  <dino@apple.com>

        <rdar://problem/14607548> REGRESSION (r137006): Flip banner animation is broken for iAd Producer ads

        Merge Open Source r153681

    2013-08-02  Dean Jackson  <dino@apple.com>

            Force elements with perspective or preserve-3d to disallow direct composited backgrounds
            https://bugs.webkit.org/show_bug.cgi?id=119462
            <rdar://problem/14607548>

            Reviewed by Simon Fraser.

            Bug 119461 (http://wkb.ug/119461) describes how a directly composited
            background color can intersect with its children. It's not clear exactly
            what the best way to fix that is, but for the moment we should disallow
            any element that has perspective or a preserve-3d transform style from
            getting a directly composited background.

            Test: compositing/background-color/no-composited-background-color-when-perspective.html

            * rendering/RenderLayerBacking.cpp:
            (WebCore::hasPerspectiveOrPreserves3D): New static helper.
            (WebCore::supportsDirectBoxDecorationsComposition): Return false if the above function is true.

2013-08-02  Enrica Casucci  <enrica@apple.com>

        REGRESSION(Innsbruck): Italic is not applied to Japanese, Korean and Chinese characters (because non-italic fallback UIFont indicates it’s italic)
        <rdar://problem/14077729>

        Reviewed by Darin Adler.

        The CT API we use for font fallback of system UI fonts, does not report
        correctly the actual traits of the returned font.
        Adopting the new SPI provided by Core Text for fallback of system fonts.
        The new SPI will report correctly the actual traits of the returned font.

        * platform/graphics/ios/FontCacheIOS.mm:
        (WebCore::FontCache::getSystemFontFallbackForCharacters):

2013-08-01  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/14089647> iPad: too many blank white pages were seen when switching tabs

        For high memory devices, the kernel will send a DISPATCH_VM_PRESSURE event when MobileSafari reaches its physical
        footprint limit (~720MB in 1GB device), even when the system free memory level is still high (>15%).  In this
        case, the kernel will not send us DISPATCH_MEMORYSTATUS_PRESSURE_NORMAL to tell us the memory pressure is cleared
        and WebKit will get stuck in low memory status.  The patch adds a data member to MemoryPressureHander to mark the
        reason for memory pressure event, and MobileSafari can use the info to decide whether it should clear the memory
        pressure flag by checking its physical footprint.

        Reviewed by Joseph Pecoraro.

        * WebCore.exp.in:
        * platform/MemoryPressureHandler.cpp:
        (WebCore::MemoryPressureHandler::MemoryPressureHandler):
        * platform/MemoryPressureHandler.h: add MemoryPressureReason enum to tell which kernel event triggered this
            memory pressure.
        * platform/ios/MemoryPressureHandlerIOS.mm:
        (WebCore::MemoryPressureHandler::setReceivedMemoryPressure):
        (WebCore::MemoryPressureHandler::clearMemoryPressure):
        (WebCore::MemoryPressureHandler::shouldWaitForMemoryClearMessage): if the pressure is triggered by VM_STATUS,
            that means the device memory free memory is low, then we are guaranteed there is going to be a memory pressure
            clear message from the kernel later.

2013-08-01  Andreas Kling  <akling@apple.com>

        <rdar://problem/14630649> Removing an empty style sheet shouldn't trigger style recalc. (119428)

        Merge ToT WebKit r153641 + r153642.

    2013-08-01  Andreas Kling  <akling@apple.com>

            Removing an empty style sheet shouldn't trigger style recalc.
            <http://webkit.org/b/119428>
            <rdar://problem/14629045>

            Reviewed by Antti Koivisto.

            Teach DocumentStyleSheetCollection to filter out empty style sheets when deciding whether
            or not to trigger a style recalc. We can then be clever when an empty style sheet is removed
            from the document, and avoid causing extra work.

            Some pages use this pattern:

                (1) Create a <style> element.
                (2) Add it to the document's <head> element.
                (3) Insert some CSS as a text child of the <style> element.

            Since the <style> element is already inside the document at (3), we had to treat this as an
            old style sheet being removed, even though it was just an empty sheet of nothing.

            With this patch, Document gains enough smarts to know that removing/adding an empty sheet
            won't affect layout/rendering in any meaningful way, thus a style recalc can be avoided.

            * dom/Document.h:
            * dom/Document.cpp:
            (WebCore::Document::styleResolverChanged):

                Add a DeferRecalcStyleIfNeeded mode to styleResolverChanged().

            * css/CSSStyleSheet.h:
            * css/CSSStyleSheet.cpp:
            (WebCore::CSSStyleSheet::clearOwnerNode):

                Use DeferRecalcStyleIfNeeded when saying bye from a CSSStyleSheet and let Document decide
                if removing the sheet should trigger style recalc instead of always assuming it should.

            * dom/DocumentStyleSheetCollection.cpp:
            (WebCore::filterEnabledNonemptyCSSStyleSheets):
            (WebCore::DocumentStyleSheetCollection::updateActiveStyleSheets):

                Exclude empty sheets from the activeAuthorStyleSheets() collection. They are still
                visible through CSSOM's document.styleSheets.

2013-08-01  Jer Noble  <jer.noble@apple.com>

        <rdar://problem/14617471> Crash in MobileSafari at WebCore:  WebCore::AudioSession::beganAudioInterruption + 62 (11A435-11A444)

        Merge r153599 - https://trac.webkit.org/r153599

    2013-08-01  Jer Noble  <jer.noble@apple.com>

            Crash in WebCore:  WebCore::AudioSession::beganAudioInterruption + 62
            https://bugs.webkit.org/show_bug.cgi?id=119406

            Reviewed by Eric Carlson.

            Unregister for AudioSession interruption events when being destroyed.

            * platform/audio/ios/AudioDestinationIOS.cpp:
            (WebCore::AudioDestinationIOS::~AudioDestinationIOS):

2013-07-31  Alexey Proskuryakov  <ap@apple.com>

        Work towards <rdar://problem/14439621> Crashes in WebCore::ScheduledAction::execute

        Merge ToT WebKit r153406, r153531.

    2013-07-27  Alexey Proskuryakov  <ap@apple.com>

            Make SuspendableTimer safer
            https://bugs.webkit.org/show_bug.cgi?id=119127

            Reviewed by Sam Weinig.

            SuspendableTimer now enforces that it stays suspended until resumed (or until stopped
            and started again). To ensure this, TimerBase is now a private base class, and parts of
            its interface that clients use are reimplemented with suspend/resume in mind.

            Derived classes are still allowed to override TimerBase virtual functions (notably
            fired() and alignedFireTime()).

            * dom/DocumentEventQueue.cpp:
            (WebCore::DocumentEventQueueTimer): Removed an extraneous WTF_MAKE_NONCOPYABLE,
            TimerBase has it already.
            (WebCore::DocumentEventQueueTimer::create): Use our normal create() pattern.
            (WebCore::DocumentEventQueue::DocumentEventQueue): Made the constructor private, accordingly.
            (WebCore::DocumentEventQueue::cancelEvent): Use SuspendableTimer::cancel(), which
            is a new name to disambiguate TimerBase::stop() and ActiveDOMObject::stop().
            (WebCore::DocumentEventQueue::close): Ditto.

            * page/DOMTimer.cpp:
            (WebCore::DOMTimer::fired): Now that SuspendableTimer knows whether it's currently
            suspended, assert that it's not.
            (WebCore::DOMTimer::didStop): Separated ActiveDOMObject::stop() implementation from
            additional cleanup, allowing for better SuspendableTimer encapsulation.

            * page/DOMTimer.h: Added FINAL and OVVERIDE specifiers as appropriate.

            * page/SuspendableTimer.h: Added FINAL (and OVERRIDE) qualifiers to ActiveDOMObject
            methods. A derived class that wants to override current behavior is most likely not
            a timer, and thus shouldn't be a derived class.
            (WebCore::SuspendableTimer::isActive): SuspendableTimer with a next fire time is
            active even if suspended, we shouldn't overwrite its saved data thinking that it's
            inactive.
            (WebCore::SuspendableTimer::isSuspended): Exposed to clients (m_suspended is no
            longer debug only).

            * page/SuspendableTimer.cpp:
            (WebCore::SuspendableTimer::SuspendableTimer): Updated for new variable names.
            (WebCore::SuspendableTimer::stop): This is ActiveDOMObject::stop(), which is called
            before final destruction. We don't track this state directly, but can approximate
            with setting m_suspended, so even if someone tries to start the timer afterwards,
            it won't fire.
            (WebCore::SuspendableTimer::suspend): Updated for new names.
            (WebCore::SuspendableTimer::resume): Ditto.
            (WebCore::SuspendableTimer::didStop): No-op default implementation for client hook.
            (WebCore::SuspendableTimer::cancel): Equivalent of TimerBase::stop(), which also
            works when suspended. 
            (WebCore::SuspendableTimer::startRepeating): Replacement for TimerBase function with
            the same name, which works correctly when suspended. We don't want to actually start
            the timer in this case.
            (WebCore::SuspendableTimer::startOneShot): Ditto.
            (WebCore::SuspendableTimer::repeatInterval): Ditto.
            (WebCore::SuspendableTimer::augmentFireInterval): Ditto.
            (WebCore::SuspendableTimer::augmentRepeatInterval): Ditto.

2013-07-31  Alexey Proskuryakov  <ap@apple.com>

        Work towards <rdar://problem/14439621> Crashes in WebCore::ScheduledAction::execute

        Merge ToT WebKit r153407.

    2013-07-31  Alexey Proskuryakov  <ap@apple.com>

            HTMLParserScheduler gets into an inconsistent state when suspended for reasons
            other than WillDeferLoading
            https://bugs.webkit.org/show_bug.cgi?id=119172

            Reviewed by Sam Weinig.

            When loading is not deferred, even a suspended parser will be processing new data
            from network, potentially starting its next chunk timer.

            Limit suspending to when we can actually enforce it.

            Here is what happens for each ReasonForSuspension:
            - JavaScriptDebuggerPaused: continuing to parse is probably wrong, but in practice,
            this is unlikely to happen while debugging, and wasn't properly prevented before
            this patch anyway.
            - WillDeferLoading: No change in behavior.
            - DocumentWillBecomeInactive: This is about page cache, and documents are only allowed
            to be cached when fully loaded.
            - PageWillBeSuspended: This appears to be part of Frame::suspendActiveDOMObjectsAndAnimations()
            implementation, I'm guessing that it is appropriate to continue loading.

            * dom/Document.cpp:
            (WebCore::Document::suspendScheduledTasks):
            (WebCore::Document::resumeScheduledTasks):
            Only suspend/resume parsing when loading is deferred. This is not expressed directly,
            but it's important to do this to avoid executing JS behind alerts and other modal dialogs.

            * html/parser/HTMLParserScheduler.h: Added m_suspended member variable for assertions.

            * html/parser/HTMLParserScheduler.cpp:
            (WebCore::HTMLParserScheduler::HTMLParserScheduler):
            (WebCore::HTMLParserScheduler::continueNextChunkTimerFired):
            (WebCore::HTMLParserScheduler::scheduleForResume):
            (WebCore::HTMLParserScheduler::suspend):
            (WebCore::HTMLParserScheduler::resume):
            Update m_suspended and assert as appropriate. No behavior changes for release mode.

            * page/Frame.cpp: (WebCore::Frame::suspendActiveDOMObjectsAndAnimations):
            Added a FIXME.

2013-07-31  Alexey Proskuryakov  <ap@apple.com>

        Work towards <rdar://problem/14439621> Crashes in WebCore::ScheduledAction::execute

        Reviewed by Joseph Pecoraro and Pratik Solanki.

        Frame is responsible for counting suspend/resume calls, and updating Document
        accordingly. But it didn't account for navigation, when documents change.

        * dom/Document.cpp: (WebCore::Document::Document): Syncing suspend/resume state
        only in constructor is not sufficient, we'll do that in Frame::setDocument.
        Also, suspending only one timer instead of calling Document::suspendScheduledTasks
        just doesn't make sense.

        * dom/DocumentEventQueue.cpp:
        * dom/DocumentEventQueue.h:
        Removed iOS only suspendPendingEventTimer(). Suspending an ActiveDOMObject
        directly is never right, it will assert when being suspended again with others
        (or possibly misbehave if it doesn't have such assertions).

        * page/Frame.cpp: (WebCore::Frame::setDocument): When a document is not in a frame,
        the frame cannot keep its suspend/resume state updated. Update the state when the
        document is restored - its suspend/resumeScheduledTasks are just sloppy enough
        to allow for repeated calls.

2013-07-31  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/14613123> Inactive style sheets should not trigger style recalc when loaded. (119236)

        Merged ToT WebKit r153494

    2013-07-30  Andreas Kling  <akling@apple.com>

        Inactive style sheets should not trigger style recalc when loaded.
        <http://webkit.org/b/119236>
        <rdar://problem/14588132>

        Reviewed by Antti Koivisto.

        Style sheets that are either alternate sheets or are excluded by their media query should not trigger
        a full style recalc when they finish loading, since the end result will not be observably different.

        The sheets are still inspectable through document.styleSheets.

        Changed enums from Blocking/NonBlocking to ActiveSheet/InactiveSheet to clarify what's going on.

        * html/HTMLLinkElement.h:
        * html/HTMLLinkElement.cpp:
        (WebCore::HTMLLinkElement::HTMLLinkElement):
        (WebCore::HTMLLinkElement::setDisabledState):
        (WebCore::HTMLLinkElement::process):
        (WebCore::HTMLLinkElement::startLoadingDynamicSheet):
        (WebCore::HTMLLinkElement::addPendingSheet):
        (WebCore::HTMLLinkElement::removePendingSheet):

2013-07-31  Andy Estes  <aestes@apple.com>

        <rdar://problem/14601998> iOS: HTMLMediaElement should not add cues for disabled text tracks (118682)

        Merged ToT WebKit r152721.

    2013-07-16  Eric Carlson  <eric.carlson@apple.com>

        HTMLMediaElement should not add cues for disabled text tracks
        https://bugs.webkit.org/show_bug.cgi?id=118682

        Reviewed by Ryosuke Niwa.

        Merge https://src.chromium.org/viewvc/blink?view=rev&revision=153810

        Tests: media/track/track-disabled-addcue.html
               media/track/track-disabled.html

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::textTrackAddCues): Do nothing if the track is disabled.
        (WebCore::HTMLMediaElement::textTrackAddCue): Ditto.

2013-07-30  Andy Estes  <aestes@apple.com>

        <rdar://problem/14601404> iOS: REGRESSION(125294): Adblock fix for 14291428 did not resolve the issue with adblock

        Merged ToT WebKit r152788.

    2013-07-17  Andreas Kling  <akling@apple.com>

        CSS selector list splitting should be by component, not by selector.
        <http://webkit.org/b/118761>
        <rdar://problem/14421609>

        Reviewed by Antti Koivisto.

        Test (amended): fast/css/rule-selector-overflow.html

        * css/CSSSelectorList.h:
        * css/CSSSelectorList.cpp:
        (WebCore::CSSSelectorList::CSSSelectorList):
        (WebCore::CSSSelectorList::componentCount):
        * css/CSSStyleRule.cpp:
        (WebCore::CSSStyleRule::setSelectorText):

            Renamed CSSSelectorList::length() to componentCount() and made it public.

        * css/RuleSet.h:

            maximumSelectorCount => maximumSelectorComponentCount

        * css/StyleRule.cpp:
        (WebCore::StyleRule::splitIntoMultipleRulesWithMaximumSelectorComponentCount):

            Make the splits after accumulating 'maximumSelectorComponentCount' components.

        * css/StyleRule.h:
        * css/StyleSheetContents.cpp:
        (WebCore::StyleSheetContents::parserAppendRule):

            splitIntoMultipleRulesWithMaximumSelectorCount => splitIntoMultipleRulesWithMaximumSelectorComponentCount

2013-07-29  Joseph Pecoraro  <pecoraro@apple.com>

        Merged ToT WebKit r153003.

    2013-07-22  Zalan Bujtas  <zalan@apple.com>

            segfault in RenderLayerCompositor when the iframe's position attribute is changed and it embeds <object>.
            https://bugs.webkit.org/show_bug.cgi?id=118965

            Reviewed by Simon Fraser.

            Do not change the composition state unless we can reliably figure out the iframe's size.
            If the renderer is not yet attached, its size is not computable.

            Test: compositing/iframes/iframe-position-absolute-with-padding-percentage-crash.html

            * rendering/RenderLayerCompositor.cpp:
            (WebCore::RenderLayerCompositor::requiresCompositingForFrame):

2013-07-29  Joseph Pecoraro  <pecoraro@apple.com>

        Merged ToT WebKit r153002.

    2013-07-22  Chris Fleizach  <cfleizach@apple.com>

            AX: VoiceOver only read the first column in a safari table
            https://bugs.webkit.org/show_bug.cgi?id=118992

            Reviewed by Tim Horton.

            In case the first section has fewer columns than the rest of the table, the AXTable was only reporting the number of
            columns for the first section. We need to take the max number of columns out of all sections.

            Test: accessibility/table-with-mismatch-column-count-in-initial-section.html

            * accessibility/AccessibilityTable.cpp:
            (WebCore::AccessibilityTable::addChildren):

2013-07-29  Joseph Pecoraro  <pecoraro@apple.com>

        Merged ToT WebKit r152907.

    2013-07-19  Radu Stavila  <stavila@adobe.com>

            Hover doesn't work for block elements inside a href element
            https://bugs.webkit.org/show_bug.cgi?id=118907

            Reviewed by David Hyatt.

            Added test for hovering block elements inside a href element.

            Test: fast/css/hover-display-block.html

            * rendering/RenderObject.cpp:
            (WebCore::RenderObject::hoverAncestor):

2013-07-29  Joseph Pecoraro  <pecoraro@apple.com>

        Merged ToT WebKit r152793.

    2013-07-17  Zalan Bujtas  <zalan@apple.com>

            Wrong linebox height, when block element parent has vertical-align property defined.
            https://bugs.webkit.org/show_bug.cgi?id=118245

            Reviewed by David Hyatt.

            Do not push the current element to the next, when it is still considered empty, even with
            some object(s) in front. Behave as if it was actually empty.
            Inline elements like <span></span> generate such lines.

            Test: fast/css/empty-span-with-parent-div-and-vertical-align.html

            * rendering/RenderBlockLineLayout.cpp:
            (WebCore::RenderBlock::LineBreaker::nextSegmentBreak):

2013-07-29  Joseph Pecoraro  <pecoraro@apple.com>

        Merged ToT WebKit r152783.

    2013-07-17  Chris Fleizach  <cfleizach@apple.com>

            Regression: columnheader/rowheader roles not exposed correctly
            https://bugs.webkit.org/show_bug.cgi?id=113628

            Reviewed by Tim Horton.

            When we determine the row and column headers we look at the ARIA role being returned, but
            since TableCell overrides the determineAccessibilityRole method, the ARIA role is never set.

            Test: platform/mac/accessibility/aria-columnrowheaders.html

            * accessibility/AccessibilityTableCell.cpp:
            (WebCore::AccessibilityTableCell::determineAccessibilityRole):

2013-07-30  Andy Estes  <aestes@apple.com>

        <rdar://problem/14600932> iOS: FBI ransomware generated a seemingly endless trap of dialogs in beforeunload

        Merged ToT WebKit r152941.

    2013-07-19  Brady Eidson  <beidson@apple.com>

        Pages should not be able to abuse users inside beforeunload handlers.
        <rdar://problem/14475779> and https://bugs.webkit.org/show_bug.cgi?id=118871.

        Reviewed by Alexey Proskuryakov.

        Tests: fast/loader/show-only-one-beforeunload-dialog.html
               http/tests/misc/iframe-beforeunload-dialog-matching-ancestor-securityorigin.html
               http/tests/misc/iframe-beforeunload-dialog-not-matching-ancestor-securityorigin.html

        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::FrameLoader):
        (WebCore::FrameLoader::shouldClose):
        (WebCore::FrameLoader::handleBeforeUnloadEvent):
        (WebCore::FrameLoader::shouldCloseFiringBeforeUnloadEvent): Renamed from fireBeforeUnloadEvent.
          Add logic to enforce "1 beforeunload dialog per navigation" as well as "iframes can only show beforeunload 
          dialogs if their entire ancestry's security origins match the navigating frame."
        * loader/FrameLoader.h:
        * loader/FrameLoader.h:

        Add the ability for Page to know when any frame is dispatching beforeunload:
        * page/Page.cpp:
        (WebCore::Page::Page):
        (WebCore::Page::incrementFrameHandlingBeforeUnloadEventCount):
        (WebCore::Page::decrementFrameHandlingBeforeUnloadEventCount):
        (WebCore::Page::isAnyFrameHandlingBeforeUnloadEvent):
        * page/Page.h:

        * page/DOMWindow.cpp:
        (WebCore::DOMWindow::print): Disallow if any frame is in beforeunload dispatch.
        (WebCore::DOMWindow::alert): Ditto.
        (WebCore::DOMWindow::confirm): Ditto.
        (WebCore::DOMWindow::prompt): Ditto.
        (WebCore::DOMWindow::showModalDialog): Ditto.

2013-07-30  Andy Estes  <aestes@apple.com>

        <rdar://problem/14374097> Content filter error page decoded with blocked page’s encoding (119237)

        Merged ToT WebKit r153502.

    2013-07-30  Andy Estes  <aestes@apple.com>  

        Content filter replacement data uses the encoding from the blocked page's response headers
        https://bugs.webkit.org/show_bug.cgi?id=119237

        Reviewed by Darin Adler.

        When a document specifies an encoding in an HTTP response header, or
        when the embedder specifies an override encoding, and the content filter
        blocks the document, we interpret the content filter's replacement data
        using this encoding. This might be the wrong.

        Forget about encodings determined from these sources. The replacement
        data will specify an encoding in a <meta charset>, so let that be used
        instead.

        No new tests. We don't currently have a mechanism for testing the
        content filter from WebKit.

        * loader/DocumentLoader.cpp:
        (WebCore::DocumentLoader::commitData): Pretend as if no encoding is
        specified if the content filter blocked the load.
        (WebCore::DocumentLoader::dataReceived): Stopped calling commitLoad()
        before early-returning if the content filter needs more data. This isn't
        necessary.

2013-07-30  Daniel Bates  <dabates@apple.com>

        <rdar://problem/14591785> iOS: SecuritySaver: *exploitable* out of bounds array access in WebCore`valueName / WebCore::CSSPrimitiveValue::equals (119107)

        Merge ToT WebKit r153399.

        Substituted "isIdent" for "isValidId" in ApplyPropertyTextAlign::applyValue(). Otherwise, we need to
        at least merge ToT WebKit r151754 and r151783. Both r151754 and r151783 are large changesets and could
        be seen as high risk to merge given the iOS release schedule.

    2013-07-30  Sam Weinig  <sam@webkit.org>

            Stop pretending to support <string> for text-align.
            https://bugs.webkit.org/show_bug.cgi?id=119107

            Reviewed by Andreas Kling.

            Test: fast/css/text-align-string-crash.html

            * css/CSSParser.cpp:
            (WebCore::CSSParser::parseValue):
            Stop pretending to support <string> for text-align.

            * css/DeprecatedStyleBuilder.cpp:
            (WebCore::ApplyPropertyTextAlign::applyValue):
            ASSERT that only value IDs get passed.

2013-07-30  Daniel Bates  <dabates@apple.com>

        <rdar://problem/14591753> iOS: Atomicize HTMLAnchorElement.hash before passing it to JS. (118748)

        Merge ToT WebKit r152743.

    2013-07-30  Andreas Kling  <akling@apple.com>

            Atomicize HTMLAnchorElement.hash before passing it to JS.
            <http://webkit.org/b/118748>
            <rdar://problem/14459780>

            Reviewed by Sam Weinig.

            Instead of generating a unique string from '#' + the URL hash every time HTMLAnchorElement.hash
            is queried, turn it into an AtomicString. This prevents massive memory usage in scripts that
            fetch .hash a lot.

            Reduces memory consumption by 4.65 MB when viewing the full HTML5 spec at <http://whatwg.org/c>

            * html/HTMLAnchorElement.cpp:
            (WebCore::HTMLAnchorElement::hash):

2013-07-30  Daniel Bates  <dabates@apple.com>

        <rdar://problem/14591627> iOS: REGRESSION(r150867): Mail: NULL pointer crash beneath StyleResolver::applyMatchedProperties

        Merge ToT WebKit r153072.

    2013-07-30  Andreas Kling  <akling@apple.com>

            REGRESSION(r150867): FrameView auto-sizing + delegate denied image load may cause StyleResolver to re-enter itself.
            <rdar://problem/14324895>
            <http://webkit.org/b/119023>

            Reviewed by Simon Fraser.

            The bug happened when FrameView::autoSizeIfEnabled() was getting called below FrameLoader::checkCompleted()
            triggered by an incorrect loadDone() callback originating in SubresourceLoader::didCancel().

            * css/StyleResolver.cpp:
            (WebCore::StyleResolver::loadPendingResources):

                Add an assertion that this function is not getting re-entered. If a similar bug occurs
                in the future, this will help the lucky person debugging.

            * loader/SubresourceLoader.cpp:
            (WebCore::SubresourceLoader::didCancel):

                Don't notifyDone() if the SubresourceLoader is in Uninitialized state.

2013-07-30  Daniel Bates  <dabates@apple.com>

        <rdar://problem/14590928> iOS: KURL creates duplicate strings when completing data: URIs. (118952)

        Merge ToT WebKit r152951.

    2013-07-30  Andreas Kling  <akling@apple.com>

            KURL creates duplicate strings when completing data: URIs.
            <http://webkit.org/b/118952>
            <rdar://problem/14504480>

            Reviewed by Anders Carlsson.

            When checking if the original URL input string can be reused, compare against the part
            of the parsing buffer that we would actually return, not the entire buffer.

            632 kB progression on <http://www.nytimes.com/>

            Test: KURLTest.KURLDataURIStringSharing

            * platform/KURL.cpp:
            (WebCore::KURL::parse):

2013-07-29  Jer Noble  <jer.noble@apple.com>

        <rdar://problem/14550924> Fullscreen captions often disappear then appear again

        Merge r153448 - https://trac.webkit.org/r153448>

    2013-07-29  Jer Noble  <jer.noble@apple.com>

            TextTrackRepresentation captions often disappear then appear again.
            https://bugs.webkit.org/show_bug.cgi?id=119228

            Reviewed by Simon Fraser.

            Calling updateTextTrackDisplay() will cause the entire DOM subtree containing the active cues
            to be torn down and rebuilt. Only call into this method when text tracks have actually changed.

            Add an enum parameter to configureTextTrackDisplay() which allows the caller to specify that
            method should assume that the list of visible text tracks has changed, forcing a call to
            updateTextTrackDisplay().

            * html/HTMLMediaElement.cpp:
            (WebCore::HTMLMediaElement::updateActiveTextTrackCues): Remove the unnecessary call to updateTextTrackDisplay().
            (WebCore::HTMLMediaElement::textTrackModeChanged): Pass AssumeVisibleTextTracksChanged to configureTextTrackDisplay().
            (WebCore::HTMLMediaElement::configureTextTrackDisplay): Check the passed flags and exit early only if
                AssumeVisibleTextTracksChanged is not set.
            * html/HTMLMediaElement.h:

2013-07-29  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/14530546> WebView gives incorrect _pageCount when Times New Roman specified at <p> level in CSS

        Merge r153451.

    2013-07-29  Simon Fraser  <simon.fraser@apple.com>
    
            Page count can be incorrect if there is a pending style recalc
            https://bugs.webkit.org/show_bug.cgi?id=119232
    
            Reviewed by Beth Dakin.
    
            If style is changed in a way that schedules a style recalc on the Document,
            and then Page::pageCount() is called, we may give the wrong answer because
            the existing code only checked FrameView::needsLayout(), not whether a style
            recale was pending.
            
            Fix by having Page::pageCount() call updateLayoutIgnorePendingStylesheets()
            as we do for other properties that require layer, and are exposed to JS
            or via API.
    
            * page/Page.cpp:
            (WebCore::Page::pageCount):

2013-07-29  Andreas Kling  <akling@apple.com>

        <rdar://problem/14584180> Don't update the text track override CSS every time a media element is created. (119199)

        Merge ToT WebKit r153418.

        2013-07-28  Andreas Kling  <akling@apple.com>

            Don't update the text track override CSS every time a media element is created.
            <http://webkit.org/b/119199>
            <rdar://problem/14572855>

            Reviewed by Darin Adler.

            We should only have to update the CSS if the accessibility caption preferences are changed.
            This was forcing a full style recalc in every Document any time a media element is instantiated.

            * page/CaptionUserPreferencesMediaAF.cpp:
            (WebCore::CaptionUserPreferencesMediaAF::setInterestedInCaptionPreferenceChanges):

2013-07-29  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/14552236> Missing content on various sites on zooming (bad tiled layer bounds)

        Reviewed by Antti Koivisto.

        For <rdar://problem/14497942> I added a way to get a rectangle for the parts
        of the content that are visible, including those overlaid by UI elements. However,
        the code that computed this rectangle failed to take zooming into account.
        
        Fix by changing ScrollView::visibleExtentContentRect() to be more similar to
        ScrollView::actualVisibleContentRect(), calling a new function, -documentVisibleExtent,
        on WAKScrollView that does the same rect mapping as -actualDocumentVisibleRect,
        which takes the scale into account.

        * platform/ios/ScrollViewIOS.mm:
        (WebCore::ScrollView::actualVisibleContentRect):
        (WebCore::ScrollView::visibleExtentContentRect):
        * wak/WAKScrollView.h:
        * wak/WAKScrollView.mm:
        (-[WAKScrollView documentVisibleExtent]):

2013-07-29  Dean Jackson  <dino@apple.com>

        <rdar://problem/14555311> Allow full-page canvas to be accelerated

        Merge r153438 - https://trac.webkit.org/r153438

    2013-07-29  Dean Jackson  <dino@apple.com>

            Max IOSurfaceDimension should be an inclusive upper bound
            https://bugs.webkit.org/show_bug.cgi?id=119206
            <rdar://problem/14555311>

            Reviewed by Simon Fraser.

            The maxIOSurfaceDimension value should be an inclusive upper bound.
            Change the greater than or equal to into a greater than. This will
            allow canvas elements of this dimension to be accelerated.

            * platform/graphics/cg/ImageBufferCG.cpp:
            (WebCore::ImageBuffer::ImageBuffer): Change >= to >

2013-07-26  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/14504255> REGRESSION: 11A432: It's very slow for MobileSafari to render a page from 36kr.com

        Merged ToT WebKit r153397.

    2013-07-26  Yongjun Zhang  <yongjun_zhang@apple.com>

            With frame flattening on, too many resize events fired if document is resized in onresize handler.
            https://bugs.webkit.org/show_bug.cgi?id=119075

            Reviewed by Simon Fraser.

            With http://trac.webkit.org/changeset/149287, WebCore also sends resize event in FrameView::setFrameRect.  When
            flattening an iframe, setFrameRect could be called multiple times from RenderFrameBase::layoutWithFlattening and
            we could get multiple resize events.  This patch adds a flag in FrameView to disallow sending resize events if
            we are inside layoutWithFlattening.  The resize event will be sent in performPostLayoutTasks after the iframe
            is done laying out.

            Manually tested by verifying the rendering slowness in www.hi-pda.com is fixed when frame flattening is enabled.

            * page/FrameView.cpp:
            (WebCore::FrameView::FrameView):
            (WebCore::FrameView::setFrameRect):
            * page/FrameView.h:
            (WebCore::FrameView::setResizeEventAllowed):
            (WebCore::FrameView::resizeEventAllowed):
            * rendering/RenderFrameBase.cpp:
            (WebCore::RenderFrameBase::layoutWithFlattening):

2013-07-27  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/14570111> Web inspector fails to show "overflow-scrolling: touch" as a reason for compositing when showing layers

        Reviewed by Joe Pecoraro.

        Add to the code that gets compositing reasons for the inspector
        an iOS-only clause for composited overflow-scrolling, to match
        the code that actually makes layers composited.

        (WebCore::RenderLayerCompositor::reasonsForCompositing):

2013-07-26  Dean Jackson  <dino@apple.com>

        <rdar://problem/14511404> REGRESSION (Innsbruck11A433): webkitTransitionEnd is not fired when the transition ends when the page is hidden

        Merge ToT WebKit r153396.

    2013-07-26  Dean Jackson  <dino@apple.com>

            Allow new transitions to run even when controller is suspended
            https://bugs.webkit.org/show_bug.cgi?id=119171
            <rdar://problem/14511404>

            Reviewed by Simon Fraser.

            Expose a new property on AnimationController that allows newly created
            animations to run even if the controller says it is suspended. See WebKit
            ChangeLog for more details.

            Test: transitions/created-while-suspended.html

            * WebCore.exp.in: Export the new methods so WebView can use them.
            * page/animation/AnimationController.cpp:
            (WebCore::AnimationControllerPrivate::AnimationControllerPrivate): Initialize new flag to false.
            (WebCore::AnimationControllerPrivate::startAnimationsIfNotSuspended): Check new flag is not true.
            (WebCore::AnimationControllerPrivate::setAllowsNewAnimationsWhileSuspended): Expose setter.
            (WebCore::AnimationController::allowsNewAnimationsWhileSuspended): "Public" getter.
            (WebCore::AnimationController::setAllowsNewAnimationsWhileSuspended): "Public" setter.
            * page/animation/AnimationController.h:
            * page/animation/AnimationControllerPrivate.h:
            (WebCore::AnimationControllerPrivate::allowsNewAnimationsWhileSuspended):
            * page/animation/CompositeAnimation.cpp:
            (WebCore::CompositeAnimation::CompositeAnimation): Only suspend if new flag is false. Everything else
            relies on the m_suspended flag, so the real code change is this one line.

2013-07-25  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/14524286> Movie captions jump around and change formatting

        Reviewed by Enrica Casucci.

        MediaControlTextTrackContainerElement::updateDisplay() would update
        the text track representation, which updates the captions image, before
        setting style, which caused the captions image to use the wrong width in
        some cases.
        
        Fix by moving the update of the text track representation after
        the style changes.

        * html/shadow/MediaControlElements.cpp:
        (WebCore::MediaControlTextTrackContainerElement::updateDisplay):

2013-07-25  Pratik Solanki  <psolanki@apple.com>

        Build fix after fix for <rdar://problem/14548533> 500ms wasted on PLT parsing "last-modified" HTTP headers

        Merged ToT WebKit r153340.

    2013-07-25  Pratik Solanki  <psolanki@apple.com>

        Unreviewed build fix after r153333.

        * platform/network/cf/ResourceResponseCFNet.cpp: Remove toTimeT since it is no longer called.

2013-07-25  Andreas Kling  <akling@apple.com>

        <rdar://problem/14548533> 500ms wasted on PLT parsing "last-modified" HTTP headers

        Merge ToT WebKit r153333.

    2013-07-25  Anders Carlsson  <andersca@apple.com>

            Remove lastModifiedDate from ResourceResponse
            https://bugs.webkit.org/show_bug.cgi?id=119092

            Reviewed by Andreas Kling.

            Computing m_lastResponseDate is costly on some platforms and we already have a better way to
            get the last response time, so convert the two call sites that used to call ResourceresponseBase::lastModifiedDate()
            over to using lastModified() instead.

            * platform/network/ResourceResponseBase.cpp:
            (WebCore::ResourceResponseBase::ResourceResponseBase):
            (WebCore::ResourceResponseBase::adopt):
            (WebCore::ResourceResponseBase::copyData):
            * platform/network/ResourceResponseBase.h:
            * platform/network/cf/ResourceResponseCFNet.cpp:
            (WebCore::ResourceResponse::platformLazyInit):
            * plugins/PluginStream.cpp:
            (WebCore::lastModifiedDate):
            (WebCore::PluginStream::startStream):

2013-07-25  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/14534679> RenderMenuList computes the width of its longest option twice. (119046)

        Merge ToT WebKit r153094.

    2013-07-24  Andreas Kling  <akling@apple.com>

        RenderMenuList computes the width of its longest option twice.
        <http://webkit.org/b/119046>
        <rdar://problem/14534679>

        Reviewed by Darin Adler.

        Rename the RenderMenuList::m_optionsChanged flag to m_needsOptionsWidthUpdate,
        and make sure it gets cleared after we do a width computation in response to font changes.

        * rendering/RenderMenuList.cpp:
        (WebCore::RenderMenuList::styleDidChange):

2013-07-24  Benjamin Poulain  <bpoulain@apple.com>

        <rdar://problem/14528915> REGRESSION(Innsbruck): the viewport does not scroll to keep the caret visible when it goes under MobileSafari's navigation bar

        Reviewed by Simon Fraser.

        OpenSource r148137 changed RenderLayer::scrollRectToVisible() to handle header and footer
        for OS X's continuous reading list.

        Because of the change, the visible rect used to compute what to show is based on visibleContentRect()
        instead of actualVisibleContentRect. Since visibleContentRect() has the size of the document, the caret
        was computed to be always visible.

        This patch #ifdef the part related to scrollOffsetRelativeToDocument() and just use the actualVisibleContentRect()
        as previously.

        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::scrollRectToVisible):

2013-07-24  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/14371332> Unable to view closed caption content in media files in iOS ibooks

        Merged ToT WebKit r153112.
        
        On iOS we also need to make sure that MediaControlTextTrackContainerElement has z-index,
        so that it's layer is a stacking context, which ensures that painting it will also paint
        its children.

    2013-07-24  Simon Fraser  <simon.fraser@apple.com>
    
            [iOS] Captions are clipped in documents using pagination
            https://bugs.webkit.org/show_bug.cgi?id=119072
    
            Reviewed by Beth Dakin.
    
            MediaControlTextTrackContainerElement::createTextTrackRepresentationImage() is called
            to paint captions into a layer used for fullscreen video. It did the painting using
            a subtree paint, but starting at the root RenderView's layer. This is problematic,
            because the caption painting is subject to clipping for columns, and any enclosing
            overflow:hidden container.
            
            Fix this by starting the paint at the MediaControlTextTrackContainerElement's
            renderer's layer. By doing this we don't have to worry about an offset, so no
            translation is required.
            
            Also make sure we update layer before grabbing the renderer (in case layout
            destroys it).
    
            * html/shadow/MediaControlElements.cpp:
            (WebCore::MediaControlTextTrackContainerElement::createTextTrackRepresentationImage):

2013-07-24  Daniel Bates  <dabates@apple.com>

        <rdar://problem/14499184> REGRESSION (OpenSource r152335; Innsbruck11A417): Mac Pro title occluded in MobileSafari; can't scroll page

        Merge ToT WebKit r153105.

    2013-07-24  Simon Fraser  <simon.fraser@apple.com>

        REGRESSION (r152335): Mac Pro title occluded in MobileSafari; can't scroll page
        https://bugs.webkit.org/show_bug.cgi?id=119066
        <rdar://problem/14499184>

        Reviewed by Daniel Bates.

        Following <http://trac.webkit.org/changeset/152335> (bug #118337) we set
        the z-index to 0 on every element with CSS "overflow: scroll" and
        "-webkit-overflow-scrolling: touch" regardless of whether the element has
        non-auto z-index. Instead we should only set the z-index to 0 for such elements
        that have an auto z-index.

        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::adjustRenderStyle):

2013-07-24  Enrica Casucci  <enrica@apple.com>

        WebKit should use CT API/SPI for emoji increments.
        <rdar://problem/14476692>

        Reviewed by Sam Weinig.

        CT is now providing the correct advances for emoji glyphs.
        There is no need to perform manual adjustments anymore.
        We also adopt the new SPI CTFontIsAppleColorEmoji to determine
        is the font is an Apple color emoji, which allows us to avoid
        special casing emoji when using dynamic text style fonts.

        No new tests. The goal is to have no changes in the emoji layout.

        * platform/graphics/ios/FontCacheIOS.mm:
        (WebCore::FontCache::getSystemFontFallbackForCharacters):
        (WebCore::FontCache::createFontPlatformData):
        * platform/graphics/ios/SimpleFontDataIOS.mm:
        (WebCore::SimpleFontData::platformWidthForGlyph):

2013-07-24  Eric Carlson  <eric.carlson@apple.com>

        <rdar://problem/14485332> 11A430 - captions are positioned incorrectly after exiting from fullscreen

        Reviewed by Enrica Casucci.

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::parseAttribute): Call didBecomeFullscreenElement, willStopBeingFullscreenElement.

2013-07-24  Beth Dakin  <bdakin@apple.com>

        <rdar://problem/12469203> Sticky Positioning: sticky element position only updated 
        when not scrolling in "-webkit-overflow-scrolling: touch" container

        Reviewed by Simon Fraser.

        WebKit needs to be able to position the layers for sticky objects that are inside 
        accelerated overflow areas. In order to do that it needs to know about those 
        layers.

        updateViewportConstrainedLayers() now also takes a HashMap that maps layers for 
        sticky objects to the layers for the enclosing overflow areas. 
        * page/ChromeClient.h:
        (WebCore::ChromeClient::updateViewportConstrainedLayers):

        This code creates that new HashMap.
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::isStickyInAcceleratedScrollingLayerOrViewport):
        (WebCore::isViewportConstrainedFixedOrStickyLayer):
        (WebCore::RenderLayerCompositor::computeStickyViewportConstraints):
        (WebCore::RenderLayerCompositor::registerAllViewportConstrainedLayers):
        (WebCore::RenderLayerCompositor::unregisterAllViewportConstrainedLayers):

2013-07-24  Joseph Pecoraro  <pecoraro@apple.com>

        <rdar://problem/11374318> Crash in WebCore::Page::setDeviceScaleFactor

        Reviewed by David Kilzer.

        Send the WAKWindowScreenScaleDidChangeNotification notification on the
        WebThread. All WebViews listen for this notification and a mid-dealloc
        closing WebView might inadvertently handle this and the multi-threaded
        access to the WebView internals (or even WebCore later on) can cause
        a crash.

        * wak/WAKWindow.mm:
        (-[WAKWindow setScreenScale:]):

2013-07-24  Eric Carlson  <eric.carlson@apple.com>

        <rdar://problem/14485332> 11A430 - captions are positioned incorrectly after exiting from fullscreen
        
        Merge ToT WebKit r152975.

    2013-07-22  Eric Carlson  <eric.carlson@apple.com>

            [iOS] captions sometimes positioned incorrectly after fullscreen state change
            https://bugs.webkit.org/show_bug.cgi?id=118912

            Reviewed by Jer Noble.

            * html/shadow/MediaControlElements.cpp:
            (WebCore::MediaControlTextTrackContainerElement::updateDisplay): Call clearTextTrackRepresentation.
            (WebCore::MediaControlTextTrackContainerElement::updateTimerFired): Call updateDisplay so
                cues are re-rendered with the updated size.
            (WebCore::MediaControlTextTrackContainerElement::clearTextTrackRepresentation): Cleanup the
                text track representation.
            (WebCore::MediaControlTextTrackContainerElement::enteredFullscreen): New, force cues to be updated.
            (WebCore::MediaControlTextTrackContainerElement::exitedFullscreen): Ditto.
            * html/shadow/MediaControlElements.h:

            * html/shadow/MediaControls.cpp:
            (WebCore::MediaControls::enteredFullscreen): Call MediaControlTextTrackContainerElement::enteredFullscreen.
            (WebCore::MediaControls::exitedFullscreen): Call MediaControlTextTrackContainerElement::exitedFullscreen.

2013-07-22  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/14497942> REGRESSION: Some sites aren't painting correctly on rotation (CNN, WSJ, Twitter)
        
        Reviewed by Ian Henderson, Benjamin Poulain.

        RenderLayerCompositor was using actualVisibleContentRect() to determing the visible extent
        used to compute TileController extent. However, this doesn't take into account translucent
        UI elements that overlap the web content. To take those into account, we need to use
        WAKWindow's -extendedVisibleRect, whic is exposed via a new function on ScrollView.

        * platform/ScrollView.h:
        * platform/ios/ScrollViewIOS.mm:
        (WebCore::ScrollView::visibleExtentContentRect):
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::flushPendingLayerChanges):
        (WebCore::RenderLayerCompositor::didChangeVisibleRect):

2013-07-22  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/14268416> CachedScript::script() does too much with timers

        These patches reduce the time spent in CachedScript::script() from 65ms to 18ms on
        N90/11A434. This helps a bit towards our Innbruck/P1 launch time goal in
        <rdar://problem/14072874>.

        Merged ToT WebKit r152148, r152219.

    2013-07-01  Antti Koivisto  <antti@apple.com>

        Use DeferrableOneShotTimer for deleting decoded data
        https://bugs.webkit.org/show_bug.cgi?id=118150

        Reviewed by Andreas Kling.

        Adam Barth pointed out that the virtual function for overriding the default delay doesn't work
        as expected from base class constructor.

        * loader/cache/CachedResource.cpp:
        (WebCore::deadDecodedDataDeletionIntervalForResourceType):
        (WebCore::CachedResource::CachedResource):
        
            Use static function instead of calling a virtual.

        * loader/cache/CachedResource.h:
        * loader/cache/CachedScript.cpp:
        * loader/cache/CachedScript.h:

    2013-06-27  Antti Koivisto  <antti@apple.com>

        Use DeferrableOneShotTimer for deleting decoded data
        https://bugs.webkit.org/show_bug.cgi?id=118150

        Reviewed by Andreas Kling.

        Up to 1% of page load time can be used under CachedScript::script() for restarting
        the decoded data deletion timer.
        
        Using DeferrableOneShotTimer instead of a plain Timer avoids unnecessary low level timer access.

        * loader/cache/CachedResource.cpp:
        (WebCore::CachedResource::CachedResource):
        (WebCore::CachedResource::destroyDecodedDataIfNeeded):
        (WebCore::CachedResource::decodedDataDeletionTimerFired):
        (WebCore::CachedResource::decodedDataDeletionTimerDelay):

            Adopt DeferrableOneShotTimer.

        * loader/cache/CachedResource.h:
        * loader/cache/CachedScript.cpp:
        (WebCore::CachedScript::script):
        (WebCore::CachedScript::decodedDataDeletionTimerDelay):
        
            Keep using zero delay for scripts.

        * platform/Timer.h:
        (WebCore::DeferrableOneShotTimer::stop):
        
            Avoid unnecessary restart after stopping and starting again.

2013-07-19  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/14456509> safarifetcherd crashes if [ReadingListFetcherDocument webView:didFinishLoadForFrame:] delegate takes more than 10 sec.

        CFRunLoopCopyCurrentMode(CFRunLoopGetMain()) returns null string in safarifetcherd if the main thread doesn't return quickly from the
        delegate callback.  Null-check variable mode before release it with CFRelease.

        Reviewed by Dan Bernstein.

        * wak/WebCoreThread.mm:
        (SendDelegateMessage):

2013-07-20  Jer Noble  <jer.noble@apple.com>

        <rdar://problem/14500796> Caption background obscures video content in full screen media playback in iOS iBooks.

        Merge ToT WebKit r152943

    2013-07-19  Jer Noble  <jer.noble@apple.com>

            Pagination: Do not paint the baseBackgroundColor if asked to skipRootBackground.
            https://bugs.webkit.org/show_bug.cgi?id=118933

            Reviewed by Simon Fraser.

            Captions rendered through TextTrackRepresentation are rendered with a background
            color when in paginated views. Do not fill the paint area with the
            baseBackgroundColor when the paint flags include SkipRootBackground.

            * rendering/RenderView.cpp:
            (WebCore::RenderView::paint):

2013-07-19  Enrica Casucci  <enrica@apple.com>

        11A395: Overlapping lines in Mail when elements have a larger font size (e.g. headings; affects all emailed Reader pages)
        <rdar://problem/14134987>

        Reviewed by Dan Bernstein.

        Test: platform/iphone-simulator/iphone/fast/text/textStylesWithSizes.html
        
        When we are asking for a font size that is different from the one that
        -apple-system-body returns for a given text size, we create a FontPlatformData
        object that contains the new size, but we still use the same font object
        we have for -apple-system-body, that represents a font of a different size.
        We then draw the font with the new size, but we use the font metrics
        from the font object, hence the discrepancy in computing the line height
        and the resulting ovelapping lines.
        The fix consist in passing size to CTFontCreateWithFontDescriptor. Size
        is the default size for the given text style at the given text size,
        unless otherwise indicated by the CSS property.

        * platform/graphics/ios/FontCacheIOS.mm:
        (WebCore::createCTFontWithTextStyle):
        (WebCore::FontCache::createFontPlatformData):

2013-07-19  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/14447779> Sticky header jumps around when scrolling while a song is being previewed

        Reviewed by Dan Bernstein.

        Every time RenderLayerCompositor flushes layers, we push new fixed and sticky state
        over to WebFixedPositionContent, so this happens every time we do layout and painting
        that affect compositing layers.
        
        The ViewportConstraints (which describe how to reposition fixed and sticky layers
        on scrolling) encode state from the last layout (including the GraphicsLayer position);
        during iOS scrolling, layer offsets are then computed using deltas on that state.
        
        However, this broke on pages with position:-webkit-sticky that were painting, because
        RenderBoxModelObject::stickyPositionOffset() was computing things relative to
        frameView()->actualVisibleContentRect(), which computes the visible rect by looking
        at layers so changes while iOS scrolling happens. This code should have been using
        frameView()->customFixedPositionLayoutRect(), as we do elsewhere for sticky, because
        that is only updated at layout time, not during iOS scrolling.

        * rendering/RenderBoxModelObject.cpp:
        (WebCore::RenderBoxModelObject::stickyPositionOffset):

2013-07-18  Dean Jackson  <dino@apple.com>

        <rdar://problem/14405375> apple logo is not always displayed in mail

        Reviewed by Enrica Casucci.

        Swap to using Helvetica Neue for looking up the Apple logo, since it
        has a broader ranges of weights (that include that glyph).

        Test: platform/iphone-simulator/iphone/fast/text/apple-logo.html

        * platform/graphics/ios/FontCacheIOS.mm:
        (WebCore::FontCache::getCustomFallbackFont): Use Helvetica Neue.

2013-07-18  Antoine Quint  <graouts@apple.com>

        <rdar://problem/14468365> iBooks crashes in WebCore::createMarkup double-tapping an image to enter fullscreen

        Merge ToT WebKit r152858.

    2013-07-18  Antoine Quint  <graouts@apple.com>

    Crash in WebCore::createMarkup()
    https://bugs.webkit.org/show_bug.cgi?id=118847

    Reviewed by Ryosuke Niwa.

    Also check that we have a containingBlock() for the renderer() so that we
    may safely call node() on it.

    * editing/markup.cpp:
    (WebCore::highestAncestorToWrapMarkup):

2013-07-18  Antoine Quint  <graouts@apple.com>

        <rdar://problem/13398909> Safari crashed in WebCore::Range::collectSelectionRects

        Based on crash reports we've gotten from Innsbruck seeds, we may run into a
        startContainer with no associated RenderObject. We now check for a renderer()
        on the node before querying properties of its RenderStyle.

        Reviewed by Timothy Hatcher.

        * dom/Range.cpp:
        (WebCore::Range::collectSelectionRects):

2013-07-17  Simon Fraser  <simon.fraser@apple.com>

        Minor improvement for:
        <rdar://problem/14416839> J2: Momentum scrolling on iTunes Store search results is still worse than Brighton (also affects Google News, Netflix app)

        Merged TOT WebKit r152806.

    2013-07-17  Simon Fraser  <simon.fraser@apple.com>
    
            Optimize RenderLayerCompositor's OverlapMap
            https://bugs.webkit.org/show_bug.cgi?id=118764
    
            Reviewed by Tim Horton.
    
            Overlap stack items can have RectLists with hundreds of rectangles.
            This makes the linear search in OverlapMap::overlapsLayers() very slow.
            
            Optimize by storing the bounding rect of the list of rects, and doing an early
            check on that. This reduces time spent in RenderLayer::scrollTo() by 13% in some
            content with lots of layers inside an overflow:scroll.
    
            * rendering/RenderLayerCompositor.cpp:
            (WebCore::RenderLayerCompositor::OverlapMap::overlapsLayers):
            (WebCore::RenderLayerCompositor::OverlapMap::popCompositingContainer):
            (WebCore::RenderLayerCompositor::OverlapMap::RectList::append):
            (WebCore::RenderLayerCompositor::OverlapMap::RectList::intersects):

2013-07-17  Joseph Pecoraro  <pecoraro@apple.com>

        <rdar://problem/14471997> REGRESSION (Innsbruck): <input type="date"> text too close to menubutton edge

        Reviewed by Ian Henderson.

        Remove some Date and Time input styles added in OpenSource that are
        not expected for the iOS date and time form controls.

        * css/html.css:

2013-07-16  Andreas Kling  <akling@apple.com>

        <rdar://problem/14324231> REGRESSION (OpenSource r128468, Innsbruck11A193): :active with empty touchstart doesn't work in Innsbruck

        Reviewed by Daniel Bates.

        Prior to OpenSource r128468, hit testing would implicitly update the Document's hovered/active element state.
        Now this must be done manually after hit testing, so fix up the iOS-specific implementation of handleTouchEvent()
        to do just that.

        Also call through RenderView::hitTest() instead of RenderView::layer()->hitTest() to match the rest of EventHandler.

        Test: platform/iphone-simulator/iphone/fast/events/touch/ontouchstart-active-selector.html

        * page/ios/EventHandlerIOSTouch.cpp:
        (WebCore::EventHandler::handleTouchEvent):

2013-07-17  Anders Carlsson  <andersca@apple.com>

        <rdar://problem/14468460> Crash below ResourceHandle::platformLoadResourceSynchronously() at istweb.apple.com, cnn.com when preloading data usage tracking is enabled

        Reviewed by Dan Bernstein.

        Remove the workaround for synchronous resources.

        * platform/network/cf/ResourceHandleCFNet.cpp:
        (WebCore::ResourceHandle::platformLoadResourceSynchronously):

2013-07-16  Jeffrey Pfau  <jpfau@apple.com>

        <rdar://problem/14455263> Embedded YouTube videos not layout correctly

        Reviewed by Yongjun Zhang.

        Removing the height: 100% property in r1219841 regressed the video
        height being set correctly. Adding it back on top of changes in that
        revision fixes the problem once more.

        No new tests; no change in functionality.

        * html/HTMLPlugInImageElement.cpp:
        (WebCore::HTMLPlugInImageElement::createShadowIFrameSubtree):

2013-07-16  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/14402651> Crash in MobileSafari at WebKit: LayerFlushController::flushLayers + 72

        Merged TOT WebKit r152733.

    2013-07-16  Simon Fraser  <simon.fraser@apple.com>
    
            Protect against the LayerFlushController being deleted inside its flushLayers() callback
            https://bugs.webkit.org/show_bug.cgi?id=118741
    
            Reviewed by Tim Horton.
    
            It's possible (especially on iOS) for the LayerFlushController to be destroyed
            inside its callback, via -[WebView _close]. Protect against this by making
            it refcounted, and holding a ref across the callback.
            
            Due to the odd relationship in which LayerFlushController owns its LayerFlushScheduler
            by value, we achieve this by allowing subclasses of LayerFlushScheduler
            to override runLoopObserverCallback(). WebViewLayerFlushScheduler uses the
            override to protect the owner of the LayerFlushScheduler, which is the
            LayerFlushController, when the callback is firing.
    
            * WebCore.exp.in:
            * platform/graphics/ca/LayerFlushScheduler.h: Make runLoopObserverCallback() and the dtor virtual.

2013-07-15  Joseph Pecoraro  <pecoraro@apple.com>

        <rdar://problem/14449694> CTFontDescriptorRef Leak allocated under WebCore::FontCache::createFontPlatformData

        Adopt the the CTFontDescriptorCreateCopyWithSymbolicTraits into the RetainPtr.

        Reviewed by Pratik Solanki.

        * platform/graphics/ios/FontCacheIOS.mm:
        (WebCore::createCTFontForUsage):
        (WebCore::createCTFontWithTextStyle):

2013-07-15  Dean Jackson  <dino@apple.com>

        <rdar://problem/14405859> Underline thickness should adapt to system font sizes/weights

        Reviewed by Tim Horton.

        Scale the thickness of underlines as the text size changes. We use 16px as
        the reference point.

        Test: platform/iphone-simulator/iphone/fast/text/underline-scaling.html

        * platform/graphics/cg/GraphicsContextCG.cpp:
        (WebCore::GraphicsContext::platformInit): Clean up the comments a bit, and also
        make sure that as the thickness increases so does the offset of the line.
        * rendering/InlineTextBox.cpp:
        (WebCore::InlineTextBox::paintDecoration): Use the fontSize as a multiplier into
        the calculated thickness.

2013-07-15  Dean Jackson  <dino@apple.com>

        <rdar://problem/14327518> Use new CT constant for Thin and Light system fonts when available

        Reviewed by Simon Fraser.

        Use the CoreText constants for selecting the Thin and Light variants of the
        system font. While there, add the ability to select the Ultra Light variant.
        This meant I had to bump Light from 100 to 200.

        Covered by platform/iphone-simulator/iphone/fast/text/opticalFontWithWeight.html

        * platform/graphics/ios/FontCacheIOS.mm:
        (WebCore::createCTFontWithFamilyNameAndWeight): Use the CoreText constants. It's a pain
        I have to cast them, but the code in UIFoundation is similar.

2013-07-15  Antoine Quint  <graouts@apple.com>

        <rdar://problem/14429714> REGRESSION(Innsbruck): Ellipsized text in web font is garbled on m.simon.com

        Merge ToT WebKit r152653.

    2013-07-15  Antoine Quint  <graouts@apple.com>

        Text with "text-overflow:ellipsis" and an SVG font do not render correctly
        https://bugs.webkit.org/show_bug.cgi?id=118669

        Reviewed by David Kilzer.

        Partial runs may be routed through the complex path in several Font functions. While incomplete,
        we can check for a non-NULL run.renderingContext() and exempt runs that have it from being forced
        down the complex path. A more thorough fix is already tracked by http://webkit.org/b/100050.

        Adding a new testcase which is a copy of svg/text/text-overflow-ellipsis-svgfont.html with kerning
        and ligatures turned on explicitly since DRT runs with those off by default and this option is required
        to be on for the issue to reproduce.

        Fix courtesy of Dan Bernstein.

        Test: svg/text/text-overflow-ellipsis-svgfont-kerning-ligatures.html

        * platform/graphics/Font.cpp:
        (WebCore::Font::drawText):
        (WebCore::Font::drawEmphasisMarks):
        (WebCore::Font::selectionRectForText):

2013-07-15  Anders Carlsson  <andersca@apple.com>

        Fix build.

        * platform/network/cf/ResourceHandleCFNet.cpp:
        (WebCore::ResourceHandle::platformLoadResourceSynchronously):

2013-07-15  Anders Carlsson  <andersca@apple.com>

        Turn off data usage tracking for sync XHR to work around <rdar://problem/14439239>.

        Reviewed by Dan Bernstein.

        Change connectionProperties to return a RetainPtr to better indicate the ownership.
        Turn off data tracking in ResourceHandle::platformLoadResourceSynchronously.

        * loader/EmptyClients.h:
        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::connectionProperties):
        * loader/FrameLoader.h:
        * loader/FrameLoaderClient.h:
        * loader/ResourceLoader.cpp:
        (WebCore::ResourceLoader::connectionProperties):
        * loader/ResourceLoader.h:
        * platform/network/ResourceHandleClient.h:
        (WebCore::ResourceHandleClient::connectionProperties):
        * platform/network/cf/ResourceHandleCFNet.cpp:
        (WebCore::ResourceHandle::createCFURLConnection):
        (WebCore::ResourceHandle::start):
        (WebCore::ResourceHandle::platformLoadResourceSynchronously):

2013-07-15  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/14433865> Reproducible crash tearing down UIWebView showing youtube.com

        Reviewed by Pratik Solanki.

        Fix crash that was observed in a test app that makes a UIWebView, loads http://youtube.com, then
        tears down the web view repeatedly, by null-checking the window's Frame.

        * page/DOMWindow.cpp:
        (WebCore::DOMWindow::incrementScrollEventListenersCount):
        (WebCore::DOMWindow::decrementScrollEventListenersCount):

2013-07-12  Eric Carlson  <eric.carlson@apple.com>

        Merge open source r152607.

    2013-07-12  Eric Carlson  <eric.carlson@apple.com>

            [iOS] TextTrackRepresentation not cleared when captions are disabled
            https://bugs.webkit.org/show_bug.cgi?id=118623

            Reviewed by Dean Jackson.

            * html/shadow/MediaControlElements.cpp:
            (WebCore::MediaControlTextTrackContainerElement::updateDisplay): Do not return immediately
                when captions are disabled so the necessary cleanup happens.

2013-07-12  Dean Jackson  <dino@apple.com>

        <rdar://problem/14299118> Eliminate old headline1/2 and subheadline1/2 properties

        Reviewed by Eric Carlson.

        Cleanup after <rdar://problem/14292069> now that all the clients are
        using the new keywords.

        * css/CSSValueKeywords.in: Remove old keywords.
        * rendering/RenderThemeIOS.mm: Remove code that handled old keywords.
        (WebCore::RenderThemeIOS::systemFont):

2013-07-11  Dean Jackson  <dino@apple.com>

        <rdar://problem/14383435> Scale underline stroke width proportionally with page

        Reviewed by Sam Weinig.

        Rather than always have the underline thickness be one device pixel, have it
        change in proportion to the page zoom/scale. We still clamp to integer pixel
        values, which allows retina devices to draw underlines in 0.5 CSS px steps.

        This effectively reverts Enrica's change from <rdar://problem/13930868>.

        * rendering/InlineTextBox.cpp:
        (WebCore::InlineTextBox::paintDecoration): All text decorations (underlines,
        overlines, strike throughs) should pass a stroke thickness in device
        pixels to GraphicsContext::drawLineForText. Simply rounding the stroke width
        to the page scale gives crisp underlines. A value of 0 is clamped in the
        callee.

2013-07-12  Eric Carlson  <eric.carlson@apple.com>

        <rdar://problem/14428791> Illegible URL displayed as media title on lock screen when resuming YouTube playback

        Reviewed by Pratik Solanki.

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::parseAttribute): Pass @title to the media engine.
        (WebCore::HTMLMediaElement::getPluginProxyParams): Ditto.

2013-07-11  Dan Bernstein  <mitz@apple.com>

        Merged TOT WebKit r152579.

    2013-07-11  Dan Bernstein  <mitz@apple.com>

        [mac] No API for getting the page visibility state of a WebView
        https://bugs.webkit.org/show_bug.cgi?id=118578

        Reviewed by Simon Fraser.

        * WebCore.exp.in: Export WebCore::Page::visibilityState().

2013-07-11  Andreas Kling  <akling@apple.com>

        <rdar://problem/14277905> REGRESSION (OpenSource r149313; Innsbruck11A402): Apple.com masthead image goes underneath site's nav bar when rotating from portrait to landscape/media query not re-evaluated after device rotation

        Merge open source r152464.

            Revert r149313: Don't check for @media rules affected by viewport changes in every layout.
            <rdar://problem/14277905>

            Rubber-stamped by Antti Koivisto.

            This changed caused more harm than good. setFrameRect() is not the only path in FrameView
            that can cause media queries to need invalidation.

            * page/FrameView.cpp:
            (WebCore::FrameView::setFrameRect):
            (WebCore::FrameView::layout):

2013-07-10  Antti Koivisto  <antti@apple.com>

        <rdar://problem/14352304> REGRESSION(Innsbruck): Bad tiling of fixed layout books with iBooks 3.1 GM

        Reviewed by Ian Henderson.

        iBooks uses custom scrollview for zooming. We never get signaled for zoom start or end so don't go into
        zooming mode. It could call [UIWebDocumentView redrawScaledDocument] explicitly (like Mail does) but we
        can do a safe WebCore side fix too. Not sure how this ever worked.

        * platform/ios/TileCache.mm:
        (WebCore::TileCache::setCurrentScale):
        
            If the scale changes while tile updates are enabled (not in zooming state) invalidate all tiles immediately. This
            is done on code path for single TileGrid only so can't affect Safari contents view. It also doesn't affect any regular
            UIWebView clients as they will be in zooming state (nor anything that doesn't do zooming obviously).

2013-07-08  Enrica Casucci  <enrica@apple.com>

        <rdar://problem/14160912> REGRESSION: It is not possible to delete images by using the delete button in editing
        
        Merge OpenSource r152478.
        
    2013-07-08  Enrica Casucci  <enrica@apple.com>

            DeleteSelectionCommand does not handle correctly deletion with two consecutive BR element.
            https://bugs.webkit.org/show_bug.cgi?id=118457
            <rdar://problem/14160912>

            Reviewed by Simon Fraser.

            In DeleteSelectionCommand::handleSpecialCareBRDelete we did not
            handle correctly the case where we had <br><br> in the markup and
            nothing was being deleted. We should consider this like
            the case where the <br> is on the line by itself and remove it.

            Test: editing/deleting/delete-image-followed-by-two-br.html

            * editing/DeleteSelectionCommand.cpp:
            (WebCore::DeleteSelectionCommand::handleSpecialCaseBRDelete):

2013-07-08  Chris Fleizach  <cfleizach@apple.com>

        <rdar://problem/14160530> WEB: AX: Placement of VoiceOver cursor for accessibilityPath is incorrect in Web SVG
        
        Merge open source r152464.

    2013-07-08  Chris Fleizach  <cfleizach@apple.com>

            AX: iOS: SVG paths are not offset by the parent bounding box
            https://bugs.webkit.org/show_bug.cgi?id=118433

            The path for SVG shapes is in terms of its parent's view space. We need to offset
            the path by that amount so that it's in the right location.

            Reviewed by Tim Horton.

            * accessibility/AccessibilityRenderObject.cpp:
            (WebCore::AccessibilityRenderObject::elementPath):

2013-07-08  Antti Koivisto  <antti@apple.com>

        <rdar://problem/14366932> REGRESSION?: Safari hung scrolling through continuous reading list mode (main thread blocked on Web thread blocked on background thread pruning TileLayerPool)

        Reviewed by Andreas Kling.

        Use Deque::removeLast() instead of remove() to make prune O(n) intead of O(n^2).

        * platform/ios/TileLayerPool.mm:
        (WebCore::TileLayerPool::prune):

2013-07-07  Benjamin Poulain  <bpoulain@apple.com>

        Put back two commits I accidentally reverted while investingating <rdar://problem/14368248>.

2013-07-01  Antti Koivisto  <antti@apple.com>

        <rdar://problem/14281888> REGRESSION (Innsbruck): Page goes momentarily white when transitioning to a subpage on theverge.com
        
        Merge open source r152401.

    2013-07-01  Antti Koivisto  <antti@apple.com>

            Take document height into account when determining when it is considered visually non-empy
            https://bugs.webkit.org/show_bug.cgi?id=118272

            Reviewed by Darin Adler.

            The current visually non-empy mechanism takes into account only the amount of contents in renderers. 
            Add a simple layout dependency so that we don't consider page non-empty until the document height
            exceed a (low) height threshold (or the load completes).

            * page/FrameView.cpp:
            (WebCore::FrameView::performPostLayoutTasks):
            
                Don't send layout callbacks until we have actually some content.

            (WebCore::FrameView::qualifiesAsVisuallyNonEmpty):
            (WebCore::FrameView::updateIsVisuallyNonEmpty):
            
                Factor into functions.

            * page/FrameView.h:
            (WebCore::FrameView::incrementVisuallyNonEmptyCharacterCount):
            (WebCore::FrameView::incrementVisuallyNonEmptyPixelCount):
            * rendering/RenderEmbeddedObject.cpp:
            (WebCore::RenderEmbeddedObject::RenderEmbeddedObject):
            * rendering/RenderHTMLCanvas.cpp:
            (WebCore::RenderHTMLCanvas::RenderHTMLCanvas):
            
                 The size is not known but the estimate provided here is always bigger than the threshold so
                 the functionality is unchanged.

2013-07-07  Benjamin Poulain  <bpoulain@apple.com>

        Don't erroneously pass null scrollrect to WebCore

        Reviewed by Dan Bernstein.

        For:
        <rdar://problem/14368248> REGRESSION(11A419): iTunes Movie Trailers previews are not rendering
        <rdar://problem/14368481> REGRESSION(11A419): iPad Google Image search does not display any images

        * wak/WAKWindow.mm:
        (-[WAKWindow exposedScrollViewRect]):
        CGRectIsNull returns true if x or y is infinite. Consequently, CGRectIsNull is always returning false
        in exposedScrollViewRect, and we return an invalid rect on anything but Safari on iPhone.

        Initialize _exposedScrollViewRect to CGRectNull to avoid the issue.

2013-07-07  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/13110197> REGRESSION: <canvas> fishtank test regressed 36% on N90 (10b329 vs. 11A308)

        Reviewed by Yongjun Zhang.

        This reverts the change for iOS WebKit r1160876 (see
        <rdar://problem/12529059>) since kCGImageCachingTemporary isn't
        actually the default on iOS.  Un-deprecating the enum is tracked
        by <rdar://problem/14366755>.

        * platform/graphics/cg/ImageSourceCG.cpp:
        (WebCore::ImageSource::createFrameAtIndex): Add back the call to
        CGImageSetCachingFlags() to set kCGImageCachingTemporary on the
        image.  Add #pragma statements to ignore deprecation warnings.

2013-07-06  Andy Estes  <aestes@apple.com>

        <rdar://problem/14224654> Crash viewing message in WebCore: WebCore::ResourceLoadScheduler::servePendingRequests(WebCore::ResourceLoadScheduler::HostInformation*, WebCore::ResourceLoadPriority) + 70 (RefPtr.h:44)

        Reviewed by Yongjun Zhang.

        If a resource load fails during initialization we end up re-entering
        ResourceLoadScheduler::servePendingRequests(), which might delete the
        HostInformation object that is currently being scheduled.

        Avoid this by tracking whether the resource load was cancelled during
        initialization and avoid re-entering servePendingRequests() while in
        that state (on iOS we know that ResourceLoader initialization happens
        inside servePendingRequests()).

        * loader/SubresourceLoader.cpp:
        (WebCore::SubresourceLoader::willCancel): Set m_state to
        CancelledWhileInitializing rather than Finishing if m_state was
        previously Uninitialized.
        (WebCore::SubresourceLoader::notifyDone): Called with
        shouldPerformPostLoadActions set to false if m_state is
        CancelledWhileInitializing.
        (WebCore::SubresourceLoader::releaseResources): Stopped calling
        CachedResource::clearLoader() if m_state is CancelledWhileInitializing
        (since the resource's loader is still being initialized at this point).
        * loader/SubresourceLoader.h: Added CancelledWhileInitializing to
        SubresourceLoaderState.
        * loader/cache/CachedResourceLoader.cpp:
        (WebCore::CachedResourceLoader::loadDone): Called
        performPostLoadActions() only if shouldPerformPostLoadActions is true.
        * loader/cache/CachedResourceLoader.h: Renamed the
        doPostLoadActionsAsynchronously argument to loadDone() to
        shouldPerformPostLoadActions.

2013-07-05  Conrad Shultz  <conrad_shultz@apple.com>

        WebCore part of <rdar://problem/13591481> Continuous Reading List: Reenter Continuous mode if returning via back/forward navigation

        Reviewed by Anton D'Auria.

        Add API for tracking the bookmark ID and shared link identifier in HistoryItems.

        * history/HistoryItem.cpp:
        (WebCore::HistoryItem::HistoryItem):
        Initialize m_bookmarkID; copy m_sharedLinkUniqueIdentifier as needed.

        * history/HistoryItem.h:
        (WebCore::HistoryItem::bookmarkID):
        New accessor.
        (WebCore::HistoryItem::setBookmarkID):
        Ditto.
        (WebCore::HistoryItem::sharedLinkUniqueIdentifier):
        Ditto.
        (WebCore::HistoryItem::setSharedLinkUniqueIdentifier):
        Ditto.

2013-07-04  Benjamin Poulain  <bpoulain@apple.com>

        Reconcile WAK's innerWindow rect with reality

        Reviewed by Ian Henderson.

        In WebKit/WAK, it is assumed that UIScrollView's scroll area correspond
        to the ScrollView scroll area.

        In Safari, this is assumption was shattered with the new UI. First, the document
        does not start at (0, 0), but at (0, 44) (to accomodate for the navigation bar).
        The second issue is the geometry can change at any time from the small rect with bars,
        to a larger rect without bar, and vice versa.

        The disconnect between [WAKWindow visibleRect] and the real rect causes bugs for all the APIs
        that rely on the scroll offset of ScrollView (scrolling, showing the visible rect, hit testing, etc).

        To solve the issue, WAKWindow gets a new API for getting the useful part of the visible rect.
        Safari can push this rect every time the UI is updated to have a consistent state of the UI.

        This is for <rdar://problem/14148572> and is a step on the way of fixing <rdar://problem/13985064>.

        * wak/WAKScrollView.mm:
        (-[WAKScrollView actualDocumentVisibleRect]):
        * wak/WAKWindow.h:
        * wak/WAKWindow.mm:
        (-[WAKWindow initWithLayer:]):
        (-[WAKWindow setExposedScrollViewRect:]):
        (-[WAKWindow exposedScrollViewRect]):

2013-07-01  Antti Koivisto  <antti@apple.com>

        <rdar://problem/14281888> REGRESSION (Innsbruck): Page goes momentarily white when transitioning to a subpage on theverge.com

        Reviewed by David Kilzer.

        The UIWebDocumentView webView:didReceiveViewportArguments: delegate can get invoked before the load commit delegate fires. 
        UIKit side still thinks we are on the previous page and proceeds to trigger a paint. The commit delegate disabled painting
        too late, resulting in white flash.
        
        Trying to do this from UIKit side only is not reliable.

        * page/FrameView.cpp:
        (WebCore::FrameView::clear):
            
            Disable painting from the web thread side when the frameview is cleared in the beginning of committing to a new page load.
            
        * platform/ios/ScrollViewIOS.mm:
        (WebCore::ScrollView::tileCache):
        
            Make tile cache pointer available via main frame only. Tile cache interaction should be managed by the main frame and this
            avoids having to add parent checks to all call sites.

2013-07-02  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/14133982> Innsbruck: Can't dismiss the "Explore Titles Related to..." overlay in Netflix
        <rdar://problem/14212331> Scrolling iTunes Store search results fps plummets to 1-2fps in some circumstances (also affects Google News, Netflix app)

        Merge Open Source r152335.

    2013-07-02  Simon Fraser  <simon.fraser@apple.com>
    
            Don't set z-index: 0 on lots of elements with -webkit-overflow-scrolling: touch
            https://bugs.webkit.org/show_bug.cgi?id=118337
    
            Reviewed by Benjamin Poulain.
    
            -webkit-overflow-scrolling: touch is an inherited property that, on iOS, controls
            the behavior of overflow scrolling content, and causes overflow scrolling elements
            to become CSS stacking contexts.
             
            However, the code was too aggressive in setting style->setZIndex(0), doing so
            for any element with overflow != hidden. Since the default for overflow is visible,
            that meant almost every element.
            
            Previously, this didn't really matter. However, since r125693, any renderer with non-auto
            z-index gets a RenderLayer, and that RenderLayer will become a stacking context. The result
            was too many RenderLayers and incorrect stacking context behavior.
            
            Fix by ensuring that -webkit-overflow-scrolling: touch  only affects elements which
            are actually scrollable.
            
            Also move the code that does this to below the code that adjust overflow style
            for different elements.
    
            * css/StyleResolver.cpp:
            (WebCore::isScrollableOverflow):
            (WebCore::StyleResolver::adjustRenderStyle):

2013-07-02  Joseph Pecoraro  <pecoraro@apple.com>

        <rdar://problem/14313974> REGRESSION (11A409-11A412): Can't attach photos to message on gmail.com

        Merge Open Source 151799.

    2013-06-20  Commit Queue  <commit-queue@webkit.org>

            Unreviewed, rolling out r151451.
            http://trac.webkit.org/changeset/151451
            https://bugs.webkit.org/show_bug.cgi?id=117848

            "Broke quite a lot of sites" (Requested by rhogan on #webkit).

            * rendering/RenderBox.cpp:
            (WebCore::RenderBox::computePositionedLogicalWidth):
            (WebCore::RenderBox::computePositionedLogicalHeight):
            * rendering/RenderBox.h:
            (WebCore::RenderBox::intrinsicSize):
            * rendering/RenderButton.h:
            * rendering/RenderListBox.cpp:
            (WebCore::RenderListBox::RenderListBox):
            (WebCore::RenderListBox::computeLogicalHeight):
            * rendering/RenderListBox.h:
            * rendering/RenderMenuList.h:
            * rendering/RenderReplaced.h:
            * rendering/RenderTextControl.cpp:
            (WebCore::RenderTextControl::RenderTextControl):
            (WebCore::RenderTextControl::computeLogicalHeight):
            * rendering/RenderTextControl.h:

2013-07-02  Joseph Pecoraro  <pecoraro@apple.com>

        <rdar://problem/14328488> Unexpected iOS and OpenSource diff in SVG files - duplicated lines

        Reviewed by Darin Adler and Dan Bernstein.

        * rendering/svg/SVGInlineTextBox.cpp:
        (WebCore::SVGInlineTextBox::constructTextRun):
        * rendering/svg/SVGTextMetrics.cpp:
        (WebCore::SVGTextMetrics::constructTextRun):

2013-07-01  Joseph Pecoraro  <pecoraro@apple.com>

        <rdar://problem/14308371> Gracefully handle dropping support for <input type="datetime">

        Remove the fixed width style on each individual date time type for iOS.
        Don't take any of the "week" styles on iOS, to match previous behavior.
        We can drop our custom menulist-button appearance styles since each
        enabled input type does that now.

        Reviewed by Jon Lee.

        * css/html.css:
        (input[type="date"]):
        (input[type="datetime"]):
        (input[type="datetime-local"]):
        (input[type="month"]):
        (input[type="time"]):

2013-07-01  Joseph Pecoraro  <pecoraro@apple.com>

        <rdar://problem/14308371> Gracefully handle dropping support for <input type="datetime">

        Drop the ENABLE so that <input type="datetime"> fallsback to the
        appearance of an <input type="text">. It was already handling like
        a textfield due to RuntimeEnabledFeatures.

        Reviewed by Jon Lee.

        * Configurations/FeatureDefines.xcconfig:

2013-07-02  Antoine Quint  <graouts@apple.com>

        <rdar://problem/14068350> Range selection magnifier is empty in Notes (when selecting text with empty lines in the middle)

        Reviewed by Timothy Hatcher.

        We would completely disregard RenderObjects that returned selection rectangles with either a
        0-width or 0-height when calling collectSelectionRects(). However, in the case of <br> elements,
        the width may be 0 but there is a height and disregarding it means we don't return a selection
        rectangle for empty lines. This meant we would fill the selection gap incorrectly using the last
        line's selection rectangle width which would not cover the entire width for the empty lines, and
        we would also have a height for this selection rectangle which would extend well above the last
        line we selected. 

        * dom/Range.cpp:
        (WebCore::Range::collectSelectionRects):
        Only disregard selection rectangles that are 0x0.

2013-07-02  Jer Noble  <jer.noble@apple.com>

        <rdar://problem/14252678> 11A407: Multiline captions are clipped in full screen playback with Safari

        Reviewed by Eric Carlson.

        When entering full screen, the text track container is offset by a certain amount, while its child cues
        are correctly positioned. This leads to the appearance that the cues are misplaced, since the container
        is painted to an image and manually displayed by the video plugin.

        Give the text track container an explicit top:0 and left:0 position. This causes the container to be
        placed within the same area as its child cues. Also generate an unscaled image of the container contents
        to be rendered by the video plugin.

        * html/shadow/MediaControlElements.cpp:
        (WebCore::MediaControlTextTrackContainerElement::updateDisplay):
        (WebCore::MediaControlTextTrackContainerElement::createTextTrackRepresentationImage):

2013-07-01  Dean Jackson  <dino@apple.com>

        <rdar://problem/14290978> Ensure that font-weight:100 and font-weight:300 when used with the system font return the correct thin/light system fonts

        Reviewed by Maciej Stachowiak.

        Temporary fix to enable Thin and Light variants of Helvetica Neue. The real solution
        will be to use the CoreText constants, but they are not yet available. This allows
        clients like the iTunes store to start building content.
        The cleanup bug is <rdar://problem/14327518>.

        Test: platform/iphone-simulator/iphone/fast/text/opticalFontWithWeight.html

        * platform/graphics/ios/FontCacheIOS.mm:
        (WebCore::createCTFontWithFamilyNameAndWeight): If the weight is 300 or less, use a different
        API that grabs the font by name (either the light or thin variants).

2013-07-01  Dean Jackson  <dino@apple.com>

        <rdar://problem/14325187> Accept "-apple-system-font" on iOS

        Reviewed by Tim Horton.

        We should accept "-apple-system-font" for consistency, wherever we
        allow "-webkit-system-font".

        Testing in platform/iphone-simulator/iphone/fast/text/opticalFont.html

        * platform/graphics/ios/FontCacheIOS.mm:
        (WebCore::createCTFontWithFamilyNameAndWeight): Accept -apple-system-font too.

2013-07-01  Simon Fraser  <simon.fraser@apple.com>

        Work towards:
        <rdar://problem/14195538> P105/Innsbruck11A400: Scrolling in the Netflix app is horrible
        <rdar://problem/14212331> Scrolling iTunes Store search results fps plummets to 1-2fps when you keep your finger on the screen

        Merge Open Source r152213.

    2013-06-29  Simon Fraser  <simon.fraser@apple.com>
    
            Avoid calling isSimpleContainerCompositingLayer() an extra time
            https://bugs.webkit.org/show_bug.cgi?id=118218
    
            Reviewed by Tim Horton.
    
            containsPaintedContent() called isSimpleContainerCompositingLayer(), which
            is not particularly cheap. But the caller already has this information,
            so pass it in.
    
            * rendering/RenderLayerBacking.cpp:
            (WebCore::RenderLayerBacking::updateDrawsContent):
            (WebCore::RenderLayerBacking::containsPaintedContent):
            * rendering/RenderLayerBacking.h:

2013-07-01  Simon Fraser  <simon.fraser@apple.com>

        Work towards:
        <rdar://problem/14195538> P105/Innsbruck11A400: Scrolling in the Netflix app is horrible
        <rdar://problem/14212331> Scrolling iTunes Store search results fps plummets to 1-2fps when you keep your finger on the screen

        Merge Open Source r152212.

    2013-06-29  Simon Fraser  <simon.fraser@apple.com>
    
            Avoid doing work in RenderBox::outlineBoundsForRepaint() when the repaintContainer is this
            https://bugs.webkit.org/show_bug.cgi?id=118215
    
            Reviewed by Tim Horton.
    
            When the RenderGeometryMap code path was added, RenderBox::outlineBoundsForRepaint()
            actually got slower if no coordinate mapping was needed. So avoid doing work when
            we can, including avoiding the FloatQuad construction.
            
            Speeds up scrolling overflow:scroll areas with large numbers of layer children.
    
            * rendering/RenderBox.cpp:
            (WebCore::RenderBox::outlineBoundsForRepaint):

2013-07-01  Simon Fraser  <simon.fraser@apple.com>

        Work towards:
        <rdar://problem/14195538> P105/Innsbruck11A400: Scrolling in the Netflix app is horrible
        <rdar://problem/14212331> Scrolling iTunes Store search results fps plummets to 1-2fps when you keep your finger on the screen

        Merge Open Source r152175.

     2013-06-28  Simon Fraser  <simon.fraser@apple.com>

            Allow some LayoutPoint and LayoutSize conversions to be inlined
            https://bugs.webkit.org/show_bug.cgi?id=118167
    
            Reviewed by Ryosuke Niwa.
    
            Construction of FloatSize from LayoutSize, and FloatPoint's move(const LayoutSize&)
            and moveBy(const LayoutPoint&) were not inlined, and showed up on some profiles.
            
            Make them inlined by removing the overloaded functions, and instead providing
            conversion operators from LayoutSize to FloatSize, and LayoutPoint to FloatPoint.
            Do the same to allow a LayoutRect to be converted to a FloatRect.
            
            This is nice because it removes pollution of FloatRect, FloatPoint and FloatSize with
            Layout* entirely.
            
            Remove Qt-specific conversions on LayoutRect, LayoutPoint and LayoutSize. Qt can
            convert via IntRect/FloatRect as necessary.
    
            * platform/graphics/FloatPoint.cpp:
            * platform/graphics/FloatPoint.h:
            (WebCore::FloatPoint::move):
            (WebCore::FloatPoint::moveBy):
            * platform/graphics/FloatRect.cpp:
            * platform/graphics/FloatRect.h:
            * platform/graphics/FloatSize.cpp:
            * platform/graphics/FloatSize.h:
            * platform/graphics/LayoutPoint.h:
            (WebCore::LayoutPoint::operator FloatPoint):
            * platform/graphics/LayoutRect.cpp:
            * platform/graphics/LayoutRect.h:
            (WebCore::LayoutRect::operator FloatRect):
            * platform/graphics/LayoutSize.h:
            (WebCore::LayoutSize::operator FloatSize):

2013-06-30  Dean Jackson  <dino@apple.com>

        <rdar://problem/14292069> Update CSS exposed system text styles

        Reviewed by Dan Bernstein.

        HI have updated the fonts for Innsbruck.
        -apple-system-headline1 and -apple-system-headline2 are now -apple-system-headline.
        Same for subheadline, short-headline and short-subheadline.

        I left the old properties in while clients update. Removal is tracked in <rdar://problem/14299118>

        * css/CSSValueKeywords.in: Add new keywords and mark the old ones for removal.
        * rendering/RenderThemeIOS.mm:
        (WebCore::RenderThemeIOS::systemFont): Basically the same. Add code to handle the
        new fonts but leave the old code around.

2013-06-30  Eric Carlson  <eric.carlson@apple.com>

        <rdar://problem/14205335> Subtitles can "stick" for too long, overlap when scrubbing
        through a movie in WebKit
        
        Merge open source r152204.

    2013-06-29  Eric Carlson  <eric.carlson@apple.com>

            [Mac] adopt new AVFoundation caption API
            https://bugs.webkit.org/show_bug.cgi?id=118207

            Reviewed by Dean Jackson.

            No new tests, I was not able to come up with a reliable layout test.

            * platform/graphics/avfoundation/objc/MediaPlayerPrivateAVFoundationObjC.h:
            * platform/graphics/avfoundation/objc/MediaPlayerPrivateAVFoundationObjC.mm:
            (WebCore::MediaPlayerPrivateAVFoundationObjC::flushCues): New, call currentTrack->resetCueValues().
            (-[WebCoreAVFMovieObserver outputSequenceWasFlushed:]): New delegate method.

2013-06-30  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/14315186> REGRESSION: Safari crashes playing a video in WebCore::SubresourceLoader::didReceiveDataArray()

        Reviewed by Yongjun Zhang.

        This crash was originally fixed by <rdar://problem/14184837> in
        11A409.  This regressed with iOS WebKit Merge #10 (see
        <rdar://problem/14121486>) because an earlier ToT WebKit commit
        (r151586) removed SubresourceLoader::sendDataToResource() by
        inlining it into every caller.  When the fix for 14184837 was
        merged, it had to be modified, but this change occurred after
        the Curie branch point, so it didn't make it into puzzlebox on
        its own.

        Covered by existing test:
        - http/tests/eventsource/eventsource-events-after-close.html

        * loader/cf/SubresourceLoaderCF.cpp:
        (WebCore::SubresourceLoader::didReceiveDataArray): Return early
        if m_resource becomes NULL.

2013-06-29  Dan Bernstein  <mitz@apple.com>

        Tried to fix the build again.

        * platform/network/cf/ResourceHandleCFNet.cpp:
        (WebCore::synthesizeRedirectResponseIfNecessary):

2013-06-29  Dan Bernstein  <mitz@apple.com>

        Tried to fix the build.

        * platform/network/cf/ResourceHandleCFNet.cpp:
        (WebCore::synthesizeRedirectResponseIfNecessary):

2013-06-29  Brady Eidson  <beidson@apple.com>

        Github keeps giving me a (modal) "SSL is required to view this page" error (No http->https redirect for http loads to HSTS hosts)
        <rdar://problem/14277434> .

        Reviewed by Alexey Proskuryakov.

        When attempting to load the HTTP form of an HSTS url, CFNetwork calls willSendRequest with the HTTPS url and without a redirect.
        This confuses WebCore, which doesn't know it is now loading HTTPS resources.
        Faking a redirectResponse tells WebCore that the URL changed.

        * platform/network/ResourceHandle.h: Add a "current request" getter
        * platform/network/ResourceHandleInternal.h:
        (WebCore::ResourceHandleInternal::ResourceHandleInternal): Add a "current request" member.

        * platform/network/cf/ResourceHandleCFNet.cpp:
        (WebCore::synthesizeRedirectResponseIfNecessary): If the new URL is HTTPS, the current URL is HTTP, and there is no redirect response,
          then this is an HSTS willSendRequest. To keep WebCore in the know, synthesize a redirect response.
        (WebCore::willSendRequest): Call synthesizeRedirectResponseIfNecessary to make sure HSTS redirects are captured.
        (WebCore::ResourceHandle::willSendRequest): Update the "current request" of the resource handle.
        (WebCore::ResourceHandle::currentRequest):

2013-06-28  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/13072696> QuickLook previews of MS Office, iWork, RTF documents loaded as data broken in Safari/UIWebView

        Reviewed by Yongjun Zhang.

        * WebCore.exp.in: Export
        WebCore::registerQLPreviewConverterIfNeeded().
        * WebCore.xcodeproj/project.pbxproj: Change
        WebCoreURLResponseIOS.h from internal header to private header.
        * loader/DocumentLoader.cpp:
        (WebCore::DocumentLoader::startLoadingMainResource): Remove dead
        code.
        * platform/network/ios/QuickLook.h:
        (WebCore::registerQLPreviewConverterIfNeeded): Change
        declaration to use NS types.
        * platform/network/ios/QuickLook.mm:
        (WebCore::registerQLPreviewConverterIfNeeded): Simplify code by
        switching implementation to use NS types.

2013-06-25  Andy Estes  <aestes@apple.com>

        Stop including <wtf/AlwaysInline.h>, which no longer exists.

        * wak/WebCoreThread.mm:

2013-06-27  Antti Koivisto  <antti@apple.com>

        <rdar://problem/14273910> REGRESSION(r1221156): Crashes in WebCore Timer code
        
        Merge open source r152121.

    2013-06-27  Antti Koivisto  <antti@apple.com>

            RenderLayerCompositor destructor is fragile
            https://bugs.webkit.org/show_bug.cgi?id=118143

            Reviewed by Simon Fraser.

            With iOS tile cache implementation deleting RenderLayerCompositor may end up starting a deleted timer. 
            This corrupts the timer heap and leads to a crash later. This happens because GraphicsLayers destructor 
            calls back to the RenderLayerCompositor that is being deleted. This is pretty fragile in general.
            
            No test as there is no known way to repro this with plain webkit.

            * platform/Timer.cpp:
            (WebCore::TimerBase::TimerBase):
            (WebCore::TimerBase::~TimerBase):
            (WebCore::TimerBase::setNextFireTime):
            * platform/Timer.h:
            
                Assert that the timer is alive before starting it. This turns bugs like this into clear crash stacks
                instead of hard-to-debug timer heap corruptions.

            * rendering/RenderLayerCompositor.cpp:
            (WebCore::RenderLayerCompositor::~RenderLayerCompositor):

2013-06-27  Chris Fleizach  <cfleizach@apple.com>

        <rdar://problem/13889292> WEB: crash while navigating SVG elements

        Merge Open Source r152105.

    2013-06-27  Chris Fleizach  <cfleizach@apple.com>
 
            AX: IOS: crash while navigating with SVG
            https://bugs.webkit.org/show_bug.cgi?id=118101

            Need to check if the SVG path exists before copying it.

            Reviewed by Stephen Chenney.

            Test: platform/iphone-simulator/accessibility/svg-path-crash.html

            * accessibility/AccessibilityRenderObject.cpp:
            (WebCore::AccessibilityRenderObject::elementPath):
            * rendering/svg/RenderSVGShape.h:
            (WebCore::RenderSVGShape::hasPath):

2013-06-25  Andy Estes  <aestes@apple.com>

        <rdar://problem/14184837> REGRESSION: Null-deref of m_resource in WebCore::SubresourceLoader::sendDataToResource()

        Reviewed by Antti Koivisto.

        When we use the didReceiveDataArray CFURLConnectionClient callback, we
        call SubresourceLoader::sendDataToResource() once per item in the data
        array. If processing the first item causes us to cancel the connection,
        we'll still process the remaining items, but the SubresourceLoader's
        cached resource will have been cleared. Bail out of sendDataToResource()
        early if this is the case.

        Note that SubresourceLoader::sendDataToResource() has been removed from
        open source, so this change will be obviated by WebKit Merge #10.

        Covered by existing tests. For instance, http/tests/eventsource/eventsource-events-after-close.html no longer crashes.

        * loader/SubresourceLoader.cpp:
        (WebCore::SubresourceLoader::sendDataToResource): Return early if m_resource is 0.

2013-06-25  Jer Noble  <jer.noble@apple.com>

        <rdar://problem/14261115> Youube content does not interrupt already playing Music

        Reviewed by Eric Carlson.

        Missing breaks in the AudioSession -> AVAudioSession switch statement cause the resulting
        category to always be 'nil'. Breaking once the correct case statement is hit causes the
        correct category to be set.

        * platform/audio/ios/AudioSessionIOS.mm:
        (WebCore::AudioSession::setCategory):

2013-06-25  Antti Koivisto  <antti@apple.com>

        <rdar://problem/14210824> 11A402: Crash in WebCore::Document::haveStylesheetsLoaded

        Merge Open Source r151335.

    2013-06-07  Brady Eidson  <beidson@apple.com>

            REGRESSION (r151088): Crash navigating away from non-loaded main resources with non-loaded scripts.
            <rdar://problem/14052886> and https://bugs.webkit.org/show_bug.cgi?id=117278

            Reviewed by Anders Carlsson.

            Test: http/tests/navigation/slow-loading-page-with-slow-script.php

            * html/parser/HTMLScriptRunner.cpp:
            (WebCore::HTMLScriptRunner::isPendingScriptReady): The script runner might be told about a script
              after it has already been detached (the main resource load has finished/failed/cancelled).
              Don't dereference a null document in that case.

2013-06-25  Antti Koivisto  <antti@apple.com>

        <rdar://problem/14183544> Tile cache should use minimal tile coverage in editing state

        Reviewed by Ian Henderson.
        
        In minimal coverage state, drop invisible tiles instead of invalidating them.

        * platform/ios/TileCache.mm:
        (WebCore::TileCache::finishedCreatingTiles):
        (WebCore::TileCache::flushSavedDisplayRects):
        * platform/ios/TileGrid.mm:
        (WebCore::TileGrid::invalidateTiles):

2013-06-19  Antti Koivisto  <antti@apple.com>

        <rdar://problem/14196726> Better repaint/layer flush throttling

        Reviewed by Simon Fraser and Ian Henderson.

        Desktop WebKit has new throttling mechanism that avoids excessive tile cache repaints by throttling
        layer flushes during page loading. The same mechanism is active on iOS too but it is not connected
        to the main tile cache. Instead separate old throttling code (behind REPAINT_THROTTLING flag) is used.

        The lack of synchronisation between these mechanisms causes unnecessary repaints and layer flushes.
        The new code is also smarter in dealing with changes in loading state and can throttle more aggressively.

        This patch synchronizes iOS TileCache repaints with layer flushes. It also makes the layer 
        flush throttling to use longer throttling delays, similar to the old repaint throttling
        constants.

        The patch reduces number of repaints during loading on many sites. For example arstechnica.com goes from
        5 repaints during loading to 2. This seems to be 3-4% PLT progression.

        * WebCore.exp.in:
        * page/FrameView.cpp:
        (WebCore::FrameView::flushCompositingStateForThisFrame):
        
            Flush tile cache when compositing layer flush happens.

        (WebCore::FrameView::scheduleLayerFlushAllowingThrottling):
        
            Add a function for tile cache to schedule throttled flushes. 

        (WebCore::FrameView::adjustTiledBackingCoverage):
        * page/FrameView.h:
        * platform/ScrollView.h:
        * platform/ios/ScrollViewIOS.mm:
        (WebCore::ScrollView::tileCache):
        * platform/ios/TileCache.h:
        
            Add a separate TileCache enum for TilingDirection to remove circular include with WAKWindow.h.

        (WebCore::TileCache::isSpeculativeTileCreationEnabled):
        * platform/ios/TileCache.mm:
        (WebCore::TileCache::TileCache):
        (WebCore::TileCache::drawLayer):
        (WebCore::TileCache::scheduleLayerFlushForPendingRepaint):
        (WebCore::TileCache::setNeedsDisplayInRect):
        
            Always schedule a layer flush to do tile cache repaint. This synchronizes layer changes and tile cache repaints,
            reducing painting overall.

        (WebCore::TileCache::updateTilingMode):
        (WebCore::TileCache::setTilingDirection):
        (WebCore::TileCache::tilingDirection):
        (WebCore::TileCache::doPendingRepaints):
        (WebCore::TileCache::setSpeculativeTileCreationEnabled):
        * platform/ios/TileGrid.h:
        * platform/ios/TileGrid.mm:
        (WebCore::TileGrid::shouldUseMinimalTileCoverage):
        
            Don't create new speculative tiles when the page load is actively progressing.

        (WebCore::TileGrid::adjustCoverRectForPageBounds):
        (WebCore::TileGrid::calculateCoverRect):
        (WebCore::TileGrid::tileDistance2):
        * rendering/RenderLayerCompositor.cpp:
        
            Use somewhat more aggressive values on iOS. These are similar to currently used REPAINT_THROTTLING constants.

        (WebCore::RenderLayerCompositor::scheduleLayerFlush):
        
            Add an initial delay too.

        (WebCore::RenderLayerCompositor::flushPendingLayerChanges):
        
            Start the throttling timer even in early bail out case. It gets hit by tile cache initialized flushes. 

        * wak/WAKWindow.h:
        * wak/WAKWindow.mm:
        (-[WAKWindow setTilingDirection:]):
        (-[WAKWindow tileCache]):

2013-06-24  Eric Carlson  <eric.carlson@apple.com>

        HLS - Trying to Display Closed Captions crashes Safari in WebCore::TextTrackList::contains
        <rdar://problem/13877433>

        Merge Open Source r151916.

    2013-06-24  Eric Carlson  <eric.carlson@apple.com>

            Potential crash when in-band track is removed
            https://bugs.webkit.org/show_bug.cgi?id=117938
            <rdar://problem/14246763>

            Reviewed by Jer Noble.

            This is timing dependent and I was unable to come up with a reliable test.

            * html/track/InbandTextTrack.cpp:
            (WebCore::InbandTextTrack::willRemoveTextTrackPrivate): Early return if the media element
                has been cleared.

2013-06-20  Jer Noble  <jer.noble@apple.com>

        <rdar://problem/11701792> WebAudio should move to using AVAudioSession

        Reviewed by Eric Carlson.

        Remove Page::setAudioSessionCategoryOverride() in favor of AudioSession::setCategoryOverride().

        * WebCore.exp.in: Export AudioSession methods.
        * page/Page.cpp: Remove Page::setAudioSessionCategoryOverride()
        * page/Page.h: Ditto.
        * page/Settings.cpp:
        (WebCore::Settings::setAudioSessionCategoryOverride): Call
            AudioSession::setCategoryOverride over the Page version.
        (WebCore::Settings::audioSessionCategoryOverride): Ditto.
        * page/Settings.h:

2013-06-22  Conrad Shultz  <conrad_shultz@apple.com>

        <rdar://problem/13805686> REGRESSION: QuickLook: Safari shows "cannot download file" when attempting to open Word or Excel documents

        Reviewed by Yongjun Zhang.

        ResourceRequests were sometimes not being flagged as main resource requests. Consequently QuickLookHandle::create(...), which
        checked handle->firstRequest().isMainResourceRequest(), would always return nullptr, suppressing load of QuickLook documents.

        * loader/DocumentLoader.cpp:
        (WebCore::DocumentLoader::clearMainResourceLoader):
        Clear the isMainResourceRequest flag from m_request since it may now be set in startLoadingMainResource().
        (WebCore::DocumentLoader::startLoadingMainResource):
        Set the isMainResourceRequest flag on the working ResourceRequest before making a copy.

2013-06-21  Eric Carlson  <eric.carlson@apple.com>

        Part of <rdar://problem/13542093> REGRESSION(Innsbruck): Crash in WebCore::InbandTextTrackPrivateAVF::processCue loading HLS stream

        Reviewed by Jer Noble.

        * platform/graphics/ios/MediaPlayerPrivateIOS.mm:
        (WebCore::MediaPlayerPrivateIOS::textTrackWasSelectedByPlugin): Recognize "Off" and "Auto"
            caption track menu items.

2013-06-21  Eric Carlson  <eric.carlson@apple.com>

        Part of <rdar://problem/13542093> REGRESSION(Innsbruck): Crash in WebCore::InbandTextTrackPrivateAVF::processCue loading HLS stream
   
        Merge Open Source r151853.

    2013-06-21  Eric Carlson  <eric.carlson@apple.com>

            Update platform text track menu
            https://bugs.webkit.org/show_bug.cgi?id=117884

            Reviewed by Jer Noble.

            * html/HTMLMediaElement.cpp:
            (WebCore::HTMLMediaElement::setSelectedTextTrack):
            * html/track/TextTrack.cpp:
            (WebCore::TextTrack::platformTextTrack):
            * platform/graphics/PlatformTextTrack.h:
            (WebCore::PlatformTextTrack::create): 
            (WebCore::PlatformTextTrack::uniqueId):
            (WebCore::PlatformTextTrack::captionMenuOffItem):
            (WebCore::PlatformTextTrack::captionMenuAutomaticItem):
            (WebCore::PlatformTextTrack::PlatformTextTrack):

2013-06-20  Jer Noble  <jer.noble@apple.com>

    <rdar://problem/14221314> REGRESSION(r1219344): Captions stuck to the top of video

    Reviewed by Eric Carlson.

    When giving the TextTrackContainer an explicit height: value, also give it an
    explicit position:absolute value, so that the height: value has an effect.

    * html/shadow/MediaControlElements.cpp:
    (WebCore::MediaControlTextTrackContainerElement::updateDisplay):

2013-06-20  Jer Noble  <jer.noble@apple.com>

    <rdar://problem/13785256> Hang drawing captions after pressing the home button while playing a video

    Reviewed by Eric Carlson.

    Use the newly renamed createTextTrackRepresentationImage() client method to retrieve an image
    representation and set that directly as the CALayer's contents.

    * platform/graphics/ios/TextTrackRepresentationIOS.mm:
    (TextTrackRepresentationIOS::TextTrackRepresentationIOS): Set the contents gravity to "bottom".
    (TextTrackRepresentationIOS::update): Set the contents directly instead of triggering an update.

2013-06-21  Jer Noble  <jer.noble@apple.com>

    <rdar://problem/13785256> Hang drawing captions after pressing the home button while playing a video

    Merge Open Source r151884.

    2013-06-21  Jer Noble  <jer.noble@apple.com>

        [iOS] Hang drawing captions after pressing the home button while playing a video
        https://bugs.webkit.org/show_bug.cgi?id=117882

        Reviewed by Eric Carlson.

        Instead of rendering in a callback on the main thread, pre-render the captions and pass to the main
        thread as a CGImage. As such, rename paintTextTrackRepresentation() to createTextTrackRepresentationImage().

        * html/shadow/MediaControlElements.cpp:
        (WebCore::MediaControlTextTrackContainerElement::createTextTrackRepresentationImage): Renamed from
            paintTextTrackRepresentation. Now returns an Image object.
        * html/shadow/MediaControlElements.h:
        * platform/graphics/MediaPlayer.h:
        * platform/graphics/TextTrackRepresentation.h:

2013-06-20  Daniel Bates  <dabates@apple.com>

        Build fix; WebCoreThread.mm:21:9: fatal error: 'wtf/AlwaysInline.h' file not found
        <rdar://problem/14218654>

        Reviewed by Joseph Pecoraro.

        Following iOS WebKit Merge #9 (ca7acd0bf93dfdf036e86a6dcd769814469bb8ed), which
        included <https://trac.webkit.org/changeset/149673>, we should not include the
        header wtf/AlwaysInline.h because it was removed.

        * wak/WebCoreThread.mm: Remove #import <wtf/AlwaysInline.h>.

2013-06-20  Jer Noble  <jer.noble@apple.com>

    <rdar://problem/14218940> Roll-on in-band captions are displayed bottom-to-top rather than top-to-bottom. (117811)

    Merge Open Source r151785.

    2013-06-20  Jer Noble  <jer.noble@apple.com>

            Roll-on in-band captions are displayed bottom-to-top rather than top-to-bottom.
            https://bugs.webkit.org/show_bug.cgi?id=117811

            Reviewed by Eric Carlson.

            When comparing Generic cues, we should check that their type is Generic, not WebVTT.

            * html/track/TextTrackCueGeneric.cpp:
            (WebCore::TextTrackCueGeneric::isOrderedBefore):

2013-06-18  Jeffrey Pfau  <jpfau@apple.com>

        <rdar://problem/14118692> REGRESSION(Innsbruck): macrumors.com is constantly reloading & scrolling back to top

        Reviewed by Yongjun Zhang.

        Shadow iframe trees appear to interact differently between Brighton and
        Innsbruck. In some cases, YouTube embed shadow iframes were being
        sized too large. This patch caps the height to 100% of the parent element.

        No new tests; no change in behavior.

        * html/HTMLPlugInImageElement.cpp:
        (WebCore::HTMLPlugInImageElement::createShadowIFrameSubtree):

2013-06-18  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/14192260> ASSERT(isMainThread()) in FontGlyphs::primarySimpleFontData

        Reviewed by Benjamin Poulain.

        Fix a post-merge isMainThread() assertion for iOS.

        * platform/graphics/FontGlyphs.h:
        (WebCore::FontGlyphs::primarySimpleFontData):

2013-06-18  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/13680731> Netflix: unpainted show posters sometimes in the scrolling lists

        Reviewed by Ian Henderson.
        
        Once the RenderLayer associated with an accelerated overflow:scroll element
        got a scroll offset, repaints in the scrolling contents layer would go to the
        wrong offset. This was because on iOS, RenderLayerBacking::updateGraphicsLayerGeometry()
        includes the scroll offset in m_scrollingContentsLayer's offsetFromRenderer(),
        so we have to account for that offset when mapping a dirty rect down into
        the contents of m_scrollingContentsLayer in setContentsNeedDisplayInRect().
        
        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::setContentsNeedDisplayInRect):

2013-06-18  Enrica Casucci  <enrica@apple.com>

        11A393: iPad only: Emoji on Mail.app has very blur outline compared to those on other apps.
        <rdar://problem/14124249>
        
        Reviewed by Dean Jackson.

        In drawGlyphs, despite making a statement about wanting to avoid subpixel positioning,
        we make an adjustment to compensate for some Core Text adjustment which gives us subpixel
        positioning again.
        The fix ensures we snap to pixel boundary after the adjustment.
        
        * platform/graphics/mac/FontMac.mm:
        (WebCore::Font::drawGlyphs):

2013-06-18  Dean Jackson  <dino@apple.com>

        <rdar://problem/12783606> Synthesized vertical italics on rotated glyphs are transformed incorrectly (117726)

        Merge Open Source r151693

    2013-06-18  Dean Jackson  <dino@apple.com>

            Synthesized vertical italics on rotated glyphs are transformed incorrectly
            https://bugs.webkit.org/show_bug.cgi?id=117726

            Reviewed by Enrica Casucci.

            If a font does not have italic glyphs, and is in a vertical flow, then
            the synthesis of italics was skewing in the wrong direction. While here,
            ensure that no CJK text will get italics in vertical layout.

            This is a topic under discussion in the CSS Working Group. The resolution
            at the June 2013 face-to-face was that:
            - italics in Japanese (and Chinese) text are rare in vertical layout
            - most people wanted Latin text to italicize in the direction of the line flow

            The final behaviour was left undefined, but we consider the change here
            to be sufficient for now. In all cases, the best solution is to avoid
            synthesized italics by specifying a font that includes such forms.

            Tests: fast/text/international/synthesized-italic-vertical-latin.html
                   fast/text/international/synthesized-italic-vertical.html

            * platform/graphics/FontGlyphs.cpp:
            (WebCore::glyphDataAndPageForCJKCharacterWithoutSyntheticItalic): New function
                that makes a new glyph data pair that is marked as NOT using a synthesized italic.
            (WebCore::FontGlyphs::glyphDataAndPageForCharacter): If this is a CJK character and
                has a synthesized oblique, then run it through the function above to make a new glyph data pair.
            * platform/graphics/SimpleFontData.cpp:
            (WebCore::SimpleFontData::nonSyntheticItalicFontData): Creates/returns a new SimpleFontData that will
                not synthesize italics.
            * platform/graphics/SimpleFontData.h: New method nonSyntheticItalicFontData.
            * platform/graphics/mac/FontMac.mm:
            (WebCore::Font::drawGlyphs): This is the actual bug fix. If you are in a vertical flow, the
                skew direction should be downwards, not leftwards.

2013-06-18  Joseph Pecoraro  <pecoraro@apple.com>

        <rdar://problem/13701619> REGRESSION(Innsbruck): Unable to enter a date into web form on enterprise.com

        A merge change introduced an early return for isMouseFocusable that
        did not exist before. There was one for isKeyboardFocusable, but never
        isMouseFocusable. This was preventing <input readonly> form controls
        from getting a "focus" event which jQuery UI's datepicker relies on.

        Reviewed by David Kilzer.

        * html/InputType.cpp:
        (WebCore::InputType::isMouseFocusable):
        * html/TextFieldInputType.cpp:
        (WebCore::TextFieldInputType::isMouseFocusable):

2013-06-17  Andy Estes  <aestes@apple.com>

        <rdar://problem/14097822> REGRESSION(r150867): Merge #9: Safari crashes on launch in WebCore::ResourceErrorBase::operator=

        Reviewed by Antti Koivisto.

        In <rdar://problem/11221020> we added code to ensure that a load
        canceled by willSendRequest fires the appropriate delegate callbacks and
        is removed from the memory cache even when loader initialization is
        deferred to scheduling time.

        In the current state of the loader we get this behavior without having
        to do any special work, so we can remove the iOS-specific code added
        for <rdar://problem/11221020>. This code now causes a crash when it
        tries to access a NULL CachedResource. In its place we add one
        iOS-specific line to SubresourceLoader::willCancel() to ensure that we
        remove the CachedResource for the canceled load from the memory cache
        even though the loader is not yet initialized (on iOS we defer
        initialization to scheduling time).

        There is no change in behavior, so no new tests were added. I verified
        that existing tests covering willSendRequest still pass and verified
        manually that <rdar://problem/11221020> did not regress.

        * loader/ResourceLoadScheduler.cpp:
        (WebCore::ResourceLoadScheduler::servePendingRequests): Removed the call
        to clearCachedResourceAfterSynchronousCancel()
        * loader/ResourceLoader.h: Removed clearCachedResourceAfterSynchronousCancel().
        * loader/SubresourceLoader.cpp:
        (WebCore::SubresourceLoader::willCancel): Allowed the function to
        proceed even if m_state is Uninitialized.
        * loader/SubresourceLoader.h: Removed clearCachedResourceAfterSynchronousCancel().
        * loader/cache/CachedResource.cpp: Ditto.
        * loader/cache/CachedResource.h: Ditto.

2013-05-16  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/13835519> UIDemo: Scroll position isn't updated before navigating away (now only rarely)

        Previously, when we adopt the BackForward list from active tabDoc for speculative Tab Doc, we serialize the web
        history items and deserialize them into speculative tab.  This means we create a copy of WebCore HistoryItem for
        the current web page in speculative Tab, but HistoryController still holds on to the old HistoryItem, not the new
        copy.  Even though both are pointing to the same page, WebCore considers there are different history items and
        will save the scrollPoint to the old one when navigating to another page.  When we go back, we are trying to
        restore the scrollPoint from the new HistoryItem (the copy in BackForward list) and we got (0, 0) back.

        This patch adds a method (replaceCurrentItem) in HistoryController to update its current item with the new copy.

        Reviewed by Darin Adler.

        * WebCore.exp.in:
        * loader/HistoryController.cpp:
        (WebCore):
        (WebCore::HistoryController::replaceCurrentItem):
        * loader/HistoryController.h:
        (HistoryController):

2013-06-15  Benjamin Poulain  <bpoulain@apple.com>

        <rdar://problem/14120671> REGRESSION(Innsbruck): MobileSafari loses scroll/zoom when it reloads pages

        Reviewed by Darin Adler.

        Revert r1211942.

        When restoring a backforward list, r1211942 was forcing HistoryController's m_currentItem to be the item
        to be loaded. When committing the load, both previousItem and currentItem point to the same object, and
        we destroy the state when trying to save the fake previousItem.

        <rdar://problem/13835519> needs a different fix.

        * WebCore.exp.in:
        * loader/HistoryController.cpp:
        * loader/HistoryController.h:
        (HistoryController):

2013-06-14  Enrica Casucci  <enrica@apple.com>

        Update underline thickness in WebKit to match HI spec for Mail.
        <rdar://problem/13930868> 
        
        Reviewed by Dean Jackson, Sam Weinig and Darin Adler.

        The thickness we were using was already set to 1 and the device scale was taken into
        consideration, but it was being ignored for iOS when drawing the line.
        Moving the position of the line below the baseline as the benefit of removing some
        platform iOS code.

        * platform/graphics/cg/GraphicsContextCG.cpp:
        (WebCore::GraphicsContext::drawLineForText):
        * rendering/InlineTextBox.cpp:
        (WebCore::InlineTextBox::paintDecoration):

2013-06-13  Jeffrey Pfau  <jpfau@apple.com>

        <rdar://problem/14014219> Crash in WebCore::ResourceRequestBase::url when trying to forward a specific email with embedded web page

        Reviewed by Yongjun Zhang.

        A synthesized document was not properly setting the loader state to
        committed, despite the fact that the document is loaded in one step.
        This caused subresources that encountered redirects to make bad
        assumptions about the loader state, causing a crash when attempting to
        access the non-existent provisional loader.

        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::initForSynthesizedDocument): Set the loader state to committed when initializing the frame.

2013-06-13  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/14143919> REGRESSION (r1209393): Kerning and ligatures don’t work (except on the complex path)

        Reviewed by Pratik Solanki.

        * platform/graphics/SimpleFontData.h:
        (WebCore::SimpleFontData::applyTransforms): Corrected a platform #if.

2013-06-11  Benjamin Poulain  <bpoulain@apple.com>

        Merge opensource r151356 for <rdar://problem/13985064>.

    2013-06-09  Benjamin Poulain  <bpoulain@apple.com>

        Scrolling with platformWidget and delegateScrolling is incorrectly clamped
        https://bugs.webkit.org/show_bug.cgi?id=117369
        <rdar://problem/13985064>

        Reviewed by Darin Adler.

        The patch http://trac.webkit.org/changeset/142526 clamps the input position
        in the ScrollView scroll range. This was done for the path to the ScrollingCoordinator.

        The problem with that change is ScrollView::setScrollPosition() can delegate the scrolling
        to either a platformWidget, or through delegateScrolling. After r142526, the position is clamped,
        and we do not let those external scrolling mechanims handle the out-of-bound scrolling.

        This patch fixes the issue by moving the threaded scrolling call to ScrollView,
        after the delegate handling code.

        * page/FrameView.cpp:
        (WebCore::FrameView::setScrollPosition):
        (WebCore::FrameView::requestScrollPositionUpdate):

2013-06-07  Benjamin Poulain  <bpoulain@apple.com>

        <rdar://problem/14086279> Invalid inline assembly constraints in WebCore::TransformationMatrix::multiply()

        Reviewed by Michael Saboff.

        I messed up the names of some registers in the clobber list. It only compiled because of
        a bug in clang.

        * platform/graphics/transforms/TransformationMatrix.cpp:
        (WebCore::TransformationMatrix::multiply):

2013-06-06  Eric Carlson  <eric.carlson@apple.com>

        <rdar://problem/13535533> 10A291: WebSheet cannot display video in captive network for AWG-WiFi

        Reviewed by Dave Kilzer.

        No new tests, this requires WebSheet and a captive network to test.

        Add a setting so a client can set the network interface name. Pass the name along to the
        plug-in so AVFoundation can use the correct interface in mediaserverd. 

        * WebCore.exp.in:
        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::parseAttribute): Pass the network interface name to the plug-in.
        * page/Settings.cpp:
        (WebCore::Settings::networkInterfaceNameGlobal):
        (WebCore::Settings::setNetworkInterfaceName):
        (WebCore::Settings::networkInterfaceName):
        * page/Settings.h:

2013-06-05  Jer Noble  <jer.noble@apple.com>

        <rdar://problem/13248015> YouTube videos go black when entering Full screen (iPad only)

        Reviewed by Eric Carlson.

        When updating the graphics layer tree, there exists the potential for the graphic layer contents to be
        reset from a plugin layer to a background image or color. Later in updateGraphicsLayerConfiguration(), the
        backing tries to reset its layer contents to the plugin layer by calling PluginViewBase::attachPluginLayer(),
        but the plugin has never been detached, so the call is a no-op.

        Solve this problem by detaching the plugin before re-attaching in the case that the contents layer has been
        reset away from the plugin layer.

        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::updateGraphicsLayerConfiguration):

2013-06-06  Chris Fleizach  <cfleizach@apple.com>

        <rdar://problem/13956715> WEB: iOS: VO ignores ARIA progressbar elements

        Merge Open Source r151275.

        Test: platform/iphone-simulator/accessibility/progressbar.html

        * accessibility/ios/WebAccessibilityObjectWrapperIOS.mm:
        (-[WebAccessibilityObjectWrapper determineIsAccessibilityElement]):
        (-[WebAccessibilityObjectWrapper _accessibilityMinValue]):
        (-[WebAccessibilityObjectWrapper _accessibilityMaxValue]):

2013-06-05  Andy Estes  <aestes@apple.com>

        Disable <iframe seamless> in WebCore's FeatureDefines.xcconfig as part of
        <rdar://problem/14012115> iOS: Make sure that features we don't want to ship are disabled before we ship

        Rubber-stamped by David Kilzer.

        * Configurations/FeatureDefines.xcconfig: Disabled ENABLE_IFRAME_SEAMLESS.

2013-06-04  Jeffrey Pfau  <jpfau@apple.com>

        <rdar://problem/12839301> Innsbruck: no YouTube video previews in Shazam Encore

        Reviewed by Yongjun Zhang.

        Shadow iframe trees broke at some point when the behavior of styling
        the first child element of a shadow element changed. This fixes the
        case where a shadow iframe subtree for YouTube videos was being sized
        wrong.

        * html/HTMLPlugInImageElement.cpp:
        (WebCore::HTMLPlugInImageElement::createShadowIFrameSubtree): Set the height on the top-level shadow element to be 100%

2013-06-04  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/13975616> Scroll position lost when I go back to this hitfix.com page (devicemotion stops page cache).

        In iOS, we can put page with devicemotion and orientation event listeners into page cache.  Since we already suspend
        DeviceMotionController and OrientationController in Document::suspendActiveDOMObjects when page goes into page cache
        and resume them when page is restored, we effectively stops sending devicemotion and orientation events into cached pages.

        Tested on web sites using devicemotion (e.g. http://www.emanueleferonato.com/stuff/iaccelerometer/) to verify event
        listeners still gets events after page is restored from page cache.  Also verified page doesn't receive events when
        it is cached.

        Reviewed by Darin Adler.

        * history/PageCache.cpp:
        (WebCore::logCanCachePageDecision):
        (WebCore::PageCache::canCache):

2013-06-03  Enrica Casucci  <enrica@apple.com>

        Japanese kana keyboard: Intermediate keys before confirmed appear in the Google search field.
        <rdar://problem/13670923>
        
        Reviewed by Morgan Winer.

        In order for features like multitap on the keyboard to work properly, we need to ensure that
        all the flags provided with the native keyboard event are preserved in the WebEvent.
        This patch adds a new method to initialize the WebEvent, in order to preserve the original flags.
        It also changes the UIKit delegate call (addInputString) to pass this information back
        to UIKit. The fix will be completed when the UIKit part of the fix will land.

        * platform/ios/WebEvent.h:
        * platform/ios/WebEvent.mm:
        (-[WebEvent initWithKeyEventType:timeStamp:characters:charactersIgnoringModifiers:modifiers:isRepeating:withFlags:keyCode:isTabKey:characterSet:]):
        (-[WebEvent _eventDescription]):
        (-[WebEvent keyboardFlags]):

2013-06-03  Enrica Casucci  <enrica@apple.com>

        Add a "tall" variant of the -apple-system-body
        <rdar://problem/13996776>

        Reviewed by Dan Bernstein.

        Updated existing test platform/iphone-simulator/iphone/fast/text/opticalFontWithTextStyle.html.

        * css/CSSValueKeywords.in:
        * rendering/RenderThemeIOS.mm:
        (WebCore::RenderThemeIOS::systemFont):

2013-06-03  Enrica Casucci  <enrica@apple.com>

        Reverting a commented out ASSERT checked in by mistake.
        Need the bug URL (OOPS!).

        Unreviewed.

        * rendering/LogicalSelectionOffsetCaches.h:
        (WebCore::LogicalSelectionOffsetCaches::LogicalSelectionOffsetCaches):

2013-05-31  Enrica Casucci  <enrica@apple.com>

        Remove deprecated CSS values for optical fonts
        <rdar://problem/13969378> 

        Reviewed by Sam Weinig.

        Removed support for -webkit-system-* primitive values.

        * css/CSSValueKeywords.in:
        * rendering/RenderThemeIOS.mm:
        (WebCore::RenderThemeIOS::systemFont):

2013-05-30  Enrica Casucci  <enrica@apple.com>

        REGRESSION(Innsbruck): Arabic/Devanagari text is not written in the joined form.
        <rdar://problem/13937313>

        Reviewed by David Kilzer.

        Using the system UI fonts the characters that required a fallback font were
        never joined because WebKit believed every character was being rendered with
        a different font, making joining impossible.
        This was due to a problem in the font cache, introduced when we switched from
        GSFont to CTFont. CoreText does not guarantee to always return the same CTFontRef
        for the same font, therefore it was necessary to change the hash function to use
        CFHash on the font object reference and CFEqual in the comparison function.
        
        * platform/graphics/FontPlatformData.h:
        (WebCore::FontPlatformData::hash):
        * platform/graphics/cocoa/FontPlatformDataCocoa.mm:
        (WebCore::FontPlatformData::platformDataAssign):
        (WebCore::FontPlatformData::platformIsEqual):

2013-05-29  Roger Fong  <roger_fong@apple.com>

        Disable some feature flags.
        <rdar://problem/12952646>.

        Rubberstamped by Jon Lee.

        Disabled flags:
        ENABLE_CSS_COMPOSITING
        ENABLE_CSS_EXCLUSIONS
        ENABLE_CSS_SHADERS
        ENABLE_IFRAME_SEAMLESS
        ENABLE_CSS_TRANSFORMS_ANIMATIONS_UNPREFIXED
        ENABLE_SHARED_WORKERS

        * Configurations/FeatureDefines.xcconfig:
        * rendering/RenderBlock.cpp:
        (WebCore::exclusionInfoRequiresRelayout):
        (WebCore::RenderBlock::updateRegionsAndExclusionsAfterChildLayout):
        (WebCore::RenderBlock::logicalLeftOffsetForLine):
        (WebCore::RenderBlock::logicalRightOffsetForLine):

2013-05-28  Dean Jackson  <dino@apple.com>

        <rdar://problem/13955502> REGRESSION (Innsbruck): Scrolling stops CSS animations/transitions, and they never resume

        Merge Open Source r150862.

        And added two new tests specific to iOS for this case.

        Tests: animations/resume-after-page-cache.html
               platform/iphone-simulator/animations/restart-after-scroll-nested.html
               platform/iphone-simulator/animations/restart-after-scroll.html

    2013-05-28  Dean Jackson  <dino@apple.com>

            Animations do not restart after exiting page cache
            https://bugs.webkit.org/show_bug.cgi?id=116900

            Reviewed by Tim Horton.

            Animations are suspended as they enter the page cache, but
            were not getting correctly resumed when exiting. The cause
            was an error in r149576 which was checking a global flag for suspension
            on the AnimationController and thus not trying to resume anything.

            Test: animations/resume-after-page-cache.html

            * page/animation/AnimationController.cpp:
            (WebCore::AnimationControllerPrivate::suspendAnimationsForDocument):
            (WebCore::AnimationControllerPrivate::resumeAnimationsForDocument):

2013-05-28  Joseph Pecoraro  <pecoraro@apple.com>

        <rdar://problem/13871739> REGRESSION (Innsbruck): Autocorrect/autocapitalize/password ignored on initial focus of first text field on a web form

        Better fix. The reason we are getting Shadow DOM results from the HitTest
        was that the EventHandler HitTest API replaced a set of boolean parameters
        with a single optional bitwise flag HitTestRequestType in r142977. FrameIOS
        callers that still used boolean flags were not getting compile time errors
        and were passing unexpected values for the new bitwise flag param.

        Remove the stale "false" for what used to be allowShadowDOM from all
        FrameIOS callers. Disallow Shadow DOM is now the default.

        Reviewed by David Kilzer.

        * page/ios/FrameIOS.mm:
        (WebCore::Frame::renderRectForPoint):
        (WebCore::ancestorRespondingToClickEvents):
        (WebCore::Frame::betterApproximateNode):
        (WebCore::Frame::hitTestResultAtViewportLocation):
        (WebCore::Frame::qualifyingNodeAtViewportLocation):

2013-05-28  Chris Fleizach  <cfleizach@apple.com>

        <rdar://problem/14003535> WebSpeech: speech crashing when trying to speak

        Reviewed by David Kilzer.

        We can't use a passed in reference after passing off the reference to the member variable.
        We should only set the member variable once we're done with the passed in object.

        * platform/ios/PlatformSpeechSynthesizerIOS.mm:
        (-[WebSpeechSynthesisWrapper speakUtterance:WebCore::]):

2013-05-28  Enrica Casucci  <enrica@apple.com>

        Use CoreText SPI to check if a font is a systemUI font
        instead of relying on the font usage/text style name.

        Reviewed by Dean Jackson.

        * platform/graphics/ios/FontCacheIOS.mm:
        (WebCore::FontCache::getFontDataForCharacters):

2013-05-27  Joseph Pecoraro  <pecoraro@apple.com>

        <rdar://problem/13871739> REGRESSION (Innsbruck): Autocorrect/autocapitalize/password ignored on initial focus of first text field on a web form

        Tapping on an <input> was returning the shadow contenteditable <div>
        inside of the form control instead of the <input> element itself.

        I tested password fields, range, select, textarea, label, audio, video,
        and details/summary with form controls on the phone and didn't encounter
        any issues.

        Reviewed by Maciej Stachowiak.

        * page/ios/FrameIOS.mm:
        (WebCore::ancestorRespondingToClickEvents):

2013-05-24  Chris Fleizach  <cfleizach@apple.com>

        <rdar://problem/13974584> WEB SPEECH: enable WebSpeech for iOS

        Reviewed by David Kilzer.

        Enables SPEECH_SYNTHESIS for iOS and implements the iOS platform
        speech synthesizer using the AVFoundation API.

        It also only allows speech to be activated when performed from a user
        gesture (like audio).

        * Configurations/FeatureDefines.xcconfig:
        * Modules/speech/SpeechSynthesis.cpp:
        (WebCore::SpeechSynthesis::SpeechSynthesis):
        (WebCore::SpeechSynthesis::speak):
        * Modules/speech/SpeechSynthesis.h:
        (SpeechSynthesis):
        (WebCore::SpeechSynthesis::userGestureRequiredForSpeechStart):
        (WebCore::SpeechSynthesis::removeBehaviorRestriction):
        * WebCore.exp.in:
        * WebCore.xcodeproj/project.pbxproj:
        * platform/PlatformSpeechSynthesizer.h:
        (PlatformSpeechSynthesizer):
        * platform/ios/PlatformSpeechSynthesizerIOS.mm: Added.
        (SOFT_LINK_CLASS):
        (-[WebSpeechSynthesisWrapper initWithSpeechSynthesizer:WebCore::]):
        (-[WebSpeechSynthesisWrapper mapSpeechRateToPlatformRate:]):
        (-[WebSpeechSynthesisWrapper speakUtterance:WebCore::]):
        (-[WebSpeechSynthesisWrapper pause]):
        (-[WebSpeechSynthesisWrapper resume]):
        (-[WebSpeechSynthesisWrapper cancel]):
        (-[WebSpeechSynthesisWrapper speechSynthesizer:didStartSpeechUtterance:]):
        (-[WebSpeechSynthesisWrapper speechSynthesizer:didFinishSpeechUtterance:]):
        (-[WebSpeechSynthesisWrapper speechSynthesizer:didPauseSpeechUtterance:]):
        (-[WebSpeechSynthesisWrapper speechSynthesizer:didContinueSpeechUtterance:]):
        (-[WebSpeechSynthesisWrapper speechSynthesizer:didCancelSpeechUtterance:]):
        (-[WebSpeechSynthesisWrapper speechSynthesizer:willSpeakRangeOfSpeechString:utterance:]):
        (WebCore):
        (WebCore::PlatformSpeechSynthesizer::PlatformSpeechSynthesizer):
        (WebCore::PlatformSpeechSynthesizer::~PlatformSpeechSynthesizer):
        (WebCore::PlatformSpeechSynthesizer::initializeVoiceList):
        (WebCore::PlatformSpeechSynthesizer::pause):
        (WebCore::PlatformSpeechSynthesizer::resume):
        (WebCore::PlatformSpeechSynthesizer::speak):
        (WebCore::PlatformSpeechSynthesizer::cancel):

2013-05-23  Benjamin Poulain  <bpoulain@apple.com>

        Merge r150105 for PLT work.

    2013-05-15  Benjamin Poulain  <bpoulain@apple.com>

        Do not bloat HTMLTokenizer with a giant inline InputStreamPreprocessor::peek
        https://bugs.webkit.org/show_bug.cgi?id=116066

        Reviewed by Ryosuke Niwa.

        Merge https://chromium.googlesource.com/chromium/blink/+/45e0337b2f2db535ab08365f6e763a5015e4d990.

        On x86_64, this removes 40kb from the binary. On my machine it is completely neutral on performance.

        * html/parser/InputStreamPreprocessor.h:
        (WebCore::InputStreamPreprocessor::peek):
        (InputStreamPreprocessor):
        (WebCore::InputStreamPreprocessor::advance):
        (WebCore::InputStreamPreprocessor::skipNextNewLine):
        (WebCore::InputStreamPreprocessor::reset):
        (WebCore::InputStreamPreprocessor::processNextInputCharacter):

2013-05-23  Jeffrey Pfau  <jpfau@apple.com>

        <rdar://problem/13754896> ASSERTION FAILED: !m_scheduledTasksAreSuspended navigating between wikipedia.org pages

        A page could attempt to suspend timers and active DOM elements while
        the UI had requested them to be suspended already. This patch ignores
        suspend requests if we're already suspended, so long as the UI is what
        requested the first suspend.

        Reviewed by Joseph Pecoraro.

        No new tests, no change in functionality.

        * dom/Document.cpp:
        (WebCore::Document::suspendScheduledTasks): Ignore subsequent suspend requests
        * dom/ScriptExecutionContext.cpp:
        (WebCore::ScriptExecutionContext::suspendActiveDOMObjects): Ignore subsequent suspend request
        * page/ios/FrameIOS.mm:
        (WebCore::Frame::setTimersPausedInternal): Mark suspend and resume as UI initiated

2013-05-23  Jeffrey Pfau  <jpfau@apple.com>

        Merged ToT WebKit r150560

        Reviewed by Joseph Pecoraro.

    2013-05-20  Jeffrey Pfau  <jpfau@apple.com>

        Active DOM object resumption should match reason for suspending
        https://bugs.webkit.org/show_bug.cgi?id=116476

        Add a reason to the arguments for resuming active DOM object and
        scheduled tasks and ensure that it matches the suspend reason before
        actually resuming the objects.

        Reviewed by Joseph Pecoraro.

        No new tests, no change in functionality.

        * bindings/js/PageScriptDebugServer.cpp:
        (WebCore::PageScriptDebugServer::setJavaScriptPaused): Add matching resume reason
        * dom/Document.cpp:
        (WebCore::Document::resumeActiveDOMObjects): Check for matching resume reason
        (WebCore::Document::resumeScheduledTasks): Check for matching resume reason
        * dom/Document.h:
        (Document):
        * dom/ScriptExecutionContext.cpp:
        (WebCore::ScriptExecutionContext::resumeActiveDOMObjects): Check for matching resume reason
        * dom/ScriptExecutionContext.h:
        (ScriptExecutionContext):
        (WebCore::ScriptExecutionContext::reasonForSuspendingActiveDOMObjects): Expose suspend reason to subclasses
        * history/CachedFrame.cpp:
        (WebCore::CachedFrameBase::restore): Add matching resume reason
        * page/Frame.cpp:
        (WebCore::Frame::resumeActiveDOMObjectsAndAnimations): Add matching resume reason
        * page/PageGroupLoadDeferrer.cpp:
        (WebCore::PageGroupLoadDeferrer::~PageGroupLoadDeferrer): Add matching resume reason
        * page/ios/FrameIOS.mm:
        (WebCore::Frame::setTimersPausedInternal): Add matching resume reason

2013-05-23  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/13924120> Crash in MobileSafari at WebCore::Frame::settings const after Merge8

        Merged ToT r150631.

    2013-05-23  Yongjun Zhang  <yongjun_zhang@apple.com>

            We need to clear main resource when detaching DocumentLoader from the frame.
            https://bugs.webkit.org/show_bug.cgi?id=116680

            Normally, when we detach the documentLoader in DocumentLoader::detachFromFrame, main resource is also cleared
            in stopLoading().  There is possibility that main resource not being cleared, and this could cause crash later
            since docLoader could still receive resource callbacks.  To avoid that, we can remove docLoader from main resource's
            client set in detachFromFrame.

            Reviewed by Brady Eidson.

            No new tests, this doesn't happen on OS X.

            * loader/DocumentLoader.cpp:
            (WebCore::DocumentLoader::detachFromFrame):
            (WebCore::DocumentLoader::clearMainResource):
            * loader/cache/CachedResource.h: make hasClient accessible publicly.
            (WebCore::CachedResource::hasClient):
            (CachedResource):

2013-05-22  Enrica Casucci  <enrica@apple.com>

        WebKit should support the new new optical fonts.
        <rdar://problem/13945396>

        Reviewed by Sam Weinig.

        Adding support for the new text styles exposed by UIKit and CoreText.
        We are currently keeping the old styles for compatibility until all the
        applications that are currently using them have had a chance to update.
        The change include a fix to the CSS parser not to force -apple-system-...
        property values to -webkit. This was can distiguish the value -apple-system-body
        from -webkti-system-body.

        Test: platform/iphone-simulator/iphone/fast/text/opticalFontWithTextStyle.html

        * css/CSSParser.cpp:
        (WebCore::CSSParser::rewriteSpecifiers):
        * css/CSSValueKeywords.in:
        * platform/graphics/ios/FontCacheIOS.mm:
        (WebCore::createCTFontWithTextStyle):
        (WebCore::FontCache::createFontPlatformData):
        * rendering/RenderThemeIOS.mm:
        (WebCore::RenderThemeIOS::systemFont):

2013-05-21  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/13608113> REGRESSION: Anchor (#fragment) navigations does not work (affects weibo.cn)

        Open source r142526 changed FrameView::setScrollPosition to early return if the requested scroll position is
        the same as the current position.  In iOS, FrameView's scrollPosition() is always (0, 0); this breaks
        in-document fragment scroll.  Fix this by skipping the scrollPosition check in iOS.  This reverts back to
        pre-Innsbruck behavior and the scrollPosition check will be done in WAKScrollView.

        Reviewed by Joseph Pecoraro.

        * page/FrameView.cpp:
        (WebCore::FrameView::setScrollPosition):

2013-05-22  Pratik Solanki  <psolanki@apple.com>

        Part of <rdar://problem/13588932> N41/11A326 Reader doesn't seem faster to appear in Innsbruck compare Brighton

        Merged ToT WebKit r150522.

    2013-05-22  Beth Dakin  <bdakin@apple.com>

        The LayoutMilestones didLayout callback sometimes fires with a milestone value of 0
        https://bugs.webkit.org/show_bug.cgi?id=116623

        Reviewed by Geoffrey Garen.

        Make sure we have actually achieved some milestones before calling didLayout().
        * page/FrameView.cpp:
        (WebCore::FrameView::performPostLayoutTasks):

2013-05-21  Ian Henderson  <ianh@apple.com>

        <rdar://problem/13929172> UI Demo Run Through: Tapping on a tab should show snapshot instead of white page before loading the page

        Reviewed by Antti Koivisto.

        * platform/ios/TileCache.h:
        (TileCache): Add an m_contentImage ivar and a mutex to protect it --
        RetainPtr isn't threadsafe.
        * platform/ios/TileCache.mm:
        (WebCore::TileCache::setContentReplacementImage):
        (WebCore):
        (WebCore::TileCache::contentReplacementImage):
        (WebCore::TileCache::drawReplacementImage):
        (WebCore::TileCache::drawWindowContent): Split this out into a
        separate method.
        (WebCore::TileCache::drawLayer): Whenever we have a
        contentReplacementImage, call drawReplacementImage instead of drawing
        the web content.
        * wak/WAKWindow.h:
        * wak/WAKWindow.mm:
        (-[WAKWindow setContentReplacementImage:]):
        (-[WAKWindow contentReplacementImage]):

2013-05-20  Eric Carlson  <eric.carlson@apple.com>

        Merged ToT WebKit r150372
        <rdar://problem/13093696> ASSERT: CrashTracer: [USER] DumpRenderTree at WebCore: WebCore::ChildNodeInsertionNotifier::notify + 93.

    2013-05-20  Eric Carlson  <eric.carlson@apple.com>

            [iOS] media/event-queue-crash.html ASSERTs in notifyChildInserted
            https://bugs.webkit.org/show_bug.cgi?id=116444

            Reviewed by Jer Noble.

            No new tests, covered by existing tests.

            * html/HTMLMediaElement.cpp:
            (WebCore::HTMLMediaElement::configureMediaControls): Only create media controls when the
                element is in a Document.

2013-05-18  Enrica Casucci  <enrica@apple.com>

        RenderThemeIOS.mm fails to build due to deprecated kCTFontUsageIdentifier* constants
        <rdar://problem/13932949> 
        
        Reviewed by Sam Weinig.

        Updated to use the new constants.

        * rendering/RenderThemeIOS.mm:
        (WebCore::RenderThemeIOS::systemFont):

2013-05-18  Enrica Casucci  <enrica@apple.com>

        Notes & Messages crashed in WebCore::FontFallbackList::releaseFontData while launching.
        <rdar://problem/13767138>
        
        Reviewed by Dean Jackson.

        The crash is occurring in releaseFontData while going through the items
        in the m_fontList vector and we encounter one item that is null.
        Since this bug does not happen on OS X, there is only one place
        where we call m_fontList.append without checking the value being added
        and it is in iOS specific code. I've added the check that we don't
        append null elements.
        This is a speculative fix, since we don't have a clear repro case.

        * platform/graphics/FontFallbackList.cpp:
        (WebCore::FontFallbackList::fontDataAt):

2013-05-18  Enrica Casucci  <enrica@apple.com>

        Korean isn't rendered with the correct font when using optical fonts.
        <rdar://problem/13807363>
        
        Reviewed by Dean Jackson.

        When using optical system fonts, we use CoreText fallback mechanism
        to find a substitute font that supports the characters we need to render.
        Even though the bug is about Korean, the solution covers all character sets.

        * platform/graphics/FontCache.h: Added getSystemFontFallbackForCharacters for iOS.
        * platform/graphics/ios/FontCacheIOS.mm:
        (WebCore::FontCache::getSystemFontFallbackForCharacters):
        (WebCore::FontCache::getFontDataForCharacters):

2013-05-16  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/13835519> UIDemo: Scroll position isn't updated before navigating away (now only rarely)

        Previously, when we adopt the BackForward list from active tabDoc for speculative Tab Doc, we serialize the web
        history items and deserialize them into speculative tab.  This means we create a copy of WebCore HistoryItem for
        the current web page in speculative Tab, but HistoryController still holds on to the old HistoryItem, not the new
        copy.  Even though both are pointing to the same page, WebCore considers there are different history items and
        will save the scrollPoint to the old one when navigating to another page.  When we go back, we are trying to
        restore the scrollPoint from the new HistoryItem (the copy in BackForward list) and we got (0, 0) back.

        This patch adds a method (replaceCurrentItem) in HistoryController to update its current item with the new copy.

        Reviewed by David Kilzer.

        * WebCore.exp.in:
        * loader/HistoryController.cpp:
        (WebCore):
        (WebCore::HistoryController::replaceCurrentItem):
        * loader/HistoryController.h:
        (HistoryController):

2013-05-17  Enrica Casucci  <enrica@apple.com>

        WebCoreEmbedded needs to move off of superseded text size notification.
        <rdar://problem/13919708>
        
        Reviewed by Darin Adler.

        Yet another change of the text size change notification.

        * rendering/RenderThemeIOS.mm:
        (WebCore::contentSizeCategoryDidChange):
        (WebCore::RenderThemeIOS::RenderThemeIOS):

2013-05-16  Joseph Pecoraro  <pecoraro@apple.com>

        <rdar://problem/13869901> UI Demo: Weird adjustment navigating back to www.santabarbaraca.mobi
        <rdar://problem/11278022> Suspend the timers of the GeoNotifiers when suspending the Geolocation

        Reviewed by Yongjun Zhang.

        * Modules/geolocation/Geolocation.h:
        * Modules/geolocation/Geolocation.cpp:
        (WebCore::Geolocation::canSuspend):
        Allow suspending the page when there are no active listeners.

        (WebCore::Geolocation::suspend):
        (WebCore::Geolocation::resumeTimerFired):
        Suspend and restart geonotifier timers in resume.
        If the suspend is for entering the page cache, stop updating an
        reset permissions when we resume. This would be the same if the
        page was reloading from scratch, but at least now the page gets
        into the page cache.

2013-05-16  Enrica Casucci  <enrica@apple.com>

        Letter g is truncated in web form.
        <rdar://problem/13870032>
        
        Reviewed by David Kilzer.

        The problem this patch fixes is much bigger than what
        the reported bug mentions.
        A change in GraphicsServices (bcf535c145191791b87434728b91b46d1e93d866)
        broke the way line height is computed in WebKit, providing a value
        that doesn't factor in the font line gap.
        This change adds code to remove the dependency from GraphicsServices
        to retrieve the font metrics, while still supporting the correct
        behavior for applications built against earlier version of the SDK.

        * WebCore.xcodeproj/project.pbxproj:
        * platform/graphics/ios/FontCacheIOS.mm: Removed unnecessary headers.
        * platform/graphics/ios/FontServicesIOS.h: Added.
        * platform/graphics/ios/FontServicesIOS.mm: Added.
        This new file contains a class that wraps the logic to retrive and
        compute the font metrics the way WebKit expects them.
        (WebCore::shouldUseAdjustment):
        (WebCore::isCourier):
        (WebCore::FontServicesIOS::FontServicesIOS):
        * platform/graphics/ios/SimpleFontDataIOS.mm:
        (WebCore::SimpleFontData::platformInit): Uses the new FontServices class.

2013-05-16  Enrica Casucci  <enrica@apple.com>

        copyFontCharacterSet() can be faster.
        <rdar://problem/13887498> 
        
        Reviewed by Pratik Solanski.

        Implementing the function using the CT function
        suggested in the bug.

        * platform/graphics/ios/FontCacheIOS.mm:
        (WebCore::copyFontCharacterSet):

2013-05-15  Eric Carlson  <eric.carlson@apple.com>

        Merged ToT WebKit r150153.

    2013-05-15  Eric Carlson  <eric.carlson@apple.com>

            [Mac] media engine may deliver NULL in-band "cue"
            https://bugs.webkit.org/show_bug.cgi?id=116180

            Reviewed by Jer Noble.

            * platform/graphics/avfoundation/InbandTextTrackPrivateAVF.cpp:
            (WebCore::InbandTextTrackPrivateAVF::processCue): NULL check before logging cue count.

2013-05-15  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/13905660> REGRESSION(11A363): PLT got 20% slower after merge #8

        Reviewed by Dan Bernstein.

        The last merge lost the fast font path optimization made for kerning and ligatures. As a
        result we were going down the complex text path with kerning and ligatures enabled. This
        change puts the code in the right #if.

        * platform/graphics/WidthIterator.h:
        (WebCore::WidthIterator::supportsTypesettingFeatures):

2013-05-15  Eric Carlson  <eric.carlson@apple.com>

        Merged ToT WebKit r150055.

    2013-05-13  Eric Carlson  <eric.carlson@apple.com>

            [Mac] update in-band caption attributes
            https://bugs.webkit.org/show_bug.cgi?id=116057

            Reviewed by Dean Jackson.

            * html/track/InbandTextTrack.cpp:
            (WebCore::InbandTextTrack::updateCueFromCueData): Copy highlight color.

            * html/track/TextTrackCueGeneric.cpp:
            (WebCore::TextTrackCueGenericBoxElement::applyCSSProperties): "highlight" color sets the cue
                background, "background" color sets the cue container background.
            * html/track/TextTrackCueGeneric.h:

            * platform/graphics/InbandTextTrackPrivateClient.h:

            * platform/graphics/avfoundation/InbandTextTrackPrivateAVF.cpp:
            (WebCore::InbandTextTrackPrivateAVF::processCueAttributes): Process "highlight" color.

2013-05-15  Eric Carlson  <eric.carlson@apple.com>

        Merged ToT WebKit r149989.

    2013-05-12  Eric Carlson  <eric.carlson@apple.com>

            REGRESSION (r149749): Video becomes invisible when it starts playing at newyorkbygehry.com
            https://bugs.webkit.org/show_bug.cgi?id=115963

            Reviewed by Dean Jackson.

            Test: media/video-remove-insert-repaints.html

            * html/HTMLMediaElement.cpp:
            (WebCore::HTMLMediaElement::insertedInto): Set m_inActiveDocument when inserted into a document.
            (WebCore::HTMLMediaElement::removedFrom): Fix logging.

2013-05-15  Eric Carlson  <eric.carlson@apple.com>

        Merged ToT WebKit r149906.

    2013-05-10  Eric Carlson  <eric.carlson@apple.com>

            In-band captions not visible immediately after track mode change
            https://bugs.webkit.org/show_bug.cgi?id=115922

            Reviewed by Dean Jackson.

            Test: media/track/track-in-band-mode.html

            * html/HTMLMediaElement.cpp:
            (WebCore::HTMLMediaElement::textTrackModeChanged): Add cues for all loaded tracks, regardless
                of track type.

2013-05-15  Eric Carlson  <eric.carlson@apple.com>

        Merged ToT WebKit r149766.

    2013-05-08  Eric Carlson  <eric.carlson@apple.com>

            TextTrackCue should support empty content
            https://bugs.webkit.org/show_bug.cgi?id=115821

            Reviewed by Jer Noble.

            Test: media/track/track-cue-empty-text-crash.html

            * html/shadow/MediaControlElements.cpp:
            (WebCore::MediaControlTextTrackContainerElement::updateDisplay): Don't bother trying to render
                cues with no content.

            * html/track/TextTrackCue.cpp:
            (WebCore::TextTrackCue::getCueAsHTML): Return early if there isn't a node tree.
            (WebCore::TextTrackCue::createCueRenderingTree): Ditto.
            (WebCore::TextTrackCue::determineTextDirection): Ditto.
            (WebCore::TextTrackCue::updateDisplayTree): Return early if there isn't a cue rendering tree.

2013-05-15  Eric Carlson  <eric.carlson@apple.com>

        Merged ToT WebKit r149749.

    2013-05-08  Eric Carlson  <eric.carlson@apple.com>

        Prevent crash when track is deleted during video element deletion.
        https://bugs.webkit.org/show_bug.cgi?id=106183

        Reviewed by Dean Jackson.

        Test: media/track/track-remove-crash.html

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::removedFrom): Set m_inActiveDocument to false so we
            do not process text track cues or dispatch related events.

2013-05-15  Eric Carlson  <eric.carlson@apple.com>

        Merged ToT WebKit r149744.

    2013-05-08  Eric Carlson  <eric.carlson@apple.com>

        [Mac] Unreviewed buildfix after r149741.

        * platform/graphics/avfoundation/objc/MediaPlayerPrivateAVFoundationObjC.mm:
        (WebCore::MediaPlayerPrivateAVFoundationObjC::setClosedCaptionsVisible):

2013-05-15  Eric Carlson  <eric.carlson@apple.com>

        Merged ToT WebKit r149741.

    2013-05-08  Eric Carlson  <eric.carlson@apple.com>

            [Mac] Inband text tracks are not in track menu on Lion
            https://bugs.webkit.org/show_bug.cgi?id=115740

            Reviewed by Dean Jackson.

            No new tests, covered by existing tests.

            * html/HTMLMediaElement.cpp:
            (WebCore::HTMLMediaElement::HTMLMediaElement): Remove m_legacyWebKitClosedCaptionsVisible.
            (WebCore::HTMLMediaElement::setClosedCaptionsVisible): Set m_closedCaptionsVisible
                to false immediately, it will be reset to the appropriate value if necessary.
            (WebCore::HTMLMediaElement::setWebkitClosedCaptionsVisible): Remove m_legacyWebKitClosedCaptionsVisible.
            (WebCore::HTMLMediaElement::webkitClosedCaptionsVisible): Remove m_legacyWebKitClosedCaptionsVisible.
            * html/HTMLMediaElement.h:

            * platform/graphics/avfoundation/InbandTextTrackPrivateAVF.cpp: Remove 
                HAVE(AVFOUNDATION_TEXT_TRACK_SUPPORT) requirement. AVFOUNDATION_TEXT_TRACK_SUPPORT ->
                AVFOUNDATION_MEDIA_SELECTION_GROUP
            * platform/graphics/avfoundation/InbandTextTrackPrivateAVF.h: Ditto.

            * platform/graphics/avfoundation/MediaPlayerPrivateAVFoundation.cpp: 
            (WebCore::MediaPlayerPrivateAVFoundation::MediaPlayerPrivateAVFoundation): Ditto.
            (WebCore::MediaPlayerPrivateAVFoundation::seek): Ditto.
            (WebCore::MediaPlayerPrivateAVFoundation::seekCompleted): Ditto.
            (WebCore::MediaPlayerPrivateAVFoundation::dispatchNotification): Ditto.
            (WebCore::MediaPlayerPrivateAVFoundation::trackModeChanged): Ditto.
            * platform/graphics/avfoundation/MediaPlayerPrivateAVFoundation.h:  Ditto.

            * platform/graphics/avfoundation/objc/InbandTextTrackPrivateLegacyAVFObjC.h:  Ditto.
            * platform/graphics/avfoundation/objc/InbandTextTrackPrivateLegacyAVFObjC.mm:
            (WebCore::InbandTextTrackPrivateLegacyAVFObjC::kind): Don't look at media characteristics, 
                a legacy CC track is always Captions.
            (WebCore::InbandTextTrackPrivateLegacyAVFObjC::isClosedCaptions): Ditto.
            (WebCore::InbandTextTrackPrivateLegacyAVFObjC::containsOnlyForcedSubtitles): Ditto.
            (WebCore::InbandTextTrackPrivateLegacyAVFObjC::isMainProgramContent): Ditto.
            (WebCore::InbandTextTrackPrivateLegacyAVFObjC::isEasyToRead): Ditto.
            (WebCore::InbandTextTrackPrivateLegacyAVFObjC::label): Use different AVFoundation API on 10.7.
            * platform/graphics/avfoundation/objc/MediaPlayerPrivateAVFoundationObjC.h:

            * platform/graphics/avfoundation/objc/MediaPlayerPrivateAVFoundationObjC.mm:
            (WebCore::MediaPlayerPrivateAVFoundationObjC::MediaPlayerPrivateAVFoundationObjC): AVFOUNDATION_TEXT_TRACK_SUPPORT ->
                AVFOUNDATION_MEDIA_SELECTION_GROUP.
            (WebCore::MediaPlayerPrivateAVFoundationObjC::cancelLoad): Ditto.
            (WebCore::MediaPlayerPrivateAVFoundationObjC::setClosedCaptionsVisible): Do nothing. AVFOUNDATION_TEXT_TRACK_SUPPORT ->
                AVFOUNDATION_MEDIA_SELECTION_GROUP.
            (WebCore::MediaPlayerPrivateAVFoundationObjC::tracksChanged): Support legacy CC tracks
                only on 10.8. AVFOUNDATION_TEXT_TRACK_SUPPORT -> AVFOUNDATION_MEDIA_SELECTION_GROUP
            (WebCore::MediaPlayerPrivateAVFoundationObjC::processLegacyClosedCaptionsTracks): Ditto.
            (WebCore::MediaPlayerPrivateAVFoundationObjC::setCurrentTrack): Ditto.
            (WebCore::MediaPlayerPrivateAVFoundationObjC::languageOfPrimaryAudioTrack): AVFOUNDATION_TEXT_TRACK_SUPPORT -> 
                AVFOUNDATION_MEDIA_SELECTION_GROUP

2013-05-15  Eric Carlson  <eric.carlson@apple.com>

        Merged ToT WebKit r149503 and r149510.

    2013-05-02  Eric Carlson  <eric.carlson@apple.com>

            Unreviewed fix for Mac Lion build after r149503.

            * platform/graphics/avfoundation/objc/InbandTextTrackPrivateLegacyAVFObjC.h:
            * platform/graphics/avfoundation/objc/InbandTextTrackPrivateLegacyAVFObjC.mm:

    2013-05-15  Eric Carlson  <eric.carlson@apple.com>

            Caption menu does not include in-band captions
            https://bugs.webkit.org/show_bug.cgi?id=111934

            Reviewed by Dean Jackson.

            No new tests, upated existing tests for these changes.

            * WebCore.xcodeproj/project.pbxproj: Add new files.

            * html/HTMLMediaElement.cpp:
            (WebCore::HTMLMediaElement::HTMLMediaElement): Initialize m_legacyWebKitClosedCaptionsVisible.
            (WebCore::HTMLMediaElement::loadInternal): Clear the LoadMediaResource from m_pendingActionFlags
                in case there is a pending async load.
            (WebCore::HTMLMediaElement::configureTextTrackGroup): Always log the track score.
            (WebCore::HTMLMediaElement::configureTextTracks): Call configureTextTrackDisplay so 
                m_legacyWebKitClosedCaptionsVisible is always updated immediately.
            (WebCore::HTMLMediaElement::setWebkitClosedCaptionsVisible): Use m_legacyWebKitClosedCaptionsVisible.
            (WebCore::HTMLMediaElement::webkitClosedCaptionsVisible): Ditto.
            * html/HTMLMediaElement.h:

            * page/CaptionUserPreferences.cpp:
            (WebCore::CaptionUserPreferences::CaptionUserPreferences): Initialize m_displayMode to ForcedOnly
                because it is no longer used for testing only.
            (WebCore::CaptionUserPreferences::notify): Post notifications when not in testing-only mode.

            * page/CaptionUserPreferencesMac.h:
            * page/CaptionUserPreferencesMac.mm:
            (WebCore::CaptionUserPreferencesMac::textTrackSelectionScore): Calculate a track score when
                webkitClosedCaptionsVisible has been set.
            (WebCore::CaptionUserPreferencesMac::sortedTrackListForMenu): Don't filter track list when we
                don't have the media accessibility framework. Make logging more informative.
            * platform/graphics/avfoundation/InbandTextTrackPrivateAVF.h:

            * platform/graphics/avfoundation/MediaPlayerPrivateAVFoundation.h:

            * platform/graphics/avfoundation/objc/InbandTextTrackPrivateAVFObjC.h:
            (WebCore::InbandTextTrackPrivateAVFObjC::create): Take a AVFInbandTrackParent instead of a
                MediaPlayerPrivateAVFoundationObjC.
            * platform/graphics/avfoundation/objc/InbandTextTrackPrivateAVFObjC.mm:
            (WebCore::InbandTextTrackPrivateAVFObjC::InbandTextTrackPrivateAVFObjC): Ditto.

            * platform/graphics/avfoundation/objc/InbandTextTrackPrivateLegacyAVFObjC.h: Added.
            * platform/graphics/avfoundation/objc/InbandTextTrackPrivateLegacyAVFObjC.mm: Added.

            * platform/graphics/avfoundation/objc/MediaPlayerPrivateAVFoundationObjC.h:
            * platform/graphics/avfoundation/objc/MediaPlayerPrivateAVFoundationObjC.mm:
            (WebCore::MediaPlayerPrivateAVFoundationObjC::cancelLoad): We only have legible output when
                HAVE_AVFOUNDATION_LEGIBLE_OUTPUT_SUPPORT is defined.
            (WebCore::MediaPlayerPrivateAVFoundationObjC::createAVPlayer): Ditto.
            (WebCore::MediaPlayerPrivateAVFoundationObjC::createAVPlayerItem): Ditto.
            (WebCore::MediaPlayerPrivateAVFoundationObjC::tracksChanged): Create a legacy CC track if
                there are no media selection options and there is a CC AVAssetTrack.
            (WebCore::MediaPlayerPrivateAVFoundationObjC::processLegacyCCTracks): New, process CC tracks.
            (WebCore::MediaPlayerPrivateAVFoundationObjC::processNewAndRemovedTextTracks): New, refactored
                common setup/cleanup code from processMediaSelectionOptions.
            (WebCore::MediaPlayerPrivateAVFoundationObjC::processMediaSelectionOptions): Renamed from 
                processTextTracks. Move common setup/cleanup code to processNewAndRemovedTextTracks.
            (WebCore::MediaPlayerPrivateAVFoundationObjC::setCurrentTrack): Deal with legacy CC tracks.

2013-05-15  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/13869068> REGRESSION: MobileSafari crashed at WebCore::ResourceLoadNotifier::dispatchDidReceiveResponse when running Alexa test

        Merged ToT WebKit r150150.

    2013-05-15  Yongjun Zhang  <yongjun_zhang@apple.com>

            We should clear mainResource in DocumentLoader::cancelMainResourceLoad.
            https://bugs.webkit.org/show_bug.cgi?id=116119

            Reviewed by Oliver Hunt.

            MainResourceLoader::clearResource() was left out in r146239 when moving MainResourceLoader::cancel()
            to DocumentLoader::cancelMainResourceLoad(), we need to add it back to make sure m_mainResource is
            cleared when we cancel the loader.

            No new tests needed.

            * loader/DocumentLoader.cpp:
            (WebCore::DocumentLoader::~DocumentLoader):
            (WebCore::DocumentLoader::continueAfterNavigationPolicy):
            (WebCore::DocumentLoader::cancelMainResourceLoad):
            (WebCore::DocumentLoader::clearMainResource):
            (WebCore):
            * loader/DocumentLoader.h: add helper method clearMainResource()
            (DocumentLoader):

2013-05-15  Eric Carlson  <eric.carlson@apple.com>

        Merged ToT WebKit r149502.

    2013-05-15  Eric Carlson  <eric.carlson@apple.com>

            [Mac] caption track menu includes "easy to read" in-band tracks twice
            https://bugs.webkit.org/show_bug.cgi?id=115529

            Reviewed by Dean Jackson.

            * page/CaptionUserPreferencesMac.mm:
            (WebCore::CaptionUserPreferencesMac::sortedTrackListForMenu): Check to see if a track is
                 easy-to-read after checking if it is forced only.
2013-05-15  Eric Carlson  <eric.carlson@apple.com>

        Merged ToT WebKit r149448.

    2013-05-01  Eric Carlson  <eric.carlson@apple.com>

            [Mac Lion] Assertion failure in MediaControlTextTrackContainerElement::updateDisplay()
            https://bugs.webkit.org/show_bug.cgi?id=115289

            Reviewed by Jer Noble.

            No new tests, this is a speculative fix for an infrequent assertion.

            * html/HTMLMediaElement.cpp:
            (WebCore::HTMLMediaElement::textTrackRemoveCue): Mark the cue as inactive when it is removed
                from the active set.

2013-05-15  Chris Fleizach  <cfleizach@apple.com>

        Merge ToT WebKit r150145

    2013-05-15  Chris Fleizach  <cfleizach@apple.com>

            AX: Use caching when requesting children object on iOS
            https://bugs.webkit.org/show_bug.cgi?id=116112

             Reviewed by David Kilzer.

             Building up the children list in the AX hierarchy can be time consuming. On iOS, this
             is now much more noticeable (I believe due to the way tables calculate their AX ignored flag).

             We can speed everything up if we just cache the isIgnored() attribute while building up children.

             * accessibility/AXObjectCache.cpp:
             (WebCore::AXAttributeCacheEnabler::AXAttributeCacheEnabler):
             (WebCore):
             (WebCore::AXAttributeCacheEnabler::~AXAttributeCacheEnabler):
             * accessibility/AXObjectCache.h:
             (AXAttributeCacheEnabler):
             (WebCore):
             * accessibility/ios/WebAccessibilityObjectWrapperIOS.mm:
             (-[WebAccessibilityObjectWrapper accessibilityHitTest:]):
             (-[WebAccessibilityObjectWrapper accessibilityElementCount]):
             (-[WebAccessibilityObjectWrapper accessibilityElementAtIndex:]):
             (-[WebAccessibilityObjectWrapper indexOfAccessibilityElement:]):
             (-[WebAccessibilityObjectWrapper accessibilityContainer]):

2013-05-15  Eric Carlson  <eric.carlson@apple.com>

        Merge ToT WebKit r149443.

    2013-05-01  Eric Carlson  <eric.carlson@apple.com>

            HTMLMediaElement::updateActiveTextTrackCues can do unnecessary work
            https://bugs.webkit.org/show_bug.cgi?id=81856

            Reviewed by Jer Noble.

            No new tests, covered by existing tests.

            * html/HTMLMediaElement.h:
            (WebCore::HTMLMediaElement::ignoreTrackDisplayUpdateRequests): Add an early return when there
                is obviously no work to be done.

2013-05-14  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/13863584> PEP Web: REGRESSION: MobileSafari crashed at Document::removeTouchEventListenersInDocument when running Alexa test.

        Open source http://trac.webkit.org/changeset/146853 added willBeDeletedFrom to ContainerNoder's destructor.  willBeDeletedFrom clears
        eventTargetData for the Node.  Later, in Node::~Node(), we will skip removing the node from touchEventListeners since its eventTargetData
        is already cleared.  This leaves dangling Node* pointers in Document's m_touchEventListenersCounts and causes random crashes.

        Reviewed by Joseph Pecoraro.

        * dom/Node.cpp:
        (WebCore::Node::~Node): match open source, don't directly call removeTouchEventListeners in Node::~Node.
        (WebCore::Node::willBeDeletedFrom): remove this node from Document's event listener list before clearing its eventTargetData.

2013-05-14  Joseph Pecoraro  <pecoraro@apple.com>

        <rdar://problem/13886894> REGRESSION (Innsbruck): window.TouchEvent is false in Innsbruck 11A360, true in iOS 6

        We had previously exposed window.TouchEvent. Re-expose it.

        Reviewed by David Kilzer.

        Test: platform/iphone-simulator/iphone/fast/events/touch/gesture-event-basic.html

        * page/DOMWindow.idl:

2013-05-14  Mark Lam  <mark.lam@apple.com>

        <rdar://problem/13175819> Restore DatabaseTracker::openDatabaseMutex() and
        SQLiteTransactionInProgressAutoCounter on iOS after Database refactoring.

        Reviewed by David Kilzer.

        * Modules/webdatabase/Database.cpp: Removed redundant #include.
        * Modules/webdatabase/DatabaseBackendBase.cpp:
        (WebCore::DatabaseBackendBase::performOpenAndVerify):
        - Add back code to acquire the openDatabaseMutex(). At launch time, the client
          (e.g. MobileSafari) will call scheduleEmptyDatabaseRemoval() which acquires
          this lock. While empty databases are being removed, this lock will be held
          to keep databases from being opened. There is no race because the client
          ensures that scheduleEmptyDatabaseRemoval() is called first before web code
          that can open databases are allowed to run.
        * Modules/webdatabase/DatabaseTracker.cpp: Removed redundant #include.

2013-05-14  Mark Hahnenberg  <mhahnenberg@apple.com>

        <rdar://problem/13889005> Objective-C API: Bridging between C API and Obj-C API should be part of the public interface

        Merged ToT WebKit r149401

    2013-04-30  Geoffrey Garen  <ggaren@apple.com>

        Objective-C JavaScriptCore API should publicly support bridging to C
        https://bugs.webkit.org/show_bug.cgi?id=115447

        Reviewed by Mark Hahnenberg.

        * bindings/js/ScriptControllerMac.mm:
        (WebCore::ScriptController::javaScriptContext):
        * bindings/objc/WebScriptObject.mm:
        (-[WebScriptObject JSValue]):

2013-05-14  Antti Koivisto  <antti@apple.com>

        <rdar://problem/13886044> Don't create speculative tiles on main thread

        Reviewed by Oliver Hunt.

        We should not create speculative (not currently visible) tiles when tile creation is forced from the main thread. 
        It should only happen asynchrony when the creation timer fires in web thread.        
        
        The patch makes Notes create one tile instead of two in main thread when entering note, cutting painting
        time to half. On N41 when entering a letterpressed note this looks like about ~70ms speedup.

        * platform/ios/TileCache.h:
        (TileCache):
        * platform/ios/TileCache.mm:
        
            Add enum controlling if we should create speculative tiles with current CA transaction. It is only
            allowed when the asynchronous tile creation timer fires.

        (WebCore::TileCache::doLayoutTiles):
        (WebCore::TileCache::layoutTilesNow):
        (WebCore::TileCache::tileCreationTimerFired):
        (WebCore::TileCache::createTilesInActiveGrid):
        (WebCore::TileCache::updateTilingMode):
        * platform/ios/TileGrid.h:
        (WebCore):
        (TileGrid):
        * platform/ios/TileGrid.mm:
        (WebCore::TileGrid::createTiles):
        
            Cover only the viewport if CoverVisibleOnly is set. If viewport is already covered do nothing except
            starting the tile creation timer.

2013-05-13  Benjamin Poulain  <bpoulain@apple.com>

        <rdar://problem/12688982> Touch events handlers are broken after coming from the back-forward cache

        Reviewed by David Kilzer.

        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::stopLoading): This code was refactored by OpenSource r61801
        but for some reason this bits were left over in iOS.

        That broke the back-forward cache for nested frames because all their event handlers
        are removed before caching the frame.
        What is supposed to happen instead is each CacheFrame constructor call FrameLoader::stopLoading()
        on its own frame, but only after setting InPageCache to true.
        With inPageCache == true, FrameLoader::stopLoading() never call removeAllEventListeners.

2013-05-11  Enrica Casucci  <enrica@apple.com>

        REGRESSION (Innsbruck): Variety of MathML fenced operators not being rendered correctly.
        <rdar://problem/13599270>

        Reviewed by Dean Jackson.

        This is a merge regression (https://svn.apple.com/trac/puzzlebox/changeset/1167317).
        I fixed the list of font families to be used on iOS and added a comment
        to help prevent this issue in the future.

        * css/mathml.css:

2013-05-09  Antti Koivisto  <antti@apple.com>

        <rdar://problem/13748782> Web content turns white during navigation gesture (if page finishes loading)
        
        Reviewed by Ian Henderson.

        Freeze the visible rect during navigation gesture. This prevents tiles from disappering
        due to visible rect changing or becoming empty.
        
        Add [WAKView freezeVisibleRect] and [WAKView unfreezeVisibleRect]. These do the same thing
        as will/didRotate with more general naming.

        * wak/WAKWindow.h:
        * wak/WAKWindow.mm:
        (-[WAKWindow initWithLayer:]):
        (-[WAKWindow _visibleRectRespectingMasksToBounds:]):
        (-[WAKWindow willRotate]):
        (-[WAKWindow didRotate]):
        (-[WAKWindow freezeVisibleRect]):
        (-[WAKWindow unfreezeVisibleRect]):
        (-[WAKWindow dumpTiles]):

2013-05-09  Enrica Casucci  <enrica@apple.com>

        Merge ToT WebKit r149839.

        * rendering/RenderThemeIOS.cpp:
        (WebCore::contentSizeCategoryDidChange):

    2013-05-09  Enrica Casucci  <enrica@apple.com>
    
        A change in system environment should force all CSS properties to be recomputed.
        https://bugs.webkit.org/show_bug.cgi?id=115872
        <rdar://problem/13781171>

        Reviewed by Antti Koivisto.

        When a change in the global environment occurs, for example system colors,
        we need to make sure all the CSS properties are recomputed and not fetched
        from the cache. For this reason we invalidate the properties cache.
        I've also renamed the function to give it a more meaningful name.
        
        * page/Page.cpp:
        (WebCore::Page::updateStyleForAllPagesAfterGlobalChangeInEnvironment):
        * page/Page.h:
        * rendering/RenderTheme.cpp:
        (WebCore::RenderTheme::platformColorsDidChange):


2013-05-08  Enrica Casucci  <enrica@apple.com>

        [Innsbruck11A348] Regression: Cannot make a word both Italic and Bold
        <rdar://problem/13751389> 
        
        Reviewed by Dean Jackson.

        CoreText now provides a mapping for some usage type identifiers to the
        corresponding font with traits. createCTFontForUsage now takes an
        additional parameter for the traits and uses CTFontDescriptorCreateCopyWithSymbolicTraits
        to create a new font descriptor for the variant with traits starting from an existing
        font descriptor.

        * platform/graphics/ios/FontCacheIOS.mm:
        (WebCore::createCTFontForUsage):
        (WebCore::FontCache::createFontPlatformData):

2013-05-08  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/12598173> Text autosizing doesn't work well with chinese text on http://sports.sina.com.cn/china/

        If a LI element has fixed height, don't apply text autosizing.

        Reviewed by Enrica Casucci <enrica@apple.com>.

        * rendering/RenderBlock.cpp:
        (WebCore::includeNonBlocksOrListItems):

2013-05-08  Enrica Casucci  <enrica@apple.com>

        WhatsApp crashes in WebCore::Frame::styleAtSelectionStart below -[UIWebDocumentView typingAttributes]
        <rdar://problem/13800733>
        
        Reviewed by Joseph Pecoraro.

        In styleAtSelectionStart we don't account for the case when
        EditingStyle is null, which happens for example is there is
        no selection. Added a null check.

        * page/ios/FrameIOS.mm:
        (WebCore::Frame::styleAtSelectionStart):

2013-05-07  Dean Jackson  <dino@apple.com>

        <rdar://problem/13824227> WebKit to support fast path letterpress

        Reviewed by Simon Fraser.

        We've decided that the high-quality letterpress effect is too expensive, so
        enable the fast path. Rather than an embossing, this emulates the result with
        pure CG calls.

        * platform/graphics/mac/FontMac.mm:
        (WebCore::showLetterpressedGlyphsWithAdvances): Create a CUIStyleEffectConfiguration
        and always tell it to use the simplified path.

2013-05-07  Enrica Casucci  <enrica@apple.com>

        WebCore should move off of deprecated content category API
        <rdar://problem/13753942> 
        
        Reviewed by Dean Jackson.

        Follow up patch. The usage was set to the new constant, but
        CT was still being given the deprecated one.

        * rendering/RenderThemeIOS.mm:
        (WebCore::RenderThemeIOS::systemFont):

2013-05-07  Enrica Casucci  <enrica@apple.com>

        Need a short description (OOPS!).
        Need the bug URL (OOPS!).

        Reviewed by NOBODY (OOPS!).

        No new tests (OOPS!).

        * rendering/RenderThemeIOS.mm:
        (WebCore::RenderThemeIOS::systemFont):

2013-05-06  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/13819754> -webkit-text-size-adjust doesn't show in the list of all computed style properties in the Inspector

        Reviewed by Enrica Casucci.

        Add CSSPropertyWebkitTextSizeAdjust to the list of all computed properties for iOS, so
        that it's shown by the inspector for nodes that don't set it expicitly.

        * css/CSSComputedStyleDeclaration.cpp:
        (WebCore):

2013-05-04  Dean Jackson  <dino@apple.com>

        <rdar://problem/10372187> -setCSSAnimationsSuspended doesn't suspend new animations and breaks on page load

        Merged ToT WebKit r148071, r148145 and r149576

    2013-05-04  Dean Jackson  <dino@apple.com>

            Animations and Transitions should not start when globally suspended
            https://bugs.webkit.org/show_bug.cgi?id=114915

            Reviewed by Sam Weinig.

            When the Document's AnimationController was suspended, we still
            started new transitions and animations. Change this so that
            animations enter a paused-but-new state, where they are frozen
            until the AnimationController resumes. At that time, it is as
            if they had just appeared: any delay counts down before
            the animation starts.

            For transitions, the change in value must still happen, but
            it does so immediately. No transitionend event should be fired.
            This produces a slightly confusing behaviour, because any
            in-progress transitions are suspended, but any new style changes
            happen instantly. This might sound contradictory, but in general
            suspending the document is a rare (and dangerous) thing to do.

            Previously, the Document would call resumeAnimations as it loaded,
            effectively starting all the animations. This meant if you suspended
            animations before loading a document, it was ignored as soon as the
            load finished. Now there is a separate method startAnimationsIfNotSuspended
            which checks to see if the document is suspended as it loads.

            In order to handle this case, I added a new state to the Animation
            machinery: AnimationStatePausedNew. This is an animation that was created
            in the suspended state.

            Tests: animations/added-while-suspended.html
                   transitions/started-while-suspended.html

            * WebCore.exp.in: Export AnimationController::isSuspended().

            * dom/Document.cpp:
            (WebCore::Document::implicitClose):
                resumeAnimationsForDocument() -> startAnimationsIfNotSuspended()

            * page/animation/AnimationBase.cpp:
            (WebCore::nameForState): New name for AnimationStatePausedNew.
            (WebCore::AnimationBase::updateStateMachine): Handle new state AnimationStatePausedNew. The
                most important change is that when go from PausedNew to Running, we jump back into
                the New state and continue from there.
            (WebCore::AnimationBase::updatePlayState): suspended -> isSuspended
            * page/animation/AnimationBase.h: New state: AnimationStatePausedNew
            (WebCore::AnimationBase::waitingToStart): Add AnimationStatePausedNew.
            (WebCore::AnimationBase::paused): Add AnimationStatePausedNew.
            (WebCore::AnimationBase::isNew): Add AnimationStatePausedNew.

            * page/animation/AnimationController.cpp:
            (WebCore::AnimationControllerPrivate::AnimationControllerPrivate): Initialise m_suspended.
            (WebCore::AnimationControllerPrivate::clear): suspended -> isSuspended
            (WebCore::AnimationControllerPrivate::updateAnimations): Ditto.
            (WebCore::AnimationControllerPrivate::updateAnimationTimerForRenderer): Ditto.
            (WebCore::AnimationControllerPrivate::suspendAnimations): Update m_suspended.
            (WebCore::AnimationControllerPrivate::resumeAnimations): Ditto.
            (WebCore::AnimationControllerPrivate::suspendAnimationsForDocument):
            (WebCore::AnimationControllerPrivate::resumeAnimationsForDocument):
            (WebCore::AnimationControllerPrivate::startAnimationsIfNotSuspended): New method that will
                only resume animations if we were not globally suspended.
            (WebCore::AnimationController::isSuspended): New method.
            (WebCore::AnimationController::suspendAnimations): Add logging.
            (WebCore::AnimationController::resumeAnimations): Add logging.
            (WebCore::AnimationController::suspendAnimationsForDocument): Add logging.
            (WebCore::AnimationController::resumeAnimationsForDocument): Add logging.
            (WebCore::AnimationController::startAnimationsIfNotSuspended): Calls private method.
            * page/animation/AnimationController.h:
            (AnimationController): Add isSuspended() and animationsForDocumentMayStart().
            * page/animation/AnimationControllerPrivate.h:
            (WebCore::AnimationControllerPrivate::isSuspended): New method.
            (AnimationControllerPrivate): Add m_isSuspended member.

            * page/animation/CompositeAnimation.cpp:
            (WebCore::CompositeAnimation::CompositeAnimation): Moved from header - initialise m_isSuspended.
            (WebCore::CompositeAnimation::updateTransitions): Do not create ImplicitAnimation if suspended.
            (WebCore::CompositeAnimation::updateKeyframeAnimations): Move to AnimationStatePausedNew if suspended.
            (WebCore::CompositeAnimation::suspendAnimations): m_suspended -> m_isSuspended
            (WebCore::CompositeAnimation::resumeAnimations): Ditto.
            * page/animation/CompositeAnimation.h:
            (WebCore::CompositeAnimation::isSuspended): Renamed from suspended()

            * page/animation/KeyframeAnimation.cpp:
            (WebCore::KeyframeAnimation::animate): If we're in the AnimationStatePausedNew state, then
                we need to go to the first frame (to handle fill mode).

            * testing/Internals.cpp:
            (WebCore::Internals::animationsAreSuspended): New exposed method to reflect AnimationController.
            * testing/Internals.h: Add animationsAreSuspended.
            * testing/Internals.idl: Ditto.

    2013-04-10  Simon Fraser  <simon.fraser@apple.com>

            Flesh out the Animations logging
            https://bugs.webkit.org/show_bug.cgi?id=114388

            Reviewed by Dean Jackson.

            Log state changes and transition/animation creation and destruction
            to the Animations log channel.

            * page/animation/AnimationBase.cpp:
            (WebCore::nameForState):
            (WebCore::AnimationBase::updateStateMachine):
            (WebCore::AnimationBase::fireAnimationEventsIfNeeded):
            (WebCore::AnimationBase::goIntoEndingOrLoopingState):
            (WebCore::AnimationBase::freezeAtTime):
            * page/animation/CompositeAnimation.cpp:
            (WebCore::CompositeAnimation::updateTransitions):
            (WebCore::CompositeAnimation::updateKeyframeAnimations):
            * page/animation/KeyframeAnimation.h:
            (WebCore::KeyframeAnimation::keyframes):
            (KeyframeAnimation):

    2013-04-09  Dean Jackson  <dino@apple.com>

            Add logging channel for animations
            https://bugs.webkit.org/show_bug.cgi?id=114325

            Reviewed by Simon Fraser.

            * platform/Logging.cpp: Add LogAnimations.
            (WebCore::getChannelFromName): Return LogAnimations for "Animations".
            * platform/Logging.h: Add LogAnimations.
            * platform/mac/LoggingMac.mm:
            (WebCore::initializeLoggingChannelsIfNecessary): Copy preference.
            * platform/win/LoggingWin.cpp:
            (WebCore::initializeLoggingChannelsIfNecessary): Copy preference.

2013-05-01  Enrica Casucci  <enrica@apple.com>

        Merge ToT WebKit r149474.

    2013-05-01  Enrica Casucci  <enrica@apple.com>
        
        text-combine: horizontal does not work properly for some fonts.
        https://bugs.webkit.org/show_bug.cgi?id=115503.

        Reviewed by Dave Hyatt.

        For some fonts that don't have width variants, we fail to combine glyphs
        because we believe they don't fit. That decision is made comparing the run width
        with the font computed size multiplied by a margin factor.
        I've increased the margin from 10% to 15%.
         
        Test: fast/text/text-combine-different-fonts.html

        * rendering/RenderCombineText.cpp:

2013-04-30  Benjamin Poulain  <bpoulain@apple.com>

        Keep track of events handling by the EventHandler in WebEvent

        Reviewed by Ian Henderson.

        WebCore EventHandler returns a boolean to indicate if the event was handled by
        WebCore/JavaScript or if it is unused.

        We need to report this value to the WebKit and UIKit layers to decide what
        to do when an event is not handled.
        This patch implement that by store the value on WebEvent. The alternative is to
        modify every event dispatching method. Modifying WebEvent was chosen because it is
        simpler.

        * page/ios/EventHandlerIOS.mm:
        (WebCore::EventHandler::wheelEvent):
        (WebCore::EventHandler::touchEvent):
        (WebCore::EventHandler::keyEvent):
        (WebCore::EventHandler::mouseDown):
        (WebCore::EventHandler::mouseUp):
        (WebCore::EventHandler::mouseMoved):
        * platform/ios/WebEvent.h:
        * platform/ios/WebEvent.mm:

2013-05-01  Enrica Casucci  <enrica@apple.com>

        Merge ToT WebKit r149450.

    2013-05-01  Enrica Casucci  <enrica@apple.com>

        Incorrect layout for blocks containing ideographs with -webkit-linebox-contain: glyphs, font, inline-box.
        https://bugs.webkit.org/show_bug.cgi?id=115478.

        Reviewed by Dave Hyatt.

        Test: fast/block/lineboxcontain/block-with-ideographs.xhtml

        When computing ascent and descent we need to take into account
        the baseline type. RootInlineBox::ascentAndDescentForBox failed
        to do that in few cases.

        * rendering/RootInlineBox.cpp:
        (WebCore::RootInlineBox::ascentAndDescentForBox):

2013-05-01  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/13737662> "Open in Reader" doesn't work for links on sina.cn (wrong innerWidth for offscreen WebView).

        "Open in Reader" and ReadingListFetcher use offscreen WebView, which doesn't have a WAKWindow.  This
        causes the new hitTest based Reader algorithm fail since it uses window.innerWidth to decide hitting
        points.  Normally, innerWidth is obtained from actuallVisibleRect by walking up the layer tree in WAKWindow.
        For offscreen WebView's, there is no WAKWindow and we need to use the view's documentVisibleRect.

        Reviewed by Antti Koivisto.

        * wak/WAKScrollView.mm:
        (-[WAKScrollView actualDocumentVisibleRect]):

2013-04-29  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/13443266> Make sure that CSS shaders are not enabled when we ship Innsbruck

        Reviewed by Joseph Pecoraro.

        * Configurations/FeatureDefines.xcconfig: Turn off
        ENABLE_CSS_SHADERS on iOS.

2013-04-29  Enrica Casucci  <enrica@apple.com>

        WebCore should move off of deprecated content category API
        <rdar://problem/13753942>

        Reviewed by Dan Bernstein.

        Changing the names of the constants corresponding to the usages as well as
        the name of the notification we receive when the text size changes from the
        settings.
        
        * platform/graphics/ios/FontCacheIOS.mm:
        (WebCore::createCTFontForUsage): Now uses contentSizeCategory instead of
        contentSizeCategoryName.
        * rendering/RenderThemeIOS.h:
        (RenderThemeIOS): Renamed contentSizeCategoryName to contentSizeCategory.
        * rendering/RenderThemeIOS.mm:
        (WebCore::contentSizeCategoryDidChange):
        (WebCore::RenderThemeIOS::RenderThemeIOS):
        (WebCore::RenderThemeIOS::contentSizeCategory):
        (WebCore::RenderThemeIOS::systemFont):

2013-04-27  Dean Jackson  <dino@apple.com>

        <rdar://problem/13737260> Letterpress: Obtain CUICatalog from UIKit

        Reviewed by Sam Weinig.

        Use the system text effects CoreUI catalog, so that we don't have to
        keep our catalog in sync with UIKit.

        * Resources/TextEffects.car: Removed.
        * WebCore.xcodeproj/project.pbxproj: Remove TextEffects.car.
        * platform/graphics/mac/FontMac.mm: Soft link UIKit.
        (WebCore::showLetterpressedGlyphsWithAdvances): Use _UIKitGetTextEffectsCatalog() to get catalog.

2013-04-27  Antti Koivisto  <antti@apple.com>

        <rdar://problem/13522835> ASSERTION FAILED: !state.fontDirty() when loading cnn.com in the simulator

        Reviewed by Dan Bernstein.

        The -webkit-text-size-adjust property is applied too late. The assert verifies that all properties that
        affect font size are resolved before properties that depend on it.

        Fix by making -webkit-text-size-adjust a "high priority" property. This should have little or no impact
        except making the assertion go away.

        * css/CSSPropertyNames.in:

2013-04-26  Ian Henderson  <ianh@apple.com>

        <rdar://problem/13740414> Stopped reporting fake viewport above overlay buttons

        Reviewed by Joseph Pecoraro.

        When we changed the meaning of -visibleRect for
        <rdar://problem/13491517> (Background color peeks through while
        loading pages), it fixed the tile cache but broke other clients of
        the method.

        Restore the old behavior of -visibleRect for computing the visible
        region in WAKScrollView and introduce a new -extendedVisibleRect for
        use in the tile cache that keeps the new behavior.

        * platform/ios/TileCache.mm:
        (WebCore::TileCache::visibleRectInLayer): Use extendedVisibleRect
        instead of visibleRect.
        * wak/WAKWindow.h:
        * wak/WAKWindow.mm:
        (-[WAKWindow _visibleRectRespectingMasksToBounds:]):
        (-[WAKWindow visibleRect]): Get the old visibleRect behavior by
        passing NO to _visibleRectRespectingMasksToBounds:.
        (-[WAKWindow extendedVisibleRect]): Retains the new visibleRect
        behavior by passing YES to the same.

2013-04-26  Michael Saboff  <msaboff@apple.com>

        <rdar://problem/13391205> REGRESSION (Innsbruck): Only the first episode of each TV series is showing on iPads

        Merged ToT WebKit r149216.

    2013-04-26  Michael Saboff  <msaboff@apple.com>

            WebCore ObjC bridge is missing support for bool type
            https://bugs.webkit.org/show_bug.cgi?id=115276

            Reviewed by Geoffrey Garen.

            Added code to handle conversion between ObjC and JS booleans.

            * bridge/objc/objc_instance.mm:
            (ObjcInstance::invokeObjcMethod):
            * bridge/objc/objc_utility.h:
            * bridge/objc/objc_utility.mm:
            (JSC::Bindings::convertValueToObjcValue):
            (JSC::Bindings::convertObjcValueToValue):
            (JSC::Bindings::objcValueTypeForType):

2013-04-26  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/13037806> REGRESSION(Innsbruck): Hitting "Continue" on untrusted certificate alert constantly reloads page instead of showing auth alert

        Reviewed by Joseph Pecoraro.

        Bring back part of the code added for <rdar://problem/9845371> (r1056473). We lost this in
        merge#4 <rdar://problem/12511066>.

        * platform/network/cf/ResourceHandleCFNet.cpp:
        (WebCore::ResourceHandle::createCFURLConnection): Call ResourceHandle::createSSLPropertiesFromNSURLRequest()
        so we add the appropriate SSL properties for loading pages with self-signed certs.

2013-04-26  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/13733571> Adopt CTFontCreateForCSS() in WebKit

        Reviewed by Dan Bernstein and Sam Weinig.

        Adopt the new SPI from CoreText that gives us a CSS weighted font. We replace our custom
        weight matching code with this SPI.

        This reduces the time spent under FontCache::getCachedFontPlatformData() by around 40% and
        will help us resolve <rdar://13540224>.

        * platform/graphics/ios/FontCacheIOS.mm:
        (WebCore::createCTFontWithFamilyNameAndWeight):
        (WebCore::toCTFontWeight):

2013-04-26  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/13741915> Crash under WebCore::RenderThemeIOS::systemFont() when running layout test fast/text/backslash-to-yen-sign-euc.html

        Reviewed by Yongjun Zhang.

        'usage' variable was not being initialized in the default switch case. Initialize it to
        kCTFontUsageIdentifierEmphasized which maps to kCTFontUIFontEmphasizedSystem in CoreText.

        * rendering/RenderThemeIOS.mm:
        (WebCore::RenderThemeIOS::systemFont):

2013-04-25  Dean Jackson  <dino@apple.com>

        <rdar://problem/13711261> Allow web content to have letterpress-style text

        Reviewed by Tim Horton.

        Support the iOS "Letterpress" style text using a custom CSS property
        value for text-decoration: -webkit-letterpress.

        When this is set on a piece of text, we bypass the normal text
        rendering code and instead call into CoreUI, which will draw the
        text in a particular way. The parameters to the rendering are
        controlled by a UICatalog, which we load from the WebCore bundle.
        Eventually we want to have a hosting app (e.g. Notes) provide
        the system (UIKit) catalog, so that we always have the same rendering.
        <rdar://problem/13737260> Provide SPI so that hosting app can set the
        CUICatalog (for letterpress)

        There are some limitations to the current system:

        - There must not be a page scale. CoreUI does not handle CGContexts with a scaling
          transform of values other than 1.0 and 2.0 <rdar://problem/13737282>
        - The rendering is quite slow
        - Vertical text is not supported <rdar://problem/13737298>
        - Underlines are not letterpressed <rdar://problem/13737307>
        - Emoji are filled with a solid color and have the wrong font size <rdar://problem/13737310>

        Test: platform/iphone-simulator/iphone/css/getComputedStyle-text-decoration-letterpress.html

        * Resources/TextEffects.car: Added. Copied from a UIKit build. Eventually this will be
            replaced by an external catalog.
        * WebCore.xcodeproj/project.pbxproj: Add the new .car file and copy it into the bundle.
        * css/CSSComputedStyleDeclaration.cpp:
        (WebCore::renderTextDecorationFlagsToCSSValue): Output "-webkit-letterpress" if necessary.
        * css/CSSParser.cpp:
        (WebCore::CSSParser::parseTextDecoration): Handle CSSValueWebkitLetterpress.
        * css/CSSPrimitiveValueMappings.h:
        (WebCore::CSSPrimitiveValue::operator ETextDecoration): Map CSSValueWebkitLetterpress to LETTERPRESS.
        * css/CSSValueKeywords.in: Add "-webkit-letterpress". This means that "-apple-letterpress"
            also works.
        * platform/graphics/GraphicsContext.h: New TextDrawingMode - TextModeLetterpress.
        * platform/graphics/mac/FontMac.mm: Soft link CoreUI.
        (WebCore::GetTextEffectsCatalog): Retrieve the TextEffects.car from the bundle and create a
            CUICatalog.
        (WebCore::showLetterpressedGlyphsWithAdvances): New method to render Letterpress. I made a separate
            function rather than interleaving yet another path in the showGlyphsWithAdvances method.
            This calls into CUICatalog to render the letterpress style.
        (WebCore::Font::drawGlyphs): Detect if we're in a letterpress mode. If so, do not scale the CGContext
            text matrix (otherwise that would produce a massive buffer in CoreUI). Then call into our
            new method above for letterpress rendering.
        * rendering/InlineTextBox.cpp:
        (WebCore::InlineTextBox::paint): Detect a letterpress text decoration, and set the text
            drawing mode appropriately.
        * rendering/style/RenderStyleConstants.h: Add LETTERPRESS.

2013-04-24  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/13656890> PEP Web: if we manually send two memory warings to MobileSafari with memnote, the second one will be ignored.

        In MobileSafari, when we got into low memory state,  we set a flag in MemoryPressureHandler and listen to 
        dispatch event DISPATCH_MEMORYSTATUS_PRESSURE_NORMAL to toggle this flag back to normal memory state.  If
        we get another memory warning before normal state, we will ignore the warning.  This could get Safari jetsam'ed
        if the system free memory is very low and the kernel sends us multiple memory warnings in short period, but
        we fail to respond them since we are already in low memory state.  We can fix this by always handling memory
        warnings, no matter whether we are currently in low memory state or not.

        Reviewed by Pratik Solanki.

        * platform/MemoryPressureHandler.cpp:
        (WebCore::MemoryPressureHandler::MemoryPressureHandler):
        * platform/MemoryPressureHandler.h:
        (MemoryPressureHandler):
        * platform/ios/MemoryPressureHandlerIOS.mm:
        (WebCore::MemoryPressureHandler::setReceivedMemoryPressure): always schedule the memory handler when we
            receive a memory warning.
        (WebCore::MemoryPressureHandler::respondToMemoryPressureIfNeeded):

2013-04-23  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/13391205> REGRESSION (Innsbruck): Only the first episode of each TV series is showing on iPads

        Merged ToT WebKit r148988.

    2013-04-23  Simon Fraser  <simon.fraser@apple.com>

        Tiled layers clipped inside nested transform/preserve-3d hierarchies
        https://bugs.webkit.org/show_bug.cgi?id=115044

        Reviewed by Dean Jackson.
        
        The optimization added in r139479 to call move() for integral translation
        transforms hit a bug in TransformState::move(). If m_accumulatedTransform is
        not null, we have to apply it.

        Test: compositing/visible-rect/flipped-preserve-3d.html

        * platform/graphics/transforms/TransformState.cpp:
        (WebCore::TransformState::move):

2013-04-19  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/13690460> Need to take the web thread lock in WebTileLayer's drawInContext:

        Reviewed by Yongjun Zhang.

        WebTileLayer is used for TileController tiles, in tiled backing layers.
        When CA calls our drawInContext: for these layers, we need to ensure we
        have the web thread lock.

        * platform/graphics/ca/mac/WebTileLayer.mm:
        (-[WebTileLayer drawInContext:]):

2013-04-10  Benjamin Poulain  <bpoulain@apple.com>

        <rdar://problem/13264311> - Add the plumbing to report data usage to the WebKit layer

        Reviewed by David Kilzer.

        Extract the network data usage after each end of network session if
        networkDataTracking is enabled.

        The data is then forwarded to the NetworkingContext to forward it up to WebKit.

        * platform/network/NetworkingContext.h:
        (NetworkingContext):
        * platform/network/cf/ResourceHandleCFNet.cpp:
        (WebCore):
        (WebCore::reportNetworkDataUsage):
        (WebCore::didFinishLoading):
        (WebCore::didFail):
        (WebCore::ResourceHandleInternal::~ResourceHandleInternal):
        (WebCore::ResourceHandle::cancel):
        (WebCore::ResourceHandle::platformLoadResourceSynchronously):

2013-04-09  Benjamin Poulain  <bpoulain@apple.com>

        Add a setting to enable network data tracking

        Reviewed by David Kilzer.

        Getting accurate network data tracking slows the network
        considerably.
        To avoid paying the price when the data is not needed, put
        it behind a switch global setting.

        * WebCore.exp.in:
        * page/Settings.cpp:
        (WebCore):
        (WebCore::Settings::setNetworkDataUsageTrackingEnabled):
        (WebCore::Settings::networkDataUsageTrackingEnabled):
        * page/Settings.h:
        (Settings):
        * platform/network/cf/ResourceHandleCFNet.cpp:
        (WebCore::ResourceHandle::createCFURLConnection):

2013-04-18  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/13641287> REGRESSION (Innsbruck): Slashdot.org is unreadable

        Merged ToT WebKit r148707.

    2013-04-18  Simon Fraser  <simon.fraser@apple.com>

        Remove GraphicsLayerCA::constrainedSize() now that we can manage large layer memory use ourselves in TileController
        https://bugs.webkit.org/show_bug.cgi?id=114834

        Reviewed by Tim Horton.

        GraphicsLayerCA::constrainedSize() was added to handle poor CATiledLayer behavior when layer sizes
        got extremely large. Now that we no longer use CATiledLayer, remove this code. We can later add
        tile memory bounding to TileController if that becomes necessary.

        * platform/graphics/ca/GraphicsLayerCA.cpp:
        (WebCore::GraphicsLayerCA::updateGeometry):
        * platform/graphics/ca/GraphicsLayerCA.h:
        (GraphicsLayerCA):

2013-04-18  Simon Fraser  <simon.fraser@apple.com>

        Merged ToT WebKit r147682.

    2013-04-04  Simon Fraser  <simon.fraser@apple.com>

        Page content missing when flipping from an empty layer to a tiled layer
        https://bugs.webkit.org/show_bug.cgi?id=113977
        <rdar://problem/13444219>

        Reviewed by Tim Horton.
        
        Some articles on USA Today were missing content on load, when a large GraphicsLayer
        which did not draw content needed to draw content (and become tiled in the process).
        
        The bug was an ordering dependency in GraphicsLayerCA::commitLayerChangesBeforeSublayers().
        swapFromOrToTiledLayer() sets some dirty flags, but for some properties which have
        already been committed in the current flush cycle.
        
        Fix by moving the swapFromOrToTiledLayer() to the top of the commit, which is
        safe since it only consults GraphicsLayer properties, not CALayer properties.

        Test: compositing/tiling/empty-to-tiled.html

        * platform/graphics/ca/GraphicsLayerCA.cpp:
        (WebCore::GraphicsLayerCA::commitLayerChangesBeforeSublayers):
        (WebCore::GraphicsLayerCA::updateGeometry):
        (WebCore::GraphicsLayerCA::updateLayerDrawsContent):
        (WebCore::GraphicsLayerCA::updateContentsScale):
        * platform/graphics/ca/GraphicsLayerCA.h:
        (GraphicsLayerCA):

2013-04-18  Enrica Casucci  <enrica@apple.com>

        FontCache::getCachedFontPlatformData() takes 1.2s (was 1.5s) for nikkei.com PLT3 page load on N42
        <rdar://problem/13540224>
        
        Reviewed by Benjamin Poulain.

        When there is no match for family name nor postscript name, we
        should return 0, instead of trying to create another descriptor
        with CTFontDescriptorCreateWithNameAndSize. This will improve
        the performance of the case where the font is not found.

        * platform/graphics/ios/FontCacheIOS.mm:
        (WebCore::createCTFontWithFamilyNameAndWeight):

2013-04-17  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/13543253> REGRESSSION: https://medium.com/on-startups/55d6e81717a2 doesn't render anything below initial visible area (breaks Netflix, Wikipedia apps)

        Reviewed by Ian Henderson.

        Fix two issues that caused problems when computing the visibleRect for TiledBacking
        contained within accelerated overflow-scroll elements.

        * platform/graphics/ca/GraphicsLayerCA.cpp:
        (WebCore::GraphicsLayerCA::computeVisibleRect): UIKit is changing the contents origin of the UIScrollView's
        content layer as you scroll, but we don't want to have to update GraphicsLayers for every scroll increment,
        so consult the CALayer's bounds origin directly (via PlatformCALayer) rather than just relying on the GraphicsLayer
        bounds origin, which can go stale.
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::didChangeVisibleRect): Apply the same #ifdef that we do when flushing layers,
        to get the correct visibleRect for iOS.

2013-04-17  Simon Fraser  <simon.fraser@apple.com>

        Prerequisite for <rdar://problem/13543253> REGRESSSION: https://medium.com/on-startups/55d6e81717a2 doesn't render anything below initial visible area (breaks Netflix, Wikipedia apps)

        Merged ToT WebKit r148651.

    2013-04-17  Simon Fraser  <simon.fraser@apple.com>
    
            Fix GraphicsLayerCA::recursiveVisibleRectChangeRequiresFlush() to do predictive visible rect expansion
            https://bugs.webkit.org/show_bug.cgi?id=114775
    
            Reviewed by Tim Horton.
    
            GraphicsLayerCA::recursiveVisibleRectChangeRequiresFlush() is intended to answer the question
            "if your visible rect is changed to X, would any tiles be created or destroyed?".
            
            However, for compositing layer tiled layers, we do some predictive visible rect expansion based on how
            the visible rect is changing when we actually commit visible rect changes. recursiveVisibleRectChangeRequiresFlush()
            was not doing that, causing it to give confusing answers, so fix it to do so.
            
            Both now call adjustTiledLayerVisibleRect(), and it's cleaner to make this a static function.
            
            A somewhat unrelated change is to take the layer bounds origin into account
            in GraphicsLayerCA::computeVisibleRect(). Desktop WebKit never sets this, but it's used
            on other platforms for composited scrolling, so needs to be taken into account
            when computing visible rects.
    
            * platform/graphics/ca/GraphicsLayerCA.cpp:
            (WebCore::GraphicsLayerCA::recursiveVisibleRectChangeRequiresFlush):
            (WebCore::GraphicsLayerCA::computeVisibleRect):
            (WebCore::GraphicsLayerCA::adjustTiledLayerVisibleRect):
            (WebCore::GraphicsLayerCA::updateVisibleRect):
            * platform/graphics/ca/GraphicsLayerCA.h:
            (GraphicsLayerCA):

2013-04-16  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/13075260> Undo the rollouts made in <rdar://problem/11407518>

        Merge ToT WebKit r103851.

        Open Source r103851 was backed out for Sundance, so we need to
        re-merge it again.

    2011-12-30  Robert Hogan  <robert@webkit.org>

        REGRESSION (r94492): Text is shifted to the right in some buttons in the Mac App Store
        https://bugs.webkit.org/show_bug.cgi?id=74723

        Reviewed by Dan Bernstein.

        Tests: fast/css/absolute-inline-alignment-2.html
               fast/css/absolute-inline-alignment.html

        Inline positioned elements in the leading spaces of an inline run need to align to 
        adjacent text, so add them to the run as they're encountered.

        * rendering/RenderBlockLineLayout.cpp:
        (WebCore::LineInfo::LineInfo): Keep a count of positioned objects encountered when
         skipping leading whitespace.
        (WebCore::LineInfo::runsFromLeadingWhitespace):
        (WebCore::LineInfo::resetRunsFromLeadingWhitespace):
        (WebCore::LineInfo::incrementRunsFromLeadingWhitespace):
        (WebCore::RenderBlock::constructLine): Leading positioned objects should not be considered
         when deciding the number of runs in a line. Otherwise they would contribute towards line 
         height themselves and prevent a free-standing BR following the positioned object from providing a full 
         20px of height.
        (WebCore::RenderBlock::layoutRunsAndFloatsInRange): Since a run containing line-breaks will enter
         skipLeadingWhitespace for each new line we reset the count every time so that the count of positioned
         objects we encounter only affects the line they appear on. This case is covered by 
         fast/inline/styledEmptyInlinesWithBRs.html
        (WebCore::RenderBlock::LineBreaker::skipLeadingWhitespace): Add a run for each inline positioned object
         encountered in leading white space. Keep a count of them so that they can be excluded from
         the total number of runs in constructLine. 

2013-04-15  David Kilzer  <ddkilzer@apple.com>

        Remove duplicate code merged into WebCore::canMergeContiguousAnonymousBlocks()

        Rubber-stamped by Dan Bernstein.
        Reviewed by Joseph Pecoraro.

        * rendering/RenderBlock.cpp:
        (WebCore::canMergeContiguousAnonymousBlocks): Remove duplicate
        code.

2013-04-13  Enrica Casucci  <enrica@apple.com>

        Treating a PostScript name as a family name is unsustainable.
        <rdar://problem/13610508>
        
        Reviewed by Yongjun Zhang.

        Adopting the Core Text recommended way to fallback to search for
        a font by PostScript name.

        * platform/graphics/ios/FontCacheIOS.mm:
        (WebCore::createCTFontWithFamilyNameAndWeight): If the match for
        kCTFontFamilyNameAttribute returns no results, try searching by
        kCTFontNameAttribute.

2013-03-25  Ian Henderson  <ianh@apple.com>

        <rdar://problem/13491517> Background color peeks through while loading pages

        Reviewed by Enrica Casucci.

        Our tile cache uses -[WAKWindow visibleRect] to determine which tiles
        to create.  This method walks up the layer hierarchy, intersecting the
        bounds of each layer as it goes.  This assumes that each layer will
        mask out and render invisible sublayers outside of its bounds.

        Unfortunately, this assumption isn't true any more in MobileSafari.
        For compatibility, we now position our scroll view above the bottom
        buttons, but page content still shows underneath the buttons, outside
        the bounds of the scroll view.

        Skip over layers that don't mask to their bounds when computing the
        visible rect for tile creation.  UIWebView's scroll view, like all
        scroll views, masks to its bounds by default.  So this change only
        affects behavior for apps that disable masksToBounds on their
        UIWebView's scroll view or internal apps that use UIWebDocumentView
        with their own not-masking-to-bounds scroll view (like MobileSafari).

        * wak/WAKWindow.mm:
        (-[WAKWindow visibleRect]):

2013-04-13  Anders Carlsson  <andersca@apple.com>

        <rdar://problem/13394767> Password autofill doesn't work on sites with onsubmit handlers
        
        Merge r148368.

    2013-04-13  Anders Carlsson  <andersca@apple.com>

        Add form delegate method that's invoked right before sending a submit event to a form element
        https://bugs.webkit.org/show_bug.cgi?id=114575

        Reviewed by Dan Bernstein.

        * WebCore.exp.in:
        Export a symbol.

        * WebCore.xcodeproj/project.pbxproj:
        Make DOMHTMLFormElementInternal.h a private header.

2013-04-12  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/13644968> REGRESSION: Non-accelerated overflow scroll can't be scrolled with one finger

        Reviewed by Ian Henderson.

        After an Open Source merge, registerAsTouchEventListenerForScrolling() was never called on iOS
        for non-accelerated overflow:scroll, so single-finger scrolling was broken.
        
        Merged r148316 and cleaned up the code to register/unregister the touch listener.


    2013-04-12  Simon Fraser  <simon.fraser@apple.com>

        Demystify some code in RenderLayer::updateScrollableAreaSet()
        https://bugs.webkit.org/show_bug.cgi?id=114543

        Reviewed by Tim Horton.

        Clean up some code that called functions with important side effects
        inside a ternary operator, and clean up the #ifdefs.

        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::updateScrollableAreaSet):

2013-04-12  Enrica Casucci  <enrica@apple.com>

        Would like the ability to specify a usage of a font to -webkit-system-font.
        <rdar://problem/13588388>

        Reviewed by Joe Pecoraro and Sam Weinig.

        Adding support in WebKit for font usage. The usage is specified via the CSS font
        property as a primitive value and selects the appropriate font for the given
        usage and the current content size category.
        The font is updated when the user changes the text size from the Settings.
        
        Test: platform/iphone-simulator/iphone/fast/text/opticalFontWithUsage.html

        * WebCore.xcodeproj/project.pbxproj: Renamed RenderThemeIOS.cpp to RenderThemeIOS.mm
        * css/CSSValueKeywords.in: Added new primitive values for CSSFont.
        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::applyProperty): Removed PLATFORM(IOS) around
        the call to systemFont, that is now implemented in mm.
        * platform/graphics/FontCache.h: Added static function.
        * platform/graphics/ios/FontCacheIOS.mm:
        (WebCore::FontCache::weightOfCTFont): Made static member of FontCache to
        be referenced from RenderThemeIOS.
        (WebCore::createCTFontForUsage): Creates the new optical fonts.
        (WebCore::createCTFontWithFamilyNameAndWeight):
        (WebCore::FontCache::createFontPlatformData):
        * rendering/RenderTheme.h: Removed PLATFORM(IOS) around systemFont.
        * rendering/RenderThemeIOS.cpp: Removed.
        * rendering/RenderThemeIOS.h: Added systemFont and contentSizeCategoryName.
        * rendering/RenderThemeIOS.mm: Copied from WebCore/rendering/RenderThemeIOS.cpp.
        (WebCore::contentSizeCategoryNameDidChange): The observer.
        (WebCore::RenderThemeIOS::RenderThemeIOS): Added registration for notification
        of content size category change.
        (WebCore::RenderThemeIOS::contentSizeCategoryName):Retrieves the current
        content category name.
        (WebCore::fromCTFontWeight): Converts CoreText  weight to FontWeight.
        (WebCore::RenderThemeIOS::systemFont): Added.

2013-04-09  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/13425591> 11A305: REGRESSION: Instagram: Cannot tap names/pictures in Following tab unless page is scrolled to the top

        In iOS WebKit, we need to use actualScroll and actualVisibleContentRect for nodeFromPoint.  We
        lost this change in the merge when nodeFromPoint is moved from Document.cpp to TreeScope.cpp in
        open source WebKit r138379.

        Reviewed by David Kilzer.

        * dom/TreeScope.cpp:
        (WebCore::nodeFromPoint):

2013-04-09  Roger Fong  <roger_fong@apple.com>

        <rdar://problem/12342776> Validate code in GraphicsContext3D::validateAttributes() for iOS

        Merged ToT WebKit r148060.

    2013-04-06  Roger Fong  <roger_fong@apple.com>

        Change requisite hardware checks for enabling antialiasing.
        https://bugs.webkit.org/show_bug.cgi?id=114101
        <rdar://problem/12342776>.

        m_maySupportMultisampling should be true by default for all platforms/hardware now except older versions of AMD.

        Reviewed by Dean Jackson.

        * platform/graphics/opengl/Extensions3DOpenGLCommon.cpp:
        (WebCore::Extensions3DOpenGLCommon::Extensions3DOpenGLCommon):

2013-04-09  Michael Saboff  <msaboff@apple.com>

        <rdar://problem/10617416> Crashes in WebCore::FrameView::resetDeferredRepaintDelay

        Reviewed by Oliver Hunt.

        Speculative fix to check for a valid FrameView* before calling FrameView::resetDeferredRepaintDelay().
        All other calls to resetDeferredRepaintDelay() are protected by a null check.

        No tests added.

        * page/ios/EventHandlerIOSTouch.cpp:
        (WebCore::EventHandler::handleTouchEvent):

2013-04-05  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/12869133> Remove iOS filter code now that OpenSource uses CAFilter

        Merged ToT WebKit r145472, r145475.

    2013-03-11  Simon Fraser  <simon.fraser@apple.com>

        [CA] Animations of CSS filters don't work correctly
        https://bugs.webkit.org/show_bug.cgi?id=111905

        Reviewed by Dean Jackson.

        Fix various issues with transitions of composited filters on Mac,
        most of which stemmed from the conversion to use CAFilter.
        
        Put the Mac CA filter-related code into a new file, PlatformCAFilters,
        to group code that creates filter properties into a single place.
        
        Animations of CIFilters using multiple values never worked correctly,
        because we would clobber all but the last property for each filter,
        so fix that.
        
        Changes in the moved filter code:
            - Made use of sepiaFullConstants in the CIFilter and CAFilter code.
            - For CI, return CIVectors instead of NSArrays of NSNumbers.
            - Fudge the inputColor for the CI grayscale filter to better match software filters.
            - fix some cases where the behavior was wrong in the isDefault() case.

        * WebCore.xcodeproj/project.pbxproj: Add PlatformCAFilters.h, PlatformCAFiltersMac.mm.
        * platform/graphics/GraphicsLayer.cpp:
        (WebCore::GraphicsLayer::animationNameForTransition): This function was creating a string
        containing non-ASCII characters.
        * platform/graphics/ca/GraphicsLayerCA.cpp:
        (WebCore::animationIdentifier): To handle CIFilter animations, we need to tack another
        index onto the animation identifier, since some animations require animating multiple
        properties of the same CIFilter. Add "subIndex" for this.
        (WebCore::GraphicsLayerCA::moveOrCopyAnimations): Ditto.
        (WebCore::GraphicsLayerCA::updateAnimations): Ditto.
        (WebCore::GraphicsLayerCA::setAnimationOnLayer): Ditto.
        (WebCore::GraphicsLayerCA::removeCAAnimationFromLayer): Ditto.
        (WebCore::GraphicsLayerCA::pauseCAAnimationOnLayer): Ditto.
        (WebCore::GraphicsLayerCA::createAnimationFromKeyframes): Ditto.
        (WebCore::GraphicsLayerCA::appendToUncommittedAnimations): Ditto.
        * platform/graphics/ca/GraphicsLayerCA.h: Ditto.
        (WebCore::GraphicsLayerCA::LayerPropertyAnimation::LayerPropertyAnimation):
        (LayerPropertyAnimation):
        * platform/graphics/ca/PlatformCAAnimation.h:
        (PlatformCAAnimation): Functions moved.
        * platform/graphics/ca/PlatformCAFilters.h: Added.
        (PlatformCAFilters):
        * platform/graphics/ca/mac/PlatformCAAnimationMac.mm:
        (PlatformCAAnimation::setFromValue):
        (PlatformCAAnimation::setToValue):
        (PlatformCAAnimation::setValues):
        * platform/graphics/ca/mac/PlatformCAFiltersMac.mm: Added.
        (PlatformCAFilters::filterValueForOperation):
        (PlatformCAFilters::colorMatrixValueForFilter):
        (PlatformCAFilters::numAnimatedFilterProperties):
        (PlatformCAFilters::animatedFilterPropertyName):
        * platform/graphics/ca/mac/PlatformCALayerMac.mm:
        (PlatformCALayer::PlatformCALayer):
        (PlatformCALayer::addAnimationForKey):
        (PlatformCALayer::setFilters):
        (PlatformCALayer::filtersCanBeComposited):

2013-04-04  Jeffrey Pfau  <jpfau@apple.com>

        <rdar://problem/13581920> Merge WebKit r146087 to Puzzlebox

    2013-03-18  Dean Jackson  <dino@apple.com>

            Only add wordspacing when kerning to actual word ends
            https://bugs.webkit.org/show_bug.cgi?id=112507
            <rdar://problem/12945869>

            Reviewed by Enrica Casucci.

            When measuring text, we currently include any word spacing in
            the result (it's removed later). When kerning is active, we
            were adding the word spacing to every wordMeasurement instance
            whether or not it is a separate word. For example, a nested
            <span> element would get a wordMeasurement, even though it
            should not always get word spacing.

            Test: fast/text/word-space-with-kerning-3.html

            * rendering/RenderBlockLineLayout.cpp:
            (WebCore::setLogicalWidthForTextRun): Test if the current character
            referenced by the wordMeasurement is a space character, and add word
            spacing only then.

2013-04-03  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/13561686> Fixed elements disappear when zooming (again!)

        Reviewed by Joseph Pecoraro.

        Fix a merge error that caused fixed position elements to layout to the
        document width, rather than the custom fixed position rect width.

        * rendering/RenderBox.cpp:
        (WebCore::RenderBox::containingBlockLogicalWidthForPositioned):

2013-04-02  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/13521548> Fixed content can jump around when scrolling is interrupted

        Reviewed by Ian Henderson.
        
        RenderLayerCompositor would push fixed/sticky position layers to WebKit,
        for management by WebFixedPositionContent, incrementally when their geometry
        or platform layer changed, and for simplicity would remove them all before
        updating the compositing layer tree.
        
        However, this left windows of time when WebFixedPositionContent had no layers,
        or had layer information out of sync with the visible CALayers.
        
        Fix this by pushing all the viewport-constained layers to WebFixedPositionContent
        atomically after each commit. This means we no longer need the will/didSyncCompositingLayer
        hooks that were used to lock/unlock in WebFixedPositionContent, and separate add/remove/remove all
        functions. updateViewportConstrainedLayers() was made non-pure-virtual so that we don't need stubs
        in all the ChromeClient implementations.
        
        * loader/EmptyClients.h: Remove all functions which no longer need stub
        implementations.
        * page/ChromeClient.h: Indented all the PLATFORM(IOS) functions. Removed willSyncCompositingLayers(),
        removeViewportConstrainedLayer(), removeAllViewportConstrainedLayers(). Changed addOrUpdateViewportConstrainedLayer()
        to updateViewportConstrainedLayers().
        (WebCore::ChromeClient::didFlushCompositingLayers): Renamed from didSyncCompositingLayers.
        (WebCore::ChromeClient::updateViewportConstrainedLayers):
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::flushPendingLayerChanges): No need to call willSyncCompositingLayers()
        now. This used to be used to take the lock in WebFixedPositionContent, which is no longer required.
        Call updateCustomLayersAfterFlush() after flushing.
        (WebCore::RenderLayerCompositor::updateCustomLayersAfterFlush): Call registerAllViewportConstrainedLayers()
        to push layers to WebFixedPositionContent, and also tell WebKit about scrolling layers that changed.
        (WebCore::RenderLayerCompositor::didFlushChangesForLayer): Previously we would call scrollingLayerAddedOrUpdated()
        from inside the didFlushChangesForLayer() callback while the flush is happening; now add layers to m_scrollingLayersNeedingUpdate
        set, and then tell WebKit about the changes later in updateCustomLayersAfterFlush(). This is more similar to
        how m_viewportConstrainedLayersNeedingUpdate works.
        (WebCore::RenderLayerCompositor::updateCompositingLayers): Don't call removeAllViewportConstrainedLayers() now.        
        (WebCore::RenderLayerCompositor::registerOrUpdateViewportConstrainedLayer): Make this a no-op on iOS, because
        we do a batch update after flush there.
        (WebCore::RenderLayerCompositor::unregisterViewportConstrainedLayer): Ditto.
        (WebCore::RenderLayerCompositor::registerAllViewportConstrainedLayers): Create a HashMap of CALayer* to
        ViewportConstraints, and push this whole map through the ChromeClient to WebKit. Note that we only register
        fixed/sticky layers for the main frame. Layers in subframes don't get fixed/sticky behavior.
        (WebCore::RenderLayerCompositor::unregisterAllViewportConstrainedLayers): Push an empty map to WebKit
        to clear the layers.
        (WebCore::RenderLayerCompositor::scrollingLayerAddedOrUpdated): If we remove a layer from m_scrollingLayers,
        make sure we remove it from m_scrollingLayersNeedingUpdate too.
        * rendering/RenderLayerCompositor.h:
        (RenderLayerCompositor):

2013-04-02  Enrica Casucci  <enrica@apple.com>

        REGRESSION(Innsbruck): .la website doesn't render emoji or font correctly.
        <rdar://problem/13535971>
        
        Reviewed by Benjamin Poulain.

        The switch to CoreText to perform font lookup caused 'apple color emoji'
        family name not to be recognized anymore. Internal fonts need to be
        looked-up by PostScript name and that requires using a different CT API.
        This patch changes all reference to 'apple color emoji' to be 'AppleColorEmoji'
        and uses CTFontDescriptorCreateWithNameAndSize to find the font.

        * platform/graphics/ios/FontCacheIOS.mm:
        (WebCore::copyFontCharacterSet):
        (WebCore::appleColorEmojiCharacterSet):
        (WebCore::FontCache::getFontDataForCharacters):
        (WebCore::FontCache::createFontPlatformData):

2013-03-25  Joseph Pecoraro  <pecoraro@apple.com>

        Start/stop AirPlay monitoring based on AirPlay Availability Change Event Listeners

        <rdar://problem/8939634> Sub-TLF: Add JS APIs to trigger AirPlay from web pages, for HTML5 <video>

        Reviewed by Eric Carlson.

        * html/HTMLMediaElement.h:
        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::~HTMLMediaElement):
        Notify player all listeners were removed.

        (WebCore::HTMLMediaElement::addEventListener):
        (WebCore::HTMLMediaElement::removeEventListener):
        Notify player when there are listeners or not. This will cause the
        player to enable or disable AirPlay monitoring.

        (WebCore::HTMLMediaElement::enqueuePlaybackTargetAvailabilityChangedEvent):
        Helper for triggering an AirPlay availability event.

        * platform/graphics/MediaPlayer.cpp:
        (WebCore::MediaPlayer::setHasPlaybackTargetAvailabilityListeners):
        * platform/graphics/MediaPlayer.h:
        * platform/graphics/MediaPlayerPrivate.h:
        (WebCore::MediaPlayerPrivateInterface::setHasPlaybackTargetAvailabilityListeners):
        * platform/graphics/ios/MediaPlayerPrivateIOS.h:
        * platform/graphics/ios/MediaPlayerPrivateIOS.mm:
        (WebCore::MediaPlayerPrivateIOS::setHasPlaybackTargetAvailabilityListeners):
        * platform/graphics/mac/MediaPlayerProxy.h:
        Media player boilerplate.

2013-03-21  Joseph Pecoraro  <pecoraro@apple.com>

        Add WebKitPlaybackTargetAvailabilityEvent Event with "availability" property.

        <rdar://problem/8939634> Sub-TLF: Add JS APIs to trigger AirPlay from web pages, for HTML5 <video>

        Reviewed by Eric Carlson.

        * DerivedSources.make:
        * WebCore.xcodeproj/project.pbxproj:
        Add IDL files to the build. Add files to the Xcode build.

        * Modules/airplay/DOMWindowAirPlay.idl: Added.
        Extend DOMWindow exposing the new Event constructor.

        * Modules/airplay/WebKitPlaybackTargetAvailabilityEvent.cpp: Added.
        (WebCore::availableString):
        (WebCore::notAvailableString):
        (WebCore::stringForPlaybackTargetAvailability):
        (WebCore::WebKitPlaybackTargetAvailabilityEvent::WebKitPlaybackTargetAvailabilityEvent):
        * Modules/airplay/WebKitPlaybackTargetAvailabilityEvent.h: Added.
        (WebCore::WebKitPlaybackTargetAvailabilityEventInit::WebKitPlaybackTargetAvailabilityEventInit):
        (WebKitPlaybackTargetAvailabilityEventInit):
        (WebKitPlaybackTargetAvailabilityEvent):
        (WebCore::WebKitPlaybackTargetAvailabilityEvent::~WebKitPlaybackTargetAvailabilityEvent):
        (WebCore::WebKitPlaybackTargetAvailabilityEvent::create):
        (WebCore::WebKitPlaybackTargetAvailabilityEvent::availability):
        * Modules/airplay/WebKitPlaybackTargetAvailabilityEvent.idl: Added.
        WebKitPlaybackTargetAvailabilityEvent containing an "availability" property. 

        * dom/EventNames.in:
        Generate an event constructor.

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::mediaPlayerPlaybackTargetAvailabilityChanged):
        Dispatch a WebKitPlaybackTargetAvailabilityEvent when availability changes.

        * platform/graphics/MediaPlayer.cpp:
        (WebCore::MediaPlayer::hasWirelessPlaybackTargets):
        * platform/graphics/MediaPlayer.h:
        * platform/graphics/MediaPlayerPrivate.h:
        (WebCore::MediaPlayerPrivateInterface::hasWirelessPlaybackTargets):
        (MediaPlayerPrivateInterface):
        * platform/graphics/ios/MediaPlayerPrivateIOS.h:
        * platform/graphics/ios/MediaPlayerPrivateIOS.mm:
        (WebCore::MediaPlayerPrivateIOS::hasWirelessPlaybackTargets):
        * platform/graphics/mac/MediaPlayerProxy.h:
        Media player boilerplate.

2013-03-20  Joseph Pecoraro  <pecoraro@apple.com>

        Add UserGesture BehaviorRestriction for showing the AirPlay picker

        <rdar://problem/8939634> Sub-TLF: Add JS APIs to trigger AirPlay from web pages, for HTML5 <video>

        Add a UserGestureRequired BehaviorRestriction for using the
        webkitShowPlaybackTargetPicker API. Instead of always requiring a user
        gesture, the restriction can be removed in some cases. This matches
        other user gesture restricted actions, like entering fullscreen.

        Reviewed by Eric Carlson.

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::HTMLMediaElement):
        In the iOS path, add the user gesture restriction if the settings wants
        user gesture restrictions.

        (WebCore::HTMLMediaElement::webkitShowPlaybackTargetPicker):
        Respect the user gesture restriction when needed.

        * html/HTMLMediaElement.h:
        (WebCore::HTMLMediaElement::userGestureRequiredToShowPlaybackTargetPicker):
        Add a user gesture restriction for showing the picker.

2013-03-20  Joseph Pecoraro  <pecoraro@apple.com>

        Add Video Element APIs - html attribute and JS api to disable wireless playback

        <rdar://problem/8939634> Sub-TLF: Add JS APIs to trigger AirPlay from web pages, for HTML5 <video>

        Add support for the "x-webkit-wirelessvideoplaybackdisabled" attribute
        and videoElement.webkitWirelessVideoPlaybackDisabled accessor. This
        allows enabling and disabling airplay video over wireless.

        On iOS we respect the legacy "x-webkit-airplay" attribute. So we also
        disable this if the element has x-webkit-airplay="deny".

        Reviewed by NOBODY (OOPS!).

        * html/HTMLAttributeNames.in:
        Add the "x-webkit-wirelessvideoplaybackdisabled" attribute name.

        * html/HTMLVideoElement.h:
        * html/HTMLVideoElement.idl:
        * html/HTMLVideoElement.cpp:
        (WebCore::HTMLVideoElement::parseAttribute):
        (HTMLVideoElement::webkitWirelessVideoPlaybackDisabled):
        (HTMLVideoElement::setWebkitWirelessVideoPlaybackDisabled):
        If either the new attribute or the legacy attribute toggles, update
        the media player with the new disable setting.

        * platform/graphics/MediaPlayer.cpp:
        (WebCore::MediaPlayer::wirelessVideoPlaybackDisabled):
        (WebCore::MediaPlayer::setWirelessVideoPlaybackDisabled):
        * platform/graphics/MediaPlayer.h:
        * platform/graphics/MediaPlayerPrivate.h:
        (MediaPlayerPrivateInterface):
        (WebCore::MediaPlayerPrivateInterface::wirelessVideoPlaybackDisabled):
        (WebCore::MediaPlayerPrivateInterface::setWirelessVideoPlaybackDisabled):
        * platform/graphics/ios/MediaPlayerPrivateIOS.h:
        * platform/graphics/ios/MediaPlayerPrivateIOS.mm:
        (WebCore::wirelessVideoPlaybackDisabled):
        (WebCore::setWirelessVideoPlaybackDisabled):
        * platform/graphics/mac/MediaPlayerProxy.h:
        Boilerplate to interact with the platform media player.

2013-03-29  Joseph Pecoraro  <pecoraro@apple.com>

        Add Media Element APIs - show route picker, is wireless property, and basic event support

        <rdar://problem/8939634> Sub-TLF: Add JS APIs to trigger AirPlay from web pages, for HTML5 <video>

        Handle the majority of the JavaScript (Playback Target) AirPlay API.
        API to show the AirPlay route picker, check if the current AirPlay is
        wireless, and events for availability and current is wireless changes.

        Reviewed by Eric Carlson.

        * dom/EventNames.h:
        * html/HTMLAttributeNames.in:
        "webkitplaybacktargetavailabilitychanged" and "webkitcurrentplaybacktargetiswirelesschanged"
        event names and companion on<foo> event listener attribute names.

        * html/HTMLMediaElement.h:
        * html/HTMLMediaElement.idl:
        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::parseAttribute):
        Handle the on<foo> event listener attributes.

        (WebCore::HTMLMediaElement::webkitShowPlaybackTargetPicker):
        (WebCore::HTMLMediaElement::webkitCurrentPlaybackTargetIsWireless):
        Handle IDL interface. Show the picker and check if the current target
        is wireless. Both go to the MediaPlayer.

        (WebCore::HTMLMediaElement::mediaPlayerCurrentPlaybackTargetIsWirelessChanged):
        (WebCore::HTMLMediaElement::mediaPlayerPlaybackTargetAvailabilityChanged):
        Fire generic events when the media player tells us it changed.

        * platform/graphics/MediaPlayer.h:
        (WebCore::MediaPlayer::mediaPlayerCurrentPlaybackTargetIsWirelessChanged):
        (WebCore::MediaPlayer::mediaPlayerPlaybackTargetAvailabilityChanged):
        * platform/graphics/MediaPlayer.cpp:
        (WebCore::MediaPlayer::isCurrentPlaybackTargetWireless):
        (WebCore::MediaPlayer::showPlaybackTargetPicker):
        (WebCore::MediaPlayer::currentPlaybackTargetIsWirelessChanged):
        (WebCore::MediaPlayer::playbackTargetAvailabilityChanged):
        Base media player implementation dispatches to private media player.

        * platform/graphics/MediaPlayerPrivate.h:
        (WebCore::MediaPlayerPrivateInterface::isCurrentPlaybackTargetWireless):
        (WebCore::MediaPlayerPrivateInterface::showPlaybackTargetPicker):
        Default private media player implementation does nothing.

        * platform/graphics/ios/MediaPlayerPrivateIOS.h:
        * platform/graphics/ios/MediaPlayerPrivateIOS.mm:
        (WebCore::MediaPlayerPrivateIOS::isCurrentPlaybackTargetWireless):
        (WebCore::MediaPlayerPrivateIOS::showPlaybackTargetPicker):
        (WebCore::MediaPlayerPrivateIOS::deliverNotification):
        Send and receive messages with the platform media player.

        * platform/graphics/mac/MediaPlayerProxy.h:
        Define the interface used between WebKit and the platform media player.

2013-03-19  Joseph Pecoraro  <pecoraro@apple.com>

        <rdar://problem/8939634> Sub-TLF: Add JS APIs to trigger AirPlay from web pages, for HTML5 <video>

        Reviewed by David Kilzer.

        * Configurations/FeatureDefines.xcconfig:

2013-04-01  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/13550962> Remove platformLayerChanged() from GraphicsLayerClient and implementations

        Reviewed by Ian Henderson.

        GraphicsLayerClient::platformLayerChanged() was added to handle the case
        where a GraphicsLayer's underlaying CA layer changes because of a switch to/from
        tiled layers.
        
        The same problem was solved more generally in Open Source via the didCommitChangesForLayer()
        callback, so iOS can use that instead.
        
        * platform/graphics/GraphicsLayerClient.h:
        (GraphicsLayerClient): Remove platformLayerChanged().
        * platform/graphics/ca/GraphicsLayerCA.cpp:
        (WebCore::GraphicsLayerCA::ensureStructuralLayer): Remove call to platformLayerChanged().
        (WebCore::GraphicsLayerCA::swapFromOrToTiledLayer): Ditto.
        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::updateGraphicsLayerGeometry):
        (WebCore::RenderLayerBacking::registerScrollingLayers): Move the call to updateViewportConstraintStatus()
        into this function, to be more similar to Open Source (which calls it a few lines down).
        * rendering/RenderLayerBacking.h:
        (RenderLayerBacking): Remove platformLayerChanged().
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::didFlushChangesForLayer): Remove platformLayerChanged(),
        but we still need to call the iOS-specific code for scrolling layers.
        * rendering/RenderLayerCompositor.h:
        (RenderLayerCompositor): Remove the two(!) declarations of platformLayerChanged().

2013-03-29  Enrica Casucci  <enrica@apple.com>

        Change optical font property value to -webkit-system-font.
        Followup to <rdar://problem/13348656>

        Reviewed by Benjamin Poulain.
        
        Test: platform/iphone-simulator/iphone/fast/text/opticalFont.html

        * platform/graphics/ios/FontCacheIOS.mm:
        (WebCore::createCTFontWithFamilyNameAndWeight):

2013-04-01  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/11701792> WebAudio should move to using AVAudioSession

        Reviewed by Jer Noble.

        Turn off deprecated declarations warning until WebCore moves away
        from AudioSession.

        * page/Page.cpp:
        (WebCore::Page::setAudioSessionCategory):
        * platform/audio/ios/AudioDestinationIOS.cpp:
        (WebCore::AudioDestinationIOS::render): Align brace.

2013-03-29  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/13526138> REGRESSION: N94/11A318: MobileSafari jetsam'ed when loading www.shopzilla.com.

        Merged ToT WebKit r147265.

    2013-03-29  Yongjun Zhang  <yongjun_zhang@apple.com>

            When releasing a CGImage, we should also remove it from the subimage cache.
            https://bugs.webkit.org/show_bug.cgi?id=102453

            Reviewed by Simon Fraser.

            When we release an image(CGImageRef) from BitmapImage's cachedFrames, if the image was already
            cached in subimage cache, it's ref count won't drop to 0 and the image won't be deleted.  Usually,
            the subimage cache will clear the whole cache in a timer with 1 sec delay.  However, if WebCore has
            to paint another subimage (not necessarily from the same CGImageRef) before this timer fires, we
            will restart the timer and images inside the cache will stay longer than they should.

            This patch does two things:
                - move SubimageCacheWithTimer and related helper struct into a separate file.
                - remove the image from subimage cache when we releasing the CGImageRef, this prevent subimage
            cache holding the image after we released it.

            No new tests, manually verified the CGImageRef is also removed from subimage cache
            when we releasing the image from FrameData::clear.

            * WebCore.vcproj/WebCore.vcproj:
            * WebCore.xcodeproj/project.pbxproj:
            * platform/graphics/cg/BitmapImageCG.cpp:
            (WebCore::FrameData::clear): remove the image from subimage cache before we releasing it.
            * platform/graphics/cg/GraphicsContextCG.cpp:
            (WebCore):
            (WebCore::GraphicsContext::drawNativeImage):
            * platform/graphics/cg/SubimageCacheWithTimer.cpp: Added.
            (WebCore):
            (SubimageRequest):
            (WebCore::SubimageRequest::SubimageRequest):
            (WebCore::SubimageCacheAdder::hash):
            (SubimageCacheAdder):
            (WebCore::SubimageCacheAdder::equal):
            (WebCore::SubimageCacheAdder::translate):
            (WebCore::SubimageCacheWithTimer::SubimageCacheWithTimer):
            (WebCore::SubimageCacheWithTimer::invalidateCacheTimerFired):
            (WebCore::SubimageCacheWithTimer::getSubimage):
            (WebCore::SubimageCacheWithTimer::clearImage):
            (WebCore::subimageCache):
            * platform/graphics/cg/SubimageCacheWithTimer.h: Added.
            (WebCore):
            (SubimageCacheWithTimer): Added a data member m_images to record which image and its subimages are cached.
            (SubimageCacheEntry):
            (SubimageCacheEntryTraits):
            (WebCore::SubimageCacheWithTimer::SubimageCacheEntryTraits::isEmptyValue):
            (WebCore::SubimageCacheWithTimer::SubimageCacheEntryTraits::constructDeletedValue):
            (WebCore::SubimageCacheWithTimer::SubimageCacheEntryTraits::isDeletedValue):
            (WebCore::SubimageCacheWithTimer::SubimageCacheHash::hash):
            (WebCore::SubimageCacheWithTimer::SubimageCacheHash::equal):
            (SubimageCacheHash):

2013-03-29  Mark Hahnenberg  <mhahnenberg@apple.com>

        <rdar://problem/13351449> Objective-C API: Move JSC framework to public frameworks directory on Innsbruck

        Reviewed by NOBODY (OOPS!).

        No new tests.

        Change JavaScriptCore to be installed into the public Frameworks directory. Also add a symlink between the 
        new and old location in case other projects link against JSC's absolute path.

        * Configurations/WebCore.xcconfig:

2013-03-29  Enrica Casucci  <enrica@apple.com>

        Enable support for Optical Size feature for UI Fonts.
        <rdar://problem/13348656>
        
        When font-family is '-webkit-system-uifont', we use the
        new CoreText SPI to create optical font.

        Reviewed by Sam Weinig.

        * platform/graphics/ios/FontCacheIOS.mm:
        (WebCore::createCTFontWithFamilyNameAndWeight):

2013-03-29  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/13034172> MobileSafari crashed in WebCore::RenderLayerCompositor::computeFixedViewportConstraints after tapping on the "Done" button in a full screen video

        Reviewed by Adele Peterson, Beth Dakin.

        The previous commit actually fixed the crash, but remove bogus assertion,
        and bail if the layer is not composited, as we do for non-iOS, while
        making the code more similar to non-iOS.
        
        The assertion can fire because m_renderView->hasCustomFixedPosition(layer->renderer()
        can be false for a positon:fixed layer in an iframe that is composited for other reasons
        (e.g. an opacity transition).

        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::registerOrUpdateViewportConstrainedLayer):

2013-03-29  Simon Fraser  <simon.fraser@apple.com>

        Prerequisite for <rdar://problem/13034172> MobileSafari crashed in WebCore::RenderLayerCompositor::computeFixedViewportConstraints
        after tapping on the "Done" button in a full screen video

        Merged ToT WebKit r147238.

    2013-03-29  Simon Fraser  <simon.fraser@apple.com>

        removeViewportConstrainedLayer() should remove the layer from m_viewportConstrainedLayersNeedingUpdate too
        https://bugs.webkit.org/show_bug.cgi?id=113596

        Reviewed by Tim Horton.
        
        It's possible, with some combination of position:fixed and opacity transitions
        in iframes, to end up with a RenderLayer in m_viewportConstrainedLayersNeedingUpdate
        that has been removed from m_viewportConstrainedLayers, which leads to later assertions
        and/or crashes.
        
        Fix by removing a layer from m_viewportConstrainedLayersNeedingUpdate when we
        remove it from m_viewportConstrainedLayers.

        I was not able to come up with a testcase that reliably reproduces this.

        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::removeViewportConstrainedLayer):

2013-03-28  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/13384330> TiledBacking layers don't update on scrolling

        Reviewed by Antti Koivisto.
        
        Frame::viewportOffsetChanged(IncrementalScrollOffset) will get called on every scroll increment
        from UIKit. If we have any frames with tiled layers, tell their compositors that the visible
        rect changed. RenderLayerCompositor::didChangeVisibleRect() will then determine whether
        the visible rect change would cause any tiles to be created or destroyed, and if so,
        it will schedule a flush.
        
        This allows us to avoid forcing extra layouts during scrolling, unless we need one
        to paint new tiles.

        * WebCore.exp.in:
        * page/Frame.h:
        * page/ios/FrameIOS.mm:
        (WebCore::anyFrameHasTiledLayers):
        (WebCore::Frame::viewportOffsetChanged):
        (WebCore::Frame::containsTiledBackingLayers):
        * rendering/RenderLayerCompositor.h:

2013-03-28  Simon Fraser  <simon.fraser@apple.com>

        Prerequisite for <rdar://problem/13384330> TiledBacking layers don't update on scrolling

        Merged ToT WebKit r147186.

    2013-03-28  Simon Fraser  <simon.fraser@apple.com>

        GraphicsLayerCA::recomputeVisibleRects() shouldn't actually set the visible rect
        https://bugs.webkit.org/show_bug.cgi?id=113544

        Reviewed by Tim Horton.
        
        The functions added in r147058 to update the visible rects of GraphicsLayerCAs
        should not have actually set the m_visibleRect on the layer, because this
        caused a later call to adjustTiledLayerVisibleRect() to think that the visible
        rect had not changed, so it did no expansion.
        
        Clarify the logic to ask the GraphicsLayer whether, given a new visible
        rect, it would need to make new tiles (which happens later during a flush).
        
        Add a function to RenderLayerCompositor to call this code (but which has
        no callers yet).

        * platform/graphics/GraphicsLayer.h:
        (WebCore::GraphicsLayer::visibleRectChangeRequiresFlush): Make private.
        * platform/graphics/ca/GraphicsLayerCA.cpp:
        (WebCore::GraphicsLayerCA::recursiveVisibleRectChangeRequiresFlush):
        (WebCore::GraphicsLayerCA::visibleRectChangeRequiresFlush):
        * platform/graphics/ca/GraphicsLayerCA.h:
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::noteVisibleRectChanged):
        * rendering/RenderLayerCompositor.h:
        (RenderLayerCompositor):

2013-03-28  Enrica Casucci  <enrica@apple.com>

        WebKit text views should use new kTextFieldCursorWidth constant to set the cursor width.
        <rdar://problem/13213094> 
        
        Change the caretWidth from 3 to 2 pixels. Unfortunately we cannot share
        the constant defined in UIKit.

        Reviewed by Justin Garcia.

        * rendering/RenderObject.h:

2013-03-27  Enrica Casucci  <enrica@apple.com>

        Implement CSS weighted fonts in iOS WebKit (needed for light fonts in Modern UI).
        <rdar://problem/6308978>
        
        Reviewed by Benjamin Poulain.

        This patch adds the support for weighted fonts on iOS. In order to do so,
        we use CoreText to find the font by family name and we find the best match for
        the given traits and weight.

        * platform/graphics/ios/FontCacheIOS.mm:
        (WebCore::FontCache::getTraitsInFamily): Added FIXME to track
        the need for Core Text adoption for font enumeration.
        (WebCore::weightOfCTFont): Returns the font weight from a CTFontRef.
        (WebCore::createCTFontWithFamilyNameAndWeight): Creates a CTFont given
        the family, traits, size and weight. If the font family is not found,
        it tries to match the PostScript name of the font.
        (WebCore::toCTFontWeight): Converts FontWeight to Core Text weights.
        (WebCore::FontCache::createFontPlatformData): Now uses createCTFontWithFamilyNameAndWeight.

2013-03-28  David Kilzer  <ddkilzer@apple.com>

        Move RenderLayerCompositor::hasNonMainLayersWithTiledBacking() to match open source

        Because the method was not merged to the same place as open
        source, it merged successfully on the mergebot, but then caused
        a build failure due to duplicate method definitions.

        * rendering/RenderLayerCompositor.h:
        (RenderLayerCompositor::hasNonMainLayersWithTiledBacking):

2013-03-27  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/12520345> REGRESSION (6.1.x->Innsbruck): background-size is reset to auto when background short-hand is used without it (affects Netflix.app thumbnails, Google.app tabs, Spotify.app spinner)

        Merged ToT WebKit r147034.

    2013-03-27  KyungTae Kim <ktf.kim@samsung.com> and Yongjun Zhang  <yongjun_zhang@apple.com>

            Add a settings to disallow initializing background-size if background shorthand doesn't include it.
            https://bugs.webkit.org/show_bug.cgi?id=113363

            Reviewed by David Kilzer.

            This is based on KyungTae Kim's patch in https://bugs.webkit.org/show_bug.cgi?id=97761.  Many legacy sites set
            background-size first and then set background for setting background-image.  For backward-compatibility
            in some WebKit based clients, if 'background' shorthand have no 'background-size' attribute, we could add
            a settings to let the css parser not initialize 'background-size'.

            Test: fast/backgrounds/background-shorthand-after-set-backgroundSize.html

            * css/CSSParser.cpp:
            (WebCore::CSSParserContext::CSSParserContext): initialize useLegacyBackgroundSizeShorthandBehavior.
            (WebCore::operator==):
            (WebCore::CSSParser::useLegacyBackgroundSizeShorthandBehavior): add a method to return if we want background-size
                to be initialized by background shorthand.
            (WebCore):
            (WebCore::CSSParser::parseFillShorthand): don't initialize background-size in background shorthand if we have
                useLegacyBackgroundSizeShorthandBehavior set to true.
            * css/CSSParser.h:
            (CSSParser):
            * css/CSSParserMode.h: add member useLegacyBackgroundSizeShorthandBehavior to CSSParserContext.
            (CSSParserContext):
            * page/Settings.in: initialize useLegacyBackgroundSizeShorthandBehavior to false.
            * testing/InternalSettings.cpp:
            (WebCore::InternalSettings::Backup::Backup): add the new settings useLegacyBackgroundSizeShorthandBehavior to Backup.
            (WebCore::InternalSettings::Backup::restoreTo): restore useLegacyBackgroundSizeShorthandBehavior from Backup.
            (WebCore::InternalSettings::setUseLegacyBackgroundSizeShorthandBehavior):
            (WebCore):
            * testing/InternalSettings.h:
            (Backup):
            (InternalSettings):
            * testing/InternalSettings.idl: add a JS testing API setUseLegacyBackgroundSizeShorthandBehavior to turn on/off
                the new settings.

2013-03-27  Simon Fraser  <simon.fraser@apple.com>

        Prerequisite for <rdar://problem/13384330> TiledBacking layers don't update on scrolling

        Merged ToT WebKit r147058.

    2013-03-27  Simon Fraser  <simon.fraser@apple.com>

        Add a way to update GraphicsLayerCA visibleRects without having to do a flush
        https://bugs.webkit.org/show_bug.cgi?id=113459

        Reviewed by Tim Horton.
        
        Some platforms need to update TiledBacking visible rects from
        outside of WebKit, for example if they use delegated scrolling.
        They want to avoid forcing layout to be up-to-date when doing this.
        
        Currently, updating the visibleRect happens when the GraphicsLayerCA
        layer are being flushed, but that makes some assumptions about
        layout being up-to-date.
        
        To fix this, add a light-weight pass over the layer tree that
        uses TransformState to compute the visibleRect for each
        layer, and only if the visibleRect would cause a change in the
        tiles in a TiledBacking trigger a layer flush.

        * platform/graphics/GraphicsLayer.h:
        (WebCore::GraphicsLayer::recomputeVisibleRects):
        * platform/graphics/TiledBacking.h:
        * platform/graphics/ca/GraphicsLayerCA.cpp:
        (WebCore::GraphicsLayerCA::recursiveComputeVisibleRect):
        (WebCore::GraphicsLayerCA::recomputeVisibleRects):
        (WebCore::GraphicsLayerCA::computeVisibleRect):
        * platform/graphics/ca/GraphicsLayerCA.h:
        * platform/graphics/ca/mac/TileController.h:
        * platform/graphics/ca/mac/TileController.mm:
        (WebCore::TileController::tilesWouldChangeForVisibleRect):
        (WebCore::TileController::computeTileCoverageRect):
        (WebCore::TileController::revalidateTiles):

2013-03-27  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/13523510> Improve compositing layer logging for tiled layers

        Merged ToT WebKit r146438.

    2013-03-20  Simon Fraser  <simon.fraser@apple.com>

        Make GraphicsLayerCA::backingStoreMemoryEstimate() give a better estimate for tiled layers
        https://bugs.webkit.org/show_bug.cgi?id=112864

        Reviewed by Tim Horton.
        
        If a GraphicsLayerCA has TiledBacking, ask the TiledBacking how
        much memory it's using for tiles, rather than just using 
        height * width * 4.
        
        Implement retainedTileBackingStoreMemory() in the TileController,
        summing the memory used by parented tiles.

        The original code was incorrectly multiplying by contentsScale
        only once rather than twice (2x contents scale uses 4x as much memory).

        * platform/graphics/TiledBacking.h:
        * platform/graphics/ca/GraphicsLayerCA.cpp:
        (WebCore::GraphicsLayerCA::backingStoreMemoryEstimate):
        * platform/graphics/ca/mac/TileController.h:
        * platform/graphics/ca/mac/TileController.mm:
        (WebCore::TileController::retainedTileBackingStoreMemory):

2013-03-19  Simon Fraser  <simon.fraser@apple.com>

        Prerequisite for <rdar://problem/13384330> TiledBacking layers don't update on scrolling
        
        Merged ToT WebKit r146285.

    2013-03-19  Simon Fraser  <simon.fraser@apple.com>

        Make RLC::haveNonMainLayersWithTiledBacking() public and fix the name
        https://bugs.webkit.org/show_bug.cgi?id=112763

        Reviewed by Tim Horton.

        Downstream code needs to call hasNonMainLayersWithTiledBacking().

        * rendering/RenderLayerCompositor.h:
        (WebCore::RenderLayerCompositor::hasNonMainLayersWithTiledBacking):
        (RenderLayerCompositor):

2013-03-25  Jeffrey Pfau  <jpfau@apple.com>

        <rdar://problem/13499867> Null check missing in r1197804

        Patch by David Kilzer.
        Reviewed by Jeffrey Pfau.

        * loader/cache/MemoryCache.cpp:
        (WebCore::MemoryCache::removeImageFromCache):

2013-03-22  Andy Estes  <aestes@apple.com>

        <rdar://problem/13469374> Enable cache partitioning on iOS WebKit
        
        Re-enable the feature after I rolled it out in r1197821.
        
        Also commit several build fixes after enabling the feature.

        * Configurations/FeatureDefines.xcconfig:
        * loader/cache/MemoryCache.cpp:
        (WebCore::MemoryCache::removeImageFromCache):
        * platform/ios/WebCoreSystemInterfaceIOS.mm:

2013-03-22  Andy Estes  <aestes@apple.com>

        <rdar://problem/13469374> Enable cache partitioning on iOS WebKit

        Patch by Jeffrey Pfau.
        Rubber-stamped by David Kilzer.

        * Configurations/FeatureDefines.xcconfig:

2013-03-22  Andy Estes  <aestes@apple.com>

        <rdar://problem/13469374> Enable cache partitioning on iOS WebKit

        Merged ToT r146701.

    2013-03-22  Andy Estes  <aestes@apple.com>

        Set the cache partition property on CFURLRequests
        https://bugs.webkit.org/show_bug.cgi?id=113116

        Patch by Jeffrey Pfau
        Reviewed by David Kilzer.

        * platform/network/cf/ResourceRequestCFNet.cpp:
        (WebCore::ResourceRequest::doUpdatePlatformRequest):
        (WebCore::ResourceRequest::doUpdateResourceRequest):

2013-03-22  Justin Garcia  <justin.garcia@apple.com>

        Remove the border around marked text and support for it.  Tested editing in Mail and Safari in the sim.
        <rdar://problem/13276792> Sub-TLF: updated inline hole

        Reviewed by Enrica Casucci.

        * css/CSSComputedStyleDeclaration.cpp:
        (WebCore):
        (WebCore::CSSComputedStyleDeclaration::getPropertyCSSValue):
        * css/CSSParser.cpp:
        (WebCore::CSSParser::parseValue):
        * css/CSSProperty.cpp:
        (WebCore::CSSProperty::isInheritedProperty):
        * css/CSSPropertyNames.in:
        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::applyProperty):
        * editing/EditingStyle.cpp:
        (WebCore):
        * platform/graphics/Color.h:
        (Color):
        * rendering/InlineTextBox.cpp:
        (WebCore::InlineTextBox::paintCompositionBackground):
        * rendering/style/RenderStyle.h:
        * rendering/style/StyleRareInheritedData.cpp:
        (SameSizeAsStyleRareInheritedData):
        (WebCore::StyleRareInheritedData::StyleRareInheritedData):
        (WebCore::StyleRareInheritedData::operator==):
        * rendering/style/StyleRareInheritedData.h:
        (StyleRareInheritedData):

2013-03-19  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/13456555> ASSERT(isMainThread()) in TileController::~TileController()

        Reviewed by Antti Koivisto.

        Need to adjust an ASSERT(isMainThread()) in TileController::~TileController()
        for iOS.

        * platform/graphics/ca/mac/TileController.mm:
        (WebCore::TileController::~TileController):

2013-03-19  Simon Fraser  <simon.fraser@apple.com>

        Prerequisite for <rdar://problem/13384330> TiledBacking layers don't update on scrolling
        
        Merged ToT WebKit r145563.

    2013-03-12  Simon Fraser  <simon.fraser@apple.com>

        Keep track of the number of GraphicsLayers with tiled backing in RenderLayerCompositor
        https://bugs.webkit.org/show_bug.cgi?id=112083

        Reviewed by Dean Jackson.

        Have RenderLayerCompositor keep track of how many of its GraphicsLayers use TiledBacking.
        This is useful for platforms to decide whether it's necessary to force GraphicsLayer flushes
        to update the visibleRect of those TiledBackings.
        
        GraphicsLayers are always created without TiledBacking. There are two
        ways the count can change:
        1. A GraphicsLayerCA toggles into or out of tiled mode. It notifies its
           client via a new tiledBackingUsageChanged() callback on GraphicsLayerClient.
        2. A tiled GraphicsLayerCA is destroyed. Added a new bottleneck function to
           RenderLayerBacking::willDestroyLayer() that is called everywhere we destroy layers.
           
        The main page TiledBacking is not counted as part of this.
        
        Also renamed uses of "tiledLayer" to "tiledBacking" in GraphicsLayer[CA].
    
        * platform/graphics/GraphicsLayer.cpp:
        (WebCore::GraphicsLayer::GraphicsLayer):
        (WebCore::GraphicsLayer::getDebugBorderInfo):
        (WebCore::GraphicsLayer::dumpProperties):
        * platform/graphics/GraphicsLayer.h:
        (WebCore::GraphicsLayer::usingTiledBacking):
        * platform/graphics/GraphicsLayerClient.h:
        (WebCore::GraphicsLayerClient::tiledBackingUsageChanged):
        * platform/graphics/ca/GraphicsLayerCA.cpp:
        (WebCore::GraphicsLayerCA::recursiveCommitChanges):
        (WebCore::GraphicsLayerCA::updateGeometry):
        (WebCore::GraphicsLayerCA::updateLayerDrawsContent):
        (WebCore::GraphicsLayerCA::updateContentsScale):
        (WebCore::GraphicsLayerCA::swapFromOrToTiledLayer):
        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::willDestroyLayer):
        (WebCore::RenderLayerBacking::tiledBackingUsageChanged):
        (WebCore::RenderLayerBacking::destroyGraphicsLayers):
        (WebCore::RenderLayerBacking::updateClippingLayers):
        (WebCore::RenderLayerBacking::updateOverflowControlsLayers):
        (WebCore::RenderLayerBacking::updateForegroundLayer):
        (WebCore::RenderLayerBacking::updateBackgroundLayer):
        (WebCore::RenderLayerBacking::updateMaskLayer):
        (WebCore::RenderLayerBacking::updateScrollingLayers):
        (WebCore::RenderLayerBacking::compositingLayerType):
        * rendering/RenderLayerBacking.h:
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::RenderLayerCompositor):
        (WebCore::RenderLayerCompositor::layerTiledBackingUsageChanged):
        * rendering/RenderLayerCompositor.h:
        (WebCore::RenderLayerCompositor::haveNonMainLayersWithTiledBacking):

2013-03-15  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/13434470> ASSERT(isMainThread()) in -[WebTiledBackingLayer invalidate]

        Reviewed by Pratik Solanki.

        Need to adjust an ASSERT(isMainThread()) in -[WebTiledBackingLayer invalidate]
        for iOS.

        * platform/graphics/ca/mac/WebTiledBackingLayer.mm:
        (-[WebTiledBackingLayer invalidate]):

2013-03-19  Joseph Pecoraro  <pecoraro@apple.com>

        <rdar://problem/13369747> -[WAKWindow setVisible:] isn't WebCoreThread safe

        Reviewed by Ian Henderson.

        * wak/WAKWindow.mm:
        (-[WAKWindow setVisible:]):
        Run the notification on the WebThread where there are listeners in WebKit.

2013-03-18  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/12324756> Change "Apex" to "iOS 4.0" in comment

        Rubberstamped by Adele Peterson.

        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::willLoadMediaElementURL): Fix comment.

2013-03-16  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/13425917> ImageBufferData::getData taking 14x (36ms -> 535ms) more time on apple.com webpage

        Reviewed by Joseph Pecoraro.

        Turn off ENABLE_HIGH_DPI_CANVAS on iOS. It got enabled by mistake in merge #4 <rdar://problem/12511066>.

        * Configurations/FeatureDefines.xcconfig:

2013-03-12  Benjamin Poulain  <bpoulain@apple.com>

        Merge OpenSource WebKit r145601.

    2013-03-15  Benjamin Poulain  <bpoulain@apple.com>

        Add a single character cache to WidthCache
        https://bugs.webkit.org/show_bug.cgi?id=112084

        Reviewed by Geoffrey Garen.

        More than half of the values stored in WidthCache are values
        for a single character.

        Previously, we were creating a new SmallStringKey for each one of
        them, causing a lot of extra memory operations even for the simple
        cases.

        This patch adds a second map, m_singleCharMap, to simplify the
        computation for the common case of a single char TextRun.

        * platform/graphics/WidthCache.h:
        (WebCore::WidthCache::clear):
        (WidthCache):
        (WebCore::WidthCache::addSlowCase):

2013-03-14  Enrica Casucci  <enrica@apple.com>

        ER: RTFD pasteboard support.
        <rdar://problem/10874071>.

        Reviewed by Justin Garcia.

        Adds support for RTFD and RTF pasteboard data types.
        
        * platform/ios/PasteboardIOS.mm:
        (WebCore::Pasteboard::writeSelection): Uses NSHTMLReader from
        Foundation to convert a DOM range to NSAttributedString and uses
        it to produce RTF and RTFD.
        (WebCore::documentFragmentWithRTF): Added.
        (WebCore::Pasteboard::supportedPasteboardTypes): Added RTF and RTFD types.
        (WebCore::Pasteboard::documentFragmentForPasteboardItemAtIndex): Creates
        an NSAttributesString from RTF or RTFD data and uses it to produce the DOM
        fragment.

2013-03-14  Enrica Casucci  <enrica@apple.com>
        
        Merge ToT 145854.
        
    2013-03-14  Enrica Casucci  <enrica@apple.com>

        Character orientation should follow UTR50 specs for vertical layout.
        https://bugs.webkit.org/show_bug.cgi?id=112213
        <rdar://problem/12880943>

        Reviewed by Ryosuke Niwa.

        platform/mac/fast/text/vertical-no-sideways.html: Modified to cover samples
        of the additional character ranges that should not be rotated in vertical layout.
        Added pixel results.

        This patch modifies shouldIgnoreRotation to include all the characters that
        should not be rotated sideways in vertical layout according to the UTR50 draft 6
        specifications. It also fixes rotation for Emojii.

        * platform/graphics/FontFastPath.cpp:
        (WebCore::shouldIgnoreRotation):
        (WebCore::isInRange): Added.
        * platform/graphics/mac/FontMac.mm:
        (WebCore::showGlyphsWithAdvances): Adds the proper transforms to ensure
        Emojii also are drawn correctly upright.

2013-03-13  Dean Jackson  <dino@apple.com>

        <rdar://problem/13417011> GL_EXT_packed_depth_stencil is called GL_OES_packed_depth_stencil on iOS

        Reviewed by Tim Horton.

        Covered by fast/canvas/webgl/context-attributes-alpha-depth-stencil-antialias.html
        (although that will be skipped until <rdar://problem/13417023> is fixed)

        * platform/graphics/opengl/Extensions3DOpenGL.cpp:
        (WebCore::Extensions3DOpenGL::supportsExtension): Rewrite the name of the extension.

2013-03-14  Alice Barraclough  <alice.barraclough@apple.com>

        Merged TOT WebKit r145789.

    2013-03-14  Alice Liu  <alice.liu@apple.com>
    
            Add to HistoryItem a way to know if its underlying CachedPage has expired.
            https://bugs.webkit.org/show_bug.cgi?id=110652
    
            Reviewed by Brady Eidson.
    
            * WebCore.exp.in: Added WebCore::HistoryItem::isInPageCache and hasCachedPageExpired.
            * history/CachedPage.cpp: Add a data member, m_expirationTime, and a function, hasExpired().
            * history/CachedPage.h:
            * history/HistoryItem.cpp:
            (WebCore::HistoryItem::hasCachedPageExpired): Added. returns m_cachedPage's expiration state.
            * history/HistoryItem.h:
            * history/PageCache.cpp:
            (WebCore::PageCache::get):  Address the fixme about not using WebKitBackForwardCacheExpirationIntervalKey. 
            * page/Settings.in: Add backForwardCacheExpirationInterval to the automatically generated setters for Settings.

2013-03-11  Eric Carlson  <eric.carlson@apple.com>

        <rdar://problem/13395267> WebKit fails to build (iphonesimulator x86_64): Source/WebCore/platform/graphics/ios/MediaPlayerPrivateIOS.mm:999:12: error: cast from pointer to smaller type 'int' loses information

        Fix 64-bit build after r1194271.

        Reviewed by Jer Noble.

        * html/track/TextTrack.cpp:
        (WebCore::TextTrack::platformTextTrack): Set platform track unique ID.

        * platform/graphics/PlatformTextTrack.h:
        (WebCore::PlatformTextTrack::create): Ditto.
        (WebCore::PlatformTextTrack::uniqueId): Ditto.
        (WebCore::PlatformTextTrack::PlatformTextTrack): Ditto.

        * platform/graphics/ios/MediaPlayerPrivateIOS.mm:
        (WebCore::platformTrackID): Use platform track ID for out-of-band tracks.

2013-03-11  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/12327928> REGRESSION (64-bit): sizeof(StyleRareInheritedData) is larger than 32-bit value by one unsigned variable

        Reviewed by Maciej Stachowiak.

        Move some iOS fields around to reduce size of StyleRareInheritedData in 64-bit ARM from 208
        to 200 bytes. Note that the additional unsigned that was added actually increased the size
        of the structure by 8 bytes and not 4.

        * rendering/style/StyleRareInheritedData.cpp:
        (SameSizeAsStyleRareInheritedData):
        (WebCore::StyleRareInheritedData::StyleRareInheritedData):
        * rendering/style/StyleRareInheritedData.h:
        (StyleRareInheritedData):

2013-03-11  Eric Carlson  <eric.carlson@apple.com>

        <rdar://problem/13390789> Make inband text track ID an int

        Reviewed by Jer Noble.

        * platform/graphics/ios/InbandTextTrackPrivateAVFIOS.h:
        (WebCore::InbandTextTrackPrivateAVFIOS::create): Internal id is an int.
        (WebCore::InbandTextTrackPrivateAVFIOS::internalID): Ditto.
        * platform/graphics/ios/InbandTextTrackPrivateAVFIOS.mm:
        (WebCore::InbandTextTrackPrivateAVFIOS::InbandTextTrackPrivateAVFIOS): Ditto.

        * platform/graphics/ios/MediaPlayerPrivateIOS.h:
        * platform/graphics/ios/MediaPlayerPrivateIOS.mm:
        (WebCore::MediaPlayerPrivateIOS::inbandTextTracksChanged): Ditto.
        (WebCore::MediaPlayerPrivateIOS::setSelectedTextTrack): Ditto.
        (WebCore::MediaPlayerPrivateIOS::trackModeChanged): Ditto.
        (WebCore::MediaPlayerPrivateIOS::clearTextTracks): Drive-by fix, clear m_currentTrack.
        (WebCore::platformTrackID): Internal id is an int.
        (WebCore::MediaPlayerPrivateIOS::outOfBandTextTracksChanged): Ditto.
        (WebCore::MediaPlayerPrivateIOS::textTrackWasSelectedByMediaElement): Ditto.
        (WebCore::MediaPlayerPrivateIOS::textTrackWasSelectedByPlugin): Ditto.
        * platform/graphics/mac/MediaPlayerProxy.h: Ditto.

2013-03-10  Eric Carlson  <eric.carlson@apple.com>

        <rdar://problem/12044942> TLF: Update captions support to meet Web broadcast requirements

        Reviewed by Dean Jackson.

        * WebCore.xcodeproj/project.pbxproj: Add new files.

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::parseAttribute): Add a NULL check.

        * platform/graphics/ios/InbandTextTrackPrivateAVFiOS.h: Added.
        * platform/graphics/ios/InbandTextTrackPrivateAVFiOS.mm: Added.

        * platform/graphics/ios/MediaPlayerPrivateIOS.h:
        * platform/graphics/ios/MediaPlayerPrivateIOS.mm:
        (WebCore::MediaPlayerPrivateIOS::PlatformTextTrackMenuInterfaceiOS::create): New.
        (WebCore::MediaPlayerPrivateIOS::PlatformTextTrackMenuInterfaceiOS::PlatformTextTrackMenuInterfaceiOS):
        (WebCore::MediaPlayerPrivateIOS::PlatformTextTrackMenuInterfaceiOS::~PlatformTextTrackMenuInterfaceiOS):
        (WebCore::MediaPlayerPrivateIOS::PlatformTextTrackMenuInterfaceiOS::tracksDidChange):
        (WebCore::MediaPlayerPrivateIOS::PlatformTextTrackMenuInterfaceiOS::trackWasSelected):
        (WebCore::MediaPlayerPrivateIOS::PlatformTextTrackMenuInterfaceiOS::setClient):
        (WebCore::MediaPlayerPrivateIOS::PlatformTextTrackMenuInterfaceiOS::client):
        (WebCore::MediaPlayerPrivateIOS::MediaPlayerPrivateIOS): Initialize m_currentTrack.
        (WebCore::MediaPlayerPrivateIOS::~MediaPlayerPrivateIOS): Clear inband text tracks and plug-in delegate.
        (WebCore::MediaPlayerPrivateIOS::setMediaPlayerProxy): Set the plug-in delegate.
        (WebCore::MediaPlayerPrivateIOS::processDeferredRequests): Process deferred track requests.
        (WebCore::MediaPlayerPrivateIOS::setControls): Fix typo.
        (WebCore::MediaPlayerPrivateIOS::inbandTextTracksChanged): New, deal with in-band track additions
            and deletions.
        (WebCore::MediaPlayerPrivateIOS::setSelectedTextTrack): Tell plug-in about a track selection.
        (WebCore::MediaPlayerPrivateIOS::trackModeChanged): Process in-band track change(es).
        (WebCore::MediaPlayerPrivateIOS::clearTextTracks): Forget all in-band tracks.
        (WebCore::MediaPlayerPrivateIOS::processInbandTextTrackCue): Process a new in-band track cue.
        (WebCore::MediaPlayerPrivateIOS::setOutOfBandTextTracks): Tell the plug-in about out-of-band 
            track changes.
        (WebCore::platformTrackID): Return a track's unique ID.
        (WebCore::MediaPlayerPrivateIOS::outOfBandTextTracksChanged): Build an array of track 
            representations to tell the plug-in about changes to out-of-band track changes.
        (WebCore::MediaPlayerPrivateIOS::textTrackWasSelectedByMediaElement): The media element selected a 
            track, tell the plug-in.
        (WebCore::MediaPlayerPrivateIOS::textTrackWasSelectedByPlugin): The plug-in selected a track,
            tell the media element.
        (WebCore::MediaPlayerPrivateIOS::textTrackMenu): Return the PlatformTextTrackMenuInterface.
        (-[WebCoreMediaPlayerNotificationHelper pluginElementInBandAlternateTextTracksDidChange:]):
        (-[WebCoreMediaPlayerNotificationHelper pluginElementDidSelectTextTrack:]):
        (-[WebCoreMediaPlayerNotificationHelper pluginElementDidOutputAttributedStrings:nativeSampleBuffers:forTime:]):
        * platform/graphics/mac/MediaPlayerProxy.h:

2013-03-10  Eric Carlson  <eric.carlson@apple.com>

        Required for <rdar://problem/12044942> TLF: Update captions support to meet Web broadcast requirements

        Merge ToT WebKit r143884.

    2013-02-24  Eric Carlson  <eric.carlson@apple.com>

            [Mac] cleanup MediaPlayerPrivateAVFoundation and InbandTextTrackPrivateAVF
            https://bugs.webkit.org/show_bug.cgi?id=110716

            Reviewed by Alexey Proskuryakov.

            No new tests, no functionality changed.

            * platform/graphics/avfoundation/InbandTextTrackPrivateAVF.cpp:
            (WebCore::InbandTextTrackPrivateAVF::InbandTextTrackPrivateAVF): Take AVFInbandTrackParent*
                instead of MediaPlayerPrivateAVFoundation*.
            (WebCore::InbandTextTrackPrivateAVF::processCue): Pass new cues directly to the client.
            (WebCore::InbandTextTrackPrivateAVF::disconnect): m_player -> m_owner.
            (WebCore::InbandTextTrackPrivateAVF::setMode):  m_player -> m_owner.
            * platform/graphics/avfoundation/InbandTextTrackPrivateAVF.h:

            * platform/graphics/avfoundation/MediaPlayerPrivateAVFoundation.cpp:
            (WebCore::MediaPlayerPrivateAVFoundation::addGenericCue): Delete, no longer needed.
            * platform/graphics/avfoundation/MediaPlayerPrivateAVFoundation.h:

            * platform/graphics/avfoundation/objc/MediaPlayerPrivateAVFoundationObjC.h: Don't include 
                CachedResourceClient.h, it isn't needed.

2013-03-10  Eric Carlson  <eric.carlson@apple.com>

        Required for <rdar://problem/12044942> TLF: Update captions support to meet Web broadcast requirements

        Merge ToT WebKit r145326.

    2013-03-10  Eric Carlson  <eric.carlson@apple.com>

            Allow iOS port to use InbandTextTrackPrivateAVF
            https://bugs.webkit.org/show_bug.cgi?id=111933

            Reviewed by Dean Jackson.

            * platform/graphics/avfoundation/InbandTextTrackPrivateAVF.cpp:
            (WebCore::InbandTextTrackPrivateAVF::processCue): Drive-by cleanup.
            * platform/graphics/avfoundation/InbandTextTrackPrivateAVF.h:

2013-03-09  Eric Carlson  <eric.carlson@apple.com>

        Required for <rdar://problem/12044942> TLF: Update captions support to meet Web broadcast requirements

        Merge ToT WebKit r145322.

    2013-03-09  Eric Carlson  <eric.carlson@apple.com>

            Enable platform code to implement text track menu
            https://bugs.webkit.org/show_bug.cgi?id=111924

            Reviewed by Dean Jackson.

            No new tests, the new code isn't enabled in any ports yet.

            * WebCore.xcodeproj/project.pbxproj: Add PlatformTextTrack.h and PlatformTextTrackMenu.h.

            * html/HTMLAudioElement.cpp:
            (WebCore::HTMLAudioElement::createForJSConstructor): scheduleLoad -> scheduleDelayedAction.

            * html/HTMLMediaElement.cpp:
            (WebCore::HTMLMediaElement::HTMLMediaElement): Deal with scheduleLoad to scheduleDelayedAction rename.
            (WebCore::HTMLMediaElement::parseAttribute): Ditto.
            (WebCore::HTMLMediaElement::finishParsingChildren): Ditto.
            (WebCore::HTMLMediaElement::insertedInto): Ditto.
            (WebCore::HTMLMediaElement::scheduleDelayedAction): Ditto.
            (WebCore::HTMLMediaElement::scheduleNextSourceChild): Ditto.
            (WebCore::HTMLMediaElement::loadTimerFired): Ditto.
            (WebCore::HTMLMediaElement::textTrackModeChanged): Notify platform menu of track change.
            (WebCore::HTMLMediaElement::playInternal): Deal with scheduleLoad to scheduleDelayedAction rename.
            (WebCore::HTMLMediaElement::pauseInternal): Ditto.
            (WebCore::HTMLMediaElement::mediaPlayerDidAddTrack): Ditto. Call addTrack() instead of appending 
                the track directly.
            (WebCore::HTMLMediaElement::setSelectedTextTrack): Deal with platform menu changing the
                selected track.
            (WebCore::HTMLMediaElement::platformTextTracks): Return an array of PlatformTracks representing
                the current text tracks.
            (WebCore::HTMLMediaElement::notifyMediaPlayerOfTextTrackChanges): Notify the platform menu
                that the list of text tracks has changed.
            (WebCore::HTMLMediaElement::platformTextTrackMenu): Return the platform track menu, if any.
            (WebCore::HTMLMediaElement::closeCaptionTracksChanged): 
            (WebCore::HTMLMediaElement::addTrack): Call addTrack() instead of appending the track directly.
            (WebCore::HTMLMediaElement::removeTrack): Call closeCaptionTracksChanged.
            (WebCore::HTMLMediaElement::addTextTrack): Call addTrack() instead of appending the track directly.
            (WebCore::HTMLMediaElement::didAddTrack): Ditto.
            (WebCore::HTMLMediaElement::didRemoveTrack): Deal with scheduleLoad to scheduleDelayedAction rename.
            (WebCore::HTMLMediaElement::sourceWasAdded): Ditto.
            (WebCore::HTMLMediaElement::clearMediaPlayer): Forget the platform track menu.
            (WebCore::HTMLMediaElement::resume): Deal with scheduleLoad to scheduleDelayedAction rename.
            * html/HTMLMediaElement.h:

            * html/track/InbandTextTrack.h: scheduleLoad -> scheduleDelayedAction.

            * html/track/TextTrack.cpp:
            (WebCore::TextTrack::platformTextTrack): Create a PlatformTextTrack.
            * html/track/TextTrack.h:

            * platform/graphics/MediaPlayer.cpp:
            (WebCore::MediaPlayer::implementsTextTrackControls): New, player private passthrough.
            (WebCore::MediaPlayer::textTrackMenu): Ditto.
            * platform/graphics/MediaPlayer.h:
            * platform/graphics/MediaPlayerPrivate.h:

            * platform/graphics/PlatformTextTrack.h: Added.

            * platform/graphics/PlatformTextTrackMenu.h: Added.

2013-03-09  Eric Carlson  <eric.carlson@apple.com>

        Add one line I missed merging ToT WebKit r145320.

        * html/shadow/MediaControlElements.cpp:

2013-03-09  Eric Carlson  <eric.carlson@apple.com>

        Required for <rdar://problem/12044942> TLF: Update captions support to meet Web broadcast requirements

        Merge ToT WebKit r145320.

    2013-03-09  Eric Carlson  <eric.carlson@apple.com>

            Video size calculated incorrectly when PLUGIN_PROXY_FOR_VIDEO
            https://bugs.webkit.org/show_bug.cgi?id=111912

            Reviewed by Dean Jackson.

            * html/shadow/MediaControlElements.cpp:
            (WebCore::MediaControlTextTrackContainerElement::updateSizes): We use RenderPart when
                PLUGIN_PROXY_FOR_VIDEO is defined, not RenderVideo.

2013-03-08  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/10132965> Ameliorate flashing in tiled layers, possibly by using TileCache
        
        Merged ToT WebKit r145148, and remove PLATFORM(IOS) #ifdefs so that iOS
        uses TiledBacking layers in web content now.
        
        * Configurations/WebCore.xcconfig: Building files that we need on iOS now.
        * WebCore.xcodeproj/project.pbxproj: Renaming files in the project. Removed WebTileCacheLayerIOS.mm.
        * platform/graphics/ca/ios/WebTileCacheLayerIOS.mm: Removed.

    2013-03-07  Simon Fraser  <simon.fraser@apple.com>

        Rename Mac's TileCache to TileController, and WebTileCacheLayer to WebTiledBackingLayer
        https://bugs.webkit.org/show_bug.cgi?id=111779

        Reviewed by Tim Horton.
        
        "TileCache" was a name conflict in downstream code, so rename it to TileController.
        The layer that has a TileController is now a WebTiledBackingLayer (which fits with
        the TiledBacking API that TileController exposes).
        
        Also renamed the flags in PlatformCALayer to match.

        Rename only, no behavior change.

        * WebCore.xcodeproj/project.pbxproj:
        * page/scrolling/mac/ScrollingTreeScrollingNodeMac.mm:
        (WebCore::ScrollingTreeScrollingNodeMac::logExposedUnfilledArea):
        * platform/graphics/GraphicsLayerClient.h:
        (WebCore::GraphicsLayerClient::shouldUseTiledBacking):
        * platform/graphics/ca/GraphicsLayerCA.cpp:
        (WebCore::GraphicsLayerCA::GraphicsLayerCA):
        (WebCore::GraphicsLayerCA::recursiveCommitChanges):
        (WebCore::GraphicsLayerCA::platformCALayerShowRepaintCounter):
        (WebCore::GraphicsLayerCA::platformCALayerDidCreateTiles):
        (WebCore::GraphicsLayerCA::updateVisibleRect):
        (WebCore::GraphicsLayerCA::getDebugBorderInfo):
        (WebCore::GraphicsLayerCA::requiresTiledLayer):
        (WebCore::GraphicsLayerCA::swapFromOrToTiledLayer):
        * platform/graphics/ca/GraphicsLayerCA.h:
        * platform/graphics/ca/PlatformCALayer.h:
        (WebCore::PlatformCALayer::usesTiledBackingLayer):
        * platform/graphics/ca/mac/PlatformCALayerMac.mm:
        (PlatformCALayer::PlatformCALayer):
        (PlatformCALayer::~PlatformCALayer):
        (PlatformCALayer::tiledBacking):
        * platform/graphics/ca/mac/TileController.h: Renamed from Source/WebCore/platform/graphics/ca/mac/TileCache.h.
        * platform/graphics/ca/mac/WebTileLayer.h:
        (TileController):
        * platform/graphics/ca/mac/WebTileLayer.mm:
        (-[WebTileLayer drawInContext:]):
        (-[WebTileLayer setTileController:WebCore::]):
        (-[WebTileLayer logFilledFreshTile]):
        * platform/graphics/ca/mac/WebTiledBackingLayer.h: Renamed from Source/WebCore/platform/graphics/ca/mac/WebTileCacheLayer.h.
        * platform/graphics/ca/mac/WebTiledBackingLayer.mm: Renamed from Source/WebCore/platform/graphics/ca/mac/WebTileCacheLayer.mm.
        * platform/graphics/mac/WebLayer.mm:
        (drawLayerContents):
        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::RenderLayerBacking):
        (WebCore::RenderLayerBacking::shouldUseTiledBacking):
        (WebCore::RenderLayerBacking::adjustTiledBackingCoverage):
        (WebCore::RenderLayerBacking::createPrimaryGraphicsLayer):
        * rendering/RenderLayerBacking.h:
        (WebCore::RenderLayerBacking::usingTiledBacking):
        (RenderLayerBacking):
        (WebCore::RenderLayerBacking::hasTiledBackingFlatteningLayer):
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::frameViewDidLayout):
        (WebCore::RenderLayerCompositor::rootFixedBackgroundsChanged):
        (WebCore::RenderLayerCompositor::supportsFixedRootBackgroundCompositing):

2013-03-08  Simon Fraser  <simon.fraser@apple.com>

        Precursor for <rdar://problem/10132965> Ameliorate flashing in tiled layers, possibly by using TileCache        

        Merged ToT WebKit r143537.

    2013-02-20  Simon Fraser  <simon.fraser@apple.com>

        Zoomed, slow-scrolling pages keep recreating tiles when scrolled
        https://bugs.webkit.org/show_bug.cgi?id=110379

        Reviewed by Tim Horton.

        On slow-scrolling pages the TileCache makes the tiles the size of
        the visible rect to minimize per-tile painting overhead. If the size
        of that rect changes, the TileCache re-creates all the tiles.
        
        This was a problem whem zoomed, because mapping the visible rect
        through the scale transform and then rounding it would cause the
        size to keep changing, causing lots of tile re-creation.
        
        Fix by carrying the visibleRect around as a FloatRect, and doing
        the same for the exposedRect. We then only expand to integers
        when computing the tile size. This also fixes an issue where we could
        sometimes make extra tiles because of fractional bits of tiles at the edges,
        as shown by the test result change.

        * platform/graphics/TiledBacking.h:
        * platform/graphics/ca/GraphicsLayerCA.cpp:
        (WebCore::GraphicsLayerCA::updateVisibleRect):
        * platform/graphics/ca/mac/TileCache.h:
        * platform/graphics/ca/mac/TileCache.mm:
        (WebCore::TileCache::setVisibleRect):
        (WebCore::TileCache::setExposedRect):
        (WebCore::TileCache::prepopulateRect):
        (WebCore::TileCache::computeTileCoverageRect):
        (WebCore::TileCache::tileSizeForCoverageRect):
        (WebCore::TileCache::blankPixelCountForTiles):
        (WebCore::TileCache::revalidateTiles):
        (WebCore::TileCache::ensureTilesForRect):
        * platform/graphics/ca/mac/WebTileLayer.mm:
        (-[WebTileLayer logFilledFreshTile]):

2013-03-08  Eric Carlson  <eric.carlson@apple.com>

        Merged TOT WebKit r145127.

    2013-03-07  Eric Carlson  <eric.carlson@apple.com>

            [Mac] allow iOS to use CaptionUserPreferencesMac
            https://bugs.webkit.org/show_bug.cgi?id=111770

            Reviewed by Dean Jackson.

            No new tests, covered by existing tests.

            * page/CaptionUserPreferencesMac.h:
            * page/CaptionUserPreferencesMac.mm:
            (WebCore::userCaptionPreferencesChangedNotificationCallback): Respond to notifications on
                the web thread.

2013-03-07  Dan Bernstein  <mitz@apple.com>

        Merged TOT WebKit r145170.

        * WebCore.exp.in:

2013-03-07  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/12798052> Safari Alexa test: MobileSafari crashed at FrameLoader::~FrameLoader when running alexa test.

        This is a speculative fix.  The crash only happens randomly during Alexa test.  I was not able to reproduce it by manually loading
        sites.  It looks like an iframe was put into page cache while its FrameLoader's progressTracker was still in loading state.  When
        we prune the page cache, the iframe's m_page is cleared before we calling the destructor of FrameProgressTracker, and deferencing
        it will cause the crash.  The patch adds a null check for m_frame->page() to prevent this.  I have been running the test with
        this change and no crash observed.

        Reviewed by Joseph Pecoraro.

        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::FrameProgressTracker::~FrameProgressTracker):

2013-03-06  Mark Hahnenberg  <mhahnenberg@apple.com>

        Merge ToT WebKit r143637 and follow-up build fixes r143750, r144545, r144546, and r144662.

    2013-02-19  Mark Hahnenberg  <mhahnenberg@apple.com>
    
            Objective-C API: Need a way to use the Objective-C JavaScript API with WebKit
            https://bugs.webkit.org/show_bug.cgi?id=106059
    
            Reviewed by Geoffrey Garen.
    
            * WebCore.exp.in:
            * bindings/js/JSDOMWindowShell.cpp:
            (WebCore::JSDOMWindowShell::setWindow): Since we're basically abandoning a JSDOMWindow here, we call
            garbageCollectSoon().
            * bindings/js/JSDOMWindowShell.h:
            * bindings/js/ScriptController.h: New function to get the JSContext for the global object of the current main world.
            * bindings/js/ScriptControllerMac.mm: 
            (WebCore::ScriptController::javaScriptContext): Ditto.
            * bindings/objc/WebScriptObject.h: Added ifdef guards. Also new convenience conversion function for the JSC Obj-C API.
            * bindings/objc/WebScriptObject.mm: JSC::JSValue and JSValue conflict with one another, so we have to be more specific.
            (-[WebScriptObject _globalContextRef]): Useful helper function for getting the JSGlobalContextRef of a particular WebScriptObject.
            (-[WebScriptObject callWebScriptMethod:withArguments:]):
            (-[WebScriptObject evaluateWebScript:]):
            (-[WebScriptObject valueForKey:]):
            (-[WebScriptObject webScriptValueAtIndex:]):
            (+[WebScriptObject _convertValueToObjcValue:JSC::originRootObject:rootObject:]):
            (-[WebScriptObject JSValue]): Implementation of convenience WebScriptObject conversion function to new Objective-C API.
            * bindings/objc/WebScriptObjectPrivate.h:

2013-03-06  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/13362851> Fixed position elements can jump around if layout happens while scrolling

        Reviewed by Antti Koivisto.

        If a layout happens while scrolling, fixed elements can jiggle around because they get
        laid out using a stale notion of the custon viewport, then moved by WebFixedPositionContent
        using an updated notion of the custom viewport.
        
        WebView buffers custom viewport rect changes, and only pushes it down into WebCore sometimes,
        which is the cause of the viewport going stale in WebCore.
        
        Fix this by having WebCore fetch an updated custom view rect if it is going to do layout anyway.

        * page/ChromeClient.h:
        (WebCore::ChromeClient::fetchCustomFixedPositionLayoutRect):
        * page/FrameView.cpp:
        (WebCore::FrameView::layout):
        (WebCore::FrameView::performPostLayoutTasks):
        * page/FrameView.h:
        (FrameView):

2013-03-07  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/13369236> iOS: Reader unavailable for many sites due to fluid progress heuristic firing too soon

        Merged ToT WebKit r144395.

    2013-02-28  Beth Dakin  <bdakin@apple.com>

        RelevantRepaintedObjects heuristic should ensure there is some coverage in the 
        bottom half of the relevant view rect
        https://bugs.webkit.org/show_bug.cgi?id=111124
        -and corresponding-
        <rdar://problem/12257164>

        Reviewed by Simon Fraser.

        We need two Regions now -- one for the top and another for the bottom. Make sure 
        we have at least half of our desired coverage in both.
        * page/Page.cpp:
        (WebCore::Page::resetRelevantPaintedObjectCounter):
        (WebCore::Page::addRelevantRepaintedObject):
        (WebCore::Page::reportMemoryUsage):
        * page/Page.h:

2013-03-06  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/13360111> PEP Web: assertion failure isMainThread() in WebCore::TokenPreloadScanner::StartTagScanner::processAttributes.

        Use (isMainThread() || pthread_main_np()) in stead of isMainThread() in iOS.

        Reviewed by David Kilzer.

        * html/parser/HTMLPreloadScanner.cpp:
        (WebCore::TokenPreloadScanner::StartTagScanner::processAttributes):
        (WebCore::HTMLPreloadScanner::scan):
        * html/parser/HTMLResourcePreloader.cpp:
        (WebCore::PreloadRequest::resourceRequest):

2013-03-06  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/13364896> iOS: PWN2OWN 2013 bug: in SVGViewSpec::viewTarget (111648)

        Merged ToT WebKit r145013.

    2013-03-06  Abhishek Arya  <inferno@chromium.org>

        Crash in SVGViewSpec::viewTarget
        https://bugs.webkit.org/show_bug.cgi?id=111648

        Reviewed by Philip Rogers.

        * svg/SVGViewSpec.cpp:
        (WebCore::SVGViewSpec::viewTarget):

2013-03-06  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/13008230> REGRESSION: iTunes store sticky content snaps on scroll

        Reviewed by David Kilzer.

        Restore Brighton behavior for repositioning fixed and sticky elements on scrolling;
        they should use the customFixedPositionLayoutRect(), not the actualVisibleContentRect()
        as their "viewport" rect.
        
        This fixes some fixed element jumping if layout happens while scrolling, but not all of it.

        * rendering/RenderLayerCompositor.cpp:

2013-03-04  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/12775944> Safari crashes in WebCore::RenderTableCell::borderLeft when a table cell has overflow:auto and overflow-scrolling:touch

        Reviewed by David Kilzer.
        
        Avoid calling scrollWidth() or scrollHeight() on a layer when we're constructing the renderer
        for the first time, before the layer is parented. Doing so will result in a null de-ref in table
        code.
        
        It's safe to skip the call to scrollingLayerAddedOrUpdated() in this case, because we'll
        get called on the geometry update that happens after layout anyway.

        Test: platform/iphone-simulator/iphone/scrolling/table-cell-touch-scrolling.html

        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::updateScrollingLayers):

2013-03-04  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/13341196> Fixed position elements are misplaced on scrolling

        Reviewed by Beth Dakin.

        The old code only initialized the ViewportConstraints base class members
        of the constraints object, so we lost all the relevant information for
        fixed and sticky layers.
        
        Fixed by using the new copy constructors for StickyPositionViewportConstraints
        and FixedPositionViewportConstraints.

        * rendering/RenderLayerCompositor.cpp:

2013-03-04  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/13341196> Fixed position elements are misplaced on scrolling

        Merged ToT WebKit r144687.

    2013-03-04  Simon Fraser  <simon.fraser@apple.com>
    
        Give ViewportConstraints classes copy constructors
        https://bugs.webkit.org/show_bug.cgi?id=111367

        Reviewed by Beth Dakin.
        
        Downstream code requires that ViewportConstraints objects have
        copy constructors, so add them.
        
        Also clean up some redundant initialization of stack objects
        in RenderLayerCompositor.

        No behavior change.

        * page/scrolling/ScrollingConstraints.h:
        (WebCore::ViewportConstraints::ViewportConstraints):
        (ViewportConstraints):
        (WebCore::FixedPositionViewportConstraints::FixedPositionViewportConstraints):
        (FixedPositionViewportConstraints):
        (WebCore::StickyPositionViewportConstraints::StickyPositionViewportConstraints):
        (StickyPositionViewportConstraints):
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::computeFixedViewportConstraints):
        (WebCore::RenderLayerCompositor::computeStickyViewportConstraints):

2013-03-04  Simon Fraser  <simon.fraser@apple.com>

        Crash in ResourceHandle::createCFURLConnection() after merge.

        Reviewed by Andy Estes.

        CFDictionaryAddValue() takes keys and values, not arrays of keys and values like CFDictionaryCreate().

        * platform/network/cf/ResourceHandleCFNet.cpp:
        (WebCore::ResourceHandle::createCFURLConnection):

2013-03-04  Andy Estes  <aestes@apple.com>

        <rdar://problem/13167973> SPI to set kCFStreamPropertySourceApplication on URL connections used by a webview

        Merged ToT WebKit r144495.

    2013-02-28  Sam Weinig  <sam@webkit.org>

        Add SPI for marking a WebView as doing things on behalf of another process
        https://bugs.webkit.org/show_bug.cgi?id=111125

        Reviewed by Alexey Proskuryakov.

        * platform/network/NetworkingContext.h:
        (NetworkingContext):
        * platform/network/cf/ResourceHandleCFNet.cpp:
        (WebCore::ResourceHandle::createCFURLConnection):
        * platform/network/mac/ResourceHandleMac.mm:
        (WebCore::ResourceHandle::createNSURLConnection):
        Set the sourceApplicationAuditData on the URL connection if available.

2013-03-01  Dan Bernstein  <mitz@apple.com>

        Removed unused legacy build configurations

        Reviewed by Enrica Casucci.

        * WebCore.xcodeproj/project.pbxproj:

2013-03-01  Enrica Casucci  <enrica@apple.com>

        Extra highlight region in-between pages in Book theme with vertical book.
        <rdar://problem/12000896>.

        Reviewed by Dean Jackson.

        When we collect selection rectangles and stitch them together filling the gap we
        need to handle the vertical layout case properly. The rectangle bounds are not sufficient
        to determine if two rectangles are on the same page (or more precisely column).
        This change adds to SelectionRect the knowledge of the column it belongs to so
        that the gap filling can be done correctly in vertical layout too.
        As part of this work, I've moved SelectionRect.h inclusion off the header files
        to improve build time. I've also removed in RenderText.cpp an #if 0 that was leaving
        out code we needed (<rdar://problem/12184777>).

        * dom/Range.cpp:
        (WebCore::printRects): Printing the column number too.
        (WebCore::Range::collectSelectionRects): Uses the column information
        to skip filling the gap across pages.
        * dom/Range.h: Fixed includes.
        * platform/ios/SelectionRect.cpp: 
        (WebCore::SelectionRect::SelectionRect): Added column number to the
        constructors.
        * platform/ios/SelectionRect.h:
        (WebCore::SelectionRect::columnNumber): Added.
        * rendering/RenderImage.cpp:
        (WebCore::RenderImage::collectSelectionRects):
        * rendering/RenderObject.cpp:
        (WebCore::RenderObject::columnNumberForOffset):
        (WebCore::RenderObject::collectSelectionRects):
        * rendering/RenderObject.h: Added new method
        columnNumberForOffset.
        * rendering/RenderText.cpp:
        (WebCore::RenderText::collectSelectionRects): Uses
        columnNumberForOffset.
        * rendering/RenderText.h: Fixed includes.

2013-03-01  Eric Carlson  <eric.carlson@apple.com>

        <rdar://problem/12868974> Hook up iOS user preferences to captions

        Reviewed by David Kilzer.

        * page/CaptionUserPreferencesMac.h: Remove !PLATFORM(IOS).
        * page/CaptionUserPreferencesMac.mm: Ditto.

2013-02-28  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/13318841> PEP Web: REGRESSION: MobileSafari jetsammed when loading http://gnavi.co.jp in K93.

        Fix a merge error that adds the YouTube iframe player shadow element into the top document, rather than
        the plugin element itself.

        Reviewed by David Kilzer.

        * html/HTMLPlugInImageElement.cpp:
        (WebCore::HTMLPlugInImageElement::createShadowIFrameSubtree):

2013-02-28  Eric Carlson  <eric.carlson@apple.com>

        Required for <rdar://problem/12044942> TLF: Update captions support to meet Web broadcast requirements

        Merge ToT WebKit r144374.

    2013-02-28  Eric Carlson  <eric.carlson@apple.com>

            Refine Ryosuke's r144367 fix.

            Rubber-stamped by Ryosuke Niwa.

            * page/PageGroup.cpp:
            (WebCore::PageGroup::captionPreferences):

2013-02-28  Eric Carlson  <eric.carlson@apple.com>

        Required for <rdar://problem/12044942> TLF: Update captions support to meet Web broadcast requirements

        Merge ToT WebKit r144336 and r144367.

    2013-02-28  Ryosuke Niwa  <rniwa@webkit.org> 
 
            Revert an erroneous change in r144336. 
 
            Rubber-stamped by Eric Carlson. 
 
            * page/PageGroup.cpp: 
            (WebCore::PageGroup::captionPreferences): 

    2013-02-28  Eric Carlson  <eric.carlson@apple.com>

            [Mac] use HAVE() macro instead of version check
            https://bugs.webkit.org/show_bug.cgi?id=111087

            Reviewed by Dean Jackson.

            No new tests, covered by existing tests.

            * page/CaptionUserPreferencesMac.h: Use HAVE(MEDIA_ACCESSIBILITY_FRAMEWORK).
            * page/CaptionUserPreferencesMac.mm: Ditto.
            (WebCore::CaptionUserPreferencesMac::CaptionUserPreferencesMac): Ditto.
            (WebCore::CaptionUserPreferencesMac::~CaptionUserPreferencesMac): Ditto.

            * page/PageGroup.cpp:
            (WebCore::PageGroup::captionPreferences): Ditto.

2013-02-27  Eric Carlson  <eric.carlson@apple.com>

        <rdar://problem/13305536> Define ENABLE_VIDEO_TRACK again

        Reviewed by Dean Jackson.

        * Configurations/FeatureDefines.xcconfig: Define ENABLE_VIDEO_TRACK again.

2013-02-25  Enrica Casucci  <enrica@apple.com>

        Gaps in the selection/highlight in the text containing ruby.
        <rdar://problem/11978204>

        Reviewed by Dave Hyatt.

        The way we determine in RenderText::collectSelectionRects if a rectangle is the last on a line,
        needs to take into account the case of ruby elements and look at the inline box wrapper to
        get the correct answer.

        * dom/Range.cpp:
        (WebCore::Range::collectSelectionRects): Avoid processing empty rectangles.
        * rendering/RenderText.cpp:
        (WebCore::RenderText::collectSelectionRects):

2013-02-22  David Kilzer  <ddkilzer@apple.com>

        Downstream SharedTimerIOS.mm

        Merge ToT WebKit r143550.

    2013-02-20  David Kilzer  <ddkilzer@apple.com>

        Upstream SharedTimerIOS.mm
        <http://webkit.org/b/110161>

        Reviewed by Benjamin Poulain.

        * Configurations/WebCore.xcconfig:
        (EXCLUDED_SOURCE_FILE_NAMES_iphoneos): Add SharedTimerMac.mm.
        * WebCore.xcodeproj/project.pbxproj: Add SharedTimerIOS.mm.
        * platform/ios/SharedTimerIOS.mm: Add.
        (WebCore):
        (-[WebCoreResumeNotifierIOS init]):
        (-[WebCoreResumeNotifierIOS dealloc]):
        (-[WebCoreResumeNotifierIOS didWake]):
        (WebCore::setSharedTimerFiredFunction):
        (WebCore::timerFired):
        (WebCore::setSharedTimerFireInterval):
        (WebCore::stopSharedTimer):

2013-02-20  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/13164600> REGRESSION: Tapping on birthday when attempting to create new gamecenter ID causes app to become unresponsive

        Previously, BaseDateAndTimeInputType derived from TextFieldInputType.  Open source r139424 changed BaseDateAndTimeInputType
        to derive from InputType.  This makes Date input type not keyboard focusable in iOS since it now calls the more generic
        isKeyboardFocusable method in InputType. To fix this, we can restore the old behavior by overriding isKeyboardFocusable in
        BaseDateAndTimeInputType.

        Reviewed by Joseph Pecoraro.

        * html/BaseDateAndTimeInputType.cpp:
        (WebCore):
        (WebCore::BaseDateAndTimeInputType::isKeyboardFocusable):
        * html/BaseDateAndTimeInputType.h:
        (BaseDateAndTimeInputType):

2013-02-20  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/13135808> Debug builds asserts after merge#5

        Reviewed by David Kilzer.

        Code in WeakPtr.h and Supplementable.h wants to assert that the data is accessed from only
        one thread. However, it is okay on iOS to access the data from the WebThread or the main UI
        thread if it was allocated on one of those threads. Fix the aseertions to accomodate this
        constraint. We have new WTF methods that set and return the ThreadIdentifier for WebThread
        and main thread.

        * platform/Supplementable.h:
        (WebCore::Supplementable::provideSupplement):
        (WebCore::Supplementable::removeSupplement):
        (WebCore::Supplementable::requireSupplement):
        * wak/WebCoreThread.mm:
        (RunWebThread):
        (StartWebThread):

2013-02-20  Pratik Solanki  <psolanki@apple.com>

        Part of <rdar://problem/13135808> Debug builds asserts after merge#5

        Reviewed by David Kilzer.

        * html/parser/HTMLTreeBuilder.cpp:
        (WebCore::closestFormAncestor):
        (WebCore::HTMLTreeBuilder::HTMLTreeBuilder):

2013-02-19  Enrica Casucci  <enrica@apple.com>

        Intl: Text selection is wonky with mixed writing mode used for Tatechuyoko.
        <rdar://problem/12773000> 
        Gaps in the selection/highlight in the text containing ruby
        <rdar://problem/11978204> 
        
        Reviewed by Dave Hyatt.
        
        This patch fixes two bugs, since they are both related to the logic we
        use to stitch and combine rectangles to draw the selection, which is
        all in Range::collectSelectionRects.
        The previous implementation of this function did not handle properly
        content with mixed writing mode.
        We now consider every rectangle as having the writing mode of the
        containing block element, this way we can apply the existing rectangle
        stitching logic with no errors and we don't assume that adjacent elements
        on the same line have no gaps.
        We also identify the rectangles representing ruby text, to avoid placing
        the ruby text on a different line from its base.

        * dom/Range.cpp:
        (WebCore::printRects): Added console debug function for debug buids only.
        (WebCore::Range::collectSelectionRects): Implemented new logic described above.
        * platform/ios/SelectionRect.cpp:
        (WebCore::SelectionRect::SelectionRect): Added parameter to SelectionRect constructor
        to store ruby information.
        * platform/ios/SelectionRect.h:
        (WebCore::SelectionRect::isRubyText): Added.
        * rendering/RenderImage.cpp:
        (WebCore::RenderImage::collectSelectionRects): Modified call to the
        SelectionRect constructor.
        * rendering/RenderText.cpp:
        (WebCore::RenderText::collectSelectionRects): Retrieves the writing mode
        from the inlineBoxWrapper instead of the box itself and stores information
        about ruby text elements.

2013-02-19  Michael Saboff  <msaboff@apple.com>

        <rdar://problem/13248473> Crash in strcmp due being passed NULL first argument in PlatformFontData::ctFont()

        Reviewed by Enrica Casucci.

        Add NULL check to the result returned by CGFontGetPostScriptName() before passing it to strcmp().

        No tests as this is already covered by the Alexa tests.

        * platform/graphics/cocoa/FontPlatformDataCocoa.mm:
        (WebCore::FontPlatformData::ctFont):

2013-02-19  Eric Carlson  <eric.carlson@apple.com>

        <rdar://problem/13244060> Remove git conflict marker turds left by iOS WebKit merge #5

        Reviewed by David Kilzer.

        * platform/graphics/avfoundation/MediaPlayerPrivateAVFoundation.h:
        (MediaPlayerPrivateAVFoundation):

2013-02-18  Michael Saboff  <msaboff@apple.com>

        <rdar://problem/13207901> Improper copying of image data in ImageBufferData::getData cause crash in fastMalloc below JSC::FunctionBodyNode::finishParsing

        Reviewed by Oliver Hunt.

        Changed the width and height used for copying via a dispatch'ed call to unpremultitplyScanline to 
        use the destination's width and height so we don't overflow the destination.

        No tests as this is already covered by the Alexa tests.

        * platform/graphics/cg/ImageBufferDataCG.cpp:
        (WebCore::ImageBufferData::getData):

2013-02-15  Benjamin Poulain  <bpoulain@apple.com>

        <rdar://problem/13219348> Remove ancient "default" viewport keyboard

        Reviewed by Joseph Pecoraro.

        Attempt to get rid of a skeleton hidding in our closet.
        The keyword "default" for viewport parameter is not supported by any other engine
        and was kept for an internal Apple Website.

        * dom/ViewportArguments.cpp:
        (WebCore::findSizeValue):
        (WebCore::findScaleValue):
        * dom/ViewportArguments.h:

2013-02-17  Eric Carlson  <eric.carlson@apple.com>

        <rdar://problem/13232023> Remove duplicate coded added by iOS WebKit merge #5

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::requiresTextTrackRepresentation): Remove second copy.
        (WebCore::HTMLMediaElement::setTextTrackRepresentation): Ditto.

        * html/shadow/MediaControlElements.cpp:
        (WebCore::MediaControlTextTrackContainerElement::createSubtrees): Remove duplicate code.
        (WebCore::MediaControlTextTrackContainerElement::updateSizes): Ditto.

        * platform/graphics/MediaPlayerPrivate.h:
        (MediaPlayerPrivateInterface):

2013-02-16  Eric Carlson  <eric.carlson@apple.com>

        Required for <rdar://problem/12044942> TLF: Update captions support to meet Web broadcast requirements

        Merge ToT WebKit r143088.

    2013-02-15  Eric Carlson  <eric.carlson@apple.com>

            [Mac] remove wkCaptionAppearance from WebKitSystemInterface
            https://bugs.webkit.org/show_bug.cgi?id=109996

            Reviewed by Simon Fraser.

            * platform/mac/WebCoreSystemInterface.h:
            * platform/mac/WebCoreSystemInterface.mm:

2013-02-14  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/13208373> Set GCC_WARN_64_TO_32_BIT_CONVERSION=NO for 64-bit archs on all WebKit projects (except ANGLE)

        Merge ToT WebKit r142903.

    2013-02-14  David Kilzer  <ddkilzer@apple.com>

        [Mac] Clean up WARNING_CFLAGS
        <http://webkit.org/b/109747>
        <rdar://problem/13208373>

        Reviewed by Mark Rowe.

        * Configurations/Base.xcconfig: Use
        GCC_WARN_64_TO_32_BIT_CONVERSION to enable and disable
        -Wshorten-64-to-32 rather than WARNING_CFLAGS.

2013-02-11  David Farler  <dfarler@apple.com>

        <rdar://problem/10827587> Make TestWebKitAPI work for iOS
        https://bugs.webkit.org/show_bug.cgi?id=108978

        Merged ToT WebKit r142381 and r142389.

    2013-02-09  David Farler  <dfarler@apple.com>

            Make TestWebKitAPI work for iOS
            https://bugs.webkit.org/show_bug.cgi?id=108978

            Reviewed by David Kilzer.

            Tests already exist - refactor only.

            * WebCore.exp.in: Lumped __ZNK7WebCore4KURL7hasPathEv with related methods.
            * platform/KURL.cpp: Inlined hasPath() into the header
            * platform/KURL.h: Inlined hasPath() into the header

2013-02-11  Andy Estes  <aestes@apple.com>

        <rdar://problem/13121751> Have WebKitSystemInterface call the new unblocking WebFilter SPI once it's in the build

        Reviewed by David Kilzer.

        * WebCore.exp.in: Export _wkFilterUnblockWithCompletion.
        * platform/ios/ContentFilterIOS.mm:
        (WebCore::ContentFilter::requestUnblockAndDispatchIfSuccessful):
        Call wkFilterUnblockWithCompletion() instead of wkFilterAttemptUnblockWithCompletion().
        * platform/ios/WebCoreSystemInterfaceIOS.h: Declare wkFilterUnblockWithCompletion.
        * platform/ios/WebCoreSystemInterfaceIOS.mm: Define wkFilterUnblockWithCompletion.

2013-02-11  David Kilzer  <ddkilzer@apple.com>

        [iOS] Upstream changes to Platform.h

        Merge ToT WebKit r142537.

        * wak/WAKWindow.mm:
        (+[WAKWindow hasLandscapeOrientation]): Replace use of
        IOS_6_0_OR_LATER macro.

2013-02-11  Enrica Casucci  <enrica@apple.com>

        Merge ToT WebKit r142533.

    2013-02-11  Enrica Casucci  <enrica@apple.com>

        Add ENABLE_DELETION_UI to control the use of the deletion UI.
        https://bugs.webkit.org/show_bug.cgi?id=109463.

        Reviewed by Ryosuke Niwa.
        
        This patch adds #if ENABLE(DELETION_UI) in every spot where
        DeleteButtonController is used. This class is now only instantiated
        if the feature is enabled. I've also done some cleanup in the
        DeleteButtonController class, removing unused methods and making
        private some methods only used internally to the class.
        Both DeleteButtonController and DeleteButton classes are now excluded
        from the compilation if the feature is not enabled.

        No new tests, no change of functionality.

        * dom/ContainerNode.cpp:
        (WebCore::ContainerNode::cloneChildNodes):
        * editing/CompositeEditCommand.cpp:
        (WebCore::EditCommandComposition::unapply):
        (WebCore::EditCommandComposition::reapply):
        (WebCore::CompositeEditCommand::apply):
        * editing/DeleteButton.cpp:
        * editing/DeleteButtonController.cpp:
        * editing/DeleteButtonController.h: Some cleanup.
        (WebCore::DeleteButtonController::enabled): Made private.
        * editing/EditCommand.cpp:
        (WebCore::EditCommand::EditCommand):
        * editing/Editor.cpp:
        (WebCore::Editor::notifyComponentsOnChangedSelection):
        (WebCore::Editor::Editor):
        (WebCore::Editor::rangeForPoint):
        (WebCore::Editor::deviceScaleFactorChanged):
        * editing/Editor.h:
        * editing/htmlediting.cpp: avoidIntersectionWithNode is
        used only if the feature is enabled.
        * editing/htmlediting.h:
        * editing/markup.cpp:
        (WebCore::createMarkup):
        (WebCore::createFragmentFromNodes):
        * rendering/RenderTable.cpp: Removed unnecessary include
        fo DeleteButtonController.h

2013-02-11  David Farler  <dfarler@apple.com>

        <rdar://problem/13183489> Source/WebCore/DerivedSources.make should use SDK_FLAGS and an expanded SDKROOT when getting defines from wtf/Platform.h
        https://bugs.webkit.org/show_bug.cgi?id=109324

        Merged ToT WebKit r142546.

    2013-02-11  David Farler  <dfarler@apple.com>

            Make WebCore Derived Sources work with SDK identifiers too
            https://bugs.webkit.org/show_bug.cgi?id=109324

            Reviewed by Sam Weinig.

            * WebCore.xcodeproj/project.pbxproj: Pass SDKROOT to make for DerivedSources.make

2013-02-10  Joseph Pecoraro  <pecoraro@apple.com>

        Remove some dead iOS only code. This should have been removed alongside
        puzzlebox r212139 when the IDL attribute was removed. The condition can
        never be true now.

        Reviewed by Dan Bernstein.

        * bindings/scripts/CodeGeneratorObjC.pm:
        (GenerateImplementation):

2013-02-08  Joseph Pecoraro  <pecoraro@apple.com>

        <rdar://problem/9489229> Implement Page Visibility API (60576) (html5test.com)

        Reviewed by Ian Henderson.

        The PageVisibility is automatically set to "hidden" and "visible" when
        the WebView is in a visible window and is not hidden. Here we add the
        equivalent of -[NSWindow isVisible] to WAKWindow. We rely on the
        containing UIView to set the WAKWindow's visible state when it is
        being put into, or taken out of, the view hierarchy. Also add the
        equivalent of -[NSView isHiddenOrHasHiddenAncestor] to WAKView.

        PageVisibility is covered by existing tests.

        * wak/WAKWindow.h:
        * wak/WAKWindow.mm:
        (-[WAKWindow isVisible]):
        (-[WAKWindow setVisible:]):
        When a WAKWindow changes visibility it sends out a notification.

        * WebCore.exp.in:
        Export the notification key for WebKit to use.

        * wak/WAKView.h:
        * wak/WAKView.mm:
        (-[WAKView isHiddenOrHasHiddenAncestor]):
        Recursively check if our view is hidden or an ancestor is hidden.

2013-02-08  Joseph Pecoraro  <pecoraro@apple.com>

        <rdar://problem/9489229> Implement Page Visibility API (60576) (html5test.com)

        Reviewed by Ian Henderson.

        * Configurations/FeatureDefines.xcconfig:

2013-02-06  Joseph Pecoraro  <pecoraro@apple.com>

        <rdar://problem/13028628> Disable FULLSCREEN_API on iOS

        Merge OpenSource r141477.

    2013-01-31  Joseph Pecoraro  <pecoraro@apple.com>

            Disable ENABLE_FULLSCREEN_API on iOS
            https://bugs.webkit.org/show_bug.cgi?id=108250

            Reviewed by Benjamin Poulain.

            * Configurations/FeatureDefines.xcconfig:

2013-02-10  David Kilzer  <ddkilzer@apple.com>

        Miscellaneous header clean-up

        Reviewed by Dan Bernstein.

        * platform/text/TextBreakIteratorICU.cpp: Remove unused include
        of WebCoreThread.h.

2013-02-07  Benjamin Poulain  <bpoulain@apple.com>

        Merge OpenSource r142163.

    2013-02-07  Benjamin Poulain  <bpoulain@apple.com>

        Upstream iOS isWebThread() and isUIThread()
        https://bugs.webkit.org/show_bug.cgi?id=109130

        Reviewed by Sam Weinig.

        * bindings/objc/WebScriptObject.mm:
        (+[WebScriptObject initialize]):
        * platform/mac/SharedBufferMac.mm:
        (+[WebCoreSharedBufferData initialize]):
        #ifdef out the legacy initialization as it is not correct when
        using a WebThread.

2013-02-06  Dima Gorbik  <dgorbik@apple.com>

        Required for <rdar://problem/12044942> TLF: Update captions support to meet Web broadcast requirements

        Merged ToT WebKit r141529, r141795, r141806, r141817, r142043.

    2013-02-06  Dima Gorbik  <dgorbik@apple.com>

        Store the language internally instead of using lang attribute for WebVTT nodes
        https://bugs.webkit.org/show_bug.cgi?id=108858

        Reviewed by Eric Carlson.

        Only language webvtt elements should have a lang attribute so we have to store
        the language internally in the element. Refactored the code to make 
        computeInheritedLanguage virtual.

        Existing tests were modified to cover this case.

        * css/SelectorChecker.cpp:
        (WebCore::SelectorChecker::checkOne):
        * html/track/WebVTTElement.cpp:
        (WebCore::WebVTTElement::WebVTTElement):
        (WebCore::WebVTTElement::cloneElementWithoutAttributesAndChildren):
        (WebCore::WebVTTElement::createEquivalentHTMLElement): clone the internal language property.
        * html/track/WebVTTElement.h:
        (WebCore::WebVTTElement::language):
        (WebCore::WebVTTElement::setLanguage):
        * html/track/WebVTTParser.cpp: only set the lang attribute for language objects.
        (WebCore::WebVTTParser::constructTreeFromToken):

    2013-02-04  Dima Gorbik  <dgorbik@apple.com>

        WebVTT <i>, <b> and <u> elements should have default styles
        https://bugs.webkit.org/show_bug.cgi?id=107214

        Reviewed by Darin Adler.

        Added default styles for basic webvtt object types.

        Test: media/track/track-css-matching-default.html

        * css/mediaControls.css:
        (video::-webkit-media-text-track-container b):
        (video::-webkit-media-text-track-container u):
        (video::-webkit-media-text-track-container i):

    2013-02-04  Dima Gorbik  <dgorbik@apple.com>

        class="cue" is getting some default style
        https://bugs.webkit.org/show_bug.cgi?id=108752

        Reviewed by Dean Jackson.
        
        The value variable inside the selector is used to store different information depending on the 
        type of the selector so we have to check explicitly that the selector we apply filtering to 
        matches a pseudo element.
        
        Existing tests modified to cover this case.

        * css/RuleSet.cpp:
        (WebCore::determinePropertyWhitelistType):

    2013-02-04  Dima Gorbik  <dgorbik@apple.com>

        Implemet :lang() pseudo class support for the WebVTT ::cue pseudo element
        https://bugs.webkit.org/show_bug.cgi?id=105478

        Reviewed by Antti Koivisto.

        In WebVTT lang is preprocessed and stored in the lang attribute of the element, 
        so we access it instead of walking up the tree the way it is done in HTML.

        Existing tests were modified to cover this case.

        * css/SelectorChecker.cpp:
        (WebCore::SelectorChecker::checkOne):

    2013-01-31  Dima Gorbik  <dgorbik@apple.com>

        REGRESSION(r140231): media track layout tests crashing
        https://bugs.webkit.org/show_bug.cgi?id=107579

        Reviewed by Eric Carlson.

        We were using non-standard element names with HTMLElement, which made v8 try to cast
        WebVTTElements to HTMLUnknownElements which was not possible. Subclassing Element instead
        of HTMLElement, though this requires building HTMLElements from WebVTTElements for creating
        a DOM tree. The code has been refactored to move WebVTT node type to QuialifiedName mappings 
        inside the WebVTTElement class. All WebVTTElements in the shadow dom tree now are in the 
        namespace defined by 'NullAtom'. This prevents regular styles from being applied to <b>, <i>
        and similar tags. Those have to be styled separately without reusing existing QualifiedNames
        and their styles. https://bugs.webkit.org/show_bug.cgi?id=107214

        Unskipping tests to cover this.

        * css/SelectorChecker.cpp:
        (WebCore::SelectorChecker::checkOne):
        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::collectMatchingRules):
        (WebCore::StyleResolver::canShareStyleWithElement):
        * html/track/TextTrackCue.cpp:
        (WebCore::TextTrackCue::copyWebVTTNodeToDOMTree):
        (WebCore::TextTrackCue::getCueAsHTML):
        (WebCore::TextTrackCue::createCueRenderingTree):
        (WebCore::TextTrackCue::markFutureAndPastNodes):
        * html/track/TextTrackCue.h:
        (WebCore::TextTrackCue::cueShadowPseudoId):
        * html/track/WebVTTElement.cpp:
        (WebCore::nodeTypeToTagName): get a QualifiedName to use in the shadow DOM tree.
        (WebCore::WebVTTElement::WebVTTElement):
        (WebCore::WebVTTElement::create):
        (WebCore::WebVTTElement::cloneElementWithoutAttributesAndChildren):
        (WebCore::WebVTTElement::createEquivalentHTMLElement): create an HTMLElement to use in the DOM tree.
        * html/track/WebVTTElement.h:
        (WebCore::WebVTTElement::setWebVTTNodeType):
        (WebCore::WebVTTElement::webVTTNodeType):
        (WebCore::WebVTTElement::isPastNode):
        (WebCore::WebVTTElement::setIsPastNode):
        (WebCore::WebVTTElement::voiceAttributeName):
        * html/track/WebVTTParser.cpp:
        (WebCore::tokenToNodeType): determine a WebVTT node type for the token.
        (WebCore::WebVTTParser::constructTreeFromToken):

2013-02-06  Benjamin Poulain  <bpoulain@apple.com>

        Remove the frame argument from webView:didReceiveViewportArguments:

        Reviewed by Ian Henderson.

        Get rid of dictionaryForViewportArguments() from WebCore. This function should live in the WebKit layer.

        * WebCore.exp.in:
        * page/Frame.h:
        (Frame):
        * page/mac/FrameMac.mm:
        (WebCore::Frame::rangeImage):

2013-02-05  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/13097981> PEP Web: consider using the same secure text Timer from open source. (RenderText.cpp)

        Adopt open source WebKit password echo code, remove iOS implementation.

        Reviewed by Sam Weinig.

        * dom/CharacterData.cpp:
        (WebCore::CharacterData::insertData): remove iOS code for handling last character behavior.
        (WebCore::CharacterData::deleteData): ditto.
        (WebCore::CharacterData::setDataAndUpdate): ditto.
        * dom/CharacterData.h:
        (CharacterData):
        * dom/Text.cpp:
        (WebCore::Text::updateTextRenderer):
        * dom/Text.h:
        (Text):
        * editing/DeleteFromTextNodeCommand.cpp:
        (WebCore::DeleteFromTextNodeCommand::doUnapply):
        * editing/InsertIntoTextNodeCommand.cpp:
        (WebCore::InsertIntoTextNodeCommand::doApply):
        (WebCore::InsertIntoTextNodeCommand::doReapply):
        * editing/SplitTextNodeCommand.cpp:
        (WebCore::SplitTextNodeCommand::doUnapply):
        * rendering/RenderText.cpp:
        (WebCore::RenderText::RenderText):
        (WebCore::RenderText::removeAndDestroyTextBoxes):
        (WebCore::RenderText::setTextInternal): adopt open source's code to momentarily reveal the
            last typed character.
        (WebCore):
        (WebCore::RenderText::momentarilyRevealLastTypedCharacter):
        * rendering/RenderText.h:
        (RenderText):

2013-02-05  Enrica Casucci  <enrica@apple.com>

        Merging ToT WebKit r141937 and making the relevant changes
        for iOS, which include removing baseWritingDirectionForSelectionStart
        from EditorIOS.mm and baseWritingDirectionForSelectionStartInternal.
        <rdar://problem/13098252>.

        Reviewed by Benjamin Poulain.

        No new tests. No functionality change.

        * editing/Editor.cpp:
        (WebCore::Editor::setBaseWritingDirection): Doesn't use the
        internal version of baseWritingDirectionForSelectionStart.
        (WebCore::Editor::baseWritingDirectionForSelectionStart): Added.
        * editing/Editor.h:
        * editing/ios/EditorIOS.mm: Removed baseWritingDirectionForSelectionStart.
        * editing/mac/EditorMac.mm: Removed baseWritingDirectionForSelectionStart.

2013-02-05  Enrica Casucci  <enrica@apple.com>

        Merge ToT WebKit r141799.

    2013-02-04  Enrica Casucci  <enrica@apple.com>

        Add specific EditActions for Bold and Italic commands.
        https://bugs.webkit.org/show_bug.cgi?id=108842.
        <rdar://problem/13098252>

        This change is required on iOS where we need to
        identify the command in order to display the correct
        message in the undo popup. It is also in line with
        what we do for underline, which already has its own
        separate EditAction.
        
        Reviewed by Ryosuke Niwa.

        No new tests. No behavior change.

        * editing/EditAction.h:
        * editing/EditorCommand.cpp:
        (WebCore::executeToggleBold):
        (WebCore::executeToggleItalic):

2013-02-04  Enrica Casucci  <enrica@apple.com>

        Merge ToT WebKit r141513.
        
    2013-01-31  Enrica Casucci  <enrica@apple.com>

        Mac: Editor::baseWritingDirectionForSelectionStart should return WritingDirection instead of NSWritingDirection.
        https://bugs.webkit.org/show_bug.cgi?id=108519.

        Reviewed by Sam Weinig.

        No new tests, no change in behavior.

        There is no need to use AppKit types here.
        baseWritingDirectionForSelectionStart now returns WritingDirection and
        WebHTMLView toggleWritingDirection has been modified accordingly.
        
        * editing/Editor.h:
        * editing/mac/EditorMac.mm:
        (WebCore::Editor::baseWritingDirectionForSelectionStart):

2013-02-02  David Kilzer  <ddkilzer@apple.com>

        Upstream iOS FeatureDefines

        Merge ToT WebKit r141699.

        * Configurations/FeatureDefines.xcconfig:
        - Move iOS features near the top of the file.
        - Define FEATURE_DEFINES_iphoneos and
          FEATURE_DEFINES_iphonesimulator.
        - Do not set ENABLE_PDFKIT_PLUGIN on iOS.

    2013-02-02  David Kilzer  <ddkilzer@apple.com>

        Upstream iOS FeatureDefines
        <http://webkit.org/b/108753>

        Reviewed by Anders Carlsson.

        * Configurations/FeatureDefines.xcconfig:
        - ENABLE_DEVICE_ORIENTATION: Add iOS configurations.
        - ENABLE_PLUGIN_PROXY_FOR_VIDEO: Ditto.
        - FEATURE_DEFINES: Add ENABLE_PLUGIN_PROXY_FOR_VIDEO.  Add
          PLATFORM_NAME variant to reduce future merge conflicts. 

2013-02-01  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/13128478> PEP Web: during Alexa test, sometimes the whole document of orange.fr is never released.

        Merged ToT WebKit r141667.

    2013-02-01  Yongjun Zhang  <yongjun_zhang@apple.com>

            Document is never released if an image's src attribute is changed to a url blocked by content-security-policy.
            https://bugs.webkit.org/show_bug.cgi?id=108545

            If we just scheduled an error event due to an null newImage, we should not cancel it when newImage and oldImage
            is not the same.  Otherwise we will ref the sourceElement in updateHasPendingEvent (m_hasPendingErrorEvent is true)
            but never deref it since we already cancelled the error event.

            Reviewed by Alexey Proskuryakov.

            Test: fast/images/image-error-event-not-firing.html

            * loader/ImageLoader.cpp:
            (WebCore::ImageLoader::updateFromElement): don't cancel error event if newImage is null, we want the
                error event to fire.

2013-01-30  Andy Estes  <aestes@apple.com>

        <rdar://problem/12886086> Need to adopt WebContentFilter SPI in WebKit to support unblocking pages

        Reviewed by Joseph Pecoraro.

        The blocked page generated by WebContentAnalysis will trigger a
        navigation to <x-apple-content-filter://unblock> when the user clicks
        the 'unblock' button. It's WebKit's responsibility to call into the
        WebFilterEvaluator SPI for requesting a page be unblocked in response
        to this navigation.

        This patch implements support for this by intercepting the navigation,
        ignoring it (so that the blocked page remains displayed while
        webfilterd processes the unblock request asynchronously), and then
        reloading the original request if the unblock was successful.

        * WebCore.exp.in: Export _wkFilterAttemptUnblockWithCompletion.
        * WebCore.xcodeproj/project.pbxproj: Add ContentFilterIOS.mm and
        otherwise let Xcode have its way with the project file (it appears to
        be reordering entries and removing references to nonexistent files).
        * loader/DocumentLoader.cpp:
        (WebCore::DocumentLoader::setContentFilterForBlockedLoad): ASSERT()
        that the ContentFilter passed in did in fact block a load and then
        store a reference to it.
        (WebCore::DocumentLoader::handleContentFilterRequest): If
        m_contentFilterForBlockedLoad is non-NULL and the request is to
        <x-apple-content-filter://unblock>, request that the blocked page be
        unblocked. Pass a Function bound to m_frame->loader()->reload() to be
        executed later if the unblock is successful.
        * loader/DocumentLoader.h:
        * loader/MainResourceLoader.cpp:
        (WebCore::MainResourceLoader::dataReceived): If the load was blocked,
        call DocumentLoader::setContentFilterForBlockedLoad().
        (WebCore::MainResourceLoader::didFinishLoading): Ditto.
        * loader/PolicyChecker.cpp:
        (WebCore::PolicyChecker::checkNavigationPolicy): If the navigation is
        an unblock request for the content filter, ignore the navigation so
        that the blocked page remains displayed while the unblock request is
        being processed asynchronously.
        * platform/ContentFilter.h:
        * platform/ios/ContentFilterIOS.mm: Added.
        (WebCore::ContentFilter::scheme): Return the scheme used for content
        filter requests (x-apple-content-filter).
        (WebCore::ContentFilter::requestUnblockAndDispatchIfSuccessful): Call
        wkFilterAttemptUnblockWithCompletion(), passing a block that dispatches
        the passed-in function on the web thread if the unblock is successful.
        * platform/ios/WebCoreSystemInterfaceIOS.h: Declare wkFilterAttemptUnblockWithCompletion.
        * platform/ios/WebCoreSystemInterfaceIOS.mm: Define wkFilterAttemptUnblockWithCompletion.

2013-01-31  Jer Noble  <jer.noble@apple.com>

        <rdar://problem/13049381> REGRESSION(11A254-11A257): Crash in WebCore::Frame::settings with AdSheet content

        Reviewed by Joseph Pecoraro.

        Merge fix. Replace references to m_document with m_scriptExecutionContext, as m_document was removed in ToT.

        * Modules/webaudio/AudioContext.cpp:
        (WebCore::AudioContext::document):
        (WebCore::AudioContext::hasDocument):
        * Modules/webaudio/AudioContext.h:
        (AudioContext):

2013-01-31  Pratik Solanki  <psolanki@apple.com>

        Fix assertions in debug builds. On iOS its okay to access from the main UI thread or the web
        thread.

        Reviewed by David Kilzer.

        * dom/Node.h:
        (WebCore::Node::setParentOrHostNode):
        (WebCore::Node::parentOrHostNode):
        * platform/network/cf/NetworkStorageSessionCFNet.cpp:
        (WebCore::defaultNetworkStorageSession):
        * storage/StorageThread.cpp:
        (WebCore::activeStorageThreads):
        (WebCore::StorageThread::StorageThread):

2013-01-31  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/13120718> Warning: Multiple build commands for output file .. ContentFilter.h

        Reviewed by Dan Bernstein.

        Remove duplicate entry added during the merge.

        * WebCore.xcodeproj/project.pbxproj:

2013-01-30  Andy Estes  <aestes@apple.com>

        Merged ToT WebKit r141334.

    2013-01-30  Andy Estes  <aestes@apple.com>

        ContentFilter should be a ref-counted class
        https://bugs.webkit.org/show_bug.cgi?id=108392

        Reviewed by David Kilzer.

        * loader/MainResourceLoader.h:
        (MainResourceLoader): Store a RefPtr to m_contentFilter.
        * platform/ContentFilter.h: Inherit from RefCounted<ContentFilter>.
        * platform/mac/ContentFilterMac.mm:
        (WebCore::ContentFilter::create): Return a PassRefPtr.

2013-01-29  Benjamin Poulain  <bpoulain@apple.com>

        <rdar://problem/8268339> html5test.com: Enable progress element on iOS

        Reviewed by David Kilzer.

        * DerivedSources.make: We were ignoring all the features defines when precompiling
        the default CSS stylesheet. This adds a -D for GCC for each feature defined.

        * rendering/RenderThemeIOS.cpp:
        (WebCore::RenderThemeIOS::animationRepeatIntervalForProgressBar):
        (WebCore::RenderThemeIOS::animationDurationForProgressBar):
        We do not animate progress bars on iOS, which is great for battery.

        (WebCore::RenderThemeIOS::paintProgressBar):
        Programmatically render progress bars like the native UIKit ones.
        * rendering/RenderThemeIOS.h:
        (RenderThemeIOS):

2013-01-30  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/12927168> iOS WebKit merge #5: stabilizing merge branch to ToT r140978 (starts Wed, Jan 17)

        Merge up to OpenSource WebKit r140978.

2013-01-30  David Kilzer  <ddkilzer@apple.com>

        BUILD FIX: Make WebCorePrefix.h build on iOS

        Merge ToT WebKit r141254.

        * WebCorePrefix.h:
        - Remove duplicate include of <CoreServices/CoreServices.h> in
          iOS source.

    2013-01-30  David Kilzer  <ddkilzer@apple.com>

        BUILD FIX: Make WebCorePrefix.h build on iOS
        <http://webkit.org/b/108224>

        Reviewed by Sam Weinig.

        * WebCorePrefix.h:
        - Include <wtf/Platform.h>.
        - Do not include <CoreServices/CoreServices.h> on iOS.
        - Include <Foundation/Foundation.h> instead of <Cocoa/Cocoa.h>
          on iOS.

2013-01-29  Andy Estes  <aestes@apple.com>

        Add two files that were meant to be part of r1182552.

        * platform/ContentFilter.h: Added.
        * platform/mac/ContentFilterMac.mm: Added.

2013-01-28  Andy Estes  <aestes@apple.com>

        Merged ToT WebKit r140875.

    2013-01-25  Andy Estes  <aestes@apple.com>

        Wrap content filtering code in an object
        https://bugs.webkit.org/show_bug.cgi?id=107914

        Reviewed by Alexey Proskuryakov.

        Content filtering code currently requires explicit and somewhat complex
        lifetime management of the WebFilterEvaluator object for correct
        behavior. Simplify this by wrapping WebFilterEvaluator in an object and
        have MainResourceLoader implicitly manage its lifetime by holding it in
        an OwnPtr.

        This change has benefits other than the simplified lifetime management.
        It removes direct calls into WebKitSystemInterface from the loader, and
        it allows us to keep a strong reference to the replacement data
        returned from wkFilterAddData() and wkFilterDataComplete() rather than
        relying on it being autoreleased.

        * WebCore.exp.in: Updated to match changes in WebCoreSystemInterface.
        * WebCore.xcodeproj/project.pbxproj: Added new files.
        * loader/MainResourceLoader.cpp:
        (WebCore::MainResourceLoader::MainResourceLoader): Removed unneeded initialization.
        (WebCore::MainResourceLoader::~MainResourceLoader): Removed an unneeded ASSERT().
        (WebCore::MainResourceLoader::cancel): Removed unneeded wkFilterRelease().
        (WebCore::MainResourceLoader::responseReceived): Created a
        ContentFilter object rather than calling wkFilterCreateInstance().
        (WebCore::MainResourceLoader::dataReceived): Rewrote content filtering
        logic in terms of the wrapper object. Removed any explicit lifetime
        management.
        (WebCore::MainResourceLoader::didFinishLoading): Ditto.
        (WebCore::MainResourceLoader::notifyFinished): Removed unneeded wkFilterRelease().
        * loader/MainResourceLoader.h:
        * platform/ContentFilter.h: Added.
        * platform/mac/ContentFilterMac.mm: Added.
        (WebCore::ContentFilter::create):
        (WebCore::ContentFilter::ContentFilter):
        (WebCore::ContentFilter::isEnabled): Returned the result of wkFilterIsManagedSession().
        (WebCore::ContentFilter::addData): Called wkFilterAddData() and stored
        the resulting NSData in m_replacementData.
        (WebCore::ContentFilter::finishedAddingData): Called wkFilterDataComplete()
        and stored the resulting NSData in m_replacementData.
        (WebCore::ContentFilter::needsMoreData): Returned the result of wkFilterIsBuffering().
        (WebCore::ContentFilter::didBlockData): Returned the result of wkFilterWasBlocked().
        (WebCore::ContentFilter::getReplacementData): Returned the data stored in m_replacementData.
        * platform/mac/WebCoreSystemInterface.h: Updated to reflect changes in WKSI.
        * platform/mac/WebCoreSystemInterface.mm: Ditto.

        * WebCore.exp.in:
        * WebCore.xcodeproj/project.pbxproj:
        * loader/MainResourceLoader.cpp:
        (WebCore::MainResourceLoader::MainResourceLoader):
        (WebCore::MainResourceLoader::~MainResourceLoader):
        (WebCore::MainResourceLoader::cancel):
        (WebCore::MainResourceLoader::responseReceived):
        (WebCore::MainResourceLoader::dataReceived):
        (WebCore::MainResourceLoader::didFinishLoading):
        (WebCore::MainResourceLoader::notifyFinished):
        * loader/MainResourceLoader.h:
        (MainResourceLoader):
        * platform/ContentFilter.h: Added.
        (WebCore):
        (ContentFilter):
        * platform/mac/ContentFilterMac.mm: Added.
        (WebCore):
        (WebCore::ContentFilter::create):
        (WebCore::ContentFilter::ContentFilter):
        (WebCore::ContentFilter::isEnabled):
        (WebCore::ContentFilter::addData):
        (WebCore::ContentFilter::finishedAddingData):
        (WebCore::ContentFilter::needsMoreData):
        (WebCore::ContentFilter::didBlockData):
        (WebCore::ContentFilter::getReplacementData):
        * platform/mac/WebCoreSystemInterface.h:
        * platform/mac/WebCoreSystemInterface.mm:

2013-01-28  Andy Estes  <aestes@apple.com>

        Merged ToT WebKit r140366.

    2013-01-17  Andy Estes  <aestes@apple.com>

        Add a USE() macro for content filtering code
        https://bugs.webkit.org/show_bug.cgi?id=107098

        Reviewed by Mark Rowe.

        * WebCore.exp.in: Use USE(CONTENT_FILTERING).
        * loader/MainResourceLoader.cpp:
        (WebCore::MainResourceLoader::MainResourceLoader): Ditto.
        (WebCore::MainResourceLoader::~MainResourceLoader): Ditto.
        (WebCore::MainResourceLoader::cancel): Ditto.
        (WebCore::MainResourceLoader::responseReceived): Ditto.
        (WebCore::MainResourceLoader::dataReceived): Ditto.
        (WebCore::MainResourceLoader::didFinishLoading): Ditto.
        (WebCore::MainResourceLoader::notifyFinished): Ditto.
        * loader/MainResourceLoader.h:
        (MainResourceLoader): Ditto.
        * platform/mac/WebCoreSystemInterface.h: Ditto.
        * platform/mac/WebCoreSystemInterface.mm: Ditto.

2013-01-28  Joseph Pecoraro  <pecoraro@apple.com>

        Remove unused iOS method GraphicsLayer::setOffsetFromRendererWithoutDisplay.

        Reviewed by Simon Fraser.

        * platform/graphics/GraphicsLayer.h:

2013-01-28  Benjamin Poulain  <bpoulain@apple.com>

        Un-#ifdef the size compile assertion of RenderText

        Reviewed by Simon Fraser.

        Adapt the size check to iOS instead of disabling it.

        * rendering/RenderText.cpp:
        (WebCore):
        (SameSizeAsRenderText):

2013-01-09  Benjamin Poulain  <bpoulain@apple.com>

        Add support for Tap Highlight border radius

        Reviewed by Joseph Pecoraro.

        * WebCore.exp.in:
        * bindings/objc/DOMUIKitExtensions.mm:
        (-[DOMNode borderRadii]): Move most of the code to RenderBox so that it
        can be used by the WebProcess without using the Objective-C bindings.

        Other changes:
        -Use the Objective-C Array literal for initializating the arrays.
        -Generate a single empty NSValue and use if 4 times instead of create 4 of them.

        * rendering/RenderBox.cpp:
        (WebCore::RenderBox::borderRadii): This is the code from [DOMNode borderRadii]
        adapted to use LayoutUnit.
        * rendering/RenderBox.h:
        (RenderBox):

2013-01-28  Joseph Pecoraro  <pecoraro@apple.com>

        Required for <rdar://problem/12044942> TLF: Update captions support to meet Web broadcast requirements

        Merged ToT WebKit 137187.

   2012-12-10  Eric Carlson  <eric.carlson@apple.com>
   
        Unreviewed build fix after r137167.
        
        * WebCore.xcodeproj/project.pbxproj: Add InbandTextTrackPrivate.h to framework private 
            headers.

2013-01-28  Eric Carlson  <eric.carlson@apple.com>

        Required for <rdar://problem/12044942> TLF: Update captions support to meet Web broadcast requirements

        Merged ToT WebKit r137171.

    2012-12-10  Adam Klein  <adamk@chromium.org>

            In InbandTextTrackPrivate, return emptyAtoms instead of emptyString() by default.

            Unreviewed build fix.

            * platform/graphics/InbandTextTrackPrivate.h:
            (WebCore::InbandTextTrackPrivate::label):
            (WebCore::InbandTextTrackPrivate::language):

2013-01-28  Eric Carlson  <eric.carlson@apple.com>

        Required for <rdar://problem/12044942> TLF: Update captions support to meet Web broadcast requirements

        Merged ToT WebKit r137167.

    2012-12-10  Adam Klein  <adamk@chromium.org>

            cr-win build fix after r137161.

            Unreviewed.

            * platform/graphics/MediaPlayer.h: Replace forward-decl of
            InbandTextTrackPrivate with #include as the definition is required.

2013-01-28  Eric Carlson  <eric.carlson@apple.com>

        Required for <rdar://problem/12044942> TLF: Update captions support to meet Web broadcast requirements

        Merged ToT WebKit r137161.

    2012-12-10  Eric Carlson  <eric.carlson@apple.com>

            Add support for in-band text tracks to Mac port
            https://bugs.webkit.org/show_bug.cgi?id=103663

            Reviewed by Sam Weinig.

            Test: media/track/track-in-band.html

            * GNUmakefile.list.am: Move InbandTextTrackPrivate.h to platform/graphics. Add InbandTextTrackPrivateClient.h.
            * Target.pri: Ditto.
            * WebCore.gypi: Ditto.

            * WebCore.xcodeproj/project.pbxproj: Add new files.

            * html/HTMLMediaElement.cpp:
            (WebCore::HTMLMediaElement::setReadyState): No need to call processInbandTextTracks, in-band tracks
                are now registered by the media engine as they are discovered.
            (WebCore::HTMLMediaElement::mediaPlayerDidAddTrack): New, called by the media player when a new
                in-band track is found.
            (WebCore::HTMLMediaElement::mediaPlayerDidRemoveTrack): New, called by the media player when an
                in-band track goes away.
            * html/HTMLMediaElement.h:

            * html/track/InbandTextTrack.cpp:
            (WebCore::InbandTextTrack::InbandTextTrack): Use m_private instead of tracksPrivate because
                it is zeroed during assignment.

            * platform/graphics/MediaPlayer.cpp:
            (WebCore::MediaPlayer::addTextTrack): New MediaPlayerClient method to allow MediaPlayerPrivate subclasses
                to add a new in-band track.
            (WebCore::MediaPlayer::removeTextTrack): New MediaPlayerClient method to allow MediaPlayerPrivate subclasses
                to remove a new in-band track.
            * platform/graphics/MediaPlayer.h:
            * platform/graphics/MediaPlayerPrivate.h:

            * platform/graphics/avfoundation/InbandTextTrackPrivateAVF.cpp: Added.
            (WebCore::InbandTextTrackPrivateAVF::InbandTextTrackPrivateAVF):
            (WebCore::InbandTextTrackPrivateAVF::~InbandTextTrackPrivateAVF):
            (WebCore::InbandTextTrackPrivateAVF::processCueAttributes): Convert an attribute string into WebVTT 
                cue setting and content strings.
            (WebCore::InbandTextTrackPrivateAVF::processCue): Process a new cue.
            (WebCore::InbandTextTrackPrivateAVF::disconnect): Clear member variables.
            (WebCore::InbandTextTrackPrivateAVF::resetCueValues): Reset cue values to defaults.
            (WebCore::InbandTextTrackPrivateAVF::setMode): Set track mode and call player's trackModeChanged.
            * platform/graphics/avfoundation/InbandTextTrackPrivateAVF.h: Added.

            * platform/graphics/avfoundation/MediaPlayerPrivateAVFoundation.cpp: Initialize 
                m_inbandTrackConfigurationPending.
            (WebCore::MediaPlayerPrivateAVFoundation::MediaPlayerPrivateAVFoundation):
            (WebCore::MediaPlayerPrivateAVFoundation::seekCompleted): Flush the currently accumulating
                cue so it doesn't get the wrong duration.
            (WebCore::MediaPlayerPrivateAVFoundation::dispatchNotification): Handle InbandTracksNeedConfiguration.
            (WebCore::MediaPlayerPrivateAVFoundation::flushCurrentCue): New, pass the current cue up to the client.
            (WebCore::MediaPlayerPrivateAVFoundation::configureInbandTracks): Configure in-band tracks.
            (WebCore::MediaPlayerPrivateAVFoundation::trackModeChanged): Schedule a call to configureInbandTracks.
            * platform/graphics/avfoundation/MediaPlayerPrivateAVFoundation.h:

            * platform/graphics/avfoundation/objc/InbandTextTrackPrivateAVFObjC.h: Added.
            * platform/graphics/avfoundation/objc/InbandTextTrackPrivateAVFObjC.mm: Added.
            (WebCore::InbandTextTrackPrivateAVFObjC::InbandTextTrackPrivateAVFObjC):
            (WebCore::InbandTextTrackPrivateAVFObjC::disconnect):
            (WebCore::InbandTextTrackPrivateAVFObjC::kind): Return track kind.
            (WebCore::InbandTextTrackPrivateAVFObjC::label): Return track label.
            (WebCore::InbandTextTrackPrivateAVFObjC::language): Return track language.
            (WebCore::InbandTextTrackPrivateAVFObjC::isDefault): 
            * platform/graphics/avfoundation/objc/MediaPlayerPrivateAVFoundationObjC.h:
            (MediaPlayerPrivateAVFoundationObjC):
            (WebCore::MediaPlayerPrivateAVFoundationObjC::playerItem):
            * platform/graphics/avfoundation/objc/MediaPlayerPrivateAVFoundationObjC.mm:
            (WebCore::MediaPlayerPrivateAVFoundationObjC::MediaPlayerPrivateAVFoundationObjC): Initialize m_currentTrack.
            (WebCore::MediaPlayerPrivateAVFoundationObjC::cancelLoad): Clear m_legibleOutput.
            (WebCore::MediaPlayerPrivateAVFoundationObjC::tracksChanged): Create and initialize m_legibleOutput.
            (WebCore::MediaPlayerPrivateAVFoundationObjC::processTextTracks): Called when the player item's
                "tracks" changes, add and remove in-band text tracks as necessary.
            (WebCore::MediaPlayerPrivateAVFoundationObjC::processCue): Pass an attributed string to the current 
                track to be processed.
            (WebCore::MediaPlayerPrivateAVFoundationObjC::setCurrentTrack): Tell AVFoundation to select an in-band track.
            (WebCore::MediaPlayerPrivateAVFoundationObjC::currentTrack): Return the current track.
            (-[WebCoreAVFMovieObserver legibleOutput:didOutputAttributedStrings:nativeSampleBuffers:forItemTime:]): Legible
                output delegate.

2013-01-28  Eric Carlson  <eric.carlson@apple.com>

        Required for <rdar://problem/12044942> TLF: Update captions support to meet Web broadcast requirements

        Merged ToT WebKit r136991.

    2012-12-07  Dima Gorbik  <dgorbik@apple.com>

            Implement general ::cue pseudo element for the <video>
            https://bugs.webkit.org/show_bug.cgi?id=104043

            Reviewed by Eric Carlson.

            Implemented the ::cue pseudo element to be able to style all WebVTT cues.
            Added the subcontainer with a '::cue' pseudoId in between the TextTrackContainerElement and WebVTT nodes to separate
            user agent default styles from user defined styles for the cue elements.

            Test: media/track/track-css-all-cues.html

            * css/CSSSelector.cpp: ::cue pseudo selector doesn't have a valid prefix but should be allowed in the user-agent stylesheet.
            (WebCore::CSSSelector::parsePseudoType):
            * html/shadow/MediaControlElements.cpp:
            (WebCore):
            (WebCore::MediaControlTextTrackContainerElement::createSubtrees): create a subcontainer and set its pseudoId to '::cue'.
            (WebCore::MediaControlTextTrackContainerElement::updateDisplay): append WebVTT nodes to the newly created subcontainer.
            * html/shadow/MediaControlElements.h:
            (MediaControlTextTrackContainerElement):
            * html/shadow/MediaControls.cpp:
            (WebCore::MediaControls::createTextTrackDisplay): initiate creating subtrees for the MediaControlTextTrackContainerElement.
            * html/shadow/MediaControlsChromium.cpp:
            (WebCore::MediaControlsChromium::createTextTrackDisplay):

2013-01-28  Eric Carlson  <eric.carlson@apple.com>

        Required for <rdar://problem/12044942> TLF: Update captions support to meet Web broadcast requirements

        Merged ToT WebKit r136978.

    2012-12-07  Eric Carlson  <eric.carlson@apple.com>

            Captions menu doesn't update to track changes
            https://bugs.webkit.org/show_bug.cgi?id=104393

            Reviewed by Dean Jackson.

            Flag the captions menu as needing an update when tracks are added or removed. Don't actually
            change the menu until it needs to be displayed.

            No new tests, media/video-controls-captions-trackmenu.html was updated to test this.

            * html/HTMLMediaElement.cpp:
            (WebCore::HTMLMediaElement::addTextTrack): Call closedCaptionTracksChanged().
            (WebCore::HTMLMediaElement::didRemoveTrack): Ditto.
            (WebCore::HTMLMediaElement::configureTextTracks): Ditto.

            * html/shadow/MediaControlElements.cpp:
            (WebCore::MediaControlClosedCaptionsTrackListElement::MediaControlClosedCaptionsTrackListElement):
                Intialize m_trackListHasChanged.
            (WebCore::MediaControlClosedCaptionsTrackListElement::updateDisplay): Call rebuildTrackListMenu if
                the track list has changed.
            (WebCore::MediaControlClosedCaptionsTrackListElement::rebuildTrackListMenu): Renamed from resetTrackListMenu.
            * html/shadow/MediaControlElements.h:
            (WebCore::MediaControlClosedCaptionsTrackListElement::resetTrackListMenu): Just set m_trackListHasChanged.

            * html/shadow/MediaControls.h:
            (WebCore::MediaControls::closedCaptionTracksChanged): New, do nothing for base class.

            * html/shadow/MediaControlsApple.cpp:
            (WebCore::MediaControlsApple::toggleClosedCaptionTrackList): Update the track list before 
                showing it.
            (WebCore::MediaControlsApple::closedCaptionTracksChanged):
            * html/shadow/MediaControlsApple.h:

2013-01-24  Eric Carlson  <eric.carlson@apple.com>

        Required for <rdar://problem/12044942> TLF: Update captions support to meet Web broadcast requirements

        Merged ToT WebKit r136843.

    2012-12-06  Antoine Quint  <graouts@apple.com>

            TextTrack's .cues not ordered correctly when two cues have the same .startTime
            https://bugs.webkit.org/show_bug.cgi?id=103266

            Reviewed by Eric Carlson.

            Adding a new method TextTrackCueList::updateCueIndex() to update the list of
            cues after changing the .startTime or .endTime of a TextTrackCue. I elected to
            add a new method to TextTrackCueList rather than calling remove() and then add()
            on the list from TextTrack::cueDidChange() so that the nature of the operation
            is abstracted and we can easily change the way we keep the cue list sorted at
            a later time should we choose to.

            * html/track/TextTrack.cpp:
            (WebCore::TextTrack::cueDidChange):
            * html/track/TextTrackCueList.cpp:
            (WebCore::TextTrackCueList::updateCueIndex):
            (WebCore):
            * html/track/TextTrackCueList.h:
            (TextTrackCueList):

2013-01-25  Eric Carlson  <eric.carlson@apple.com>

        Unreviewed, add two lines I missed when merging https://bugs.webkit.org/show_bug.cgi?id=101877.

        * html/shadow/MediaControlElements.cpp:
        (WebCore::MediaControlTextTrackContainerElement::updateSizes):

2013-01-24  Eric Carlson  <eric.carlson@apple.com>

        Required for <rdar://problem/12044942> TLF: Update captions support to meet Web broadcast requirements

        Merged ToT WebKit r136684.

    2012-12-05  Antoine Quint  <graouts@apple.com>

            TextTrackCue's .endTime property should fire a TypeError when NaN is assigned
            https://bugs.webkit.org/show_bug.cgi?id=103413

            Reviewed by Eric Carlson.

            Check whether the new time passed to setStartTime() and setEndTime() is none of NaN or Infinity,
            otherwise throwing a TypeError.
        
            Thanks to this fix, we're no longer skipping media/track/opera/interfaces/TextTrackCue/endTime.html and
            media/track/opera/interfaces/TextTrackCue/startTime.html.

            * html/track/TextTrackCue.cpp:
            (WebCore::TextTrackCue::setStartTime):
            (WebCore::TextTrackCue::setEndTime):
            * html/track/TextTrackCue.h:
            (TextTrackCue):
            * html/track/TextTrackCue.idl:

2013-01-22  Eric Carlson  <eric.carlson@apple.com>

        Required for <rdar://problem/12044942> TLF: Update captions support to meet Web broadcast requirements

        Merged ToT WebKit r136613.

    2012-12-04  Silvia Pfeiffer  <silviapf@chromium.org>

            Refactor Media Control Elements to remove code duplication.
            https://bugs.webkit.org/show_bug.cgi?id=101877

            Reviewed by Eric Carlson.

            Instead of having two different types of inheritance trees for
            MediaControlElement and MediaControlInputElement, this
            creates a stand-alone virtual class MediaControlElement that
            provides the common functions: show(), hide(), isShowing(),
            setMediaController(), displayType(), isMediaControlElement(),
            shadowPseudoId(), mediaController(), setDisplayType().

            The individual elements inherit from MediaControlElement and
            either HTMLInputElement or HTMLDivElement. They extend/override
            the base functions as appropriate.

            As part of this, the RenderXXX classes mixed in between the media
            controls in MediaControlElements.cpp are also moved to
            rendering/RenderMediaControls.h/cpp to follow common code separation.

            No new tests since this is just a refactoring.

            * CMakeLists.txt:
            * GNUmakefile.list.am:
            * Target.pri:
            * WebCore.gypi:
            * WebCore.vcproj/WebCore.vcproj:
            * WebCore.xcodeproj/project.pbxproj:
            Build files extended with new files.

            * html/HTMLMediaElement.h:
            (WebCore::HTMLMediaElement::textTracksIndexNotFound):
            Replaced const with function, since it is used in multiple files.

            * html/shadow/MediaControlElementTypes.cpp: new file
            * html/shadow/MediaControlElementTypes.h: new file
            Added new MediaControlElement class. Moved MediaControlDivElement and MediaControlInputElement
            classes into these files from MediaControlElements.cpp/h. Moved MediaControlElementTypes enum
            into these. Moved other media control element classes that are the basis for inheriting media
            control elements into these (MediaControlTimeDisplayElement, MediaControlMuteButtonElement,
            MediaControlSeekButtonElement, MediaControlVolumeSliderElement).

            * html/shadow/MediaControlElements.cpp:
            * html/shadow/MediaControlElements.h:
            Removed common functions between media elements that are now in the common
            base class MediaControlElement.
            Also moved common base classes to MediaControlElementTypes.h/cpp

            * html/shadow/MediaControls.cpp:
            * html/shadow/MediaControls.h:
            Renamed MediaControlVolumeSliderElement to MediaControlPanelVolumeSliderElement
            to be consistent in inheritance tree. Updated copyright date.

            * html/shadow/MediaControlsApple.cpp:
            * html/shadow/MediaControlsApple.h:
            Renamed MediaControlVolumeSliderElement to MediaControlPanelVolumeSliderElement
            to be consistent in inheritance tree. Updated copyright dates.n

            * html/shadow/MediaControlsChromium.cpp:
            * html/shadow/MediaControlsChromium.h:
            Renamed MediaControlVolumeSliderElement to MediaControlPanelVolumeSliderElement
            to be consistent in inheritance tree.
            Moved enclosure element definitions to common MediaControlElements.cpp/h
            file through which different media elements are made available to different ports.

            * html/shadow/MediaControlsChromiumAndroid.cpp:
            * html/shadow/MediaControlsChromiumAndroid.h:
            Moved enclosure for overlay button to MediaControlElements.cpp/h files
            through which different media elements are made available to different ports.

            * rendering/RenderMediaControlElements.cpp: new file
            * rendering/RenderMediaControlElements.h: new file
            Moved rendering classes for media control elements into these files from
            MediaControlElements.cpp/h.

            * rendering/RenderThemeMac.mm:
            Added new RenderMediaControlElements.h file.

            * rendering/RenderingAllInOne.cpp:
            Added new RenderMediaControlEleemnt.cpp file.

2013-01-22  Eric Carlson  <eric.carlson@apple.com>

        Required for <rdar://problem/12044942> TLF: Update captions support to meet Web broadcast requirements

        Merged ToT WebKit r136528.

    2012-12-04  Antoine Quint  <graouts@apple.com>

            INVALID_STATE_ERR error upon calling .addCue() for an already-in-use cue
            https://bugs.webkit.org/show_bug.cgi?id=103264

            Reviewed by Eric Carlson.

            Adhere to the latest spec for TextTrack's .addCue() method. This also fixes
            https://bugs.webkit.org/show_bug.cgi?id=103265 and we've removed
            media/track/opera/interfaces/TextTrack/addCue.html from the Skipped list.

            * html/track/TextTrack.cpp:
            (WebCore::TextTrack::addCue):
            * html/track/TextTrack.h:
            (TextTrack):
            * html/track/TextTrack.idl:

2013-01-22  Eric Carlson  <eric.carlson@apple.com>

        Required for <rdar://problem/12044942> TLF: Update captions support to meet Web broadcast requirements

        Merged ToT WebKit r136506.

    2012-12-04  Antoine Quint  <graouts@apple.com>

            TextTrack's .kind property should return lower-case values
            https://bugs.webkit.org/show_bug.cgi?id=103411

            Reviewed by Eric Carlson.

            While the HTML "kind" attribute on the <track> element allows upper-case values, the related APIs
            on HTMLMediaElement and TextTrack expect only to deal with lower-case values. As such, we're updating
            TextTrack::isValidKindKeyword() to be case-sensitive and ensure that values fed from the DOM (the values
            read from HTML attributes) are lower-case'd.

            Thanks to this fix, we're no longer skipping media/track/opera/interfaces/TextTrack/kind.html and
            media/track/opera/interfaces/HTMLElement/HTMLMediaElement/addTextTrack.html 

            This patch also fixes https://bugs.webkit.org/show_bug.cgi?id=103256.

            * html/HTMLTrackElement.cpp:
            (WebCore::HTMLTrackElement::parseAttribute):
            (WebCore::HTMLTrackElement::ensureTrack):
            * html/track/TextTrack.cpp:
            (WebCore::TextTrack::isValidKindKeyword):

2013-01-18  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/11858713> Close localstorage databases with no references on memory warning

        Merged ToT WebKit r136323.

    2012-12-02  Yongjun Zhang  <yongjun_zhang@apple.com>

            Need a method to close all idle localstorage databases immediately.
            https://bugs.webkit.org/show_bug.cgi?id=103469

            Reviewed by David Kilzer.

            Add a new PageGroup method closeIdleLocalStorageDatabases, which walks through
            all local storage areas that don't have document referencing to them and closes
            their underlying databases.

            Test: storage/domstorage/localstorage/close-idle-localstorage-databases-immediately.html

            * WebCore.exp.in:
            * page/PageGroup.cpp:
            (WebCore::PageGroup::clearLocalStorageForOrigin):
            (WebCore):
            (WebCore::PageGroup::closeIdleLocalStorageDatabases): walking through all idle local storages and
                closing their databases.
            * page/PageGroup.h:
            (PageGroup):
            * storage/StorageArea.h:
            (WebCore::StorageArea::closeDatabaseIfIdle):
            * storage/StorageAreaImpl.cpp:
            (WebCore::StorageAreaImpl::closeDatabaseIfIdle): close the database if it is idle.
            (WebCore):
            * storage/StorageAreaImpl.h:
            (StorageAreaImpl):
            * storage/StorageNamespace.h:
            (StorageNamespace):
            * storage/StorageNamespaceImpl.cpp:
            (WebCore::StorageNamespaceImpl::closeIdleLocalStorageDatabases):
            (WebCore):
            * storage/StorageNamespaceImpl.h:
            (StorageNamespaceImpl):

2013-01-17  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/12910603> PEP Web: If ImageLoader's loadEventSender or errorEventSender fires after document is detached, the document will be leaked.

        Merged ToT WebKit r139209.

    2013-01-09  Yongjun Zhang  <yongjun_zhang@apple.com>

            If ImageLoader's loadEventSender or errorEventSender fires after document is detached, the document will be leaked.

            https://bugs.webkit.org/show_bug.cgi?id=106394

            Reviewed by Alexey Proskuryakov.

            ImageLoader's loadEventSender and errorEventSender schedule event dispatching in separate timers and refs
            the Element in updatedHasPendingEvent.  If the Document is detached before either eventSender dispatches,
            we would leak the Document since we bail out early in dispatchPendingLoadEvent or dispatchPendingErrorEvent,
            without deref-ing the Element itself.

            No new tests.  Verified manually by using heap tool to count the living HTMLDocuments.

            * loader/ImageLoader.cpp:
            (WebCore::ImageLoader::dispatchPendingLoadEvent): also call updatedHasPendingEvent to deref the Element if
                        the document is detached.
            (WebCore::ImageLoader::dispatchPendingErrorEvent): ditto.

2013-01-17  David Kilzer  <ddkilzer@apple.com>

        Replace ENABLE(IOS_CONTENTEDITABLE) with USE(UIKIT_EDITING)

        Reviewed by Enrica Casucci.

        Assume that ENABLE(IOS_CONTENTEDITABLE) is always on for iOS.

        * editing/FrameSelection.cpp:
        (WebCore::FrameSelection::focusedOrActiveStateChanged): Switch
        to USE(UIKIT_EDITING) from PLATFORM(IOS) and reverse
        #if/#else/#endif to remove negative logic.  Remove code that
        will never be run.  Remove inaccurate "Simpler" comment.
        * page/ios/FrameIOS.mm:
        (WebCore::ancestorRespondingToClickEvents): Switch to
        USE(UIKIT_EDITING) from PLATFORM(IOS).
        (WebCore::Frame::qualifyingNodeAtViewportLocation): Ditto.

2013-01-17  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/13038986> Leaked CFStrings from StringImpl::createCFString()

        Merged ToT WebKit r138210.

    2012-12-19  Jon Lee  <jonlee@apple.com>

        Leak in StringImpl::createCFString()
        https://bugs.webkit.org/show_bug.cgi?id=105485
        <rdar://problem/12801963>

        Reviewed by Anders Carlsson.

        * platform/text/cf/StringImplCF.cpp:
        (WTF::StringImpl::createCFString): Missing adoptCF()'s.

2013-01-16  Joseph Pecoraro  <pecoraro@apple.com>

        <rdar://problem/12626355> REGRESSION(Innsbruck): Playing audio on apple.com/html5 draws white circle (media controls?)

        Reviewed by Eric Carlson.

        Include audio and video elements in the selector for needed specificity,
        because the base audio and video -webkit-media-controls-panel styles
        include the element prefixes and thus had more specificity and overruled
        the non-element prefixed version.

        * css/mediaControlsiOS.css:
        (audio::-webkit-media-controls-panel, video::-webkit-media-controls-panel):

2013-01-15  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/13020391> PEP Web: WebKit sometimes leak big chunk of memory (>512KB) after loading nytimes.com.

        Merged ToT WebKit r136773.

    2013-01-15  Oliver Hunt  <oliver@apple.com>

            Empty parse cache when receiving a low memory warning
            https://bugs.webkit.org/show_bug.cgi?id=104161

            Reviewed by Filip Pizlo.

            Use new discardAllCode() function on the global data, rather than
            directly interacting with the heap.

            * bindings/js/GCController.cpp:
            (WebCore::GCController::discardAllCompiledCode):

2013-01-15  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/13015824> Remove IOS_PPT code

        Reviewed by Simon Fraser.

        * Configurations/FeatureDefines.xcconfig: Remove IOS_PPT setting.
        * WebCore.exp.in: Remove IOS_PPT exports.
        * html/parser/HTMLDocumentParser.cpp: Remove IOS_PPT code.
        (WebCore::HTMLDocumentParser::pumpTokenizer):
        * page/Frame.cpp: Ditto.
        (WebCore::Frame::Frame):
        * page/Frame.h: Ditto.
        (Frame):
        * page/FrameView.cpp: Ditto.
        (WebCore::FrameView::layout):
        (WebCore::FrameView::performPostLayoutTasks):
        * page/mac/FrameMac.mm: Ditto.
        (WebCore::Frame::rangeImage):

2013-01-13  David Kilzer  <ddkilzer@apple.com>

        [Mac] Add Build Phase to Check Headers for Inappropriate Macros (Platform.h macros)
        https://bugs.webkit.org/show_bug.cgi?id=104279

        Merge ToT WebKit r138064.

        Needed as part of: <rdar://problem/12204959> Innsbruck11A161: JavaScriptCore_Sim-1104 fails to installhdrs: 'Availability.h' file not found

    2012-12-18  Joseph Pecoraro  <pecoraro@apple.com>

        [Mac] Add Build Phase to Check Headers for Inappropriate Macros (Platform.h macros)
        https://bugs.webkit.org/show_bug.cgi?id=104279

        Reviewed by David Kilzer.

        Set the executable as an input path on the check-* build phases.
        
        * WebCore.xcodeproj/project.pbxproj:

2013-01-11  Benjamin Poulain  <bpoulain@apple.com>

        Fix iOS WebKit2 after r1177684

        Reviewed by Joseph Pecoraro.

        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::RenderLayerBacking): We happened to have m_usingTiledCacheLayer
        by accident because of PLATFORM(MAC). This uses to be okay because the code was checking
        both the flag, and the existence of a TiledBacking on the layer.

        After OpenSource WebKit r132427 and r132504, the wrong m_usingTiledCacheLayer causes problems
        because we do not really have a tiled backing.

        Since we do not have a tiled backing, make an exception in the constructor for iOS.

        (WebCore::RenderLayerBacking::paintsIntoWindow):
        We use to have paintsIntoWindow() returns false by accident due to m_usingTiledCacheLayer.
        With that fixed, we need to explicitely return false in paintsIntoWindow() in order to paint
        on our root layer.

2013-01-09  Benjamin Poulain  <bpoulain@apple.com>

        Handle tap highlight of rects and quads

        Reviewed by Simon Fraser.

        * WebCore.exp.in: Export FloatQuad::isRectilinear() for WebKit2.

2013-01-08  Benjamin Poulain  <bpoulain@apple.com>

        Clean Frame::deepestNodeAtLocation

        Reviewed by Joseph Pecoraro.

        * WebCore.exp.in:
        * page/Frame.h:
        (Frame): WebCore should use WebCore types instead of CoreGraphics ones.
        * page/ios/FrameIOS.mm:
        We do not need to update the viewport location with the new position, it is completely
        unused by the client code. Instead, just use the point as input and return the result node.
        (WebCore::Frame::deepestNodeAtLocation):

2013-01-09  David Kilzer  <ddkilzer@apple.com>

        Remove unused .call files

        Reviewed by Joseph Pecoraro.

        * .call: Removed with apologies to Ken Kocienda.

2013-01-09  Joseph Pecoraro  <pecoraro@apple.com>

        Make clearer the EventNames and AttributeNames that are iOS only.

        Reviewed by Darin Adler.

        * dom/EventNames.h:
        * html/HTMLAttributeNames.in:

2013-01-09  Joseph Pecoraro  <pecoraro@apple.com>

        Use ASCIILiteral with char* literals that will convert to WTFStrings.

        Reviewed by Darin Adler.

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::getPluginProxyParams):

2012-12-20  Joseph Pecoraro  <pecoraro@apple.com>

        <rdar://problem/12921490> CRASH in WebCore::FrameLoader::cancelledError in tests

        Reviewed by Yongjun Zhang.

        I don't know how this ever worked. The original iOS code was added in
        r1007440 when resource load starting was moved from init -> startLoading.
        It added the call to didFail if the loader reached a terminal state,
        however by that point the frame (and thus frameloader) had already been
        released. If we have reached the terminal state we should just return,
        most member variables have already been cleared.

        In any case, due to loader refactoring, the logic done in didFail will
        already have happened in cancel if willSendRequest stopped the load.

        Covered by existing tests, those tests no longer crash.

        * loader/ResourceLoader.cpp:
        (WebCore::ResourceLoader::init):

2012-12-20  Joseph Pecoraro  <pecoraro@apple.com>

        Remove virtual deconstructor. This was a very old iOS diff back when
        FrameLoader had USE(LOW_BANDWIDTH_DISPLAY) and subclassed CachedResourceClient.
        It appears to be stale now.

        Reviewed by Dan Bernstein.

        * loader/FrameLoader.h:
        (FrameLoader):

2012-12-13  Benjamin Poulain  <bpoulain@apple.com>

        Basic cleaning of iOS touch adjustment interface

        Reviewed by Joseph Pecoraro.

        Simple changes:
        -WebCore should use WebCore types.
        -Split the input and output position for clarity.
        -Move the internal methods to be private in WebCore::Frame.

        * WebCore.exp.in:
        * page/Frame.h:
        (Frame):
        * page/ios/FrameIOS.mm:
        (WebCore::Frame::hitTestResultAtViewportLocation):
        (WebCore::Frame::qualifyingNodeAtViewportLocation):
        (WebCore::Frame::deepestNodeAtLocation):
        (WebCore::Frame::nodeRespondingToClickEvents):
        (WebCore::Frame::nodeRespondingToScrollWheelEvents):

2012-12-13  Benjamin Poulain  <bpoulain@apple.com>

        Store Frame's documentScale on the Frame itself

        Reviewed by Joseph Pecoraro.

        WebCore's Frame was pulling the documentScale from the WebKit layer whenever it needed the value.
        This is a layer violation and cannot be easily generalized for WebKit2.

        This patch changes WebKit to push the value to Frame instead of having Frame pull the value.

        The final model of how the scale is handled will eventually depends on the DrawingModel of WebKit2.

        * WebCore.exp.in:
        * page/Frame.h:
        * page/ios/FrameIOS.mm:
        (WebCore::Frame::qualifyingNodeAtViewportLocation):
        (WebCore::Frame::setDocumentScale):
        (WebCore::Frame::documentScale):

2013-01-04  Benjamin Poulain  <bpoulain@apple.com>

        Implement TransformationMatrix::multiply with ARMv8 AdvSIMD

        Reviewed by Phil Pizlo.

        Similarily to what is done on OpenSource WebKit for x86_64, ARMv7, and ARMv7S,
        implement an optimized version of Matrix multiplication for ARM64.

        ARMv8 supports double FP in Neon, has a fused multiply-accumulate, and a ton
        of vector registers. We use all of that to improve the speed of matrix multiply.

        Since we have enough registers for it, we can store the sourceMatrix entierly in v16-v23.
        This avoids working on a copy of the matrix, and we store the result directly in the source
        memory as we generate them.

        The results are then generated two by two in the same way we do ARMv7:
        -multiply the first two components.
        -multiply-accumulate the next 3 pairs of components.

        The registers v0-v3 and v24-v27 are used for loading components of the other matrix.
        The registers v28-v31 are used for the results.

        This is 2.2 times as fast as the VFP code generated by Clang.
        The new code is also so small that it is inlined automatically by Clang when used in TransformationMatrix.

        * platform/graphics/transforms/TransformationMatrix.cpp:
        (WebCore::TransformationMatrix::multiply):

2013-01-04  Dan Bernstein  <mitz@apple.com>

        WebKit support for <rdar://problem/12944342> Adopt SafariShared AutoFill mechanism

        Merged TOT WebKit r138878.

    2013-01-04  Dan Bernstein  <mitz@apple.com>

        Updated the exports file.

        Rubber-stamped by Andy Estes.

        * WebCore.exp.in: Moved the DOMHTMLTableCellElement export out of the !PLATFORM(IOS) section.

2013-01-04  Dan Bernstein  <mitz@apple.com>

        WebKit support for <rdar://problem/12944342> Adopt SafariShared AutoFill mechanism

        Merged TOT WebKit r138851.

    2013-01-04  Dan Bernstein  <mitz@apple.com>

        [mac] WebKit1 has no equivalent of WKBundleNodeHandleCopyHTMLTableCellElementCellAbove
        https://bugs.webkit.org/show_bug.cgi?id=106121

        Reviewed by Adele Peterson.

        Test: TestWebKitAPI/Tests/mac/DOMHTMLTableCellCellAbove.mm.

        * bindings/objc/DOM.mm:
        (-[DOMHTMLTableCellElement _cellAbove]): Added. Calls HTMLTableCellElement::cellAbove().
        * bindings/objc/DOMPrivate.h: Added declaration of the above.

2012-12-13  Jer Noble  <jer.noble@apple.com>

        <rdar://problem/12044955> Get text tracks to work in fullscreen

        Reviewed by Joseph Pecoraro.

        The player plugin controls rendering of the video when in full screen mode, so render text tracks into a 
        CALayer, and provide that layer to the plug-in.

        Add a concrete subclass of TextTrackRepresentation containing IOS-specific rendering code.
        * platform/graphics/ios/TextTrackRepresentationIOS.h: Added.
        (WebCore::TextTrackRepresentationIOS::client): Simple getter.
        (WebCore::TextTrackRepresentationIOS::platformLayer): Simple getter.
        * platform/graphics/ios/TextTrackRepresentationIOS.mm: Added.
        (-[WebCoreTextTrackRepresentationIOSHelper initWithParent:]): Simple init.
        (-[WebCoreTextTrackRepresentationIOSHelper drawLayer:inContext:]): Synchronously marshal to the WebThread and call the client.
        (-[WebCoreTextTrackRepresentationIOSHelper observeValueForKeyPath:ofObject:change:context:]): Marshal to the WebThread and call the client.
        (-[WebCoreTextTrackRepresentationIOSHelper actionForLayer:forKey:]): Disable all implicit animations.
        (TextTrackRepresentation::create): Create a TextTrackRepresentationIOS instance.
        (TextTrackRepresentationIOS::TextTrackRepresentationIOS): Initialize the layer.
        (TextTrackRepresentationIOS::~TextTrackRepresentationIOS): Clear the layer's delegate.
        (TextTrackRepresentationIOS::update): Tell the layer to display.
        (TextTrackRepresentationIOS::setContentScale): Pass to the layer.
        (TextTrackRepresentationIOS::bounds): Return the layer's bounds.

        Add methods to MediaPlayerPrivateIOS to handle the TextTrackRepresentation.
        * platform/graphics/ios/MediaPlayerPrivateIOS.h:
        * platform/graphics/ios/MediaPlayerPrivateIOS.mm:
        (WebCore::MediaPlayerPrivateIOS::deliverNotification): Remove the representation when exiting full screen.
        (WebCore::MediaPlayerPrivateIOS::requiresTextTrackRepresentation): Return YES if in full screen mode.
        (WebCore::MediaPlayerPrivateIOS::setTextTrackRepresentation): Pass the representation's layer to the player plug-in.

        Add the new files to the project.
        * WebCore.xcodeproj/project.pbxproj:

2013-01-03  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/12944557> PEP Web: when running alexa test, sometimes we are leaking Facebook iframe document from ehow.com.

        In iOS, SubresourceLoaders are queued in ResourceLoadScheduler and it is possible that the document was
        already detached when a ResourceLoader gets started in ResourceLoader::init().  If that happens, we return false
        and this loader will be staying in the scheduler.  Since the loader still refs to the frame, the whole document
        will be leaked.  To avoid this, we need to call cancel() to deref the frame and document, and also remove the
        ResourceLoader from the scheduler.

        Reviewed by Joseph Pecoraro.

        * loader/ResourceLoader.cpp:
        (WebCore::ResourceLoader::init):

2013-01-03  Dan Bernstein  <mitz@apple.com>

        WebKit support for <rdar://problem/12944342> Adopt SafariShared AutoFill mechanism

        Merged TOT WebKit r138747.

    2013-01-03  Dan Bernstein  <mitz@apple.com>

        No way to obtain a DOMNode given a JS wrapper for a Node
        https://bugs.webkit.org/show_bug.cgi?id=106033

        Reviewed by Sam Weinig.

        Test: TestWebKitAPI/Tests/mac/DOMNodeFromJSObject.mm.

        * bindings/objc/DOM.mm:
        (+[DOMNode _nodeFromJSWrapper:]): Added. If the given JSObjectRef is a wrapper for a Node,
        returns the Objective-C wrapper for that node. Note that Objective-C wrappers are always
        for the main world, regardless of which world the given JS wrapper comes from.
        * bindings/objc/DOMPrivate.h: Added declaration of the above.

2012-12-28  Dan Bernstein  <mitz@apple.com>

        Switched WebCore to Debug/Release/Production configurations. Left the Production_Hardware
        and Production_Deployment configurations used in B&I in for now, making them identical to
        Production.

        Part of <rdar://problem/10568199> WebKit: Switch to Debug/Release/Production configurations for iphoneos and iphonesimulator builds

        * Configurations/Base.xcconfig: Added #include "iOS.xcconfig".
        * Configurations/Indigo.xcconfig: Removed.
        * Configurations/WebCoreTestSupportIOS.xcconfig: Removed.
        * Configurations/iOS.xcconfig: Changed to include AspenFamily.xcconfig instead of
        AspenSDK.xcconfig.
        * WebCore.xcodeproj/project.pbxproj: Removed the Development, Development_Hardware,
        Deployment, and Deployment_Hardware build configurations. Made the Production_Deployment and
        Production_Hardware configurations identical to the Production configuration. Removed
        definitions of INSTALL_PATH in the Debug and Release configurations at the project level.

2012-12-20  Antti Koivisto  <antti@apple.com>

    <rdar://problem/12920425> [Brighton 10B128] Japanese text orientation fails on fresh iBooks.app startup
    
    Merged r138299 from open source.

    2012-12-20  Antti Koivisto  <antti@apple.com>

            Font description not synchronized correctly on orientation affecting property changes
            https://bugs.webkit.org/show_bug.cgi?id=105533

            Reviewed by Enrica Casucci.

            In StyleResolver checkForOrientationChange() function checks if the new computed orientation differs from the parent
            orientation and updates the style's font description only if it does. This is not correct as equal values do not guarantee
            the new font description is actually up to date. We can leave the function with the computed orientation and the font
            description still out of sync.
            
            Fix by bailing out fast only if the font description is already in sync.
            
            No layout test yet, verified with a test app.

            * css/StyleResolver.cpp:
            (WebCore::checkForOrientationChange):
            (WebCore::StyleResolver::updateFont):

2012-12-18  Joseph Pecoraro  <pecoraro@apple.com>

        <rdar://problem/10365008> Fix Inappropriate Objective-C Class Names found by build phase

        Reviewed by Dan Bernstein.

          - Added the "Web" prefix to the WebAccessibilityTextMarker class.

        * accessibility/ios/AccessibilityObjectWrapperIOS.mm:
        (+[WebAccessibilityTextMarker textMarkerWithVisiblePosition:cache:]):
        (-[WebAccessibilityObjectWrapper accessibilityMoveSelectionToMarker:]):
        (-[WebAccessibilityObjectWrapper stringForTextMarkers:]):
        (-[WebAccessibilityObjectWrapper arrayOfTextForTextMarkers:attributed:]):
        (-[WebAccessibilityObjectWrapper positionForTextMarker:]):
        (-[WebAccessibilityObjectWrapper textMarkerRange]):
        (-[WebAccessibilityObjectWrapper elementTextRange]):
        (-[WebAccessibilityObjectWrapper accessibilityObjectForTextMarker:]):
        (-[WebAccessibilityObjectWrapper textMarkerRangeForSelection]):
        (-[WebAccessibilityObjectWrapper textMarkerForPosition:]):
        (-[WebAccessibilityObjectWrapper _stringForRange:attributed:]):
        (-[WebAccessibilityObjectWrapper elementsForRange:]):
        (-[WebAccessibilityObjectWrapper selectedTextMarker]):
        (-[WebAccessibilityObjectWrapper lineEndMarkerForMarker:]):
        (-[WebAccessibilityObjectWrapper lineStartMarkerForMarker:]):
        (-[WebAccessibilityObjectWrapper nextMarkerForMarker:]):
        (-[WebAccessibilityObjectWrapper previousMarkerForMarker:]):
        (-[WebAccessibilityObjectWrapper frameForTextMarkers:]):
        (-[WebAccessibilityObjectWrapper textMarkerForPoint:]):

2012-12-18  Joseph Pecoraro  <pecoraro@apple.com>

        <rdar://problem/10365008> Fix Inappropriate Objective-C Class Names found by build phase

        Reviewed by Dan Bernstein.

          - Added the "Web" prefix to the WebCoreMotionManager class.
          - Renamed the file to match.
          - Updated references to the file and class.

        * WebCore.xcodeproj/project.pbxproj:
        * platform/ios/DeviceMotionClientIOS.h:
        (DeviceMotionClientIOS):
        * platform/ios/DeviceMotionClientIOS.mm:
        (WebCore::DeviceMotionClientIOS::startUpdating):
        * platform/ios/DeviceOrientationClientIOS.h:
        (DeviceOrientationClientIOS):
        * platform/ios/DeviceOrientationClientIOS.mm:
        (WebCore::DeviceOrientationClientIOS::startUpdating):
        * platform/ios/WebCoreMotionManager.h: Renamed from Source/WebCore/platform/ios/CoreMotionManager.h.
        * platform/ios/WebCoreMotionManager.mm: Renamed from Source/WebCore/platform/ios/CoreMotionManager.mm.
        (+[WebCoreMotionManager sharedManager]):
        (-[WebCoreMotionManager init]):
        (-[WebCoreMotionManager dealloc]):
        (-[WebCoreMotionManager addMotionClient:WebCore::]):
        (-[WebCoreMotionManager removeMotionClient:WebCore::]):
        (-[WebCoreMotionManager addOrientationClient:WebCore::]):
        (-[WebCoreMotionManager removeOrientationClient:WebCore::]):
        (-[WebCoreMotionManager gyroAvailable]):
        (-[WebCoreMotionManager headingAvailable]):
        (-[WebCoreMotionManager initializeOnMainThread]):
        (-[WebCoreMotionManager checkClientStatus]):
        (-[WebCoreMotionManager update]):
        (-[WebCoreMotionManager sendAccelerometerData:]):
        (-[WebCoreMotionManager sendMotionData:withHeading:]):

2012-12-18  Joseph Pecoraro  <pecoraro@apple.com>

        <rdar://problem/10365008> Fix Inappropriate Objective-C Class Names found by build phase

        Reviewed by Dan Bernstein.

          - Add the "Web" prefix to the QuickLookHandleAsDelegate class.
          - Add the "Web" prefix to the WebCustomNSURLError class.

        * platform/network/ios/QuickLook.mm:
        (-[WebQuickLookHandleAsDelegate connection:didReceiveDataArray:]):
        (-[WebQuickLookHandleAsDelegate connection:didReceiveData:lengthReceived:]):
        (-[WebQuickLookHandleAsDelegate connectionDidFinishLoading:]):
        (-[WebQuickLookHandleAsDelegate connection:didFailWithError:]):
        (WebCore::QuickLookHandle::create):
        * platform/network/mac/ResourceErrorMac.mm:
        (NSErrorFromCFError):

2012-12-14  Jer Noble  <jer.noble@apple.com>

        Unreviewed.  Add files missed from last merge.
        
        * platform/graphics/TextTrackRepresentation.cpp: Added.
        * platform/graphics/TextTrackRepresentation.h: Added.

2012-12-14  Jer Noble  <jer.noble@apple.com>

        <rdar://problem/12044955> Get text tracks to work in fullscreen
        
        Merged ToT WebKit r137782.

    2012-12-14  Jer Noble  <jer.noble@apple.com>

            Allow the text track contents to be displayed externally to WebCore.
            https://bugs.webkit.org/show_bug.cgi?id=105052

            Reviewed by Eric Carlson.

            Support scenarios where the text track contents must be rendered outside of WebCore, such as to an external
            display or window.  Add an abstract base class which encapsulates the external representation to which the
            text tracks will be rendered.

            Add a new abstract base class and client to wrap the external rendering of a TextTrack.
            * platform/graphics/TextTrackRepresentation.h: Added.
            (WebCore::TextTrackRepresentationClient::~TextTrackRepresentationClient):
            (WebCore::TextTrackRepresentation::~TextTrackRepresentation):

            Add an empty concrete implementation for those ports who do not yet support external display of subtitles.
            * platform/graphics/TextTrackRepresentation.cpp: Added.
            (NullTextTrackRepresentation):
            (WebCore::NullTextTrackRepresentation::~NullTextTrackRepresentation):
            (WebCore::NullTextTrackRepresentation::update):
            (WebCore::NullTextTrackRepresentation::platformLayer):
            (WebCore::NullTextTrackRepresentation::setContentScale):
            (WebCore::NullTextTrackRepresentation::bounds):
            (WebCore::TextTrackRepresentation::create):

            Add methods to MediaPlayerPrivateIOS to handle the TextTrackRepresentation.
            * platform/graphics/ios/MediaPlayerPrivateIOS.h:
            * platform/graphics/ios/MediaPlayerPrivateIOS.mm:
            (WebCore::MediaPlayerPrivateIOS::deliverNotification): Remove the representation when exiting full screen.
            (WebCore::MediaPlayerPrivateIOS::requiresTextTrackRepresentation): Return YES if in full screen mode.
            (WebCore::MediaPlayerPrivateIOS::setTextTrackRepresentation): Pass the representation's layer to the player plug-in.

            Expose those methods via HTMLMediaElement:
            * html/HTMLMediaElement.cpp:
            (WebCore::HTMLMediaElement::requiresTextTrackRepresentation):
            (WebCore::HTMLMediaElement::setTextTrackRepresentation):
            * html/HTMLMediaElement.h:
            * platform/graphics/MediaPlayer.cpp:
            (WebCore::MediaPlayer::requiresTextTrackRepresentation):
            (WebCore::MediaPlayer::setTextTrackRepresentation):
            * platform/graphics/MediaPlayer.h:
            (WebCore::MediaPlayerClient::textTrackRepresentationBoundsChanged):
            (WebCore::MediaPlayerClient::paintTextTrackRepresentation):
            * platform/graphics/MediaPlayerPrivate.h:
            (WebCore::MediaPlayerPrivateInterface::requiresTextTrackRepresentation):
            (WebCore::MediaPlayerPrivateInterface::setTextTrackRepresentation):

            * html/shadow/MediaControlElements.cpp:
            (WebCore::MediaControlTextTrackContainerElement::updateDisplay): Create the representation, if necessary.
            (WebCore::MediaControlTextTrackContainerElement::updateSizes): Use the representation to determine the font size.
            (WebCore::MediaControlTextTrackContainerElement::paintTextTrackRepresentation): Added. Paint the TextTrack into the provided graphics context.
            (WebCore::MediaControlTextTrackContainerElement::textTrackRepresentationBoundsChanged): Added. Call updateSizes().
            * html/shadow/MediaControlElements.h:

            Add the new files to the project.
            * WebCore.xcodeproj/project.pbxproj:
            * GNUmakefile.list.am:
            * Target.pri:
            * WebCore.gypi:
            * WebCore.vcproj/WebCore.vcproj:

2012-12-14  Dean Jackson  <dino@apple.com>

        <rdar://problem/12629727> REGRESSION(Merge2): jquery chart doesn't render legend

        Reviewed by Tim Horton.

        Rounded rectangles in SVG were not rendering. During the merge, we missed
        a call to ensurePlatformPath() and were instead referencing a null
        CGPath reference. But, rather than fix that, it turns out that the iOS
        version of addBeziersForRoundedRect was taking the CG rounded rectangle
        fast path when it shouldn't (the method is explicitly adding beziers).
        So, delete that method and use the version from Open Source.

        This reverts the change made in <rdar://problem/9382276> iOS: 
        Make use of CG rounded-rect primitives, but we now use the platform
        function which effectively does the same thing.

        * platform/graphics/Path.cpp:
        (WebCore::Path::addBeziersForRoundedRect):
        * platform/graphics/cg/PathCG.cpp:

2012-12-13  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/12797901> Safari Alexa test: we seem to leak a lot of HTMLDocument during Alexa test.

        Merged ToT WebKit 127615.

    2012-12-13  Yongjun Zhang  <yongjun_zhang@apple.com>

            Document will never be released when an Image is created inside unload event listener
            https://bugs.webkit.org/show_bug.cgi?id=104830

            Reviewed by Darin Adler.

            When setting src attribute to an Image object inside unload event listener, ImageLoader will
            mark it as load failure (by setting m_hasPendingErrorEvent to true) and the following call
            to updatedHasPendingEvent will ref the element but won't be deref-ed since the Document is
            being dismissed.  This was introduced in r131670.  To match pre r131670 behavior, we shouldn't
            trigger error event for image loading when the page is being dismissed.

            No new tests, there is no visual change.  Manually tested to verify documents are released by
            using heap in Mac OS X.

            * loader/ImageLoader.cpp:
            (WebCore::pageIsBeingDismissed): add a helper function to test whether the page is being dismissed.
            (WebCore::ImageLoader::updateFromElement): don't trigger error event if the page is being dismissed.

2012-12-12  Benjamin Poulain  <bpoulain@apple.com>

        Remove makeViewFirstResponder: from WAKWindow

        Reviewed by Paul Knight.

        All the client code has been updated to use makeFirstResponder, we can now remove makeViewFirstResponder:
        from WAKWindow.

        * wak/WAKWindow.h:
        * wak/WAKWindow.mm:

2012-12-11  Benjamin Poulain  <bpoulain@apple.com>

        <rdar://problem/9252504> Remove WebThreadCallAPI() since it has been replaced by WebThreadRun()

        Reviewed by Enrica Casucci.

        The dependencies have been updated, we should be able to remove WebThreadCallAPI() without breakage.

        * WebCore.exp.in:
        * wak/WebCoreThread.mm:
        * wak/WebCoreThreadMessage.h:

2012-12-11  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/12797901> Safari Alexa test: we seem to leak a lot of HTMLDocument during Alexa test.

        Merged ToT WebKit r135709.

    2012-12-11  Marja Hölttä  <marja@chromium.org>

            Circular reference between Document and MediaQueryMatcher.
            https://bugs.webkit.org/show_bug.cgi?id=103242

            Reviewed by Kenneth Rohde Christiansen.

            It's not enough to clean up listeners in MediaQueryMatcher in ~Document,
            since MediaQueryListListener keeps the Document alive. This caused
            www.crbug.com/113983.

            No new tests: No visible change in behavior (except that it doesn't leak memory).

            * dom/Document.cpp:
            (WebCore::Document::~Document):
            (WebCore::Document::detach):

2012-12-05  Benjamin Poulain  <bpoulain@apple.com>

        Unify [WAKWindow makeViewFirstResponder:] with [WAKWindow makeFirstResponder:]

        Reviewed by David Kilzer.

        [WAKWindow makeViewFirstResponder:] and [WAKWindow makeFirstResponder:] is a hell of a confusing API. I felt
        into that trap with r1172147 which broke the event responder chain for iframes.

        The method makeViewFirstResponder: should not exist, makeFirstResponder: makes our code closer to AppKit.
        From inspecting the call sites in WebKit, it seems makeViewFirstResponder: only existed because of WKWindowMakeFirstResponder.

        * wak/WAKWindow.h:
        * wak/WAKWindow.mm:
        (-[WAKWindow makeViewFirstResponder:]):
        (-[WAKWindow makeFirstResponder:]):
        (-[WAKWindow sendEventSynchronously:]):

2012-12-06  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/12810719> Add support for text-orientation: sideways*

        Merged TOT WebKit r136520 and r136640.

    2012-12-04  Dan Bernstein  <mitz@apple.com>

        Support text-orientation: sideways-right (and sideways when it maps to sideways-right)
        https://bugs.webkit.org/show_bug.cgi?id=104035

        Reviewed by Anders Carlsson.

        Test: fast/text/orientation-sideways.html

        * GNUmakefile.list.am: Updated for rename of TextOrientation.h.

        * WebCore.gypi: Ditto.

        * WebCore.xcodeproj/project.pbxproj: Ditto.

        * css/CSSComputedStyleDeclaration.cpp:
        (WebCore::CSSComputedStyleDeclaration::getPropertyCSSValue): Changed to retrieve
        text-orientation from RenderStyle rather than from the font description.

        * css/CSSParser.cpp:
        (WebCore::CSSParser::parseValue): Added sideways and sideways-right as acceptable
        text-orientation values.

        * css/CSSPrimitiveValueMappings.h:
        (WebCore::CSSPrimitiveValue::CSSPrimitiveValue): Added mappings for sideways and
        sideways-right.
        (WebCore::CSSPrimitiveValue::operator TextOrientation): Ditto.

        * css/CSSValueKeywords.in: Added sideways and sideways-right.

        * css/StyleBuilder.cpp:
        (WebCore::StyleBuilder::StyleBuilder): Removed text-orientation property handler, as it is
        now handled in CSSStyleResolver.

        * css/StyleResolver.cpp:
        (WebCore::getFontAndGlyphOrientation): Added this helper function that determines the font
        orientation and non-CJK glyph orientation based on writing-mode and text-orientation.
        (WebCore::StyleResolver::styleForDocument): Added code to set the font orientation and
        non-CJK glyph orientation in the document style.
        (WebCore::checkForOrientationChange): Added. Sets the font orientation and non-CJK glyph
        orientation in the child style if the difference between the parent and child styles requires
        doing so.
        (WebCore::StyleResolver::updateFont): Added call to checkForOrientationChange().
        (WebCore::StyleResolver::applyProperty): Changed the writing-mode case to call the new
        setWritingMode helper, which dirties the font as needed, rather than changing the font
        here. Moved handling of text-orientation here, by calling setTextOrientation, which also
        dirties the font as needed.

        * css/StyleResolver.h:
        (WebCore::StyleResolver::setWritingMode): Added. Dirties the font if the writing mode changes.
        (WebCore::StyleResolver::setTextOrientation): Ditto for text orientation.

        * platform/graphics/FontDescription.h:
        (WebCore::FontDescription::FontDescription): Updated initializer for rename.
        (WebCore::FontDescription::nonCJKGlyphOrientation): Renamed textOrientation to this.
        (WebCore::FontDescription::setNonCJKGlyphOrientation): Renamed setTextOrientation to this.
        (FontDescription): Renamed member variable m_textOrientation to m_nonCJKGlyphOrientation.
        (WebCore::FontDescription::operator==): Updated for rename.

        * platform/graphics/FontFastPath.cpp:
        (WebCore::glyphDataAndPageForNonCJKCharacterWithGlyphOrientation): Renamed
        glyphDataAndPageForCharacterWithTextOrientation to this and changed the parameter type from
        TextOrientation to NonCJKGlyphOrientation.
        (WebCore::Font::glyphDataAndPageForCharacter): Updated for above rename.

        * platform/graphics/mac/FontComplexTextMac.cpp:
        (WebCore::Font::fontDataForCombiningCharacterSequence): Updated for rename of
        FontDescription::textOrientation().

        * platform/text/NonCJKGlyphOrientation.h: Renamed TextOrientation.h to this, and renamed
        the enum and its values to better reflect that they describe how glyphs for non-CJK
        characters are to be rendered in vertical text.

        * rendering/InlineFlowBox.cpp:
        (WebCore::InlineFlowBox::requiresIdeographicBaseline): Updated for rename of
        FontDescription::textOrientation().

        * rendering/style/RenderStyle.cpp:
        (WebCore::RenderStyle::diff): Made text-orientation change a layout change.

        * rendering/style/RenderStyle.h:
        (WebCore::RenderStyle::setTextOrientation): Added.

        * rendering/style/RenderStyleConstants.h: Added a new TextOrientation enum here.

        * rendering/style/StyleRareInheritedData.cpp:
        (WebCore::StyleRareInheritedData::StyleRareInheritedData): Added initialization and copying
        of m_textOrientation member variable.
        (WebCore::StyleRareInheritedData::operator==): Added comparing of m_textOrientation.

        * rendering/style/StyleRareInheritedData.h:
        (StyleRareInheritedData): Added m_textOrientation member variable.

    2012-12-04  Dan Bernstein  <mitz@apple.com>

        FontPlatformData has unnecessary m_textOrientation member
        https://bugs.webkit.org/show_bug.cgi?id=103971

        Reviewed by Darin Adler.

        Nothing in SimpleFontData depends on the FontPlatformData’s textOrientation, so we don’t
        need separate data for vertical-right and upright. We simply choose between
        verticalRightOrientationFontData() and uprightOrientationFontData() based on the
        textOrientation in the FontDescription.

        * WebCore.exp.in: Updated FontPlatformData constructor exports.

        * css/CSSFontFaceSource.cpp:
        (WebCore::CSSFontFaceSource::getFontData): Removed the text orientation bit from the hash key,
        and updated for the removal of the TextOrientation parameter to
        CachedFont::platformDataFromCustomData().

        * loader/cache/CachedFont.cpp:
        (WebCore::CachedFont::platformDataFromCustomData): Removed the TextOrientation parameter.
        * loader/cache/CachedFont.h:

        * platform/graphics/FontCache.cpp:
        (WebCore::FontPlatformDataCacheKey::FontPlatformDataCacheKey): Removed the TextOrientation
        parameter and initializer.
        (WebCore::FontPlatformDataCacheKey::operator==): Updated for removal of m_textOrientation
        member variable.
        (FontPlatformDataCacheKey): Removed m_textOrientation member variable.
        (WebCore::computeHash): Removed text orientation bit from the hash.
        (WebCore::FontCache::getCachedFontPlatformData): Updated for FontPlatformDataCacheKey
        change.

        * platform/graphics/FontPlatformData.cpp:
        (WebCore::FontPlatformData::FontPlatformData): Removed TextOrientation parameters and
        initializers.
        (WebCore::FontPlatformData::operator=): Updated for removal of m_textOrientation
        member variable.
        * platform/graphics/FontPlatformData.h:
        (FontPlatformData): Removed m_textOrientation member variable, removed TextOrientation
        parameters from constructors.
        (WebCore::FontPlatformData::hash): Removed text orientation bit.
        (WebCore::FontPlatformData::operator==): Updated for removed member variable.

        * platform/graphics/cairo/FontCustomPlatformData.h:
        (FontCustomPlatformData::fontPlatformData): Removed TextOrientation parameter.

        * platform/graphics/chromium/FontCacheAndroid.cpp:
        (WebCore::FontCache::createFontPlatformData): Updated for FontPlatformData change.

        * platform/graphics/cocoa/FontPlatformDataCocoa.mm:
        (WebCore::FontPlatformData::FontPlatformData): Removed TextOrientation parameter and
        initializer.

        * platform/graphics/freetype/FontCustomPlatformDataFreeType.cpp:
        (WebCore::FontCustomPlatformData::fontPlatformData): Removed TextOrientation parameter.
        * platform/graphics/harfbuzz/FontPlatformDataHarfBuzz.cpp:
        (WebCore::FontPlatformData::FontPlatformData): Removed TextOrientation parameter and
        initializers.
        (WebCore::FontPlatformData::operator=): Updated for removed member variable.
        (WebCore::FontPlatformData::operator==): Ditto.
        (WebCore::FontPlatformData::hash): Removed text orientation bit.

        * platform/graphics/harfbuzz/FontPlatformDataHarfBuzz.h:
        (FontPlatformData): Removed TextOrientation parameter from the constructor declaration.

        * platform/graphics/mac/FontCacheMac.mm:
        (WebCore::FontCache::createFontPlatformData): Updated for FontPlatformData change.

        * platform/graphics/mac/FontCustomPlatformData.cpp:
        (WebCore::FontCustomPlatformData::fontPlatformData): Removed TextOrientation parameter.

        * platform/graphics/mac/FontCustomPlatformData.h:
        (FontCustomPlatformData): Removed TextOrientation parameter from declaration of
        fontPlatformData().

        * platform/graphics/mac/SimpleFontDataMac.mm:
        (WebCore::SimpleFontData::getCompositeFontReferenceFontData): Updated for FontPlatformData
        change.

        * platform/graphics/pango/FontCustomPlatformDataPango.cpp:
        (WebCore::FontCustomPlatformData::fontPlatformData): Removed TextOrientation parameter.
        * platform/graphics/qt/FontCustomPlatformData.h:

        * platform/graphics/qt/FontCustomPlatformDataQt.cpp:
        (WebCore::FontCustomPlatformData::fontPlatformData): Ditto.

        * platform/graphics/skia/FontCacheSkia.cpp:
        (WebCore::FontCache::createFontPlatformData): Updated for FontPlatformData change.

        * platform/graphics/skia/FontCustomPlatformData.cpp:
        (WebCore::FontCustomPlatformData::fontPlatformData): Removed TextOrientation parameter.
        * platform/graphics/skia/FontCustomPlatformData.h:

        * platform/graphics/win/FontCustomPlatformData.cpp:
        (WebCore::FontCustomPlatformData::fontPlatformData): Removed TextOrientation parameter.
        * platform/graphics/win/FontCustomPlatformData.h:

        * platform/graphics/win/FontCustomPlatformDataCairo.cpp:
        (WebCore::FontCustomPlatformData::fontPlatformData): Removed TextOrientation parameter.
        * platform/graphics/win/FontCustomPlatformDataCairo.h:

        * platform/graphics/win/FontPlatformDataCGWin.cpp:
        (WebCore::FontPlatformData::FontPlatformData): Removed m_textOrientation initializer.

        * platform/graphics/win/FontPlatformDataCairoWin.cpp:
        (WebCore::FontPlatformData::FontPlatformData): Ditto.

        * platform/graphics/win/FontPlatformDataWin.cpp:
        (WebCore::FontPlatformData::FontPlatformData): Ditto.

        * platform/graphics/wince/FontCustomPlatformData.cpp:
        (WebCore::FontCustomPlatformData::fontPlatformData): Removed TextOrientation parameter.
        * platform/graphics/wince/FontCustomPlatformData.h:

2012-12-05  Dan Bernstein  <mitz@apple.com>

    <rdar://problem/12801506> text-underline isn't rendered correctly on vertical text with text-combine

        Merged TOT WebKit r136765.

    2012-12-05  Dan Bernstein  <mitz@apple.com>

        Text decorations are rotated when text-combine takes effect
        https://bugs.webkit.org/show_bug.cgi?id=104172

        Reviewed by Dave Hyatt.

        Test: fast/text/decorations-with-text-combine.html

        * rendering/InlineTextBox.cpp:
        (WebCore::InlineTextBox::paint): Applied a rotation to the graphics context when painting
        the text decorations for combined text.

2012-12-04  Benjamin Poulain  <bpoulain@apple.com>

        Build fix for using WKView.h with ARC

        Unreviewed build fix.

        * wak/WKView.h: ARC does not support references to object in C structures. Mark the attribute as unsafe for ARC,
        the reference will ultimately move to WAKView.

2012-12-03  Benjamin Poulain  <bpoulain@apple.com>

        Get rid of what is left of WKWindow

        Reviewed by Ian Henderson.

        All the external dependencies have been updated to use WAKWindow instead of WKWindow.
        We can now get rid of WKWindow entierly and move its last few methods to WAKWindow.

        With this change, WKView is the last bastion of resistance from the evil WK.

        * WebCore.exp.in:
        * WebCore.xcodeproj/project.pbxproj:
        * wak/WAKView.mm:
        (-[WAKView window]):
        * wak/WAKWindow.h:
        * wak/WAKWindow.mm:
        (-[WAKWindow initWithLayer:]):
        (-[WAKWindow initWithFrame:]):
        (-[WAKWindow dealloc]):
        (-[WAKWindow setContentView:]):
        (-[WAKWindow contentView]):
        (-[WAKWindow close]):
        (-[WAKWindow firstResponder]):
        (-[WAKWindow makeViewFirstResponder:]):
        (-[WAKWindow _newFirstResponderAfterResigning]):
        (-[WAKWindow sendEventSynchronously:]):
        (-[WAKWindow description]):
        * wak/WAKWindowPrivate.h: Removed.
        * wak/WKTypes.h:
        * wak/WKView.h:
        * wak/WKView.mm:
        (_WKViewSetWindow):
        (_WKViewDealloc):
        (WKViewGetWindow):
        * wak/WKViewPrivate.h:
        * wak/WKWindow.h: Removed.
        * wak/WKWindow.mm: Removed.

2012-11-30  Joseph Pecoraro  <pecoraro@apple.com>

        <rdar://problem/10337021> Reverify dictation dots and placeholder text after merge

        The earlier merged implementation of hidePlaceholder no longer works.
        Provide an implementation that works with both input and textarea.
        Setting visibility matches how the placeholder is normally shown / hidden.

        Reviewed by David Carson.

        * html/HTMLTextFormControlElement.cpp:
        (WebCore::HTMLTextFormControlElement::hidePlaceholder):

2012-11-29  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/12779525> 11A221: WebCore fails to build because CGContextShowGlyphsWithAdvances is deprecated

        Merged ToT WebKit r134755.

        * platform/ios/TileCache.mm:
        (WebCore::TileCache::drawLayer): Disable deprecation warnings similar to opensource.

    2012-11-15  Mark Rowe  <mrowe@apple.com>

        Build fix.

        Disable deprecation warnings in a few places that need it.

        * platform/graphics/ca/mac/TileCache.mm:
        (WebCore::TileCache::drawRepaintCounter):
        * platform/graphics/mac/FontMac.mm:
        (WebCore::showGlyphsWithAdvances):
        * platform/graphics/mac/WebLayer.mm:
        (drawLayerContents):

2012-11-28  Joseph Pecoraro  <pecoraro@apple.com>

        <rdar://problem/12607898> incorrect behavior of -webkit-text-size-adjust in UIWebView on iOS6

        Reviewed by Dmitry Gorbik.

        When there is a percentage text-size-adjust do not adjust a percentage
        line-height. Only affect the line-height if it was a fixed value.

        Tests: text-autosizing/percent-adjust-fixed-line-height.html
               text-autosizing/percent-adjust-number-line-height.html
               text-autosizing/percent-adjust-percent-line-height.html

        * css/StyleBuilder.cpp:
        (WebCore::ApplyPropertyLineHeight::applyValue):

2012-11-28  Dean Jackson  <dino@apple.com>

        <rdar://problem/12584544> REGRESSION: Canvas does not render (device-only)

        Reviewed by Yongjun Zhang.

        Canvas elements were not rendering on the device unless they had some CSS borders
        or backgrounds. This looks like it was a merge error, either by git or by hand
        (it's hard to unravel the #if and see that it strangely does nothing when true).

        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::containsPaintedContent):

2012-11-27  Scott Grant  <scott.grant@apple.com>

        Fixed iOS WebKit build due to deprecation of GSGetDeviceName

        Reviewed by Matt Lilek.

        GSGetDeviceName() has been deprecated in favor of MGCopyAnswer() Do the switch.

        * page/NavigatorBase.cpp:
        (WebCore::NavigatorBase::platform):

2012-11-26  Pratik Solanki  <psolanki@apple.com>

        Merged ToT WebKit r135755. This is a merge back of upstreamed iOS code.

    2012-11-26  Pratik Solanki  <psolanki@apple.com>

        Add ResourceBuffer::append(CFDataRef) to get code to compile with USE(NETWORK_CFDATA_ARRAY_CALLBACK)
        https://bugs.webkit.org/show_bug.cgi?id=102706

        Reviewed by Brent Fulgham.

        No new tests because the flag isn't enabled. Also the functionality should be covered by
        existing tests.

        * loader/ResourceBuffer.cpp:
        (WebCore):
        (WebCore::ResourceBuffer::append):
        * loader/ResourceBuffer.h:
        (ResourceBuffer):
        * loader/mac/ResourceLoaderMac.mm:

2012-11-26  Benjamin Poulain  <bpoulain@apple.com>

        Merge Open Source r135038.

    2012-11-16  Benjamin Poulain  <bpoulain@apple.com>

        Improve the performance of rect transform
        https://bugs.webkit.org/show_bug.cgi?id=101828

        Reviewed by Simon Fraser.

        Mapping a rect and a quad by a transform is a common operation because
        we use it to recompute the repaint rect, overflow rect, etc.

        The way it was done, is by transforming through mapRect()->mapQuad()->4 times mapPoint().
        Each of those functions tests isIdentityOrTranslation() which has to read the whole matrix
        and perform many comparison.
        Because of that, the simple mapping of a rect was loading and checking the matrix 5 times
        too many.

        This patch just cut the intermediary calls.

        On ARM, putting the operation together also has the advantage of loading the matrix
        only once in registers and reusing it for every point.

        * platform/graphics/transforms/TransformationMatrix.cpp:
        (WebCore::TransformationMatrix::mapPoint):
        (WebCore::TransformationMatrix::mapRect):
        * platform/graphics/transforms/TransformationMatrix.h:
        (WebCore):
        (WebCore::TransformationMatrix::mapPointImpl): New convenience function to perform the
        point project without doing isIdentityOrTranslation().

2012-11-16  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/12267471> For single element arrays use the pointer into the CFDataRef instead of copying data

        Merged TOT WebKit r134987.

        The opensource commit upstreamed some of iOS code so this is more than just a straightforward merge.

    2012-11-16  Pratik Solanki  <psolanki@apple.com>

        For single element arrays use the pointer into the CFDataRef instead of copying data
        https://bugs.webkit.org/show_bug.cgi?id=102306
        <rdar://problem/12267471>

        Reviewed by Alexey Proskuryakov.

        We generally copy the data received from CFNetwork into our own buffers. But if the
        CFArrayRef has exactly one CFDataRef inside it, then we can just hold on to the CFDataRef
        and access its memory directly and avoid making a copy.

        This also moves the creation of PurgeableBuffer from CachedResource to SharedBuffer.
        SharedBuffer::createPurgeableBuffer() will avoid creating PurgeableBuffer when the
        SharedBuffer is backed by a NSData/CFDataRef and when we want to optimize and directly use
        the memory in the data array.

        No new tests because no change in functionality.

        * loader/ResourceBuffer.cpp:
        (WebCore::ResourceBuffer::createPurgeableBuffer): Added.
        * loader/ResourceBuffer.h:
        * loader/cache/CachedResource.cpp:
        (WebCore::CachedResource::makePurgeable):
        * platform/SharedBuffer.cpp:
        (WebCore::SharedBuffer::createPurgeableBuffer): Added.
        (WebCore::SharedBuffer::data):
        * platform/SharedBuffer.h:
        * platform/cf/SharedBufferCF.cpp:
        (WebCore::SharedBuffer::platformData): Use reinterpret_cast instead of C-style cast.
        (WebCore::SharedBuffer::maybeTransferPlatformData): Use reinterpret_cast instead of C-style cast.
        (WebCore::SharedBuffer::singleDataArrayBuffer): Added.

2012-11-16  Dean Jackson  <dino@apple.com>

        <rdar://problem/12720233> Adopt fix from 12702460 rather than 12277367

        Reviewed by Benjamin Poulain.

        On pages with touch events in <iframe> children, the TouchListenerMap can get into a state
        where it has nodes from a document that has been detached from the root document, causing a
        crash. If an iframe Document is about to be destroyed, make sure we clear the touch listeners before
        detaching, which means we'll remove the references from the parent Document's TouchListenerMap.

        Remove the code that was clearing the listeners in the detach method.

        * dom/Document.cpp:
        (WebCore::Document::detach):
        (WebCore::Document::prepareForDestruction):

2012-11-14  Yongjun Zhang  <yongjun_zhang@apple.com>

        Initialize SharedBuffer's iOS-specific data members for SharedBuffer::SharedBuffer(size_t).

        Reviewed by Benjamin Poulain.

        This is likely left out by the merge.  To be safe, we should initialize iOS-specific data members in
        constructor SharedBuffer::SharedBuffer(size_t).

        * platform/SharedBuffer.cpp:
        (WebCore::SharedBuffer::SharedBuffer):

2012-11-15  Dan Bernstein  <mitz@apple.com>

        Last part of <rdar://problem/12665102> Reduce number of calls to CTFontTransformGlyphs by caching

        Merged TOT WebKit r133921 and r133923.

    2012-11-08  Geoffrey Garen  <ggaren@apple.com>

        Mac build fix: Mark WidthCache.h 'private' so WebKit can use it.

        Not reviewed.

        * WebCore.xcodeproj/project.pbxproj:

    2012-11-05  Geoffrey Garen  <ggaren@apple.com>

        Optimized kerning and ligatures using caching
        https://bugs.webkit.org/show_bug.cgi?id=101269

        Reviewed by Dan Bernstein.

        Consider three kinds of text layout, and the value of caching for each:

            (1) 1 layout of 100% unique words: small negative value.

            (2) 1 layout of English prose: medium positive value.

            (3) Many layouts of anything: extra-extra-large positive value.

        Since we can't distinguish betwen these workflows a priori, we use statistical
        sampling. To minimize cost in (1) and maximize benefit in (2) and (3), we treat
        each cache access as a statistical sample, and use the cache in proportion to
        the observed probability of duplicate text measurement.

        Benchmark results:
            plt3: 1% faster
            chapter-reflow-once-random: No change [*]
            chapter-reflow-once: 23% faster
            chapter-reflow-twice: 52% faster
            chapter-reflow-thrice: 68% faster
            chapter-reflow: 263% faster
            line-layout: 270% faster

            [*] This is a stress test designed to make everything go wrong for
            caching. It does not represent real world content.

        * GNUmakefile.list.am:
        * Target.pri:
        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.xcodeproj/project.pbxproj:
        * platform/graphics/WidthCache.h: Added.

        (WidthCache): Added a class that caches common word widths. This cache
        could cache more things or more cases in future -- but for now it seems
        to cover the common cases.

        (SmallStringKey): Early profiling showed that allocating an AtomicString
        or String measurably added to the cost of the cache, so I added a custom
        string key that can be stored directly inside the table by value --
        empirically answering an age-old question with which Apple WebKit engineers
        seem to be obsessed.

        (WebCore::WidthCache::SmallStringKey::capacity):
        (WebCore::WidthCache::SmallStringKey::SmallStringKey):
        (WebCore::WidthCache::SmallStringKey::characters):
        (WebCore::WidthCache::SmallStringKey::length):
        (WebCore::WidthCache::SmallStringKey::hash):
        (WebCore::WidthCache::SmallStringKey::isHashTableDeletedValue):
        (WebCore::WidthCache::SmallStringKey::isHashTableEmptyValue):
        (WebCore::WidthCache::SmallStringKeyHash::hash):
        (WebCore::WidthCache::SmallStringKeyHash::equal):
        (SmallStringKeyHash):
        (SmallStringKeyHashTraits):
        (WebCore::WidthCache::SmallStringKeyHashTraits::isEmptyValue): Ditto.

        (WebCore::WidthCache::WidthCache):
        (WebCore::WidthCache::add): Separate out the "don't use the cache" case
        so the compiler can inline it separate, hopefully further reducing cases
        of (1).

        (WebCore::WidthCache::addSlowCase): There's a little subtlety to the
        sampling policy here. Lots of different approaches are possible, and I
        just picked a simple one that seemed to work based on benchmarking. I'll
        point out some interesting sublteties I'm aware of here:

            (*) Since we start at the min sampling rate, a font used for 20 words
            or fewer never allocates a cache. Anecdotally, some fonts seem to
            be used this way.

            (*) When the sampling rate is x / y, sampling all x words in a row
            seems smart because some words may occur more commonly in relation to
            each other (such as 'each' and 'other'), and repeat workloads will
            lay out the same words in order. Intuitively, these are both reasons
            this policy may ramp up more effectively under load.

            (*) I opted for linear back-off instead of, say, exponential back-off
            because we're not trying to back off to infinity -- just to our min
            sampling rate. Since we don't expect the cache to hit for every word,
            my guess is that exponential back-off would be too aggressive.

            (*) Our "eviction" policy has an IQ of 1. I expect this is sufficient
            because it would be surprising to see a million unique words all used
            in the same document. (I would not like to play a Letterpress game
            against such a document.)

        (WebCore::WidthCache::clear): Needed because a font can change, in which
        case we need to ditch its cache.

        (WebCore::operator==): Needed for hashing.

2012-11-15  Dan Bernstein  <mitz@apple.com>

        First part of <rdar://problem/12665102> Reduce number of calls to CTFontTransformGlyphs by caching

        Merged TOT WebKit r133534.

    2012-11-05  Geoffrey Garen  <ggaren@apple.com>

        Cleaned up the Font class in preparation for optimizing kerning and ligatures
        https://bugs.webkit.org/show_bug.cgi?id=101258

        Reviewed by Dan Bernstein.

        * platform/graphics/Font.h:
        (WebCore::Font::typesettingFeatures):
        (WebCore::Font::computeTypesettingFeatures): Compute and cache our
        typesetting features instead of recomputing each time a client asks
        for them. This makes the class interface easier to use because
        "typesettingFeatures()" can appear in more than one expression without
        undue performance cost. This may also be a small speedup to code that
        calls typesettingFeatures() often for other reasons.

        * platform/graphics/Font.cpp:
        (WebCore::Font::Font):
        (WebCore::Font::operator=):
        (WebCore::Font::update): Ditto.

        (WebCore::Font::width): Unforked the width() function so all width-related
        interfaces can benefit from optimization without duplicate code.

2012-11-14  Enrica Casucci  <enrica@apple.com>

        Adding new exported function for WebKit2.

        Reviewed by Benjamin Poulain.

        * WebCore.exp.in:

2012-11-14  Chris Fleizach  <cfleizach@apple.com>

        <rdar://problem/12696300> AX: expose MathML accessibility constructs for iOS

        Reviewed by David Kilzer.

        Expose the accessibility of MathML elements to an iOS API.

        * accessibility/ios/AccessibilityObjectWrapperIOS.mm:
        (-[WebAccessibilityObjectWrapper accessibilityMathRootIndexObject]):
        (-[WebAccessibilityObjectWrapper accessibilityMathRadicandObject]):
        (-[WebAccessibilityObjectWrapper accessibilityMathNumeratorObject]):
        (-[WebAccessibilityObjectWrapper accessibilityMathDenominatorObject]):
        (-[WebAccessibilityObjectWrapper accessibilityMathBaseObject]):
        (-[WebAccessibilityObjectWrapper accessibilityMathSubscriptObject]):
        (-[WebAccessibilityObjectWrapper accessibilityMathSuperscriptObject]):
        (-[WebAccessibilityObjectWrapper accessibilityMathUnderObject]):
        (-[WebAccessibilityObjectWrapper accessibilityMathOverObject]):
        (-[WebAccessibilityObjectWrapper accessibilityMathFencedOpenString]):
        (-[WebAccessibilityObjectWrapper accessibilityMathFencedCloseString]):
        (-[WebAccessibilityObjectWrapper accessibilityIsMathTopObject]):
        (-[WebAccessibilityObjectWrapper accessibilityMathType]):

2012-11-13  Chris Fleizach  <cfleizach@apple.com>

        <rdar://problem/12637680> AX: MathML needs to be semantically exposed to AX tree

        Reviewed by Beth Dakin.

        Integration of OpenSource change r134496.
        AX: MathML types need to be semantically identified in AX tree
        ​https://bugs.webkit.org/show_bug.cgi?id=101263

        Test: platform/mac/accessibility/mathml-elements.html

        * accessibility/AccessibilityObject.h:
        (AccessibilityObject):
        (WebCore::AccessibilityObject::isMathElement):
        (WebCore::AccessibilityObject::isMathFraction):
        (WebCore::AccessibilityObject::isMathFenced):
        (WebCore::AccessibilityObject::isMathSubscriptSuperscript):
        (WebCore::AccessibilityObject::isMathRow):
        (WebCore::AccessibilityObject::isMathUnderOver):
        (WebCore::AccessibilityObject::isMathRoot):
        (WebCore::AccessibilityObject::isMathSquareRoot):
        (WebCore::AccessibilityObject::isMathText):
        (WebCore::AccessibilityObject::isMathNumber):
        (WebCore::AccessibilityObject::isMathOperator):
        (WebCore::AccessibilityObject::isMathFenceOperator):
        (WebCore::AccessibilityObject::isMathSeparatorOperator):
        (WebCore::AccessibilityObject::isMathIdentifier):
        (WebCore::AccessibilityObject::isMathTable):
        (WebCore::AccessibilityObject::isMathTableRow):
        (WebCore::AccessibilityObject::isMathTableCell):
        (WebCore::AccessibilityObject::mathRadicandObject):
        (WebCore::AccessibilityObject::mathRootIndexObject):
        (WebCore::AccessibilityObject::mathUnderObject):
        (WebCore::AccessibilityObject::mathOverObject):
        (WebCore::AccessibilityObject::mathNumeratorObject):
        (WebCore::AccessibilityObject::mathDenominatorObject):
        (WebCore::AccessibilityObject::mathBaseObject):
        (WebCore::AccessibilityObject::mathSubscriptObject):
        (WebCore::AccessibilityObject::mathSuperscriptObject):
        (WebCore::AccessibilityObject::mathFencedOpenString):
        (WebCore::AccessibilityObject::mathFencedCloseString):
        * accessibility/AccessibilityRenderObject.cpp:
        (WebCore::startOfContinuations):
        (WebCore::AccessibilityRenderObject::textUnderElement):
        (WebCore::AccessibilityRenderObject::accessibilityIsIgnored):
        (WebCore::AccessibilityRenderObject::determineAccessibilityRole):
        (WebCore):
        (WebCore::AccessibilityRenderObject::isMathElement):
        (WebCore::AccessibilityRenderObject::isMathFraction):
        (WebCore::AccessibilityRenderObject::isMathFenced):
        (WebCore::AccessibilityRenderObject::isMathSubscriptSuperscript):
        (WebCore::AccessibilityRenderObject::isMathRow):
        (WebCore::AccessibilityRenderObject::isMathUnderOver):
        (WebCore::AccessibilityRenderObject::isMathSquareRoot):
        (WebCore::AccessibilityRenderObject::isMathRoot):
        (WebCore::AccessibilityRenderObject::isMathOperator):
        (WebCore::AccessibilityRenderObject::isMathFenceOperator):
        (WebCore::AccessibilityRenderObject::isMathSeparatorOperator):
        (WebCore::AccessibilityRenderObject::isMathText):
        (WebCore::AccessibilityRenderObject::isMathNumber):
        (WebCore::AccessibilityRenderObject::isMathIdentifier):
        (WebCore::AccessibilityRenderObject::isMathTable):
        (WebCore::AccessibilityRenderObject::isMathTableRow):
        (WebCore::AccessibilityRenderObject::isMathTableCell):
        (WebCore::AccessibilityRenderObject::isIgnoredElementWithinMathTree):
        (WebCore::AccessibilityRenderObject::mathRadicandObject):
        (WebCore::AccessibilityRenderObject::mathRootIndexObject):
        (WebCore::AccessibilityRenderObject::mathNumeratorObject):
        (WebCore::AccessibilityRenderObject::mathDenominatorObject):
        (WebCore::AccessibilityRenderObject::mathUnderObject):
        (WebCore::AccessibilityRenderObject::mathOverObject):
        (WebCore::AccessibilityRenderObject::mathBaseObject):
        (WebCore::AccessibilityRenderObject::mathSubscriptObject):
        (WebCore::AccessibilityRenderObject::mathSuperscriptObject):
        (WebCore::AccessibilityRenderObject::mathFencedOpenString):
        (WebCore::AccessibilityRenderObject::mathFencedCloseString):
        * accessibility/AccessibilityRenderObject.h:
        (AccessibilityRenderObject):
        * accessibility/ios/AccessibilityObjectWrapperIOS.mm:
        (-[WebAccessibilityObjectWrapper accessibilityMathRootIndexObject]):
        (-[WebAccessibilityObjectWrapper accessibilityMathRadicanObject]):
        (-[WebAccessibilityObjectWrapper accessibilityMathNumeratorObject]):
        (-[WebAccessibilityObjectWrapper accessibilityMathDenominatorObject]):
        (-[WebAccessibilityObjectWrapper accessibilityMathBaseObject]):
        (-[WebAccessibilityObjectWrapper accessibilityMathSubscriptObject]):
        (-[WebAccessibilityObjectWrapper accessibilityMathSuperscriptObject]):
        (-[WebAccessibilityObjectWrapper accessibilityMathUnderObject]):
        (-[WebAccessibilityObjectWrapper accessibilityMathOverObject]):
        (-[WebAccessibilityObjectWrapper accessibilityMathFencedOpenString]):
        (-[WebAccessibilityObjectWrapper accessibilityMathFencedCloseString]):
        (-[WebAccessibilityObjectWrapper accessibilityIsMathTopObject]):
        (-[WebAccessibilityObjectWrapper accessibilityMathType]):
        * accessibility/mac/WebAccessibilityObjectWrapper.mm:
        (-[WebAccessibilityObjectWrapper additionalAccessibilityAttributeNames]):
        (createAccessibilityRoleMap):
        (-[WebAccessibilityObjectWrapper subrole]):
        (-[WebAccessibilityObjectWrapper accessibilityAttributeValue:]):
        * html/HTMLAttributeNames.in:
        * rendering/mathml/RenderMathMLBlock.cpp:
        (WebCore::RenderMathMLBlock::RenderMathMLBlock):
        * rendering/mathml/RenderMathMLBlock.h:
        (WebCore::RenderMathMLBlock::isRenderMathMLFenced):
        (WebCore::RenderMathMLBlock::isRenderMathMLFraction):
        (WebCore::RenderMathMLBlock::isRenderMathMLRoot):
        (WebCore::RenderMathMLBlock::isRenderMathMLSquareRoot):
        (WebCore::RenderMathMLBlock::isRenderMathMLSubSup):
        (WebCore::RenderMathMLBlock::isRenderMathMLUnderOver):
        (WebCore::RenderMathMLBlock::setIgnoreInAccessibilityTree):
        (WebCore::RenderMathMLBlock::ignoreInAccessibilityTree):
        (RenderMathMLBlock):
        * rendering/mathml/RenderMathMLFenced.cpp:
        (WebCore::RenderMathMLFenced::createMathMLOperator):
        (WebCore::RenderMathMLFenced::makeFences):
        (WebCore::RenderMathMLFenced::addChild):
        * rendering/mathml/RenderMathMLFenced.h:
        (WebCore::RenderMathMLFenced::isRenderMathMLFenced):
        (RenderMathMLFenced):
        * rendering/mathml/RenderMathMLFraction.h:
        (WebCore::RenderMathMLFraction::isRenderMathMLFraction):
        * rendering/mathml/RenderMathMLOperator.cpp:
        (WebCore::RenderMathMLOperator::RenderMathMLOperator):
        (WebCore::RenderMathMLOperator::updateFromElement):
        (WebCore::RenderMathMLOperator::createGlyph):
        * rendering/mathml/RenderMathMLOperator.h:
        (WebCore::RenderMathMLOperator::setOperatorType):
        (WebCore::RenderMathMLOperator::operatorType):
        (RenderMathMLOperator):
        * rendering/mathml/RenderMathMLRoot.h:
        (WebCore::RenderMathMLRoot::isRenderMathMLRoot):
        * rendering/mathml/RenderMathMLSquareRoot.h:
        (WebCore::RenderMathMLSquareRoot::isRenderMathMLSquareRoot):
        * rendering/mathml/RenderMathMLSubSup.h:
        (WebCore::RenderMathMLSubSup::isRenderMathMLSubSup):
        * rendering/mathml/RenderMathMLUnderOver.h:
        (WebCore::RenderMathMLUnderOver::isRenderMathMLUnderOver):

2012-11-13  Enrica Casucci  <enrica@apple.com>

        Moving to WebCore the code to compute positions at boundary of granularity
        in order to share it betweend WebKit and WebKit2. The original code
        comes from WebKit and is platform specific for iOS.

        Reviewed by Benjamin Poulain.

        The WebKit implementation defines a new type of granularity to
        identify movements relative to the entire document, therefore I've
        added a new value to the enum TextGranularity called DocumentGranilarity.
        This requires a number of changes to FrameSelection.cpp and VisibleSelection.cpp
        to please the compiler when dealing with switch statements on a value of
        type TextGranularity. All the changes have been added under platform guard.

        * WebCore.exp.in: Added new exported functions.
        * editing/FrameSelection.cpp:
        (WebCore::FrameSelection::modifyExtendingRight):
        (WebCore::FrameSelection::modifyExtendingForward):
        (WebCore::FrameSelection::modifyMovingRight):
        (WebCore::FrameSelection::modifyMovingForward):
        (WebCore::FrameSelection::modifyExtendingLeft):
        (WebCore::FrameSelection::modifyExtendingBackward):
        (WebCore::FrameSelection::modifyMovingLeft):
        (WebCore::FrameSelection::modifyMovingBackward):
        * editing/TextGranularity.h: Added value DocumentGranularity.
        * editing/VisibleSelection.cpp:
        (WebCore::VisibleSelection::setStartAndEndFromBaseAndExtentRespectingGranularity):
        * editing/visible_units.cpp: The list below includes all the new functions added.
        (WebCore::directionIsDownstream):
        (WebCore::atBoundaryOfGranularity):
        (WebCore::withinTextUnitOfGranularity):
        (WebCore::nextCharacterBoundaryInDirection):
        (WebCore::nextWordBoundaryInDirection):
        (WebCore::nextSentenceBoundaryInDirection):
        (WebCore::nextLineBoundaryInDirection):
        (WebCore::nextParagraphBoundaryInDirection):
        (WebCore::nextDocumentBoundaryInDirection):
        (WebCore::positionOfNextBoundaryOfGranularity):
        (WebCore::enclosingTextUnitOfGranularity):
        (WebCore::distanceBetweenPositions):
        * editing/visible_units.h: Added declarations for the new functions.

2012-11-12  Dean Jackson  <dino@apple.com>

        <rdar://problem/12675869> WebGL on iOS should translate shaders using ANGLE

        WebGL on iOS was only using ANGLE to validate shader sources before passing them
        unmodified to the platform compiler. Update the code to be similar to OS X, where
        we pass translated shader code into the platform. This allows us to do things like
        protect against infinite loops, long variable names, reading off the end of arrays,
        and some driver-level bugs in built-in functions.

        Reviewed by Joseph Pecoraro.

        Covered by existing tests.

        * platform/graphics/ANGLEWebKitBridge.cpp:
        (WebCore::getSymbolInfo): New function for translation mapping of variable names.
        (WebCore::ANGLEWebKitBridge::compileShaderSource): Follow the code from OS X.
        * platform/graphics/mac/GraphicsContext3DMac.mm:
        (WebCore::GraphicsContext3D::GraphicsContext3D): Make sure our ANGLE outputs OpenGL ES 2.0 compatible code.

2012-11-10  Dan Bernstein  <mitz@apple.com>

        WebCore part of <rdar://problem/12672703> WebKitScreenFontSubstitutionEnabledKey defaults to YES, but should default to NO to allow fast kerning and ligatures

        Reviewed by Anders Carlsson.

        * platform/graphics/Font.cpp:
        (WebCore::Font::Font): Added a call to FontDescription::setUsePrinterFont().

2012-11-09  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/12290266> optimizeLegibility should not display ligatures on iOS in some cases

        Merged TOT WebKit r134146.

    2012-11-09  Dan Bernstein  <mitz@apple.com>

        SimpleFontData::getCFStringAttributes sets some attributes to their default values, but shouldn’t
        https://bugs.webkit.org/show_bug.cgi?id=101799

        Reviewed by Alexey Proskuryakov.

        In some configurations, setting kCTLigatureAttributeName to its default value of 1 yields
        different behavior from not setting it at all. We can get the correct behavior and greatly
        simplify the code by not setting attributes to their default values.

        * platform/graphics/mac/SimpleFontDataCoreText.cpp:
        Removed redundant #import directives and changed the remaining ones to #include.
        (WebCore::SimpleFontData::getCFStringAttributes): Changed to use a mutable dictionary and
        only add attributes that have non-default values.

2012-11-09  Matt Lilek  <mrl@apple.com>

        <rdar://problem/12515283> WebCore should switch from GSSystemHasCapability to MobileGestalt

        Reviewed by Scott Grant.

        Replace use of GSSystemHasCapability and link against libMobileGestalt.

        * Configurations/WebCore.xcconfig:
        * css/MediaQueryEvaluator.cpp:
        (WebCore::video_playable_inlineMediaFeatureEval):

2012-11-08  Joseph Pecoraro  <pecoraro@apple.com>

        Fix potential NSDateFormatter Leak if Locale Changed

        Reviewed by Timothy Hatcher.

        NSDateFormatters are stored in a HashMap and are cleared if the locale
        changed. However, the formatters returned from createFormatterForType
        were never being released, so even if the map was cleared there still
        would have been an unbalanced retain count.

        * platform/text/ios/LocalizedDateCache.mm:
        (WebCore::LocalizedDateCache::formatterForDateType):

2012-11-08  Alice Liu  <alice.liu@apple.com>

        <rdar://problem/11811037> Sub-TLF: WebKit adoption of Web Content Filtering
        
        Reviewed by David Kilzer.

        No new tests.

        * WebCore.exp.in: Enable _wkFilter* declarations for iOS platform.
        Moved the non-relevant ones to their own section, maintaining the previous #if conditions.
        * loader/MainResourceLoader.cpp:
        (WebCore::MainResourceLoader::MainResourceLoader):
        (WebCore::MainResourceLoader::~MainResourceLoader):
        (WebCore::MainResourceLoader::didCancel):
        (WebCore::MainResourceLoader::didReceiveResponse):
        For iOS, both HTTP and HTTPS are passed through the filter. Not so for Mac.
        (WebCore::MainResourceLoader::didReceiveData):
        (WebCore::MainResourceLoader::didFinishLoading):
        (WebCore::MainResourceLoader::didFail):
        * loader/MainResourceLoader.h:
        (MainResourceLoader):
        * platform/ios/WebCoreSystemInterfaceIOS.mm: Add wkFilter* forward declarations.
        * platform/mac/WebCoreSystemInterface.h: Removed redundant forward declaration of CALayer.
        Enable wkFilter* declarations for iOS, pushing down non-relevant ones into own section maintaining their previous #if conditions. 

2012-11-07  Enrica Casucci  <enrica@apple.com>

        Adding default constructor to SelectionRect class.

        Reviewed by Benjamin Poulain and Simon Fraser.

        The default constructor is needed to be used by the argument decoder
        templates for WebKit2.

        * WebCore.exp.in:
        * platform/ios/SelectionRect.cpp:
        (WebCore::SelectionRect::SelectionRect):
        * platform/ios/SelectionRect.h:

2012-11-07  Benjamin Poulain  <benjamin@webkit.org>

        Merge OpenSource WebKit r133545.

    2012-11-05  Benjamin Poulain  <benjamin@webkit.org>

        TransformOperationInfo's constructor is really slow
        https://bugs.webkit.org/show_bug.cgi?id=101143

        Reviewed by Sam Weinig.

        TransformOperationInfo() was slow for a few reasons:
        -The function used a lot of branches. The basic assumption is that the input
         is incorrect, thus every character is an opportunity to fail.
        -Every branch had to be tested in order. If the name was matching the last if()
         all the previous names had to be tested.
        -Since equalIgnoringCase() was used in every branch, it was forcing the case folding
         every time.
        -When the string is 16bits, the case folding was using ICU, which was incredibly inefficient.

        This can be fixed by either
        1) Compute the lowercase name, then match it to a HashMap.
        2) Write a tree to quickly reduce the number of branch needed.

        The first solution is not viable because 16bits strings case folding
        remains an important bottleneck.

        Instead, the code now splits the names on simple characteristics to
        match any name in a limited number of branches.

        The assumption is the input is correct, so & is used instead of && to
        avoid branches in favor of conditional instructions.

        * css/CSSParser.cpp:
        (WebCore::TransformOperationInfo::TransformOperationInfo):

2012-11-07  Jer Noble  <jer.noble@apple.com>

        <rdar://problem/12626355> REGRESSION(Innsbruck): Playing audio on apple.com/html5 draws white circle (media controls?)

        Reviewed by Joseph Pecoraro.

        Since the controls are displayed by the plugin, make the WebKit controls hidden on iOS. 

        * css/mediaControlsiOS.css:
        (audio::-webkit-media-controls-panel, video::-webkit-media-controls-panel):

2012-11-05  Dean Jackson  <dino@apple.com>

        <rdar://problem/12277367> Crashes in WebCore::Document::eventRectRelativeToRoot when visiting certain sites

        Reviewed by Simon Fraser.

        When a non-top-level document (such as an iframe) has touch event listeners registered, it
        tells its top-level document to keep a list of nodes in order to generate touch regions.
        As long as the relationship between an iframe document and the parent document is preserved,
        then the parent document can accurately manage that list. However, if the iframe is detached
        from its parent before it attempts to clear its event listeners, it no longer knows that it
        isn't the root of the tree, and never tells the parent document to remove the nodes that
        it has kept in the touch event list.

        The solution is to make sure the touch events are cleared as a document is detached
        from its parent.

        Test: fast/events/touch/touch-iframe-detach-attach.html

        * dom/Document.cpp:
        (WebCore::Document::detach): call clearTouchEventListeners().

2012-11-02  Matt Lilek  <mrl@apple.com>

        <rdar://problem/12519191> SWB: WebCore/WebKit fail to build with clang-425

        Reviewed by David Carson.

        * page/ios/WebEventRegion.h:
        * page/ios/WebEventRegion.mm:
        (-[WebEventRegion initWithPoints::::]):
        Correct the method signature to name the variables inP[1-4] (although this is still gross).

        * rendering/RenderThemeIOS.cpp:
        (WebCore::RenderThemeIOS::adjustSliderThumbSize):
        Fix incorrect comparison.

2012-10-30  Eric Carlson  <eric.carlson@apple.com>

        <rdar://problem/12593706> Support text tracks for in-line video playback

        Reviewed by NOBODY (OOPS!).

        Enabling existing layout tests is tracked by <rdar://problem/12602864>

        * Configurations/FeatureDefines.xcconfig: Define ENABLE_VIDEO_TRACK.

        * DerivedSources.make: Build the iOS media controls CSS overrides.

        * WebCore.xcodeproj/project.pbxproj: Add mediaControlsiOS.css.
        * css/mediaControlsiOS.css: Added.

        * rendering/RenderThemeIOS.cpp:
        (WebCore::RenderThemeIOS::extraMediaControlsStyleSheet): Return the iOS media controls CSS overrides.
        (WebCore):
        * rendering/RenderThemeIOS.h:

2012-10-29  Jer Noble  <jer.noble@apple.com>

        <rdar://problem/8978236> Sub-TLF: Support fullscreen API on iOS

        Reviewed by Ian Henderson.

        Enable WebKit Full Screen API by setting ENABLE_FULLSCREEN_API.

        * Configurations/FeatureDefines.xcconfig:
        * DerivedSources.make: Do not include fullscreenQuickTime.css on iOS.

        Add !PLATFORM(IOS) guards around Cocoa-based classes:
        * platform/mac/WebCoreFullScreenWindow.h:
        * platform/mac/WebCoreFullScreenWindow.mm:

2012-10-29  Eric Carlson  <eric.carlson@apple.com>

        <rdar://problem/12593706> Support text tracks for in-line video playback

        Merged TOT WebKit r132842.

    2012-10-29  Eric Carlson  <eric.carlson@apple.com>
    
            Support captions when PLUGIN_PROXY_FOR_VIDEO
            https://bugs.webkit.org/show_bug.cgi?id=100690
    
            Reviewed by Simon Fraser.
    
            When built with PLUGIN_PROXY_FOR_VIDEO, WebCore uses a plug-in for the media element's
            platform media engine. Update this code path so the shadow DOM elements used to display
            text tracks are created and configured correctly.
    
            * html/HTMLMediaElement.cpp:
            (WebCore::HTMLMediaElement::configureMediaControls): Create media controls if necessary.
    
            * rendering/RenderEmbeddedObject.cpp:
            (WebCore::RenderEmbeddedObject::layout): Set the position and size of the shadow DOM when the
                position of the embedded element changes.
            * rendering/RenderEmbeddedObject.h:
    
2012-10-26  Dan Bernstein  <mitz@apple.com>

        Moved some iOS-specific bits of the SimpleFontData implementation into their own file
        in preparation for <rdar://problem/12531517> Move WebKit off of GSFont

        Reviewed by Anders Carlsson.

        Created SimpleFontDataIOS.mm and moved the iOS implementations of SimpleFontData functions
        that had mostly disjoint iOS and OS X implementations into it. Deleted the iOS implementations
        of those functions from SimpleFontDataMac.mm, and surrounded the remaining parts by
        #if !PLATFORM(IOS) guards as needed. This made SimpleFontDataMac.mm much more similar to its
        version in trunk.

        * WebCore.xcodeproj/project.pbxproj: Added SimpleFontDataIOS.mm.
        * platform/graphics/ios/SimpleFontDataIOS.mm: Copied from Source/WebCore/platform/graphics/mac/SimpleFontDataMac.mm.
        (WebCore::SimpleFontData::platformInit):
        (WebCore::SimpleFontData::platformCharWidthInit):
        (WebCore::SimpleFontData::createScaledFontData):
        (WebCore::SimpleFontData::containsCharacters):
        (WebCore::SimpleFontData::determinePitch):
        (WebCore::SimpleFontData::platformWidthForGlyph):
        * platform/graphics/mac/SimpleFontDataMac.mm:
        (WebCore::SimpleFontData::platformInit):
        (WebCore::copyFontTableForTag):
        (WebCore::SimpleFontData::platformCharWidthInit):
        (WebCore::SimpleFontData::createScaledFontData):
        (WebCore::SimpleFontData::containsCharacters):
        (WebCore::SimpleFontData::determinePitch):
        (WebCore::SimpleFontData::platformWidthForGlyph):

2012-10-24  Benjamin Poulain  <bpoulain@apple.com>

        Get rid of WebThreadPrepareForDrawing

        Reviewed by Ian Henderson.

        Replace WebThreadPrepareForDrawing() by WebThreadLock().

        We will replace WKWindowPrepareForDrawing() by WebThreadLock()
        in the caller code then we can remove WKWindowPrepareForDrawing.

        * wak/WKWindow.mm:
        (WKWindowPrepareForDrawing):
        * wak/WebCoreThread.h:
        * wak/WebCoreThread.mm:

2012-10-24  Benjamin Poulain  <bpoulain@apple.com>

        Make WebThreadLock() safe from any thread

        Reviewed by Ian Henderson.

        Checking the current thread before locking is a common pattern in WebCore and WebKit.
        The patch makes WebThreadLock() handle that case.

        Replace the use of if(notWebThread)->lock() by the new all-powerful WebThreadLock.

        * WebCore.exp.in:
        * accessibility/ios/AccessibilityObjectWrapperIOS.mm:
        (-[WebAccessibilityObjectWrapper _prepareAccessibilityCall]):
        * platform/graphics/ca/mac/PlatformCALayerMac.mm:
        (-[WebAnimationDelegate animationDidStart:]):
        * wak/WebCoreThread.h:
        * wak/WebCoreThread.mm:

2012-10-23  Enrica Casucci  <enrica@apple.com>

        Added new exported method needed by WebKit2.

        Reviewed by Benjamin Poulain.

        * WebCore.exp.in:

2012-10-22  Joseph Pecoraro  <pecoraro@apple.com>

        <rdar://problem/12537393> REGRESSION (Innsbruck): Date and Time input strings not formatted correctly

        Reviewed by David Kilzer.

        OpenSource switch localization from global WebCore functions to a
        Localizer (Locale) class. Replace the date localization in the
        LocaleMac class with the iOS specific versions, but share the rest
        of the code.
        
        Move the remaining iOS specific function (maximumWidthForDateType)
        into the Localizer object and remove the old LocalizedDate files.
        OpenSource removed LocalizedDate in r129973, which we merged past.

        * WebCore.xcodeproj/project.pbxproj:
        * platform/text/LocalizedDate.h: Removed.
        * platform/text/ios/LocalizedDateIOS.mm: Removed.
        Remove old localized date code. It has moved into the Localizer class.

        * platform/text/Localizer.h:
        * platform/text/mac/LocaleMac.h:
        * platform/text/mac/LocaleMac.mm:
        (WebCore::LocaleMac::parseDateTime):
        (WebCore::LocaleMac::formatDateTime):
        (WebCore::LocaleMac::maximumWidthForDateType):
        Copy the old iOS implementations here, replacing the Mac versions.

        * rendering/RenderThemeIOS.cpp:
        (WebCore::adjustInputElementButtonStyle):
        Switch the call from the global function to the Localizer object.

2012-10-20  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/12532203> Safari Alexa Test: Safari crashed at WebCore::RenderBlock::constructTextRun when running Alexa test.

        Merged ToT WebKit r130319.

    2012-10-03  Stephen Chenney  <schenney@chromium.org> 

        Font data is purged while fonts are still using it 
        https://bugs.webkit.org/show_bug.cgi?id=93640 

        Reviewed by Eric Seidel. 

        Move the handling of custom font pruning from Document to FontFallbackList. 
        The previous inplementation allowed fonts to be removed before all their 
        clients were done. This change moves handling of custom font purging to the 
        FontFallbackList class, which is the shared object that is only removed 
        when all clients of a font are done with it. This fixes a crash in Angry 
        Birds due to a seamless iframe and some failing tests in fast/frames/seamless. 

        The specific element that causes problems is: 
        <iframe id="ingame_frame0" name="ingame_frame0" frameborder="0" seamless="true" 
         src="http://chrome.angrybirds.com/ingame_graphic.html" 
         onload="this.style.opacity = 1; parent.adLoaded();" scrolling="no" 
         style="opacity: 1; -webkit-transition: opacity 1s ease-in-out 0s; 
         position: absolute; border: 0px; width: 312px; height: 320px; z-index: 
         300; overflow: hidden; visibility: visible;"></iframe> 
        The source document uses the same font as the embedding document. 

        Tests: fast/frames/seamless/seamless-custom-font-pruning-crash.html 
              fast/frames/seamless/seamless-nested-crash.html 

        * css/CSSFontFaceSource.cpp: 
        (WebCore::CSSFontFaceSource::getFontData): Remove code to register the font with the document. 
        * css/CSSSegmentedFontFace.cpp: 
        (WebCore::CSSSegmentedFontFace::getFontData): Remove code to register the font with the document. 
        * dom/Document.cpp: 
        (WebCore::Document::~Document): Remove code that records and purges custom fonts. 
        (WebCore): 
        (WebCore::Document::reportMemoryUsage): Remove reference to non-existent objects. 
        * dom/Document.h: 
        (WebCore): 
        (Document): Remove method declarations for custom font handling. 
        * platform/graphics/FontFallbackList.h: 
        (FontFallbackList): Moved some code around and made non-copyable. 
        (WebCore::FontFallbackList::setGlyphPageZero): Moved. 
        (WebCore::FontFallbackList::setGlyphPages): Moved. 
        * platform/graphics/GlyphPageTreeNode.cpp: 
        (WebCore::GlyphPageTreeNode::pruneFontData): Removed unnecessary null check. 
        * platform/graphics/SegmentedFontData.cpp: 
        (WebCore::SegmentedFontData::~SegmentedFontData): Added code to prune the Glyph pages when this is deleted. 
        * platform/graphics/SimpleFontData.cpp: 
        (WebCore::SimpleFontData::~SimpleFontData): Added code to prune the Glyph pages when this is deleted.

2012-10-16  Benjamin Poulain  <bpoulain@apple.com>

        Implement ChromeClient::needTouchEvents() on iOS

        Reviewed by Ian Henderson.

        OpenSource WebKit relies on ChromeClient::needTouchEvents() to decide if WebKit2 needs
        to forward touch events.

        This patch implement that feature until we have forwarding for the active touch regions.

        * dom/DocumentIOS.cpp:
        (WebCore::Document::addTouchEventListener):
        (WebCore::Document::removeTouchEventListener):
        (WebCore::Document::clearTouchEventListeners):

2012-10-15  Benjamin Poulain  <bpoulain@apple.com>

        Extract a PlatformTouchPoint type from the attributes of PlatformTouchEvent

        Reviewed by Ian Henderson.

        Add a new class PlatformTouchPoint encapsulating the information relative to every touch.

        The goal is to make our design closer to OpenSource WebKit and in turn, closer to WebKit2's design.

        The final goal is to make WebKit1 handling similar to what is needed for WebKit2 so that the implementation
        of WebKit2 becomes trivial. This should also reduces the risks of having to implementation on top of WebCore.

        * WebCore.xcodeproj/project.pbxproj:
        * page/ios/EventHandlerIOSTouch.cpp:
        (WebCore::allTouchesAreTouchPhaseBegan):
        (WebCore::EventHandler::handleTouchEvent):
        * platform/ios/PlatformEventFactoryIOS.mm:
        (WebCore::convertTouchPhase):
        (PlatformTouchPointBuilder):
        (WebCore::PlatformTouchPointBuilder::PlatformTouchPointBuilder):
        (WebCore):
        (WebCore::PlatformTouchEventBuilder::PlatformTouchEventBuilder):
        * platform/ios/PlatformTouchEventIOS.h:
        (WebCore::PlatformTouchEvent::PlatformTouchEvent):
        (WebCore::PlatformTouchEvent::touchCount):
        (WebCore::PlatformTouchEvent::touchLocationAtIndex):
        (WebCore::PlatformTouchEvent::touchIdentifierAtIndex):
        (WebCore::PlatformTouchEvent::touchPhaseAtIndex):
        (PlatformTouchEvent):
        * platform/ios/PlatformTouchPointIOS.h: Added.
        (PlatformTouchPoint):
        Little cleaning: move the TouchPhaseType in the PlatformTouchPoint scope instead of having
        it global to WebCore.

        (WebCore::PlatformTouchPoint::identifier):
        (WebCore::PlatformTouchPoint::location):
        (WebCore::PlatformTouchPoint::phase):
        (WebCore::PlatformTouchPoint::PlatformTouchPoint):

2012-10-18  Benjamin Poulain  <bpoulain@apple.com>

        Merge OpenSource WebKit r131844 to fix WebKit2.

    2012-10-18  Benjamin Poulain  <bpoulain@apple.com>

        [WK2] WebKit2 does not build without PLUGIN_PROCESS on Mac
        https://bugs.webkit.org/show_bug.cgi?id=99771

        Reviewed by Anders Carlsson.

        * WebCore.exp.in: The symbol is used by WebCore Test Support, move it
        to the general section.

2012-10-18  Pratik Solanki  <psolanki@apple.com>

        Part of <rdar://problem/12490774> ImageSource::createFrameAtIndex() can avoid calculating scale when we don't subsample

        Reviewed by Ian Henderson.

        Fix bug in calculation of scaleOut. We should use the width without taking orientation into
        account because we are comparing it to CGImageWidth() which does not look at orientation.

        * platform/graphics/cg/ImageSourceCG.cpp:
        (WebCore::ImageSource::createFrameAtIndex):

2012-10-18  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/12490774> ImageSource::createFrameAtIndex() can avoid calculating scale when we don't subsample

        Reviewed by Ian Henderson.

        Avoid calling into frameSizeAtIndex() through size() when we are not really subsampling. The
        scaleOut value in such cases is always 1.

        * platform/graphics/cg/ImageSourceCG.cpp:
        (WebCore::ImageSource::createFrameAtIndex):

2012-10-18  Joseph Pecoraro  <pecoraro@apple.com>

        <rdar://problem/12514223> "<img xlink:src=…" becomes "<img xlink:xlink:src=" after calling -[UITextView setContentAsHTMLString:]

        Reviewed by Yongjun Zhang.

        On iOS we were avoiding initializing XLinkNames in the simple document
        path to speed up text view initialization as much as possible. After the
        merge when inserting markup WebCore can check XLink globals, like the
        XLink namespace. When the globals are not initialized yet (null), content
        with a null namespace was mistakenly assumed to be XLink related.

        XLink initialization was the only set we were skipping, and it has very
        few globals compared to the rest, so lets just not skip them.

        * page/Frame.cpp:
        (WebCore::Frame::Frame):
        No longer skip XLink names initialization.

        * page/Frame.h:
        (WebCore::Frame::init):
        We can remove the lazy iOS initialization here.

2012-10-17  Benjamin Poulain  <bpoulain@apple.com>

        <rdar://problem/12529059> CoreGraphics change for CoreGraphics broke WebKit build
        Fix WebKit build with latest CoreGraphics

        Reviewed by David Kilzer.

        The compiler is bitching about kCGImageCachingTemporary being deprecated. Apparently
        it has become the default again.

        * platform/graphics/cg/ImageSourceCG.cpp:
        (WebCore::ImageSource::createFrameAtIndex):

2012-10-18  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/12402300> Safari hung on BBC Burmese page

        Merged TOT WebKit r131703.

    2012-10-17  Dan Bernstein  <mitz@apple.com>

        REGRESSION (r95391): ComplexTextController is unnecessarily slow with characters with combining marks when the base character is not covered by any font
        https://bugs.webkit.org/show_bug.cgi?id=99654

        Reviewed by Adele Peterson.

        When the base character of a combining character sequence is not covered by any one of the
        available fonts, there is no point looking for a font that covers the entire sequence, nor
        to try to use a combination of fallback fonts for the entire sequence.

        * platform/graphics/SimpleFontData.h:
        (WebCore::SimpleFontData::systemFallback): Moved ComplexTextController::systemFallbackFontData
        here and renamed it.
        * platform/graphics/mac/ComplexTextController.cpp:
        (WebCore::ComplexTextController::collectComplexTextRuns): This function used to use
        systemFallbackFontData() whenever Font::fontDataForCombiningCharacterSequence returned 0
        for a base character with combining marks, regardless of whether the base character was
        covered by any font. Changed it to preserve the return value of
        fontDataForCombiningCharacterSequence, which is now 0 only if the base charcater is not in
        any font, while systemFallbackFontData() is used to indicate that no single font in the
        fallback list covers all characters in the sequence, but the base character is in some font.
        * platform/graphics/mac/ComplexTextController.h:
        (ComplexTextController): Moved systemFallbackFontData from here to SimpleFontData.
        * platform/graphics/mac/ComplexTextControllerCoreText.mm:
        (WebCore::ComplexTextController::collectComplexTextRunsForCharacters): Updated for the above
        move.
        * platform/graphics/mac/FontComplexTextMac.cpp:
        (WebCore::Font::fontDataForCombiningCharacterSequence): Changed to return
        systemFallbackFontData() if no single font in the fallback list covers all characters in the
        sequence, while using 0 to signal the base character does not exist in any font.

2012-10-17  Joseph Pecoraro  <pecoraro@apple.com>

        <rdar://problem/12363971> Corrupt result for HTML Select using OptGroup with multiple-select
        
        Merge OpenSource WebKit r131534.

    2012-10-16  Joseph Pecoraro  <pecoraro@apple.com>

        HTMLSelectElement::optionSelectedByUser confuses listIndex and optionIndex
        https://bugs.webkit.org/show_bug.cgi?id=99523

        Reviewed by Simon Fraser.

        There was a call site where the optionIndex was being passed to a
        function that expected the listIndex. Convert appropriately.

        Extends Test: platform/mac/fast/objc/dom-html-select-activate.html

        * html/HTMLSelectElement.cpp:
        (WebCore::HTMLSelectElement::optionSelectedByUser):

2012-10-15  Joseph Pecoraro  <pecoraro@apple.com>

        Reviewed by Yongjun Zhang.

        Correct harmless merge issue. RenderThemeMac is already ignored on iOS
        by #if !PLATFORM(IOS), so remove an inner iOS block. iOS uses
        RenderThemeIPhone, which already inherits the default value of false.

        * rendering/RenderThemeMac.h:

2012-10-15  Joseph Pecoraro  <pecoraro@apple.com>

        <rdar://problem/12500246> REGRESSION(10B69-10B89): <select multiple> is sized incorrectly on iOS

        Reviewed by David Kilzer.

        iOS should skip the usesMenuList block when considering creating child renderers. On iOS
        the <select multiple> does not use a menu list, but wishes to not draw child renderers.

        * html/HTMLSelectElement.cpp:
        (WebCore::HTMLSelectElement::childShouldCreateRenderer):

2012-10-16  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/12408638> Add ENABLE(IOS_GESTURE_EVENTS) to avoid conflicting with ToT's ENABLE(GESTURE_EVENTS).

        Reviewed by David Kilzer.

        For iOS gesture events related code, instead of wrapping it with ENABLE_TOUCH_EVENT, use ENABEL_IOS_GESTURE_EVENTS.  This
        can also avoid conflicting with ToT WebKit's ENABLE_GESTURE_EVENTS.

        * WebCore.exp.in:
        * bindings/objc/DOMEvents.h:
        * bindings/objc/DOMEvents.mm:
        (kitClass):
        * bindings/objc/PublicDOMInterfacesIOS.h:
        * dom/EventNames.in:
        * dom/GestureEvent.h:
        * dom/GestureEvent.idl:
        * dom/GestureEventIOS.cpp:
        * page/EventHandler.h:
        (EventHandler):
        * page/ios/EventHandlerIOSTouch.cpp:
        (WebCore):
        (WebCore::EventHandler::handleTouchEvent):

2012-10-15  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/12476025> build-webkit --development tries to build WKSI and DRT for x86_64, but only builds WebKit for i386

        Reviewed by David Carson.

        * Configurations/DebugRelease.xcconfig: Use
        ARCHS_STANDARD_32_64_BIT.

2012-10-11  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/12473225> CVE-2012-5112: Innsbruck: SVG use-after-free [Pwnium 2] (98851)
        
        Merge WebKit r130855.

    2012-10-09  Philip Rogers  <pdr@google.com>

        Recursively detach SVGElementInstances
        https://bugs.webkit.org/show_bug.cgi?id=98851

        Reviewed by Ryosuke Niwa and Abhishek Arya

        Before this patch, SVGElementInstance child nodes were not being detached. This
        patch makes detach() recursively detach SVGElementInstances.

        * svg/SVGElementInstance.cpp:
        (WebCore::SVGElementInstance::detach):

2012-10-11  Dan Bernstein  <mitz@apple.com>

        Introduce WKGetVerticalGlyphsForCharacters and deploy it

        Reviewed by Dave Kilzer.

        * WebCore.exp.in: Moved the _wkGetVerticalGlyphsForCharacters export out of an #if !PLATFORM(IOS)
        section.
        * platform/graphics/mac/GlyphPageTreeNodeMac.cpp:
        (WebCore::GlyphPage::fill): Removed PLATFORM(IOS)-specific code that called directly into
        CTFontGetVerticalGlyphsForCharacters, now that wkGetVerticalGlyphsForCharacters is available
        in iOS.
        * platform/ios/WebCoreSystemInterfaceIOS.mm: Defined wkGetVerticalGlyphsForCharacters.

2012-10-11  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/12477267> Combined text reverts to full-width font after a style change

        Merged TOT WebKit r131077.

    2012-10-11  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/12477191> Combined text reverts to full-width font after a style change
        https://bugs.webkit.org/show_bug.cgi?id=99009

        Reviewed by John Sullivan.

        Test: fast/text/text-combine-width-after-style-change.html

        * rendering/RenderCombineText.cpp:
        (WebCore::RenderCombineText::styleDidChange): Changed to reset m_isCombined to false, to
        ensure that combineText() is called on the next layout.

2012-10-10  Benjamin Poulain  <bpoulain@apple.com>

        Merge OpenSource WebKit r130996 to fix <rdar://problem/12474758>.

    2012-10-10  Benjamin Poulain  <bpoulain@apple.com>

        [WK2] Safari crashes on error when using CFNetwork
        https://bugs.webkit.org/show_bug.cgi?id=98965

        Reviewed by Sam Weinig.

        The code of ResourceErrorMac when using CFNetwork was assuming
        there is always either a CFError or an NSError associated with
        any ResourceError.

        This is not true on WebKit2 where error can be generic errors
        in the WebProcess (for example a cannotShowURLError).
        The code was crashing when trying to invoke function on the
        non-existing CFError.

        This patch fixes the issue by handling that third case separately.
        If the ResourceError is a generic error, a new NSError is created,
        similarily to what is done in the non-CFNetwork case.

        * platform/network/mac/ResourceErrorMac.mm:
        (WebCore::ResourceError::nsError):

2012-10-10  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/12474800> Can’t access all width variants of @font-face fonts, so text-combine doesn’t work with them

        Merged TOT WebKit r131005.

    2012-10-10  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/12472460> text-combine doesn’t use third- and quarter-width variants when used with @font-face
        https://bugs.webkit.org/show_bug.cgi?id=98961

        Reviewed by Tim Horton.

        Test: fast/text/text-combine-with-font-face.html

        * css/CSSSegmentedFontFace.cpp:
        (WebCore::CSSSegmentedFontFace::getFontData): Added the width variant to the
        key used for entries in the font data table, so that we can return different
        font data for different width variants.
        * platform/graphics/FontWidthVariant.h: Defined FontWidthVariantWidth for
        use in the computation of the above key.
        * rendering/RenderCombineText.cpp:
        (WebCore::RenderCombineText::combineText): Added a local variable to store
        the font selector before changing the font description. Previously, by the time
        we tried to get the font selector from the font, it had already been cleared,
        so we called Font::update() with a 0 font selector, meaning @font-face fonts
        could not be selected.

2012-10-10  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/12471395> Switch back to always rendering Arabic using Geeza Pro

        Rubber-stamped by Dan Bernstein.

        Revert r1145512 made for

            <rdar://problem/7200193> All Arabic characters are forced to render in Geeza Pro

        The change caused a 44% regression on loading kooora.com on PLT3. Since CoreText isn't
        committing to improving the performance of Arabic rendering for Innsbruck, we revert the
        change for now. See

            <rdar://problem/12438206> PLT3 test site kooora.com is 1.44x slower on 11A180 compared to 10A403 on N94

        * platform/graphics/FontFastPath.cpp:
        (WebCore::Font::glyphDataAndPageForCharacter):
        * platform/graphics/GlyphPageTreeNode.cpp:
        (WebCore::GlyphPageTreeNode::initializePage):
        * platform/graphics/SimpleFontData.h:
        * platform/graphics/mac/FontComplexTextMac.cpp:
        (WebCore::Font::fontDataForCombiningCharacterSequence):
        * platform/graphics/mac/SimpleFontDataMac.mm:

2012-10-05  Benjamin Poulain  <bpoulain@apple.com>

        Move the thread safety of WebGeolocationPolicyListener to WebKit

        Reviewed by Joseph Pecoraro.

        * page/Settings.cpp:
        (WebCore::Settings::Settings):
        * page/Settings.h:
        (Settings):
        Get rid of the flag alwaysRequestGeolocationPermission from WebCore settings.
        The feature is now fully implemented in the WebKit layer.

2012-10-08  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/12456619> GlyphPage::fill() returns vertical glyphs instead of compressed glyphs, so text-combine doesn’t work

        Reviewed by Enrica Casucci.

        GlyphPage::fill() has a CG-based code path for horizontal regular-width fonts, and CT-based
        code paths for other fonts. On iOS, both vertical fonts and compressed fonts took the
        vertical font code path, which caused this bug.

        * platform/graphics/mac/GlyphPageTreeNodeMac.cpp:
        (WebCore::GlyphPage::fill): Removed the #if !PLATFORM(IOS) guards around the code that deals
        with compressed fonts. This required adding an iOS version of the if statement at the beginning
        of the block, in which the CTFontGetVerticalGlyphsForCharacters() SPI is used directly rather
        than via WebKitSystemInterface. This replaced the iOS-only block at the end of the function
        that called CTFontGetVerticalGlyphsForCharacters(). Finally, added #if !PLATFORM(IOS) guard
        around the part of the code that deals with composite font references, which do not exist in
        iOS.

2012-10-07  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/12438025> ImageSource::orientationAtIndex() should take the image properties dictionary as argument

        Reviewed by Yongjun Zhang.

        iOS part after merging in opensource r130591. Use orientationFromProperties() instead of
        orientationAtIndex() so we avoid making an extra call to CGImageSourceCopyPropertiesAtIndex.

        * platform/graphics/cg/ImageSourceCG.cpp:
        (WebCore::ImageSource::originalSize):

2012-10-07  Pratik Solanki  <psolanki@apple.com>

        Part of <rdar://problem/12438025> ImageSource::orientationAtIndex() should take the image properties dictionary as argument

        Merge ToT WebKit r130591.

    2012-10-06  Pratik Solanki  <psolanki@apple.com>

        Reduce calls to CGImageSourceCopyPropertiesAtIndex from frameSizeAtIndex
        https://bugs.webkit.org/show_bug.cgi?id=98607

        Reviewed by Dan Bernstein.

        Refactor code so that we avoid a second call to CGImageSourceCopyPropertiesAtIndex under
        ImageSource::frameSizeAtIndex().

        No new tests because no functional change.

        * platform/graphics/cg/ImageSourceCG.cpp:
        (WebCore::orientationFromProperties):
        (WebCore):
        (WebCore::ImageSource::frameSizeAtIndex):
        (WebCore::ImageSource::orientationAtIndex):

2012-10-03  Benjamin Poulain  <bpoulain@apple.com>

        Merge OpenSource WebKit r130311.
        This is for the Wikipedia load time on PLT3.

    2012-10-03  Benjamin Poulain  <bpoulain@apple.com>

        Element::computeInheritedLanguage: evaluate the while() condition after fetching the string
        https://bugs.webkit.org/show_bug.cgi?id=98220

        Reviewed by Andreas Kling.

        * dom/Element.cpp:
        (WebCore::Element::computeInheritedLanguage):
        The condition is never false on the first execution. Move the condition to the
        end of the loop for fun and profit.

2012-10-02  Mark Hahnenberg  <mhahnenberg@apple.com>

        <rdar://problem/12391706> REGRESSION: Crash beneath IncrementalSweeper::doSweep() when running PLT3

        Reviewed by Phil Pizlo.

        From the Radar: We need a "WebSafeIncrementalSweeper" to match  "WebSafeGCActivityCallback" -- it ensures 
        that callbacks only happen on the web thread, which in turn ensures that the web thread lock has been acquired.

        Added a new class, WebSafeIncrementalSweeper, that only runs on the web thread. The structure of the class is 
        almost identical to that of the WebSafeGCActivityCallback.

        No new tests.

        * WebCore.xcodeproj/project.pbxproj:
        * bindings/js/JSDOMWindowBase.cpp:
        (WebCore::JSDOMWindowBase::commonJSGlobalData):
        * platform/WebSafeGCActivityCallback.h:
        (WebCore::WebSafeGCActivityCallback::~WebSafeGCActivityCallback):
        (WebSafeGCActivityCallback):
        * platform/WebSafeIncrementalSweeper.cpp: Added.
        (WebCore):
        (WebCore::WebSafeIncrementalSweeper::WebSafeIncrementalSweeper):
        (WebCore::WebSafeIncrementalSweeper::~WebSafeIncrementalSweeper):
        (WebCore::WebSafeIncrementalSweeper::synchronize):
        * platform/WebSafeIncrementalSweeper.h: Added.
        (WebCore):
        (WebSafeIncrementalSweeper):
        (WebCore::WebSafeIncrementalSweeper::create):

2012-10-01  Matt Lilek  <mrl@apple.com>

        <rdar://problem/12268376> SWB: WTF/JSC/WebCore/WebKit build fixes to work with clang-424

        Merge OpenSource r123239, r123989, and r128234.

        Reviewed by Pratik Solanki.

        * html/FTPDirectoryDocument.cpp:
        (FTPDirectoryDocumentParser):
        (WebCore::FTPDirectoryDocumentParser::FTPDirectoryDocumentParser):
        * html/parser/HTMLTreeBuilder.cpp:
        (WebCore::HTMLTreeBuilder::HTMLTreeBuilder):
        * html/parser/HTMLTreeBuilder.h:
        (HTMLTreeBuilder):
        * inspector/InspectorDOMStorageResource.cpp:
        (WebCore::InspectorDOMStorageResource::InspectorDOMStorageResource):
        * inspector/InspectorDOMStorageResource.h:
        (InspectorDOMStorageResource):
        * rendering/RenderEmbeddedObject.cpp:
        (WebCore::RenderEmbeddedObject::setPluginUnavailabilityReason): Use UNUSED_PARAM where one member variable isn't used on iOS.
        * rendering/svg/RenderSVGTextPath.cpp:
        (WebCore::RenderSVGTextPath::RenderSVGTextPath):
        * rendering/svg/RenderSVGTextPath.h:

2012-10-01  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/10984398> Crash in MobileSafari at WebCore: ?WebCore::LayoutState::LayoutState (10A253)

        Merge ToT WebKit r129966.

    2012-09-28  Simon Fraser  <simon.fraser@apple.com>
    
            Crash re-entering Document layout with frame flattening enabled
            https://bugs.webkit.org/show_bug.cgi?id=97841
    
            Reviewed by Brady Eidson.
    
            When creating a CachedFrame, clearTimers on the Frame later; it has to
            be done after documentWillSuspendForPageCache(), because the style
            changes that HTMLPlugInImageElement::documentWillSuspendForPageCache()
            do can schedule a layout on the FrameView, and we don't want this layout
            timer to fire while the page is in the page cache.
    
            Add an assertion in FrameView::layout() that the document is not in
            the page cache. Without the above change, this would assert in
            the plugins/frameset-with-plugin-frame.html test.
    
            * history/CachedFrame.cpp:
            (WebCore::CachedFrame::CachedFrame):
            * page/FrameView.cpp:
            (WebCore::FrameView::layout):

2012-10-01  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/10984398> Crash in MobileSafari at WebCore: ?WebCore::LayoutState::LayoutState (10A253)

        Merge ToT WebKit r129944.

    2012-09-28  Simon Fraser  <simon.fraser@apple.com>
    
            Crash re-entering Document layout with frame flattening enabled
            https://bugs.webkit.org/show_bug.cgi?id=97841
    
            Reviewed by Kenneth Rohde Christiansen.
    
            Walking up to parent FrameViews when doing a frame-flattening
            layout should walk via the Frame tree, not the Widget hierarchy.
            Walking via the Frame tree ensures that we don't walk up to the
            root Frame when laying out a subframe that is in the page cache.
            That's bad, because the root Frame is reused for the new
            page, and laying it out from a frame in the page cache causes
            re-entrant layout.
    
            Test: plugins/frameset-with-plugin-frame.html
    
            * page/FrameView.cpp:
            (WebCore::FrameView::parentFrameView):

2012-09-27  Jeffrey Pfau  <jpfau@apple.com>

        Merge Open Source r125736

    2012-08-14  Jeffrey Pfau  <jpfau@apple.com>

        Allow blocking of Web SQL databases in third-party documents
        https://bugs.webkit.org/show_bug.cgi?id=94057

        Reviewed by Adam Barth.

        Add a check for pages in third-party pages to allow third-party storage blocking of Web SQL databases.

        Tests: http/tests/security/cross-origin-websql-allowed.html
               http/tests/security/cross-origin-websql.html

        * Modules/webdatabase/DOMWindowWebDatabase.cpp:
        (WebCore::DOMWindowWebDatabase::openDatabase): Pass top origin to canAccessDatabase
        * page/SecurityOrigin.cpp:
        (WebCore::SecurityOrigin::canAccessStorage): Common method for various types of storage that use the same criteria
        * page/SecurityOrigin.h:
        (WebCore::SecurityOrigin::canAccessDatabase): Use canAccessStorage
        (WebCore::SecurityOrigin::canAccessLocalStorage): Change to using canAccessStorage
        (SecurityOrigin):

2012-09-26  Jeffrey Pfau  <jpfau@apple.com>

        Merge Open Source r125335

    2012-08-09  Jeffrey Pfau  <jpfau@apple.com>

        Allow blocking of third-party localStorage and sessionStorage
        https://bugs.webkit.org/show_bug.cgi?id=93390

        Reviewed by Adam Barth.

        Add checks for if a page is third-party and third-party storage blocking is enabled while accessing storage.

        Tests: http/tests/security/cross-origin-local-storage-allowed.html
               http/tests/security/cross-origin-local-storage.html
               http/tests/security/cross-origin-session-storage-allowed.html
               http/tests/security/cross-origin-session-storage.html
               http/tests/security/same-origin-document-domain-storage-allowed.html

        * dom/Document.cpp:
        (WebCore::Document::initSecurityContext): Initialize securityOrigin with knowledge of if we should block third-party storage.
        * page/DOMWindow.cpp: Check if the origin trying to access storage is third-party relative to the top document.
        (WebCore::DOMWindow::sessionStorage):
        (WebCore::DOMWindow::localStorage):
        * page/SecurityOrigin.cpp: Add a call in Security origin to see if another origin counts as a third-party.
        (WebCore::SecurityOrigin::SecurityOrigin):
        (WebCore::SecurityOrigin::canAccessLocalStorage):
        (WebCore):
        (WebCore::SecurityOrigin::isThirdParty):
        * page/SecurityOrigin.h:
        (WebCore::SecurityOrigin::blockThirdPartyStorage):
        (SecurityOrigin):
        * testing/InternalSettings.cpp: Add an internals.settings hook for setting third-party storage blocking enabled.
        (WebCore::InternalSettings::setThirdPartyStorageBlockingEnabled):
        (WebCore):
        * testing/InternalSettings.h:
        (InternalSettings):
        * testing/InternalSettings.idl:

2012-09-26  Jeffrey Pfau  <jpfau@apple.com>

        Merge Open Source r124647.

    2012-08-02  Jeffrey Pfau  <jpfau@apple.com>

        Add API for enabling blanket third-party data blocking
        https://bugs.webkit.org/show_bug.cgi?id=93022

        Reviewed by Anders Carlsson.

        Added API for enabling third-party storage blocking.

        * page/Settings.cpp:
        (WebCore::Settings::Settings):
        * page/Settings.h:
        (WebCore::Settings::setThirdPartyStorageBlockingEnabled):
        (WebCore::Settings::thirdPartyStorageBlockingEnabled):
        (Settings):

2012-09-25  Benjamin Poulain  <bpoulain@apple.com>

        Partial merge of OpenSource WebKit r129444.

        Only parts of the patch are merged to avoid conflicts.

    2012-09-24  Benjamin Poulain  <bpoulain@apple.com>

        Fix Geolocation error reporting in the test support
        https://bugs.webkit.org/show_bug.cgi?id=97386

        Reviewed by Sam Weinig.

        GeolocationController currently expose GeolocationError which can be either
        PermissionDenied or PositionUnavailable.

        In practice, only PositionUnavailable is supported and tested, only Chrome
        somewhat expose PermissionDenied.
        The correct way to deny the permission is through Geolocation::setIsAllowed().

        This patch does some of the initial cleanup toward that goal, reducing how
        far GeolocationError is spread.

        * WebCore.exp.in:
        * WebCore.xcodeproj/project.pbxproj:
        Mac does not use GeolocationClientMock, it should not be compiled in WebCore.

        * platform/mock/GeolocationClientMock.cpp:
        (WebCore::GeolocationClientMock::GeolocationClientMock):
        (WebCore::GeolocationClientMock::setPosition):
        (WebCore::GeolocationClientMock::setPositionUnavailableError):
        This method replace setError(). It is limited to PositionUnavailable errors.

        (WebCore::GeolocationClientMock::reset):
        (WebCore::GeolocationClientMock::controllerTimerFired):
        (WebCore):
        (WebCore::GeolocationClientMock::clearError):
        * platform/mock/GeolocationClientMock.h:
        (WebCore):
        (GeolocationClientMock):

2012-09-22  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/12351045> REGRESSION(Merge1): Merge error in ComplexTextController::collectComplexTextRunsForCharactersCoreText

        Reviewed by David Carson.

        Fix merge error. The previous condition was

            #if !defined(BUILDING_ON_LEOPARD) && !defined(BUILDING_ON_SNOW_LEOPARD) || PLATFORM(IOS)

        I mistakenly made it !PLATFORM(IOS).

        * platform/graphics/mac/ComplexTextControllerCoreText.mm:
        (WebCore::ComplexTextController::collectComplexTextRunsForCharactersCoreText):

2012-09-21  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/12346050> Innsbruck11A177: WebCore-1660 fails to build: can't open order file WebCore.order

    2012-09-21  Pratik Solanki  <psolanki@apple.com>

        No need to pass order file for WebCoreTestSupport build
        https://bugs.webkit.org/show_bug.cgi?id=97363

        Reviewed by David Kilzer.

        No new tests because no functional change.

        * Configurations/WebCoreTestSupport.xcconfig:

2012-09-20  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/12325477> REGRESSION (Merge1): nytimes.com shrinks towards end of load

        Reviewed by Pratik Solanki.

        Fix a merge error that makes keywords like hidden/scroll and others invalid for overflow-y.

        * css/CSSParser.cpp:
        (WebCore::isValidKeywordPropertyAndValue):

2012-09-19  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/12326966> REGRESSION (merge1): Compile error in DisplaySleepDisabler.cpp

        Reviewed by David Kilzer.

        Don't declare the empty functions as inline in the header file since they are exported by
        the export list. Move them to DisplaySleepDisabler.cpp.

        * platform/mac/DisplaySleepDisabler.cpp:
        (WebCore::DisplaySleepDisabler::DisplaySleepDisabler):
        (WebCore::DisplaySleepDisabler::~DisplaySleepDisabler):
        * platform/mac/DisplaySleepDisabler.h:

2012-09-19  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/12326966> REGRESSION (merge1): Compile error in DisplaySleepDisabler.cpp

        Reviewed by David Kilzer.

        Compile out DisplaySleepDisabler class on iOS. Most of it was already compiled out but we
        had a private field and teh compiler complained that teh private field was not used
        (-Wunused-private-field).

        * platform/mac/DisplaySleepDisabler.cpp:
        (WebCore::DisplaySleepDisabler::DisplaySleepDisabler):
        (WebCore::DisplaySleepDisabler::~DisplaySleepDisabler):
        (WebCore):
        * platform/mac/DisplaySleepDisabler.h:
        (DisplaySleepDisabler):
        (WebCore):
        (WebCore::DisplaySleepDisabler::~DisplaySleepDisabler):
        (WebCore::DisplaySleepDisabler::DisplaySleepDisabler):

2012-09-18  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/12261022> REGRESSION (x86_64): COMPILE_ASSERT(sizeof(StyleRareInheritedData) == sizeof(SameSizeAsStyleRareInheritedData), StyleRareInheritedData_should_bit_pack);

        Reviewed by David Kilzer.

        * rendering/style/StyleRareInheritedData.cpp:
        (SameSizeAsStyleRareInheritedData): For 64-bit iOS, we need an extra unsigned for the structs to match.

2012-09-18  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/12217445> iOS WebKit merge: stabilizing merge branch to ToT r122402 (starts Tue, Sep 4)

        Merge up to OpenSource WebKit r122402.

2012-09-18  Benjamin Poulain  <bpoulain@apple.com>

        <rdar://problem/12324674> Don't use iOS release code name (Telluride) in variable name

        Reviewed by David Carson.
        Reviewed by David Kilzer.

        * platform/KURL.cpp:
        (WebCore::enableKURLSchemeCanonicalization): Rename the variable to something platform neutral.
        * platform/KURL.h:

2012-09-17  Benjamin Poulain  <bpoulain@apple.com>

        <rdar://problem/12027973> FrameView::delegatesScrolling() should be true on iOS

        Reviewed by Andy Estes.

        Adopt partially delegatesScrolling on iOS. This patch only modifies the coordinate conversion,
        the scrolling delegation itself is still guarded by USE(TILED_BACKING_STORE) and PLATFORM(QT).

        * page/Frame.cpp:
        (WebCore::Frame::createView):
        * platform/ScrollView.cpp:
        (WebCore::ScrollView::contentsToWindow): Move our coordinate conversion code to
        WidgetIOS.
        * platform/ios/ScrollViewIOS.mm:
        * platform/ios/WidgetIOS.mm:
        (WebCore::Widget::convertFromRootToContainingWindow):
        (WebCore::Widget::convertFromContainingWindowToRoot):
        * rendering/RenderLayerCompositor.cpp:

2012-09-14  Dean Jackson  <dino@apple.com>

        <rdar://problem/12295355> Merge overflow: paged to iOS

        Merge Open Source r126343 and r126840.

    2012-08-22  Beth Dakin  <bdakin@apple.com>

            https://bugs.webkit.org/show_bug.cgi?id=94401
            Add support for making a web site become paginated using overflow:
            paged-x | paged-y
            -and corresponding-
            <rdar://problem/11831783>

            Reviewed by Dave Hyatt.

            This patch adds two new possible values for overflow-y. They are -
            webkit-paged-x and -webkit-paged-y. When you set these as overflow-y
            values on the html or body element, they make the RenderView
            paginated, much like the API on Page.

            -webkit-paged-x and -webkit-paged-y are only valid values for
            overflow-y, NOT overflow-x. overflow-x defaults to a value of auto
            (for now) unless it has been set to something else.
            * css/CSSParser.cpp:
            (WebCore::isValidKeywordPropertyAndValue):
            (WebCore::CSSParser::parseValue):

            Two new CSS value keywords.
            * css/CSSValueKeywords.in:

            EOverflow has two new values for pagination.
            * rendering/style/RenderStyleConstants.h:
            * css/CSSPrimitiveValueMappings.h:
            (WebCore::CSSPrimitiveValue::CSSPrimitiveValue):
            (WebCore::CSSPrimitiveValue::operator EOverflow):

            A bunch of existing code from StyleResolver::styleForDocument() is
            moved into a helper function so that it can be called from two
            places.
            * css/StyleResolver.cpp:
            (WebCore::StyleResolver::collectMatchingRulesForList):

            Even though this pagination is very similar to Page::pagination(), it
            is different in one critical way. Page::pagination() will apply to
            all FrameViews, even those in the page cache. For this reason,
            FrameView needs to keep its own Pagination value that just applies to
            this FrameView.
            * page/FrameView.cpp:
            * page/FrameView.h:
            (WebCore):
            (FrameView):

            Map RenderStyle values to a Pagination::Mode.
            (WebCore::paginationModeForRenderStyle):
            (WebCore):

            Account for paged-x and paged-y here.
            (WebCore::FrameView::applyOverflowToViewport):

            As is explained in the header, FrameView::pagination() will return
            m_pagination if it has been set. Otherwise, it will return
            Page::pagination() since currently there are no callers that need to
            distinguish between the two.
            (WebCore::FrameView::pagination):
            (WebCore::FrameView::setPagination):

            Generally this means that everywhere in WebCore should ask FrameView
            for the pagination(), not Page. These call sites all look to
            FrameView now.
            (WebCore::FrameView::paintContents):
            * rendering/RenderView.cpp:
            (WebCore::RenderView::requiresColumns):
            (WebCore::RenderView::calcColumnWidth):
            (WebCore::RenderView::paginationUnit):
            (WebCore::RenderView::viewLogicalHeight):

            Since we need to define Pagination in Page.h AND FrameView.h, it is
            now in its own header, Pagination.h. And therefore it is no longer
            WebCore::Page::Pagination, but rather it is just WebCore::Pagination.
            * page/Page.h:
            (Page):
            * rendering/Pagination.h: Added.
            (WebCore):
            (WebCore::Pagination::Pagination):
            (Pagination):
            (WebCore::Pagination::operator==):
            (WebCore::Pagination::operator!=):
            * WebCore.exp.in:
            * WebCore.xcodeproj/project.pbxproj:
            * GNUmakefile.list.am:
            * Target.pri:
            * WebCore.exp.in:
            * WebCore.gypi:

            Certain ColumnInfo values are set based on the RenderStyle. So if
            those RenderStyle values change, the ColumnInfo needs to be updated.
            * rendering/RenderBlock.cpp:
            (WebCore::RenderBlock::updateColumnInfoFromStyle):
            (WebCore):
            * rendering/RenderBlock.h:
            (RenderBlock):

            Factor in paged-x and paged-y when determining if a RenderBlock
            requires columns.
            (WebCore::RenderBlock::requiresColumns):

            RenderStyle::specifiesColumns() is an odd and probably broken
            function. At the very least, it should be re-named, if not removed
            entirely. It does not accurately assess if columns have been
            specified. I had to add this code here because specifiesColumns()
            returns false for paged-x and true for paged-y. We were hitting a
            number of crashes with paged-y because of this, so I chose for the
            time being to limit this check to non-root layers.
            * rendering/RenderLayer.cpp:
            (WebCore::RenderLayer::shouldBeNormalFlowOnly):

            It's just Pagination now, not Page::Pagination.
            * testing/InternalSettings.cpp:
            (WebCore::InternalSettings::reset):
            (WebCore::InternalSettings::setPagination):

    2012-08-27  Beth Dakin  <bdakin@apple.com> 

            https://bugs.webkit.org/show_bug.cgi?id=94848
            When paged-x/y is specified on the root, columnGap is ignored, and garbage pixels
            are likely

            Reviewed by Dan Bernstein.

            We used to call setPagination() from applyOverflowToViewport(), but that is too
            late. We want to setPagination() before we actually lay anything out so that all
            of the styles (including columnGap!) will be properly set on the RenderView.

            No longer handle pagination here since we take care of it in
            applyPaginationToViewport()
            * page/FrameView.cpp:
            (WebCore::FrameView::applyOverflowToViewport):

            New function to call setPagination(). This function gets the appropriate renderer
            and uses its RenderStyle to determine if pagination should be set.
            (WebCore::FrameView::applyPaginationToViewport):
            (WebCore):

            Call applyPaginationToViewport() before the call to updateStyleIfNeeded().
            (WebCore::FrameView::layout):

            This code was meant to prevent garbage pixels in column gaps for pagination on the
            RenderView, but paintContents() does not always get called when we paint into
            tiles, so I moved this code to RenderView.
            (WebCore::FrameView::paintContents):
            * page/FrameView.h:
            (FrameView):

            The code from RenderView::paintContents() to prevent garbage pixels is moved here.
            * rendering/RenderView.cpp:
            (WebCore::RenderView::paint):

2012-09-13  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/12234245> REGRESSION (r1117223): position:fixed elements scroll with the page the first time you scroll on simple pages

        Reviewed by Dan Bernstein.
        
        Conservative change that ensures that position:fixed elements get compositing layers
        on simple pages.
        
        In r1117223 I added code that calls hasCustomFixedPosition(renderer, RenderView::CheckContainingBlock),
        and bails if that returns false. The CheckContainingBlock requirement was added to ensure that it's valid
        to compare the element's bounds with the viewport later.
        
        However, when we first get into this member function, we're in a style recalc and haven't hooked up
        the renderers yet, so we have no containing block, and return false. On simple pages, we never
        get called again and position:fixed elements don't get layers.
        
        Test: platform/iphone-simulator/iphone/fixed/fixed-position-out-of-view-negative-zindex.html

        * rendering/RenderLayerCompositor.cpp: Set the m_reevaluateCompositingAfterLayout flag to true, if we are position:fixed
        but haven't yet got a containing block. The earlier "if (!(renderer->isOutOfFlowPositioned() && renderer->style()->position() == FixedPosition))"
        check ensures that we bail out, without setting the m_reevaluateCompositingAfterLayout flag, for non-fixed
        renderers.

2012-09-11  Benjamin Poulain  <bpoulain@apple.com>

        Simplify SQLiteDatabaseTracker to prevent assertions with WebKit2

        Reviewed by David Kilzer.

        It is not yet known how SQLiteTransaction will be used in WebKit2.
        In the meantime, it causes assertions because the current code assume
        it is run for WebKit1.

        * WebCore.exp.in:
        * loader/appcache/ApplicationCacheStorage.cpp:
        (WebCore::ApplicationCacheStorage::executeSQLCommand):
        (WebCore::ApplicationCacheStorage::verifySchemaVersion):
        (WebCore::ApplicationCacheStorage::executeStatement):
        (WebCore::ApplicationCacheStorage::store):
        (WebCore::ApplicationCacheStorage::ensureOriginRecord):
        (WebCore::ApplicationCacheStorage::loadCache):
        * platform/sql/SQLiteTransaction.cpp:
        (WebCore::SQLiteTransaction::begin):
        (WebCore::SQLiteTransaction::commit):
        (WebCore::SQLiteTransaction::rollback):
        (WebCore::SQLiteTransaction::stop):
        * platform/sql/ios/SQLiteDatabaseTracker.cpp:
        (SQLiteDatabaseTracker):
        SQLiteDatabaseTracker is changed from a class to a namespace. All the methods
        were already static, instanciating the tracker does not make much sense.

        (WebCore::SQLiteDatabaseTracker::setClient):
        (WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount):
        (WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount):

        (WebCore::SQLiteDatabaseTracker::hasTransactionInProgress): This replaces
        transactionInProgressCount() used in assertions. This provides a better
        encapsulation.
        It is also #ifdef-ed to make sure it is not used accidentally by database code.

        * platform/sql/ios/SQLiteDatabaseTracker.h:
        (SQLiteDatabaseTracker):

2012-09-12  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/11981485> Use a different color for layer borders on the two tile grids

        Reviewed by NOBODY (OOPS!).

        Give the layers for the zoomed-out tile grid a more purplish color,
        so you can tell them apart from the zoomed-in tile grid.

        * platform/ios/TileCache.h: Add colorForGridTileBorder().
        * platform/ios/TileCache.mm:
        (WebCore::TileCache::colorForGridTileBorder): Return a purple color for the zoomed-out grid,
        and the old color for the zoomed-in grid.
        (WebCore::TileCache::drawLayer): Use the right color for the repaint counter background.
        * platform/ios/TileGridTile.mm:
        (WebCore::TileGridTile::showBorder): Get the right color from the TileCache for this grid.
        * platform/ios/TileLayer.h: Make a tileGrid property so we can read and write it.
        * platform/ios/TileLayer.mm: @synthesize the property.

2012-09-10  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/12273866> position:fixed with auto top and bottom scrolls when it should not

        Reviewed by Enrica Casucci.
        
        Reinstate some code that was lost in the position:fixed cleanup:
        when a position:fixed element has auto position for both top and bottom
        (or both left and right), make it fixed to the top (or left), as
        the old code did.

        Behavior of position:fixed while scrolling is not layout-testable.

        * rendering/RenderLayerCompositor.cpp:

2012-09-10  David Kilzer  <ddkilzer@apple.com>

        BUILD FIX (r1151090): Make ScrollingConstraints.h a private header

        Part of: <rdar://problem/11507731> Support sticky layouts

        Fixes the following build failures:

            WebChromeClientIOS.mm:35:9: fatal error: 'WebCore/ScrollingConstraints.h' file not found
            #import <WebCore/ScrollingConstraints.h>
                    ^
            1 error generated.
            WebFixedPositionContent.mm:14:9: fatal error: 'WebCore/ScrollingConstraints.h' file not found
            #import <WebCore/ScrollingConstraints.h>
                    ^
            1 error generated.

        * WebCore.xcodeproj/project.pbxproj:
        - Make ScrollingConstraints.h a private header.
        - Let Xcode sort the project file.

2012-09-10  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/12233527> REGRESSION (11A163): Raw javascript visible at top of apple.com

        Reviewed by Dan Bernstein.

        The switch from Shale4G173a in Innsbruck11A262 to Basalt4K36 in
        Innsbruck11A163 caused the html.css (and other built-in user
        agent stylesheets) to stop being processed during the build,
        producing this error output:

            E -x c -P -C -DIPHONE=1 WebCore/css/html.css > html.css.out
            /bin/sh: E: command not found
            xcodebuild: error: SDK "DKROOT" cannot be located.
            xcrun: error: /Applications/Xcode.app/Contents/Developer/usr/bin/xcodebuild failed with exit code 16384
            make: [html.css.out] Error 127 (ignored)

        The issue was that "$SDKROOT" was used instead of "$(SDKROOT)"
        in the xcrun command.  However, the "Generate Derived Sources"
        build phase script already sets the CC environment variable to
        that result, so we can just use that instead.

        * DerivedSources.make: Stop using xcrun to find the C compiler
        since the "Generate Derived Sources" build phase script sets the
        CC environment variable for us already.

2012-09-06  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/11507731> Support sticky layouts

        Reviewed by David Kilzer, Antti Koivisto.

        Make use of the ViewportConstraints classes recently added to Open Source
        for repositioning fixed and sticky layers when scrolling.
        
        * WebCore.exp.in: Export FixedPositionViewportConstraints::layerPositionForViewportRect()
        and StickyPositionViewportConstraints::layerPositionForViewportRect().
        * loader/EmptyClients.h: New signature for addOrUpdateViewportConstrainedLayer.
        * page/ChromeClient.h: Instead of passing lots of bits of data to the client for fixed and sticky,
        pass a ViewportConstraints object, transferring ownership to the client. This object contains
        data and logic necessary to reposition a fixed or sticky layer when the viewport changes.
        * page/FrameView.cpp:
        (WebCore::FrameView::visibleContentsResized): Call the setViewportConstrainedObjectsNeedLayout()
        function from Open Source now. Since it doesn't check useCustomFixedPositionLayoutRect(), do
        that before we call it and force compositing.
        * page/scrolling/ScrollingConstraints.cpp:
        (WebCore::FixedPositionViewportConstraints::layerPositionForViewportRect): Compute a new layer offset
        for the given viewport rect. This is logically identical to the old iOS code, but much simpler.
        * page/scrolling/ScrollingConstraints.h:
        (FixedPositionViewportConstraints): FixedPositionViewportConstraints
        has not yet been added to Open Source because there aren't any callers yet, so this is iOS-only for now.
        (WebCore::FixedPositionViewportConstraints::viewportRectAtLastLayout):
        (WebCore::FixedPositionViewportConstraints::setViewportRectAtLastLayout):
        (WebCore::FixedPositionViewportConstraints::layerPositionAtLastLayout):
        (WebCore::FixedPositionViewportConstraints::setLayerPositionAtLastLayout):
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::reasonForCompositing): Add sticky to the compositing logging.
        (WebCore::RenderLayerCompositor::requiresCompositingForPosition): Have position:sticky force a compositing layer.
        Add a comment referencing a radar related to making compositing layers too late sometimes.
        (WebCore::isRootmostFixedLayer): Look at sticky as well as fixed.
        (WebCore::RenderLayerCompositor::updateViewportConstraintStatus): addOrUpdateViewportConstrainedLayer()
        can now just call computeViewportConstraints() to generate the constraints.
        (WebCore::RenderLayerCompositor::computeViewportConstraints): Return a new constraints
        object that describes the scrolling constraints for the given layer.
        (WebCore::RenderLayerCompositor::registerOrUpdateViewportConstrainedLayer): addOrUpdateViewportConstrainedLayer()
        can now just call computeViewportConstraints() to generate the constraints.
        * rendering/RenderLayerCompositor.h:
        (RenderLayerCompositor): Replaced getFixedPositionLayerSizing() with computeViewportConstraints().
        * rendering/RenderView.cpp:
        (WebCore::RenderView::hasCustomFixedPosition):
        * rendering/RenderView.h: setCustomFixedPositionedObjectsNeedLayout() is replaced by a non-iOS-only
        method on FrameView now.

2012-09-06  Simon Fraser  <simon.fraser@apple.com>

        Prerequisite for <rdar://problem/11507731> Support sticky layouts

        Merged ToT WebKit r120601.

    2012-06-18  Iain Merrick  <husky@google.com>
    
            Allow updateFixedElementsAfterScrolling() to run during layout.       
            https://bugs.webkit.org/show_bug.cgi?id=84965
    
            This is needed because HistoryController restores the previous scroll
            position during layout (because we don't want an ugly flash of wrongly-
            scrolled content).
    
            Reviewed by Simon Fraser.
    
            Test: compositing/fixed-position-scroll-offset-history-restore.html
    
            * page/FrameView.cpp:
            (WebCore::FrameView::updateFixedElementsAfterScrolling):

2012-09-06  Simon Fraser  <simon.fraser@apple.com>

        Prerequisite for <rdar://problem/11507731> Support sticky layouts

        Merged ToT WebKit r127795.

    2012-09-06  Simon Fraser  <simon.fraser@apple.com>
    
            Parcel up logic related to sticky positioning into a Constraints class that will later be used for threaded scrolling
            https://bugs.webkit.org/show_bug.cgi?id=96026
    
            Reviewed by James Robinson.
    
            Lay some groundwork for threaded scrolling with fixed position and sticky
            position objects, by packaging up logic related to how to reposition
            fixed and sticky things on viewport changes into "constraints" classes.
            
            ScrollingConstraints contains a 'ViewportConstraints' base class
            that is subclassed for sticky position. These classes store
            data about the constraints that govern the position of an object outside
            of the render tree, and know how to compute a new position when the
            viewport changes using only data in the class.
            
            This patch changes RenderBoxModelObject to use the StickyPositionViewportConstraints
            class for computing stick offsets at layout time. In the future, we'll have
            the scrolling tree store copies of the constraint data for threaded scrolling.
            
            * CMakeLists.txt: Add ScrollingConstraints.* to the build.
            * GNUmakefile.list.am: Ditto
            * Target.pri: Ditto
            * WebCore.gypi: Ditto
            * WebCore.vcproj/WebCore.vcproj: Ditto
            * WebCore.xcodeproj/project.pbxproj: Ditto
            * page/scrolling/ScrollingConstraints.cpp: Added.
            (WebCore::StickyPositionViewportConstraints::computeStickyOffset):
            (WebCore::StickyPositionViewportConstraints::layerPositionForViewportRect):
            * page/scrolling/ScrollingConstraints.h: Added.
            (WebCore::ViewportConstraints::ViewportConstraints):
            (WebCore::ViewportConstraints::~ViewportConstraints):
            (WebCore::ViewportConstraints::anchorEdges):
            (WebCore::ViewportConstraints::hasAnchorEdge):
            (WebCore::ViewportConstraints::addAnchorEdge):
            (WebCore::ViewportConstraints::alignmentOffset):
            (WebCore::ViewportConstraints::setAlignmentOffset):
            (StickyPositionViewportConstraints):
            (WebCore::StickyPositionViewportConstraints::StickyPositionViewportConstraints):
            (WebCore::StickyPositionViewportConstraints::stickyOffsetAtLastLayout):
            (WebCore::StickyPositionViewportConstraints::setStickyOffsetAtLastLayout):
            (WebCore::StickyPositionViewportConstraints::layerPositionAtLastLayout):
            (WebCore::StickyPositionViewportConstraints::setLayerPositionAtLastLayout):
            (WebCore::StickyPositionViewportConstraints::leftOffset):
            (WebCore::StickyPositionViewportConstraints::rightOffset):
            (WebCore::StickyPositionViewportConstraints::topOffset):
            (WebCore::StickyPositionViewportConstraints::bottomOffset):
            (WebCore::StickyPositionViewportConstraints::setLeftOffset):
            (WebCore::StickyPositionViewportConstraints::setRightOffset):
            (WebCore::StickyPositionViewportConstraints::setTopOffset):
            (WebCore::StickyPositionViewportConstraints::setBottomOffset):
            (WebCore::StickyPositionViewportConstraints::setAbsoluteContainingBlockRect):
            (WebCore::StickyPositionViewportConstraints::setAbsoluteStickyBoxRect):
            * rendering/RenderBoxModelObject.cpp:
            (WebCore::RenderBoxModelObject::computeStickyPositionConstraints): Fill out
            data in the supplied StickyPositionViewportConstraints instance.
            (WebCore::RenderBoxModelObject::stickyPositionOffset): Create a
            StickyPositionViewportConstraints object on the stack and use it to
            compute the sticky offset.
            * rendering/RenderBoxModelObject.h:
            (RenderBoxModelObject):

2012-09-06  Simon Fraser  <simon.fraser@apple.com>

        Prerequisite for <rdar://problem/11507731> Support sticky layouts

        Merged ToT WebKit r127783.

    2012-09-06  Simon Fraser  <simon.fraser@apple.com>
    
            Move RenderView::setFixedPositionedObjectsNeedLayout to FrameView
            https://bugs.webkit.org/show_bug.cgi?id=96017
    
            Reviewed by James Robinson.
    
            FrameView already has a HashSet of RenderObjects whose position
            is affected by the viewport rect; this contains fixed and sticky-postion
            objects. RenderView::setFixedPositionedObjectsNeedLayout() was using
            the RenderView's list of postioned objects, but this omitted sticky-position
            objects whose container was not the RenderView. So it's simpler to use
            FrameView's set of fixed/sticky objects.
            
            Changed the terminology from "fixed" to "viewport-constrained" for this set
            of objects.
    
            * page/FrameView.cpp:
            (WebCore::FrameView::useSlowRepaints):
            (WebCore::FrameView::addViewportConstrainedObject):
            (WebCore::FrameView::removeViewportConstrainedObject):
            (WebCore::FrameView::scrollContentsFastPath):
            (WebCore::FrameView::setFixedVisibleContentRect):
            (WebCore::FrameView::setViewportConstrainedObjectsNeedLayout):
            (WebCore::FrameView::repaintFixedElementsAfterScrolling):
            (WebCore::FrameView::updateFixedElementsAfterScrolling):
            * page/FrameView.h:
            (WebCore::FrameView::viewportConstrainedObjects):
            (WebCore::FrameView::hasViewportConstrainedObjects):
            * page/scrolling/ScrollingCoordinator.cpp:
            (WebCore::ScrollingCoordinator::hasNonLayerFixedObjects):
            (WebCore::ScrollingCoordinator::updateShouldUpdateScrollLayerPositionOnMainThread):
            * rendering/RenderBoxModelObject.cpp:
            (WebCore::RenderBoxModelObject::willBeDestroyed):
            (WebCore::RenderBoxModelObject::styleDidChange):
            * rendering/RenderView.cpp:
            * rendering/RenderView.h:

2012-09-06  Simon Fraser  <simon.fraser@apple.com>

        Prerequisite for <rdar://problem/11507731> Support sticky layouts

        Merged ToT WebKit r120265.

    2012-06-13  Yael Aharon  <yael.aharon@nokia.com>
    
            Remove redundant code from RenderView and RenderBlock
            https://bugs.webkit.org/show_bug.cgi?id=89019
    
            Reviewed by Abhishek Arya.
    
            As pointed out in https://bugs.webkit.org/show_bug.cgi?id=83981#c7 , RenderView::insertFixedPositionedObject()
            is redundant and should be removed.
            No new tests.
    
            * rendering/RenderBlock.cpp:
            (WebCore::RenderBlock::insertPositionedObject):
            (WebCore::RenderBlock::removePositionedObject):
            * rendering/RenderView.cpp:
            (WebCore):
            * rendering/RenderView.h:
            (RenderView):

2012-09-06  Simon Fraser  <simon.fraser@apple.com>

        Prerequisite for <rdar://problem/11507731> Support sticky layouts

        Merged ToT WebKit r120601.

    2012-06-18  Iain Merrick  <husky@google.com>
    
            Allow updateFixedElementsAfterScrolling() to run during layout.       
            https://bugs.webkit.org/show_bug.cgi?id=84965
    
            This is needed because HistoryController restores the previous scroll
            position during layout (because we don't want an ugly flash of wrongly-
            scrolled content).
    
            Reviewed by Simon Fraser.
    
            Test: compositing/fixed-position-scroll-offset-history-restore.html
    
            * page/FrameView.cpp:
            (WebCore::FrameView::updateFixedElementsAfterScrolling):

2012-09-07  Pratik Solanki  <psolanki@apple.com>

        Part of <rdar://problem/10906849> objc_msgSend and IMP must be cast to an appropriate function pointer type (WTF/JSC/WebCore/WebKit)

        Merged ToT WebKit r127193.

    2012-08-30  Pratik Solanki  <psolanki@apple.com>

        objc_msgSend and IMP should be cast appropriately before using
        https://bugs.webkit.org/show_bug.cgi?id=95242

        Reviewed by Benjamin Poulain.

        Use wtfObjcMsgSend and wtfCallIMP templates which do appropriate casts
        to a function pointer with right types when calling objc_msgSend and an
        IMP method directly.

        No new tests because no functional changes.

        * page/mac/EventHandlerMac.mm:
        (WebCore::selfRetainingNSScrollViewScrollWheel):
        * platform/mac/WebCoreObjCExtras.mm:
        (deallocCallback):

2012-09-06  Andy Estes  <aestes@apple.com>

        <rdar://problem/12248325> WebKit2: hit testing does not work outside the initial viewport

        Reviewed by Sam Weinig.

        When the ScrollView has no platform widget, implement coordinate
        conversion in terms of scroll offset. Also, don't create a scrolling
        layer in the web process.

        * platform/ios/ScrollViewIOS.mm:
        (WebCore::ScrollView::contentsToWindow): Apply scroll offset to convert
        the content point to window coordinate space (FrameView coordinate
        space, actually).
        (WebCore::ScrollView::windowToContents): Ditto, but in reverse.
        * rendering/RenderLayerCompositor.cpp: Since scrolling happens in the
        UI process, do not create a scroll layer in the web process.

2012-09-05  Antti Koivisto  <antti@apple.com>

        <rdar://problem/12163073> Loading lots of images causes web view painting to stall for a few seconds
        
        Merged open source r127388.

    2012-08-31  Antti Koivisto  <antti@apple.com>

        Repaints should not be deferred after initial page load is complete
        https://bugs.webkit.org/show_bug.cgi?id=95480

        Reviewed by Simon Fraser

        Any dynamically triggered resource loading currently sends us back to deferred paint mode, making animation choppy. 
        This is not the intention of this code.

        This patch adds an additional condition that prevents page from re-entering deferred repaint mode after the initial
        load has completed. It also cleans up the code slightly.

        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::checkCompleted):
        
            Add additional call to checkStopDelayingDeferredRepaints() after a frame load completes as the
            new condition in shouldUseLoadTimeDeferredRepaintDelay() looks for this change too.

        * page/FrameView.cpp:
        (WebCore):
        
            Reduced the normal delay from 25ms to 16ms to not interfere with full framerate animation.

        (WebCore::FrameView::syncCompositingStateForThisFrame):
        (WebCore::FrameView::checkFlushDeferredRepaintsAfterLoadComplete):
        
            Ensure the repaint delay is reset after load completes even if we don't currently need a repaint.

        (WebCore::FrameView::flushDeferredRepaints):
        
            We had to identical functions, flushDeferredRepaints() and stopDelayingDeferredRepaints(). Remove
            the latter.

        (WebCore::FrameView::shouldUseLoadTimeDeferredRepaintDelay):
        
            Factor the test for using load time repaint timings to a functions. The test for
            initial page load having completed is new.

        (WebCore::FrameView::updateDeferredRepaintDelay):
        (WebCore::FrameView::updateLayoutAndStyleIfNeededRecursive):
        (WebCore::FrameView::setRepaintThrottlingDeferredRepaintDelay):
        * page/FrameView.h:
        (FrameView):

2012-09-04  Simon Fraser  <simon.fraser@apple.com>

        Prerequisite for <rdar://problem/11507731> Support sticky layouts

        Merged ToT WebKit r127497.

    2012-09-04  Simon Fraser  <simon.fraser@apple.com>
    
            Regression: Heap-use-after-free in WebCore::FrameView::scrollContentsFastPath
            https://bugs.webkit.org/show_bug.cgi?id=95754
    
            Reviewed by Dave Hyatt.
    
            It's possible to have a renderer with position:fixed or sticky style,
            but no layer, for example a RenderScrollBarPart. Don't register such
            renderers with the FrameView.
            
            Moved the code that registers/unregisters with the FrameView from
            styleWillChange() to styleDidChange(), since in the latter case
            we can check if we have a RenderLayer. Only register renderers with layers.
            We always unregister, which required removing an assertion in
            FrameView::removeFixedObject(), and replacing it with a null check of m_fixedObjects.
    
            Test: fast/css/remove-fixed-resizer-crash.html
    
            * page/FrameView.cpp:
            (WebCore::FrameView::removeFixedObject):
            * rendering/RenderBoxModelObject.cpp:
            (WebCore::RenderBoxModelObject::styleWillChange):
            (WebCore::RenderBoxModelObject::styleDidChange):

2012-09-04  Simon Fraser  <simon.fraser@apple.com>

        Prerequisite for <rdar://problem/11507731> Support sticky layouts

        Merged ToT WebKit r127301.
    
    2012-08-31  Simon Fraser  <simon.fraser@apple.com>
    
            (Regression: r126774): Fix crash when scrolling after removing inline sticky element
            https://bugs.webkit.org/show_bug.cgi?id=95584
    
            Reviewed by Dave Hyatt.
    
            Move fixed/sticky registration and unregistration with the FrameView from
            RenderBox and RenderInline into RenderBoxModelObject, which also
            fixes the issue that inlines didn't unregister themselves on destruction.
    
            Test: fast/css/sticky/remove-inline-sticky-crash.html
    
            * rendering/RenderBox.cpp:
            (WebCore::RenderBox::willBeDestroyed): Code moved to RenderBoxModelObject. No need
            to null-check style.
            (WebCore::RenderBox::styleWillChange): Code moved to RenderBoxModelObject.
            * rendering/RenderBoxModelObject.cpp:
            (WebCore::RenderBoxModelObject::willBeDestroyed): Remove fixed objects. Check
            isPositioned() to avoid this work for most non-positioned renderers.
            (WebCore::RenderBoxModelObject::styleWillChange): Register and unregister fixed
            and sticky objects with the FrameView.
            * rendering/RenderInline.cpp: styleWillChange() is no longer needed.
            * rendering/RenderInline.h: Ditto.
    
2012-08-30  Simon Fraser  <simon.fraser@apple.com>

        iOS parts of <rdar://problem/11507731> Support sticky layouts

        Reviewed by Dan Bernstein.
        
        Rename methods and member variables which reference "fixed position"
        to use the term "viewport-constrained" instead, since they will apply
        to both fixed and sticky-position layers.
        
        Also use the "actual" visible viewport rect on iOS for sticky.

        * loader/EmptyClients.h:
        * page/ChromeClient.h:
        * rendering/RenderBoxModelObject.cpp:
        (WebCore::RenderBoxModelObject::stickyPositionOffset): Use the actual visible viewport
        rect on iOS.
        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::updateGraphicsLayerGeometry):
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::flushPendingLayerChanges):
        (WebCore::RenderLayerCompositor::didFlushChangesForLayer):
        (WebCore::RenderLayerCompositor::updateCompositingLayers):
        (WebCore::RenderLayerCompositor::updateBacking):
        (WebCore::RenderLayerCompositor::layerWillBeRemoved):
        (WebCore::RenderLayerCompositor::didMoveOnscreen):
        (WebCore::RenderLayerCompositor::willMoveOffscreen):
        (WebCore::RenderLayerCompositor::clearBackingForLayerIncludingDescendants):
        * rendering/RenderLayerCompositor.h:
        (RenderLayerCompositor):

2012-08-30  Simon Fraser  <simon.fraser@apple.com>

        Prerequisite for <rdar://problem/11507731> Support sticky layouts

        Merged ToT WebKit r126943.
    
    2012-08-28  Simon Fraser  <simon.fraser@apple.com>
    
            Handle sticky that overflows its container
            https://bugs.webkit.org/show_bug.cgi?id=95260
    
            Reviewed by Ojan Vafai.
    
            When an element with position:sticky overflows its container,
            don't have the sticky code push it back inside that container.
            It will just never get offset in the sticky direction.
    
            Test: fast/css/sticky/sticky-overflowing.html
    
            * rendering/RenderBoxModelObject.cpp:
            (WebCore::RenderBoxModelObject::stickyPositionOffset):

2012-08-30  Simon Fraser  <simon.fraser@apple.com>

        Prerequisite for <rdar://problem/11507731> Support sticky layouts

        Merged ToT WebKit r126919.

    2012-08-28  Simon Fraser  <simon.fraser@apple.com>
    
            Regression (r126774): Crash when scrolling after removing sticky element.
            https://bugs.webkit.org/show_bug.cgi?id=95174
    
            Reviewed by Abhishek Arya.
    
            RenderBox::willBeDestroyed() needs to check for both fixed and sticky
            position to determine whether to remove an object from FrameView's
            set of fixed objects.
    
            Test: fast/css/sticky/remove-sticky-crash.html
    
            * rendering/RenderBox.cpp:
            (WebCore::RenderBox::willBeDestroyed):

2012-08-30  Simon Fraser  <simon.fraser@apple.com>

        Prerequisite for <rdar://problem/11507731> Support sticky layouts

        Merged ToT WebKit r126812.

    2012-08-27  Simon Fraser  <simon.fraser@apple.com>
    
            If both left and right (or top and bottom) are specified for sticky, use left (or top)
            https://bugs.webkit.org/show_bug.cgi?id=95146
    
            Reviewed by Dan Bernstein.
    
            Remove the incorrect FIXME comment, and swap the left and right,
            and top and bottom constraints so that left and top win out,
            as they do for position:relative.
    
            Test: fast/css/sticky/sticky-both-sides.html
    
            * rendering/RenderBoxModelObject.cpp:
            (WebCore::RenderBoxModelObject::stickyPositionOffset):

2012-08-30  Simon Fraser  <simon.fraser@apple.com>

        Prerequisite for <rdar://problem/11507731> Support sticky layouts

        Merged ToT WebKit r126774.

    2012-08-24  Simon Fraser  <simon.fraser@apple.com>
    
            Implement sticky positioning
            https://bugs.webkit.org/show_bug.cgi?id=90046
    
            Reviewed by Ojan Vafai.
    
            Initial implementation of position: -webkit-sticky, which 
            constrains an element to be positioned inside the intersection
            of its container box, and the viewport. Sticky elements create
            stacking context.
            
            A stickily positioned element behaves like position:relative
            (space is reserved for it in-flow), but with an offset that is
            determined by the sticky position. Changed isInFlowPositioned()
            to cover relative and sticky.
            
            Added a convenience isPositioned() to RenderObject(), which
            is true for an object with any non-static position value.
            
            Tests: fast/css/sticky/inflow-sticky.html
                   fast/css/sticky/inline-sticky-abspos-child.html
                   fast/css/sticky/inline-sticky.html
                   fast/css/sticky/replaced-sticky.html
                   fast/css/sticky/sticky-as-positioning-container.html
                   fast/css/sticky/sticky-left-percentage.html
                   fast/css/sticky/sticky-left.html
                   fast/css/sticky/sticky-margins.html
                   fast/css/sticky/sticky-side-margins.html
                   fast/css/sticky/sticky-stacking-context.html
                   fast/css/sticky/sticky-top-margins.html
                   fast/css/sticky/sticky-top.html
                   fast/css/sticky/sticky-writing-mode-horizontal-bt.html
                   fast/css/sticky/sticky-writing-mode-vertical-lr.html
                   fast/css/sticky/sticky-writing-mode-vertical-rl.html
    
            * css/StyleResolver.cpp:
            (WebCore::StyleResolver::adjustRenderStyle): Have position:sticky
            create stacking context from the get-go, to make scrolling optimizations easier later.
            * page/FrameView.cpp:
            (WebCore::FrameView::scrollContentsFastPath): Use hasViewportConstrainedPosition().
            * page/FrameView.h: FrameView's "fixed" objects contains both fixed and sticky objects now.
            * rendering/RenderBlock.cpp: Use isPositioned().
            (WebCore::RenderBlock::isSelectionRoot):
            (WebCore::RenderBlock::renderName):
            * rendering/RenderBox.cpp:
            (WebCore::RenderBox::styleWillChange): Need to look for both stick and fixed positioning to
            determine whether to add something to FrameView's fixed object set.
            (WebCore::RenderBox::computeRectForRepaint): Need to take the sticky offset into account
            when computing repaint rects.
            * rendering/RenderBox.h: Implement frameRectForStickyPositioning() for boxes.
            * rendering/RenderBoxModelObject.cpp:
            (WebCore::RenderBoxModelObject::updateBoxModelInfoFromStyle):
            (WebCore::RenderBoxModelObject::adjustedPositionRelativeToOffsetParent):
            (WebCore::RenderBoxModelObject::stickyPositionOffset): Compute the sticky position
            offset by taking into account the viewport rect, and the conteriner's contentRect
            inset by its margins.
            (WebCore::RenderBoxModelObject::offsetForInFlowPosition): Convenience wrapper
            for getting relative or sticky offset.
            * rendering/RenderBoxModelObject.h: Have requiresLayer() use isPositioned().
            (WebCore::RenderBoxModelObject::stickyPositionLogicalOffset):
            * rendering/RenderInline.cpp:
            (WebCore::RenderInline::styleWillChange): Need to implement this to 
            add/remove objects from FrameView's fixed object list, since, prior to sticky,
            only boxes could be fixed.
            (WebCore::RenderInline::renderName):
            (WebCore::RenderInline::positionForPoint):
            (WebCore::RenderInline::computeRectForRepaint):
            * rendering/RenderInline.h:
            * rendering/RenderLayer.cpp:
            (WebCore::RenderLayer::updateLayerPositionsAfterScroll): Have to look for fixed or sticky.
            (WebCore::RenderLayer::calculateClipRects): Use isPositioned().
            (WebCore::RenderLayer::shouldBeNormalFlowOnly): Ditto.
            * rendering/RenderLayer.h:
            * rendering/RenderObject.cpp:
            (WebCore::RenderObject::styleWillChange):
            (WebCore::RenderObject::propagateStyleToAnonymousChildren): Should use isInFlowPositioned(),
            not just isRelPositioned().
            (WebCore::RenderObject::offsetParent): Use isPositioned().
            * rendering/RenderObject.h:
            (WebCore::RenderObject::isInFlowPositioned):
            (WebCore::RenderObject::isStickyPositioned):
            (WebCore::RenderObject::setStickyPositioned):
            (WebCore::RenderObject::RenderObjectBitfields::RenderObjectBitfields):
            (RenderObjectBitfields):
            * rendering/RenderStyle.h: add hasViewportConstrainedPosition() for fixed or sticky position.

2012-08-30  Simon Fraser  <simon.fraser@apple.com>

        Prerequisite for <rdar://problem/11507731> Support sticky layouts

        Merged ToT WebKit r126520.

    2012-08-23  Simon Fraser  <simon.fraser@apple.com>
    
            Prep work for: Implement sticky positioning
            https://bugs.webkit.org/show_bug.cgi?id=90046
    
            Reviewed by Dave Hyatt.
            
            Do some method renaming in preparation for adding a new kind
            of in-flow positioning: sticky positioning.
            
            Rename RenderStyle::isOutOfFlowPositioned() to hasOutOfFlowPosition().
            Add RenderStyle::hasInFlowPosition().
            
            Use RenderObject::isInFlowPositioned() in places where it will apply
            for both relative and sticky positioning.
            
            Add RenderBoxModelObject::offsetForInFlowPosition(), which currently
            applies just to relative positioning, but will also apply to sticky.
    
            * css/CSSComputedStyleDeclaration.cpp:
            (WebCore::getPositionOffsetValue):
            * css/StyleResolver.cpp:
            (WebCore::StyleResolver::collectMatchingRulesForList):
            * editing/TextIterator.cpp:
            (WebCore::ignoresContainerClip):
            * rendering/LayoutState.cpp:
            (WebCore::LayoutState::LayoutState):
            * rendering/RenderBlock.cpp:
            (WebCore::RenderBlock::styleWillChange):
            (WebCore::RenderBlock::isSelectionRoot):
            (WebCore::RenderBlock::blockSelectionGaps):
            (WebCore::positionForPointRespectingEditingBoundaries):
            * rendering/RenderBox.cpp:
            (WebCore::RenderBox::styleWillChange):
            (WebCore::RenderBox::updateBoxModelInfoFromStyle):
            (WebCore::RenderBox::mapLocalToContainer):
            (WebCore::RenderBox::offsetFromContainer):
            (WebCore::RenderBox::computeRectForRepaint):
            (WebCore::RenderBox::containingBlockLogicalWidthForPositioned):
            (WebCore::RenderBox::containingBlockLogicalHeightForPositioned):
            (WebCore::RenderBox::layoutOverflowRectForPropagation):
            * rendering/RenderBox.h:
            * rendering/RenderBoxModelObject.cpp:
            (WebCore::accumulateInFlowPositionOffsets):
            (WebCore::RenderBoxModelObject::relativePositionOffset):
            (WebCore::RenderBoxModelObject::offsetForInFlowPosition):
            (WebCore::RenderBoxModelObject::mapAbsoluteToLocalPoint):
            * rendering/RenderBoxModelObject.h:
            (RenderBoxModelObject):
            (WebCore::RenderBoxModelObject::stickyPositionLogicalOffset):
            (WebCore::RenderBoxModelObject::requiresLayer):
            * rendering/RenderInline.cpp:
            (WebCore::inFlowPositionedInlineAncestor): We need to actually return
            the ancestor, since we will need to copy its position type once there
            is more than one kind of in-flow position.
            (WebCore::updateStyleOfAnonymousBlockContinuations):
            (WebCore::RenderInline::styleDidChange):
            (WebCore::RenderInline::addChildIgnoringContinuation):
            (WebCore::RenderInline::clippedOverflowRectForRepaint):
            (WebCore::RenderInline::computeRectForRepaint):
            (WebCore::RenderInline::offsetFromContainer):
            (WebCore::RenderInline::mapLocalToContainer):
            (WebCore::RenderInline::offsetForInFlowPositionedInline):
            * rendering/RenderInline.h:
            (WebCore::RenderInline::requiresLayer):
            * rendering/RenderLayer.cpp:
            (WebCore::RenderLayer::updateLayerPosition):
            (WebCore::isPositionedContainer):
            (WebCore::RenderLayer::calculateClipRects):
            (WebCore::RenderLayer::shouldBeNormalFlowOnly):
            * rendering/RenderLayer.h:
            (WebCore::RenderLayer::offsetForInFlowPosition):
            * rendering/RenderObject.cpp:
            (WebCore::RenderObject::markContainingBlocksForLayout):
            (WebCore::RenderObject::setPreferredLogicalWidthsDirty):
            (WebCore::RenderObject::invalidateContainerPreferredLogicalWidths):
            (WebCore::RenderObject::containingBlock):
            * rendering/RenderObject.h:
            (WebCore::RenderObject::isRelPositioned):
            * rendering/RenderObjectChildList.cpp:
            (WebCore::RenderObjectChildList::updateBeforeAfterContent):
            * rendering/style/RenderStyle.h:

2012-08-29  Simon Fraser  <simon.fraser@apple.com>

        Prerequisite for <rdar://problem/11507731> Support sticky layouts

        Merged ToT WebKit r123379.

    2012-07-23  Simon Fraser  <simon.fraser@apple.com>
    
            Part 2 of: Implement sticky positioning
            https://bugs.webkit.org/show_bug.cgi?id=90046
    
            Reviewed by Ojan Vafai.
    
            Turn on ENABLE_CSS_STICKY_POSITION. Add support for parsing the new '-webkit-sticky'
            value for position, returning it from getComputedStyle(), and storing it in RenderStyle.
    
            Test: fast/css/sticky/parsing-position-sticky.html
    
            * Configurations/FeatureDefines.xcconfig:
            * css/CSSComputedStyleDeclaration.cpp:
            (WebCore::getPositionOffsetValue):
            * css/CSSParser.cpp:
            (WebCore::isValidKeywordPropertyAndValue):
            * css/CSSPrimitiveValueMappings.h:
            (WebCore::CSSPrimitiveValue::CSSPrimitiveValue):
            (WebCore::CSSPrimitiveValue::operator EPosition):
            * css/CSSValueKeywords.in:
            * rendering/style/RenderStyle.h:
            * rendering/style/RenderStyleConstants.h:

2012-08-29  Simon Fraser  <simon.fraser@apple.com>

        Prerequisite for <rdar://problem/11507731> Support sticky layouts

        Merged ToT WebKit r123350.

    2012-07-23  Simon Fraser  <simon.fraser@apple.com>
    
            Part 1 of: Implement sticky positioning
            https://bugs.webkit.org/show_bug.cgi?id=90046
    
            Reviewed by Ojan Vafai.
    
            Add ENABLE_CSS_STICKY_POSITION, defaulting to off initially.
            
            Sort the ENABLE_CSS lines in the file. Make sure all the flags
            are in FEATURE_DEFINES.
    
            * Configurations/FeatureDefines.xcconfig:

2012-08-29  Simon Fraser  <simon.fraser@apple.com>

        Prerequisite for <rdar://problem/11507731> Support sticky layouts

        Merged ToT WebKit r121443.

    2012-06-28  Simon Fraser  <simon.fraser@apple.com>
    
            Change FrameView::scrollContentsFastPath to use m_fixedObjects
            https://bugs.webkit.org/show_bug.cgi?id=90045
    
            Reviewed by James Robinson.
            
            FrameView now has a hash set of fixed-position objects, so use
            that instead of RenderBlock::positionedObjects(); we'll avoid traversing
            through absolutely positioned objects, and this will work better for sticky
            positioning in future.
    
            No behavior change, so no new tests.
    
            * page/FrameView.cpp:
            (WebCore::FrameView::scrollContentsFastPath):
    
2012-08-29  Simon Fraser  <simon.fraser@apple.com>

        Prerequisite for <rdar://problem/11507731> Support sticky layouts

        Merged ToT WebKit r121123.

    2012-06-24  Simon Fraser  <simon.fraser@apple.com>
    
            Rename isPositioned to isOutOfFlowPositioned for clarity
            https://bugs.webkit.org/show_bug.cgi?id=89836
    
            Reviewed by Antti Koivisto.
            
            RenderObject and RenderStyle had an isPositioned() method that was
            confusing, because it excluded relative positioning. Rename to 
            isOutOfFlowPositioned(), which makes it clearer that it only applies
            to absolute and fixed positioning.
    
            Simple rename; no behavior change.
    
            * css/CSSComputedStyleDeclaration.cpp:
            (WebCore::getPositionOffsetValue):
            * css/StyleResolver.cpp:
            (WebCore::StyleResolver::collectMatchingRulesForList):
            * dom/Text.cpp:
            (WebCore::Text::rendererIsNeeded):
            * editing/DeleteButtonController.cpp:
            (WebCore::isDeletableElement):
            * editing/TextIterator.cpp:
            (WebCore::shouldEmitNewlinesBeforeAndAfterNode):
            * rendering/AutoTableLayout.cpp:
            (WebCore::shouldScaleColumns):
            * rendering/InlineFlowBox.cpp:
            (WebCore::InlineFlowBox::addToLine):
            (WebCore::InlineFlowBox::placeBoxesInInlineDirection):
            (WebCore::InlineFlowBox::requiresIdeographicBaseline):
            (WebCore::InlineFlowBox::adjustMaxAscentAndDescent):
            (WebCore::InlineFlowBox::computeLogicalBoxHeights):
            (WebCore::InlineFlowBox::placeBoxesInBlockDirection):
            (WebCore::InlineFlowBox::flipLinesInBlockDirection):
            (WebCore::InlineFlowBox::computeOverflow):
            (WebCore::InlineFlowBox::computeOverAnnotationAdjustment):
            (WebCore::InlineFlowBox::computeUnderAnnotationAdjustment):
            * rendering/InlineIterator.h:
            (WebCore::isIteratorTarget):
            * rendering/LayoutState.cpp:
            (WebCore::LayoutState::LayoutState):
            * rendering/RenderBlock.cpp:
            (WebCore::RenderBlock::MarginInfo::MarginInfo):
            (WebCore::RenderBlock::styleWillChange):
            (WebCore::RenderBlock::styleDidChange):
            (WebCore::RenderBlock::addChildToContinuation):
            (WebCore::RenderBlock::addChildToAnonymousColumnBlocks):
            (WebCore::RenderBlock::containingColumnsBlock):
            (WebCore::RenderBlock::columnsBlockForSpanningElement):
            (WebCore::RenderBlock::addChildIgnoringAnonymousColumnBlocks):
            (WebCore::getInlineRun):
            (WebCore::RenderBlock::isSelfCollapsingBlock):
            (WebCore::RenderBlock::layoutBlock):
            (WebCore::RenderBlock::addOverflowFromBlockChildren):
            (WebCore::RenderBlock::expandsToEncloseOverhangingFloats):
            (WebCore::RenderBlock::handlePositionedChild):
            (WebCore::RenderBlock::moveRunInUnderSiblingBlockIfNeeded):
            (WebCore::RenderBlock::collapseMargins):
            (WebCore::RenderBlock::clearFloatsIfNeeded):
            (WebCore::RenderBlock::simplifiedNormalFlowLayout):
            (WebCore::RenderBlock::isSelectionRoot):
            (WebCore::RenderBlock::blockSelectionGaps):
            (WebCore::RenderBlock::clearFloats):
            (WebCore::RenderBlock::markAllDescendantsWithFloatsForLayout):
            (WebCore::RenderBlock::markSiblingsWithFloatsForLayout):
            (WebCore::isChildHitTestCandidate):
            (WebCore::InlineMinMaxIterator::next):
            (WebCore::RenderBlock::computeBlockPreferredLogicalWidths):
            (WebCore::RenderBlock::firstLineBoxBaseline):
            (WebCore::RenderBlock::lastLineBoxBaseline):
            (WebCore::RenderBlock::updateFirstLetter):
            (WebCore::shouldCheckLines):
            (WebCore::getHeightForLineCount):
            (WebCore::RenderBlock::adjustForBorderFit):
            (WebCore::inNormalFlow):
            (WebCore::RenderBlock::adjustLinePositionForPagination):
            (WebCore::RenderBlock::adjustBlockChildForPagination):
            (WebCore::RenderBlock::renderName):
            * rendering/RenderBlock.h:
            (WebCore::RenderBlock::shouldSkipCreatingRunsForObject):
            * rendering/RenderBlockLineLayout.cpp:
            (WebCore::RenderBlock::setMarginsForRubyRun):
            (WebCore::RenderBlock::computeInlineDirectionPositionsForLine):
            (WebCore::RenderBlock::computeBlockDirectionPositionsForLine):
            (WebCore::RenderBlock::layoutInlineChildren):
            (WebCore::requiresLineBox):
            (WebCore::RenderBlock::LineBreaker::skipTrailingWhitespace):
            (WebCore::RenderBlock::LineBreaker::skipLeadingWhitespace):
            (WebCore::RenderBlock::LineBreaker::nextLineBreak):
            * rendering/RenderBox.cpp:
            (WebCore::RenderBox::removeFloatingOrPositionedChildFromBlockLists):
            (WebCore::RenderBox::styleWillChange):
            (WebCore::RenderBox::styleDidChange):
            (WebCore::RenderBox::updateBoxModelInfoFromStyle):
            (WebCore::RenderBox::offsetFromContainer):
            (WebCore::RenderBox::positionLineBox):
            (WebCore::RenderBox::computeRectForRepaint):
            (WebCore::RenderBox::computeLogicalWidthInRegion):
            (WebCore::RenderBox::renderBoxRegionInfo):
            (WebCore::RenderBox::computeLogicalHeight):
            (WebCore::RenderBox::computePercentageLogicalHeight):
            (WebCore::RenderBox::computeReplacedLogicalWidthUsing):
            (WebCore::RenderBox::computeReplacedLogicalHeightUsing):
            (WebCore::RenderBox::availableLogicalHeightUsing):
            (WebCore::percentageLogicalHeightIsResolvable):
            * rendering/RenderBox.h:
            (WebCore::RenderBox::stretchesToViewport):
            (WebCore::RenderBox::isDeprecatedFlexItem):
            * rendering/RenderBoxModelObject.cpp:
            (WebCore::RenderBoxModelObject::adjustedPositionRelativeToOffsetParent):
            (WebCore::RenderBoxModelObject::mapAbsoluteToLocalPoint):
            * rendering/RenderBoxModelObject.h:
            (WebCore::RenderBoxModelObject::requiresLayer):
            * rendering/RenderDeprecatedFlexibleBox.cpp:
            (WebCore::childDoesNotAffectWidthOrFlexing):
            (WebCore::RenderDeprecatedFlexibleBox::layoutBlock):
            (WebCore::RenderDeprecatedFlexibleBox::layoutHorizontalBox):
            (WebCore::RenderDeprecatedFlexibleBox::layoutVerticalBox):
            (WebCore::RenderDeprecatedFlexibleBox::renderName):
            * rendering/RenderFieldset.cpp:
            (WebCore::RenderFieldset::findLegend):
            * rendering/RenderFlexibleBox.cpp:
            (WebCore::RenderFlexibleBox::computePreferredLogicalWidths):
            (WebCore::RenderFlexibleBox::autoMarginOffsetInMainAxis):
            (WebCore::RenderFlexibleBox::availableAlignmentSpaceForChild):
            (WebCore::RenderFlexibleBox::computeMainAxisPreferredSizes):
            (WebCore::RenderFlexibleBox::computeNextFlexLine):
            (WebCore::RenderFlexibleBox::resolveFlexibleLengths):
            (WebCore::RenderFlexibleBox::prepareChildForPositionedLayout):
            (WebCore::RenderFlexibleBox::layoutAndPlaceChildren):
            (WebCore::RenderFlexibleBox::layoutColumnReverse):
            (WebCore::RenderFlexibleBox::adjustAlignmentForChild):
            (WebCore::RenderFlexibleBox::flipForRightToLeftColumn):
            * rendering/RenderGrid.cpp:
            (WebCore::RenderGrid::renderName):
            * rendering/RenderImage.cpp:
            (WebCore::RenderImage::computeIntrinsicRatioInformation):
            * rendering/RenderInline.cpp:
            (WebCore::RenderInline::addChildIgnoringContinuation):
            (WebCore::RenderInline::addChildToContinuation):
            (WebCore::RenderInline::generateCulledLineBoxRects):
            (WebCore):
            (WebCore::RenderInline::culledInlineFirstLineBox):
            (WebCore::RenderInline::culledInlineLastLineBox):
            (WebCore::RenderInline::culledInlineVisualOverflowBoundingBox):
            (WebCore::RenderInline::computeRectForRepaint):
            (WebCore::RenderInline::dirtyLineBoxes):
            * rendering/RenderLayer.cpp:
            (WebCore::checkContainingBlockChainForPagination):
            (WebCore::RenderLayer::updateLayerPosition):
            (WebCore::isPositionedContainer):
            (WebCore::RenderLayer::calculateClipRects):
            (WebCore::RenderLayer::shouldBeNormalFlowOnly):
            * rendering/RenderLayerCompositor.cpp:
            (WebCore::RenderLayerCompositor::requiresCompositingForPosition):
            * rendering/RenderLineBoxList.cpp:
            (WebCore::RenderLineBoxList::dirtyLinesFromChangedChild):
            * rendering/RenderListItem.cpp:
            (WebCore::getParentOfFirstLineBox):
            * rendering/RenderMultiColumnBlock.cpp:
            (WebCore::RenderMultiColumnBlock::renderName):
            * rendering/RenderObject.cpp:
            (WebCore::RenderObject::markContainingBlocksForLayout):
            (WebCore::RenderObject::setPreferredLogicalWidthsDirty):
            (WebCore::RenderObject::invalidateContainerPreferredLogicalWidths):
            (WebCore::RenderObject::styleWillChange):
            (WebCore::RenderObject::offsetParent):
            * rendering/RenderObject.h:
            (WebCore::RenderObject::isOutOfFlowPositioned):
            (WebCore::RenderObject::isInFlowPositioned):
            (WebCore::RenderObject::hasClip):
            (WebCore::RenderObject::isFloatingOrOutOfFlowPositioned):
            * rendering/RenderObjectChildList.cpp:
            (WebCore::RenderObjectChildList::removeChildNode):
            * rendering/RenderReplaced.cpp:
            (WebCore::hasAutoHeightOrContainingBlockWithAutoHeight):
            * rendering/RenderRubyRun.cpp:
            (WebCore::RenderRubyRun::rubyText):
            * rendering/RenderTable.cpp:
            (WebCore::RenderTable::addChild):
            (WebCore::RenderTable::computeLogicalWidth):
            (WebCore::RenderTable::layout):
            * rendering/style/RenderStyle.h:

2012-08-29  Simon Fraser  <simon.fraser@apple.com>

        Prerequisite for <rdar://problem/11507731> Support sticky layouts

        Merged part of ToT WebKit r120340.

    2012-06-14  Sami Kyostila  <skyostil@chromium.org>
    
            Register fixed position layers with ScrollingCoordinator
            https://bugs.webkit.org/show_bug.cgi?id=78864
    
            Reviewed by James Robinson.
    
            This patch makes ScrollingCoordinator aware of page elements that are
            either fixed positioned directly or through their ancestors and that
            also have their own composited backing layers. This allows the
            ScrollingCoordinator implementation to potentially enable fast
            scrolling even if there are fixed elements on the page, because the
            compositor can automatically reposition the fixed element layers after
            scrolling.
    
            Since fixed position layers need to be explicitly supported by the
            ScrollingCoordinator implementation, we add a new
            supportsFixedPositionLayers() query for checking this.
    
            * page/FrameView.cpp:
            (WebCore::FrameView::FrameView):
            (WebCore::FrameView::useSlowRepaints):
            (WebCore::FrameView::addFixedObject):
            (WebCore::FrameView::removeFixedObject):
            * page/FrameView.h:
            (WebCore::FrameView::fixedObjects):
            (WebCore::FrameView::hasFixedObjects):
            * page/scrolling/ScrollingCoordinator.cpp:
            (WebCore::ScrollingCoordinator::frameViewFixedObjectsDidChange):
            (WebCore::ScrollingCoordinator::hasNonLayerFixedObjects):
            (WebCore::ScrollingCoordinator::updateShouldUpdateScrollLayerPositionOnMainThread):
            (WebCore::ScrollingCoordinator::supportsFixedPositionLayers):
            (WebCore::ScrollingCoordinator::setLayerIsContainerForFixedPositionLayers):
            (WebCore::ScrollingCoordinator::setLayerIsFixedToContainerLayer):
            * page/scrolling/ScrollingCoordinator.h:
            (ScrollingCoordinator):
            * page/scrolling/ScrollingCoordinatorNone.cpp:
            (WebCore::ScrollingCoordinator::supportsFixedPositionLayers):
            (WebCore::ScrollingCoordinator::setLayerIsContainerForFixedPositionLayers):
            (WebCore::ScrollingCoordinator::setLayerIsFixedToContainerLayer):
            * rendering/RenderBox.cpp:
            (WebCore::RenderBox::willBeDestroyed):
            (WebCore::RenderBox::styleWillChange):

2012-08-29  Simon Fraser  <simon.fraser@apple.com>

        Prerequisite for <rdar://problem/11507731> Support sticky layouts

        Merged ToT WebKit r118961.

    2012-05-30  Shezan Baig  <shezbaig.wk@gmail.com>
    
            Rename offsetTopLeft in RenderBoxModelObject to something better
            https://bugs.webkit.org/show_bug.cgi?id=85915
    
            Reviewed by Darin Adler.
    
            Renamed offsetTopLeft in RenderBoxModelObject to
            adjustedPositionRelativeToOffsetParent, because it returns the given
            startPoint after adjusting it to be relative to the top-left corner of
            the offsetParent.  The definition of offsetParent itself is non-trivial
            and is documented within the body of RenderObject::offsetParent,
            therefore I decided to reuse this term, as-is, in the name of this
            function.
    
            No new tests; no functional or visible changes.
    
            * rendering/RenderBox.cpp:
            (WebCore::RenderBox::offsetLeft):
            (WebCore::RenderBox::offsetTop):
            * rendering/RenderBoxModelObject.cpp:
            (WebCore::RenderBoxModelObject::adjustedPositionRelativeToOffsetParent):
            (WebCore::RenderBoxModelObject::offsetLeft):
            (WebCore::RenderBoxModelObject::offsetTop):
            * rendering/RenderBoxModelObject.h:
            (RenderBoxModelObject):
            * rendering/RenderInline.cpp:
            (WebCore::RenderInline::offsetLeft):
            (WebCore::RenderInline::offsetTop):

2012-08-29  Simon Fraser  <simon.fraser@apple.com>

        Prerequisite for <rdar://problem/11507731> Support sticky layouts

        Merged ToT WebKit r118551.

    2012-05-25  Emil A Eklund  <eae@chromium.org>
    
            Change RenderBoxModelObject to compute relativePositionOffset as size
            https://bugs.webkit.org/show_bug.cgi?id=87447
    
            Reviewed by Eric Seidel.
    
            Compute relativePositionOffset as size instead of doing one axis at a
            time as all call sites uses the size version of the method. This avoids
            having to walk the DOM twice to accumulate the offsets.
    
            Also remove the relativePositionOffsetX and Y methods as they are no
            longer used.
    
            No new tests, covered by existing tests.
    
            * rendering/RenderBox.cpp:
            (WebCore::RenderBox::layoutOverflowRectForPropagation):
            * rendering/RenderBoxModelObject.cpp:
            (WebCore::accumulateRelativePositionOffsets):
            (WebCore::RenderBoxModelObject::relativePositionOffset):
            * rendering/RenderBoxModelObject.h:
            (RenderBoxModelObject):

2012-08-29  Simon Fraser  <simon.fraser@apple.com>

        Prerequisite for <rdar://problem/11507731> Support sticky layouts
    
        Merged ToT WebKit r116446.
    
    2012-05-08  Shezan Baig  <shezbaig.wk@gmail.com>
    
            offsetLeft broken within CSS3 columns
            https://bugs.webkit.org/show_bug.cgi?id=34875
    
            Reviewed by Julien Chaffraix.
    
            Reimplement offsetLeft and offsetTop in terms of a new method called
            'offsetTopLeft'. The new method starts from a reference point (the
            top-left coordinate of a box or inline) and adjusts this reference
            point for columns as we traverse each parent. Note that the reference
            point needs to be adjusted in both dimensions, even though offsetLeft
            and offsetTop return only one of them.
    
            A new method called 'offsetForColumns' was added to RenderObject. This
            method is similar to adjustForColumns, except that it returns the
            offset instead of modifying a reference. This method is necessary to
            simplify the implementation of offsetTopLeft.
    
            Tests: fast/block/positioning/offsetLeft-offsetTop-multicolumn-expected.txt
                   fast/block/positioning/offsetLeft-offsetTop-multicolumn.html
    
            * rendering/RenderBox.h:
            (RenderBox):
            Override offsetLeft and offsetTop.
            * rendering/RenderBox.cpp:
            (WebCore::RenderBox::offsetLeft):
            Implemented in terms of RenderBoxModelObject::offsetTopLeft, using
            topLeftLocation as startPoint.
            (WebCore::RenderBox::offsetTop):
            Implemented in terms of RenderBoxModelObject::offsetTopLeft, using
            topLeftLocation as startPoint.
            * rendering/RenderBoxModelObject.cpp:
            (WebCore::RenderBoxModelObject::offsetTopLeft):
            New method to compute offsetLeft and offsetTop simultaneously, and
            adjusting for columns at each parent.
            (WebCore::RenderBoxModelObject::offsetLeft):
            Reimplemented in terms of offsetTopLeft.
            (WebCore::RenderBoxModelObject::offsetTop):
            Reimplemented in terms of offsetTopLeft.
            * rendering/RenderBoxModelObject.h:
            (RenderBoxModelObject):
            Declare new offsetTopLeft method.
            * rendering/RenderInline.cpp:
            (WebCore::RenderInline::offsetLeft):
            Reimplemented in terms of RenderBoxModelObject::offsetTopLeft.
            (WebCore::RenderInline::offsetTop):
            Reimplemented in terms of RenderBoxModelObject::offsetTopLeft.
            * rendering/RenderObject.h:
            (RenderObject):
            (WebCore::RenderObject::offsetForColumns):
            New helper method to simplify implementation of offsetTopLeft.

2012-08-31  Matt Lilek  <mrl@apple.com>

        <rdar://problem/12217572> WebCore/WebKit fails to build with clang-421 (stock Innsbruck SDK) after fixes for clang-422

        Check to see if the compiler knows about -Wunused-private-field before ignoring it.

        Not reviewed, build fix.

        * rendering/RenderLayerFilterInfo.h:
        (RenderLayerFilterInfo):
        * wak/WKGraphics.h:
        (WKFontAntialiasingStateSaver):

2012-08-30  Matt Lilek  <mrl@apple.com>

        <rdar://problem/12193538> SWB: WebKit2Embedded_Sim-8 fails to build in Innsbruck with clang-422.2.8: -Wunused-private-field and -Wmismatched-tags

        Merge OpenSource r119430, r120044, r122812, r125370, r126477, and r126478.

        Not reviewed, build fixes.

        * Modules/geolocation/GeolocationController.cpp:
        (WebCore::GeolocationController::GeolocationController):
        * Modules/geolocation/GeolocationController.h:
        (GeolocationController):
        * Modules/webaudio/AudioContext.h:
        (AudioContext):
        * Modules/webaudio/AudioParamTimeline.h:
        (AudioParamTimeline):
        * accessibility/AccessibilityScrollbar.h:
        (AccessibilityScrollbar):
        * bindings/v8/ScriptScope.cpp:
        (WebCore::ScriptScope::ScriptScope):
        * bindings/v8/ScriptScope.h:
        (ScriptScope):
        * css/CSSValue.cpp:
        * css/StylePropertySet.cpp:
        * dom/DeviceOrientationController.cpp:
        (WebCore::DeviceOrientationController::DeviceOrientationController):
        * dom/DeviceOrientationController.h:
        (DeviceOrientationController):
        * editing/ReplaceSelectionCommand.cpp:
        (ReplacementFragment):
        (WebCore::ReplacementFragment::ReplacementFragment):
        * editing/TextIterator.cpp:
        (WebCore::SimplifiedBackwardsTextIterator::SimplifiedBackwardsTextIterator):
        * editing/TextIterator.h:
        (SimplifiedBackwardsTextIterator):
        (BackwardsCharacterIterator):
        * html/HTMLFormCollection.cpp:
        (WebCore::HTMLFormCollection::HTMLFormCollection):
        * html/HTMLFormCollection.h:
        (HTMLFormCollection):
        * html/shadow/MediaControlElements.cpp:
        (WebCore::MediaControlFullscreenButtonElement::MediaControlFullscreenButtonElement):
        * html/shadow/MediaControlElements.h:
        (MediaControlFullscreenButtonElement):
        * html/shadow/MediaControlRootElement.h:
        (MediaControlRootElement):
        * html/shadow/MediaControlRootElementChromium.cpp:
        (WebCore::MediaControlRootElementChromium::MediaControlRootElementChromium):
        * html/shadow/MediaControlRootElementChromium.h:
        (MediaControlRootElementChromium):
        * html/track/LoadableTextTrack.cpp:
        (WebCore::LoadableTextTrack::LoadableTextTrack):
        * html/track/LoadableTextTrack.h:
        (LoadableTextTrack):
        * inspector/CodeGeneratorInspector.py:
        (Generator.go):
        * inspector/InspectorCSSAgent.cpp:
        (WebCore::InspectorCSSAgent::InspectorCSSAgent):
        * inspector/InspectorCSSAgent.h:
        (InspectorCSSAgent):
        * inspector/InspectorDOMDebuggerAgent.cpp:
        (WebCore::InspectorDOMDebuggerAgent::InspectorDOMDebuggerAgent):
        * inspector/InspectorDOMDebuggerAgent.h:
        (InspectorDOMDebuggerAgent):
        * inspector/InspectorMemoryAgent.cpp:
        (WebCore::InspectorMemoryAgent::InspectorMemoryAgent):
        * inspector/InspectorMemoryAgent.h:
        (InspectorMemoryAgent):
        * notifications/NotificationController.cpp:
        (WebCore::NotificationController::NotificationController):
        * notifications/NotificationController.h:
        (NotificationController):
        * page/animation/CompositeAnimation.h:
        (WebCore::CompositeAnimation::CompositeAnimation):
        (CompositeAnimation):
        * platform/Length.cpp:
        * platform/audio/ReverbConvolver.cpp:
        (WebCore::ReverbConvolver::ReverbConvolver):
        * platform/audio/ReverbConvolver.h:
        (ReverbConvolver):
        * platform/audio/ReverbConvolverStage.cpp:
        (WebCore::ReverbConvolverStage::ReverbConvolverStage):
        * platform/audio/ReverbConvolverStage.h:
        (ReverbConvolverStage):
        * platform/audio/ios/AudioFileReaderIOS.cpp:
        (WebCore::AudioFileReader::AudioFileReader):
        * platform/audio/mac/AudioFileReaderMac.cpp:
        (WebCore::AudioFileReader::AudioFileReader):
        * platform/audio/mac/AudioFileReaderMac.h:
        (AudioFileReader):
        * platform/cf/BinaryPropertyList.cpp:
        (WebCore::BinaryPropertyListWriter::writePropertyList):
        * platform/graphics/ImageSource.h:
        (ImageSource):
        * platform/graphics/StringTruncator.cpp:
        (WebCore::truncateString):
        * platform/graphics/avfoundation/objc/MediaPlayerPrivateAVFoundationObjC.h:
        (MediaPlayerPrivateAVFoundationObjC):
        * platform/graphics/cg/ImageSourceCG.cpp:
        (WebCore::ImageSource::ImageSource):
        * platform/graphics/filters/FECustomFilter.cpp:
        (WebCore::FECustomFilter::FECustomFilter):
        * platform/graphics/filters/FECustomFilter.h:
        (FECustomFilter):
        * platform/graphics/mac/GraphicsContext3DMac.mm:
        (WebCore::GraphicsContext3DPrivate::GraphicsContext3DPrivate):
        * platform/image-decoders/jpeg/JPEGImageDecoder.cpp:
        (JPEGImageReader):
        * platform/leveldb/LevelDBTransaction.cpp:
        (WebCore::LevelDBTransaction::TreeIterator::next):
        * platform/text/TextCodecICU.cpp:
        (WebCore::TextCodecICU::TextCodecICU):
        * platform/text/TextCodecICU.h:
        (TextCodecICU):
        * rendering/InlineBox.cpp:
        * rendering/InlineFlowBox.cpp:
        * rendering/RenderInline.cpp:
        (WebCore):
        (WebCore::RenderInline::absoluteQuads):
        (WebCore::RenderInline::absoluteQuadsForSelection):
        * rendering/RenderLayerFilterInfo.h:
        (RenderLayerFilterInfo):
        * rendering/RenderText.cpp:
        * rendering/style/KeyframeList.h:
        (WebCore::KeyframeList::KeyframeList):
        (KeyframeList):
        * rendering/svg/RenderSVGTextPath.cpp:
        (WebCore::RenderSVGTextPath::RenderSVGTextPath):
        * rendering/svg/RenderSVGTextPath.h:
        * svg/SVGPathByteStreamSource.cpp:
        * svg/SVGPathByteStreamSource.h:
        * svg/SVGPathTraversalStateBuilder.cpp:
        (WebCore::SVGPathTraversalStateBuilder::SVGPathTraversalStateBuilder):
        * svg/SVGPathTraversalStateBuilder.h:
        (SVGPathTraversalStateBuilder):
        * xml/XSLStyleSheet.h:

2012-08-28  Andy Estes  <aestes@apple.com>

        Add iOS support for tile caching in WebCore
        Part of <rdar://problem/12186575> Upstream PurpleMiniBrowser into puzzlebox

        Patch by Anders Carlsson, cleaned up for landing by me.

        Reviewed by Sam Weinig.

        * WebCore.xcodeproj/project.pbxproj: Added WebTileCacheLayerIOS.mm to
        the project.
        * page/ios/FrameIOS.mm:
        (WebCore::Frame::documentScale): Modified to return a default value (1)
        when there is no platform widget to consult.
        * platform/graphics/ca/GraphicsLayerCA.cpp:
        (WebCore::GraphicsLayerCA::GraphicsLayerCA): Removed unneeded iOS
        platform #ifdefs.
        (WebCore::GraphicsLayerCA::platformCALayerDidCreateTiles): Ditto.
        (WebCore::GraphicsLayerCA::updateLayerBackgroundColor): Ditto.
        (WebCore::GraphicsLayerCA::requiresTiledLayer): Ditto.
        (WebCore::GraphicsLayerCA::swapFromOrToTiledLayer): Ditto.
        * platform/graphics/ca/PlatformCALayer.h: Ditto.
        * platform/graphics/ca/ios/WebTileCacheLayerIOS.mm: Added an
        iOS-specific implementation of WebTileCacheLayer.
        * platform/graphics/ca/mac/PlatformCALayerMac.mm: Removed unneeded iOS
        platform #ifdefs.
        (PlatformCALayer::PlatformCALayer): Ditto.
        (PlatformCALayer::~PlatformCALayer): Ditto.
        (PlatformCALayer::tiledBacking): Ditto.
        * platform/graphics/mac/WebLayer.mm:
        (drawLayerContents): Ditto.
        * platform/graphics/mac/WebTiledLayer.mm:
        (+[WebTiledLayer shouldDrawOnMainThread]): Modified to return YES if
        running in WebKit2 (by checking for the absence of the web thread).
        * platform/ios/TileLayer.h: Declared a class method that returns the
        current layer being painted, which is used by WebTileCacheLayerIOS.mm.
        * platform/ios/TileLayer.mm:
        (+[TileLayer layerBeingPainted]): Implemented said method.
        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::shouldClipCompositedBounds): Removed
        unneeded iOS platform #ifdefs.

2012-08-24  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/12109705> LayoutTests/fast/text/line-initial-and-final-swashes.html fails on iOS

        Reviewed by Enrica Casucci.

        * platform/graphics/cocoa/FontPlatformDataCocoa.mm:
        (WebCore::FontPlatformData::ctFont): Replicated the logic used in the OS X branch to look for
        Hoefler Text Italic and disable swashes for it.

2012-08-22  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/11831396> Setting WebKitEnableHTTPPipelining user default never works on iOS

        Merged ToT WebKit r126346.

    2012-08-22  Pratik Solanki  <psolanki@apple.com>

        Setting WebKitEnableHTTPPipelining doesn't work if default is true
        https://bugs.webkit.org/show_bug.cgi?id=94537

        Reviewed by David Kilzer.

        * platform/network/cf/ResourceRequestCFNet.cpp:
        (WebCore::initializeMaximumHTTPConnectionCountPerHost): Read in the HTTP pipelining pref and
        allow it to override the default pipelining behavior if it was actually set.

2012-08-22  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/12134474> WebView has a black hole in it (embed flash plugin with no height).

        If a embed flash plugin doesn't have width or height attribute, don't specify width or height
        for the transformed shadow iframe.  This allows WebCore to set the intrinsic width (300px) or
        height (150px) for the iframe and matches the generic case when a plugin element has no width
        or height specified.

        Reviewed by David Kilzer.

        Test: platform/iphone-simulator/iphone/plugin/youtube-flash-plugin-iframe-no-height-or-width.html

        * html/HTMLPlugInImageElement.cpp:
        (WebCore::HTMLPlugInImageElement::createShadowIFrameSubtree):

2012-08-22  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/12097409> "Load Remote Images" button doesn't show up for this email

        Merged ToT WebKit r126325.

    2012-08-22  Pratik Solanki  <psolanki@apple.com>

        Failure to dispatch delegate callbacks if resource load fails synchronously
        https://bugs.webkit.org/show_bug.cgi?id=94644

        Reviewed by Antti Koivisto.

        Resource loads can be triggered by layout after document load is
        complete but before we have dispatched didFinishLoadForFrame callback.
        In such cases, if the load fails synchronously due to the client
        returning 0 from willSendRequest callback, we would fail to call
        didFinishLoading. this was fixed for Font resources in r122446 for bug
        91018. This fixes it in the general case by having CachedResourceLoader
        call FrameLoader::checkLoadComplete() when it is done loading all
        resources.

        * css/CSSFontSelector.cpp:
        (WebCore::CSSFontSelector::beginLoadTimerFired):
        * loader/cache/CachedResourceLoader.cpp:
        (WebCore::CachedResourceLoader::decrementRequestCount):

2012-08-21  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/12116720> REGRESSION (Hoodoo): Scrolling to bottom of m.facebook.com doesn't load more posts (Test)

        Revert the change in <rdar://problem/7958018>, put ASSERT(!m_suspended) back in SuspendableTimer.cpp.

        Reviewed by David Kilzer.

        Test: platform/iphone-simulator/fast/dom/timer-fire-after-page-pause.html

        * page/SuspendableTimer.cpp:
        (WebCore::SuspendableTimer::suspend):

2012-08-18  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/12116720> REGRESSION (Hoodoo): Scrolling to bottom of m.facebook.com doesn't load more posts

        There is iOS specific code in DOMTimer.cpp to pause a new timer if the page is already paused.  Open source r107239
        also added code to pause the timer if active DOMObjects are paused.  In Facebook page, a timer is installed on touchMove
        event, and this timer could be paused twice if page is already paused by scrolling, but only resumed once when scroll stops.

        Since active DOMObjects are always paused if page is paused (timersPaused() is true), we can remove the iOS specific
        pause code in DOMTimer.cpp.

        Reviewed by David Carson.

        * page/DOMTimer.cpp:
        (WebCore::DOMTimer::install):

2012-08-13  Benjamin Poulain  <bpoulain@apple.com>

        <rdar://problem/10962942> Crash due to SpringBoard watchdog in MobileSafari, etc. at WebKit:  -[WebDatabasePauser applicationDidEnterBackground]

        Reviewed by David Kilzer.

        Previously, pausing the database was not thread safe because of race conditions with the DatabaseThread.

        This patch attempts to fix that by keeping the "paused" state outside of DatabaseThread and applying the state
        on the DatabaseThread on creation when needed.

        We want to be able to pause any existing thread, and any thread that might be created by JavaScript in the future.

        If the thread exists, DatabaseContext::setPaused() can pause it directly.
        If the thread does not exist, we keep the state for when it is created. When the thread is created, we set the
        pause state.
        To avoid any race between DatabaseContext::databaseThread() and DatabaseContext::setPaused(), the creation of
        a new DatabaseThread is guarded by a mutex.

        The DatabaseContext itself is protected by DatabaseTracker's DatabaseMapGuard.

        * Modules/webdatabase/DatabaseContext.cpp:
        (WebCore::DatabaseContext::databaseThread):
        (WebCore):
        (WebCore::DatabaseContext::setPaused):
        * Modules/webdatabase/DatabaseContext.h:
        (DatabaseContext):
        * Modules/webdatabase/DatabaseTracker.cpp:
        (WebCore::DatabaseTracker::setDatabasesPaused):

2012-08-14  Pratik Solanki  <psolanki@apple.com>

        Remove duplicate ENABLE_CSS_FILTERS.

        Reviewed by David Kilzer.

        * Configurations/FeatureDefines.xcconfig:

2012-08-14  Paul Knight  <pknight@apple.com>

        <rdar://problem/9633835> For the love of all that is good and right with the world kill LegacyNumberInputType

        The workaround of treating <input type="number"> form fields like type="text"
        fields is no longer necessary. Remove the InputType that allowed us to fake
        the old behavior and the WebKit settings that exposed this to clients as SPI.

        This will also mean third party applications that link against SDKs earlier
        than Telluride may regress, as we were enabling the legacy behavior for them
        as well.

        Reviewed by Joseph Pecoraro.

        * WebCore.xcodeproj/project.pbxproj:
        * html/InputType.cpp:
        (WebCore::InputType::create):
        * html/LegacyNumberInputType.cpp: Removed.
        * html/LegacyNumberInputType.h: Removed.
        * page/Settings.cpp:
        (WebCore::Settings::Settings):
        * page/Settings.h:
        (Settings):

2012-08-14  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/7200193> All Arabic characters are forced to render in Geeza Pro

        Reviewed by Dave Kilzer.

        Instead of ignoring Arabic characters in all fonts and causing fallback to Geeza Pro, ignore
        the Arabic characters only in Times New Roman, which is the only font in the system that has
        the problem that it includes Arabic glyphs but Core Text doesn’t know how to shape them
        correctly.

        * platform/graphics/FontFastPath.cpp:
        (WebCore::Font::glyphDataAndPageForCharacter): Removed code to force the fallback path for
        characters in the range U+0600..U+06FF.
        * platform/graphics/GlyphPageTreeNode.cpp:
        (WebCore::GlyphPageTreeNode::initializePage): Added code to skip filling the page if the
        font should not be used for Arabic, and this is the U+0600..U+06FF page. Removed older code
        to support sending all Arabic through the fallback path.
        * platform/graphics/SimpleFontData.h:
        (SimpleFontData): Declared shouldNotBeUsedForArabic.
        * platform/graphics/mac/FontComplexTextMac.cpp:
        (WebCore::Font::fontDataForCombiningCharacterSequence): Removed older code to support sending
        all Arabic through the fallback path. Added code to skip over fonts in the fallback list that
        should not be used for Arabic if the base character is in the U+0600..U+06FF range.
        * platform/graphics/mac/SimpleFontDataMac.mm:
        (WebCore::SimpleFontData::shouldNotBeUsedForArabic): Added. Returns true if the font comes
        from the Times New Roman family, which contains glyphs for Arabic but Core Text is unable to
        shape correctly.

2012-08-09  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/12049707> Expose -[DOMRange renderedImageForcingBlackText:] in iOS

        Reviewed by Sam Weinig.

        * bindings/objc/DOM.mm:
        (-[DOMRange renderedImageForcingBlackText:renderedImageForcingBlackText:]): Added a version
        of this method that returns a CGImageRef.
        * bindings/objc/DOMPrivate.h:
        * page/Frame.h:
        (Frame): Declared rangeImage() as returning a CGImageRef in iOS.
        * page/mac/FrameMac.mm:
        (WebCore::Frame::rangeImage): Added a version of this function that returns a CGImageRef.

2012-08-08  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/12038370> REGRESSION (Sundance10A367): Images are too small in epub3 test book

        Merged TOT WebKit r125050.

    2012-08-08  Dan Bernstein  <mitz@apple.com>

        REGRESSION (r123171): <svg> element with intrinsic size and max-width gets sized incorrectly
        https://bugs.webkit.org/show_bug.cgi?id=93388

        Reviewed by Beth Dakin.

        Test: svg/css/max-width-3.html

        * rendering/RenderReplaced.cpp:
        (WebCore::RenderReplaced::computeAspectRatioInformationForRenderBox): Added code to set
        m_intrinsicSize in the no-contentRenderer branch of this function so that the calls to
        RenderBox::computeReplacedLogical{Height,Width} in the end use the right intrinsic size.
        This is similar to what the contentRenderer branch of this function already does.

2012-08-05  Tim Horton  <timothy_horton@apple.com>

        <rdar://problem/12034933> REGRESSION (r115379): apple.com top bar can render without text if page load is interrupted by a refresh

        Merge open source r124720.

    2012-08-05  Antti Koivisto  <antti@apple.com>

        Don't reuse cached stylesheet with failed or canceled resource loads
        https://bugs.webkit.org/show_bug.cgi?id=93203

        Reviewed by Simon Fraser.

        1) Go to apple.com
        2) Reload repeatedly

        Eventually you can get into state where some images don't load.

        The problem is that a cached stylesheet may end up pointing to image resources that have been canceled (by the reload).
        If this happens they stay in the canceled state even when the stylesheet is applied to a new document.

        Fix by checking if all loads are complete (or pending) when restoring a cached stylesheet. The sheet is only used
        if there are no failed or canceled loads. There are potential more sophisticated fixes but this is simple and safe.
        Walking the sheet is fast and since it is only done on cache restore the cost is minimal.

        No regression test yet though the new code does get exercised by the existing tests.

        * css/CSSCrossfadeValue.cpp:
        (WebCore::CSSCrossfadeValue::hasFailedOrCanceledSubresources):
        (WebCore):
        * css/CSSCrossfadeValue.h:
        (CSSCrossfadeValue):
        * css/CSSFontFaceSrcValue.cpp:
        (WebCore::CSSFontFaceSrcValue::hasFailedOrCanceledSubresources):
        (WebCore):
        * css/CSSFontFaceSrcValue.h:
        (CSSFontFaceSrcValue):
        * css/CSSImageSetValue.cpp:
        (WebCore::CSSImageSetValue::hasFailedOrCanceledSubresources):
        (WebCore):
        * css/CSSImageSetValue.h:
        (CSSImageSetValue):
        * css/CSSImageValue.cpp:
        (WebCore::CSSImageValue::hasFailedOrCanceledSubresources):
        (WebCore):
        * css/CSSImageValue.h:
        (CSSImageValue):
        * css/CSSValue.cpp:
        (WebCore::CSSValue::hasFailedOrCanceledSubresources):
        (WebCore):
        * css/CSSValue.h:
        (CSSValue):
        * css/CSSValueList.cpp:
        (WebCore::CSSValueList::hasFailedOrCanceledSubresources):
        (WebCore):
        * css/CSSValueList.h:
        (CSSValueList):
        * css/StylePropertySet.cpp:
        (WebCore::StylePropertySet::hasFailedOrCanceledSubresources):
        (WebCore):
        * css/StylePropertySet.h:
        (StylePropertySet):
        * css/StyleSheet.cpp:
        (WebCore::childRulesHaveFailedOrCanceledSubresources):
        (WebCore):
        (WebCore::StyleSheetInternal::hasFailedOrCanceledSubresources):
        * css/StyleSheet.h:
        (StyleSheetInternal):
        * loader/cache/CachedCSSStyleSheet.cpp:
        (WebCore::CachedCSSStyleSheet::restoreParsedStyleSheet):
        * loader/cache/CachedResource.h:
        (WebCore::CachedResource::loadFailedOrCanceled):

2012-08-03  Benjamin Poulain  <bpoulain@apple.com>

        <rdar://problem/12022724> We send resize events for temporary content size change

        Reviewed by Simon Fraser.

        After OpenSource WebKit r110938, we sent window.resize events when visibleContentRect() changes. On iOS, that rect
        depends on the document size, so we started sending window.resize events for every change in document size.

        This patch bases the size test on actualVisibleContentRect(), which is the area visible in the viewport.

        This patch has two side effects:
        -It adds a window.resize event on rotation.
        -It adds a window.resize event for iPhone fullscreen change.

        There is still no window.resize event on zoom.

        * page/FrameView.cpp:
        (WebCore::FrameView::layout):
        (WebCore::FrameView::performPostLayoutTasks):

2012-08-03  Tim Horton  <timothy_horton@apple.com>

        <rdar://problem/12021394> REGRESSION (1135211): Style/attachments ignored during copy/paste

        Reviewed by Enrica Casucci.

        Revert https://svn.apple.com/trac/puzzlebox/changeset/1135211, as it caused copying styled content
        from non-editable rich text views (like Mail's viewer and Safari content) to break.

        * platform/ios/PasteboardIOS.mm:
        (WebCore::Pasteboard::writeSelection):

2012-08-02  Joseph Pecoraro  <pecoraro@apple.com>

        <rdar://problem/12017624> REGRESSION: <textarea placeholder="…"> has poorly placed placeholder text

        Add back in some text-indent for textarea placeholders.        

        Reviewed by David Carson.

        * css/html.css:
        (textarea::-webkit-input-placeholder):

2012-08-02  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/11873416> REGRESSION (10A353): Opening Numbers document in MobileSafari results in blank page

        If a QuickLook document has sub-resources, calling finishConverting for QLPreviewConverter will prematurely clear
        its QLPreviewParts and cancel loading sub-resources.  Since [QLPreviewConverter dealloc] also clears _previewParts,
        we don't need to call finishConverting explicitly because deleting the converter later will clear the parts.

        Reviewed by David Carson.

        * platform/network/ios/QuickLook.mm:
        (WebCore::QuickLookHandle::~QuickLookHandle):

2012-08-02  Antti Koivisto  <antti@apple.com>

        <rdar://problem/11979269> REGRESSION (r114265): Object placement is not correct when quicklooking a large document

        Merge open source r124463.

    2012-08-02  Antti Koivisto  <antti@apple.com>

        Inline stylesheets can confuse style sharing
        https://bugs.webkit.org/show_bug.cgi?id=92970

        Reviewed by Dan Bernstein.

        Consider document 
        
        <div class="i30"></div>
        <style>.i30 { background-color:green; }</style>
        <div class="i30"></div>
        
        When processing the <style> element the scope optimization marks the first div as needing style recalc. 
        Next the parser adds the second div to the tree and immediately calculates its style. Since it looks exactly 
        like the first div the style sharing optimization copies the style from there. The pending recalc of the
        first div is resolved by a timer but the second div is left with the old style.
        
        Fix by disallowing style sharing from elements with pending style recalc.

        Test: fast/css/style-sharing-inline-stylesheet.html

        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::canShareStyleWithElement):

2012-07-31  Antti Koivisto  <antti@apple.com>

        <rdar://problem/11956222> REGRESSION: iBooks crashed in WebCore::FrameLoader::checkLoadComplete with Chinese character book

        Merge open source r124229.

    2012-07-31  Antti Koivisto  <antti@apple.com>

        Crash in FrameLoader::checkLoadComplete with non-browser client app
        https://bugs.webkit.org/show_bug.cgi?id=92774

        Reviewed by Alexey Proskuryakov..

        Speculative fix. It is possible that CSSFontSelector could get deleted during the timer callback
        and memory reused, making m_document point to some garbage when it is tested at the end.

        * css/CSSFontSelector.cpp:
        (WebCore::CSSFontSelector::beginLoadTimerFired):

2012-07-30  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/11947388> Text magnifier displays very small text and not centered when selecting the first line of the page
        -and-
        <rdar://problem/11969630> Lollipop is off position in vertical layout

        Reviewed by Enrica Casucci.

        Selection and caret rects for the first line of a page extend all the way to the last line
        on the previous page. When WebCore draws those things, the extra part before the line just
        gets clipped out by the column clip. When UIKit draws them, it is unaware of columns, which
        leads to the bug.

        * rendering/RenderText.cpp:
        (WebCore::RenderText::collectSelectionRects): For selection rects on the first line after
        a page break, chop off the part that is outside the page.
        (WebCore::RenderText::localCaretRect): If the caret is on the first line after a page break,
        chop off the part that is outside the page.

2012-07-29  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/11927312> Selection/WebVisiblePosition APIs misbehave around edges of a vertical page

        Merged TOT WebKit r123571, r123684, r123904, r123913, r123973, r123977, r123980, r123988, and r123990.

    2012-07-29  Dan Bernstein  <mitz@apple.com>

        Hit testing in the gap between pages returns incorrect results in flipped blocks writing modes
        https://bugs.webkit.org/show_bug.cgi?id=92600

        Reviewed by Simon Fraser.

        Test: fast/multicol/hit-test-gap-between-pages-flipped.html

        * rendering/RenderBlock.h:
        (WebCore::RenderBlock): Promoted offsetForContents() from private to protected, and demoted
        adjustPointToColumnContents() back to private.
        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::hitTest): Changed to flip the point passed to updateHitTestResults().
        * rendering/RenderView.cpp:
        (WebCore::RenderView::updateHitTestResult): Changed to call offsetForContents(), which, as
        of r123977, correctly accounts for flippedness.

    2012-07-29  Dan Bernstein  <mitz@apple.com>

        In flipped blocks, a point on the top edge of a text box is considered outside the box (and vice versa)
        https://bugs.webkit.org/show_bug.cgi?id=92597

        Reviewed by Ryosuke Niwa.

        This is similar to <http://webkit.org/b/92593> except for RenderText. Fixing this required
        fixing some code that creates a point inside a box by setting its y coordinate to the
        logical top of the box. In a flipped block, this would be just outside the box.

        Enhanced fast/writing-mode/flipped-blocks-hit-test-line-edges.html to cover this.

        * editing/visible_units.cpp:
        (WebCore::absoluteLineDirectionPointToLocalPointInBlock): Changed to use
        RootInlineBox::blockDirectionPointInLine in the vertical case as well.
        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::positionForPointWithInlineChildren): Changed to use
        RootInlineBox::blockDirectionPointInLine.
        * rendering/RenderText.cpp:
        (WebCore::RenderText::positionForPoint): Changed the strictness of y inequalities based on
        the flippedness of the block. This fixes the bug.
        * rendering/RootInlineBox.cpp:
        (WebCore::RootInlineBox::blockDirectionPointInLine): Moved the implementation here from the
        header, and made it return the bottom in the flipped block case, so that the returned point
        is inside the line in that case as well.
        * rendering/RootInlineBox.h:

    2012-07-29  Dan Bernstein  <mitz@apple.com>

        In flipped blocks, a point on the top edge of a box is considered outside the box (and vice versa)
        https://bugs.webkit.org/show_bug.cgi?id=92593

        Reviewed by Simon Fraser.

        With respect to hit testing, boxes should always behave as half-open intervals which include
        the physical top and left edges and not the bottom and right edges.
        RenderBlock::positionForPoint was not adhering to this, since it was comparing flipped
        coordinates.

        Tests: fast/writing-mode/flipped-blocks-hit-test-box-edges.html
               fast/writing-mode/flipped-blocks-hit-test-line-edges.html

        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::positionForPointWithInlineChildren): When blocks are flipped, changed
        strict inequalities of y coordinates into non-strict ones and non-strict inequalities into
        strict ones.
        (WebCore::RenderBlock::positionForPoint): Ditto, except for the test for being under the top
        of the last candidate box, which was made non-strict in the unflipped case and remained
        strict.

    2012-07-29  Dan Bernstein  <mitz@apple.com>

        RenderBlock::offsetForContents() is wrong in flipped blocks writing modes
        https://bugs.webkit.org/show_bug.cgi?id=92588

        Reviewed by Sam Weinig.

        Tests: fast/multicol/hit-test-block-axis-flipped.html
               fast/writing-mode/flipped-blocks-hit-test-overflow-scroll.html

        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::offsetForContents): Flip the point, which puts it back in unflipped
        coordinates, before adding the scroll offset and adjusting for columns, then flip it back.
        (WebCore::RenderBlock::adjustPointToColumnContents): Changed the inline-axis cases to
        work with an unflipped point.

    2012-07-29  Dan Bernstein  <mitz@apple.com>

        In flipped lines writing modes, hit testing at the beginning of a column may return a result from the previous column
        https://bugs.webkit.org/show_bug.cgi?id=92566

        Reviewed by Simon Fraser.

        Enhanced the fix for <http://webkit.org/b/92524> to work with flipped lines.

        Extended fast/multicol/hit-test-end-of-column-with-line-height.html.

        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::positionForPointWithInlineChildren): For flipped lines, check if the
        hit line is the last one before a page break, and in that case, check if the hit point was
        after the break.

    2012-07-29  Scott Graham  <scottmg@chromium.org>

        Fix COMPILE_ASSERT for InlineFlowBox growing
        https://bugs.webkit.org/show_bug.cgi?id=92541

        Reviewed by Dan Bernstein.

        Use unsigned instead of bool to keep size small on Windows.

        No new tests.

        * rendering/InlineFlowBox.h:
        (InlineFlowBox):

    2012-07-29  Dan Bernstein  <mitz@apple.com>

        Hit testing near a column break can return a result from an adjacent column when there is leading
        https://bugs.webkit.org/show_bug.cgi?id=92524

        Reviewed by Anders Carlsson.

        The fix for <http://webkit.org/b/92311> relied on the existence of a pagination strut for
        detecting that a line was at the beginning of a new column. However, when a line naturally
        falls at the beginning of a column, there is no pagination strut, and the check failed.

        Test: fast/multicol/hit-test-end-of-column-with-line-height.html

        * rendering/InlineFlowBox.h:
        (WebCore::InlineFlowBox::InlineFlowBox): Added initializer for new member variable.
        (InlineFlowBox): Added m_isFirstAfterPageBreak member variable.
        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::positionForPointWithInlineChildren): Changed the test for whether a
        line was at the beginning of a column from relying on a pagination strut to checking
        isFirstAfterPageBreak(). Also refined the hit test itself to include the leading above such
        a line.
        (WebCore::RenderBlock::adjustLinePositionForPagination): Added calls to
        setIsFirstAfterPageBreak() to first reset this flag, then set it to true if necessary.
        * rendering/RootInlineBox.h:
        (WebCore::RootInlineBox::isFirstAfterPageBreak): Added this accessor.
        (WebCore::RootInlineBox::setIsFirstAfterPageBreak): Ditto.

    2012-07-29  Dan Bernstein  <mitz@apple.com>

        Hit testing in one column or in the gap between cloumns along the block axis can return a result from the wrong column
        https://bugs.webkit.org/show_bug.cgi?id=92311

        Reviewed by Anders Carlsson.

        Tests: fast/multicol/hit-test-end-of-column.html
               fast/multicol/hit-test-gap-block-axis.html

        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::positionForPointWithInlineChildren): To prevent hits after the last
        line on a given column from returning the next line in the next column, added a check if
        the hit occurred within the pagination strut of a line. Covered by the first test.
        (WebCore::RenderBlock::adjustPointToColumnContents): Added clamp-to-column logic for the
        block-axis case. This prevents hits near the bottom of the top half of the gap from bleeding
        into the top of the next column. Covered by the second test.

    2012-07-29  Dan Bernstein  <mitz@apple.com>

        RenderBlock::positionForPoint can fail when the block or its children have a vertical writing mode
        https://bugs.webkit.org/show_bug.cgi?id=92202

        Reviewed by Beth Dakin.

        Test: fast/writing-mode/positionForPoint.html

        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::positionForPoint): Fixed two issues, each of which are covered by
        one of the sub-tests in the new regression test: (1) changed to compare children’s logical
        bounds against pointInLogicalContents, i.e. compare childern’s horizontal bounds to the
        point’s horizontal component; and (2) changed to use logicalTopForChild and
        logicalHeightForChild, which account for this block’s writing mode, instead of logicalTop
        and logicalBottom, which are based on the child’s writing mode.

2012-07-29  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/11883899> N94/10A356 Consistent crash in Safari with Google Maps navigation

        Merged TOT WebKit r123972.

    2012-07-28  Simon Fraser  <simon.fraser@apple.com>

        Size changes on a layer with negative z-index children don't repaint correctly
        https://bugs.webkit.org/show_bug.cgi?id=92583

        Reviewed by Dean Jackson.

        Negative z-index descendants cause a composited layer to have a separate
        layer for foreground content. If something caused that foreground layer
        to change size (like toggling visibility on a descendant), we failed to
        repaint the foreground layer, resulting in stretched content.

        Test: compositing/geometry/bounds-ignores-hidden-dynamic-negzindex.html

        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::updateGraphicsLayerGeometry): Repaint the foreground
        layer if its size changes, like we do for the main layer.

2012-07-29  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/11883899> N94/10A356 Consistent crash in Safari with Google Maps navigation

        Merged TOT WebKit r123971.

    2012-07-28  Simon Fraser  <simon.fraser@apple.com>

        Ignore visibility:hidden elements when computing compositing layer bounds
        https://bugs.webkit.org/show_bug.cgi?id=92569

        Reviewed by Dan Bernstein.

        When computing the bounds of compositing layers, we would take into account
        layers with no visible content (visibility:hidden, and no non-hidden descendants).
        This caused some huge layers in mobile Google maps.

        Tests: compositing/geometry/bounds-ignores-hidden-composited-descendant.html
               compositing/geometry/bounds-ignores-hidden-dynamic.html
               compositing/geometry/bounds-ignores-hidden.html

        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::calculateLayerBounds): If the ExcludeHiddenDescendants flag is set, return
        the empty rect for layers with no visible content or descendants, as long as the layer is not
        the root of the subtree whose bounds are being computed.
        calculateLayerBounds() currently (I think incorrectly) passes the default flags to the recursive calls.
        It should probably just pass 'flags', but to make this change safe, OR in the ExcludeHiddenDescendants
        flag.
        * rendering/RenderLayer.h: Add an ExcludeHiddenDescendants flag to the CalculateLayerBoundsFlags.
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::calculateCompositedBounds): Pass the ExcludeHiddenDescendants
        flag.

2012-07-26  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/11962599> Blocks with reverse column progression don’t have layout overflow for overflowing columns

        Merged TOT WebKit r123835.

    2012-07-26  Dan Bernstein  <mitz@apple.com>

        Blocks with reverse column progression don’t have layout overflow for overflowing columns
        https://bugs.webkit.org/show_bug.cgi?id=92440

        Reviewed by Sam Weinig.

        Test: fast/multicol/progression-reverse-overflow.html

        * rendering/RenderBox.cpp:
        (WebCore::RenderBox::addLayoutOverflow): If column progression is reversed, then allow
        layout overflow to go in the opposite direction than it would normally be allowed to go.
        For example, in a block with writing-mode: horizontal-tb, direction: ltr and
        column-progression: reverse, columns overflow to the left, so layout overflow would go on
        the left.

2012-07-26  Jeffrey Pfau  <jpfau@apple.com>

        <rdar://problem/11916801> Reloading the "unreachable page" breaks the history

        Merge ToT WebKit r123823.

    2012-07-26  Jeffrey Pfau  <jpfau@apple.com>

        Reloading substitute-data/alternate html string for unreachableURL will add an item to the back-forward-history for each reload
        https://bugs.webkit.org/show_bug.cgi?id=84041

        Reviewed by Brady Eidson.

        Previously, loadAlternateHTMLString:baseURL:forUnreachableURL: would insert a new history item, regardless of
        the load type of the original frame load. This could cause navigation to a broken website to make back and
        forward navigation difficult to use. This change ensures that a reload type makes it through all the way.

        Added API test 'mac/BackForwardList.mm'.

        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::load): Prevent m_loadType from being overwritten early and check if it's a reload.
        * loader/HistoryController.cpp:
        (WebCore::HistoryController::updateForCommit): Amend check when committing the provisional item for a reload.
        (WebCore::HistoryController::isReloadTypeWithProvisionalItem): Check that a reload type has a provisional item.
        (WebCore):
        * loader/HistoryController.h:
        (HistoryController): Add prototype for isReloadTypeWithProvisionalItem.

2012-07-25  Gavin Barraclough  <barraclough@apple.com>

        <rdar://problem/11938522> 5% of App Store warm load time spent beneath webScriptNameForKey

        Reviewed by Filip Pizlo.

        This shaves 100ms off the iPad app store load time.

        * bridge/objc/objc_class.h:
        (ObjcClass):
            - add typedefs for MethodCache & FieldCache.
        * bridge/objc/objc_class.mm:
        (JSC::Bindings::ObjcClass::methodsNamed):
        (JSC::Bindings::ObjcClass::fieldNamed):
            - Both of these methods use a hashmap to cache their results, and in both cases, the map is only
              used to record successes, not to record properties which were absent. This means that if a page
              repeatedly asks for a property that does not exist, we'll keep missing the cache.
              Fix this by recording misses in the cache, too. This means that get() is no longer appropriate
              to query presence in the cache - we must use find() instead.
              fieldNamed has another minor bug that in the !attributeKeys case we'll only break out of the
              inner loop, so we'll unnecessarily keep searching the remainder of the class chain - fix this
              (the corresponding check already existed in methodsNamed).

2012-07-26  Dean Jackson  <dino@apple.com>

        <rdar://problem/11917808> Inception: touchstart events don't fire for some elements

        Reviewed by Joseph Pecoraro.

        When an element was removed from the document, our touch event fast-path information
        was cleared (r1025125). Unfortunately, in the unusual case of moving an element into
        the document from a document fragment, the removal code is triggered and thus wiping
        the fast-path information. This could cause the situation where an element was in the
        tree, it had event listeners, but the system would never try to process them because
        our optimization didn't believe they were there.

        Instead of wiping the touch optimizations when removing the Node from the document,
        do it instead in the Node destructor.

        Tests: platform/iphone-simulator/iphone/fast/events/touch/inserted-fragment-touch-target.html
               platform/iphone-simulator/iphone/fast/events/touch/moved-touch-target.html
               platform/iphone-simulator/iphone/fast/events/touch/removed-fragment-touch-target.html
               platform/iphone-simulator/iphone/fast/events/touch/removed-touch-target.html

        * dom/Document.cpp:
        (WebCore::Document::nodeWillBeRemoved): do not remove the Node from the touch registration.
        * dom/Node.cpp:
        (WebCore::Node::~Node): do it here instead.

2012-07-26  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/11966895> REGRESSION (r1125089): <svg> element with no intrinsic size and max-width gets sized incorrectly

        Merged TOT WebKit r123785.

    2012-07-26  Dan Bernstein  <mitz@apple.com>

        <svg> element with no intrinsic size and max-width gets sized incorrectly
        https://bugs.webkit.org/show_bug.cgi?id=92410

        Reviewed by Dean Jackson.

        Test: svg/css/max-width-2.html

        * rendering/RenderReplaced.cpp:
        (WebCore::RenderReplaced::computeReplacedLogicalWidth): The rule for computing the width for
        elements whose computed width and height are both auto and which have no intrinsic size, but
        have an intrinsic ratio was applied only to elements with a content renderer (such as <img>
        with an SVG source). Removed the requirement to have a content renderer, so that it will
        apply to all elements including <svg>.

2012-07-25  Benjamin Poulain  <bpoulain@apple.com>

        Merge Open Source WebKit r123689 for <rdar://problem/11332342>.

    2012-07-25  Benjamin Poulain  <bpoulain@apple.com>

        Initialize QualifiedName's strings from the read only data segment
        https://bugs.webkit.org/show_bug.cgi?id=92226

        Reviewed by Anders Carlsson.

        Modify the initialization of static QualifiedName to initialize the AtomicString
        with the data from the read only memory.

        Overall, HTMLNames::init() gets 10% faster.

        * dom/QualifiedName.cpp:
        (WebCore::QualifiedName::QualifiedName):
        * dom/QualifiedName.h:
        (QualifiedName):
        Remove the useless constructor taking a char* and get rid of the init() function.
        The AtomicString representing the name should be constructed by the caller of QualifiedName.

        Because the init() code is relatively large and is only executed once, it is important to
        keep the AtomicString construction separate. The function createQualifiedName() was added
        to improve the cache use. The short version let us reduce the code one more instruction per
        call.

        * dom/make_names.pl:
        (printQualifiedNameMaker):
        (printShortQualifiedNameMaker):
        (printNamesCppFile):
        (printDefinitions):

2012-07-25 Benjamin Poulain  <bpoulain@apple.com>

        Merge Open Source WebKit r123582 for <rdar://problem/11332342>.

    2012-07-24  Benjamin Poulain  <bpoulain@apple.com> && Joseph Pecoraro  <pecoraro@apple.com>

        QualifiedName's HashSet should be big enough to hold at least all the static names
        https://bugs.webkit.org/show_bug.cgi?id=91891

        Reviewed by Darin Adler.

        QualifiedName's table has a standard size of 64 buckets. When initializing WebKit,
        we create 850 static QualifiedName for the standard names (HTMLNames, SVGNames etc).

        The small base size forces us to grow and rehash the table several time on startup.

        This patch solves the issue by defining the initial table size to the minimum size that
        can hold all the static QualifiedName.

        * dom/QualifiedName.cpp:
        (QualifiedNameHashTraits):
        * dom/make_names.pl:
        (printNamesHeaderFile):

2012-07-24  Pratik Solanki  <psolanki@apple.com>

        Part of <rdar://problem/11927438> With new jetsam system, Safari may want to drop tabs on suspend

        Reviewed by David Carson.

        Move SystemMemory.h to private headers and export system memory functions for Safari's use.

        * WebCore.exp.in:
        * WebCore.xcodeproj/project.pbxproj:

2012-07-24  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/11927695> Crash in undefined at WebCore:  -[DOMNode(DOMNodeExtensions) nextFocusNode] (10A5355d) (crashed WSJ.com)

        This patch is based on proposed fix by Enrica Casucci.

        The LogIn panel in wsj.com is an iframe, and the document is detached when clicking the close link.  When we focus on a input field,
        UIWebBrowserView retains the currently focused DOM node to _currentAssistedNode iVar.  When we click the "Close" link, the page fires
        a JavaScript to remove the iframe and detach the document.  Since we already hold a node in UIKit, the document itself won't be
        deleted (retained by the node), however, its frame will be cleared to 0 which also makes its page to be 0.

        Since this is a link click, UIWebBrowserView will try to find the next focus node even the iframe document is detached.  This will
        lead to the crash since the underlying iframe is detached and it page is already 0.  We need to null check page() before getting
        the next or previous focus node.

        Reviewed by Scott Grant.

        * bindings/objc/DOM.mm:
        (-[DOMNode nextFocusNode]): null check page() before getting the next focus node, document() should always be valid.
        (-[DOMNode previousFocusNode]):

2012-07-23  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/11601051> Make selection work well with Ruby (-webkit-user-select: none; is ignored)

        Reviewed by Anders Carlsson.

        Made selection highlighting work reasonably well with ruby in iBooks, where the ruby text
        is unselectable, and fixed some longstanding issues with selection highlighting of lines
        where all the boxes do not have the same selection top and bottom, and with selection
        highlighting in flipped writing modes.

        * dom/Range.cpp:
        (WebCore::intervalsSufficientlyOverlap): Added this helper function, used to check whether
        the (logical) vertical bounds of two line boxes make them likely to belong to the same
        highlighted line.
        (WebCore::Range::collectSelectionRects): Replaced old code that assumed that if a line box’s
        top differs from the pervious line box’s top, then it signals the beginning of a new line
        with logic that assigning boxes to the same line as long as their logical vertical bounds
        sufficiently overlap. At the end of a run of boxes belonging to a line, both the tops and
        the bottoms of all boxes on the line are adjusted, so that there are no vertical gaps in
        the selection nor vertical overlaps.

2012-07-23  Karl Hong  <khong@apple.com>

        <rdar://problem/11478253> Assert in -[UIWebDocumentView metadataDictionariesForDictationResults]

        Shifting dictation markers, which is caused by inserting text, out of text boundary would case invalid range created from the marker.

        The patch remove the marker that is shifted out of the text node.

        Reviewed by Shuchen Li

        * dom/DocumentMarkerController.cpp:
        (WebCore::DocumentMarkerController::shiftMarkers):

2012-07-21  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/11930111> Images in vertical iBooks are sometimes stretched since SVG-as-image (constrained) intrinsic size calculation is wrong in vertical writing modes

        Merged TOT WebKit r123294.

    2012-07-21  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/11928576> SVG-as-image (constrained) intrinsic size calculation is wrong in vertical writing modes
        https://bugs.webkit.org/show_bug.cgi?id=91918

        Reviewed by Anders Carlsson.

        Test: svg/as-image/svg-intrinsic-size-rectangular-vertical.html

        * rendering/RenderReplaced.cpp:
        (WebCore::RenderReplaced::computeAspectRatioInformationForRenderBox): When there is a content
        renderer, it returns a physical intrinsic size and aspect ratio. The code was already
        accounting for this by taking the reciprocal of the aspect ratio in the vertical case. Made
        it also transpose the size itself, turning it from physical to logical. Moved this code
        after setting m_intrinsicSize, since that member variable is always physical.

2012-07-20  Mark Hahnenberg  <mhahnenberg@apple.com>

        <rdar://problem/11908916> Lock inversion between JSLock and Web thread lock in ScriptDebugServer::pauseIfNeeded

        Reviewed by Filip Pizlo.

        No new tests.

        The ordering of locks should be take the Web thread lock first, then take the JSLock and release them 
        in the reverse order (JSLock, then Web thread lock). This is not done properly in ScriptDebugServer::pauseIfNeeded.
        See <rdar://problem/11908916>.

        * bindings/js/ScriptDebugServer.cpp:
        (WebCore::ScriptDebugServer::pauseIfNeeded): We now drop the JSLock prior to releasing the Web thread lock 
        when entering the nested run loop during debugging and re-aquire the JSLock right after re-acquiring the 
        Web thread lock after exiting the nested run loop.

2012-07-20  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/11844909> REGRESSION: After scrolling, contents are not rendered in the attached page

        Reviewed by Dan Bernstein.

        On a page with an accelerated overflow:scroll area containing an iframe, the contents of the
        overflow:scroll would not always render completely. This happened because a call to calculateRects()
        via setWidgetGeometry() would compute clip rects with 'dontClipToOverflow' set to false,
        but we'd later use those clip rects in a code path where 'dontClipToOverflow' is true.
        
        Added an assertion to detect cases where this occurs, and fixed the member function
        RenderLayer::childrenClipRect(), which is called from widget code, not to use cached clip rects,
        but to compute them on the fly.

        Test: platform/iphone-simulator/iphone/scrolling/iframe-inside-overflow-clipping.html

        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::updateClipRects):
        (WebCore::RenderLayer::childrenClipRect):
        * rendering/RenderLayer.h:
        (WebCore::ClipRectsCache::ClipRectsCache):
        (ClipRectsCache):

2012-07-20  Tim Horton  <timothy_horton@apple.com>

        <rdar://problem/11892404> Sundance: Screen briefly flashes when opening details sheet of a movie/show in Netflix

        Reviewed by Simon Fraser.

        Replace a 'return' in a long switch statement that was accidentally removed in r1088988.
        Without this return, using -webkit-overflow-scrolling would cause -webkit-tap-highlight-color to reset to black.

        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::collectMatchingRulesForList):

2012-07-20  Dean Jackson  <dino@apple.com>

        <rdar://problem/11365598> REGRESSION: Images in iBooks sometimes stretched horizontally or vertically

        Merged ToT WebKit r123171 and r123183.

    2012-07-19  David Hyatt  <hyatt@apple.com>

            SVG images broken when max-width specified.
            https://bugs.webkit.org/show_bug.cgi?id=91474

            SVG images were computing intrinsic dimensions when width and height were auto that did not
            respect min-max width/height. Normal images had code that applied these constraints properly.
            Looking at the code before the check-in that broke things, these constraints used to be
            applied to all images regardless of type via calcAspectRatioLogicalWidth/Height.

            This patch leaves the new function structure in place but converts the code to be more like
            it was prior to the introduction of the regression. Instead of raw intrinsic sizes being
            used in the SVG case, now all image types get the intrinsic sizes constrained when doing
            width/height computations.

            Reviewed by Dan Bernstein.

            Test: svg/as-image/svg-intrinsic-size.html

            * rendering/RenderReplaced.cpp:
            (WebCore::RenderReplaced::computeAspectRatioInformationForRenderBox):
            Rename computeIntrinsicRatioInformationForRenderBox to computeAspectRatioInformationForRenderBox.
            Also rename the intrinsicSize reference to constrainedSize to reflect the fact that the size
            is not necessarily the intrinsic size any longer but instead a size where both axes have been
            constrained based off the max-min values of the opposite axes.

            Move the constraining code out of RenderReplaced::computeIntrinsicRatioInformation into this
            function so that the SVG code path appies the constraints as well. The movement of this code
            is what fixes the bug.

            (WebCore::RenderReplaced::computeIntrinsicRatioInformation):
            Changed to remove the code that constrains the returned size, since it is shifting to
            computeAspectRatioInformationForRenderBox instead.

            (WebCore::RenderReplaced::computeReplacedLogicalWidth):
            (WebCore::RenderReplaced::computeReplacedLogicalHeight):
            * rendering/RenderReplaced.h:
            (RenderReplaced):
            Patch the name of the reference passed in to computeReplacedLogicalWidth/Height to be
            constrainedSize instead of intrinsicSize, so that it is more obvious that the returned
            result is not just the intrinsic size of the image.

    2012-07-19  David Hyatt  <hyatt@apple.com>

            SVG not properly respecting max-width.
            https://bugs.webkit.org/show_bug.cgi?id=91474

            My previous checkin for 91474 accidentally inverted width and height in the division case for
            the computation of height. When I fixed this inversion, I discovered that <object> elements
            are in fact also broken with max-width handling, and that furthermore, trying to apply the same
            max-width fix by calling RenderBox::computeReplacedLogicalWidth/Height failed because those methods
            call intrinsicLogicalWidth()/Height(). Becuase m_intrinsicSize is out-of-date and does not reflect
            the values we just obtained from the contentRenderer, we use the default 300x150 values for object
            and fail to render.

            In order to both fix SVG/<object> with max-width constraints and to keep <object> rendering correctly
            even when there are no max-width constraints, I was forced to update the m_intrinsicSize immediately
            in order to make sure that the RenderBox methods returned the right values when computing the width/height
            constrained to max/min-width/height values.

            Reviewed by Dan Bernstein.

            Added two new tests in svg/as-image. One test covers non-rectangular images to test for the inversion
            mistake I made. The second test applies a max-width to <object> and shows that we have never gotten
            this right before. An existing test in svg/as-image/ already covers basic <object> use (and tests that
            the intrinsic size of 300x150 is not used when an explicit non-percentage size is specified on the SVG
            itself).

            * rendering/RenderReplaced.cpp:
            (WebCore::RenderReplaced::computeAspectRatioInformationForRenderBox):
            Add a check to update m_intrinsicSize when we know it should apply, so that the calls to check against
            min/max-width fetch this correct size.

            * rendering/RenderReplaced.h:
            (RenderReplaced):
            Make m_intrinsicSize mutable because of the mutation that occurs during the method above. It may be
            that we should re-evaluate whether all of these methods should be const, but this would impact RenderBox
            methods as well, so I chose to hold off going down that rabbit hole.

2012-07-19  Enrica Casucci  <enrica@apple.com>

        <rdar://problem/11886958> 10A36x Selection was wrong
        
        Reviewed by Simon Fraser.

        For inline elements we should not take into account continuations
        when computing the selection rects on iOS, since we traverse
        each node in the given range.
        This patch adds to RenderInline an implementation of the virtual
        method absoluteQuadsForSelection, so that we can ignore continuations
        that are considered in the RenderObject implementation of the same
        method.

        * rendering/RenderInline.cpp:
        (WebCore::RenderInline::absoluteQuadsForSelection):
        * rendering/RenderInline.h: Added declaration of absoluteQuadsForSelection.
        * rendering/RenderObject.cpp:
        (WebCore::RenderObject::collectSelectionRects): Modified to use absoluteQuadsForSelection.
        * rendering/RenderObject.h: Added default implementation of absoluteQuadsForSelection.

2012-07-18  Jeffrey Pfau  <jpfau@apple.com>

        <rdar://problem/11849446> REGRESSION(Sundance): basic authentication failure on ajax request.

        Reviewed by Yongjun Zhang.

        Separated out open source and iOS originalRequest in ResourceLoader and SubresourceLoader that had been previously joined by a poor ToT merge.

        * loader/ResourceLoadScheduler.cpp:
        (WebCore::ResourceLoadScheduler::scheduleLoad):
        (WebCore::ResourceLoadScheduler::remove):
        * loader/ResourceLoader.h:
        (WebCore::ResourceLoader::iOSOriginalRequest):
        * loader/SubresourceLoader.cpp:
        (WebCore::SubresourceLoader::create):
        (WebCore::SubresourceLoader::startLoading):
        * loader/SubresourceLoader.h:
        (SubresourceLoader):

2012-07-19  Beth Dakin  <bdakin@apple.com>

        <rdar://problem/11858599> Seekingalpha flashes to white on every scroll

        Reviewed by Simon Fraser.

        This is a partial merge of http://trac.webkit.org/changeset/123151 The full change 
        seems too risky for Sundance, so we are taking only the bits we need to fix this 
        bug.

        RenderLayerCompositor::computeCompositingRequirements() would turn off
        overlap testing for descendants of a layer that have a 3D transform,
        or have an animating transform. This could cause compositing changes
        inside an animating element when transitions start and stop, which
        is undesirable. For this limited merge, we will continue turning off overlap 
        testing in the 3D transform case, but we will let overlap testing happen in the 
        animating transform case.
        
        So, we can keep overlap testing on for descendants of that
        animating element, but we have to turn it off for layers later
        in z-order.

        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::computeCompositingRequirements):
        Remove the if isRunningAcceleratedTransformAnimation(layer->renderer())
        check that turned off overlap testing for descendants of this layer. We'll keep 
        the check for 3D transforms for now.
        Turn overlap testing off for layers later in the z-order.

2012-07-19  Jer Noble  <jer.noble@apple.com>

        Crash in WebCore::AudioDestinationIOS::audioDestinationInterruptionListener on video iAd
        <rdar://problem/11885271>

        Reviewed by Joseph Pecoraro.

        The interruption listener was attempting to dereference an uninitialized iterator, causing
        a crash.

        * platform/audio/ios/AudioDestinationIOS.cpp:
        (WebCore::AudioDestinationIOS::audioDestinationInterruptionListener):

2012-07-19  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/11915433> Incorrect selection highlighting of inlines in flipped writing modes

        Merged TOT WebKit r123146.

    2012-07-19  Dan Bernstein  <mitz@apple.com>

        In flipped blocks writing modes, no flipping occurs when mapping RenderText’s local coordinates to absolute
        https://bugs.webkit.org/show_bug.cgi?id=91780

        Reviewed by Anders Carlsson.

        Test: fast/writing-mode/flipped-blocks-text-map-local-to-container.html

        When RenderObject::mapLocalToContainer() was called on a RenderText with ApplyContainerFlip,
        it would not flip (if the container was not a box) but it would always pass
        DoNotApplyContainerFlip when recurring to the parent. This meant that no one applied the flip.

        * rendering/RenderInline.cpp:
        (WebCore::RenderInline::mapLocalToContainer): Made the setting of applyContainerFlip to
        false unconditional on the container actually being flipped.
        * rendering/RenderObject.cpp:
        (WebCore::RenderObject::mapLocalToContainer): Rather than always passing
        DoNotApplyContainerFlip when recurring to the parent, changed this function to pass through
        the value of applyContainerFlip it was called with, unless it applied the flip itself.

2012-07-18  Andy Estes  <aestes@apple.com>

        <rdar://problem/11799136> iOS: Crash when setting title dynamically (88083)

        Merged ToT WebKit r120662.

    2012-06-18  Mike Lawther  <mikelawther@chromium.org>

        Crash when setting title dynamically
        https://bugs.webkit.org/show_bug.cgi?id=88083

        Reviewed by Dan Bernstein.

        Test: fast/text/title-crash.html

        The crashing code takes a rare branch in StyleResolver::styleForElement() where
        m_parentStyle is set to point to m_style. Consequently, while applying properties
        to m_style we end up mutating m_parentStyle.

        In this situation, we clone style() and point m_parentStyle at the clone. The
        clone is destroyed at the end of StyleResolver::styleForElement().

        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::collectMatchingRulesForList):

2012-07-18  Andy Estes  <aestes@apple.com>

        <rdar://problem/11799144> iOS: CORS: access control check should do equality checking (88628)

        Merged ToT WebKit r119911.

    2012-06-09  Pablo Flouret  <pablof@motorola.com>

        The value in Access-Control-Allow-Origin is not being matched correctly for CORS-enabled requests
        https://bugs.webkit.org/show_bug.cgi?id=88139

        Reviewed by Adam Barth.

        Compare a request's origin with the value given in any
        Access-Control-Allow-Origin headers in an exact, case-sensitive manner,
        instead of using SecurityOrigin::isSameSchemeHostPort(). Per step 3 of
        the resource sharing check algorithm in
        http://dvcs.w3.org/hg/cors/raw-file/tip/Overview.html#resource-sharing-check

        Test: http/tests/xmlhttprequest/origin-exact-matching.html

        * loader/CrossOriginAccessControl.cpp:
        (WebCore::passesAccessControlCheck):

2012-07-18  Andy Estes  <aestes@apple.com>

        <rdar://problem/11799122> iOS: Use-after-free in WebCore::RenderBlock::splitBlocks (88022)

        Merged ToT WebKit r119409.

    2012-06-04  Abhishek Arya  <inferno@chromium.org>

        Crash in multi-column layout.
        https://bugs.webkit.org/show_bug.cgi?id=88022

        Reviewed by Ojan Vafai.

        The patch addresses two problems::
        1. |this| in RenderBlock::splitBlocks can get destroyed when we
        move its children to the clone and later call updateBeforeAfterContent
        on the parent. So, we stop accessing its member variables and cache
        it in a local.
        2. Positioned objects were not getting cleared from our grand parents.
        This will happen if our immediate children got moved to a clone tree,
        however at our parent nothing was moved. So, we make sure to remove
        the positioned objects at every level while we are doing the cloning.

        Tests: fast/multicol/span/empty-anonymous-block-split-crash.html
               fast/multicol/span/positioned-objects-not-removed-crash.html

        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::splitBlocks):

2012-07-18  Andy Estes  <aestes@apple.com>

        <rdar://problem/11799118> iOS: XSSAuditor bypass with leading /*///*/ comment (88002)

        Merged ToT WebKit r119184.

    2012-05-31  Tom Sepez  <tsepez@chromium.org>

        XSSAuditor bypass with leading /*///*/ comment
        https://bugs.webkit.org/show_bug.cgi?id=88002

        Reviewed by Adam Barth.

        Fixes issue in xssauditor's parsing of /*/.

        Test: http/tests/security/xssAuditor/script-tag-with-trailing-comment4.html

        * html/parser/XSSAuditor.cpp:
        (WebCore::XSSAuditor::decodedSnippetForJavaScript):

2012-07-18  Andy Estes  <aestes@apple.com>

        <rdar://problem/11799114> iOS: Heap-use-after-free in WebCore::HTMLElement::adjustDirectionalityIfNeededAfterChildrenChanged (87903)

        Merged ToT WebKit r119050.

    2012-05-30  Abhishek Arya  <inferno@chromium.org>

        Crash in ContainerNode::parserAddChild.
        https://bugs.webkit.org/show_bug.cgi?id=87903

        Reviewed by Ryosuke Niwa.

        Call the ChildNodeInsertionNotifier.notify call at the end since
        it can destroy |this| and some of the local pointers like |last|.
        This also matches the order of calls - childrenChanged precedes
        ChildNodeInsertionNotifier.notify in updateTreeAfterInsertion and
        ContainerNode::parserInsertBefore.

        Also remove a FIXME since we use ChildNodeInsertionNotifier.notify
        instead of ChildNodeInsertionNotifier.notifyInsertedIntoDocument
        (as recommended in the FIXME).

        Test: fast/dom/child-insertion-notify-crash.html

        * dom/ContainerNode.cpp:
        (WebCore::ContainerNode::parserAddChild):

2012-07-18  Andy Estes  <aestes@apple.com>

        <rdar://problem/11794915> iOS: Bad cast in RenderTableCol::nextColumn (87314)

        Merged ToT WebKit r118316.

    2012-05-23  Julien Chaffraix  <jchaffraix@webkit.org>

        Crash in RenderTableCol::nextColumn
        https://bugs.webkit.org/show_bug.cgi?id=87314

        Reviewed by Abhishek Arya.

        Tests: fast/table/canvas-column-in-column-group.html
        fast/table/columngroup-inside-columngroup.html

        The issue comes from elements not abiding by the display property (e.g. canvas). This means
        that any renderer with display: table-column would pass the current isChildAllowed check and
        would confuse our algorithm to iterate.

        We were getting away with allowing those children as table columns or column groups don't
        paint themselves but it's better to just not allow such children in the first place.

        * rendering/RenderTableCol.cpp:
        (WebCore::RenderTableCol::isChildAllowed):
        Fixed the logic to only accept proper column renderer (RenderTableCol with display: column
        to ignore column-groups). Also removed an unneeded NULL-check.

2012-07-18  Andy Estes  <aestes@apple.com>

        <rdar://problem/11794912> iOS: Heap-use-after-free in WebCore::Node::isInShadowTree (86953)

        Merged ToT WebKit r118471.

    2012-05-24  Hayato Ito  <hayato@chromium.org>

        Fix crashes caused by a DOMCharacterDataModified event on a text node.
        https://bugs.webkit.org/show_bug.cgi?id=86953

        Reviewed by Dimitri Glazkov.

        TextNode can be released while CharacterData::setData() will dispatch a mutation event.
        So protect it.

        Mutation event itself should not be dispatched on the test case.
        This is being tracked by webkit bug https://bugs.webkit.org/show_bug.cgi?id=87372.

        Test: fast/events/dom-character-data-modified-textarea-crash.html

        * dom/CharacterData.cpp:
        (WebCore::CharacterData::setData):

2012-07-18  Andy Estes  <aestes@apple.com>

        <rdar://problem/11794911> iOS: Crash in CSSSelector::specificityForOneSelector (86673)

        Merged ToT WebKit r118703.

    2012-05-28  Yong Li  <yoli@rim.com>

        Crash on incomplete :not().
        https://bugs.webkit.org/show_bug.cgi?id=86673

        Reviewed by Antti Koivisto.

        Add back null-checks for incomplete :not() class
        which were dropped by r81845.

        * css/CSSSelector.cpp:
        (WebCore::CSSSelector::specificityForOneSelector):
        (WebCore::CSSSelector::selectorText):
        * css/SelectorChecker.cpp:
        (WebCore::SelectorChecker::checkOneSelector):
        (WebCore::SelectorChecker::determineLinkMatchType):

2012-07-18  Andy Estes  <aestes@apple.com>

        <rdar://problem/11794906> iOS: Regression(r112694): Heap-use-after-free in WebCore::AXObjectCache::postNotification (86029)

        Merged ToT WebKit r118213.

    2012-05-23  Chris Fleizach  <cfleizach@apple.com>

        Regression(r112694): Crash in WebCore::AXObjectCache::postNotification 
        https://bugs.webkit.org/show_bug.cgi?id=86029

        Reviewed by Abhishek Arya.

        Test: accessibility/content-changed-notification-causes-crash.html

        * accessibility/AccessibilityObject.h:
        (WebCore::AccessibilityObject::isDetached):
        (AccessibilityObject):
        * accessibility/AccessibilityRenderObject.cpp:
        (WebCore::AccessibilityRenderObject::contentChanged):

2012-07-18  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/11887161> REGRESSION: highlight last word on the line - highlight all text in toward to the beginning of paragraph

        Merged TOT WebKit r123050.

    2012-07-18  Dan Bernstein  <mitz@apple.com>

        Hit testing in the gap between pages returns incorrect results
        https://bugs.webkit.org/show_bug.cgi?id=91695

        Reviewed by Dave Hyatt.

        Test: fast/multicol/hit-test-gap-between-pages.html

        * rendering/RenderBlock.h:
        (RenderBlock): Promoted adjustPointToColumnContents from private to protected.
        * rendering/RenderView.cpp:
        (WebCore::RenderView::updateHitTestResult): If we get here, and we make the document element
        the inner node, adjust the local point for columns.

2012-07-18  Andy Estes  <aestes@apple.com>

        <rdar://problem/11794905> iOS: Heap-use-after-free in WebCore::InlineBox::root (85804)

        Merged ToT WebKit r118248.

    2012-05-23  Abhishek Arya  <inferno@chromium.org>

        Crash in RenderInline::linesVisualOverflowBoundingBox.
        https://bugs.webkit.org/show_bug.cgi?id=85804

        Reviewed by Dave Hyatt.

        Defer layout of replaced elements to the next line break function.
        We shouldn't do it while we are clearing our inline chilren
        lineboxes in full layout mode.

        Test: fast/block/inline-children-root-linebox-crash.html

        * rendering/RenderBlockLineLayout.cpp:
        (WebCore::RenderBlock::layoutInlineChildren):
        (WebCore::RenderBlock::LineBreaker::nextLineBreak):

2012-07-18  Andy Estes  <aestes@apple.com>

        <rdar://problem/11794902> iOS: Heap-use-after-free in WebCore::RenderBlock::addChildIgnoringAnonymousColumnBlocks (85759)

        Merged ToT WebKit r116325.

    2012-05-07  Abhishek Arya  <inferno@chromium.org>

        Crash in RenderBlock::updateFirstLetterStyle.
        https://bugs.webkit.org/show_bug.cgi?id=85759

        Reviewed by Julien Chaffraix.

        Test: fast/css-generated-content/first-letter-next-sibling-crash.html

        RenderBlock::removeChild can bring up the children from last single anonymous block,
        causing |nextSibling| in RenderBlock::updateFirstLetterStyle to go stale. We prevent
        this by removing the child safely using removeChildNode before destroying it.

        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::updateFirstLetterStyle):

2012-07-18  Andy Estes  <aestes@apple.com>

        <rdar://problem/11794900> iOS: Use after free from removing a line break object and failing to mark ancestors for layout (85997)

        Merged ToT WebKit r116551.

    2012-05-09  Ken Buchanan  <kenrb@chromium.org>

        Crash from removal of a line break object
        https://bugs.webkit.org/show_bug.cgi?id=85997

        Reviewed by David Hyatt.

        Regression from r115343. That replaced a call to setNeedsLayout()
        with a separate call that used a different bit during linebox
        invalidation after renderer child removal. There are special cases
        where layout isn't marked on parent nodes just from the removal, so
        line dirtying needs to explicitly mark ancestors for layout.

        * rendering/RenderObject.h:
        (WebCore::RenderObject::setAncestorLineBoxDirty):

2012-07-18  Andy Estes  <aestes@apple.com>

        <rdar://problem/11794894> iOS: Heap-use-after-free in WebCore::RenderBlock::checkFloatsInCleanLine (86019)

        Merged ToT WebKit r116683.

    2012-05-10  Abhishek Arya  <inferno@chromium.org>

        Crash due to floats not removed from first-letter element.
        https://bugs.webkit.org/show_bug.cgi?id=86019

        Reviewed by Julien Chaffraix.

        Move clearing logic of a floating/positioned object from removeChild
        to removeChildNode. There are lot of places which use removeChildNode
        directly and hence the object is not removed from the floating or
        positioned objects list.

        Test: fast/block/float/float-not-removed-from-first-letter.html

        * rendering/RenderObject.cpp:
        (WebCore::RenderObject::removeChild):
        * rendering/RenderObjectChildList.cpp:
        (WebCore::RenderObjectChildList::removeChildNode):

2012-07-18  Andy Estes  <aestes@apple.com>

        <rdar://problem/11794892> iOS: Heap-buffer-overflow in WebCore::FontCache::releaseFontData (86110)

        Merged ToT WebKit r116698.

    2012-05-10  Abhishek Arya  <inferno@chromium.org>

        Crash in FontCache::releaseFontData due to infinite float size.
        https://bugs.webkit.org/show_bug.cgi?id=86110

        Reviewed by Andreas Kling.

        New callers always forget to clamp the font size, which overflows
        to infinity on multiplication. It is best to clamp it at the end
        to avoid getting greater than std::numeric_limits<float>::max().

        Test: fast/css/large-font-size-crash.html

        * platform/graphics/FontDescription.h:
        (WebCore::FontDescription::setComputedSize):
        (WebCore::FontDescription::setSpecifiedSize):

2012-07-18  Andy Estes  <aestes@apple.com>

        <rdar://problem/11794890> iOS: Heap-use-after-free in WebCore::RenderObject::repaint (86162)

        Merged ToT WebKit r117007.

    2012-05-14  Takashi Sakamoto  <tasak@google.com>

        Crash in WebCore::RenderObject::repaint
        https://bugs.webkit.org/show_bug.cgi?id=86162

        Reviewed by Abhishek Arya.

        As RenderScrollbarPart has no parent renderer, we crash in
        WebCore::RenderBoxModelObject::paddingLeft when paddingLeft has
        percent value, e.g. 5%. However if we set the scrollbar's parent
        renderer to a renderer owning the scrollbar by using setParent method,
        RenderScrollbarPart::styleWillChange will invoke parent renderer's
        repaint. This causes crash in WebCore::RenderObject::repaint if the
        owning renderer is already destroyed.
        To fix the first crash without the second crash, modify
        RenderObject::containingBlock() to check isRenderScrollbarPart or not,
        if parent() is 0.
        If so, use scrollbar's owningRenderer from RenderScrollbarPart.

        Test: scrollbars/scrollbar-percent-padding-crash.html
              scrollbars/scrollbar-scrollbarparts-repaint-crash.html

        * rendering/RenderObject.cpp:
        (WebCore::RenderObject::containingBlock):
        Modifying containingBlock. If parent() is 0 and isRenderScrollbarPart()
        is true, use RenderScrollbarPart's m_scrollbar->owningRenderer()
        instead of parent().
        * rendering/RenderObject.h:
        (WebCore::RenderObject::isRenderScrollbarPart):
        (RenderObject):
        Adding a new method, isRenderScrollbarPart.
        * rendering/RenderScrollbarPart.cpp:
        (WebCore::RenderScrollbarPart::rendererOwningScrollbar):
        (WebCore):
        Adding a new method, scrollbarOwningRenderer to obtain m_scrollar's
        owningRenderer.
        * rendering/RenderScrollbarPart.h:
        (RenderScrollbarPart):
        Removing "friend class RenderScrollbar".
        (WebCore::RenderScrollbarPart::isRenderScrollbarPart):
        (WebCore::toRenderScrollbarPart):
        (WebCore):
        Implementing isRenderScrollbarPart and toRenderScrollbarPart.

2012-07-17  Andy Estes  <aestes@apple.com>

        <rdar://problem/11794887> iOS: Heap-use-after-free in WebCore::SVGAnimatedLengthAnimator::resetAnimValToBaseVal (86100)

        Merged ToT WebKit r116860.

    2012-05-12  Philip Rogers  <pdr@google.com>

        Cleanup before changing attributeName in SVG <animate>
        https://bugs.webkit.org/show_bug.cgi?id=86100

        Reviewed by Nikolas Zimmermann.

        Changing attributeName caused a crash because references were not removed from the old target.
        This change simply cleans up before changing attributeName in SVG animation elements.

        Test: svg/animations/dynamic-modify-attributename-crash.svg

        * svg/animation/SVGSMILElement.cpp:
        (WebCore::SVGSMILElement::svgAttributeChanged):

2012-07-17  Andy Estes  <aestes@apple.com>

        <rdar://problem/11794886> iOS: Assertion failure (toRenderBox() called on a RenderInline) beneath RenderBlock::blockBeforeWithinSelectionRoot() (86500)

        Merged ToT WebKit r118005.

    2012-05-22  Abhishek Arya  <inferno@chromium.org>

        Assertion failure (toRenderBox() called on a RenderInline) beneath RenderBlock::blockBeforeWithinSelectionRoot()
        https://bugs.webkit.org/show_bug.cgi?id=86500

        Reviewed by Ojan Vafai.

        Patch by Dan Bernstein<mitz@apple.com>. I just added the test.

        Test: fast/block/line-layout/selection-highlight-crash.html

        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::blockBeforeWithinSelectionRoot): Demoted the object local variable to
        RenderObject, changed use of parentBox() to parent(), and added toRenderBlock() in two places.

2012-07-17  Andy Estes  <aestes@apple.com>

        <rdar://problem/11794880> iOS: Heap-use-after-free in WebCore::SVGPropertyTearOff<WebCore::FloatRect>::commitChange (86119)

        Merged ToT WebKit r117792.

    2012-05-21  Stephen Chenney  <schenney@chromium.org>

        SVGAnimatedPropertyTearOff does not clear a self pointer on deletion
        https://bugs.webkit.org/show_bug.cgi?id=86119

        Reviewed by Nikolas Zimmermann.

        SVGAnimatedPropertyTearOff contains two SVGPropertyTearOff objects
        that have a pointer back to the SVGAnimatedPropertyTearOff. JS may
        also have a reference to these SVGPropertyTearOff objects. When the
        SVGAnimatedPropertyTearOff is deleted, the SVGPropertyTearOff objects
        may live on, but the pointer back to the deleted animated property
        tear off is left invalid. This patch clears the pointers on destruction
        of the SVGAnimatedPropertyTearOff.

        Test: svg/custom/bug86119.html

        * svg/properties/SVGAnimatedPropertyTearOff.h:
        (WebCore::SVGAnimatedPropertyTearOff::~SVGAnimatedPropertyTearOff):
        (SVGAnimatedPropertyTearOff):

2012-07-17  Andy Estes  <aestes@apple.com>

        <rdar://problem/11794877> iOS: CachedImage does not clear the ImageObserver pointer when dropping its Image ref (86689)

        Merged ToT WebKit r117376.

    2012-05-16  James Robinson  <jamesr@chromium.org>

        CachedImage does not clear the ImageObserver pointer when dropping its Image ref
        https://bugs.webkit.org/show_bug.cgi?id=86689

        Reviewed by Eric Seidel.

        Image instances keep a weak pointer to their ImageObserver, which may be null. CachedImage is an ImageObserver
        and holds a RefPtr<Image> m_image. When CachedImage initializes its m_image to either an SVGImage or BitmapImage,
        it sets itself as that Image's ImageObserver. However, CachedImage never clears the ImageObserver pointer, even
        when dropping its reference to the Image. This means if other code holds a RefPtr<Image> there is no promise
        that calls on that Image will be valid. This patch clears the CachedImage::m_image's ImageObserver pointer
        whenever the CachedImage drops its reference. Image already has null checks for its m_imageObserver so this is
        always a safe operation.

        * loader/cache/CachedImage.cpp:
        (WebCore::CachedImage::~CachedImage):
        (WebCore::CachedImage::clear):

2012-07-17  Andy Estes  <aestes@apple.com>

        <rdar://problem/11794873> iOS: CVE-2011-3105: Heap-use-after-free in WebCore::RenderText::removeTextBox (86133)

        Merged ToT WebKit r117309.

    2012-05-16  Ken Buchanan  <kenrb@chromium.org>

        Crash due to first-letter not getting computed on RenderTableCell
        https://bugs.webkit.org/show_bug.cgi?id=86133

        Reviewed by Abhishek Arya.

        RenderTableCell overrides RenderBlock::layout() but doesn't call
        updateFirstLetter() in it. This is normally not a problem because
        updateFirstLetter() gets called during preferred logical width
        computation, but there exist rare occasions when layout of the table
        cell happens without preferred logical widths being dirty, in which
        case the first-letter update can be skipped.

        This patch adds a call to updateFirstLetter() to
        RenderTableCell::layout(). This ensures that the first-letter is up
        to date before commencing block layout.

        * rendering/RenderTableCell.cpp:
        (WebCore::RenderTableCell::layout)

2012-07-17  Andy Estes  <aestes@apple.com>

        <rdar://problem/11794871> iOS: SecuritySaver: *exploitable* use after free in WebCore::ReplaceSelectionCommand::performTrivialReplace (85943)

        Merged ToT WebKit r116545.

    2012-05-09  Abhishek Arya  <inferno@chromium.org>

        Crash in ReplaceSelectionCommand::performTrivialReplace
        https://bugs.webkit.org/show_bug.cgi?id=85943

        Reviewed by Ryosuke Niwa.

        RefPtr nodeAfterInsertionPos to guard against mutation events.

        Test: editing/inserting/insert-html-crash.html

        * editing/ReplaceSelectionCommand.cpp:
        (WebCore::ReplaceSelectionCommand::performTrivialReplace):

2012-07-17  Andy Estes  <aestes@apple.com>

        <rdar://problem/11794867> iOS: SecuritySaver: *exploitable* use after free in WebCore::TreeShared<WebCore::ContainerNode>::ref / WebCore::ApplyStyleCommand::joinChildTextNodes (85939)

        Merged ToT WebKit r116669.

    2012-05-10  Abhishek Arya  <inferno@chromium.org>

        Crash in ApplyStyleCommand::joinChildTextNodes.
        https://bugs.webkit.org/show_bug.cgi?id=85939

        Reviewed by Ryosuke Niwa.

        Test: editing/style/apply-style-join-child-text-nodes-crash.html

        * editing/ApplyStyleCommand.cpp:
        (WebCore::ApplyStyleCommand::applyRelativeFontStyleChange): add conditions
        to bail out if our start and end position nodes are removed due to 
        mutation events in joinChildTextNodes.
        (WebCore::ApplyStyleCommand::applyInlineStyle): this executes after
        applyRelativeFontStyleChange in ApplyStyleCommand::doApply. So, need
        to bail out if our start and end position nodes are removed due to
        mutation events.
        (WebCore::ApplyStyleCommand::joinChildTextNodes): hold all the children
        in a ref vector to prevent them from getting destroyed due to mutation events.

2012-07-17  Andy Estes  <aestes@apple.com>

        <rdar://problem/11794859> iOS: Heap-use-after-free in WebCore::swapInNodePreservingAttributesAndChildren (85197)

        Merged ToT WebKit r116717.

    2012-05-10  Abhishek Arya  <inferno@chromium.org>

        Crash in swapInNodePreservingAttributesAndChildren.
        https://bugs.webkit.org/show_bug.cgi?id=85197

        Reviewed by Ryosuke Niwa.

        Keep the children in a ref vector before adding them to newNode.
        They can get destroyed due to mutation events.

        No new tests because we don't have a reduction.

        * editing/ReplaceNodeWithSpanCommand.cpp:
        (WebCore::swapInNodePreservingAttributesAndChildren):

2012-07-17  Andy Estes  <aestes@apple.com>

        <rdar://problem/11794858> iOS: Heap-use-after-free in WebCore::RenderBlock::layoutPositionedObjects (85074)

        Merged ToT WebKit r116357.

    2012-05-07  Ken Buchanan  <kenrb@chromium.org>

        Crash due to positioned object list not being cleared during block flow split
        https://bugs.webkit.org/show_bug.cgi?id=85074

        Reviewed by Abhishek Arya.

        When an element is being split due to a column span element being
        inserted, any of its ancestors that are underneath the column
        containing block also get split. If an ancestor has an object in
        its positioned object list from a previous layout, then the list
        will have to be cleared because the positioned object could have moved
        to be under the continuation. This patch causes the list to be
        cleared.

        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::splitBlocks):

2012-07-17  Andy Estes  <aestes@apple.com>

        <rdar://problem/11794857> iOS: Heap-use-after-free in WebCore::InsertParagraphSeparatorCommand::doApply (84995)

        Merged ToT WebKit r116653.

    2012-05-10  Abhishek Arya  <inferno@chromium.org>

        Crash in InsertParagraphSeparatorCommand::doApply.
        https://bugs.webkit.org/show_bug.cgi?id=84995

        Reviewed by Ryosuke Niwa.

        Test: editing/inserting/insert-paragraph-seperator-crash.html

        * editing/DeleteSelectionCommand.cpp:
        (WebCore::DeleteSelectionCommand::mergeParagraphs): no need of static cast, since
        type of enclosingBlock returned is already Element*.
        * editing/IndentOutdentCommand.cpp:
        (WebCore::IndentOutdentCommand::tryIndentingAsListItem): no need of static cast, since
        type of enclosingBlock returned is already Element*.
        * editing/InsertParagraphSeparatorCommand.cpp:
        (WebCore::InsertParagraphSeparatorCommand::doApply): RefPtr startBlock to guard against
        mutation events.
        * editing/htmlediting.cpp:
        (WebCore::enclosingBlock): make sure type of enclosingNode is an element before doing
        the static cast. This was already failing in a couple of layout tests. Also, isBlock
        check already exists in the function call to enclosingNodeOfType, so don't need it
        again on enclosingNode's renderer.
        * editing/htmlediting.h: 
        (WebCore):

2012-07-17  Andy Estes  <aestes@apple.com>

        <rdar://problem/11794849> iOS: Use after free due to issues in counters layout (84002)

        Merged ToT WebKit r118542.

    2012-05-25  Ken Buchanan  <kenrb@chromium.org>

        Layout root not getting cleared for anonymous renderers geting destroyed
        https://bugs.webkit.org/show_bug.cgi?id=84002

        Reviewed by Abhishek Arya.

        This is a follow-up to r109406, which added a check to clear layout
        roots when they point to a renderer that is being destroyed. The
        thinking was that layout roots would never be anonymous renderers,
        but there are some cases where this is not true (in particular,
        generated content containers with overflow clips can be layout roots).

        As in r109406, this patch has no layout test. This is because any test
        that exercises this behavior is caused by an existing layout bug where
        a child is not properly getting layout (or a renderer is getting dirtied
        out of order during layout) and will fail multiple ASSERTs:
        in particular, ASSERT(!m_layoutRoot->container() || !m_layoutRoot->
        container()->needsLayout()) in FrameView::scheduleRelayoutOfSubtree(),
        and ASSERT_NOT_REACHED() in RenderObject::clearLayoutRootIfNeeded().
        We are preventing those bugs from manifesting as security issues with
        this patch.

        This also removes an ASSERT from the RenderObject destructor. This is
        redundant with the condition in RenderObject::clearLayoutRootIfNeeded()
        which is always called in RenderObject::willBeDestroyed(), so the check 
        is not needed. It had to be removed because it fails when I try to
        adjust the ASSERT condition by removing the !node()
        check, due to RenderWidget clearing its node() during destruction.

        * rendering/RenderObject.cpp:
        (WebCore::RenderObject::~RenderObject):
        (WebCore::RenderObject::willBeDestroyed):

2012-07-17  Andy Estes  <aestes@apple.com>

        <rdar://problem/11794843> iOS: SecuritySaver: *exploitable* use after free in WebCore::GraphicsContext::paintingDisabled / WebCore::RenderSVGImage::paint (83979)

        Merged ToT WebKit r116647.

    2012-05-10  Stephen Chenney  <schenney@chromium.org>

        SVG Filters allow invalid elements as children
        https://bugs.webkit.org/show_bug.cgi?id=83979

        Reviewed by Nikolas Zimmermann.

        According to the SVG spec, there are numerous restrictions on the
        content of nodes (that is, their children). Specific to this problem,
        SVGFilter elements may only contain SVGFilterPrimitive elements, and
        those may only contain animation related elements. This patch enforces
        the restriction on filters in the render tree, thus preventing us from
        having (for instance) content that is inside a filter yet filtered by
        the filter.

        Manual test: ManualTests/bugzilla-83979.svg

        * svg/SVGFilterElement.cpp:
        (WebCore::SVGFilterElement::childShouldCreateRenderer): Added to only allow renderers for fe* children
        (WebCore):
        * svg/SVGFilterElement.h:
        (SVGFilterElement):
        * svg/SVGFilterPrimitiveStandardAttributes.h: Do not allow any children at all for fe* elements.
        (SVGFilterPrimitiveStandardAttributes):

2012-07-17  Andy Estes  <aestes@apple.com>

        <rdar://problem/11794837> iOS: Heap-use-after-free in WebCore::RenderScrollbar::getScrollbarPseudoStyle (80610)

        Merged ToT WebKit r116476.

    2012-05-08  Abhishek Arya  <inferno@chromium.org>

        Crash due to owning renderer not removed from custom scrollbar.
        https://bugs.webkit.org/show_bug.cgi?id=80610

        Reviewed by Eric Seidel.

        Test: scrollbars/scrollbar-owning-renderer-crash.html

        Changed RenderScrollbar to keep pointer to owning node, instead of the
        renderer. Renderer can get destroyed without informing the scrollbar, causing
        crashes later. Remove code from r94107 since it is not needed anymore and saves
        times when RenderBox is getting destroyed.

        * page/FrameView.cpp:
        (WebCore::FrameView::createScrollbar): pass renderer's node.
        * page/FrameView.h:
        * rendering/RenderBox.cpp:
        (WebCore::RenderBox::willBeDestroyed): no longer need this. came originally from r94107.
        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::createScrollbar): pass renderer's node.
        (WebCore::RenderLayer::destroyScrollbar): no longer need to clear owning renderer.
        * rendering/RenderListBox.cpp:
        (WebCore::RenderListBox::createScrollbar): pass renderer's node.
        * rendering/RenderMenuList.cpp:
        (WebCore::RenderMenuList::createScrollbar): pass renderer's node.
        * rendering/RenderScrollbar.cpp:
        (WebCore::RenderScrollbar::createCustomScrollbar): Store owner node instead of renderer.
        (WebCore::RenderScrollbar::RenderScrollbar): Store owner node instead of renderer.
        (WebCore::RenderScrollbar::owningRenderer): calculate owning renderer from owner node.
        * rendering/RenderScrollbar.h:
        (RenderScrollbar):
        * rendering/RenderTextControlSingleLine.cpp:
        (WebCore::RenderTextControlSingleLine::createScrollbar): pass renderer's node.

2012-07-17  Andy Estes  <aestes@apple.com>

        <rdar://problem/11747113> iOS: SVGSVGElement checkIntersection and checkEnclosure Mem corruption (67923)

        Merged ToT WebKit r117289.

    2012-05-16  Rob Buis  <rbuis@rim.com>

        SVGSVGElement checkIntersection and checkEnclosure Mem corruption
        https://bugs.webkit.org/show_bug.cgi?id=67923

        Reviewed by Nikolas Zimmermann.

        Only call checkIntersection/checkEnclosure when we have a valid renderer.

        Test: svg/custom/intersection-list-null.svg

        * svg/SVGSVGElement.cpp:
        (WebCore::SVGSVGElement::checkIntersection):
        (WebCore::SVGSVGElement::checkEnclosure):

2012-07-16  Benjamin Poulain  <bpoulain@apple.com>

        <rdar://problem/11756476> REGRESSION: UIWebView renders standalone JPEG with a body of 768x768px

        Reviewed by Ian Henderson.

        Revert r1122532 becauses some apps rely on the old behavior.

        UIWebView's scalesPageToFit works by defining the initial scale parameters. Changing the minimum-scale
        was overriding the parameter, changing the behavior of scalesPageToFit.

        The bug fixed by r1122532 will have to be fixed in Safari.

        * html/ImageDocument.cpp:
        (WebCore::ImageDocument::createDocumentStructure):

2012-07-16  Kiran Muppala  <cmuppala@apple.com>

        <rdar://problem/11839315> REGRESSION: RenderInline::absoluteQuads produces incorrect results for fixed position. (91451)

        Merge ToT WebKit r122802.

    2012-07-16  Kiran Muppala  <cmuppala@apple.com>

        REGRESSION: RenderInline::absoluteQuads produces incorrect results for fixed position.
        https://bugs.webkit.org/show_bug.cgi?id=91451

        Reviewed by Simon Fraser.

        RenderInline::absoluteQuads relies on copies of RenderGeometryMap,
        created indirectly by passing AbsoluteQuadsGeneratorContext object by
        value.  These copies are unsafe because the individual transform steps
        within the geometry map include a owned poitner to their respective
        transform.

        Modify the callee methods to take context by reference and disable
        copy constructor for RenderGeometryMap.

        Test: fast/inline/inline-fixed-position-boundingbox.html

        * rendering/RenderGeometryMap.h:
        (WebCore::RenderGeometryMapStep::RenderGeometryMapStep): Add missing
        m_offset to copy constructor initialization list.
        (RenderGeometryMap): Disable copy constructor.
        * rendering/RenderInline.cpp: Pass context object by reference.
        (WebCore::RenderInline::generateLineBoxRects): 
        (WebCore::RenderInline::generateCulledLineBoxRects):
        (WebCore::RenderInline::absoluteRects):
        (WebCore::RenderInline::absoluteQuads):
        (WebCore::RenderInline::linesBoundingBox):
        (WebCore::RenderInline::culledInlineVisualOverflowBoundingBox):
        (WebCore::RenderInline::addFocusRingRects):
        * rendering/RenderInline.h:
        (RenderInline::generateLineBoxRects): Update method declarations to
        show pass by reference context parameter.
        (RenderInline::generateCulledLineBoxRects): Ditto.

2012-07-16  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/11428641> New pagination mode causes audio/video elements to disappear

        Merge ToT WebKit r122770.

    2012-07-16  Simon Fraser  <simon.fraser@apple.com>
    
            Fix compositing layers in columns when in paginated mode
            https://bugs.webkit.org/show_bug.cgi?id=91425
    
            Reviewed by Dave Hyatt.
    
            Enhance a hack that was added to allow composited layers to
            display in columns to work for paginated mode, where the
            RenderView is renderer with columns.
    
            Test: compositing/columns/composited-in-paginated.html
    
            * rendering/RenderLayer.cpp:
            (WebCore::RenderLayer::updateLayerPosition):

2012-07-16  Beth Dakin  <bdakin@apple.com>

        <rdar://problem/11152108> Paginated webviews don't handle max-width: 100% correctly for vertical-rl

        Merge ToT WebKit r122761.

    2012-07-16  Beth Dakin  <bdakin@apple.com>

            https://bugs.webkit.org/show_bug.cgi?id=91299
            Paginated views should restrict available height to column height
            -and corresponding-
            <rdar://problem/11152108>
    
            Reviewed by Dan Bernstein.
    
            Now that RenderViews can have columns, availableLogicalHeight needs to consider
            that column height, much like how availableLogicalWidth already considers column
            width.
    
            availableLogicalHeight is newly virtual, like the already-virtual
            availableLogicalWidth.
            * rendering/RenderBox.h:
            (RenderBox):

            Check with the columnHeight.
            * rendering/RenderView.cpp:
            (WebCore):
            (WebCore::RenderView::availableLogicalHeight):
            * rendering/RenderView.h:
    
            setPagination now takes pageLength as an optional parameter.
            * testing/InternalSettings.cpp:
            (WebCore::InternalSettings::setPagination):
            * testing/InternalSettings.h:
            (WebCore::InternalSettings::setPagination):
            (InternalSettings):
            * testing/InternalSettings.idl:
            * testing/Internals.cpp:
            (WebCore::Internals::setPagination):
            * testing/Internals.h:
            (WebCore::Internals::setPagination):
            (Internals):
            * testing/Internals.idl:

2012-07-16  Eric Carlson  <eric.carlson@apple.com>

        <rdar://problem/9480382> POLICY: Disable audio playback in iAds when hardware mute switch 
        is set to muted.

        Reviewed by Sam Weinig.
        
        Add a setting that allows a client application to override the audio session category
        used for plug-in, <audio>/<video>, and WebAudio playback.

        * WebCore.exp.in: Export Page::setAudioSessionCategory and Settings::setAudioSessionCategoryOverride.

        * page/Page.cpp:
        (WebCore::Page::setAudioSessionCategory): New, set the audio session category, respecting the
            application override.
        * page/Page.h:

        * page/Settings.cpp:
        (WebCore::Settings::setAudioSessionCategoryOverride): New, override the default audio session category.
        (WebCore::Settings::audioSessionCategoryOverride): New.
        * page/Settings.h:

        * platform/audio/ios/AudioDestinationIOS.cpp:
        (WebCore::AudioDestinationIOS::initializeAudioSession): Call setAudioSessionCategoryOverride.

2012-07-16  Dan Bernstein  <mitz@apple.com>

        Some preparation for <rdar://problem/11601051> Make selection work well with Ruby (-webkit-user-select: none; is ignored)

        Reviewed by Enrica Casucci.

        Changed to use logical coordinates rather than explicitly checking for vertical writing modes
        in Range.cpp, and fixed some bugs in image selection rects in general, and in the handling of
        vertical writing modes along the way.

        * dom/Range.cpp:
        (WebCore::Range::collectSelectionRects): Changed to use the new SelectionRect functions that
        get and set logical positions and dimensions. Also fixed the logic for extending rects to
        the end edge of the block, which was broken for vertical writing modes.
        * platform/ios/SelectionRect.h:
        (WebCore::SelectionRect::logicalLeft): Added.
        (WebCore::SelectionRect::logicalWidth): Added.
        (WebCore::SelectionRect::logicalTop): Added.
        (WebCore::SelectionRect::logicalHeight): Added.
        (WebCore::SelectionRect::setLogicalLeft): Added.
        (WebCore::SelectionRect::setLogicalWidth): Added.
        (WebCore::SelectionRect::setLogicalTop): Added.
        (WebCore::SelectionRect::setLogicalHeight): Added.
        * rendering/RenderImage.cpp:
        (WebCore::RenderImage::collectSelectionRects): Fixed the computation of the image rect for
        inline images, which was using the selection bottom as a height (leading to taller-than-
        expected selection rects for images on any line but the first one) and the selection top (in
        the containing block’s coordinates) as the top (even though the later mapping to absolute
        coordinates includes mapping to the containing block’s coordinates). Fixed the computation
        of the so-called extents rect in vertical writing modes. This rect is initially in physical
        coordinates, so changed to apply the logical left and right offsets to the right sides.
        However, when constructing the SelectionRect, we need this rect to be in logical
        coordinates, so changed to transpose it after the mapping to absolute coordinates.
        * rendering/RenderText.cpp:
        (WebCore::RenderText::collectSelectionRects): Fixed the computation of the so-called
        extents rect in vertical writing modes. This rect is initially in physical coordinates, so
        changed to apply the logical left and right offsets to the right sides. However, when
        constructing the SelectionRect, we need this rect to be in logical coordinates, so changed
        to transpose it after the mapping to absolute coordinates.


2012-07-13  Tim Horton  <timothy_horton@apple.com>

        Sundance: Search bar shifted to the right, partially offscreen, in Netflix
        <rdar://problem/11407518>

        Reviewed by Dan Bernstein.

        Rollout http://trac.webkit.org/changeset/94492

        This is a partial rollout; since this patch, other things started depending on code that
        this patch split out into a separate function, so I left that alone. I did verify that
        the contents of said function were identical both before and after this change, and on ToT.

        * rendering/RenderBlock.h:
        * rendering/RenderBlockLineLayout.cpp:
        (WebCore::setStaticPositions):

2012-07-13  Tim Horton  <timothy_horton@apple.com>

        Sundance: Search bar shifted to the right, partially offscreen, in Netflix
        <rdar://problem/11407518>

        Reviewed by Dan Bernstein.

        Rollout http://trac.webkit.org/changeset/103851

        * rendering/RenderBlockLineLayout.cpp:
        (WebCore::LineInfo::LineInfo):
        (LineInfo):
        (WebCore::RenderBlock::constructLine):
        (WebCore::RenderBlock::layoutRunsAndFloatsInRange):
        (WebCore::RenderBlock::LineBreaker::skipLeadingWhitespace):

2012-07-13  Tim Horton  <timothy_horton@apple.com>

        Sundance: Search bar shifted to the right, partially offscreen, in Netflix
        <rdar://problem/11407518>

        Reviewed by Dan Bernstein.

        Rollout http://trac.webkit.org/changeset/113584

        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::layoutPositionedObjects):

2012-07-15  Joseph Pecoraro  <pecoraro@apple.com>

        <rdar://problem/11865836> ReadingList failing to archive nytimes.com article

        Merge ToT WebKit r122683.

    2012-07-15  Joseph Pecoraro  <pecoraro@apple.com>

            Windowless WebView not firing JavaScript load event if there is a media element
            https://bugs.webkit.org/show_bug.cgi?id=91331

            Reviewed by Eric Carlson.

            In prepareForLoad we start deferring the load event. If we fall into this
            clause where the page can not start loading media we bail, potentially
            indefinitely waiting until we can start loading media. Since we can not
            be certain this will ever happen, we should stop deferring the page's
            load event.

            Test: WebKit1.WindowlessWebViewWithMedia TestWebKitAPI test. The only
            way this path was reachable right now is on the mac port.

            * html/HTMLMediaElement.cpp:
            (WebCore::HTMLMediaElement::loadInternal):

2012-07-15  Benjamin Poulain  <bpoulain@apple.com>

        <rdar://problem/11877245> Add SPI to deny a Geolocation object without preventing future permission request

        Reviewed by David Kilzer.

        * WebCore.exp.in:
        Export Geolocation::resetAllGeolocationPermission().

2012-07-13 Kiran Muppala <cmuppala@apple.com>

        <rdar://problem/11845860> REGRESSION: RenderInline boundingBox ignores relative position offset (91168)

        Merge ToT WebKit r122653.

    2012-07-13  Kiran Muppala  <cmuppala@apple.com>

        REGRESSION: RenderInline boundingBox ignores relative position offset
        https://bugs.webkit.org/show_bug.cgi?id=91168

        Reviewed by Simon Fraser.

        RenderGeometryMap, used for caching the transform to the view,
        expects the first mapping pushed, to be that of the view itself.
        RenderInline was instead pushing it's own offset first.  Besides
        the offset of the view itself was not being pushed.

        Relaxed the RenderGeometryMap restriction that the first pushed
        step should be of the view.  It is sufficient that the view's mapping
        is pushed in the first call to pushMappingsToAncestor.  Modified
        RenderInline to push the offset of the view also to the geometry map.

        Test: fast/inline/inline-relative-offset-boundingbox.html

        * rendering/RenderGeometryMap.cpp:
        (WebCore::RenderGeometryMap::pushMappingsToAncestor): Add assertion to
        check if mapping to view was pushed in first invocation.
        (WebCore::RenderGeometryMap::pushView): Correct assertion that checks
        if the view's mapping is the first one to be applied.
        (WebCore::RenderGeometryMap::stepInserted): Use isRenderView to check if
        a mapping step belongs to a view instead of using mapping size.
        (WebCore::RenderGeometryMap::stepRemoved): Ditto.
        * rendering/RenderInline.cpp:
        (WebCore::(anonymous namespace)::AbsoluteQuadsGeneratorContext::AbsoluteQuadsGeneratorContext):
        Push mappings all the way up to and including the view.

2012-07-13  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/11648478> 3-pass pagination slows down pagination in Sundance compared to Hoodoo

        Merged TOT WebKit r120844, r122244, r122489, and r122639.

    2012-07-13  David Hyatt  <hyatt@apple.com>

        https://bugs.webkit.org/show_bug.cgi?id=91278
        Improve block margin estimation function to account for not having a layout and for quirks mode
        
        Reviewed by Simon Fraser.

        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::marginBeforeEstimateForChild):
        Revise marginBeforeEstimateForChild so that it computes block margins for the grandchild before
        recurring. This includes the quirks margin information as well. This ensures that the margins are
        up-to-date when checked, even before the object has had its first layout.
        
        * rendering/RenderBlock.h:
        (WebCore::RenderBlock::setMarginStartForChild):
        (WebCore::RenderBlock::setMarginEndForChild):
        (WebCore::RenderBlock::setMarginBeforeForChild):
        (WebCore::RenderBlock::setMarginAfterForChild):
        * rendering/RenderBox.cpp:
        (WebCore::RenderBox::computeBlockDirectionMargins):
        * rendering/RenderBox.h:
        (RenderBox):
        Add consts in order to compile.

    2012-07-11  David Hyatt  <hyatt@apple.com>

        https://bugs.webkit.org/show_bug.cgi?id=91000
        REGRESSION (r122244): Overflow elements don't shrink as much as they should.

        Reviewed by Simon Fraser.

        This is a fix for a a regression from https://bugs.webkit.org/show_bug.cgi?id=90646.

        I incorrectly analyzed the issue with Robert Hogan's negative margin patch and fooled myself into putting back
        in an incorrect minimum width check from long ago.
        
        What should have happened in the test case I patched is that the overflow element should shrink to 0. The issue 
        with improving the logical top estimate in the previous patch is it made the clear delta become 0. This in turn
        exposed a bug in our clearing algorithm with Robert's changes where you could need a relayout even if you didn't
        actually move. This issue only occurs because the floats list is getting changed mid-layout because of negative margins.

        The patch changes getClearDelta to call setChildNeedsLayout(true) on children whose widths change even when their
        positions do not. In effect this dynamic addition of new floats after you have done a layout on the child already means
        that you can need to lay out again despite not actually having to move.
        
        To handle this, the code that does the relayout is now called if the child needs a relayout. This is done even if
        the logical top estimate matches the final position.
        
        No new tests required, since the test in fast/block/float is now correctly covering the issue.

        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::layoutBlockChild):
        (WebCore::RenderBlock::getClearDelta):
        * rendering/RenderBox.cpp:
        (WebCore::RenderBox::shrinkLogicalWidthToAvoidFloats):

    2012-07-06  David Hyatt  <hyatt@apple.com>

        https://bugs.webkit.org/show_bug.cgi?id=90646
        <rdar://problem/11648478> 3-pass pagination slows down pagination

        Improve the logical top estimate function for margin collapsing to be more accurate. In particular
        make the basic case of <body><p> or <body><h1> no longer be wrong. This estimate being incorrect
        is not a big deal most of the time, but when paginating it is a very big deal, since you have to
        relayout everything whenever your vertical placement is wrong.

        Improving the estimation exposed a bug in an existing layout test. I had to clean up the buggy
        code written for negative margin-related float detection and fix an invalid layout test to
        actually be correct.

        Reviewed by Simon Fraser.

        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::collapseMargins):
        (WebCore::RenderBlock::marginBeforeEstimateForChild):
        (WebCore):
        (WebCore::RenderBlock::estimateLogicalTopPosition):
        (WebCore::RenderBlock::marginValuesForChild):
        * rendering/RenderBlock.h:
        (RenderBlock):
        * rendering/RenderBox.cpp:
        (WebCore::RenderBox::shrinkLogicalWidthToAvoidFloats):
        (WebCore::RenderBox::computeLogicalWidthInRegionUsing):

    2012-06-20  Robert Hogan  <robert@webkit.org>

        Negative margin block doesn't properly clear a float enclosed by a previous sibling
        https://bugs.webkit.org/show_bug.cgi?id=10900

        Reviewed by Eric Seidel.

        Tests: fast/block/float/previous-sibling-abspos-001.html
               fast/block/float/previous-sibling-abspos-002.html
               fast/block/float/previous-sibling-float-001.html
               fast/block/float/previous-sibling-float-002.html
               fast/css/clear-float-sibling.html

        Parent blocks keep a list of child floats that extend out of the parent block and
        by implication overhang into the parent's siblings. But this doesn't work if the
        sibling has collapsing margins - it will not find the float in the previous block's
        list so will ignore the float and fail to clear it.

        RenderBlock:collapseMargins() needs to check if a child's collapsing margin has 
        reduced the height of the parent up past the bottom of its previous sibling's lowest float
        and add the now overhanging float to the parent's float list if appropriate. No need to do
        this if the previous sibling is a float or is positioned - the child will clear/avoid it anyway
        and attempting to avoid floated children of floats causes incorrect layout.
        
        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::collapseMargins):

2012-07-13  Enrica Casucci  <enrica@apple.com>

        Merging OpenSource WebKit r122635.

    2012-07-13  Enrica Casucci  <enrica@apple.com>

        Threadsafety issues in WebScriptObject
        https://bugs.webkit.org/show_bug.cgi?id=90849

        Reviewed by Geoff Garen.

        Updated fix for this bug. The JSC API lock needs to be acquired also in JSObject.

        * bindings/objc/WebScriptObject.mm:
        (-[WebScriptObject JSObject]):

2012-07-13  Dean Jackson  <dino@apple.com>

        <rdar://problem/11561703> Layers with nested rotateY() transforms appear blurry on Retina displays (affects preview player UI in store)

        Reviewed by Simon Fraser.

        Always set the CALayer's rasterizationScale when we set the contentsScale. This is the same
        behavior as UIView, and shouldn't have any negative impact.

        Manual tests are attached to the radar. They include nested perspective, nested 3d, nested 3d with
        intermediate flattening layers, and a crazy test with multiple levels of perspective, flattening
        and 3d. I also tested against the iPad music store's inline player.

        * platform/graphics/ca/GraphicsLayerCA.cpp:
        (WebCore::GraphicsLayerCA::updateContentsScale): remove the workaround for <rdar://problem/9083381>
        because the fix is now applied to every layer.
        * platform/graphics/ca/PlatformCALayer.h:
        (PlatformCALayer): no need for the setRasterizationScale method any more.
        * platform/graphics/ca/mac/PlatformCALayerMac.mm:
        (PlatformCALayer::setContentsScale): also set rasterizationScale using the same scale.
        (PlatformCALayer::setRasterizationScale): removed.

2012-07-13  Benjamin Poulain  <bpoulain@apple.com>

        <rdar://problem/11870338> Updating aggressivePreloading on every WebPreferences change takes time on startup

        Reviewed by Simon Fraser.

        * loader/cache/CachedResourceLoader.cpp:
        (WebCore::CachedResourceLoader::preload):
        (WebCore::CachedResourceLoader::checkForPendingPreloads):
        * loader/cache/MemoryCache.h:
        (MemoryCache):
        Remove the property for aggressivePreloading.

2012-07-13  Benjamin Poulain  <bpoulain@apple.com>

        Merge OpenSource WebKit r122629.

    2012-07-13  Benjamin Poulain  <bpoulain@apple.com>

        Always aggressively preload on iOS
        https://bugs.webkit.org/show_bug.cgi?id=91276

        Reviewed by Simon Fraser.

        * loader/cache/CachedResourceLoader.cpp:
        (WebCore::CachedResourceLoader::preload):

2012-07-13  Gavin Barraclough  <barraclough@apple.com>

        <rdar://problem/11850956> 10A357/N94+root: Safari crashed on launch due to deadlock beneath JSLock::lock()

        Reviewed by Filip Pizlo.

        The bug here related to the nesting of the WebCoreReleaseLock & JSC API locks.
        We were hitting a deadlock due to a circular dependency between these locks.
        We can break the circular dependency here by enforcing a constraint that it is
        not valid to try to take the JSC API lock whilst holding the WebCoreReleaseLock.

        Since obj-c dealloc methods may require the JSC API lock (to unprotect GC memory)
        we should avoid calling dealloc whilst holding the WebCoreReleaseLock - this patch
        fixes the case where the WebThread is about to release the final retain of an object,
        triggering dealloc, to unlock the WebCoreReleaseLock before calling release.

        * wak/WebCoreThread.mm:
        (WebCoreObjCDeallocOnWebThreadImpl):
            - only hold the WebCoreReleaseLock over calls to release if retainCount != 1.

2012-07-13  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/11708902> text in boxes is cut off in iOS Application Programming book

        Merged TOT WebKit r122539.

    2012-07-12  Dan Bernstein  <mitz@apple.com>

        Pass an option flag to CFStringGetHyphenationLocationBeforeIndex() that tells it to not
        terminate the search at the last word boundary before the given index.

        Reviewed by Adele Peterson.

        No test, because the current version of Core Foundation ignores the options parameter.

        * platform/text/cf/HyphenationCF.cpp:
        (WebCore::lastHyphenLocation): Changed the options parameter from 0 to 1.

2012-07-12  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/11794104> REGRESSION (Sundance): Table cells are misplaced in certain books

        Merged TOT WebKit r122408.

    2012-07-11  Dan Bernstein  <mitz@apple.com>

        When a table row height grows because of pagination, not all cells’ heights are adjusted
        https://bugs.webkit.org/show_bug.cgi?id=91043

        Reviewed by Sam Weinig.

        The fix for in bug <http://webkit.org/b/83595> in <http://trac.webkit.org/r113738> made table
        rows grow as necessary to fit cells that grow as a result of pagination. But it had two bad
        side effects: earlier cells on the row would not grow by the same amount, and later cells on
        the row would factor the existing growth into their intrinsic padding.

        Test: fast/multicol/table-row-height-increase.html

        * rendering/RenderTableSection.cpp:
        (WebCore::RenderTableSection::layoutRows): Now when a cell becomes taller than the row height,
        the additional height needed is recorded, and the cell is shrunk back to row height. Then
        after finishing the row, all cells occurring on the row (including cells spanning it but not
        starting on it) are grown by the same amount.

2012-07-12  Benjamin Poulain  <bpoulain@apple.com>

        <rdar://problem/11766228> Disable CSS3 Flexbox for Sundance

        * Configurations/FeatureDefines.xcconfig:
        * css/CSSComputedStyleDeclaration.cpp:
        (WebCore):
        (WebCore::CSSComputedStyleDeclaration::getPropertyCSSValue):
        * css/CSSParser.cpp:
        (WebCore::isValidKeywordPropertyAndValue):
        (WebCore::isKeywordPropertyID):
        (WebCore::CSSParser::parseValue):
        (WebCore):
        * css/CSSPrimitiveValueMappings.h:
        (WebCore::CSSPrimitiveValue::CSSPrimitiveValue):
        (WebCore):
        * css/CSSProperty.cpp:
        (WebCore::CSSProperty::isInheritedProperty):
        * css/CSSPropertyNames.in:
        * css/CSSValueKeywords.in:
        * css/StyleBuilder.cpp:
        (WebCore::ApplyPropertyLineHeight::StyleBuilder::StyleBuilder):
        * css/StylePropertySet.cpp:
        (WebCore::StylePropertySet::getPropertyValue):
        (WebCore::StylePropertySet::asText):
        * css/StylePropertyShorthand.cpp:
        (WebCore):
        (WebCore::shorthandForProperty):
        * css/StylePropertyShorthand.h:
        (WebCore):
        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::collectMatchingRulesForList):
        * page/animation/CSSPropertyAnimation.cpp:
        (WebCore):
        (WebCore::CSSPropertyAnimation::ensurePropertyMap):
        * rendering/RenderObject.cpp:
        (WebCore::RenderObject::createObject):
        * rendering/style/RenderStyleConstants.h:

2012-07-12  Gavin Barraclough  <barraclough@apple.com>

    <rdar://problem/9906341> Stale WebScriptObject reference passed when same URL is loaded in 2 different webviews

    Merge 122494

    2012-07-12  Gavin Barraclough  <barraclough@apple.com>

        Threadsafety issues in WebScriptObject
        https://bugs.webkit.org/show_bug.cgi?id=90849

        Reviewed by Filip Pizlo & Oliver Hunt.

        Updated fix for this bug. Taking the JSC API lock from WebScriptObject::release
        may not be safe; better to just guard the JSWrapperCache with its own spinlock.

        * bindings/objc/WebScriptObject.mm:
        (WebCore::getJSWrapper):
            - Added spinlock; also retain/autorelease the returned wrapper - it is unsafe
              to wait for the caller to do so, due to a race condition vs release removing
              the wrapper from the map.
        (WebCore::addJSWrapper):
            - Take the spinlock guarding the cache.
        (WebCore::removeJSWrapper):
            - Take the spinlock guarding the cache.
        (WebCore::removeJSWrapperIfRetainCountOne):
            - Take the spinlock guarding the cache, remove the wrapper if retainCount is one.
        (WebCore::createJSWrapper):
            - Remove the API lock; this method no longer needs to retain/autorelease (this is
              done by getJSWrapper).
        (-[WebScriptObject _setImp:originRootObject:rootObject:]):
            - Remove the API lock.
        (-[WebScriptObject release]):
            - Remove the API lock, retainCount check moved into removeJSWrapperIfRetainCountOne.

2012-07-12  Antti Koivisto  <antti@apple.com>

        <rdar://problem/11822378> Not receiving -webView:didFinishLoadForFrame: for attached epub
        
        Merge ToT WebKit r122446.

    2012-07-11  Antti Koivisto  <antti@apple.com>

        Failure to dispatch didFinishLoadForFrame if font load fails synchronously 
        https://bugs.webkit.org/show_bug.cgi?id=91018

        Reviewed by Enrica Casucci.

        New font loads may be triggered by layout after the document load is complete but before we have dispatched
        didFinishLoading for the frame. If the load fails synchronously we might fail to ever invoke 
        FrameLoader::checkLoadComplete and so fail to dispatch didFinishLoading.
        
        Make sure this doesn't happen by calling FrameLoader::checkLoadComplete explicitly after triggering font loads.

        * css/CSSFontSelector.cpp:
        (WebCore::CSSFontSelector::beginLoadTimerFired):

2012-07-11  Gavin Barraclough  <barraclough@apple.com>

        <rdar://problem/11850956> 10A357/N94+root Safari unresponsive and then crashed on launch

        Reverting r1136625 (<rdar://problem/9906341> Stale WebScriptObject reference passed when same URL is loaded in 2 different webviews)
        This introduced a deadlock - temporarily reverting while we resolve this issue.

        * bindings/objc/WebScriptObject.mm:
        (WebCore::createJSWrapper):
        (-[WebScriptObject _setImp:originRootObject:rootObject:]):
        (-[WebScriptObject dealloc]):

2012-07-11  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/11795411> Safari unable to authenticate to Confluence server (WWW-Authenticate: OAuth)

        Reviewed by Brady Eidson.

        If we don't know about the authentication scheme then tell CFNetwork we can't handle it.
        Otherwise a ProtectionSpace with ProtectionSpaceAuthenticationSchemeUnknown could get
        converted into a CFURLProtectionRef with kCFURLProtectionSpaceAuthenticationSchemeDefault as
        the scheme and we fail to load sites.

        * platform/network/cf/ResourceHandleCFNet.cpp:
        (WebCore::canRespondToProtectionSpace):

2012-07-10  Jon Lee  <jonlee@apple.com>

        <rdar://problem/11843051> Look for MIME type through ResourceResponse instead of creating the NSURLResponse first

        Reviewed by David Kilzer.

        * WebCore.exp.in: Expose DocumentLoader::responseMIMEType(), which retrieves the same string used
        to create the NSURLResponse in the less efficient code.

2012-07-10  Dean Jackson  <dino@apple.com>

        <rdar://problem/11815787> iOS: -webkit-animations won't run if the first property is *not* animation-name

        Merge ToT WebKit r122271 and r122277.

    2012-07-09  Dean Jackson  <dino@apple.com>

            REGRESSION (r109610): Order of values in shorthand animation makes a difference
            https://bugs.webkit.org/show_bug.cgi?id=84533
            <rdar://problem/11831924>
            <rdar://problem/11815787>

            Reviewed by Simon Fraser.

            A previous revision (r109610) updated the parsing of the animation shorthand
            to make sure that animation-name wouldn't clobber other styles. The side effect
            of this was that we'd no longer find animation-name if it wasn't first in the
            list. This commit reverts the change and fixes it in a different way, by always
            parsing animation-name as the last property in the shorthand. This means that
            keywords for timing functions, fill modes and iteration will match before
            animation name. In other words, if you want an animation called "forwards"
            you should use the longhand property, because the shorthand will first match
            that against animation-fill-mode.

            Test: animations/animation-shorthand-name-order.html

            * css/CSSParser.cpp:
            (WebCore::CSSParser::parseAnimationShorthand): make a new array of longhand
            properties to check for, with name as the last entry rather than the first.
            Use this array to test the properties in the shorthand.

2012-07-10  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/11793139> -boundingBox returns incorrect origin (causes various emails to not reformat correctly)
        Merge ToT WebKit r118094.

    2012-05-22  Adam Barth  <abarth@webkit.org>
    
            RenderInline::absoluteRects does some incorrect layout math
            https://bugs.webkit.org/show_bug.cgi?id=87036
    
            Reviewed by Eric Seidel.
    
            http://trac.webkit.org/changeset/88297/trunk/Source/WebCore/rendering/RenderInline.cpp
            contained a typo.  We should accumulate offsets, not add sizes to
            offsets.
    
            Test: fast/inline/boundingBox-with-continuation.html
    
            * rendering/RenderInline.cpp:
            (WebCore::RenderInline::absoluteRects):
            (WebCore):

2012-07-10  Kiran Muppala  <cmuppala@apple.com>

    Part 3: <rdar://problem/11791199> REGRESSION: DOMElement boundingBox doesn't take -webkit-transform into account anymore (10A349)
    Revert <rdar://problem/11672737>, since the two previous commits for the above radar have addressed it's performance issue,
    while keeping [DOMNode boundingBox] transform aware.

    Reviewed by Simon Fraser.

    * bindings/objc/DOM.mm:
    (-[DOMNode boundingBox]): Revert to calling RenderObject::absoluteBoundingBoxRect with default 'useTransforms' argument of 'true'.

2012-07-10  Gavin Barraclough  <barraclough@apple.com>

    <rdar://problem/9906341> Stale WebScriptObject reference passed when same URL is loaded in 2 different webviews

    Merge 122198

    2012-07-09  Gavin Barraclough  <barraclough@apple.com>
    
            Threadsafety issues in WebScriptObject
            https://bugs.webkit.org/show_bug.cgi?id=90849
    
            Reviewed by Filip Pizlo.
    
            WebScriptObject maintains a NSMap of wrapper objects. A race condition exists
            between a wrapper being retrieved from the map, and being released - if the
            final release on an object is called between a call to getJSWrapper and the
            subsequent retain, we may end up with a stale object reference.
    
            We can make this safe by hoisting the removal from the map from delloc up into
            release (if the retainCount is 1), and locking release against retrieval from
            the map. Since release may be called from another thread, and NSMap is not
            threadsafe, we'd better lock around all access to the map (this fix already
            necessitates get & remove to be locked, so this just adds 'add', too).
    
            * bindings/objc/WebScriptObject.mm:
            (WebCore::createJSWrapper):
                - lock around getJSWrapper, retain.
            (-[WebScriptObject _setImp:originRootObject:rootObject:]):
                - lock around addJSWrapper.
            (-[WebScriptObject release]):
                - Added; removeJSWrapper for last release, lock & synchronized vs. getJSWrapper.
            (-[WebScriptObject dealloc]):
                - removeJSWrapper call hoisted into release.

2012-07-09  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/11749978> Memory growth during Alexa benchmark (localstorage databases are not closed).
        Merged ToT WebKit r122174 and r122177.

    2012-07-09  Ryosuke Niwa  <rniwa@webkit.org>

            Gcc build fix after r122174.

            * storage/StorageAreaImpl.cpp:
            (WebCore::StorageAreaImpl::decrementAccessCount):

    2012-07-09  Yongjun Zhang  <yongjun_zhang@apple.com>

            Consider closing unused localStorage database after a timeout.
            https://bugs.webkit.org/show_bug.cgi?id=90713

            For a localStorage, if there is no active document referencing to it for certain amount of time (300 seconds),
            we can close the underlying sqlite database.

            Reviewed by Brady Eidson.

            Test: storage/domstorage/storage-close-database-on-idle.html

            * storage/Storage.cpp:
            (WebCore::Storage::Storage): increment storageArea access count when a DOMWindow is referencing it.
            (WebCore::Storage::~Storage): decrement storageArea access count when DOMWindow is done with it.
            * storage/StorageArea.h:
            (StorageArea):
            * storage/StorageAreaImpl.cpp:
            (WebCore::StorageAreaImpl::StorageAreaImpl):
            (WebCore::StorageAreaImpl::incrementAccessCount):
            (WebCore):
            (WebCore::StorageAreaImpl::decrementAccessCount): schedule closeDatabaseTimer if there is no active document
                referencing to this storageArea.
            (WebCore::StorageAreaImpl::closeDatabaseTimerFired): close the underlying sqlite database.
            * storage/StorageAreaImpl.h:
            (StorageAreaImpl):
            * storage/StorageAreaSync.cpp:
            (WebCore::StorageAreaSync::sync): if m_syncCloseDatabase flag is set and the database is not opened, bail out.
            * storage/StorageTracker.cpp:
            (WebCore):
            (WebCore::StorageTracker::StorageTracker):
            * storage/StorageTracker.h:
            (WebCore::StorageTracker::storageDatabaseIdleInterval):
            (WebCore::StorageTracker::setStorageDatabaseIdleInterval):  set the timeout value that we will wait before closing the
                database.  This is currently used by DumpRenderTree only.
            (StorageTracker):

2012-07-09  David Kilzer  <ddkilzer@apple.com>

        Part 2 of 2: <rdar://problem/11791199> REGRESSION: DOMElement boundingBox doesn't take -webkit-transform into account anymore (10A349)

        Merged ToT WebKit r122191.

    2012-07-09  Kiran Muppala  <cmuppala@apple.com>

        Improve performance of RenderInline::absoluteQuads for deeply nested inlines.
        https://bugs.webkit.org/show_bug.cgi?id=90715

        Reviewed by Maciej Stachowiak.

        No new tests: functionality unchanged.

        * rendering/RenderInline.cpp: Cache transformation from local to absolute coordinates using a
        RenderGeometryMap and use it for subsequent mappings.
        (WebCore::(anonymous namespace)::AbsoluteQuadsGeneratorContext::AbsoluteQuadsGeneratorContext):
        (WebCore::(anonymous namespace)::AbsoluteQuadsGeneratorContext::operator()):

2012-07-09  David Kilzer  <ddkilzer@apple.com>

        Part 1 of 2: <rdar://problem/11791199> REGRESSION: DOMElement boundingBox doesn't take -webkit-transform into account anymore (10A349)

        Merged ToT WebKit r116718.

    2012-05-10  Tien-Ren Chen  <trchen@chromium.org>

        Eliminate duplicated code for culled line box in RenderInline
        https://bugs.webkit.org/show_bug.cgi?id=85725

        This patch extracts the common part of culledInlineBoundingBox() /
        culledInlineAbsoluteRects() / culledInlineAbsoluteQuads() to become a
        template function generateCulledLineBoxRects(). The template function
        accepts a new parameter, GeneratorContext functor, which will be
        invoked everytime a new line box rect has been generated. The generated
        rect will be in local coordinate. The functor will be responsible for
        appropriate transformation, then appending to vector or union with
        existing bounding box.

        Reviewed by Eric Seidel.

        No new tests. No change in behavior.

        * rendering/RenderInline.cpp:
        (WebCore):
        (WebCore::RenderInline::generateLineBoxRects):
        (WebCore::RenderInline::generateCulledLineBoxRects):
        (WebCore::RenderInline::absoluteRects):
        (WebCore::RenderInline::absoluteQuads):
        (WebCore::RenderInline::linesBoundingBox):
        (WebCore::RenderInline::culledInlineVisualOverflowBoundingBox):
        (WebCore::RenderInline::addFocusRingRects):
        * rendering/RenderInline.h:
        (RenderInline):

2012-07-09  Eric Carlson  <eric.carlson@apple.com>

        <rdar://problem/11790310> WebAudio is not using a category that obeys the ringer switch

        Reviewed by Dean Jackson.

        Use the audio session category to "ambient sound" for WebAudio so it is muted by
        the ringer switch.

        * platform/audio/ios/AudioDestinationIOS.cpp:
        (WebCore::AudioDestinationIOS::initializeAudioSession): Set the session category to 
            kAudioSessionCategory_AmbientSound and don't bother overriding the category mix
            because ambient sounds mix automatically.

2012-07-09  Benjamin Poulain  <bpoulain@apple.com>

        Warning fix: do not export WebFontCache on iOS

        Remove the export for iOS after WebFontCacheIOS has been removed in r1136387.

        * WebCore.exp.in:

2012-07-09  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/11833124> Missing #ifdefs in WebTiledLayer.mm

        Reviewed by Paul Knight.

        + (BOOL)shouldDrawOnMainThread returns NO on iOS, and YES
        on desktop, so the code needs #ifdefs.
        
        (+prefetchedTiles is now on desktop too, so no #idef needed there.)

        * platform/graphics/mac/WebTiledLayer.mm:
        (+[WebTiledLayer shouldDrawOnMainThread]):

2012-07-07  Benjamin Poulain  <bpoulain@apple.com>

        Get rid of WebFontCacheIOS, use GraphicsServices directly from the FontCache

        Reviewed by David Kilzer.

        WebFontCache is useless for iOS and using it does not help sharing code with OS X.

        This patch removes the iOS WebFontCache and use GraphicsServices directly. This saves
        us the conversions of WTF->CF types.

        * WebCore.xcodeproj/project.pbxproj:
        * platform/graphics/ios/FontCacheIOS.mm:
        (WebCore::toTraitsMask):
        (WebCore):
        (WebCore::FontCache::getTraitsInFamily):
        (WebCore::FontCache::createFontPlatformData):
        * platform/ios/WebFontCacheIOS.mm: Removed.
        * platform/mac/WebFontCache.h:

2012-07-06  Benjamin Poulain  <bpoulain@apple.com>

        Avoid the conversion to CFString when creating fonts

        Reviewed by Ian Henderson.

        To create a font in WebFontCache, we need the font family in UTF-8. Previously, the font name
        was converted WTF::String->CFString->(NSString)->UTF8.

        The conversion WTF::String->CFString can be relatively costly.

        This patch changes the parameter of [WebFontCache createFontWithFamily:traits:weight:size:]
        to use WTF::String directly so that we avoid the conversion to CFString.

        According to D-trace, this saves up to 6ms when loading Reddit on N88 (although
        I have my doubts this time might be inflated for some reasons).

        * platform/ios/WebFontCacheIOS.mm:
        (+[WebFontCache createFontWithFamily:traits:weight:size:]):
        * platform/mac/WebFontCache.h:
        (WTF):

2012-07-07  Mark Hahnenberg  <mhahnenberg@apple.com>

        <rdar://problem/11231897> NFX: Entering Netflix while a match song is playing caused an AppleTV crash

        Merge r121381

    2012-06-25  Mark Hahnenberg  <mhahnenberg@apple.com>

        JSLock should be per-JSGlobalData
        https://bugs.webkit.org/show_bug.cgi?id=89123

        Reviewed by Geoffrey Garen.

        No new tests. Current regression tests are sufficient.

        Changed all sites that used JSLock to instead use the new JSLockHolder
        and pass in the correct JS context that the code is about to interact with that 
        needs protection. Also added a couple JSLocks to places that didn't already 
        have it that needed it.

        * bindings/js/GCController.cpp:
        (WebCore::collect):
        (WebCore::GCController::garbageCollectSoon):
        (WebCore::GCController::garbageCollectNow):
        (WebCore::GCController::discardAllCompiledCode):
        * bindings/js/JSCustomSQLStatementErrorCallback.cpp:
        (WebCore::JSSQLStatementErrorCallback::handleEvent):
        * bindings/js/JSCustomVoidCallback.cpp:
        (WebCore::JSCustomVoidCallback::handleEvent):
        * bindings/js/JSCustomXPathNSResolver.cpp:
        (WebCore::JSCustomXPathNSResolver::lookupNamespaceURI):
        * bindings/js/JSErrorHandler.cpp:
        (WebCore::JSErrorHandler::handleEvent):
        * bindings/js/JSEventCustom.cpp:
        (WebCore::toJS):
        * bindings/js/JSEventListener.cpp:
        (WebCore::JSEventListener::handleEvent):
        * bindings/js/JSInjectedScriptHostCustom.cpp:
        (WebCore::InjectedScriptHost::nodeAsScriptValue):
        (WebCore::JSInjectedScriptHost::inspectedObject):
        * bindings/js/JSInjectedScriptManager.cpp:
        (WebCore::InjectedScriptManager::createInjectedScript):
        (WebCore::InjectedScriptManager::canAccessInspectedWindow):
        * bindings/js/JSLazyEventListener.cpp:
        (WebCore::JSLazyEventListener::initializeJSFunction):
        * bindings/js/JSMainThreadExecState.h:
        (WebCore::JSMainThreadExecState::evaluate):
        * bindings/js/JSMutationCallbackCustom.cpp:
        (WebCore::JSMutationCallback::handleEvent):
        * bindings/js/JSNodeFilterCondition.cpp:
        (WebCore::JSNodeFilterCondition::acceptNode):
        * bindings/js/JSRequestAnimationFrameCallbackCustom.cpp:
        (WebCore::JSRequestAnimationFrameCallback::handleEvent):
        * bindings/js/JavaScriptCallFrame.cpp:
        (WebCore::JavaScriptCallFrame::evaluate):
        * bindings/js/PageScriptDebugServer.cpp:
        (WebCore::PageScriptDebugServer::recompileAllJSFunctions):
        * bindings/js/ScheduledAction.cpp:
        (WebCore::ScheduledAction::executeFunctionInContext):
        * bindings/js/ScriptCachedFrameData.cpp:
        (WebCore::ScriptCachedFrameData::ScriptCachedFrameData):
        (WebCore::ScriptCachedFrameData::restore):
        (WebCore::ScriptCachedFrameData::clear):
        * bindings/js/ScriptController.cpp:
        (WebCore::ScriptController::evaluateInWorld):
        (WebCore::ScriptController::clearWindowShell):
        (WebCore::ScriptController::initScript):
        (WebCore::ScriptController::updateDocument):
        (WebCore::ScriptController::cacheableBindingRootObject):
        (WebCore::ScriptController::bindingRootObject):
        (WebCore::ScriptController::windowScriptNPObject):
        (WebCore::ScriptController::jsObjectForPluginElement):
        (WebCore::ScriptController::clearScriptObjects):
        * bindings/js/ScriptControllerMac.mm:
        (WebCore::ScriptController::windowScriptObject):
        * bindings/js/ScriptDebugServer.cpp:
        (WebCore::ScriptDebugServer::dispatchDidPause):
        * bindings/js/ScriptEventListener.cpp:
        (WebCore::eventListenerHandlerBody):
        (WebCore::eventListenerHandlerLocation):
        * bindings/js/ScriptFunctionCall.cpp:
        (WebCore::ScriptCallArgumentHandler::appendArgument):
        (WebCore::ScriptFunctionCall::call):
        (WebCore::ScriptFunctionCall::construct):
        (WebCore::ScriptCallback::call):
        * bindings/js/ScriptObject.cpp:
        (WebCore::ScriptGlobalObject::set):
        (WebCore::ScriptGlobalObject::get):
        (WebCore::ScriptGlobalObject::remove):
        * bindings/js/ScriptValue.cpp:
        (WebCore::ScriptValue::getString):
        (WebCore::ScriptValue::toInspectorValue):
        * bindings/js/WorkerScriptController.cpp:
        (WebCore::WorkerScriptController::~WorkerScriptController):
        (WebCore::WorkerScriptController::initScript):
        (WebCore::WorkerScriptController::evaluate):
        (WebCore::WorkerScriptController::disableEval):
        * bindings/objc/WebScriptObject.mm:
        (_didExecute):
        (-[WebScriptObject callWebScriptMethod:withArguments:]):
        (-[WebScriptObject evaluateWebScript:]):
        (-[WebScriptObject setValue:forKey:]):
        (-[WebScriptObject valueForKey:]):
        (-[WebScriptObject removeWebScriptKey:]):
        (-[WebScriptObject hasWebScriptKey:]):
        (-[WebScriptObject stringRepresentation]):
        (-[WebScriptObject webScriptValueAtIndex:]):
        (-[WebScriptObject setWebScriptValueAtIndex:value:]):
        (+[WebScriptObject _convertValueToObjcValue:originRootObject:rootObject:]):
        * bindings/scripts/CodeGeneratorJS.pm:
        (GenerateCallbackImplementation):
        * bindings/scripts/test/JS/JSTestCallback.cpp:
        (WebCore::JSTestCallback::callbackWithNoParam):
        (WebCore::JSTestCallback::callbackWithClass1Param):
        (WebCore::JSTestCallback::callbackWithClass2Param):
        (WebCore::JSTestCallback::callbackWithStringList):
        (WebCore::JSTestCallback::callbackWithBoolean):
        (WebCore::JSTestCallback::callbackRequiresThisToPass):
        * bridge/NP_jsobject.cpp:
        (_NPN_InvokeDefault):
        (_NPN_Invoke):
        (_NPN_Evaluate):
        (_NPN_GetProperty):
        (_NPN_SetProperty):
        (_NPN_RemoveProperty):
        (_NPN_HasProperty):
        (_NPN_HasMethod):
        (_NPN_Enumerate):
        (_NPN_Construct):
        * bridge/c/c_class.cpp:
        (JSC::Bindings::CClass::~CClass):
        (JSC::Bindings::CClass::methodsNamed):
        (JSC::Bindings::CClass::fieldNamed):
        * bridge/c/c_instance.cpp:
        (JSC::Bindings::CInstance::moveGlobalExceptionToExecState):
        (JSC::Bindings::CInstance::invokeMethod):
        (JSC::Bindings::CInstance::invokeDefaultMethod):
        (JSC::Bindings::CInstance::invokeConstruct):
        (JSC::Bindings::CInstance::getPropertyNames):
        * bridge/c/c_runtime.cpp:
        (JSC::Bindings::CField::valueFromInstance):
        (JSC::Bindings::CField::setValueToInstance):
        * bridge/c/c_utility.cpp:
        (JSC::Bindings::convertValueToNPVariant):
        (JSC::Bindings::convertNPVariantToValue):
        * bridge/jni/jni_jsobject.mm:
        (JavaJSObject::call):
        (JavaJSObject::eval):
        (JavaJSObject::getMember):
        (JavaJSObject::setMember):
        (JavaJSObject::removeMember):
        (JavaJSObject::getSlot):
        (JavaJSObject::setSlot):
        (JavaJSObject::toString):
        (JavaJSObject::convertValueToJObject):
        (JavaJSObject::convertJObjectToValue):
        * bridge/jni/jni_objc.mm:
        (JSC::Bindings::dispatchJNICall):
        * bridge/jni/jsc/JNIUtilityPrivate.cpp:
        (JSC::Bindings::convertValueToJValue):
        * bridge/jni/jsc/JavaClassJSC.cpp:
        (JavaClass::JavaClass):
        (JavaClass::~JavaClass):
        * bridge/jni/jsc/JavaInstanceJSC.cpp:
        (JavaInstance::stringValue):
        * bridge/jni/jsc/JavaMethodJSC.cpp:
        (appendClassName):
        (JavaMethod::signature):
        * bridge/jni/jsc/JavaStringJSC.h:
        (JSC::Bindings::JavaString::JavaString):
        (JSC::Bindings::JavaString::~JavaString):
        (JSC::Bindings::JavaString::utf8):
        (JSC::Bindings::JavaString::init):
        * bridge/jsc/BridgeJSC.cpp:
        (JSC::Bindings::Instance::createRuntimeObject):
        (JSC::Bindings::Instance::newRuntimeObject):
        * bridge/objc/objc_instance.mm:
        (ObjcInstance::moveGlobalExceptionToExecState):
        (ObjcInstance::invokeObjcMethod):
        (ObjcInstance::invokeDefaultMethod):
        (ObjcInstance::setValueOfUndefinedField):
        (ObjcInstance::getValueOfUndefinedField):
        * bridge/objc/objc_runtime.mm:
        (JSC::Bindings::ObjcField::valueFromInstance):
        (JSC::Bindings::ObjcField::setValueToInstance):
        * bridge/objc/objc_utility.mm:
        (JSC::Bindings::convertValueToObjcValue):
        (JSC::Bindings::convertNSStringToString):
        (JSC::Bindings::convertObjcValueToValue):
        * bridge/qt/qt_instance.cpp:
        (JSC::Bindings::QtInstance::~QtInstance):
        (JSC::Bindings::QtInstance::getQtInstance):
        (JSC::Bindings::QtInstance::newRuntimeObject):
        * bridge/qt/qt_pixmapruntime.cpp:
        (JSC::Bindings::QtPixmapInstance::createPixmapRuntimeObject):
        * bridge/qt/qt_runtime.cpp:
        (JSC::Bindings::convertValueToQVariant):
        (JSC::Bindings::convertQVariantToValue):
        (JSC::Bindings::QtRuntimeMetaMethod::call):
        (JSC::Bindings::QtRuntimeConnectionMethod::call):
        * bridge/qt/qt_runtime_qt4.cpp:
        (JSC::Bindings::convertValueToQVariant):
        (JSC::Bindings::convertQVariantToValue):
        (JSC::Bindings::QtRuntimeMetaMethod::call):
        (JSC::Bindings::QtRuntimeConnectionMethod::call):
        * bridge/runtime_root.cpp:
        (JSC::Bindings::RootObject::gcProtect):
        (JSC::Bindings::RootObject::gcUnprotect):
        * html/HTMLCanvasElement.cpp:
        (WebCore::HTMLCanvasElement::createImageBuffer):
        * html/HTMLImageLoader.cpp:
        (WebCore::HTMLImageLoader::notifyFinished):
        * plugins/PluginView.cpp:
        (WebCore::PluginView::start):
        (WebCore::PluginView::stop):
        (WebCore::PluginView::performRequest):
        (WebCore::PluginView::npObject):
        (WebCore::PluginView::privateBrowsingStateChanged):
        * plugins/blackberry/PluginViewBlackBerry.cpp:
        (WebCore::PluginView::dispatchNPEvent):
        (WebCore::PluginView::setNPWindowIfNeeded):
        (WebCore::PluginView::platformStart):
        (WebCore::PluginView::getWindowInfo):
        * plugins/efl/PluginViewEfl.cpp:
        (WebCore::PluginView::dispatchNPEvent):
        * plugins/gtk/PluginViewGtk.cpp:
        (WebCore::PluginView::dispatchNPEvent):
        (WebCore::PluginView::handleKeyboardEvent):
        (WebCore::PluginView::handleMouseEvent):
        (WebCore::PluginView::setNPWindowIfNeeded):
        (WebCore::PluginView::platformStart):
        * plugins/mac/PluginViewMac.mm:
        (WebCore::PluginView::setNPWindowIfNeeded):
        (WebCore::PluginView::dispatchNPEvent):
        * plugins/qt/PluginViewQt.cpp:
        (WebCore::PluginView::dispatchNPEvent):
        (WebCore::PluginView::setNPWindowIfNeeded):
        (WebCore::PluginView::platformStart):
        * plugins/win/PluginViewWin.cpp:
        (WebCore::PluginView::dispatchNPEvent):
        (WebCore::PluginView::handleKeyboardEvent):
        (WebCore::PluginView::handleMouseEvent):
        (WebCore::PluginView::setNPWindowRect):
        * testing/js/WebCoreTestSupport.cpp:
        (WebCoreTestSupport::injectInternalsObject):
        (WebCoreTestSupport::resetInternalsObject):
        * xml/XMLHttpRequest.cpp:
        (WebCore::XMLHttpRequest::dropProtection):

2012-07-07  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/11727313> REGRESSION (Sundance): Arabic characters are not correctly displayed in Safari when visiting the YouTube site

        Reviewed by Sam Weinig.

        In iOS, Arabic does not shape correctly in some fonts (see <rdar://problem/9823975>), so we
        force all Arabic text to use Geeza Pro. The mechanism added in TOT WebKit r95391 for choosing
        a font for rendering a combining character sequence did not include this iOS-only quirk,
        allowing such sequences to be rendered using different fonts.

        * platform/graphics/mac/FontComplexTextMac.cpp:
        (WebCore::Font::fontDataForCombiningCharacterSequence): Prevented this function from trying
        other fonts if the base character of the sequence is Arabic.

2012-07-06  Joseph Pecoraro  <pecoraro@apple.com>

        <rdar://problem/10064761> Input text field placeholder is slightly indented

        Revert r1019341 which gave placeholders a slight text-indent on iOS.
        The system style for UITextFields changed to remove the indent on
        placeholders so we are doing the same to match them.

        Reviewed by Dan Bernstein.

        * css/html.css:
        (::-webkit-input-placeholder):

2012-07-06  Oliver Hunt  <oliver@apple.com>

        <rdar://problem/11742939> webbookmarksd often hangs beneath JSC::Interpreter::execute loading finance.yahoo.com articles

        Reviewed by Simon Fraser.

        This patch modifies the screenRect function to return a non-zero
        sized rect when called on a UIWebView with no window.  Previously
        we returned an empty rect, but now we simply return the frame rect
        instead.  This is necessary to prevent content that assumes that
        screen size will always be greater than 0x0 from going wrong.

        In this specific case a loop iteration variable was being incremented
        by the screen width (0) and so just looped forever.

        * platform/ios/PlatformScreenIOS.mm:
        (WebCore::screenRect):

2012-07-06  Joseph Pecoraro  <pecoraro@apple.com>

        Move MainThread add/remove auto unlock observer functions next to each other.

        Reviewed by Scott Grant.

        * wak/WebCoreThread.mm:
        (MainRunLoopUnlockGuard):

2012-07-06  Joseph Pecoraro  <pecoraro@apple.com>

        Remove unnecessary PLATFORM(IOS) guards in WebCoreThread files.

        Reviewed by Scott Grant.

        * wak/WebCoreThread.mm:
        (StartWebThread):

2012-07-06  Jon Lee  <jonlee@apple.com>

        <rdar://problem/11822630> Avoid parsing the response header during ResourceResponse::isAttachment() when dealing with a synthesized document

        Reviewed by Pratik Solanki.

        In the case of a synthesized document, we don't need to do the extra ResourceResponse::isAttachment() check in
        Document::initSecurityContext(). We add a boolean flag that marks a document as being synthesized, and this flag
        could potentially be used in other parts of WebCore for performance optimization.

        * dom/Document.h:
        (Document): Change the Document constructor to also take a isSynthesized flag, which is by default false. Add the
        m_isSynthesized flag.
        (WebCore::Document::isSynthesized): Returns the flag.
        * dom/Document.cpp:
        (WebCore):
        (WebCore::Document::Document):
        (WebCore::Document::initSecurityContext): Before calling isAttachment(), check to see whether it is a synthesized document.
        If it is, we are guaranteed it is not an attachment.
        * html/HTMLDocument.cpp:
        (HTMLDocument): Pass the flag to Document.
        * html/HTMLDocument.h:
        (HTMLDocument): Change HTMLDocument constructor to take the flag.
        (WebCore::HTMLDocument::createSynthesizedDocument):
        * page/ios/FrameIOS.mm:
        (WebCore::Frame::initWithSimpleHTMLDocument): Create a synthesized HTMLDocument.

2012-07-06  Dan Bernstein  <mitz@apple.com>

        Part of <rdar://problem/11601051> -webkit-user-select: none; ignored for Ruby

        Reviewed by Scott Grant.

        * dom/Range.cpp:
        (WebCore::Range::collectSelectionRects): Added a check for the user-select property when
        collecting selection rects from leaf renderers in the selection.

2012-07-05  Benjamin Poulain  <bpoulain@apple.com>

        Merge OpenSource WebKit r121929 for <rdar://problem/11328493>.

    2012-07-05  Benjamin Poulain  <bpoulain@apple.com>

        Double release of resources if the load is canceled in a callback of ResourceLoader::didFinishLoading
        https://bugs.webkit.org/show_bug.cgi?id=90431

        Reviewed by Anders Carlsson.

        In ResourceLoader::didFinishLoadingOnePart(), we invoke didFinishLoad() on the WebKit client. If WebKit
        causes the current frame to cancel the load synchronously, the resources are already freed when
        ResourceLoader::didFinishLoadingOnePart() ends.
        When ResourceLoader::didFinishLoading() subsequently invokes releaseResources(), we are releasing the
        resources a second time.

        This patch add a second check for cancellation after invoking ResourceLoader::didFinishLoadingOnePart() to
        avoid such issues.

        The previous check at the beginning of ResourceLoader::didFinishLoading() has been removed because it is
        redundant with ResourceLoader::didFinishLoadingOnePart().

        * loader/ResourceLoader.cpp:
        (WebCore::ResourceLoader::didFinishLoading):
        (WebCore::ResourceLoader::didFinishLoadingOnePart):

2012-07-05  Pratik Solanki  <psolanki@apple.com>

        Followup fix for <rdar://problem/10107611> Tapping status bar while loading QuickLook PowerPoint file crashes in -[QuickLookHandleAsDelegate connection:didReceiveData:lengthReceived:]

        Reviewed by David Kilzer.

        Retain the delegate in QuickLookHandle, otherwise it could have been dealloced by the time
        we call [QuickLookHandleAsDelegate clearHandle] in the destructor.

        * platform/network/ios/QuickLook.h:
        (QuickLookHandle):
        * platform/network/ios/QuickLook.mm:
        (WebCore::QuickLookHandle::QuickLookHandle):
        (WebCore::QuickLookHandle::~QuickLookHandle):

2012-07-05  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/11406205> Sundance 10A303:Mail doesn't open attachments with .h, .c
        Merged ToT WebKit r121923.

        * platform/network/ios/WebCoreURLResponseIOS.mm: use mimeTypeFromUTITree to query the mimeType if
            QuickLooks isn't able to give us a meaningful result.  We only do this for local files.

    2012-07-05  Yongjun Zhang  <yongjun_zhang@apple.com>

            Code refactoring: move mimeTypeFromUTITree to a separate file.
            https://bugs.webkit.org/show_bug.cgi?id=90619

            We should move UTI handling related code to a separate file.

            Reviewed by David Kilzer.

            * WebCore.xcodeproj/project.pbxproj: Add UTIUtilities.h/UTIUtilities.mm to xcode project, and drive-by fix
                that happened when editing the Xcode project file.
            * platform/network/mac/UTIUtilities.h: Added.
            (WebCore):
            * platform/network/mac/UTIUtilities.mm: Added.  move mimeTypeFromUTITree to UTIUtilities.mm.
            (WebCore):
            (WebCore::mimeTypeFromUTITree):
            * platform/network/mac/WebCoreURLResponse.mm: include UTIUtilities.h to use mimeTypeFromUTITree.
            (WebCore):


2012-07-05  Mark Hahnenberg  <mhahnenberg@apple.com>

        Roll out r1135419

        Caused a variety of issues, including deadlocks and animation performance degradation.

2012-07-05  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/10107611> Tapping status bar while loading QuickLook PowerPoint file crashes in -[QuickLookHandleAsDelegate connection:didReceiveData:lengthReceived:]

        Reviewed by David Kilzer.

        It's possible for a load to be cancelled while we're still handling data coming in from
        QLPreviewConverter. We would crash because we had a stale reference to the ResourceHandle in
        the delegate object that we pass to QuickLook. Fix crash by clearing the ResourceHandle
        pointer in QuickLookHandleAsDelegate. Also add additional cleanup code in QuickLookHandle
        destructor.

        * platform/network/ios/QuickLook.h:
        (QuickLookHandle):
        * platform/network/ios/QuickLook.mm:
        (-[QuickLookHandleAsDelegate connection:didReceiveDataArray:]):
        (-[QuickLookHandleAsDelegate connection:didReceiveData:lengthReceived:]):
        (-[QuickLookHandleAsDelegate connectionDidFinishLoading:]):
        (-[QuickLookHandleAsDelegate connection:didFailWithError:]):
        (-[QuickLookHandleAsDelegate clearHandle]):
        (WebCore::QuickLookHandle::QuickLookHandle):
        (WebCore::QuickLookHandle::~QuickLookHandle):

2012-06-19  Justin Garcia  <justin.garcia@apple.com>

		<rdar://problem/11703819> add second dictation marker type to DocumentMarker creation assert
		
		Reviewed by David Kilzer.

		* dom/DocumentMarker.h:
		(WebCore::DocumentMarker::DocumentMarker):

2012-07-05  Dean Jackson  <dino@apple.com>

        <rdar://problem/11808150> Guard WebAudio restrictions so we don't get future merge issues

        I forgot to tell Jeffrey to put PLATFORM(IOS) guards in my review for
        https://svn.apple.com/trac/puzzlebox/changeset/1135426
        Once we know if HI wants us to enforce this restriction we can either
        remove this code or port it to Open Source.

        Reviewed by Sam Weinig.

        * Modules/webaudio/AudioBufferSourceNode.cpp:
        (WebCore::AudioBufferSourceNode::noteGrainOn):
        * Modules/webaudio/AudioContext.cpp:
        (WebCore::AudioContext::AudioContext):
        (WebCore::AudioContext::startRendering):
        * Modules/webaudio/AudioContext.h:
        (AudioContext):
        * Modules/webaudio/AudioDestinationNode.cpp:
        (WebCore::AudioDestinationNode::provideInput):
        * Modules/webaudio/AudioScheduledSourceNode.cpp:
        (WebCore::AudioScheduledSourceNode::noteOn):

2012-06-25  Jeffrey Pfau  <jpfau@apple.com>

        <rdar://problem/11041007> WebAudio should restrict playback to user interaction on iOS

        Added a bevahior restrictions field in AudioContext that behaviors similarly to
        the one in HTMLMediaElement. Restrictions are lifted when JavaScript calls noteOn,
        noteGrainOn or startRendering from a user gesture event.

        Reviewed by Dean Jackson.

        No new tests, testing framework doesn't support web audio.

        * Modules/webaudio/AudioBufferSourceNode.cpp:
        (WebCore::AudioBufferSourceNode::noteGrainOn):
        * Modules/webaudio/AudioContext.cpp:
        (WebCore::AudioContext::AudioContext):
        (WebCore::AudioContext::constructCommon):
        (WebCore::AudioContext::startRendering):
        * Modules/webaudio/AudioContext.h:
        (AudioContext):
        (WebCore::AudioContext::userGestureRequiredForAudioStart):
        (WebCore::AudioContext::addBehaviorRestriction):
        (WebCore::AudioContext::removeBehaviorRestriction):
        * Modules/webaudio/AudioDestinationNode.cpp:
        (WebCore::AudioDestinationNode::provideInput):
        * Modules/webaudio/AudioScheduledSourceNode.cpp:
        (WebCore::AudioScheduledSourceNode::noteOn):

2012-07-03  Mark Hahnenberg  <mhahnenberg@apple.com>

        <rdar://problem/11231897> NFX: Entering Netflix while a match song is playing caused an AppleTV crash

        Merge r121381

    2012-06-25  Mark Hahnenberg  <mhahnenberg@apple.com>

        JSLock should be per-JSGlobalData
        https://bugs.webkit.org/show_bug.cgi?id=89123

        Reviewed by Geoffrey Garen.

        No new tests. Current regression tests are sufficient.

        Changed all sites that used JSLock to instead use the new JSLockHolder
        and pass in the correct JS context that the code is about to interact with that 
        needs protection. Also added a couple JSLocks to places that didn't already 
        have it that needed it.

        * bindings/js/GCController.cpp:
        (WebCore::collect):
        (WebCore::GCController::garbageCollectSoon):
        (WebCore::GCController::garbageCollectNow):
        (WebCore::GCController::discardAllCompiledCode):
        * bindings/js/JSCustomSQLStatementErrorCallback.cpp:
        (WebCore::JSSQLStatementErrorCallback::handleEvent):
        * bindings/js/JSCustomVoidCallback.cpp:
        (WebCore::JSCustomVoidCallback::handleEvent):
        * bindings/js/JSCustomXPathNSResolver.cpp:
        (WebCore::JSCustomXPathNSResolver::lookupNamespaceURI):
        * bindings/js/JSErrorHandler.cpp:
        (WebCore::JSErrorHandler::handleEvent):
        * bindings/js/JSEventCustom.cpp:
        (WebCore::toJS):
        * bindings/js/JSEventListener.cpp:
        (WebCore::JSEventListener::handleEvent):
        * bindings/js/JSInjectedScriptHostCustom.cpp:
        (WebCore::InjectedScriptHost::nodeAsScriptValue):
        (WebCore::JSInjectedScriptHost::inspectedObject):
        * bindings/js/JSInjectedScriptManager.cpp:
        (WebCore::InjectedScriptManager::createInjectedScript):
        (WebCore::InjectedScriptManager::canAccessInspectedWindow):
        * bindings/js/JSLazyEventListener.cpp:
        (WebCore::JSLazyEventListener::initializeJSFunction):
        * bindings/js/JSMainThreadExecState.h:
        (WebCore::JSMainThreadExecState::evaluate):
        * bindings/js/JSMutationCallbackCustom.cpp:
        (WebCore::JSMutationCallback::handleEvent):
        * bindings/js/JSNodeFilterCondition.cpp:
        (WebCore::JSNodeFilterCondition::acceptNode):
        * bindings/js/JSRequestAnimationFrameCallbackCustom.cpp:
        (WebCore::JSRequestAnimationFrameCallback::handleEvent):
        * bindings/js/JavaScriptCallFrame.cpp:
        (WebCore::JavaScriptCallFrame::evaluate):
        * bindings/js/PageScriptDebugServer.cpp:
        (WebCore::PageScriptDebugServer::recompileAllJSFunctions):
        * bindings/js/ScheduledAction.cpp:
        (WebCore::ScheduledAction::executeFunctionInContext):
        * bindings/js/ScriptCachedFrameData.cpp:
        (WebCore::ScriptCachedFrameData::ScriptCachedFrameData):
        (WebCore::ScriptCachedFrameData::restore):
        (WebCore::ScriptCachedFrameData::clear):
        * bindings/js/ScriptController.cpp:
        (WebCore::ScriptController::evaluateInWorld):
        (WebCore::ScriptController::clearWindowShell):
        (WebCore::ScriptController::initScript):
        (WebCore::ScriptController::updateDocument):
        (WebCore::ScriptController::cacheableBindingRootObject):
        (WebCore::ScriptController::bindingRootObject):
        (WebCore::ScriptController::windowScriptNPObject):
        (WebCore::ScriptController::jsObjectForPluginElement):
        (WebCore::ScriptController::clearScriptObjects):
        * bindings/js/ScriptControllerMac.mm:
        (WebCore::ScriptController::windowScriptObject):
        * bindings/js/ScriptDebugServer.cpp:
        (WebCore::ScriptDebugServer::dispatchDidPause):
        * bindings/js/ScriptEventListener.cpp:
        (WebCore::eventListenerHandlerBody):
        (WebCore::eventListenerHandlerLocation):
        * bindings/js/ScriptFunctionCall.cpp:
        (WebCore::ScriptCallArgumentHandler::appendArgument):
        (WebCore::ScriptFunctionCall::call):
        (WebCore::ScriptFunctionCall::construct):
        (WebCore::ScriptCallback::call):
        * bindings/js/ScriptObject.cpp:
        (WebCore::ScriptGlobalObject::set):
        (WebCore::ScriptGlobalObject::get):
        (WebCore::ScriptGlobalObject::remove):
        * bindings/js/ScriptValue.cpp:
        (WebCore::ScriptValue::getString):
        (WebCore::ScriptValue::toInspectorValue):
        * bindings/js/WorkerScriptController.cpp:
        (WebCore::WorkerScriptController::~WorkerScriptController):
        (WebCore::WorkerScriptController::initScript):
        (WebCore::WorkerScriptController::evaluate):
        (WebCore::WorkerScriptController::disableEval):
        * bindings/objc/WebScriptObject.mm:
        (_didExecute):
        (-[WebScriptObject callWebScriptMethod:withArguments:]):
        (-[WebScriptObject evaluateWebScript:]):
        (-[WebScriptObject setValue:forKey:]):
        (-[WebScriptObject valueForKey:]):
        (-[WebScriptObject removeWebScriptKey:]):
        (-[WebScriptObject hasWebScriptKey:]):
        (-[WebScriptObject stringRepresentation]):
        (-[WebScriptObject webScriptValueAtIndex:]):
        (-[WebScriptObject setWebScriptValueAtIndex:value:]):
        (+[WebScriptObject _convertValueToObjcValue:originRootObject:rootObject:]):
        * bindings/scripts/CodeGeneratorJS.pm:
        (GenerateCallbackImplementation):
        * bindings/scripts/test/JS/JSTestCallback.cpp:
        (WebCore::JSTestCallback::callbackWithNoParam):
        (WebCore::JSTestCallback::callbackWithClass1Param):
        (WebCore::JSTestCallback::callbackWithClass2Param):
        (WebCore::JSTestCallback::callbackWithStringList):
        (WebCore::JSTestCallback::callbackWithBoolean):
        (WebCore::JSTestCallback::callbackRequiresThisToPass):
        * bridge/NP_jsobject.cpp:
        (_NPN_InvokeDefault):
        (_NPN_Invoke):
        (_NPN_Evaluate):
        (_NPN_GetProperty):
        (_NPN_SetProperty):
        (_NPN_RemoveProperty):
        (_NPN_HasProperty):
        (_NPN_HasMethod):
        (_NPN_Enumerate):
        (_NPN_Construct):
        * bridge/c/c_class.cpp:
        (JSC::Bindings::CClass::~CClass):
        (JSC::Bindings::CClass::methodsNamed):
        (JSC::Bindings::CClass::fieldNamed):
        * bridge/c/c_instance.cpp:
        (JSC::Bindings::CInstance::moveGlobalExceptionToExecState):
        (JSC::Bindings::CInstance::invokeMethod):
        (JSC::Bindings::CInstance::invokeDefaultMethod):
        (JSC::Bindings::CInstance::invokeConstruct):
        (JSC::Bindings::CInstance::getPropertyNames):
        * bridge/c/c_runtime.cpp:
        (JSC::Bindings::CField::valueFromInstance):
        (JSC::Bindings::CField::setValueToInstance):
        * bridge/c/c_utility.cpp:
        (JSC::Bindings::convertValueToNPVariant):
        (JSC::Bindings::convertNPVariantToValue):
        * bridge/jni/jni_jsobject.mm:
        (JavaJSObject::call):
        (JavaJSObject::eval):
        (JavaJSObject::getMember):
        (JavaJSObject::setMember):
        (JavaJSObject::removeMember):
        (JavaJSObject::getSlot):
        (JavaJSObject::setSlot):
        (JavaJSObject::toString):
        (JavaJSObject::convertValueToJObject):
        (JavaJSObject::convertJObjectToValue):
        * bridge/jni/jni_objc.mm:
        (JSC::Bindings::dispatchJNICall):
        * bridge/jni/jsc/JNIUtilityPrivate.cpp:
        (JSC::Bindings::convertValueToJValue):
        * bridge/jni/jsc/JavaClassJSC.cpp:
        (JavaClass::JavaClass):
        (JavaClass::~JavaClass):
        * bridge/jni/jsc/JavaInstanceJSC.cpp:
        (JavaInstance::stringValue):
        * bridge/jni/jsc/JavaMethodJSC.cpp:
        (appendClassName):
        (JavaMethod::signature):
        * bridge/jni/jsc/JavaStringJSC.h:
        (JSC::Bindings::JavaString::JavaString):
        (JSC::Bindings::JavaString::~JavaString):
        (JSC::Bindings::JavaString::utf8):
        (JSC::Bindings::JavaString::init):
        * bridge/jsc/BridgeJSC.cpp:
        (JSC::Bindings::Instance::createRuntimeObject):
        (JSC::Bindings::Instance::newRuntimeObject):
        * bridge/objc/objc_instance.mm:
        (ObjcInstance::moveGlobalExceptionToExecState):
        (ObjcInstance::invokeObjcMethod):
        (ObjcInstance::invokeDefaultMethod):
        (ObjcInstance::setValueOfUndefinedField):
        (ObjcInstance::getValueOfUndefinedField):
        * bridge/objc/objc_runtime.mm:
        (JSC::Bindings::ObjcField::valueFromInstance):
        (JSC::Bindings::ObjcField::setValueToInstance):
        * bridge/objc/objc_utility.mm:
        (JSC::Bindings::convertValueToObjcValue):
        (JSC::Bindings::convertNSStringToString):
        (JSC::Bindings::convertObjcValueToValue):
        * bridge/qt/qt_instance.cpp:
        (JSC::Bindings::QtInstance::~QtInstance):
        (JSC::Bindings::QtInstance::getQtInstance):
        (JSC::Bindings::QtInstance::newRuntimeObject):
        * bridge/qt/qt_pixmapruntime.cpp:
        (JSC::Bindings::QtPixmapInstance::createPixmapRuntimeObject):
        * bridge/qt/qt_runtime.cpp:
        (JSC::Bindings::convertValueToQVariant):
        (JSC::Bindings::convertQVariantToValue):
        (JSC::Bindings::QtRuntimeMetaMethod::call):
        (JSC::Bindings::QtRuntimeConnectionMethod::call):
        * bridge/qt/qt_runtime_qt4.cpp:
        (JSC::Bindings::convertValueToQVariant):
        (JSC::Bindings::convertQVariantToValue):
        (JSC::Bindings::QtRuntimeMetaMethod::call):
        (JSC::Bindings::QtRuntimeConnectionMethod::call):
        * bridge/runtime_root.cpp:
        (JSC::Bindings::RootObject::gcProtect):
        (JSC::Bindings::RootObject::gcUnprotect):
        * html/HTMLCanvasElement.cpp:
        (WebCore::HTMLCanvasElement::createImageBuffer):
        * html/HTMLImageLoader.cpp:
        (WebCore::HTMLImageLoader::notifyFinished):
        * plugins/PluginView.cpp:
        (WebCore::PluginView::start):
        (WebCore::PluginView::stop):
        (WebCore::PluginView::performRequest):
        (WebCore::PluginView::npObject):
        (WebCore::PluginView::privateBrowsingStateChanged):
        * plugins/blackberry/PluginViewBlackBerry.cpp:
        (WebCore::PluginView::dispatchNPEvent):
        (WebCore::PluginView::setNPWindowIfNeeded):
        (WebCore::PluginView::platformStart):
        (WebCore::PluginView::getWindowInfo):
        * plugins/efl/PluginViewEfl.cpp:
        (WebCore::PluginView::dispatchNPEvent):
        * plugins/gtk/PluginViewGtk.cpp:
        (WebCore::PluginView::dispatchNPEvent):
        (WebCore::PluginView::handleKeyboardEvent):
        (WebCore::PluginView::handleMouseEvent):
        (WebCore::PluginView::setNPWindowIfNeeded):
        (WebCore::PluginView::platformStart):
        * plugins/mac/PluginViewMac.mm:
        (WebCore::PluginView::setNPWindowIfNeeded):
        (WebCore::PluginView::dispatchNPEvent):
        * plugins/qt/PluginViewQt.cpp:
        (WebCore::PluginView::dispatchNPEvent):
        (WebCore::PluginView::setNPWindowIfNeeded):
        (WebCore::PluginView::platformStart):
        * plugins/win/PluginViewWin.cpp:
        (WebCore::PluginView::dispatchNPEvent):
        (WebCore::PluginView::handleKeyboardEvent):
        (WebCore::PluginView::handleMouseEvent):
        (WebCore::PluginView::setNPWindowRect):
        * testing/js/WebCoreTestSupport.cpp:
        (WebCoreTestSupport::injectInternalsObject):
        (WebCoreTestSupport::resetInternalsObject):
        * xml/XMLHttpRequest.cpp:
        (WebCore::XMLHttpRequest::dropProtection):

2012-07-03  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/11797726> generate-export-file needs to include macros from Assertions.h to define LOG_DISABLED

        Reviewed by Paul Knight.

        We can't just add "-include wtf/Assertions.h" when preprocessing
        WebCore.exp.in since that adds a bunch of code (like typedefs)
        to the output that causes linking to fail with unknown symbols.

        Instead, we invoke the preprocessor a second time to get a list
        of macros in the form of #define statements, then send that
        through the preprocessor when processing WebCore.exp.in.

        * WebCore.exp.in: Revert change in r1135225.
        * generate-export-file:
        (preprocessorMacros): Add.  Move @args related to including
        headers into this method.  Include wtf/Assertions.h to
        wtf/Platform.h as a header to process.  Invoke the compiler
        with magic -dM switch to output a list of preprocessor macro
        #define statements to preprocess WebCore.exp.in in process().
        (process): Call preprocessorMacros() to get list of #define
        statements.  Print out $macros as part of preprocessing
        WebCore.exp.in.

2012-07-03  Joseph Pecoraro  <pecoraro@apple.com>

        Build fix for r1135181. iOS WebKit does special processing of its exp files.

        <rdar://problem/11795496> Innsbruck11A115: WebCore-1607 fails to build: Undefined symbols for architecture arm64

        Rubber-stamped by Paul "The Builder" Knight.

        * WebCore.exp.in:

2012-07-02  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/11135525> WebView._pageCount returning 1 for vertical-rl documents with width: 100% specified on the document element

        Merged TOT WebKit r121728.

    2012-07-02  Dan Bernstein  <mitz@apple.com>

        Column height and count calculation ignores most overflow
        https://bugs.webkit.org/show_bug.cgi?id=90392

        Reviewed by Dean Jackson.

        Test: fast/multicol/overflow-content.html

        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::relayoutForPagination): Changed to compute the overflow from children
        and use the layout overflow height rather the content height.

2012-07-02  Chris Willmore  <cwillmore@apple.com>

        <rdar://problem/11385127> URL copied from Safari has style

        supportedPasteboardTypesForCurrentSelection should be consulted when
        cutting/copying as well as pasting.

        Reviewed by David Kilzer.

        * platform/ios/PasteboardIOS.mm:
        (WebCore::Pasteboard::writeSelection): now makes sure that
        WebArchivePboardType is present in supported pasteboard types before
        writing web archive representation to pasteboard.

2012-07-02  Justin Garcia  <justin.garcia@apple.com>

        Need a short description and bug URL (OOPS!)

        Reviewed by Pratik Solanki.

        No new tests. (OOPS!)

        * platform/ios/PasteboardIOS.mm:
        (WebCore::Pasteboard::writeSelection):

2012-07-02  Benjamin Poulain  <bpoulain@apple.com>

        <rdar://problem/11746350> Log channels are initialized but unused on Release builds
        Merge OpenSource r121707.

    2012-07-02  Benjamin Poulain  <bpoulain@apple.com>

        Do not do any logging initialization when logging is disabled
        https://bugs.webkit.org/show_bug.cgi?id=90228

        Reviewed by Simon Fraser.

        Initializating of the logging channels was taking time on startup. When logging is disabled
        (and the LOG macro does nothing), we should aslo disable logging channels and initialization.

        This patch #ifdef the Logging initialization with the macro LOG_DISABLED.

        * WebCore.exp.in:
        * make-export-file-generator: Explicitely adds Assertions.h so that LOG_DISABLED is defined.
        * platform/Logging.cpp:
        * platform/Logging.h:
        * platform/blackberry/LoggingBlackBerry.cpp:
        * platform/efl/LoggingEfl.cpp:
        * platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.cpp:
        * platform/gtk/LoggingGtk.cpp:
        * platform/mac/LoggingMac.mm:
        * platform/network/soup/ResourceHandleSoup.cpp:
        (WebCore::ensureSessionIsInitialized):
        * platform/qt/LoggingQt.cpp:
        * platform/win/LoggingWin.cpp:
        * platform/wx/LoggingWx.cpp:

2012-07-02  Tim Horton  <timothy_horton@apple.com>

        <rdar://problem/11744082> REGRESSION(Sundance): Photos flash when swiping through flickr.com lightbox

        Merged ToT WebKit r121708.

    2012-07-02  Tim Horton  <timothy_horton@apple.com>

        Compositing layer sync should cause deferred repaints to be fired immediately
        https://bugs.webkit.org/show_bug.cgi?id=90401
        <rdar://problem/11792028>

        Reviewed by Simon Fraser and Antti Koivisto.

        If we sync compositing layers and allow the repaint to be deferred, there is time for a
        visible flash to occur. Instead, stop the deferred repaint timer and repaint immediately.

        No new tests, configuration and timing dependent.

        * page/FrameView.cpp:
        (WebCore::FrameView::syncCompositingStateForThisFrame):
        (WebCore::FrameView::checkStopDelayingDeferredRepaints):
        (WebCore::FrameView::stopDelayingDeferredRepaints): Split off from checkStopDelayingDeferredRepaints.
        * page/FrameView.h:
        (FrameView): Add stopDelayingDeferredRepaints.

2012-07-02  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/11787069> In vertical writing modes, child following float-clearing block has incorrect logical top

        Merged TOT WebKit r121697.

    2012-07-02  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/11787030> In vertical writing modes, child following float-clearing block has incorrect logical top
        https://bugs.webkit.org/show_bug.cgi?id=90359

        Reviewed by Anders Carlsson.

        Test: fast/writing-mode/logical-height-after-clear.html

        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::clearFloatsIfNeeded): Changed to use logicalTop() and logicalHeight()
        instead of y() and height().

2012-07-02  Andy Estes  <aestes@apple.com>

        <rdar://problem/11574738> LegacyNumberInputType.{h|cpp} need to be updated as NumberInputType.{h|cpp} has been

        Reviewed by David Kilzer.

        Original patch by David Kilzer.

        Instead of keeping a copy of NumberInputType's implementation with the
        small number of changes we need for legacy support, make
        LegacyNumberInputType be a subclass of NumberInputType and override the
        methods where a behavior difference is needed.

        The plan (<rdar://problem/9633835>) is to remove LegacyNumberInputType
        in Innsbruck.

        * html/LegacyNumberInputType.cpp:
        (WebCore::LegacyNumberInputType::isTextType): Override NumberInputType's
        implementation to behave like a text field rather than a number field.
        (WebCore::LegacyNumberInputType::typeMismatchFor): Ditto.
        (WebCore::LegacyNumberInputType::typeMismatch): Ditto.
        (WebCore::LegacyNumberInputType::supportsRangeLimitation): Ditto.
        (WebCore::LegacyNumberInputType::visibleValue): Ditto.
        (WebCore::LegacyNumberInputType::convertFromVisibleValue): Ditto.
        (WebCore::LegacyNumberInputType::isAcceptableValue): Ditto.
        (WebCore::LegacyNumberInputType::sanitizeValue): Ditto.
        (WebCore::LegacyNumberInputType::hasUnacceptableValue): Ditto.
        * html/LegacyNumberInputType.h:
        (WebCore::LegacyNumberInputType::LegacyNumberInputType):
        (LegacyNumberInputType):
        * html/NumberInputType.h:
        (NumberInputType): Make this protected so that LegacyNumberInputType's
        ctor can call it.

2012-07-01  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/11785751> Non-BMP characters in vertical text appear as missing glyphs

        Merged TOT WebKit r121645.

    2012-07-01  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/11785743> [mac] Non-BMP characters in vertical text appear as missing glyphs
        https://bugs.webkit.org/show_bug.cgi?id=90349

        Reviewed by Dean Jackson.

        Test: platform/mac/fast/text/vertical-surrogate-pair.html

        * platform/graphics/mac/GlyphPageTreeNodeMac.cpp:
        (WebCore::GlyphPage::fill): When calling wkGetVerticalGlyphsForCharacters or
        CTFontGetGlyphsForCharacters with a buffer consisting of surrogate pair, account for those
        functions’ behavior of placing glyphs at indices corresponding to the first character of
        each pair.

2012-07-01  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/11784221> REGRESSION (r95391): Arabic shaping is incorrect if ZWNJ exist

        Merged TOT WebKit r121643.

    2012-07-01  Kenichi Ishibashi  <bashi@chromium.org>

        Arabic shaping is incorrect if ZWNJ exist
        https://bugs.webkit.org/show_bug.cgi?id=89843

        Reviewed by Dan Bernstein.

        mac port treats ZWJ (zero-width-joiner) and ZWNJ (zero-width-non-joiner) as a part of combining
        character sequence. This could cause a problem when the font doesn't have glyph mapping of ZWJ and ZWNJ.
        Suppose the text to be rendered is "U+0645(MEEM) U+06CC(FARSI YEH) U+200C(ZWNJ)". In this case, U+0645
        and U+06CC are rendered in isolated form if the font doesn't have a glyph for ZWNJ. They should be joined.

        This patch changes handling of ZWJ and ZWNJ. Treats ZWJ and ZWNJ as base characters so that a complex text
        run isn't separate at the point of ZWJ and ZWNJ even the font doesn't contain glyphs for them.
        If ComplexTextController finds ZWJ, it doesn't split the current complex text run.

        Test: platform/mac/fast/text/arabic-zwj-and-zwnj.html

        * platform/graphics/mac/ComplexTextController.cpp:
        (WebCore::advanceByCombiningCharacterSequence): Don't treat ZWJ and ZWNJ as a part of combining character sequence.
        (WebCore::ComplexTextController::collectComplexTextRuns): Set fontData to nextFontData if the baseCharacter is ZWJ.

2012-06-30  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/11465600> Inception: Layer content paints slowly and/or disjointedly

        Reviewed by Joseph Pecoraro.

        Override +[CATiledLayer prefetchedTiles] to return '2', which tells CA
        to prefetch a border of two tiles around the tile being drawn. This results
        in more tiles being shown at a time, which reduces flashing.
        
        '2' was chosen after testing the iTunes store content in landscape on iPad.

        * platform/graphics/mac/WebTiledLayer.mm:
        (+[WebTiledLayer prefetchedTiles]):

2012-06-30  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/11740758> 10A344: Camera preview fails after take a photo

        Reviewed by Yongjun Zhang.

        In <rdar://problem/6075678>, we added two new fields to BitmapImage - m_originalSize and
        m_originalSizeRespectingOrientation. However, we failed to initialize these fields in the
        BitmapImage constructor that takes a CGImageRef which caused this bug. Fix the bug by
        initializing these fields in the ctor.

        * platform/graphics/cg/ImageCG.cpp:
        (WebCore::BitmapImage::BitmapImage):

2012-06-30  Antti Koivisto  <antti@apple.com>

        <rdar://problem/11488393> cursor overlaps text in search field

        Reviewed by Dan Bernstein and Yongjun Zhang.

        In FrameSelection::revealSelection both the PLATFORM(IOS) and the normal WebKit code paths for setting scroll position
        were active (probably a merge error). Scrolling triggered by editing needs to enable adjustForPurpleCaretWhenScrolling 
        mode. This was not done on the normal path, leading to inconsistent results.

        * editing/FrameSelection.cpp:
        (WebCore::FrameSelection::revealSelection):
        
            Add the missing call to updateAppearance() to the iOS path. It is normally a no-op but it is enabled at least for Safari
            find-on-page using an SPI.
            
            RenderObject::scrollRectToVisible just calls RenderLayer::scrollRectToVisible after getting the enclosingLayer() so
            the paths are equivalent.

        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::updateScrollInfoAfterLayout):

2012-06-29  Simon Fraser  <simon.fraser@apple.com>

        Part of:
        <rdar://problem/11667461> Swiping the showcase is unresponsive and scrolling freezes when the showcase animates in the new iTunes Store (flushLayers() is slow)

        Reviewed by Dean Jackson and Anders Carlsson.

        requiresCompositingForPosition() set the m_reevaluateCompositingAfterLayout flag
        for unparented renderers before we'd checked for position fixed on iOS, which caused
        a later updateCompositingLayers() to always set the checkForHierarchyUpdate flag.
        
        Fix by moving the check for fixed position near the top of the method.
        
        Currently the checkForHierarchyUpdate will be true anyway for other reasons,
        but this bug prevents future optimization.

        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::updateCompositingLayers):

2012-06-29  Jon Lee  <jonlee@apple.com>

        <rdar://problem/11058359> Preemptively clearing of the page cache crashes MobileSafari at WebCore::FrameLoader::transitionToCommitted when navigating back/forward under speculative memory pressure

        Reviewed by Brady Eidson.

        In an attempt to reduce likelihood of jettisoning of MobileSafari, changeset 1098565 tries to pre-emptively prune the existing page cache
        before adding the current page to the page cache. A couple problems arose from this:

        1) Because this happened in commitProvisionalLoad(), the CachedPage instance is kept alive by the RefPtr, and so when we call
        transitionToCommitted(), it's contents are null, causing the crash.

        2) Because the aforementioned changeset also reduces the page cache capacity to 1, pruning removes all of the page cache entries, _including_
        the one we are trying to navigate to. This both hits performance and does not alleviate memory pressure, since we will touch the networking layer
        to reload the page and load all of the same assets.

        The fix is to make sure we aren't navigating to a page cache, before pre-emptively pruning the page cache.

        * history/PageCache.cpp:
        (WebCore::PageCache::canCache): It's not appropriate for this function to prune the page cache. Move it out to FrameLoader::commitProvisionalLoad.
        However, we still need to return false if we received the memory pressure signal.
        * loader/FrameLoader.cpp:
        (WebCore): Added a static variable representing the system memory threshold at we are speculatively at memory pressure.
        (WebCore::FrameLoader::commitProvisionalLoad): Pre-emptively prune the page cache only if we are not navigating to a cached page. Given
        that the page cache capacity is 1 for many iOS devices, this is correct, because 1) if we are going to a cached page, we don't want to prune
        the 1 item we are going to, and 2) if we are going to a new page, the current page we're at will be cached, and the current page in the
        page cache will be pruned anyway. In the case of memory pressure, we will get rid of that entry before we make a new one, whereas in a normal
        memory situation we will make the new entry first. For devices with larger page cache capacity, we will not be as aggressive in pruning when we
        navigate to a cached page.
            Also, refactored some of the logic for forcing a synchronous prune. The older code, under real memory pressure, would have prunedToCapacityNow()
        twice.

2012-06-29  Brady Eidson  <beidson@apple.com>

        <rdar://problem/11740471> REGRESSION (puzzlebox r1131032) Remove WebKit workaround for lack of Vary: header support

        For security reasons we had to disable caching of any resource with the Vary: header in r1131032.

        This caused a massive performance regression for tests that relied on the CFNetwork disk cache
        such as with scenarios important to the Mobile iTunes/App stores.

        Per <rdar://problem/11740455> and as of Sundance 10A348, CFNetwork now supports the Vary: header
        in Sundance so we can restore normal disk caching of such resources.

        Reviewed by Jon Lee.

        * platform/network/cf/ResourceHandleCFNet.cpp:
        (WebCore::willCacheResponse): Now that CFNetwork respects the Vary: header on iOS, we no longer need to flatly
          deny caching any resource with the Vary: header and therefore can restore proper caching performance.

2012-06-29  Kiran Muppala  <cmuppala@apple.com>

        <rdar://problem/11672737> Gathering message layout statistics takes longer on Sundance vs Hoodoo

        Reviewed by Simon Fraser.

        [DOMNode(DOMNodeExtensions) boundingBox] was slower on Sundance because the underlying call
        to RenderObject::absoluteBoundingBoxRect was taking transforms into account where on Hoodoo
        it didn't.  This was caused by the default value of 'useTransforms' argument changing from
        'false' to 'true' by https://bugs.webkit.org/show_bug.cgi?id=69009.

        * bindings/objc/DOM.mm:
        (-[DOMNode boundingBox]): Explicitly pass 'false' for the 'useTransforms' argument of
        RenderObject::absoluteBoundingBoxRect.

2012-06-28  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/11771731> Improve the compositing logging output

        Merge WebKit ToT r121461.

    2012-06-28  Simon Fraser  <simon.fraser@apple.com>
    
            Improve compositing logging output
            https://bugs.webkit.org/show_bug.cgi?id=90199
    
            Reviewed by Tim Horton (w00t!).
    
            Improve the compositing logging channel output in a few
            useful ways:
            1. Report memory use, rather than megapixels
            2. Show element class names
    
            * platform/graphics/GraphicsLayer.cpp:
            (WebCore::GraphicsLayer::backingStoreMemoryEstimate):
            * platform/graphics/GraphicsLayer.h:
            (GraphicsLayer):
            * platform/graphics/ca/GraphicsLayerCA.cpp:
            (WebCore::GraphicsLayerCA::backingStoreMemoryEstimate):
            * platform/graphics/ca/GraphicsLayerCA.h:
            (GraphicsLayerCA):
            * rendering/RenderLayerBacking.cpp:
            (WebCore::RenderLayerBacking::nameForLayer):
            (WebCore::RenderLayerBacking::backingStoreMemoryEstimate):
            * rendering/RenderLayerBacking.h:
            (RenderLayerBacking):
            * rendering/RenderLayerCompositor.cpp:
            (WebCore::RenderLayerCompositor::RenderLayerCompositor):
            (WebCore::RenderLayerCompositor::updateCompositingLayers):
            (WebCore::RenderLayerCompositor::logLayerInfo):
            (WebCore::RenderLayerCompositor::updateOverflowControlsLayers):
            * rendering/RenderLayerCompositor.h:
            (RenderLayerCompositor):

2012-06-28  Antti Koivisto  <antti@apple.com>

        <rdar://problem/11759092> Don't malloc RenderGeometryMap steps individually (90074)

        Merge open source r121446.

    2012-06-28  Antti Koivisto  <antti@apple.com>

        Don't malloc RenderGeometryMap steps individually
        https://bugs.webkit.org/show_bug.cgi?id=90074

        Reviewed by Simon Fraser.

        Mallocs and frees for steps under RenderGeometryMap::pus/popMappingsToAncestor can total ~2% of the profile when animating transforms.

        * rendering/RenderGeometryMap.cpp:
        (WebCore):
        (WebCore::RenderGeometryMap::absolutePoint):
        (WebCore::RenderGeometryMap::absoluteRect):
        (WebCore::RenderGeometryMap::mapToAbsolute):
        (WebCore::RenderGeometryMap::push):
        (WebCore::RenderGeometryMap::pushView):
        (WebCore::RenderGeometryMap::popMappingsToAncestor):
        * rendering/RenderGeometryMap.h:
        (WebCore):
        (WebCore::RenderGeometryMapStep::RenderGeometryMapStep):
        
            Move to header.

        (RenderGeometryMapStep):
        (RenderGeometryMap):
        
            Make the step vector hold RenderGeometryMapSteps instead of RenderGeometryMapStep*'s.

        (WTF):
        
            Give RenderGeometryMapSteps SimpleClassVectorTraits. This is needed for dealing with OwnPtr in the struct (and makes it faster too).
            The type is simple enought to move by memcpy.

2012-06-27  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/11733945> QuickLook.h:36:16: error: 'objc_class' is deprecated [-Werror,-Wdeprecated-declarations]

        Reviewed by Andy Estes.

        * platform/network/ios/QuickLook.h: Stop trying to be fancy by
        pre-declaring structs for Class and id for C++-only source code.
        Just import <objc/objc-runtime.h> and let it work its magic.
        * platform/network/ios/QuickLook.mm: Remove now-redundant import
        of <objc/objc-runtime.h>.

2012-06-27  Benjamin Poulain  <bpoulain@apple.com>

        Add back CSS Flexbox temporarily

        * ChangeLog:
        * Configurations/FeatureDefines.xcconfig:
        * css/CSSComputedStyleDeclaration.cpp:
        (WebCore):
        (WebCore::CSSComputedStyleDeclaration::getPropertyCSSValue):
        * css/CSSParser.cpp:
        (WebCore::isValidKeywordPropertyAndValue):
        (WebCore::isKeywordPropertyID):
        (WebCore::CSSParser::parseValue):
        * css/CSSPrimitiveValueMappings.h:
        (WebCore::CSSPrimitiveValue::CSSPrimitiveValue):
        * css/CSSProperty.cpp:
        (WebCore::CSSProperty::isInheritedProperty):
        * css/CSSPropertyNames.in:
        * css/CSSValueKeywords.in:
        * css/StyleBuilder.cpp:
        (WebCore::ApplyPropertyLineHeight::StyleBuilder::StyleBuilder):
        * css/StylePropertySet.cpp:
        (WebCore::StylePropertySet::getPropertyValue):
        (WebCore::StylePropertySet::asText):
        * css/StylePropertyShorthand.cpp:
        (WebCore::webkitFlexFlowShorthand):
        (WebCore::shorthandForProperty):
        * css/StylePropertyShorthand.h:
        (WebCore):
        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::collectMatchingRulesForList):
        * page/animation/CSSPropertyAnimation.cpp:
        (WebCore::CSSPropertyAnimation::ensurePropertyMap):
        * rendering/RenderObject.cpp:
        (WebCore::RenderObject::createObject):
        * rendering/style/RenderStyleConstants.h:

2012-06-26  Justin Garcia  <justin.garcia@apple.com>

        <rdar://problem/10946675> API: typingAttributes property for text views

        Reviewed by Joseph Pecoraro.
        
        Exposing EditingStyle::styleAtSelectionStart. It’s the typing style plus the style at the current 
        selection, which is the typingAttributes API we are adding.

        * WebCore.exp.in:
        * page/Frame.h:
        (Frame):
        * page/ios/FrameIOS.mm:
        (WebCore::Frame::styleAtSelectionStart):
        (WebCore):

2012-06-27  Jon Lee  <jonlee@apple.com>

        <rdar://problem/11552951> REGRESSION (Sundance, iPhone): <textarea>'s shadow subtree causes multi-line text to register as autosized nodes

        Reviewed by David Kilzer.

        * rendering/RenderBlock.cpp:
        (WebCore::resizeTextPermitted): Text areas now have a shadow tree, and the text was being added
        as autosizable nodes. The check to see if we were in a text form element was incorrect. We should
        check to see if we are in a shadow tree, since the element depth in a shadow tree is arbitrary,
        and any of those elements can be HTML elements.

2012-06-22  Lucas Forschler  <lforschler@apple.com>

    Rollout 121034
    This was 120954 from trunk.
    
2012-06-22  Lucas Forschler  <lforschler@apple.com>

    Merge 120954

    2012-06-21  Brady Eidson  <beidson@apple.com>

            <rdar://problem/11718988> and https://bugs.webkit.org/show_bug.cgi?id=89673
            showModalDialog fix creates risk of never returning from RunLoop::performWork, potentially blocking other event sources

            In case handling a function on the queue places additional functions on the queue, we should
            limit the number of functions each invocation of performWork() performs so it can return and
            other event sources have a chance to spin.

            The showModalDialog fix in question is http://trac.webkit.org/changeset/120879

            Reviewed by Darin Adler and Anders Carlson.

            * platform/RunLoop.cpp:
            (WebCore::RunLoop::performWork): If there are only N functions in the queue when performWork is called,
              only handle up to N functions before returning. Any additional functions will be handled the next time
              the runloop spins.

2012-06-12  Lucas Forschler  <lforschler@apple.com>

    Merge 120364

    2012-06-14  Andreas Kling  <kling@webkit.org>

            Crashes below IconDatabase::performPendingRetainAndReleaseOperations().
            <http://webkit.org/b/88846>
            <rdar://problem/11629106>

            Reviewed by Brady Eidson.

            Put isolatedCopy() strings in the retain/release operation queues to make sure it's safe
            for secondary threads to ref/deref them in performPendingRetainAndReleaseOperations().
            Also added assertions as appropriate.

            * loader/icon/IconDatabase.cpp:
            (WebCore::IconDatabase::retainIconForPageURL):
            (WebCore::IconDatabase::releaseIconForPageURL):
            (WebCore::IconDatabase::performPendingRetainAndReleaseOperations):

2012-06-12  Lucas Forschler  <lforschler@apple.com>

    Merge 119739

    2012-06-07  Jer Noble  <jer.noble@apple.com>

            sometimes all slaved videos don't start playing
            https://bugs.webkit.org/show_bug.cgi?id=88553

            Reviewed by Darin Adler.

            Test: media/media-controller-time-clamp.html

            Some PlatformClock classes will occasionally return times < 0 and will
            always return times slightly > duration() when playback has ended.  Clamp
            the value of currentTime() to the specified [0..duration] range.

            * html/MediaController.cpp:
            (MediaController::currentTime):

2012-06-12  Lucas Forschler  <lforschler@apple.com>

    Merge 119644

    2012-06-06  Brady Eidson  <beidson@apple.com>

            <rdar://problem/11575112> and https://bugs.webkit.org/show_bug.cgi?id=88428
            REGRESSION (r115654): Opening many non-English WebArchives shows obvious encoding issues

            Reviewed by Nate Chapin.

            Test: fast/loader/webarchive-encoding-respected.html

            * loader/DocumentLoader.cpp:
            (WebCore::DocumentLoader::commitData): Properly set the main resource encoding from the webarchive.

2012-06-06  Mark Rowe  <mrowe@apple.com>

        Merge r119548.

    2012-06-05  Vitaly Buka  <vitalybuka@chromium.org>

        Special layout handler should be done on top frame being printed.
        https://bugs.webkit.org/show_bug.cgi?id=88201

        Reviewed by Brady Eidson.

        No new tests. Root case is already covered by tests.
        Case described in the issue can be reproduced only by direct call
        to Frame::setPrinting of subframe. Probably it's not possible with
        layout tests.

        * page/Frame.cpp:
        (WebCore::Frame::setPrinting):
        Use shouldUsePrintingLayout to choose proper version of forceLayout().
        (WebCore::Frame::shouldUsePrintingLayout):
        Checks if current frame is the top frame being printed.
        * rendering/RenderView.cpp:
        (WebCore::RenderView::shouldUsePrintingLayout): Forward to Frame.

2012-06-06  Mark Rowe  <mrowe@apple.com>

        Merge r119136.

    2012-05-31  Brady Eidson  <beidson@apple.com>

        <rdar://problem/11544454> and https://bugs.webkit.org/show_bug.cgi?id=87990
        Crashes unregistering DOMWindowProperties while releasing CachedPages

        Reviewed by Jessie Berlin.

        This patch rewrites DOMWindowProperty to always keep direct track of the DOMWindow
        it has registered with and to only ever unregister from that very same DOMWindow.

        No new tests. (While the direct cause of the crash is understood, reproducing it is not)

        * page/DOMWindowProperty.cpp:
        (WebCore::DOMWindowProperty::DOMWindowProperty):
        (WebCore::DOMWindowProperty::~DOMWindowProperty):
        (WebCore::DOMWindowProperty::disconnectFrameForPageCache):
        (WebCore::DOMWindowProperty::reconnectFrameFromPageCache):
        (WebCore::DOMWindowProperty::willDestroyGlobalObjectInCachedFrame):
        (WebCore::DOMWindowProperty::willDestroyGlobalObjectInFrame):
        (WebCore::DOMWindowProperty::willDetachGlobalObjectFromFrame):
        * page/DOMWindowProperty.h:
        (DOMWindowProperty):

2012-06-06  Mark Rowe  <mrowe@apple.com>

        Merge r119274.

    2012-06-01  Beth Dakin  <bdakin@apple.com>

        https://bugs.webkit.org/show_bug.cgi?id=87774
        REGRESSION (r105515): reflection masks are truncated at zoom levels < 1
        -and corresponding-
        <rdar://problem/11387506>

        Reviewed by Simon Fraser.

        paintNinePieceImage() expects un-zoomed results from 
        calculateImageIntrinsicDimensions(). This was previously addressed by having 
        paintNinePieceImage() divide the effective zoom out of the result from 
        calculateImageIntrinsicDimensions(). However, that results in buggy behavior for 
        generated images and images with percentage sizes. In the end it seems best to 
        just send a parameter to calculateImageIntrinsicDimensions() indicating whether 
        the caller wants the result to be scaled by the effective zoom when appropriate.

        * rendering/RenderBoxModelObject.cpp:
        (WebCore::RenderBoxModelObject::calculateImageIntrinsicDimensions):
        (WebCore::RenderBoxModelObject::calculateFillTileSize):
        (WebCore::RenderBoxModelObject::paintNinePieceImage):
        * rendering/RenderBoxModelObject.h:
        (RenderBoxModelObject):

2012-05-31  Tim Horton  <timothy_horton@apple.com>

        Disable CSS regions and exclusions on the Ampere branch
        <rdar://problem/10887709>

        Reviewed by Alexey Proskuryakov.

        Fix mismerge of regions-disabling patch (broke -webkit-print-color-adjust)

        * css/CSSParser.cpp:
        (WebCore::isValidKeywordPropertyAndValue):
        * dom/Document.idl:

2012-05-31  Tim Horton  <timothy_horton@apple.com>

        Add feature defines for web-facing parts of CSS Regions and Exclusions
        https://bugs.webkit.org/show_bug.cgi?id=87442
        <rdar://problem/10887709>

        Reviewed by Dan Bernstein.

        * Configurations/FeatureDefines.xcconfig:
        * GNUmakefile.am:
        * bindings/generic/RuntimeEnabledFeatures.cpp:
        * bindings/generic/RuntimeEnabledFeatures.h:
        (RuntimeEnabledFeatures):
        (WebCore::RuntimeEnabledFeatures::setCSSExclusionsEnabled):
        (WebCore::RuntimeEnabledFeatures::cssExclusionsEnabled):
        * bindings/js/JSCSSRuleCustom.cpp:
        (WebCore::toJS):
        * bindings/objc/DOMCSS.mm:
        (kitClass):
        * css/CSSComputedStyleDeclaration.cpp:
        (WebCore::CSSComputedStyleDeclaration::getPropertyCSSValue):
        * css/CSSParser.cpp:
        (WebCore::isSimpleLengthPropertyID):
        (WebCore::isValidKeywordPropertyAndValue):
        (WebCore::isKeywordPropertyID):
        (WebCore::CSSParser::parseValue):
        (WebCore::CSSParser::detectAtToken):
        * css/CSSProperty.cpp:
        (WebCore::CSSProperty::isInheritedProperty):
        * css/CSSPropertyNames.in:
        * css/CSSRule.cpp:
        (WebCore::CSSRule::cssText):
        (WebCore::CSSRule::destroy):
        (WebCore::CSSRule::reattach):
        * css/CSSRule.h:
        (WebCore::CSSRule::isRegionRule):
        * css/CSSRule.idl:
        * css/StyleBuilder.cpp:
        (WebCore::StyleBuilder::StyleBuilder):
        * css/StylePropertySet.cpp:
        (WebCore::StylePropertySet::getPropertyValue):
        (WebCore::StylePropertySet::asText):
        * css/StylePropertyShorthand.cpp:
        (WebCore::shorthandForProperty):
        * css/StylePropertyShorthand.h:
        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::collectMatchingRulesForList):
        * css/StyleRule.cpp:
        (WebCore::StyleRuleBase::destroy):
        (WebCore::StyleRuleBase::copy):
        (WebCore::StyleRuleBase::createCSSOMWrapper):
        * css/WebKitCSSRegionRule.cpp:
        * css/WebKitCSSRegionRule.h:
        * css/WebKitCSSRegionRule.idl:
        * dom/Document.cpp:
        * dom/Document.h:
        * dom/Document.idl:
        * page/DOMWindow.idl:
        * page/Settings.cpp:
        (WebCore::Settings::Settings):
        * page/Settings.h:
        (WebCore::Settings::setCSSRegionsEnabled):
        (WebCore::Settings::cssRegionsEnabled):

2012-05-30  Lucas Forschler  <lforschler@apple.com>

    Merge 118891

    2012-05-29  Yoshifumi Inoue  <yosin@chromium.org>

            REGRESSION(r111497): The "option" element doesn't match CSS pseudo class :enabled
            https://bugs.webkit.org/show_bug.cgi?id=87719

            Reviewed by Kent Tamura.

            This patch added checking of "option" element for CSS pseudo class :enabled as same as
            :disabled to selector checker. Before r111497, it was done by using isFormControlElement.
            After that revision, HTMLOptionElement was no longer derived from HTMLFormControlElement.

            Test: fast/form/select/optgroup-rendering.html

            * css/SelectorChecker.cpp:
            (WebCore::SelectorChecker::checkOneSelector): Checking element is option element as same
            as PseudoDisabled in PseudoEnabled case.

2012-05-30  Lucas Forschler  <lforschler@apple.com>

    Merge 118883

    2012-05-29  Eric Seidel  <eric@webkit.org>

            Fix ENABLE_IFRAME_SEAMLESS to actually fully disable <iframe seamless>
            https://bugs.webkit.org/show_bug.cgi?id=87646

            Reviewed by Adam Barth.

            In the process of moving the seamless feature out of github and into bugs.webkit.org
            multiple versions of the shouldDisplaySeamlessly function got written
            (and moved from HTMLIFrameElement to Document), but only one of them was wrapped
            in ENABLE_IFRAME_SEAMLESS.  HTMLIFrameElement was checking mayDisplaySeamlessly
            directly (as was my original design), which got around the ENABLE_IFRAME_SEAMLESS check.
            I've fixed this oversight, and the feature is now off when we tell it to be off.

            This is covered by many existing tests.  I've verified locally that
            all tests fail when ENABLE_IFRAME_SEAMLESS is disabled instead of
            only some of them.

            * dom/SecurityContext.h:
            (SecurityContext):
            * html/HTMLIFrameElement.cpp:
            (WebCore::HTMLIFrameElement::shouldDisplaySeamlessly):

2012-05-30  Lucas Forschler  <lforschler@apple.com>

    Merge 118820

    2012-05-29  John Sullivan  <sullivan@apple.com>

            Update label for blacklisted plug-in
            https://bugs.webkit.org/show_bug.cgi?id=87767
            rdar://problem/11550048

            Reviewed by Kevin Decker.

            * English.lproj/Localizable.strings:
            Regenerated.

            * platform/LocalizedStrings.cpp:
            (WebCore::insecurePluginVersionText):
            Changed this string.

2012-06-26  Simon Fraser  <simon.fraser@apple.com>

    <rdar://problem/11756010> Optimize mappings of simple transforms in RenderGeometryMap (90034)
        part of:
    <rdar://problem/11648166> Inception iPad : Scrolling stutters when additional cards become visible on screen

        Merged ToT WebKit r121306.

    2012-06-26  Simon Fraser  <simon.fraser@apple.com>
    
            Optimize mappings of simple transforms in RenderGeometryMap
            https://bugs.webkit.org/show_bug.cgi?id=90034
    
            Reviewed by Dean Jackson.
            
            For transforms that are identity or simple translations, don't
            fall off the fast path in RenderGeometryMap; we can just
            treat them as offsets.
            
            Improves performance on pages with lots of translateZ(0) elements.
            
            Remove RenderGeometryMapStep::mapPoint() and mapQuad(), which
            were unused.
    
            No new tests; optimization only, and tested by assertions.
    
            * rendering/RenderGeometryMap.cpp:
            (WebCore::RenderGeometryMap::push):

2012-06-26  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/11508821> When inserting img tag into UITextView, 24 of 89 samples spent in +[NSHTTPCookieStorage sharedHTTPCookieStorage]

        Reviewed by Joseph Pecoraro.

        Add a pref for using cookies in our requests. Messages would like to use that pref to
        disable cookies so that CFNetwork doesn't spend unnecesary time initializing cookie storage.

        * WebCore.exp.in:
        * platform/network/ResourceRequestBase.cpp: Added new static field and accessor functions to
        control the initial state of m_allowCookies member variable.
        (WebCore):
        (WebCore::ResourceRequestBase::setDefaultAllowCookies): Added.
        (WebCore::ResourceRequestBase::defaultAllowCookies): Added.
        * platform/network/ResourceRequestBase.h:
        (ResourceRequestBase):
        (WebCore::ResourceRequestBase::ResourceRequestBase):

2012-06-25  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/11741325> JavaScript resources have pipelining priority 1 instead of 2

        Merged ToT WebKit r121231.

    2012-06-25  Pratik Solanki  <psolanki@apple.com>

        JavaScript resources have low priority when SVG is enabled
        https://bugs.webkit.org/show_bug.cgi?id=89932
        <rdar://problem/11741325>

        Reviewed by Adele Peterson.

        r108785 inadvertently lowered the priority of JavaScript resources. Fix the code so we set
        the correct priority for scripts. Also, move the code so that all ifdefs are together at the
        bottom to make it a bit easier to read..

        * loader/cache/CachedResource.cpp:
        (WebCore::defaultPriorityForResourceType):

2012-05-30  Lucas Forschler  <lforschler@apple.com>

    Merge 118553

    2012-05-25  Dean Jackson  <dino@apple.com>
    
            Unreviewed, rolling out r112155.
            http://trac.webkit.org/changeset/112155
            https://bugs.webkit.org/show_bug.cgi?id=79389
            Hitch (due to style recalc?) when starting CSS3 animation
    
            This caused a number of issues, including:
            https://bugs.webkit.org/show_bug.cgi?id=87146
            https://bugs.webkit.org/show_bug.cgi?id=84194
            <rdar://problem/11506629>
            <rdar://problem/11267408>
            <rdar://problem/11531859>
    
2012-05-30  Lucas Forschler  <lforschler@apple.com>

    Merge 118450

    2012-05-24  Anders Carlsson  <andersca@apple.com>

            Corrupted pages rendering when images are zoomed on Google+
            https://bugs.webkit.org/show_bug.cgi?id=87439
            <rdar://problem/11503078>

            Reviewed by Beth Dakin.

            The rect that's given to scrollContentsSlowPath is in frame view coordinates, but if we end up
            passing them to RenderLayer::setBackingNeedsRepaintInRect we need to account for the frame scale factor.

            * page/FrameView.cpp:
            (WebCore::FrameView::scrollContentsSlowPath):

2012-05-30  Lucas Forschler  <lforschler@apple.com>

    Merge 118411

    2012-05-24  Jer Noble  <jer.noble@apple.com>

            MediaControlTimelineElement is adjusting time 3 times per click
            https://bugs.webkit.org/show_bug.cgi?id=58160

            Reviewed by Eric Carlson.

            No new tests; we intentionally throttle timeupdate events for the same
            movie time, so there is no way to write a layout test for this case.

            Only call setCurrentTime() on mousedown or mousemove events.

            * html/shadow/MediaControlElements.cpp:
            (WebCore::MediaControlTimelineElement::defaultEventHandler):

2012-05-30  Lucas Forschler  <lforschler@apple.com>

    Merge 118314

    2012-05-23  Jer Noble  <jer.noble@apple.com>

            REGRESSION: compositing/video/video-poster.html fails on Mac
            https://bugs.webkit.org/show_bug.cgi?id=87199

            Reviewed by Maciej Stachowiak.

            No new tests; fixes failing compositing/video/video-poster.html test.

            Instead of creating the video layer directly, simply allow the layer
            to be created in updateStates() by changing the definition of
            isReadyForVideoSetup() to bypass the m_isAllowedToRender check if
            the player reports a video track is present.  This causes the video layer
            to be created and for future calls to prepareForRendering() to result
            in calls to mediaPlayerRenderingModeChanged().

            * platform/graphics/avfoundation/MediaPlayerPrivateAVFoundation.cpp:
            (WebCore::MediaPlayerPrivateAVFoundation::isReadyForVideoSetup):
            (WebCore::MediaPlayerPrivateAVFoundation::metadataLoaded):

2012-05-30  Lucas Forschler  <lforschler@apple.com>

    Merge 116319

    2012-05-07  Nat Duca  <nduca@chromium.org>

            Unreviewed, rolling out r115525.
            http://trac.webkit.org/changeset/115525
            https://bugs.webkit.org/show_bug.cgi?id=66683

            Too many pages rely on DOMTimeStamp as first argument.
            Reverting while we consider next steps.

            * WebCore.exp.in:
            * bindings/js/JSRequestAnimationFrameCallbackCustom.cpp:
            (WebCore::JSRequestAnimationFrameCallback::handleEvent):
            * dom/Document.cpp:
            (WebCore::Document::serviceScriptedAnimations):
            * dom/Document.h:
            (Document):
            * dom/RequestAnimationFrameCallback.h:
            (RequestAnimationFrameCallback):
            * dom/RequestAnimationFrameCallback.idl:
            * dom/ScriptedAnimationController.cpp:
            (WebCore::ScriptedAnimationController::ScriptedAnimationController):
            (WebCore::ScriptedAnimationController::serviceScriptedAnimations):
            (WebCore):
            (WebCore::ScriptedAnimationController::windowScreenDidChange):
            (WebCore::ScriptedAnimationController::scheduleAnimation):
            (WebCore::ScriptedAnimationController::animationTimerFired):
            * dom/ScriptedAnimationController.h:
            (ScriptedAnimationController):
            (WebCore::ScriptedAnimationController::displayRefreshFired):
            * page/FrameView.cpp:
            (WebCore::FrameView::serviceScriptedAnimations):
            * page/FrameView.h:
            (FrameView):
            * platform/graphics/DisplayRefreshMonitor.cpp:
            (WebCore::DisplayRefreshMonitor::DisplayRefreshMonitor):
            (WebCore::DisplayRefreshMonitor::notifyClients):
            * platform/graphics/DisplayRefreshMonitor.h:
            (DisplayRefreshMonitor):
            * platform/graphics/blackberry/DisplayRefreshMonitorBlackBerry.cpp:
            (WebCore::DisplayRefreshMonitor::displayLinkFired):
            * platform/graphics/mac/DisplayRefreshMonitorMac.cpp:
            (WebCore):
            (WebCore::DisplayRefreshMonitor::requestRefreshCallback):
            (WebCore::DisplayRefreshMonitor::displayLinkFired):

2012-05-30  Lucas Forschler  <lforschler@apple.com>

    Rollout 115573

    2012-04-28  Alexander Pavlov  <apavlov@chromium.org>

            Web Inspector: Enable touch events feature fails touch feature detection
            https://bugs.webkit.org/show_bug.cgi?id=84397

            Whenever the touch emulation is enabled, Inspector adds a script to evaluate on load,
            that adds ontouch(start|end|move|cancel) properties to window.__proto__ and document.__proto__.

            Reviewed by Pavel Feldman.

            * inspector/front-end/DOMAgent.js:
            (WebInspector.DOMAgent.prototype._emulateTouchEventsChanged.get if):
            (WebInspector.DOMAgent.prototype._emulateTouchEventsChanged.scriptAddedCallback):
            (WebInspector.DOMAgent.prototype._emulateTouchEventsChanged):
            * inspector/front-end/inspector.js:

2012-05-28  Lucas Forschler  <lforschler@apple.com>

    Merge 118399

    2012-05-24  Jessie Berlin  <jberlin@apple.com>

            REGRESSION(r109663) All the the dom/html/level2/html/HTMLFrameElement* tests crash on Windows
            https://bugs.webkit.org/show_bug.cgi?id=87410

            Reviewed by Anders Carlsson.

            Do not pass a reference type to va_start (see r75435).

            * platform/LocalizedStrings.cpp:
            (WebCore::formatLocalizedString):

2012-05-28  Lucas Forschler  <lforschler@apple.com>

    Merge 118397

    2012-05-24  Alexey Proskuryakov  <ap@apple.com>

            [WK2] Let the client give local files universal access on a case by case basis
            https://bugs.webkit.org/show_bug.cgi?id=87174
            <rdar://problem/11024330>

            Reviewed by Maciej Stachowiak.

            * dom/Document.cpp: (WebCore::Document::initSecurityContext): When settings->allowUniversalAccessFromFileURLs()
            is false, also try asking the client for an indulgence.

            * loader/FrameLoaderClient.h: (WebCore::FrameLoaderClient::shouldForceUniversalAccessFromLocalURL):
            Default implementation doesn't change anything.

2012-05-28  Lucas Forschler  <lforschler@apple.com>

    Merge 118039

    2012-05-22  Vitaly Buka  <vitalybuka@chromium.org>

            Fix iframe printing.
            https://bugs.webkit.org/show_bug.cgi?id=85118

            Reviewed by Darin Adler, Eric Seidel.

            Patch fixed two issues by disabling special handling of subframes for printing.
            1. Regression. Division by zero when forceLayoutForPagination called for subframes
            and page sizes set to zero.
            2. Old issue. RendererView adjusted layout of subframes for printing and set invalid
            dimensions. Sometimes it caused missing iframe when printed.

            Test: printing/iframe-print.html

            * page/Frame.cpp:
            (WebCore::Frame::setPrinting): Calls forceLayoutForPagination for root frames only.
            (WebCore::Frame::resizePageRectsKeepingRatio): Added ASSERTs to catch division by zero.
            * rendering/RenderView.cpp: Replaced printing() with shouldUsePrintingLayout() for most calls.
            (WebCore::RenderView::computeLogicalHeight):
            (WebCore::RenderView::computeLogicalWidth):
            (WebCore::RenderView::layout):
            (WebCore::RenderView::shouldUsePrintingLayout): Returns true only if printing enabled and it's a root frame.
            (WebCore::RenderView::viewRect):
            (WebCore::RenderView::viewHeight):
            (WebCore::RenderView::viewWidth):
            * rendering/RenderView.h:

2012-05-24  Lucas Forschler  <lforschler@apple.com>

    Merge 118204

    2012-05-22  Jer Noble  <jer.noble@apple.com>

            PlatformClockCM has uninitialized m_rate member.
            https://bugs.webkit.org/show_bug.cgi?id=87217

            Reviewed by Eric Carlson.

            Test: media/media-controller-time.html

            Initialize the m_rate member to a default of 1 (second-per-second), matching the implementation
            of ClockGeneric.

            * platform/mac/PlatformClockCM.mm:
            (PlatformClockCM::PlatformClockCM):

2012-05-24  Lucas Forschler  <lforschler@apple.com>

    Merge 118086

    2012-05-22  Tim Horton  <timothy_horton@apple.com>

            Add a quirk for applications that depend on the relative ordering of progressCompleted/didFinishLoad
            https://bugs.webkit.org/show_bug.cgi?id=87178
            <rdar://problem/11468434>

            Reviewed by Maciej Stachowiak.

            Some applications depend on the relative ordering of progressCompleted/didFinishLoad, which was changed
            to be more correct in http://trac.webkit.org/changeset/94105. For applications built before 94105, we can
            provide the old behavior. For the time being, this will only apply to Mail.app.

            No new tests, will not affect behavior for any application except Mail.

            * loader/FrameLoader.cpp:
            (WebCore::FrameLoader::checkLoadCompleteForThisFrame):
            * page/Settings.cpp:
            (WebCore::Settings::Settings):
            * page/Settings.h:
            (WebCore::Settings::setNeedsDidFinishLoadOrderQuirk):
            (WebCore::Settings::needsDidFinishLoadOrderQuirk):

2012-05-24  Lucas Forschler  <lforschler@apple.com>

    Merge 117471

    2012-05-16  Andreas Kling  <kling@webkit.org>

            Make PluginInfoStore properly thread-safe.
            <http://webkit.org/b/86648>
            <rdar://problem/11451178>

            Reviewed by Darin Adler.

            * plugins/PluginData.h:
            (WebCore::MimeClassInfo::isolatedCopy):
            (WebCore::PluginInfo::isolatedCopy):

2012-05-23  Lucas Forschler  <lforschler@apple.com>

    Merge 117744

    2012-05-18  Andreas Kling  <kling@webkit.org>

            REGRESSION(r117501): IconDatabase asserts on startup in synchronousIconForPageURL().
            <http://webkit.org/b/86935>
            <rdar://problem/11480012>

            Reviewed by Anders Carlsson.

            - Correctly set m_retainOrReleaseIconRequested to true in retainIconForPageURL().
              This was causing the assertions, as we would end up doing nothing until the first
              icon release request came in.

            - Require that m_urlsToRetainOrReleaseLock be held when accessing m_retainOrReleaseIconRequested.
              This removes a possible race condition in double checked locking.

            - Swap over the retain/release work queues while holding m_urlsToRetainOrReleaseLock
              and release it right away to avoid sitting on the lock while updating the database.

            * loader/icon/IconDatabase.cpp:
            (WebCore::IconDatabase::synchronousIconForPageURL):
            (WebCore::IconDatabase::retainIconForPageURL):
            (WebCore::IconDatabase::releaseIconForPageURL):
            (WebCore::IconDatabase::retainedPageURLCount):
            (WebCore::IconDatabase::performURLImport):
            (WebCore::IconDatabase::syncThreadMainLoop):
            (WebCore::IconDatabase::performPendingRetainAndReleaseOperations):
            * loader/icon/IconDatabase.h:
            (IconDatabase):

2012-05-23  Lucas Forschler  <lforschler@apple.com>

    Merge 117625

    2012-05-18  Viatcheslav Ostapenko  <ostapenko.viatcheslav@nokia.com>

            [Qt] REGRESSION(r117501): It made almost all tests assert in debug mode
            https://bugs.webkit.org/show_bug.cgi?id=86854

            Reviewed by Andreas Kling.

            Initialize boolean flag in constructor and recheck the flag which can be 
            modified by another thread under mutex.

            No new tests, fixes regression that caused layout test crash.

            * loader/icon/IconDatabase.cpp:
            (WebCore::IconDatabase::IconDatabase):
            (WebCore::IconDatabase::syncThreadMainLoop):

2012-05-23  Lucas Forschler  <lforschler@apple.com>

    Merge 117501

    2012-05-15  Andreas Kling  <kling@webkit.org>

            IconDatabase: Move icon retain/release off of the main thread.
            <http://webkit.org/b/85799>
            <rdar://problem/9507113>

            Reviewed by Brady Eidson.

            Batch up the retain/release operations and execute them as part of the sync thread loop.
            The batch execution is guarded by a new mutex (m_urlsToRetainOrReleaseLock.)
            This avoids blocking the main thread on m_urlAndIconLock for basic retain/release.

            There is one exception; if there are pending retain/release operations in synchronousIconForPageURL,
            it will acquire the lock and flush the operations.

            There should be no behavior change, this is only meant to reduce lock contention.

            * loader/icon/PageURLRecord.h:
            (WebCore::PageURLRecord::retain):
            (WebCore::PageURLRecord::release):

                Added a 'count' argument to these so we can batch up the operations in IconDatabase.

            * loader/icon/IconDatabase.h:
            * loader/icon/IconDatabase.cpp:
            (WebCore::IconDatabase::performScheduleOrDeferSyncTimer):
            (WebCore::IconDatabase::performScheduleOrDeferSyncTimerOnMainThread):
            (WebCore::IconDatabase::scheduleOrDeferSyncTimer):

                Perform the the timer scheduling on the main thread as it can be done on a different
                thread by way of retainIconForPageURL or releaseIconForPageURL.

            (WebCore::IconDatabase::synchronousIconForPageURL):
            (WebCore::IconDatabase::retainIconForPageURL):
            (WebCore::IconDatabase::performRetainIconForPageURL):
            (WebCore::IconDatabase::releaseIconForPageURL):
            (WebCore::IconDatabase::performReleaseIconForPageURL):
            (WebCore::IconDatabase::retainedPageURLCount):
            (WebCore::IconDatabase::IconDatabase):
            (WebCore::IconDatabase::performURLImport):
            (WebCore::IconDatabase::syncThreadMainLoop):
            (WebCore::IconDatabase::performPendingRetainAndReleaseOperations):

2012-05-23  Lucas Forschler  <lforschler@apple.com>

    Merge 116543

    2012-05-03  Shawn Singh  <shawnsingh@chromium.org>

            Hit testing is incorrect in some cases with perspective transforms
            https://bugs.webkit.org/show_bug.cgi?id=79136

            Reviewed by Simon Fraser.

            Tests: transforms/3d/hit-testing/coplanar-with-camera.html
                   transforms/3d/hit-testing/perspective-clipped.html

            * platform/graphics/transforms/TransformationMatrix.cpp:
            (WebCore::TransformationMatrix::projectPoint): Fix a
            divide-by-zero error so that values do not become Inf or Nan. Also
            fix an overflow error by using a large, but not-too-large constant
            to represent infinity.

            (WebCore::TransformationMatrix::projectQuad): Fix an error where
            incorrect quads were being returned. Incorrect quads can occur
            when projectPoint clamped==true after returning.

2012-05-23  Lucas Forschler  <lforschler@apple.com>

    Merge 116486

    2012-05-08  Benjamin Poulain  <bpoulain@apple.com>

            [JSC] Regression: addEventListener() and removeEventListener() raise an exception on missing args
            https://bugs.webkit.org/show_bug.cgi?id=85928

            Reviewed by Geoffrey Garen.

            The functions addEventListener() and removeEventListener() raise an exception if there are missin arguments.
            This behavior breaks existing content.

            This patch change the code generator of JavaScript core to have an exception for addEventListener() and removeEventListener().
            For those function, we do not raise an exception on missin argument.

            This patch does not modify the V8 code generator because such exceptions are already in place there.

            Tests: fast/dom/Window/window-legacy-event-listener.html
                   fast/dom/XMLHttpRequest-legacy-event-listener.html
                   fast/dom/node-legacy-event-listener.html

            * bindings/scripts/CodeGeneratorJS.pm:
            (GenerateImplementation):

2012-05-23  Lucas Forschler  <lforschler@apple.com>

    Merge 116319

    2012-05-07  Nat Duca  <nduca@chromium.org>

            Unreviewed, rolling out r115525.
            http://trac.webkit.org/changeset/115525
            https://bugs.webkit.org/show_bug.cgi?id=66683

            Too many pages rely on DOMTimeStamp as first argument.
            Reverting while we consider next steps.

            * WebCore.exp.in:
            * bindings/js/JSRequestAnimationFrameCallbackCustom.cpp:
            (WebCore::JSRequestAnimationFrameCallback::handleEvent):
            * dom/Document.cpp:
            (WebCore::Document::serviceScriptedAnimations):
            * dom/Document.h:
            (Document):
            * dom/RequestAnimationFrameCallback.h:
            (RequestAnimationFrameCallback):
            * dom/RequestAnimationFrameCallback.idl:
            * dom/ScriptedAnimationController.cpp:
            (WebCore::ScriptedAnimationController::ScriptedAnimationController):
            (WebCore::ScriptedAnimationController::serviceScriptedAnimations):
            (WebCore):
            (WebCore::ScriptedAnimationController::windowScreenDidChange):
            (WebCore::ScriptedAnimationController::scheduleAnimation):
            (WebCore::ScriptedAnimationController::animationTimerFired):
            * dom/ScriptedAnimationController.h:
            (ScriptedAnimationController):
            (WebCore::ScriptedAnimationController::displayRefreshFired):
            * page/FrameView.cpp:
            (WebCore::FrameView::serviceScriptedAnimations):
            * page/FrameView.h:
            (FrameView):
            * platform/graphics/DisplayRefreshMonitor.cpp:
            (WebCore::DisplayRefreshMonitor::DisplayRefreshMonitor):
            (WebCore::DisplayRefreshMonitor::notifyClients):
            * platform/graphics/DisplayRefreshMonitor.h:
            (DisplayRefreshMonitor):
            * platform/graphics/blackberry/DisplayRefreshMonitorBlackBerry.cpp:
            (WebCore::DisplayRefreshMonitor::displayLinkFired):
            * platform/graphics/mac/DisplayRefreshMonitorMac.cpp:
            (WebCore):
            (WebCore::DisplayRefreshMonitor::requestRefreshCallback):
            (WebCore::DisplayRefreshMonitor::displayLinkFired):

2012-06-25  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/11708902> REGRESSION (Sundance): text in boxes is cut off in iOS Application Programming book

        Merged TOT WebKit r121102.
    
    2012-06-23  Dan Bernstein  <mitz@apple.com>

        RenderText’s minimum preferred width is incorrect automatic hyphenation is used
        https://bugs.webkit.org/show_bug.cgi?id=89814

        Reviewed by Sam Weinig.

        Test: fast/text/hyphen-min-preferred-width.html

        * rendering/RenderText.cpp:
        (WebCore::maxWordFragmentWidth): Added this helper function. It returns the width of the
        widest hyphenated fragment of the word (except for the suffix after the last hyphen) and
        the offset of the last hyphenation opportunity.
        (WebCore::RenderText::computePreferredLogicalWidths): Changed this function to consider the
        widths of hyphenated word fragments rather than entire words when computing the minimum
        width. Because hyphenating and measuring all fragments is expensive, hyphenation is only
        attempted if the unhyphenated word is wider than the current minimum width.

2012-06-25  Dan Bernstein  <mitz@apple.com>

        Preparation for <rdar://problem/11708902> REGRESSION (Sundance): text in boxes is cut off in iOS Application Programming book

        Merged TOT WebKit r121050.
    
    2012-06-22  Dan Bernstein  <mitz@apple.com>

        RenderText’s minimum preferred width is incorrect when soft hyphens are used
        https://bugs.webkit.org/show_bug.cgi?id=89775

        Reviewed by Simon Fraser.

        Test: fast/text/soft-hyphen-min-preferred-width.html

        * rendering/RenderText.cpp:
        (WebCore::hyphenWidth): Added this helper function.
        (WebCore::RenderText::computePreferredLogicalWidths): In places where this function tests
        for the soft hyphen character, added a check that the 'hyphens' style property is not set
        to 'none', because in that case soft hyphens are not break opportunities. Also added an
        explicit check to suppress break opportunities from isBreakable() if the occur after a
        soft hyphen and 'hyphens' is set to 'none'. Finally, when measuring text up to a potential
        line break, added the width of the hyphen string when needed.

2012-06-25  Benjamin Poulain  <bpoulain@apple.com>

        Merge OpenSource WebKit r121085.

    2012-06-22  Benjamin Poulain  <bpoulain@apple.com>

        Text with text-overflow:ellipsis and text-align:right is left aligned
        https://bugs.webkit.org/show_bug.cgi?id=88705

        Reviewed by Dan Bernstein.

        When building the line of a text with overflow, we do not know if we can place
        an ellipsis and where it should be. Because of that, text is laid out as if it does
        not have text-overflow: ellipsis.

        This causes problems with text-alignement right in LTR and left in RTL. The shortened text
        did not follow the allignment.

        This patch changes the position of lines with ellipsis after layout to follow the allignment.
        In RenderBlock::checkLinesForTextOverflow(), the call to RootInlineBox::placeEllipsis() now
        also gives the width of the truncated text. We use this width to re-compute the alignement and
        shift the box if necessary.

        In RenderBlock::deleteEllipsisLineBoxes() we revert the text to the position computed with the
        total width. This way all layout computation is done as usual.

        Tests: fast/css/text-overflow-ellipsis-text-align-left.html
               fast/css/text-overflow-ellipsis-text-align-right.html

        * rendering/InlineBox.cpp:
        (WebCore::InlineBox::canAccommodateEllipsis): Make the method const for readability, truncating is
        done later in placeEllipsisBox().
        (WebCore::InlineBox::placeEllipsisBox): Add an output argument, truncatedWidth, giving the width
        of the text + ellipsis after truncation (if any truncation can be done).
        * rendering/InlineBox.h:
        (InlineBox):
        * rendering/InlineFlowBox.cpp:
        (WebCore::InlineBox::adjustLogicalPosition): adjustPosition() logical coordinates.
        (WebCore::InlineFlowBox::canAccommodateEllipsis):
        (WebCore::InlineFlowBox::placeEllipsisBox):
        * rendering/InlineFlowBox.h:
        (InlineFlowBox):
        * rendering/InlineTextBox.cpp:
        (WebCore::InlineTextBox::placeEllipsisBox):
        * rendering/InlineTextBox.h:
        (InlineTextBox):
        * rendering/RenderBlockLineLayout.cpp:
        (WebCore::RenderBlock::deleteEllipsisLineBoxes): In addition to removing the truncation, we
        need to revert the shift introduced by checkLinesForTextOverflow(). This restore the lines
        to its original, untruncated position in order to layout the block correctly in RenderBlock::layoutInlineChildren().
        (WebCore::RenderBlock::checkLinesForTextOverflow): After we truncate the text, we now recompute the shift we need
        for alignment, and move the line accordingly.
        * rendering/RenderDeprecatedFlexibleBox.cpp:
        (WebCore::RenderDeprecatedFlexibleBox::applyLineClamp):
        * rendering/RootInlineBox.cpp:
        (WebCore::RootInlineBox::placeEllipsis): Return the width of the truncated text + the width of the ellipsis.
        (WebCore::RootInlineBox::placeEllipsisBox):
        (WebCore::RootInlineBox::adjustPosition):
        * rendering/RootInlineBox.h:
        (RootInlineBox):

2012-06-25  Antti Koivisto  <antti@apple.com>
        
        <rdar://problem/11740369> Fast path for simple transform parsing

        Merge ToT WebKit r121175 and r116540
        
    2012-06-25  Antti Koivisto  <antti@apple.com>

        Fast path for simple transform parsing
        https://bugs.webkit.org/show_bug.cgi?id=89898

        Reviewed by Anders Carlsson.

        When manipulating transforms using script, the transform value parsing can show up in profiles pretty heavily 
        (up 4% in some cases). We can optimize it easily by implementing a fast path that does not spin up the full CSS
        parser, like we already do for several other common value types.
        
        The patch implements a fast path for transform(), transformX/Y/Z() and transform3D(). It speeds up parsing by >5x.

        * css/CSSParser.cpp:
        (WebCore):
        (WebCore::parseTransformArguments):
        (WebCore::parseTransformValue):
        (WebCore::CSSParser::parseValue):

    2012-05-09  Caio Marcelo de Oliveira Filho  <caio.oliveira@openbossa.org>

        Simplify CSSParser::parseSimpleLengthValue()
        https://bugs.webkit.org/show_bug.cgi?id=85910

        Reviewed by Alexis Menard.

        Various small improvements to this function, mainly:
        - Move the check if the property ID accepts a simple length as early as possible;
        - Remove the check for the characters{8,16} pointers since they'll be valid (we ASSERT that);
        - Use a template to avoid duplicate code for 8 and 16 bit characters.

        * css/CSSParser.cpp:
        (WebCore):
        (WebCore::parseSimpleLength):
        (WebCore::parseSimpleLengthValue):

2012-06-24  Antti Koivisto  <antti@apple.com>

        <rdar://problem/10559009> iPhone: The new twitter UI is slow on iPhone < 4S

        Merge ToT WebKit r121124 and r121130.

    2012-06-24  Antti Koivisto  <antti@apple.com>

        Optimize RenderGeometryMap mappings gathering
        https://bugs.webkit.org/show_bug.cgi?id=89828

        Reviewed by Simon Fraser.

        RenderGeometryMap currently gathers mappings by climbing the rendering tree. This is slow and can produce 
        large number of mapping steps. In the common case we already have the child layer coordinates available in
        the layer tree and we can just use that.
        
        The combination of faster mappings gathering and fewer number of applying steps reduces time spent under 
        RenderLayerCompositor::computeCompositingRequirements to less than half when scrolling the mobile version
        of twitter.com.
        
        * rendering/RenderGeometryMap.cpp:
        (WebCore):
        (WebCore::RenderGeometryMap::pushMappingsToAncestor):
        
            Use pre-computed mapping from the layer tree when possible.

        (WebCore::RenderGeometryMap::popMappingsToAncestor):
        * rendering/RenderGeometryMap.h:
        
            Add some inline capacity.

        (WebCore):
        (RenderGeometryMap):
        * rendering/RenderLayer.h:
        (WebCore::RenderLayer::canUseConvertToLayerCoords):
        (RenderLayer):
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::addToOverlapMapRecursive):
        (WebCore::RenderLayerCompositor::computeCompositingRequirements):
        
    2012-06-24  Antti Koivisto  <antti@apple.com>

        REGRESSION(r121124): LayoutTests/fast/block/inline-children-root-linebox-crash.html asserts
        https://bugs.webkit.org/show_bug.cgi?id=89844
        
        Reviewed by Dan Bernstein.

        We need to check for the flipped writing mode and take the slow path if it is used.

        * rendering/RenderGeometryMap.cpp:
        (WebCore::RenderGeometryMap::pushMappingsToAncestor):

2012-06-22  Jeffrey Pfau  <jpfau@apple.com>

        <rdar://problem/11406350> WebAudio will not load mono audio files

        Set ExtAudioFile to decode to the correct number of channels based on the input.

        Reviewed by NOBODY (OOPS!).

        * platform/audio/ios/AudioFileReaderIOS.cpp:
        (WebCore::AudioFileReader::createBus):

2012-06-22  Dean Jackson  <dino@apple.com>

        <rdar://problem/6075678> Subsampled background image should be stretched to the original size

        Reviewed by Simon Fraser and Pratik Solanki.

        On iOS we subsample JPEG images if they are too large (our idea of too large changes from
        release to release and device to device). However, when we subsampled the decoding we never
        told the image to draw at its original size, which means that some layouts would break
        if they relied on the original image size.

        I've added some new methods to BitmapImage that return the non-subsampled size. We use
        this size in the rendering path. The actual backing data doesn't change. This is all
        iOS-only, which is a little frustrating because it should be in Open Source. However,
        the entire sub-sampling path is iOS-only so I'd have to move a lot of code. I've opened
        a bug to do this after 6.0.
        <rdar://problem/11723502> Move subsampled image decoding source into Open Source

        Most pages should be unaffected by this change (most pages don't have huge images). If
        they do have a huge image, it should use the same amount of memory. However, memory use
        might increase if content was using the huge image as a child of a compositing layer. In
        this case though we were actually sizing things incorrectly.

        * loader/cache/CachedImage.cpp:
        (WebCore::CachedImage::imageSizeForRenderer): this now calls originalSize().
        * platform/graphics/BitmapImage.cpp:
        (WebCore::BitmapImage::updateSize): update the cached copy of m_originalSize.
        (WebCore):
        (WebCore::BitmapImage::originalSize):
        (WebCore::BitmapImage::originalSizeRespectingOrientation): the new methods
        that return the un-subsampled dimensions.
        * platform/graphics/BitmapImage.h:
        (BitmapImage): two new member variables for original size.
        * platform/graphics/ImageSource.h:
        * platform/graphics/cg/ImageSourceCG.cpp:
        (WebCore::ImageSource::frameSizeAtIndex): fixed a merge issue that wasn't
        technically breaking anything.
        (WebCore):
        (WebCore::ImageSource::originalSize): returns the original size by looking at the
        non-subsampled dimensions via CG.

2012-06-22  Dean Jackson  <dino@apple.com>

        Merge ToT WebKit r121048.

    2012-06-22  Dean Jackson  <dino@apple.com>

            BitmapImage duplicates code to calculate size
            https://bugs.webkit.org/show_bug.cgi?id=89728
            <rdar://problem/11724321>

            Reviewed by Darin Adler.

            Add a new updateSize method to BitmapImage that
            avoids duplication in the size and
            sizeRespectingOrientation methods.

            No new tests needed.

            * platform/graphics/BitmapImage.cpp:
            (WebCore::BitmapImage::updateSize): new method that will set
            m_size and m_sizeRespectingOrientation if necessary.
            (WebCore):
            (WebCore::BitmapImage::size):
            (WebCore::BitmapImage::sizeRespectingOrientation): these each
            now call updateSize rather than duplicate the update code.
            * platform/graphics/BitmapImage.h:
            (BitmapImage):

2012-06-22  Joseph Pecoraro  <pecoraro@apple.com>

        Merge ToT WebKit r121013.

    2012-06-22  Joseph Pecoraro  <pecoraro@apple.com>

            Web Inspector: InspectorState::updateCookie should not do JSON serialization if unsupported
            https://bugs.webkit.org/show_bug.cgi?id=89743

            Since all InspectorClient's are InspectorStateClient's provide a
            virtual accessor that determines whether or not InspectorClient updates
            are supported or not.

            Reviewed by Yury Semikhatsky.

            * inspector/InspectorState.cpp:
            (WebCore::InspectorState::updateCookie):
            Don't serialize and message the client if the client doesn't do anything with it.

            * inspector/InspectorStateClient.h:
            * inspector/WorkerInspectorController.cpp:
            (WebCore::InspectorStateClient::supportsInspectorStateUpdates):
            Let the client say whether or not supports updates or not.

2012-06-14  Benjamin Poulain  <bpoulain@apple.com>

        <rdar://problem/11580855> REGRESSION(Sundance): Safari does not update geo location permissions for web pages until page is refreshed
        <rdar://problem/11669538> Geolocation: We leak the cached position after CoreLocation is disabled or Safari is denied geolocation access

        Reviewed by David Kilzer.

        This patch adds the method resetAllGeolocationPermission() on the whole object chain from Frame to Geolocation. Each class handle the
        call by itself to avoid triggering the lazy initialization of the object.

        The Geolocation object handle the reset by clearing its state, then start a new request for every active GeoNotifier.

        If the geolocation was denied externally, the UIDelegate code will deny this Geolocation object in response and Geolocation::setIsAllowed()
        will call the error callback on GeoNotifier.

        If the geolocation was reset externally, the permission acquisition start like usual with the timers suspended. A page with an active watcher
        gets a new authorization dialog.

        If the page is suspended, the reset only happen on resume. A page in the background cannot restart Geolocation until it is resumed.

        * Modules/geolocation/Geolocation.cpp:
        (WebCore::Geolocation::resumeTimerFired):
        (WebCore):
        (WebCore::Geolocation::resetAllGeolocationPermission):
        (WebCore::Geolocation::stop):
        (WebCore::Geolocation::getCurrentPosition):
        (WebCore::Geolocation::watchPosition):
        (WebCore::Geolocation::startRequest):
        * Modules/geolocation/Geolocation.h:
        (Geolocation):
        * Modules/geolocation/NavigatorGeolocation.cpp:
        (WebCore):
        (WebCore::NavigatorGeolocation::resetAllGeolocationPermission):
        * Modules/geolocation/NavigatorGeolocation.h:
        (NavigatorGeolocation):
        * WebCore.exp.in:
        * page/DOMWindow.cpp:
        (WebCore::DOMWindow::resetAllGeolocationPermission):
        (WebCore):
        * page/DOMWindow.h:
        (DOMWindow):
        * page/Frame.h:
        (Frame):
        * page/ios/FrameIOS.mm:
        (WebCore::Frame::resetAllGeolocationPermission):
        (WebCore):

2012-06-20  Benjamin Poulain  <bpoulain@apple.com>

        Merge OpenSource WebKit r120804.

    2012-06-19  Benjamin Poulain  <bpoulain@apple.com>

        Refactoring: Geolocation::startRequest() should not create the GeoNotifiers
        https://bugs.webkit.org/show_bug.cgi?id=89533

        Reviewed by David Kilzer.

        It was odd to create the GeoNotifiers in Geolocation::startRequest() and having
        assertions from the call site.

        This patch move GeoNotifiers initialization to the exposed methods and pass them to
        startRequest() as needed.
        This will also help when adding support for dynamic permission reset and suspend/resume.

        * Modules/geolocation/Geolocation.cpp:
        (WebCore::Geolocation::getCurrentPosition):
        (WebCore::Geolocation::watchPosition):
        (WebCore::Geolocation::startRequest):
        * Modules/geolocation/Geolocation.h:
        (Geolocation):

2012-06-21  Tim Horton  <timothy_horton@apple.com>

    Merge 120953.

        2012-06-21  Tim Horton  <timothy_horton@apple.com>

            SVGImageCache isn't invalidated for <img> on dynamic page scale changes
            https://bugs.webkit.org/show_bug.cgi?id=89621
            <rdar://problem/11714677>

            Reviewed by Simon Fraser.

            Previously, device and page scale factors were being cached as a part of the SVGImageCache's
            size request. However, an <img> never has a reason to update its size request when the page
            scale is changed via gesture zooming, as no layout occurs.

            Instead, look up the relevant scales when the image is requested (which will occur during every
            repaint), allowing page scale changes to take effect without requiring an updated size request.

            Test: svg/as-image/image-respects-pageScaleFactor-change.html

            * loader/cache/CachedImage.cpp:
            (WebCore::CachedImage::setContainerSizeForRenderer):
            * svg/graphics/SVGImageCache.cpp:
            (WebCore::SVGImageCache::lookupOrCreateBitmapImageForRenderer):
            * svg/graphics/SVGImageCache.h:
            (WebCore::SVGImageCache::SizeAndScales::SizeAndScales):
            (SizeAndScales):

2012-06-21  Dean Jackson  <dino@apple.com>

        <rdar://problem/11680497> WebCore fails to compile due to deprecated CoreAudio stuff

        Reviewed by David Kilzer.

        The Sundance SDK between 335 and 337 temporarily deprecated AudioToolbox/AudioSession
        which caused some compiler errors. Dan committed a fix to work-around this, but
        it is no longer needed. The followup bug to move to AVAudioSession in Innsbruck is
        <rdar://problem/11701792> AudioSession should move to using AVAudioSession (Innsbruck)

        * platform/audio/ios/AudioDestinationIOS.cpp:
        (WebCore):

2012-06-19  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/11646919> AppStore crashes in [WebLayer display]

        Reviewed by Joseph Pecoraro.
        
        An old change, https://svn.apple.com/trac/puzzlebox/changeset/721403, added
        a WebThreadLock near the top of -[WebLayer display]. However, in a later merge (r1002945),
        the code was changed to copy platformCALayer(self) into a local variable outside the lock,
        and then use it lower down, which was not threadsafe.
        
        Simpify the code to just always take the lock if called on the main thread. A WebLayer should
        always have an owner if -display is being called.
        
        I tested MobileSafari and Pandora on the device and did not see any issues.

        * platform/graphics/mac/WebLayer.mm:
        (-[WebLayer display]):

2012-05-21  Lucas Forschler  <lforschler@apple.com>

    Merge 117537

    2012-05-17  Dan Bernstein  <mitz@apple.com>

            <rdar://problem/11419933> Problems with flipped writing modes and compositing
            https://bugs.webkit.org/show_bug.cgi?id=86032

            Reviewed by Anders Carlsson.

            Test: compositing/bounds-in-flipped-writing-mode.html

            * rendering/RenderLayer.cpp:
            (WebCore::RenderLayer::calculateLayerBounds): Apply a writing-mode flip to the bounding box
            if needed.

2012-05-21  Lucas Forschler  <lforschler@apple.com>

    Merge 117502

    2012-05-17  Beth Dakin  <bdakin@apple.com>

            https://bugs.webkit.org/show_bug.cgi?id=86266
            r112643/r116697 break Webview form input fields
            -and corresponding-
            <rdar://problem/11400430>

            Reviewed by Dan Bernstein.

            There is a recent history of changes in this are that seem worth documenting. 
            First was the change to switch to using NSTextFieldCell to draw text fields: 
            http://trac.webkit.org/changeset/104240

            That led to problems because of the clear background that I thought at the time 
            were specific to MountainLion. To fix that, I made this change:
            http://trac.webkit.org/changeset/110480

            But that change resulted in styled text fields getting an un-themed border, which 
            led to this change on the branch: http://trac.webkit.org/changeset/112643 and a 
            change on TOT that was identical for Lion and SnowLeopard but introduced new 
            behavior for MountainLion: http://trac.webkit.org/changeset/116697

            And that brings us to this bug, where it turns out the clear background is a 
            problem on Lion and SnowLeopard too. This patch fixes the bug by using the 
            original WebCoreSystemInterface function to paint all text fields on Lion and 
            SnowLeopard that are styled. This is what we used to paint all text fields before 
            r104240, which is the first change listed above. Un-styled text fields will still 
            use NSTextFieldCell on these platforms, but with a hardcoded white background. 
            * rendering/RenderThemeMac.h:
            (RenderThemeMac):
            * rendering/RenderThemeMac.mm:
            (WebCore::RenderThemeMac::paintTextField):
            (WebCore::RenderThemeMac::textField):

2012-05-21  Lucas Forschler  <lforschler@apple.com>

    Merge 117366

    2012-05-16  Jon Lee  <jonlee@apple.com>

            Animated GIFs in page cache get updated
            https://bugs.webkit.org/show_bug.cgi?id=86668
            <rdar://problem/11395549>

            Reviewed by Brady Eidson.

            Test: fast/loader/image-in-page-cache.html

            * rendering/RenderImage.cpp:
            (WebCore::RenderImage::imageChanged): When we are notified by the CachedImage that the image has
            changed, we check to see if the document is in the page cache. If so, we should not be updating,
            so we bail out early.

2012-05-21  Lucas Forschler  <lforschler@apple.com>

    Merge 117365

    2012-05-16  Tim Horton  <timothy_horton@apple.com>

            Crash if SVG gradient stop has display: none set
            https://bugs.webkit.org/show_bug.cgi?id=86686
            <rdar://problem/10751905>

            Reviewed by Dean Jackson.

            Create a renderer for SVGStopElement regardless of the "display" property.
            This matches the behavior of Opera and the SVG specification.

            Test: svg/custom/gradient-stop-display-none-crash.svg

            * svg/SVGStopElement.cpp:
            (WebCore::SVGStopElement::rendererIsNeeded):
            (WebCore):
            * svg/SVGStopElement.h:
            (SVGStopElement):

2012-05-21  Lucas Forschler  <lforschler@apple.com>

    Merge 117326

    2012-05-16  Jer Noble  <jer.noble@apple.com>

            <video> elements with no video tracks report false for webkitSupportsFullscreen.
            https://bugs.webkit.org/show_bug.cgi?id=86650

            Reviewed by Eric Carlson.

            No new tests; updated media/media-fullscreen-inline.html.

            With the new Full Screen API, the restriction that only video elements with
            video tracks can enter full screen seems arbitrary. Some media types will
            occasionally determine they have video tracks long after loadedmetadata, which
            breaks websites who check for webkitSupportsFullscreen(). Relax the restriction
            on webkitSupportsFullscreen() for ports where the Full Screen API is enabled and
            supported so as to no longer require hasVideo().

            * html/HTMLVideoElement.cpp:
            (WebCore::HTMLVideoElement::supportsFullscreen):

2012-05-21  Lucas Forschler  <lforschler@apple.com>

    Merge 117314

    2012-05-16  Tim Horton  <timothy_horton@apple.com>

            Scrollbar layers should respect accelerated drawing setting
            https://bugs.webkit.org/show_bug.cgi?id=86644
            <rdar://problem/11462038>

            Reviewed by Simon Fraser.

            When creating scrollbar layers, pass through the accelerated drawing setting.

            No new tests.

            * rendering/RenderLayerCompositor.cpp:
            (WebCore::RenderLayerCompositor::updateOverflowControlsLayers):

2012-05-21  Lucas Forschler  <lforschler@apple.com>

    Merge 117313

    2012-05-16  Tim Horton  <timothy_horton@apple.com>

            FrameView::scrollContentsFastPath should use painted area to determine whether to drop out of the fast path
            https://bugs.webkit.org/show_bug.cgi?id=86651
            <rdar://problem/11459243>

            Reviewed by Simon Fraser.

            Previously, we decided to fall out of the fast scrolling path by the number of fixed-position elements
            on the page. This was less than ideal if a single fixed position element took up a significant portion
            of the page, or if there were many small, cheap-to-paint fixed elements.

            Instead, we should use the fast path if less than 50% of the page will be repainted by fixed-position
            elements, and otherwise fall back to the slow path.

            I've tested a few different thresholds with an internal test; 50% seems to work relatively well,
            but the ideal value is hard to determine and likely depends on hardware.

            No new tests, performance improvement with few large fixed-position objects or many small ones.

            * page/FrameView.cpp:
            (WebCore::FrameView::scrollContentsFastPath):

2012-05-21  Lucas Forschler  <lforschler@apple.com>

    Merge 117336

    2012-05-16  Jeffrey Pfau  <jpfau@apple.com>

            ImageLoader can still dispatch beforeload events for ImageDocuments
            https://bugs.webkit.org/show_bug.cgi?id=86658
            <rdar://problem/11465863>

            Reviewed by Brady Eidson.

            Prevent flags regarding sending beforeload events from being set on ImageDocuments.

            No new tests; testing framework doesn't allow for testing ImageDocuments with injected JavaScript.

            * loader/ImageLoader.cpp:
            (WebCore::ImageLoader::updateFromElement):

2012-05-21  Lucas Forschler  <lforschler@apple.com>

    Merge 117185

    2012-05-15  Jeffrey Pfau  <jpfau@apple.com>

            ImageDocuments erroneously trigger beforeload events for the main resource
            https://bugs.webkit.org/show_bug.cgi?id=86543
            <rdar://problem/11309013>

            Reviewed by Brady Eidson.

            No new tests; testing framework doesn't allow for testing ImageDocuments with injected JavaScript.

            * loader/ImageLoader.cpp:
            (WebCore::ImageLoader::updateFromElement):

2012-05-21  Lucas Forschler  <lforschler@apple.com>

    Merge 116864

    2012-05-12  Abhishek Arya  <inferno@chromium.org>

            Crash in HTMLSelectElement::setOption
            https://bugs.webkit.org/show_bug.cgi?id=85420

            Reviewed by Eric Seidel

            RefPtr before option in HTMLSelectElement::setOption since it
            can get destroyed due to mutation events.

            Test: fast/dom/HTMLSelectElement/option-add-crash.html

            * html/HTMLSelectElement.cpp:
            (WebCore::HTMLSelectElement::setOption):

2012-06-18  Jeffrey Pfau  <jpfau@apple.com>

        <rdar://problem/11612635> WebAudio sounds truncated on http://grorg.org/junk/drumpad

        Initialized the session before trying to get the hardware sample rate so we don't
        get an error and return an invalid sample rate.

        Reviewed by Dean Jackson.

        No new tests, testing framework doesn't support web audio.

        * platform/audio/ios/AudioDestinationIOS.cpp:
        (WebCore::AudioDestination::hardwareSampleRate):
        * platform/audio/ios/AudioDestinationIOS.h:
        (AudioDestinationIOS):

2012-06-19  Karl Hong  <khong@apple.com>
 
        <rdar://problem/11221057> two adjacent blue dictation phrases treated as one, same for two adjacent results (when logging statistics)
 
        We don't merge dictation markers.

        Reviewed by Enrica Casucci
 
        * dom/DocumentMarkerController.cpp:
        (WebCore::DocumentMarkerController::addMarker):

2012-06-19  Dan Bernstein  <mitz@apple.com>

        Part of <rdar://problem/11699375> Add WebKit SPI to support separate LTR and RTL variants in UIWebPaginationMode

        Merged TOT WebKit r120727.

    2012-06-19  Dan Bernstein  <mitz@apple.com>

        WebCore part of: Paginated display API doesn’t allow setting the page progression direction
        https://bugs.webkit.org/show_bug.cgi?id=89394

        Reviewed by Darin Adler.

        Updated fast/multicol/pagination-*.html.

        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::styleForDocument): Changed to handle the new Pagination::Mode enum
        values and set the column progression in addition to the column axis.
        * page/Page.h: Changed the Pagination::Mode enum values to ones that specify an axis and a
        direction along that axis.
        * testing/Internals.cpp:
        (WebCore::Internals::setPagination): Changed to support the new Pagination::Mode enum values.

2012-06-19  Dan Bernstein  <mitz@apple.com>

        Part of <rdar://problem/11699375> Add WebKit SPI to support separate LTR and RTL variants in UIWebPaginationMode

        Merged TOT WebKit r120691.

    2012-06-19  Mike West  <mkwst@chromium.org>

        Compilation failure in StyleResolver.cpp
        https://bugs.webkit.org/show_bug.cgi?id=89446

        Reviewed by Ryosuke Niwa.

        Adding 'CSSPropertyWebkitColumnProgression' to a switch statement from
        which it was missing.

        * css/StyleResolver.cpp:
        (WebCore::StyleResolver::collectMatchingRulesForList):

2012-06-19  Dan Bernstein  <mitz@apple.com>

        Part of <rdar://problem/11699375> Add WebKit SPI to support separate LTR and RTL variants in UIWebPaginationMode

        Merged TOT WebKit r120609.

    2012-06-18  Dan Bernstein  <mitz@apple.com>

        Column progression direction cannot be set independently of writing direction
        https://bugs.webkit.org/show_bug.cgi?id=89315

        Added a column-progression property, which can have the values 'normal' and 'reverse'. When
        set to 'reverse', the first column is positioned at the end side of the block, and
        subsequent columns go from the in the start direction (in the inline column axis case; in
        the block column axis case, the first column coincides with the block and subsequent columns
        go before the block).

        Reviewed by Darin Adler.

        Test: fast/multicol/progression-reverse.html

        * css/CSSComputedStyleDeclaration.cpp:
        (WebCore::CSSComputedStyleDeclaration::getPropertyCSSValue): Added handling of the new
        property.

        * css/CSSParser.cpp:
        (WebCore::CSSParser::parseValue): Added validity check for the new property. The valid
        values are the identifiers 'normal' and 'reverse'.
        * css/CSSPrimitiveValueMappings.h:
        (WebCore::CSSPrimitiveValue::CSSPrimitiveValue): Added this mapping from ColumnProgression
        enum values to the identifiers 'normal and 'reverse'.
        (WebCore::CSSPrimitiveValue::operator ColumnProgression): Added this mapping from the
        identifiers 'normal' and 'reverse' to ColumnProgression enum values.
        * css/CSSProperty.cpp:
        (WebCore::CSSProperty::isInheritedProperty): Added the new property to the set of
        non-inherited properties.
        * css/CSSPropertyNames.in: Added -webkit-column-progression.
        * css/StyleBuilder.cpp:
        (WebCore::StyleBuilder::StyleBuilder): Added a handler for the new property.
        * rendering/ColumnInfo.h:
        (WebCore::ColumnInfo::ColumnInfo): Added an initializer for the m_progressionIsReversed
        member variable.
        (WebCore::ColumnInfo::progressionIsReversed): Added this accessor.
        (WebCore::ColumnInfo::setProgressionIsReversed): Ditto.
        (ColumnInfo): Added a m_progressionIsReversed member variable.
        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::paintColumnRules): Changed to advance in the reverse direction if
        needed.
        (WebCore::RenderBlock::setDesiredColumnCountAndWidth): Added call to
        ColumnInfo::setProgressionIsReversed(), based on the new property.
        (WebCore::RenderBlock::columnRectAt): Changed to take the progression direction into
        account.
        * rendering/style/RenderStyle.h: Added accessors and initial value for column progression.
        * rendering/style/RenderStyleConstants.h: Added ColumnProgression enum.
        * rendering/style/StyleMultiColData.cpp:
        (WebCore::StyleMultiColData::StyleMultiColData): Added initializer for the m_progression
        member variable.
        (WebCore::StyleMultiColData::operator==): Added equality check for m_progression.
        * rendering/style/StyleMultiColData.h:
        (StyleMultiColData): Added m_progression member variable.

2012-06-18  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/11215797> INTERNATIONAL: Improper line break before '」' character in japanese text

        Merged TOT WebKit r120624.

    2012-06-18  Dan Bernstein  <mitz@apple.com>

        Ideographic comma and full-stops are mishandled in linebreak
        https://bugs.webkit.org/show_bug.cgi?id=87041

        Reviewed by Alexey Proskuryakov.

        Test: fast/text/line-breaks-after-ideographic-comma-or-full-stop-2.html

        Specifically, line breaks were always allowed after an ideographic comma or full stop, even
        before a closing bracket.

        * rendering/break_lines.cpp:
        (WebCore::shouldBreakAfter): Removed code that unconditionally allowed line breaks after
        ideographic commas and full stops, which was added for <http://webkit.org/b/17411> to work
        around an issue in Unicode 5.0. Current line break iterator implementations are based on
        newer versions of Unicode, which do not have that issue, so we can use them instead of the
        hardcoded approximate rule.

2012-06-15  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/11661212> Emoji word width seems wrong when the character is formed with variant selector

        The empty, zero-width glyph for the Unicode Variation Selector was getting its advance
        increased by the logic that adjusts emoji advances.

        Reviewed by Joseph Pecoraro.

        * platform/graphics/mac/ComplexTextController.cpp:
        (WebCore::ComplexTextController::adjustGlyphsAndAdvances): Changed to only apply the emoji
        advance adjustment to non-zero advances.

2012-06-15  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/11661212> Emoji word width seems wrong when the character is formed with variant selector

        The empty, zero-width glyph for the Unicode Variation Selector was getting its advance
        increased by the logic that adjusts emoji advances.

        Reviewed by NOBODY (OOPS!).

        * platform/graphics/mac/ComplexTextController.cpp:
        (WebCore::ComplexTextController::adjustGlyphsAndAdvances): Changed to only apply the emoji
        advance adjustment to non-zero advances.

2012-06-14  Alexey Proskuryakov  <ap@apple.com>

        <rdar://problem/11421426> XMLHttpRequest with caching causing cross origin errors

        Merge open source r120339.

    2012-06-14  Alexey Proskuryakov  <ap@apple.com>

        [CFNetwork] XMLHttpRequest incorrectly returns cached responses even when there is a Vary header field
        https://bugs.webkit.org/show_bug.cgi?id=88925

        Reviewed by David Kilzer.

        Test: http/tests/cache/xhr-vary-header.html

        * platform/network/cf/ResourceHandleCFNet.cpp: (WebCore::willCacheResponse): Don't
        cache the response at all if there is a Vary header field. CFNetwork won't look at
        it if we allowed the response cached.

        * platform/network/mac/ResourceHandleMac.mm:
        (WebCore::ResourceHandle::createNSURLConnection): [NSURLResponse copy] is mutable
        in practice, but we should be nice, and use -mutableCopy.
        (-[WebCoreResourceHandleAsDelegate connection:willCacheResponse:]): Same fix as in
        CFNet code.

2012-06-13  Jeffrey Pfau  <jpfau@apple.com>

        <rdar://problem/11328762> REGRESSION (Sundance): Toolbar in Yahoo Mail doesn't extend across base of message area

        Merged WebKit ToT r120257

    2012-06-13  Jeffrey Pfau  <jpfau@apple.com>

        Padding and borders can cause integer overflow in block layouts
        https://bugs.webkit.org/show_bug.cgi?id=88820
        <rdar://problem/11328762>

        Reviewed by Tony Chang.

        Tests: fast/block/block-size-integer-overflow.html
               fast/flexbox/box-size-integer-overflow.html
               fast/table/table-size-integer-overflow.html

        * rendering/AutoTableLayout.cpp:
        (WebCore::AutoTableLayout::computePreferredLogicalWidths):
        * rendering/FixedTableLayout.cpp:
        (WebCore::FixedTableLayout::computePreferredLogicalWidths):
        * rendering/RenderBlock.cpp:
        * rendering/TableLayout.h:
        (TableLayout):

2012-06-11  Enrica Casucci  <enrica@apple.com>

        <rdar://problem/10355886> (text selection): selected text section is duplicate for some lines on some pages/fonts.
        
        One of the tasks performed collectSelectionRects is to extend the selection rects to make sure there are no gaps.
        The existing logic did not account for multicolumn layout and was failing to extend the rectangles
        every time there were 2 rectangles on separate pages with the same y-coordinate with one being the last in the
        selection.

        Reviewed by Dan Bernstein.

        * dom/Range.cpp:
        (WebCore::Range::collectSelectionRects):

2012-06-12  Darin Adler  <darin@apple.com>

        Tweak the WebCore export file a bit more for iOS

        Reviewed by David Kilzer.

        This is effectively a merge of ToT WebKit r120078.

        * WebCore.exp.in: Rearrangement.

2012-06-09  David Kilzer  <ddkilzer@apple.com>

        Remove duplicate entry for LocalFileSystem.cpp from WebCore project

        * WebCore.xcodeproj/project.pbxproj: Remove duplicate entry for
        LocalFileSystem.cpp in Sources.

2012-06-08  Jeffrey Pfau  <jpfau@apple.com>

        <rdar://problem/11328570> REGRESSION (Sundance): Product swipe on www.apple.com/mac not working.

        Merged WebKit ToT r118553

    2012-05-25  Dean Jackson  <dino@apple.com>

        Unreviewed, rolling out r112155.
        http://trac.webkit.org/changeset/112155
        https://bugs.webkit.org/show_bug.cgi?id=79389
        Hitch (due to style recalc?) when starting CSS3 animation

        This caused a number of issues, including:
        https://bugs.webkit.org/show_bug.cgi?id=87146
        https://bugs.webkit.org/show_bug.cgi?id=84194
        <rdar://problem/11506629>
        <rdar://problem/11267408>
        <rdar://problem/11531859>

        * dom/Element.cpp:
        (WebCore::Element::recalcStyle):

2012-06-08  Alexey Proskuryakov  <ap@apple.com>

        <rdar://problem/11412294> Some of WebCore’s new default Asian fonts are not available on iOS

        Merged ToT WebKit r119877.

    2012-06-08  Alexey Proskuryakov  <ap@apple.com>
    
            <rdar://problem/11412294> Some of WebCore’s new default Asian fonts are not available on iOS
    
            Reviewed by Dan Bernstein.
    
            * page/mac/SettingsMac.mm: (WebCore::Settings::initializeDefaultFontFamilies):
            Updated fonts to ones suggested by Julio Gonzalez for iOS specifically.
    
2012-06-08  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/11221020> REGRESSION: "Don't load remote images" feature is broken (-webView:didFinishLoadForFrame: never called)

        Reviewed by Antti Koivisto.

        On iOS, we defer sending willSendRequest callback when we are in the middle of style
        resolution. This means that the request is on a pending request queue in
        ResourceLoadScheduler. We also set the SubresourceLoader field in the CachedResource and add the
        CachedResource to the MemoryCache. When we do start the load after we are out of style
        resolution, the load fails promptly. However, we don't remove the CachedResource from the
        MemoryCache and don't clear out the loader field which results in the didFinishLoad callback
        never being fired because CachedResourceLoader believes we have a load still pending.

        The fix is to do a check to see if the load failed and if so clear out the state so that we
        make the final callback.

        * loader/ResourceLoadScheduler.cpp:
        (WebCore::ResourceLoadScheduler::servePendingRequests):
        * loader/ResourceLoader.h:
        (WebCore::ResourceLoader::clearCachedResourceAfterSynchronousCancel):
        * loader/SubresourceLoader.cpp:
        (WebCore):
        (WebCore::SubresourceLoader::clearCachedResourceAfterSynchronousCancel):
        * loader/SubresourceLoader.h:
        (SubresourceLoader):
        * loader/cache/CachedResource.cpp:
        (WebCore::CachedResource::clearLoaderAfterSynchronousCancel):
        (WebCore):
        * loader/cache/CachedResource.h:
        (CachedResource):

2012-06-08  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/10639284> 2525797 Cannot scroll when an accelerated-scrollable div is shown in a callback and an iframe is present on the page

        Reviewed by Joseph Pecoraro.

        RenderLayerCompositor::flushPendingLayerChanges() is called on each Frame in a Frame
        hierarchy, but we called willSyncCompositingLayers/didSyncCompositingLayers on
        every frame.
        
        On a page with an <iframe>, this could cause UIKit to think that there are scrolling layers
        ready to be parented while layout it still pending on the main frame, and therefore before
        a compositing update has actually parented those layers.
        
        Fix by taking note of the 'isFlushRoot' parameter, and only calling back to UIKit
        via ChromeClient when we're flushing changes on the FrameView that is the root
        of the current flush.

        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::flushPendingLayerChanges):

2012-06-07  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/11611155> Optimize FrameView scrollXForFixedPosition/scrollYForFixedPosition

        Merged ToT WebKit r119736.

    2012-06-07  Simon Fraser  <simon.fraser@apple.com>
    
            Optimize FrameView::scrollXForFixedPosition() / scrollYForFixedPosition()
            https://bugs.webkit.org/show_bug.cgi?id=88475
    
            Reviewed by Sam Weinig.
            
            FrameView's scrollXForFixedPosition() and scrollYForFixedPosition()
            methods were often called together, but they do duplicate work,
            including calling into platform widget code which might be slow.
            
            Fix by converting scrollOffsetForFixedPosition() from being a wrapper
            that just calls scrollXForFixedPosition() and scrollYForFixedPosition()
            to the method that does all the work, calling just once into platform
            widget code.
            
            Changed callers to use scrollOffsetForFixedPosition() rather than make
            two separate method calls.
            
            Added ScrollView::layoutSize() and visibleSize() methods for
            convenience.
            
            Removed FrameView::scrollXForFixedPosition and FrameView::scrollYForFixedPosition
            to avoid inefficient callers in future.
    
            No new tests; refactoring only.
    
            * page/FrameView.cpp:
            (WebCore::fixedPositionScrollOffset):
            (WebCore::FrameView::scrollOffsetForFixedPosition):
            * page/FrameView.h: Removed scrollXForFixedPosition and scrollYForFixedPosition.
            * platform/ScrollView.cpp:
            (WebCore::ScrollView::layoutSize):
            * platform/ScrollView.h:
            (WebCore::ScrollView::visibleSize):
            * rendering/RenderLayer.cpp:
            (WebCore::RenderLayer::backgroundClipRect):
            * rendering/RenderLayer.h:
            (WebCore::ClipRect::move):
            * rendering/RenderLayerCompositor.cpp:
            (WebCore::RenderLayerCompositor::requiresCompositingForPosition):
            * rendering/RenderView.cpp:
            (WebCore::RenderView::computeRectForRepaint):

2012-06-07  David Kilzer  <ddkilzer@apple.com>

        Add missing PLATFORM(IOS) macro to WebCore::video_playable_inlineMediaFeatureEval()

        * css/MediaQueryEvaluator.cpp:
        (WebCore::video_playable_inlineMediaFeatureEval): Add missing #if
        PLATFORM(IOS)/#endif macros around this method.  They should
        have been added in iOS WebKit r1080950.

2012-06-07  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/11564192> Offline reading list: Two-byte character in certain webpages are displayed as garbage

        Merged ToT WebKit r119644.

    2012-06-06  Brady Eidson  <beidson@apple.com>

        <rdar://problem/11575112> and https://bugs.webkit.org/show_bug.cgi?id=88428
        REGRESSION (r115654): Opening many non-English WebArchives shows obvious encoding issues

        Reviewed by Nate Chapin.

        Test: fast/loader/webarchive-encoding-respected.html

        * loader/DocumentLoader.cpp:
        (WebCore::DocumentLoader::commitData): Properly set the main resource encoding from the webarchive.

2012-06-07  Andy Estes  <aestes@apple.com>

        ChromeClient::needTouchEvents() is overridden by WebKit2
        Part of <rdar://problem/11531534> Merge iOS WebKit2 changes into puzzlebox

        Reviewed by Sam Weinig.

        WebKit2 implements needTouchEvents(), so ChromeClient should include
        the pure virtual function declaration.

        * loader/EmptyClients.h:
        * page/ChromeClient.h:

2012-06-07  Andy Estes  <aestes@apple.com>

        Export symbols needed by WebKit2
        Part of <rdar://problem/11531534> Merge iOS WebKit2 changes into puzzlebox

        Reviewed by Sam Weinig.

        * WebCore.exp.in:

2012-06-07  Andy Estes  <aestes@apple.com>

        Export wkSetHTTPCookieAcceptPolicy for WebKit2
        Part of <rdar://problem/11531534> Merge iOS WebKit2 changes into puzzlebox

        Reviewed by Sam Weinig.

        * WebCore.exp.in:
        * platform/ios/WebCoreSystemInterfaceIOS.mm:

2012-06-07  Andy Estes  <aestes@apple.com>

        EventHandler::handleTouchEvent() should return a bool indicating if the event was handled
        Part of <rdar://problem/11531534> Merge iOS WebKit2 changes into puzzlebox

        Reviewed by Darin Adler.

        WebKit2 expects EventHandler::handleTouchEvent() to return a bool
        indicating whether the event was handled. This matches how
        handleTouchEvent() behaves in open source.

        * WebCore.exp.in: Export symbol for handleTouchEvent().
        * page/EventHandler.h:
        * page/ios/EventHandlerIOSTouch.cpp:
        (WebCore::EventHandler::dispatchTouchEvent): Return a bool indicating
        if the event was handled.
        (WebCore::EventHandler::dispatchGestureEvent): Ditto.
        (WebCore::EventHandler::handleTouchEvent): Ditto.

2012-06-07  Andy Estes  <aestes@apple.com>

        Merged ToT WebKit r119687.

    2012-06-06  Andy Estes  <aestes@apple.com>

            Wrap uppercaseWord, lowercaseWord, and capitalizeWord with USE(APPKIT)
            https://bugs.webkit.org/show_bug.cgi?id=88504

            Reviewed by Dan Bernstein.

            uppercaseWord, lowercaseWord, and capitalizeWord are methods declared
            by NSResponder that subclasses are expected to implement. WebKit should
            only support these implementations on platforms that use AppKit.

            * WebCore.exp.in:
            * editing/Editor.cpp:
            * editing/Editor.h:
            * loader/EmptyClients.h:
            * page/ContextMenuController.cpp:
            * page/EditorClient.h:

2012-06-06  Enrica Casucci  <enrica@apple.com>

        <rdar://problem/11575214> REGRESSION (10A323): After single tap on input element, no caret and no text inserted from keyboard.
        
        Fixes a regression introduced in https://svn.apple.com/trac/puzzlebox/changeset/1127111.
        canMouseDownStartSelect should not always return false, otherwise no selection is created in input elements.

        Reviewed by Benjamin Poulain.

        * page/EventHandler.cpp:
        (WebCore::canMouseDownStartSelect): Removed platform guard and relevant code.

2012-06-05  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/11333167> Consider not creating backing store for a preserves-3d layer

        Merge ToT WebKit r119529.
        
        This change reduces backing store allocation on m.daum.net from 1.46MP to zero, and on
        app.ft.com from 2.84MP to zero.

    2012-06-05  Simon Fraser  <simon.fraser@apple.com>
    
            Avoid creating compositing layers for preserve-3d without transformed descendants
            https://bugs.webkit.org/show_bug.cgi?id=88115
    
            Reviewed by Antti Koivisto.
            
            Avoid creating compositing layers, and therefore using excess backing store,
            for elements that have -webkit-transform-style: preserve-3d, but no 3D-transformed
            descendants that would be affected by that preserve-3d.
            
            Test: compositing/layer-creation/no-compositing-for-preserve-3d.html
    
            * rendering/RenderLayer.h: Replace the "mustOverlap" flag with a enum
            that describes the different reasons for indirect compositing, so that
            we can use that information to decide whether to allocate backing store.
            (WebCore::RenderLayer::setIndirectCompositingReason):
            (WebCore::RenderLayer::indirectCompositingReason):
            (WebCore::RenderLayer::mustCompositeForIndirectReasons):
            * rendering/RenderLayer.cpp:
            (WebCore::RenderLayer::RenderLayer): Initialize m_indirectCompositingReason
    
            * rendering/RenderLayerCompositor.h: New out param for computeCompositingRequirements()
            that is uses to indicate that a 3d-transformed descendant has been encountered.
            Rename requiresCompositingWhenDescendantsAreCompositing() to requiresCompositingForIndirectReason(),
            and return the reason as an out param.
            
            * rendering/RenderLayerCompositor.cpp:
            (WebCore::RenderLayerCompositor::updateCompositingLayers): Pass in the saw3DTransform
            param to computeCompositingRequirements().
            (WebCore::RenderLayerCompositor::computeCompositingRequirements): Return a flag
            from computeCompositingRequirements() that is set to true if we've seen descendants
            that have 3d transforms. This is later used to decide whether to composite for
            perspective or preserve-3d.
            Change the "mustOverlapCompositedLayers" code to use the new "indirect compositing"
            enum flags.
            After enumerating children, call requiresCompositingForIndirectReason() and 
            record the reason in the layer.
            (WebCore::RenderLayerCompositor::needsToBeComposited): Use mustCompositeForIndirectReasons() now.
            (WebCore::RenderLayerCompositor::requiresOwnBackingStore): Consult the indirect compositing
            reason rather than just looking for the overlap flag.
            (WebCore::RenderLayerCompositor::reasonForCompositing): Now that we have more information
            about indirect compositing reasons, the logging can be more detailed.
            (WebCore::RenderLayerCompositor::requiresCompositingForTransform): This now only looks
            for 3d transforms. We now treat perspective and perserve-3d as "indirect" reasons, because
            whether they composite depends on descendants having non-affine transforms.
            (WebCore::RenderLayerCompositor::requiresCompositingForIndirectReason): Includes the logic
            previously in requiresCompositingWhenDescendantsAreCompositing(), and now determines
            whether to composite for preserve-3d and perspective, based on whether we have transformed descendants.


2012-06-05  Simon Fraser  <simon.fraser@apple.com>

        Merge ToT WebKit r119172.

    2012-05-31  Simon Fraser  <simon.fraser@apple.com>
    
            RenderLayerCompositor cleanup: make RenderGeometryMap part of the OverlapMap
            https://bugs.webkit.org/show_bug.cgi?id=88021
    
            Reviewed by James Robinson.
            
            We only ever use the RenderGeometryMap when we have an OverlapMap, so make
            it a member of the OverlapMap.
    
            No behavior change.
    
            * rendering/RenderLayerCompositor.cpp:
            (RenderLayerCompositor::OverlapMap):
            (WebCore::RenderLayerCompositor::OverlapMap::geometryMap):
            (WebCore::RenderLayerCompositor::updateCompositingLayers):
            (WebCore::RenderLayerCompositor::addToOverlapMap):
            (WebCore::RenderLayerCompositor::addToOverlapMapRecursive):
            (WebCore::RenderLayerCompositor::computeCompositingRequirements):
            * rendering/RenderLayerCompositor.h:
            (WebCore):
            (RenderLayerCompositor):

2012-06-05  Simon Fraser  <simon.fraser@apple.com>

        Merge ToT WebKit r119151.
        
    2012-05-31  Simon Fraser  <simon.fraser@apple.com>
    
            Remove some duplicate code in RenderLayerCompositor
            https://bugs.webkit.org/show_bug.cgi?id=88009
    
            Reviewed by Anders Carlsson.
    
            RenderLayerCompositor::hasNonAffineTransform() has the same code
            as the existing RenderLayer::has3DTransform(), so just use the
            RenderLayer method and remove hasNonAffineTransform().
    
            No behavior change.
            
            * rendering/RenderLayerCompositor.cpp:
            (WebCore::RenderLayerCompositor::computeCompositingRequirements):
            * rendering/RenderLayerCompositor.h:
            (RenderLayerCompositor):
        
2012-06-05  Andy Estes  <aestes@apple.com>

        <rdar://problem/11553557> REGRESSION(10A321): Plugins are broken

        Merged ToT WebKit r119506.

    2012-06-05  Andy Estes  <aestes@apple.com>

            REGRESSION (r118197): PluginStrategy should be used even if ENABLE(NETSCAPE_PLUGIN_API) is false
            https://bugs.webkit.org/show_bug.cgi?id=88296

            Reviewed by Dan Bernstein.

            refresh() and initPlugins() should call into PluginStrategy even if
            ENABLE(NETSCAPE_PLUGIN_API) is false. Some ports support non-Netscape
            plug-ins, so PluginStrategy should be consulted even if Netscape
            plug-ins specifically are disabled.

            Ports that support platform strategies but not Netscape plug-ins should
            handle this inside their PluginStrategy rather than modifying generic
            plug-in code.

            * plugins/PluginData.cpp:
            (WebCore::PluginData::refresh):
            (WebCore::PluginData::initPlugins):

2012-06-04  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/11594516> Leaking ClipRects (88282)

        Merged ToT WebKit r119458.

    2012-06-04  Simon Fraser  <simon.fraser@apple.com>
    
            Leaking ClipRects
            https://bugs.webkit.org/show_bug.cgi?id=88282
    
            Reviewed by Dan Bernstein.
    
            In r118562 I made the ClipRectsCache use RefPtr<ClipRects>. However, ClipRects
            was initialized with m_refCnt=0, not 1 as adoptRef() and friends expect. Also,
            there was a manual ref() in RenderLayer::updateClipRects() which this patch removes.
    
            * rendering/RenderLayer.cpp:
            (WebCore::RenderLayer::updateClipRects):
            * rendering/RenderLayer.h:
            (WebCore::ClipRects::ClipRects):

2012-06-04  Jeffrey Pfau  <jpfau@apple.com>

        <rdar://problem/11340903> Crash in Document::removedLastRef when HTMLLinkElement is deallocated inside GC when running Alexa1000 test (88250)

        Merged ToT WebKit r119439

    2012-06-04  Jeffrey Pfau  <jpfau@apple.com>

        Document cleanup can get confused if parser still exists
        https://bugs.webkit.org/show_bug.cgi?id=88250

        Reviewed by Geoffrey Garen.

        No new tests; no behavior changes.

        * dom/Document.cpp:
        (WebCore::Document::removedLastRef): Detach parser earlier

2012-06-04  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/11589880> Random ASSERT(enclosingIntRect(rendererMappedResult) == enclosingIntRect(FloatQuad(result).boundingBox())) with fixed position layers

        Reviewed by Antti Koivisto.
        
        Cleanup after merging r118567; RenderView::pushMappingToContainer() requires
        the same #ifdefs that mapLocalToContainer() has.

        * rendering/RenderView.cpp:
        (WebCore::fixedPositionOffset):
        (WebCore::RenderView::pushMappingToContainer):

2012-06-04  Antti Koivisto  <antti@apple.com>

        <rdar://problem/11104600> Accelerated overflow-scroll repaints on every scroll change when firing events

        Reviewed by Simon Fraser.

        Don't repaint on overflow:scroll content layer offset changes. Scrolling does not affect the
        content as the offset is compensated away during painting.
        
        The smooth scrolling code is not in the open source yet.

        * platform/graphics/GraphicsLayer.h:
        (GraphicsLayer):
        (WebCore::GraphicsLayer::setOffsetFromRendererWithoutDisplay):
        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::updateGraphicsLayerGeometry):

2012-06-04  Michael Saboff  <msaboff@apple.com>

        <rdar://problem/11264601> iOS: Call Heap::discardAllCompiledCode() in low memory situations

        Reviewed by Ian Henderson.

        Added export for WebCore::GCController::discardAllCompiledCode().

        No testable behavior change.

        * WebCore.exp.in:

2012-06-04  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/11577240> Random ASSERT(enclosingIntRect(rendererMappedResult) == enclosingIntRect(FloatQuad(result).boundingBox()));

        Merged TOT WebKit r118052.

    2012-05-22  Simon Fraser  <simon.fraser@apple.com>
    
            Use the same animation begin time while updating compositing layers
            https://bugs.webkit.org/show_bug.cgi?id=87080
    
            Reviewed by Dean Jackson.
            
            Tidied up some beginAnimationUpdate/endAnimationUpdate logic,
            but further cleaning is required. We currently bracket some calls
            to recaclcStyle() with begin/endAnimationUpdate, but not all.
            We don't bracket layout, or compositing updates. This patch
            adds bracketing around compositing updates, in order to be
            able to add some assertions in a later patch that rely on
            RenderLayer::currentTransform() giving consistent results,
            since currentTransform() depends on the animation begin time.
            
            Made AnimationController::beginAnimationUpdate() and
            AnimationController::endAnimationUpdate() nestable by adding
            a counter.
            
            Added a stack-based class, AnimationUpdateBlock, which
            calls begin/endAnimationUpdate.
            
            Replaced calls to begin/endAnimationUpdate in Document::updateStyleIfNeeded()
            and Document::styleResolverChanged() with AnimationUpdateBlock. Filed a bug
            to cover other calls to recalcStyle which might need this (87159).
            
            Removed a call to beginAnimationUpdate() in Document::implicitOpen(),
            which was added in r42415. I believe that r57390 makes this unnecessary,
            and was not able to reproduce the original bug after removing it. It
            was the only unpaired beginAnimationUpdate call.
            
            Made AnimationControllerPrivate::getAnimatedStyleForRenderer() not 
            use a new beginTime each time it was called, so its beginTime now
            depends on some earlier beginAnimationUpdate.
            
            Fixed CSSComputedStyleDeclaration::getPropertyCSSValue() to use
            an AnimationUpdateBlock so that calls to computed style do
            use the current time to compute an animating value (as before).
    
            Not testable.
    
            * css/CSSComputedStyleDeclaration.cpp:
            (WebCore::CSSComputedStyleDeclaration::getPropertyCSSValue):
            * dom/Document.cpp:
            (WebCore::Document::updateStyleIfNeeded):
            (WebCore::Document::implicitOpen):
            (WebCore::Document::styleResolverChanged):
            * page/animation/AnimationController.cpp:
            (WebCore::AnimationControllerPrivate::getAnimatedStyleForRenderer):
            (WebCore::AnimationController::AnimationController):
            (WebCore::AnimationController::beginAnimationUpdate):
            (WebCore::AnimationController::endAnimationUpdate):
            * page/animation/AnimationController.h:
            (AnimationController):
            (WebCore):
            (AnimationUpdateBlock):
            (WebCore::AnimationUpdateBlock::AnimationUpdateBlock):
            (WebCore::AnimationUpdateBlock::~AnimationUpdateBlock):
            * rendering/RenderLayerCompositor.cpp:
            (WebCore::RenderLayerCompositor::updateCompositingLayers):

2012-06-04  Antti Koivisto  <antti@apple.com>

        <rdar://problem/10156800> MobileSafari crashed in WebCore::RenderView::getRetainedWidgets after being unresponsive (9A330)

        Merged TOT WebKit r119378.

    2012-06-04  Antti Koivisto  <antti@apple.com>

        Crash in WebCore::RenderView::getRetainedWidgets
        https://bugs.webkit.org/show_bug.cgi?id=88217

        Reviewed by Kenneth Rohde Christiansen.
        
        There is no known repro, the crash has been seen on the field. It is likely that it happens with frame
        flattening enabled only.

        Null check root renderer in performPostLayoutTasks. The root can legitimely be null for several reasons and
        is mostly null checked everywhere else.

        * page/FrameView.cpp:
        (WebCore::FrameView::performPostLayoutTasks):

2012-06-02  Andy Estes  <aestes@apple.com>

        Merged ToT WebKit r119354.

    2012-06-02  Andy Estes  <aestes@apple.com>

            __ZNK7WebCore4Node27traverseNextAncestorSiblingEv should be exported even if ENABLE(FULLSCREEN_API) is false
            https://bugs.webkit.org/show_bug.cgi?id=88184

            Reviewed by Dan Bernstein.

            Node::traverseNextAncestorSibling() is called in several inline
            functions defined in ContainerNode.h (a private header), so its symbol
            needs to be exported regardless of whether full-screen API is enabled.

            * WebCore.exp.in:

2012-06-01  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/11407365> iBooks crashed in WebCore::EllipsisBox::nodeAtPoint in the new store

        Merged TOT WebKit r119227.

    2012-06-01  Dan Bernstein  <mitz@apple.com>

        Layout not updated after setting -webkit-line-clamp to none
        https://bugs.webkit.org/show_bug.cgi?id=88049

        Reviewed by Abhishek Arya.

        Test: fast/flexbox/line-clamp-removed-dynamically.html

        * rendering/RenderDeprecatedFlexibleBox.cpp:
        (WebCore::RenderDeprecatedFlexibleBox::styleWillChange): Added. Calls clearLineClamp if
        line-clamp will change to none.
        (WebCore::RenderDeprecatedFlexibleBox::clearLineClamp): Added. Marks possibly-clamped
        children for layout and clears truncation from blocks.
        * rendering/RenderDeprecatedFlexibleBox.h:

2012-05-31  Andy Estes  <aestes@apple.com>

        Merged ToT WebKit r119145.

    2012-05-31  Andy Estes  <aestes@apple.com>

            Disentangle code that relies on USE(AUTOMATIC_TEXT_REPLACEMENT) from that which merely relies on PLATFORM(MAC)
            https://bugs.webkit.org/show_bug.cgi?id=87933

            Reviewed by Dan Bernstein.

            * editing/Editor.cpp:
            * editing/Editor.h:
            * loader/EmptyClients.h:
            * page/ContextMenuController.cpp:
            (WebCore::ContextMenuController::contextMenuItemSelected):
            * page/EditorClient.h:

2012-05-30  Benjamin Poulain  <bpoulain@apple.com>

        <rdar://problem/11501209> 10% of the time under EventHandler::mouseDown is in two VisiblePosition constructors

        Reviewed by Simon Fraser.

        On iOS, the selection is not handled through WebCore mouse event handling, we should skip the computation of
        the selection.

        Instead of #ifdefing everything out, this simply defines m_mouseDownMayStartSelect to false by changing
        canMouseDownStartSelect().

        * page/EventHandler.cpp:
        (WebCore::canMouseDownStartSelect):

2012-05-30  Simon Fraser  <simon.fraser@apple.com>

        Merged ToT WebKit r118957.

    2012-05-29  Adrienne Walker  <enne@google.com>
    
            Transformed fixed position layers have an incorrect overlap map entry
            https://bugs.webkit.org/show_bug.cgi?id=64201
    
            Reviewed by Darin Adler.
    
            Previously, layers that both had a transform and were fixed position
            were not considered as being fixed position in RenderGeometryMap or in
            RenderBox::mapLocalToContainer (although this case is not incorrect in
            the case of painting, so an external caller likely adjusts for this).
    
            Tests: compositing/layer-creation/fixed-position-and-transform.html
                   compositing/layer-creation/fixed-position-under-transform.html
    
            * rendering/RenderBox.cpp:
            (WebCore::RenderBox::mapLocalToContainer):
            * rendering/RenderGeometryMap.cpp:
            (WebCore::RenderGeometryMap::mapToAbsolute):

2012-05-30  Simon Fraser  <simon.fraser@apple.com>

        Merged ToT WebKit r118828.

    2012-05-29  Simon Fraser  <simon.fraser@apple.com>
    
            Incomplete repaint on twitter.com when replying to a tweet
            https://bugs.webkit.org/show_bug.cgi?id=87553
    
            Reviewed by Dean Jackson.
            
            Style changes can cause a compositing layer to change between
            requiring its own backing store or not, e.g. with the addition
            or removal of a transform.
            
            When that happens, we need to repaint the ancesetor layer that
            this layer was, or will be drawing into.
            
            Factored some code out of layerWillBeRemoved() to be able to
            also call it from setRequiresOwnBackingStore().
    
            New manual test, ManualTests/compositing/requires-backing-change.html.
            I was not able to get an automated pixel test to work.
    
            * rendering/RenderLayerBacking.cpp:
            (WebCore::RenderLayerBacking::setRequiresOwnBackingStore):
            * rendering/RenderLayerCompositor.cpp:
            (WebCore::RenderLayerCompositor::updateCompositingLayers): Remove trailing whitespace.
            (WebCore::RenderLayerCompositor::repaintInCompositedAncestor):
            (WebCore::RenderLayerCompositor::layerWillBeRemoved):
            * rendering/RenderLayerCompositor.h:

2012-05-29  Simon Fraser  <simon.fraser@apple.com>

        Merged ToT WebKit r118617.

    2012-05-26  Simon Fraser  <simon.fraser@apple.com>
    
            fast/block/inline-children-root-linebox-crash.html asserts after r118567
            https://bugs.webkit.org/show_bug.cgi?id=87544
    
            Reviewed by Darin Adler.
            
            RenderInline::offsetFromContainer() set offsetDependsOnPoint to true based
            on the container's flipped writing mode. However, offsetFromContainer() would
            then overwrite that, since it only checked for columns.
            
            Fix by having RenderInline::offsetFromContainer() check for flipping on
            the container. This fixes the assertion.
            
            The new testcase exercises fixes another issue; unlike mapLocalToAbsolute(),
            RenderGeometryMap::absoluteRect() didn't pass the rect center point through
            the mapping, which resulted in a different result in some flipping cases.
    
            Test: compositing/geometry/flipped-blocks-inline-mapping.html
    
            * rendering/RenderGeometryMap.cpp:
            (WebCore::RenderGeometryMap::absoluteRect):
            * rendering/RenderInline.cpp:
            (WebCore::RenderInline::offsetFromContainer):
            (WebCore::RenderInline::pushMappingToContainer):

2012-05-29  Simon Fraser  <simon.fraser@apple.com>

        Merged ToT WebKit r118572.

    2012-05-25  Simon Fraser  <simon.fraser@apple.com>
    
            Build fix: add TransformationMatrix ctor from an AffineTransform.
    
            * platform/graphics/transforms/TransformationMatrix.cpp:
            (WebCore::TransformationMatrix::TransformationMatrix):
            (WebCore):
            * platform/graphics/transforms/TransformationMatrix.h:
            (TransformationMatrix):

2012-05-29  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/11331899> Inception flipping transition Performance Slow on J2 and on K9x
        <rdar://problem/11428383> Touch-based panning in iTunes store content is choppy    
    
        Merged ToT WebKit r118567.

    2012-05-25  Simon Fraser  <simon.fraser@apple.com>
    
            Terrible performance on http://alliances.commandandconquer.com/ and http://www.lordofultima.com/
            https://bugs.webkit.org/show_bug.cgi?id=84410
    
            Reviewed by Dave Hyatt.
            
            First part of fixing O(N^2) issues when walking the RenderLayer tree
            for computeCompositingRequirements().
            
            For each layer that goes into the OverlapMap, we were computing an absolute
            layer bounds, which requires walking back to the root of the tree.
            Optimize this when possible by storing a stack of offsets as we walk
            the tree, and using this stack to do the mapping.
            
            The stack of offsets and transforms is managed by RenderGeometryMap.
            When visiting a RenderLayer, RenderLayerCompositor pushes onto
            the geometry map stack data about offsets and transforms between
            the current layer and its stacking-parent. RenderGeometryMap handles
            the case where the previous renderer pushed is between the current
            renderer and its container. RenderGeometryMap can also handle callers
            pushing renderers with multiple containers between them.
            
            RenderGeometryMap stores some flags about whether the set of mapping
            steps in the stack involve transforms, fixed position, or special non-uniform
            mappings like CSS columns. In some cases, it falls back to mapping via
            renderers.
    
            Once constructed, the RenderGeometryMap stack can be used to map multiple
            rects or points efficiently. Stacks consisting of simple offsets are
            collapsed to a single offset.
            
            Mappings between renderers and their containers are pushed by pushMappingToContainer()
            methods, which are similar to mapLocalToContainer() methods. Having this code
            in RenderObjects was deemed preferable to handling columns, transforms etc. all in
            RenderLayer code.
    
            Tested by assertions in RenderGeometryMap code that its mapping matches
            mapping via localToAbsolute() calls.
            
            RenderLayerCompositor::updateCompositingLayers() creates a RenderGeometryMap,
            and pushes and pops layer renderers as it visits them. The geometry map is used
            by RenderLayerCompositor::addToOverlapMap() when computing absolute layer bounds.
            
            Futher optimizations in RenderGeometryMap are possible, especially with stacks that
            have many offsets and a few transforms.
    
            Tests: compositing/geometry/composited-in-columns.html
                   compositing/geometry/flipped-writing-mode.html
    
            * CMakeLists.txt: Add RenderGeometryMap
            * GNUmakefile.list.am: Ditt
            * Target.pri: Ditto
            * WebCore.gypi: Ditto
            * WebCore.vcproj/WebCore.vcproj: Ditto
            * WebCore.xcodeproj/project.pbxproj: Ditto
            * rendering/RenderBox.cpp:
            (WebCore::RenderBox::absoluteContentBox):
            (WebCore::RenderBox::pushMappingToContainer):
            (WebCore::RenderBox::offsetFromContainer):
            * rendering/RenderBox.h:
            * rendering/RenderGeometryMap.cpp: Added.
            (RenderGeometryMapStep):
            (WebCore::RenderGeometryMapStep::RenderGeometryMapStep):
            (WebCore::RenderGeometryMapStep::mapPoint):
            (WebCore::RenderGeometryMapStep::mapQuad):
            (WebCore::RenderGeometryMap::RenderGeometryMap):
            (WebCore::RenderGeometryMap::~RenderGeometryMap):
            (WebCore::RenderGeometryMap::absolutePoint):
            (WebCore::RenderGeometryMap::absoluteRect):
            (WebCore::RenderGeometryMap::mapToAbsolute):
            (WebCore::RenderGeometryMap::pushMappingsToAncestor):
            (WebCore::RenderGeometryMap::push):
            (WebCore::RenderGeometryMap::pushView):
            (WebCore::RenderGeometryMap::popMappingsToAncestor):
            (WebCore::RenderGeometryMap::stepInserted):
            (WebCore::RenderGeometryMap::stepRemoved):
            * rendering/RenderGeometryMap.h: Added.
            (RenderGeometryMap):
            (WebCore::RenderGeometryMap::hasNonUniformStep):
            (WebCore::RenderGeometryMap::hasTransformStep):
            (WebCore::RenderGeometryMap::hasFixedPositionStep):
            * rendering/RenderInline.cpp:
            (WebCore::RenderInline::offsetFromContainer):
            (WebCore::RenderInline::pushMappingToContainer):
            * rendering/RenderInline.h:
            (RenderInline):
            * rendering/RenderLayerCompositor.cpp:
            (WebCore::RenderLayerCompositor::updateCompositingLayers):
            (WebCore::RenderLayerCompositor::addToOverlapMap):
            (WebCore::RenderLayerCompositor::addToOverlapMapRecursive):
            (WebCore::RenderLayerCompositor::computeCompositingRequirements):
            * rendering/RenderLayerCompositor.h:
            (RenderLayerCompositor):
            * rendering/RenderObject.cpp:
            (WebCore::RenderObject::mapLocalToContainer):
            (WebCore::RenderObject::pushMappingToContainer):
            (WebCore::RenderObject::offsetFromContainer):
            (WebCore::RenderObject::container):
            * rendering/RenderObject.h:
            * rendering/RenderTableCell.cpp:
            (WebCore::RenderTableCell::offsetFromContainer):
            * rendering/RenderTableCell.h:
            (RenderTableCell):
            * rendering/RenderView.cpp:
            (WebCore::RenderView::pushMappingToContainer):
            * rendering/RenderView.h:
            * rendering/svg/RenderSVGForeignObject.cpp:
            (WebCore::RenderSVGForeignObject::pushMappingToContainer):
            * rendering/svg/RenderSVGForeignObject.h:
            (RenderSVGForeignObject):
            * rendering/svg/RenderSVGInline.cpp:
            (WebCore::RenderSVGInline::pushMappingToContainer):
            * rendering/svg/RenderSVGInline.h:
            (RenderSVGInline):
            * rendering/svg/RenderSVGModelObject.cpp:
            (WebCore::RenderSVGModelObject::pushMappingToContainer):
            * rendering/svg/RenderSVGModelObject.h:
            (RenderSVGModelObject):
            * rendering/svg/RenderSVGRoot.cpp:
            (WebCore::RenderSVGRoot::pushMappingToContainer):
            * rendering/svg/RenderSVGRoot.h:
            (RenderSVGRoot):
            * rendering/svg/RenderSVGText.cpp:
            (WebCore::RenderSVGText::pushMappingToContainer):
            * rendering/svg/RenderSVGText.h:
            (RenderSVGText):
            * rendering/svg/SVGRenderSupport.cpp:
            (WebCore::SVGRenderSupport::pushMappingToContainer):
            * rendering/svg/SVGRenderSupport.h:
            (SVGRenderSupport):

2012-05-29  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/11331899> Inception flipping transition Performance Slow on J2 and on K9x
        <rdar://problem/11428383> Touch-based panning in iTunes store content is choppy    
    
        Merged ToT WebKit r118612.

    2012-05-26  Simon Fraser  <simon.fraser@apple.com>
    
            Clip rects assertion when hovering div with transform
            https://bugs.webkit.org/show_bug.cgi?id=87580
    
            Reviewed by Eric Seidel.
            
            Hit testing used to use temporary clip rects in composited documents,
            until r118562. Now that we cache clip rects for hit testing, we need
            to clear the cache on descendant layers when a layer gains or loses
            a transform.
    
            Test: fast/layers/clip-rects-assertion.html
    
            * rendering/RenderLayer.cpp:
            (WebCore::RenderLayer::updateTransform):

2012-05-29  Simon Fraser  <simon.fraser@apple.com>
    
        <rdar://problem/11331899> Inception flipping transition Performance Slow on J2 and on K9x
        <rdar://problem/11428383> Touch-based panning in iTunes store content is choppy    
    
        Merged ToT WebKit r118562.

    2012-05-25  Simon Fraser  <simon.fraser@apple.com>
    
            Cache absolute clip rects on RenderLayer for compositing overlap testing
            https://bugs.webkit.org/show_bug.cgi?id=87212
    
            Reviewed by Dave Hyatt.
            
            Enhance the cache of ClipRects on RenderLayers to store three
            different types of ClipRects, rather than just one.
            
            We need to compute clip rects relative to different layers
            for different purposes. For painting, we compute relative to
            the compositing layer which is acting as a painting root.
            For hit testing, we compute relative to the root, except
            for transformed layers. For composting overlap testing, we
            compute relative to the root ("absolute"). At other times, we do one-off
            computation which we never want to cache ("temporary clip rects").
            
            This change allows us to cache rects for hit testing, and for
            compositing overlap testing. This has huge performance benefits
            on some pages (bug 84410).
            
            This change also makes ClipRects not arena-allocated, so we
            can use RefPtr<ClipRect>.
    
            No testable behavior change.
    
            * rendering/RenderBoxModelObject.cpp:
            (WebCore::RenderBoxModelObject::willBeDestroyed): No need for the
            explicit clipRects teardown, since clipRects don't need a live
            RenderObject for arena-based destruction.
    
            * rendering/RenderLayer.cpp: Remove arena-related new and delete.
            (WebCore::RenderLayer::RenderLayer): No need to explicitly initialize m_clipRects,
            since it's an OwnPtr now.
            (WebCore::RenderLayer::~RenderLayer): No explicit clipRect teardown required.
            (WebCore::RenderLayer::clippingRootForPainting): Renamed to make its purpose
            more obvious.
            (WebCore::RenderLayer::paintLayer): Use the TemporaryClipRects type when necessary.
            (WebCore::RenderLayer::paintLayerContents): Ditto
            (WebCore::RenderLayer::hitTestLayer): No longer need to use temporary clipRects when
            hit testing since we cache clip rects for hit testing.
            (WebCore::RenderLayer::updateClipRects): Take a ClipRectsType and pass it through.
            (WebCore::RenderLayer::calculateClipRects): Ditto
            (WebCore::RenderLayer::parentClipRects): Ditto
            (WebCore::RenderLayer::backgroundClipRect): Ditto
            (WebCore::RenderLayer::calculateRects): Take ClipRectsType, which obviates temporaryClipRects.
            (WebCore::RenderLayer::childrenClipRect): Use clippingRootForPainting().
            (WebCore::RenderLayer::selfClipRect): Ditto
            (WebCore::RenderLayer::localClipRect): Ditto
            (WebCore::RenderLayer::clearClipRectsIncludingDescendants): Take a type of clip rect to clear
            (include all). Allows us to just clear painting clip rects.
            (WebCore::RenderLayer::clearClipRects):
    
            * rendering/RenderLayer.h:
            (WebCore::ClipRects::create): We don't use RefCounted<> in order to use a bit in
            the refCount for a flag. Add create() method.
            (WebCore::ClipRects::deref): No longer arena-allocated.
            (WebCore::ClipRectsCache::ClipRectsCache): Struct that holds a small
            array of the 3 types of clipRects (and, in debug, the layer relative
            to which they were computed).
            (WebCore::RenderLayer::clipRects):
    
            * rendering/RenderLayerBacking.cpp:
            (WebCore::RenderLayerBacking::updateCompositedBounds): Use AbsoluteClipRects; rootLayer
            is always the RenderView's layer here.
            (WebCore::RenderLayerBacking::updateGraphicsLayerGeometry): Use TemporaryClipRects.
            (WebCore::RenderLayerBacking::setRequiresOwnBackingStore): When this variable changes,
            we need to invalidate painting clipRects, since it affects the ancestor relative to which
            those rects are computed.
    
            * rendering/RenderLayerBacking.h:
            * rendering/RenderLayerCompositor.cpp:
            (WebCore::RenderLayerCompositor::updateBacking): When the composited state
            of a layer changes, we have to clear all descendant clip rects, since this
            can affect the layers relative to which clip rects are computed.
            (WebCore::RenderLayerCompositor::addToOverlapMap): Use AbsoluteClipRects.
            (WebCore::RenderLayerCompositor::computeCompositingRequirements): No need
            to call updateLayerPosition(), since that should have always happened after
            layout. That call cleared clip rects, so removing it is very beneficial.
            (WebCore::RenderLayerCompositor::clippedByAncestor): Use TemporaryClipRects.
    
            * rendering/RenderTreeAsText.cpp:
            (WebCore::writeLayers): Use TemporaryClipRects.
    
2012-05-30  Justin Garcia  <justin.garcia@apple.com>

        <rdar://problem/11004016> WebCore doesn't fall back to Geeza Pro for ﷼, Arabic Presentation Forms A/B don't either

        Reviewed by Joseph Pecoraro.

        * platform/graphics/ios/FontCacheIOS.mm:
        (WebCore::FontCache::getFontDataForCharacters): Use the Arabic fallback font for Arabic Presentation 
        Forms A and B.

2012-05-30  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/11228494> REGRESSION (Sundance): Data-detected phone number link is placed at wrong location

        Reviewed by Enrica Casucci.

        * html/parser/HTMLTreeBuilder.cpp:
        (WebCore::HTMLTreeBuilder::insertPhoneNumberLink): Added a call to HTMLConstructionSite::executeQueuedTasks()
        after processing the <a> tag. This ensures that the a element is inserted into the tree, and matches what
        happens in constructTreeFromAtomicToken() in the normal case where the tokenizer is the one emitting the <a> tag.

2012-05-30  Matt Lilek  <mrl@apple.com>

        <rdar://problem/11551996> PlatformClockCM.mm: use CMAudioClockCreate() instead of CMAudioDeviceClockCreate() on iOS

        Patch by Jianhong Jiang <jjemail@apple.com>.

        Reviewed by Jer Noble.

        * platform/mac/PlatformClockCM.mm:
        (PlatformClockCM::PlatformClockCM):

2012-05-29  Alexey Proskuryakov  <ap@apple.com>

    <rdar://problem/11466119> REGRESSION: Loading DefaultFonts may have 10ms+ launch time impact

    Merge from open source WebKit.

    2012-05-29  Alexey Proskuryakov  <ap@apple.com>
    
            [Mac] Move DefaultFonts.plist to C++ code
            https://bugs.webkit.org/show_bug.cgi?id=87560
    
            Reviewed by Dan Bernstein.
    
            * DerivedSources.make:
            * Resources/DefaultFonts.plist.in: Removed.
            * WebCore.xcodeproj/project.pbxproj:
            * page/mac/SettingsMac.mm: (WebCore::Settings::initializeDefaultFontFamilies):
            Instead of having a separate configuration file, just hardcode the settings in C++.
    
2012-05-27  Benjamin Poulain  <bpoulain@apple.com>

        <rdar://problem/11476505> Crash in -[UIWebTouchEventsGestureRecognizer _hitTestTouches:] opening Google webapps

        Merge r118631 from OpenSource WebKit.

    2012-05-27  Benjamin Poulain  <bpoulain@apple.com>

        When pages are loaded from AppCache with DeferredLoading, willSendRequest() is never called
        https://bugs.webkit.org/show_bug.cgi?id=87582

        Reviewed by Darin Adler.

        Previously, there was a shortcut when a deferred MainResourceLoader is resumed: If the data
        was coming from AppCache we could jump directly to startDataLoadTimer().

        The problem with the shortcut is willSendRequest() is never called in that particular case
        (substituteData + deferred-resume). The imbalance between willSendRequest() and didReceiveResponse()
        causes problems.

        This patch removes the shortcut so that MainResourceLoader::loadNow() is used regardless of
        the deferred loading. The method MainResourceLoader::loadNow() handle the substituteData as if the loading
        was not deferred.

        Test: http/tests/appcache/load-from-appcache-defer-resume-crash.html

        * loader/MainResourceLoader.cpp:
        (WebCore::MainResourceLoader::continueAfterNavigationPolicy):
        (WebCore::MainResourceLoader::handleSubstituteDataLoadSoon):
        Rename the method to be consistent with the attribute it uses, making the naming more explicit.
        (WebCore::MainResourceLoader::loadNow):
        (WebCore::MainResourceLoader::setDefersLoading):
        * loader/MainResourceLoader.h:
        (MainResourceLoader):

2012-05-27  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/11542253> Use xcrun to find tools when Command Line Tools are not installed

        Merged ToT WebKit r118624.

    2012-05-27  David Kilzer  <ddkilzer@apple.com>

        Use xcrun to find gperf path on platforms that use Xcode
        <http://webkit.org/b/87587>

        Reviewed by Dan Bernstein.

        * WebCore.xcodeproj/project.pbxproj:
        (Generate Derived Sources): Set GPERF environment variable using
        xcrun.
        * css/makeprop.pl: Use GPERF environment variable if set, else
        "gperf".
        * css/makevalues.pl: Ditto.
        * make-hash-tools.pl: Ditto.

2012-05-26  Andy Estes  <aestes@apple.com>

        Merged ToT WebKit r118197 and r118335.

    2012-05-23  Sudarsana Nagineni  <sudarsana.nagineni@linux.intel.com>

            Use PluginDataNone.cpp always when NETSCAPE_PLUGIN_API is OFF
            https://bugs.webkit.org/show_bug.cgi?id=87096

            Reviewed by Andy Estes.

            Fix a build error by adding an extra check in PluginData.cpp to use
            PluginStrategy only when NETSCAPE_PLUGIN_API is ON.

            No new tests. This is only a build fix.

            * plugins/PluginData.cpp:
            (WebCore):

    2012-05-24  Kristóf Kosztyó  <kkristof@inf.u-szeged.hu>

            [Qt] Buildfix for the minimal build because the r118197 broke it.
            https://bugs.webkit.org/show_bug.cgi?id=87096

            Reviewed by Csaba Osztrogonác.

            * plugins/PluginData.cpp:
            (WebCore):
            (WebCore::PluginData::refresh):
            (WebCore::PluginData::initPlugins):

2012-05-26  Andy Estes  <aestes@apple.com>

        Merged ToT WebKit r117695.

    2012-05-19  Andy Estes  <aestes@apple.com>

            Fix build errors found when disabling ENABLE_DRAG_SUPPORT
            https://bugs.webkit.org/show_bug.cgi?id=86947

            Reviewed by Jon Honeycutt.

            * page/mac/EventHandlerMac.mm:
            (WebCore::EventHandler::passMouseMoveEventToSubframe):
            * platform/mac/ClipboardMac.mm:
            (WebCore):

2012-05-26  Andy Estes  <aestes@apple.com>

        Merged ToT WebKit r117019.

    2012-05-14  Andy Estes  <aestes@apple.com>

            Fix RunLoopCF.cpp's copyright string.

            * platform/cf/RunLoopCF.cpp:

2012-05-26  Andy Estes  <aestes@apple.com>

        Merged ToT WebKit r117018.

    2012-05-14  Andy Estes  <aestes@apple.com>

            Move the parts of RunLoopMac.mm that aren't Mac-specific into RunLoopCF.cpp
            https://bugs.webkit.org/show_bug.cgi?id=86411

            Reviewed by Anders Carlsson.

            Most of RunLoopMac.mm was written in terms of CF API. Move these bits
            to a new file called RunLoopCF.cpp, leaving only the bits dealing with
            NSApplication.

            * WebCore.xcodeproj/project.pbxproj: Xcode decided to give
            VisitedLinks.* new UUIDs. I'll allow it.
            * platform/cf/RunLoopCF.cpp: Copied from Source/WebCore/platform/mac/RunLoopMac.mm.
            * platform/mac/RunLoopMac.mm:

2012-05-25  Dan Bernstein  <mitz@apple.com>

        WebCore part of <rdar://problem/10189597> Safari crashed in ICU's ucstrTextAccess below WebCore::numCharactersInGraphemeClusters

        Merged TOT WebKit r118568.

    2012-05-25  Dan Bernstein  <mitz@apple.com>

        characterBreakIterator() is not safe to use reentrantly or from multiple threads
        https://bugs.webkit.org/show_bug.cgi?id=87521

        Reviewed by Darin Adler.

        Replaced characterBreakIterator() with a NonSharedCharacterBreakIterator class, which
        obtains a unique TextBreakIterator. Replaced the global shared instance with a single-entry
        cache.

        * dom/CharacterData.cpp:
        (WebCore::CharacterData::parserAppendData): Changed to use NonSharedCharacterBreakIterator.

        * platform/graphics/StringTruncator.cpp:
        (WebCore::centerTruncateToBuffer): Ditto.
        (WebCore::rightTruncateToBuffer): Ditto.

        * platform/text/String.cpp:
        (WebCore::numGraphemeClusters): Ditto.
        (WebCore::numCharactersInGraphemeClusters): Ditto.

        * platform/text/TextBreakIterator.h: Removed the declaration of characterBreakIterator().
        (NonSharedCharacterBreakIterator): Added. An instance of this class has a character break
        iterator instance that is unique to it for the lifetime of the instance.
        (WebCore::NonSharedCharacterBreakIterator::operator TextBreakIterator*): Added.

        * platform/text/TextBreakIteratorICU.cpp:
        (WebCore::NonSharedCharacterBreakIterator::NonSharedCharacterBreakIterator): Added. Tries
        to swap the m_iterator member variable with the cached instance. If that fails, initializes
        m_iterator to a new character break iterator.
        (WebCore::NonSharedCharacterBreakIterator::~NonSharedCharacterBreakIterator): Added. Tries
        to put the m_iterator member variable back in the cache. If that fails, meaning there is
        already something in the cache, destroys m_iterator.

        * platform/text/gtk/TextBreakIteratorGtk.cpp:
        (WebCore::NonSharedCharacterBreakIterator::NonSharedCharacterBreakIterator): Same as in
        TextBreakIteratorICU.cpp.
        (WebCore::NonSharedCharacterBreakIterator::~NonSharedCharacterBreakIterator): Ditto.
        (WebCore::cursorMovementIterator): Moved the old implementation of characterBreakIterator()
        here.

        * platform/text/qt/TextBreakIteratorQt.cpp:
        (WebCore::NonSharedCharacterBreakIterator::NonSharedCharacterBreakIterator): Same as in
        TextBreakIteratorICU.cpp.
        (WebCore::NonSharedCharacterBreakIterator::~NonSharedCharacterBreakIterator): Ditto.
        (WebCore::cursorMovementIterator): Moved the old implementation of characterBreakIterator()
        here.

        * platform/text/wince/TextBreakIteratorWinCE.cpp:
        (WebCore::NonSharedCharacterBreakIterator::NonSharedCharacterBreakIterator): Same as in
        TextBreakIteratorICU.cpp.
        (WebCore::NonSharedCharacterBreakIterator::~NonSharedCharacterBreakIterator): Ditto.
        (WebCore::cursorMovementIterator): Moved the old implementation of characterBreakIterator()
        here.

2012-05-25  Dean Jackson  <dino@apple.com>

        <rdar://problem/11520788> Crash running Mozilla's WebGL performance regression tests (85942)

        Merge Open Source r117191

    2012-05-15  Kenneth Russell  <kbr@google.com>

            Assertion failure running Mozilla's WebGL performance regression tests
            https://bugs.webkit.org/show_bug.cgi?id=85942

            Reviewed by Stephen White.

            Fixed incorrect assumptions about source formats and buffer sizes
            when uploading to floating-point textures. Added code paths
            supporting the necessary conversions.

            Tests have been added to the WebGL conformance suite which cover
            these new code paths; they verify uploads of HTMLCanvasElement,
            HTMLImageElement, HTMLVideoElement, and ImageData to
            floating-point textures. However, because floating-point texture
            support is optional, and generally only supported on bots which
            run with real GPUs and not in virtual machines, it isn't feasible
            to incorporate these tests as layout tests.

            Ran the new WebGL conformance tests in Chromium on Linux; all
            pass.

            * platform/graphics/GraphicsContext3D.cpp:
            (WebCore::GraphicsContext3D::extractImageData):
            Properly compute size of destination buffer.

            (WebCore):
            Add pack/unpack routines for converting RGBA8/BGRA8 to floating point.

            (WebCore::doFloatingPointPacking):
            Support RGBA8 and BGRA8 source formats.

            (WebCore::isFloatingPointSource):
            Factored out logic for assertions.

            (WebCore::GraphicsContext3D::packPixels):
            Generalized assertions and logic.

            * platform/graphics/cairo/GraphicsContext3DCairo.cpp:
            (WebCore::GraphicsContext3D::getImageData):
            Properly compute size of destination buffer.

            * platform/graphics/cg/GraphicsContext3DCG.cpp:
            (WebCore::GraphicsContext3D::getImageData):
            Properly compute size of destination buffer.

            * platform/graphics/qt/GraphicsContext3DQt.cpp:
            (WebCore::GraphicsContext3D::getImageData):
            Properly compute size of destination buffer.

            * platform/graphics/skia/GraphicsContext3DSkia.cpp:
            (WebCore::GraphicsContext3D::getImageData):
            Properly compute size of destination buffer.

2012-05-24  Jeffrey Pfau  <jpfau@apple.com>

        <rdar://problem/11354114> REGRESSION(Sundance): Sudoku on the SF Chronicle iPad app doesn't work in Sundance

        Allowed readonly input elements to respond to mouse click events.

        Reviewed by Joseph Pecoraro.

        Test: fast/forms/input-readonly-focus.html

        * html/HTMLInputElement.cpp:
        (WebCore::HTMLInputElement::willRespondToMouseClickEvents):
        * html/HTMLTextAreaElement.cpp:
        (WebCore::HTMLTextAreaElement::willRespondToMouseClickEvents):

2012-05-23  Jeffrey Pfau  <jpfau@apple.com>

        <rdar://problem/11519226> Focused readonly date input elements draw as indented

        Reviewed by Joe Pecoraro.

        No new tests; doesn't currently expose any visible changes.

        * rendering/RenderThemeIOS.cpp:
        (WebCore::RenderThemeIOS::paintMenuListButtonDecorations): Special case readonly MenuListButtons

2012-05-23  Joseph Pecoraro  <pecoraro@apple.com>

        <rdar://problem/11508790> Revert r1049336 now that iOS WebKit does not build inspector resources

        Revert the complexity added in r1049336 to avoid optimizing/crushing
        inspector resources. iOS no longer includes the inspector resources in
        iOS WebKit so lets remove this special casing code.

        Reviewed by David Kilzer.

        * WebCore.xcodeproj/project.pbxproj:

2012-05-23  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/11519477> REGRESSION: Flashes of stale content when rotating and zooming pages with tiled layers (e.g nytimes.com, apple.com/ipad)

        Reviewed by Benjamin Poulain.

        One of the merge commits (r1102810) erroneously #ifdeffed out some code added
        on iOS to fix <rdar://problem/9434765>. Put that code back.

        * platform/graphics/ca/mac/PlatformCALayerMac.mm:
        (PlatformCALayer::setContentsScale):

2012-05-16  Lucas Forschler  <lforschler@apple.com>

    Merge 116595

    2012-05-09  Jessie Berlin  <jberlin@apple.com>

            Crash using the new WKBundleDOMWindowExtensions APIs.
            https://bugs.webkit.org/show_bug.cgi?id=85888

            Reviewed by Brady Eidson.

            WKBundlePageWillDestroyGlobalObjectForDOMWindowExtensionCallback was only being invoked when
            the WKPage was destroyed, and then only for the child frames. In addition, the
            DOMWindowExtension was holding onto a destroyed DOMWindow and attempting to unregister from
            when the WK2 wrapper object was attempting to destroy the DOMWindowExtension.

            The underlying issue here was that the DOMWindowProperties were getting disconnectFrame
            and willDetachPage called on them at the wrong times.

            Rename DOMWindowProperty::disconnectFrame and reconnectFrame to disconnectFrameForPageCache
            and reconnectFrameFromPageCache for clarity.

            Only invoke DOMWindowProperty::disconnectFrameForPageCache when the frame is going into the
            page cache.

            In the cases where the DOMWindow is getting destroyed, the frame is being destroyed, or the
            DOMWindow is getting cleared because the frame is being navigated, invoke
            DOMWindowProperty::willDestroyGlobalObjectInFrame instead of disconnectFrame.

            Invoke DOMWindowProperty::willDetachGlobalObjectFromFrame when a document is being detached
            because the frame has been detached (e.g. fast/storage/storage-detached-iframe.html) and
            won't be immediately destroyed.

            Invoke DOMWindowProperty::willDestroyGlobalObjectInCachedFrame when a cached frame is
            being destroyed.

            New WK2 API Test: DOMWindowExtensionNoCache.

            * Modules/indexeddb/DOMWindowIndexedDatabase.cpp:
            (WebCore::DOMWindowIndexedDatabase::disconnectFrameForPageCache):
            Updated for disconnectFrame rename.
            (WebCore::DOMWindowIndexedDatabase::reconnectFrameFromPageCache):
            Updated for reconnectFrame rename.
            (WebCore::DOMWindowIndexedDatabase::willDestroyGlobalObjectInCachedFrame):
            Get rid of the suspended IDBFactory.
            (WebCore::DOMWindowIndexedDatabase::willDestroyGlobalObjectInFrame):
            Get rid of the IDBFactory.
            (WebCore::DOMWindowIndexedDatabase::willDetachGlobalObjectFromFrame):
            Ditto.
            * Modules/indexeddb/DOMWindowIndexedDatabase.h:

            * dom/Document.cpp:
            (WebCore::Document::prepareForDestruction):
            Tell the DOMWindow before detaching the Document.
            * dom/Document.h:

            * history/CachedFrame.cpp:
            (WebCore::CachedFrame::destroy):
            Tell the DOMWindow.

            * loader/FrameLoader.cpp:
            (WebCore::FrameLoader::clear):
            Use Document::prepareForDestruction so that the DOMWindow is told about the main frame
            navigation before detaching the Document.

            * loader/appcache/DOMApplicationCache.cpp:
            (WebCore::DOMApplicationCache::disconnectFrameForPageCache):
            Updated for the disconnectFrame rename.
            (WebCore::DOMApplicationCache::reconnectFrameFromPageCache):
            Updated for the reconnectFrame rename.
            (WebCore::DOMApplicationCache::willDestroyGlobalObjectInFrame):
            Cover the cases formerly covered by disconnectFrame (which was sometimes being called when
            called when the frame was destroyed).
            * loader/appcache/DOMApplicationCache.h:

            * notifications/DOMWindowNotifications.cpp:
            (WebCore::DOMWindowNotifications::disconnectFrameForPageCache):
            Updated for the disconnectFrame rename.
            (WebCore::DOMWindowNotifications::reconnectFrameFromPageCache):
            Updated for the reconnectFrame rename.
            (WebCore::DOMWindowNotifications::willDestroyGlobalObjectInCachedFrame):
            Get rid of the suspended notification center.
            (WebCore::DOMWindowNotifications::willDestroyGlobalObjectInFrame):
            Get rid of the notification center.
            (WebCore::DOMWindowNotifications::willDetachGlobalObjectFromFrame):
            Do not allow use of the notification center by detached frames.
            * notifications/DOMWindowNotifications.h:

            * page/DOMWindow.cpp:
            (WebCore::DOMWindow::clearDOMWindowProperties):
            Do not call disconnectDOMWindowProperties. It is now the responsibility of the callers to
            tell the DOMWindowProperties the correct cause of being cleared.
            (WebCore::DOMWindow::~DOMWindow):
            Make sure the DOMWindowProperties still know that the DOMWindow is going away.
            (WebCore::DOMWindow::frameDestroyed):
            Invoke willDestroyGlobalObjectInFrame on the DOMWindowProperties.
            (WebCore::DOMWindow::willDetachPage):
            It is no longer necessary to tell the DOMWindowProperties anything here.
            (WebCore::DOMWindow::willDestroyCachedFrame):
            Tell the DOMWindowProperties.
            (WebCore::DOMWindow::willDestroyDocumentInFrame):
            Ditto.
            (WebCore::DOMWindow::willDetachDocumentFromFrame):
            Ditto.
            (WebCore::DOMWindow::clear):
            Ditto.
            (WebCore::DOMWindow::disconnectDOMWindowProperties):
            Updated for the disconnectFrame rename.
            (WebCore::DOMWindow::reconnectDOMWindowProperties):
            Ditto.
            * page/DOMWindow.h:

            * page/DOMWindowExtension.cpp:
            (WebCore::DOMWindowExtension::DOMWindowExtension):
            Move the responsibility for tracking the disconnected DOMWindow to DOMWindowProperty, since
            DOMWindowProperty will need it to unregister the property when a cached frame is destroyed.
            (WebCore::DOMWindowExtension::disconnectFrameForPageCache):
            Remove the code to check for disconnectFrame being called twice - it is now only called when
            a frame goes into the page cache.
            Let the DOMWindowProperty keep track of the disconnected DOMWindow.
            (WebCore::DOMWindowExtension::reconnectFrameFromPageCache):
            Let the DOMWindowProperty keep track of the disconnected DOMWindow.
            (WebCore::DOMWindowExtension::willDestroyGlobalObjectInCachedFrame):
            Dispatch the willDestroyGlobalObjectForDOMWindowExtension callback.
            (WebCore::DOMWindowExtension::willDestroyGlobalObjectInFrame):
            Ditto, but only if the callback hasn't already been sent because the frame has been detached.
            (WebCore::DOMWindowExtension::willDetachGlobalObjectFromFrame):
            Send the callback because nothing interesting can be done in the frame once it has been
            detached.
            * page/DOMWindowExtension.h:

            * page/DOMWindowProperty.cpp:
            (WebCore::DOMWindowProperty::DOMWindowProperty):
            Keep track of the disconnected DOMWindow so it can be used to unregister the property when a
            cached frame is destroyed.
            (WebCore::DOMWindowProperty::~DOMWindowProperty):
            Also unregister the property when a DOMWindowProperty for a cached frame is destroyed.
            (WebCore::DOMWindowProperty::disconnectFrameForPageCache):
            Keep track of the disconnected DOMWindow.
            (WebCore::DOMWindowProperty::reconnectFrameFromPageCache):
            Ditto.
            (WebCore::DOMWindowProperty::willDestroyGlobalObjectInCachedFrame):
            Unregister the property from the disconnected DOMWindow.
            (WebCore::DOMWindowProperty::willDestroyGlobalObjectInFrame):
            Unregister the property from the DOMWindow and stop keeping track of the frame.
            (WebCore::DOMWindowProperty::willDetachGlobalObjectFromFrame):
            Do not set m_frame to 0 because detached frames still have access to the DOMWindow, even if
            they can't do anything meaningful with it.
            * page/DOMWindowProperty.h:

            * page/Frame.cpp:
            (WebCore::Frame::setView):
            Tell the DOMWindow that the Document is being detached so it can tell the
            DOMWindowProperties.

            * page/PointerLock.cpp:
            (WebCore::PointerLock::disconnectFrameForPageCache):
            Updated for disconnectFrame rename.
            (WebCore::PointerLock::willDestroyGlobalObjectInFrame):
            Cover the cases formerly covered by disconnectFrame (which was sometimes being called when
            called when the frame was destroyed).
            * page/PointerLock.h:

2012-05-16  Lucas Forschler  <lforschler@apple.com>

    Merge 117196

    2012-05-15  Beth Dakin  <bdakin@apple.com>

            https://bugs.webkit.org/show_bug.cgi?id=86549
            Page Scale + Tiled Drawing: Twitter sign in page content disappears 
            after typing into name and enabling password field
            -and corresponding-
            <rdar://problem/11415352>

            Reviewed by Oliver Hunt.

            The enormous rect we used to use would overflow in CA and do nothing 
            when there was any scale > 1 on the context. Instead, just call 
            setNeedsDisplay on each tile.
            * platform/graphics/ca/mac/TileCache.mm:
            (WebCore::TileCache::setNeedsDisplay):

2012-05-16  Lucas Forschler  <lforschler@apple.com>

    Merge 117165

    2012-05-15  Jer Noble  <jer.noble@apple.com>

            r117147 causes a null-deref crash in DOMImplementation::createDocument()
            https://bugs.webkit.org/show_bug.cgi?id=86532

            Reviewed by James Robinson.

            No new tests, but fixes many crashing tests.

            Protect against the possibility of being passed a NULL frame in
            DOMImplementation::createDocument().

            * dom/DOMImplementation.cpp:
            (WebCore::DOMImplementation::createDocument):

2012-05-16  Lucas Forschler  <lforschler@apple.com>

    Merge 117158

    2012-05-15  Jer Noble  <jer.noble@apple.com>

            Unreviewed build fix [Qt].

            Protect the definition of DOMImplementationSupportsTypeClient class with
            #if ENABLE(VIDEO) so as not to cause compilation errors on ports with
            VIDEO disabled.

            * dom/DOMImplementation.cpp:

2012-05-16  Lucas Forschler  <lforschler@apple.com>

    Merge 117147

    2012-05-14  Jer Noble  <jer.noble@apple.com>

            Site-specific hack: Disclaim WebM as a supported type on Mac for YouTube.
            https://bugs.webkit.org/show_bug.cgi?id=86409

            Reviewed by Darin Adler.

            No new tests; site specific hack.

            Add a Mac-only site-specific hack which disclaims both video/webm and video/x-flv
            as supported types when the media element's document has a host of youtube.com.

            Add a new, pure-virtual prototype class for use by MediaPlayer::supportsType:
            * platform/graphics/MediaPlayer.h:
            (MediaPlayerSupportsTypeClient):
            (WebCore::MediaPlayerSupportsTypeClient::~MediaPlayerSupportsTypeClient):
            (WebCore::MediaPlayerSupportsTypeClient::mediaPlayerNeedsSiteSpecificHacks):
            (WebCore::MediaPlayerSupportsTypeClient::mediaPlayerDocumentHost):

            Use these new client calls to determine whether to apply the site-specific
            hack:
            * platform/graphics/MediaPlayer.cpp:
            (WebCore::MediaPlayer::supportsType):

            Add this prototype class as a superclass of HTMLMediaElement.  Pass in the
            HTMLMediaElement's this pointer when calling MediaPlayer::supportsType():
            * html/HTMLMediaElement.cpp:
            (WebCore::HTMLMediaElement::canPlayType):
            (WebCore::HTMLMediaElement::selectNextSourceChild):
            (WebCore::HTMLMediaElement::mediaPlayerNeedsSiteSpecificHacks):
            (WebCore::HTMLMediaElement::mediaPlayerDocumentHost):
            * html/HTMLMediaElement.h:

            As is HTMLMediaElement, a MediaPlayerSupportsTypeClient class is needed. Add a
            new class DOMImplementationSupportsTypeClient, an instance of which will be 
            passed to MediaPlayer::supportsType():
            * dom/DOMImplementation.cpp:
            (DOMImplementationSupportsTypeClient):
            (WebCore::DOMImplementationSupportsTypeClient::DOMImplementationSupportsTypeClient):
            (WebCore::DOMImplementation::createDocument):
            (WebCore::DOMImplementation::mediaPlayerNeedsSiteSpecificHacks):
            (WebCore::DOMImplementation::mediaPlayerDocumentHost):
            * dom/DOMImplementation.h:

2012-05-16  Lucas Forschler  <lforschler@apple.com>

    Merge 117129

    2012-05-15  Anders Carlsson  <andersca@apple.com>

            Use unaccelerated scrolling deltas when rubber-banding
            https://bugs.webkit.org/show_bug.cgi?id=86503
            <rdar://problem/11378742>

            Reviewed by Sam Weinig.

            * WebCore.exp.in:
            * platform/PlatformWheelEvent.h:
            (WebCore::PlatformWheelEvent::PlatformWheelEvent):
            (PlatformWheelEvent):
            (WebCore::PlatformWheelEvent::scrollCount):
            (WebCore::PlatformWheelEvent::unacceleratedScrollingDeltaX):
            (WebCore::PlatformWheelEvent::unacceleratedScrollingDeltaY):
            Add scroll count and unaccelerated scrolling deltas.

            * platform/mac/ScrollElasticityController.mm:
            (WebCore::elasticDeltaForTimeDelta):
            (WebCore::elasticDeltaForReboundDelta):
            (WebCore::reboundDeltaForElasticDelta):
            Call the new WKSI functions.

            (WebCore::ScrollElasticityController::handleWheelEvent):
            Use the unaccelerated scrolling deltas when needed.

            * platform/mac/WebCoreSystemInterface.h:
            * platform/mac/WebCoreSystemInterface.mm:
            Add new WKSI functions.

2012-05-16  Lucas Forschler  <lforschler@apple.com>

    Merge 117113

    2012-05-15  Beth Dakin  <bdakin@apple.com>

            https://bugs.webkit.org/show_bug.cgi?id=86506
            REGRESSION (tiled drawing): No scrollbar while page is loading
            -and corresponding
            <rdar://problem/11444589>

            Reviewed by Anders Carlsson.

            We have always had a mechanism in place to suppress painting overlay 
            scrollbars while the page is loading. However, that mechaism is 
            overriden if the page has been scrolled. It should be, anyway. It was 
            not being overriden when the scrolling was handled as a wheel event by 
            the scrolling tree. This patch takes advantage of the fact that 
            ScrollingTree::handleWheelEvent() already calls back to the main 
            thread for handleWheelEventPhase() and just patches 
            handleWheelEventPhase to mark m_haveScrolledSincePageLoad as true.
            * platform/mac/ScrollAnimatorMac.mm:
            (WebCore::ScrollAnimatorMac::handleWheelEventPhase):

2012-05-16  Lucas Forschler  <lforschler@apple.com>

    Merge 117108

    2012-05-15  Andreas Kling  <kling@webkit.org>

            Deep copy PluginModuleInfo before passing across thread boundary.
            <http://webkit.org/b/86491>
            <rdar://problem/11451178>

            Reviewed by Anders Carlsson.

            * plugins/PluginData.h:
            (MimeClassInfo):
            (WebCore::MimeClassInfo::isolatedCopy):
            (PluginInfo):
            (WebCore::PluginInfo::isolatedCopy):

2012-05-16  Lucas Forschler  <lforschler@apple.com>

    Merge 117032

    2012-05-14  Tim Horton  <timothy_horton@apple.com>

            RenderLayer::repaintRectIncludingDescendants shouldn't include repaint rects of composited descendants
            https://bugs.webkit.org/show_bug.cgi?id=86429
            <rdar://problem/11445132>

            Reviewed by Simon Fraser.

            Change repaintRectIncludingDescendants to not include repaint rects for composited child layers,
            and rename the function to make it more clear that that's what it does now.

            No new tests, scrolling performance optimization.

            * page/FrameView.cpp:
            (WebCore::FrameView::scrollContentsFastPath):
            * rendering/RenderLayer.cpp:
            (WebCore::RenderLayer::repaintRectIncludingNonCompositingDescendants):
            * rendering/RenderLayer.h:
            (RenderLayer):

2012-05-16  Lucas Forschler  <lforschler@apple.com>

    Merge 117021

    2012-05-14  Beth Dakin  <bdakin@apple.com>

            https://bugs.webkit.org/show_bug.cgi?id=86420
            ScrollbarPainter should support expansionTransitionProgress

            Reviewed by Sam Weinig.

            expansionTransitionProgress works the same as 
            uiStateTransitionProgress. This code just echoes that code, but for 
            expansion instead of uiState.
            * platform/mac/NSScrollerImpDetails.h:
            * platform/mac/ScrollAnimatorMac.mm:
            (supportsExpansionTransitionProgress):
            (-[WebScrollbarPartAnimation setCurrentProgress:]):
            (-[WebScrollbarPainterDelegate cancelAnimations]):
            (-[WebScrollbarPainterDelegate scrollerImp:animateExpansionTransitionWithDuration:]):
            (-[WebScrollbarPainterDelegate invalidate]):

2012-05-22  Benjamin Poulain  <bpoulain@apple.com>

        Rollout 116009.

2012-05-15  Lucas Forschler  <lforschler@apple.com>

    rollout 116013

2012-05-15  Sam Weinig  <sam@webkit.org>

        <rdar://problem/11401642> ENABLE_IFRAME_SEAMLESS should be turned off on the branch

        Reviewed by Andy Estes.

        * Configurations/FeatureDefines.xcconfig:
        Disable ENABLE_IFRAME_SEAMLESS.

2012-05-15  Sam Weinig  <sam@webkit.org>

        Disable CSS regions
        <rdar://problem/10887709>

        Reviewed by Anders Carlsson.

        * dom/Document.idl:
        #ifdef out webkitGetFlowByName.

2012-05-15  Lucas Forschler  <lforschler@apple.com>

    Merge 116831

    2012-05-11  Beth Dakin  <bdakin@apple.com>

            https://bugs.webkit.org/show_bug.cgi?id=86278
            Composited layers should only run the overlay scrollbars painting pass 
            if necessary

            Reviewed by Dan Bernstein.

            It's not enough that the rootLayer has dirty scrollbars; we also have 
            to actually be doing the overlay scrollbars painting pass to skip the 
            early return.
            * rendering/RenderLayer.cpp:
            (WebCore::RenderLayer::paintLayer):

2012-05-15  Lucas Forschler  <lforschler@apple.com>

    Merge 116830

    2012-05-11  Anders Carlsson  <andersca@apple.com>

            Comcast website displays bottom of page when loaded
            https://bugs.webkit.org/show_bug.cgi?id=86277
            <rdar://problem/11426887>

            Reviewed by Beth Dakin.

            There were two bugs here. The first bug was that FrameView::setScrollPosition didn't end up calling into the scrolling coordinator
            to update the scroll position. The second bug was that ScrollingTreeNodeMac::setScrollPosition didn't constrain the scroll position
            to the edge of the page.

            * page/FrameView.cpp:
            (WebCore::FrameView::setScrollPosition):
            Call requestScrollPositionUpdate.

            * page/scrolling/ScrollingTree.cpp:
            * page/scrolling/ScrollingTree.h:
            Remove setMainFrameScrollPosition, it is not called by anyone.

            * page/scrolling/mac/ScrollingTreeNodeMac.h:
            * page/scrolling/mac/ScrollingTreeNodeMac.mm:
            (WebCore::ScrollingTreeNodeMac::setScrollPosition):
            Clamp to the page size and call setScrollPositionWithoutContentEdgeConstraints.

            (WebCore::ScrollingTreeNodeMac::setScrollPositionWithoutContentEdgeConstraints):
            Update the scroll layer position and call back to the main thread.

            (WebCore::ScrollingTreeNodeMac::scrollBy):
            Call setScrollPosition.

            (WebCore::ScrollingTreeNodeMac::scrollByWithoutContentEdgeConstraints):
            Call setScrollPositionWithoutContentEdgeConstraints.

2012-05-15  Lucas Forschler  <lforschler@apple.com>

    Merge 116824

    2012-05-11  Anders Carlsson  <andersca@apple.com>

            Can't scroll on webpage after following links from Blogger
            https://bugs.webkit.org/show_bug.cgi?id=86274
            <rdar://problem/11431352>

            Reviewed by Beth Dakin.

            When committing a new scroll layer, make sure to reset the scroll position.

            * page/scrolling/ScrollingTree.cpp:
            (WebCore::ScrollingTree::commitNewTreeState):

2012-05-22  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/11331943> REGRESSION (Sundance): Images are split in epub3 test book (CSS max-width is not applied to SVG element)

        Merged TOT WebKit r18074.

    2012-05-22  Dan Bernstein  <mitz@apple.com>

        REGRESSION (r105513): CSS max-width is not applied to SVG element
        https://bugs.webkit.org/show_bug.cgi?id=87050

        Reviewed by Darin Adler.

        Tests: svg/css/max-height.html
               svg/css/max-width.html

        * rendering/svg/RenderSVGRoot.cpp:
        (WebCore::RenderSVGRoot::computeReplacedLogicalWidth): Changed to also call into the base
        class implementation of this function if max-width was specified.
        (WebCore::RenderSVGRoot::computeReplacedLogicalHeight): Changed to call into the bas class
        implementation of this function if either height or max-height were specified.

2012-05-21  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/9783667> WebCore should use improvements to memory warning/status system

        Adopt the new memory status dispatch source (DISPATCH_SOURCE_TYPE_MEMORYSTATUS), which notifies
        WebKit when the system memory level is back to normal.  Since adding this dispatch source for
        all apps linked with WebKit could hurt system performance, Jetsam team suggested us only add
        this for MobileSafari.

        Reviewed by Joseph Pecoraro.

        * WebCore.exp.in:
        * platform/MemoryPressureHandler.cpp:
        (WebCore::MemoryPressureHandler::MemoryPressureHandler): add an argument (clearPressureOnMemoryRelease)
            to tell if we should clear memory pressure on memory release, or if the system will notify us that
            memory is back to normal (in Safari).
        * platform/MemoryPressureHandler.h:
        (MemoryPressureHandler):
        * platform/ios/MemoryPressureHandlerIOS.mm:
        (WebCore::MemoryPressureHandler::installMemoryReleaseBlock):
        (WebCore::MemoryPressureHandler::clearMemoryPressure):

2012-05-21  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/11497889> Add Block_copy to WebThreadRunOnMainThread() so it retains its arguments like WebThreadCallDelegate()`

        Reviewed by Yongjun Zhang.

        Use Block_copy() before calling the block on the main thread. This ensures that the objects
        referenced by the block are retained and we won't run into crashes like <rdar://10924468>.

        * wak/WebCoreThread.mm:
        (WebThreadRunOnMainThread):

2012-05-15  Lucas Forschler  <lforschler@apple.com>

    Merge 116821

    2012-05-10  Timothy Hatcher  <timothy@apple.com>

            Instrument timer function calls so they show up in the Web Inspector Timeline.

            https://webkit.org/b/86173

            Reviewed by Pavel Feldman.

            Test: inspector/timeline/timeline-timer.html

            * bindings/js/ScheduledAction.cpp:
            (WebCore::ScheduledAction::executeFunctionInContext): Wrap the call with JSMainThreadExecState::instrumentFunctionCall
            and InspectorInstrumentation::didCallFunction.

2012-05-15  Lucas Forschler  <lforschler@apple.com>

    Merge 116799

    2012-05-11  Tim Horton  <timothy_horton@apple.com>

            FrameView->m_lastPaintTime is not updated in the tiled drawing case
            https://bugs.webkit.org/show_bug.cgi?id=86246
            <rdar://problem/11248475>

            Reviewed by Simon Fraser.

            Update FrameView's m_lastPaintTime from RenderLayerBacking::paintContents
            if the RenderLayerBacking is backing a tiled drawing layer.

            In the future we might want to consider updating m_lastPaintTime when any
            compositing layer is painted into, but this change gets us on par with the
            non-tiled-drawing case as it stands now.

            No new tests.

            * page/FrameView.h:
            (WebCore::FrameView::setLastPaintTime):
            * rendering/RenderLayerBacking.cpp:
            (WebCore::RenderLayerBacking::paintContents):

2012-05-15  Lucas Forschler  <lforschler@apple.com>

    Merge 116832

    2012-05-11  Jeffrey Pfau  <jpfau@apple.com>

            REGRESSION (r114170): Scroll areas in nested frames improperly placed when tiled drawing is enabled
            https://bugs.webkit.org/show_bug.cgi?id=86239

            Reviewed by Anders Carlsson.

            Fixes a regression introduced in r114170 by recursively adding positions of parent frames to placement of nested frame scroll areas.

            Manual tests: ManualTests/scrollable-positioned-frame.html
                          ManualTests/scrollable-positioned-nested-frame.html

            * page/scrolling/ScrollingCoordinator.cpp:
            (WebCore::computeNonFastScrollableRegion):
            (WebCore::ScrollingCoordinator::frameViewLayoutUpdated):

2012-05-15  Lucas Forschler  <lforschler@apple.com>

    Merge 116720

    2012-05-10  Anders Carlsson  <andersca@apple.com>

            PDF files won't scroll in Safari when using Adobe plug-in
            https://bugs.webkit.org/show_bug.cgi?id=86167
            <rdar://problem/11389719>

            Reviewed by Sam Weinig.

            * page/scrolling/ScrollingCoordinator.cpp:
            (WebCore::computeNonFastScrollableRegion):
            Loop over the frame view children looking for plug-in views that want wheel events
            and add them to the non-fast scrollable region. Ideally, the plug-ins should be added
            to the set of scrollable areas, but PluginView in WebKit2 is not a ScrollableArea yet.

            * plugins/PluginViewBase.h:
            (PluginViewBase):
            (WebCore::PluginViewBase::wantsWheelEvents):

2012-05-15  Lucas Forschler  <lforschler@apple.com>

    Merge 116720

    2012-05-10  Anders Carlsson  <andersca@apple.com>

            PDF files won't scroll in Safari when using Adobe plug-in
            https://bugs.webkit.org/show_bug.cgi?id=86167
            <rdar://problem/11389719>

            Reviewed by Sam Weinig.

            * page/scrolling/ScrollingCoordinator.cpp:
            (WebCore::computeNonFastScrollableRegion):
            Loop over the frame view children looking for plug-in views that want wheel events
            and add them to the non-fast scrollable region. Ideally, the plug-ins should be added
            to the set of scrollable areas, but PluginView in WebKit2 is not a ScrollableArea yet.

            * plugins/PluginViewBase.h:
            (PluginViewBase):
            (WebCore::PluginViewBase::wantsWheelEvents):

2012-05-15  Lucas Forschler  <lforschler@apple.com>

    Merge 116711

    2012-05-10  Beth Dakin  <bdakin@apple.com>

            https://bugs.webkit.org/show_bug.cgi?id=86158
            Overlay scrollbars without layers never paint in overflow regions in 
            tiled drawing mode
            -and corresponding-
            <rdar://problem/11289546>

            Reviewed by Darin Adler.

            RenderLayers paint scrollbars that do not have their own layers by 
            running a second pass through the layer tree after the layer tree has 
            painted. This ensures that the scrollbars always paint on top of 
            content. However, this mechanism was relying on 
            FrameView::paintContents() as a choke-point for all painting to 
            trigger the second painting pass. That is not a reasonable choke-point 
            in tiled drawing, so this patch adds similar code to 
            RenderLayerBacking.

            Only opt into the second painting pass for scrollbars that do not have 
            their own layers.
            * rendering/RenderLayer.cpp:
            (WebCore::RenderLayer::paintOverflowControls):

            A layer that paints into its backing cannot return early here if it 
            has overlay scrollbars to paint.
            (WebCore::RenderLayer::paintLayer):

            This replicates code in FrameView::paintContents(). After painting the 
            owning layer, do a second pass if there are overlay scrollbars to 
            paint.
            * rendering/RenderLayerBacking.cpp:
            (WebCore::RenderLayerBacking::paintIntoLayer):

2012-05-15  Lucas Forschler  <lforschler@apple.com>

    Merge 116697

    2012-05-10  Beth Dakin  <bdakin@apple.com>

            https://bugs.webkit.org/show_bug.cgi?id=82131
            [Mac] REGRESSION (r110480): Text field that specifies background-color 
            (or is auto-filled) gets un-themed border
            -and corresponding-
            <rdar://problem/11115221>

            Reviewed by Maciej Stachowiak.

            This change rolls out r110480 which is what caused styled text fields 
            to get the un-themed border, and it does a bunch of work to make sure 
            we get the pretty, new version of the NSTextField art whenever 
            possible. We do this differently for post-Lion OS's since there is now 
            a way to opt into it all the time. Lion and SnowLeopard can only use 
            the new art in HiDPI mode when the background color of the text field 
            is just white.

            RenderThemeMac::textField() takes a boolean paramter used to determine 
            if the new gradient will be used.
            * rendering/RenderThemeMac.h:
            (RenderThemeMac):

            This is the post-Lion workaround. This code has no effect on Lion and 
            SnowLeopard. This allows up to opt into a version of [NSTextField drawWithFrame:] that will only draw the frame of the text field; without this, it will draw the frame and the background, which creates a number of problems with styled text fields and text fields in HiDPI. There is a less comprehesive workaround for Lion and SnowLeopard in place in RenderThemeMac::textField().
            * rendering/RenderThemeMac.mm:
            (-[WebCoreTextFieldCell _coreUIDrawOptionsWithFrame:inView:includeFocus:]):

            This is the roll-out of r110480.
            (WebCore::RenderThemeMac::isControlStyled):

            See the comments for a full explanation, but this is mostly code for 
            Lion and SnowLeopard to determine if we can opt into the new artwork.
            (WebCore::RenderThemeMac::paintTextField):
            (WebCore::RenderThemeMac::textField):

2012-05-15  Lucas Forschler  <lforschler@apple.com>

    Merge 116794

    2012-05-11  Anders Carlsson  <andersca@apple.com>

            REGRESSION(r116687): [Chromium] plugins/embed-attributes-style.html shows a garbled string
            https://bugs.webkit.org/show_bug.cgi?id=86170

            Reviewed by Andreas Kling.

            The string we are passing to the TextRun constructor needs to stay alive for longer so revert back to the old
            behavior where we store it as a member variable.

            * rendering/RenderEmbeddedObject.cpp:
            (WebCore::unavailablePluginReplacementText):
            (WebCore):
            (WebCore::RenderEmbeddedObject::setPluginUnavailabilityReason):
            (WebCore::RenderEmbeddedObject::getReplacementTextGeometry):
            * rendering/RenderEmbeddedObject.h:
            (RenderEmbeddedObject):

2012-05-15  Lucas Forschler  <lforschler@apple.com>

    Merge 116695

    2012-05-10  Anders Carlsson  <andersca@apple.com>

            WebKit1: Add a way to blacklist specific plug-ins/plug-in versions
            https://bugs.webkit.org/show_bug.cgi?id=86150
            <rdar://problem/9551196>

            Reviewed by Sam Weinig.

            * English.lproj/Localizable.strings:
            Update.
            * loader/SubframeLoader.cpp:
            (WebCore::SubframeLoader::loadPlugin):
            It is possible that the client has already set the unavailability reason so don't try to set it twice.
            * platform/LocalizedStrings.cpp:
            (WebCore::insecurePluginVersionText):
            * platform/LocalizedStrings.h:
            Add insecure plug-in version text.
            * rendering/RenderEmbeddedObject.cpp:
            (WebCore::RenderEmbeddedObject::unavailablePluginReplacementText):
            * rendering/RenderEmbeddedObject.h:
            Add InsecurePluginVersion unavailability reason.

2012-05-15  Lucas Forschler  <lforschler@apple.com>

    Merge 116473

    2012-05-08  Jon Lee  <jonlee@apple.com>

            Safari warns that it needs to resend the form in an iFrame when going back
            https://bugs.webkit.org/show_bug.cgi?id=82658
            <rdar://problem/11292558>

            Reviewed by Darin Adler.

            Test: http/tests/loading/post-in-iframe-with-back-navigation.html

            * WebCore.exp.in: Add _wkCFURLRequestAllowAllPostCaching.
            * platform/mac/WebCoreSystemInterface.h: Add wkCFURLRequestAllowAllPostCaching.
            * platform/mac/WebCoreSystemInterface.mm: Add wkCFURLRequestAllowAllPostCaching.
            * platform/network/cf/ResourceRequestCFNet.cpp:
            (WebCore::ResourceRequest::doUpdatePlatformRequest): Set the bit to cache all POST responses.
            * platform/network/mac/ResourceRequestMac.mm:
            (WebCore::ResourceRequest::doUpdatePlatformRequest): Set the bit to cache all POST responses.

2012-05-20  Benjamin Poulain  <bpoulain@apple.com>

        Remove the deprecated method [WAKWindow sendEvent:contentChange:] after <rdar://problem/10402010>

        Reviewed by Darin Adler.

        Remove the deprecated method [WAKWindow sendEvent:contentChange:], the only reference to this method
        was updated in UIKit.

        * wak/WAKWindow.h:
        * wak/WAKWindow.mm:

2012-05-20  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/11201356> Investigate transforming youtube flash embeds to iframes

        Change -webkit prefix to -apple prefix, and driveby clean up the appendChild's use of ExceptionCode.

        Reviewed by Eric Carlson.

        * html/HTMLPlugInImageElement.cpp:
        (WebCore::HTMLPlugInImageElement::createRenderer):
        (WebCore::HTMLPlugInImageElement::createShadowIFrameSubtree):
        * html/shadow/YouTubeEmbedShadowElement.cpp:
        (WebCore::YouTubeEmbedShadowElement::shadowPseudoId):

2012-05-15  Lucas Forschler  <lforschler@apple.com>

    Merge 116687

    2012-05-10  Anders Carlsson  <andersca@apple.com>

            Rename the missing plug-in indicator to the unavailable plug-in indicator
            https://bugs.webkit.org/show_bug.cgi?id=86136

            Reviewed by Sam Weinig.

            Since the indicator is shown for more than just missing plug-ins, generalize it and use a plug-in unavailability
            reason enum to make it easier to extend. Also, pass the unavailability reason to the ChromeClient member functions.

            * WebCore.exp.in:
            * html/HTMLEmbedElement.cpp:
            (WebCore::HTMLEmbedElement::updateWidget):
            * html/HTMLObjectElement.cpp:
            (WebCore::HTMLObjectElement::updateWidget):
            * html/HTMLPlugInElement.cpp:
            (WebCore::HTMLPlugInElement::defaultEventHandler):
            * html/HTMLPlugInImageElement.cpp:
            (WebCore::HTMLPlugInImageElement::updateWidgetIfNecessary):
            * loader/SubframeLoader.cpp:
            (WebCore::SubframeLoader::loadPlugin):
            * page/ChromeClient.h:
            (WebCore::ChromeClient::shouldUnavailablePluginMessageBeButton):
            (WebCore::ChromeClient::unavailablePluginButtonClicked):
            * page/FrameView.cpp:
            (WebCore::FrameView::updateWidget):
            * rendering/RenderEmbeddedObject.cpp:
            (WebCore::RenderEmbeddedObject::RenderEmbeddedObject):
            (WebCore::RenderEmbeddedObject::setPluginUnavailabilityReason):
            (WebCore::RenderEmbeddedObject::showsUnavailablePluginIndicator):
            (WebCore::RenderEmbeddedObject::setUnavailablePluginIndicatorIsPressed):
            (WebCore::RenderEmbeddedObject::paint):
            (WebCore::RenderEmbeddedObject::paintReplaced):
            (WebCore::RenderEmbeddedObject::getReplacementTextGeometry):
            (WebCore::RenderEmbeddedObject::unavailablePluginReplacementText):
            (WebCore):
            (WebCore::RenderEmbeddedObject::isInUnavailablePluginIndicator):
            (WebCore::shouldUnavailablePluginMessageBeButton):
            (WebCore::RenderEmbeddedObject::handleUnavailablePluginIndicatorEvent):
            (WebCore::RenderEmbeddedObject::getCursor):
            * rendering/RenderEmbeddedObject.h:
            (RenderEmbeddedObject):

2012-05-15  Lucas Forschler  <lforschler@apple.com>

    Merge 116685

    2012-05-10  Brady Eidson  <beidson@apple.com>

            <rdar://problem/10972577> and https://bugs.webkit.org/show_bug.cgi?id=80170
            Contents of noscript elements turned into strings in WebArchives

            Reviewed by Andy Estes.

            There's a much deeper question about how innerHTML of <noscript> is expected to work in
            both a scripting and non-scripting environment that we should pursue separately.

            But for webarchives, we can solve this by filtering out the <noscript> elements completely
            if scripting is enabled.

            Test: webarchive/ignore-noscript-if-scripting-enabled.html

            * WebCore.exp.in:

            Add arguments to createMarkup and MarkupAccumulator methods to pass a Vector of QualifiedNames
            that should be filtered from the resulting markup:
            * editing/MarkupAccumulator.cpp:
            (WebCore::MarkupAccumulator::serializeNodes):
            (WebCore::MarkupAccumulator::serializeNodesWithNamespaces):
            * editing/MarkupAccumulator.h:
            * editing/markup.cpp:
            (WebCore::createMarkup):
            * editing/markup.h:

            If scripting is enabled, add the noscriptTag to the tag names to filter:
            * loader/archive/cf/LegacyWebArchive.cpp:
            (WebCore::LegacyWebArchive::create):

2012-05-15  Lucas Forschler  <lforschler@apple.com>

    Merge 116579

    2012-05-09  Anders Carlsson  <andersca@apple.com>

            Speed up some parts of TileCache drawing
            https://bugs.webkit.org/show_bug.cgi?id=86033
            <rdar://problem/10919373>

            Reviewed by Sam Weinig.

            * platform/graphics/ca/mac/TileCache.mm:
            (WebCore::TileCache::tileCoverageRect):
            If we can't have scrollbars, there's not much need to extend the tile coverage rect outside of the visible rect, since it's
            unlikely that we'll do any form of scrolling here.

            (WebCore::TileCache::revalidateTiles):
            Don't update the tile layer frame if it's big enough to contain the tile size. Also, if there are no new tiles created,
            don't call platformCALayerDidCreateTiles since that will trigger an extra layer flush.

2012-05-15  Lucas Forschler  <lforschler@apple.com>

    Merge 116570

    2012-05-09  Beth Dakin  <bdakin@apple.com>

            https://bugs.webkit.org/show_bug.cgi?id=86025
            RTL and vertical text documents do no scroll properly with the new
            tiled scrolling model
            -and corresponding-
            <rdar://problem/11077589>

            Reviewed by Dan Bernstein.

            Most of the fix here is just to teach the scrolling tree about the
            scroll origin.
            * page/scrolling/ScrollingCoordinator.cpp:
            (WebCore::ScrollingCoordinator::frameViewLayoutUpdated):
            (WebCore::ScrollingCoordinator::setScrollParameters):
            * page/scrolling/ScrollingCoordinator.h:
            (ScrollParameters):
            * page/scrolling/ScrollingTreeNode.cpp:
            (WebCore::ScrollingTreeNode::update):
            * page/scrolling/ScrollingTreeNode.h:
            (WebCore::ScrollingTreeNode::scrollOrigin):
            (ScrollingTreeNode):
            * page/scrolling/ScrollingTreeState.cpp:
            (WebCore::ScrollingTreeState::setScrollOrigin):
            (WebCore):
            * page/scrolling/ScrollingTreeState.h:
            (WebCore::ScrollingTreeState::scrollOrigin):
            (ScrollingTreeState):
            * page/scrolling/mac/ScrollingTreeNodeMac.mm:
            (WebCore::ScrollingTreeNodeMac::scrollPosition):
            (WebCore::ScrollingTreeNodeMac::setScrollLayerPosition):
            (WebCore::ScrollingTreeNodeMac::minimumScrollPosition):
            (WebCore::ScrollingTreeNodeMac::maximumScrollPosition):
            * rendering/RenderLayerCompositor.cpp:
            (WebCore::RenderLayerCompositor::frameViewDidScroll):

            Teaching the scrolling tree about the scroll origin revealed this pre-
            existing bug. layoutOverflowRect() is not the right rect to use since
            it is not writing-mode savvy. unscaledDocumentRect() is the right rect
            for the view's bounds.
            * rendering/RenderLayerBacking.cpp:
            (WebCore::RenderLayerBacking::updateCompositedBounds):

2012-05-15  Lucas Forschler  <lforschler@apple.com>

    Merge 116458

    2012-05-08  Philip Rogers  <pdr@google.com>

            Prevent crash in animated lists
            https://bugs.webkit.org/show_bug.cgi?id=85382

            Reviewed by Nikolas Zimmermann.

            Animated lists blindly assign the last list value to m_toAtEndOfDurationType
            in SVGAnimationElement::startedActiveInterval. If the last list value's length
            is larger or smaller than the animated "to" length, we crash.

            This change prevents accessing values off the end of toAtEndOfDuration by adding
            a check for this case. It may seem inefficient to perform this check on every
            animation update but the "to" value can change (in cardinality) while animating.

            I checked each of the other animation types (e.g., SVGAnimatedAngle,
            SVGAnimatedBoolean, etc.) and was only able to hit this style of crash
            in the three types modified in this change:
            SVGAnimatedLengthList, SVGAnimatedNumberList, and SVGAnimatedPointList.

            Tests: svg/animations/animate-linear-discrete-additive-b-expected.svg
                   svg/animations/animate-linear-discrete-additive-b.svg
                   svg/animations/animate-linear-discrete-additive-c-expected.svg
                   svg/animations/animate-linear-discrete-additive-c.svg
                   svg/animations/animate-linear-discrete-additive-expected.svg
                   svg/animations/animate-linear-discrete-additive.svg
                   svg/animations/animate-list-crash.svg

            * svg/SVGAnimatedLengthList.cpp:
            (WebCore::SVGAnimatedLengthListAnimator::calculateAnimatedValue):
            * svg/SVGAnimatedNumberList.cpp:
            (WebCore::SVGAnimatedNumberListAnimator::calculateAnimatedValue):
            * svg/SVGAnimatedPointList.cpp:
            (WebCore::SVGAnimatedPointListAnimator::calculateAnimatedValue):

2012-05-15  Lucas Forschler  <lforschler@apple.com>

    Merge 116449

    2012-05-08  Timothy Hatcher  <timothy@apple.com>

            Fix the SOFT_LINK_STAGED_FRAMEWORK_OPTIONAL macro so it passes the full path to dlopen.

            dyld only considers libraries in the versioned framework path if their install name
            matches the library that it is attempting to load. The path we were passing to
            dlopen lacked the Versions/A component of the path so dyld did not recognize that
            we wanted it to use the staged version if it is newer.

            <rdar://problem/11406517>

            Reviewed by Mark Rowe.

            * platform/mac/SoftLinking.h: Have SOFT_LINK_STAGED_FRAMEWORK_OPTIONAL take the
            framework version as an argument and use it when constructing the path to dlopen.

2012-05-18  Dean Jackson  <dino@apple.com>

        <rdar://problem/10937079> [Regression] Events aren't dispatched for some transformed elements

        Merge Open Source r116543

    2012-05-03  Shawn Singh  <shawnsingh@chromium.org>

            Hit testing is incorrect in some cases with perspective transforms
            https://bugs.webkit.org/show_bug.cgi?id=79136

            Reviewed by Simon Fraser.

            Tests: transforms/3d/hit-testing/coplanar-with-camera.html
                   transforms/3d/hit-testing/perspective-clipped.html

            * platform/graphics/transforms/TransformationMatrix.cpp:
            (WebCore::TransformationMatrix::projectPoint): Fix a
            divide-by-zero error so that values do not become Inf or Nan. Also
            fix an overflow error by using a large, but not-too-large constant
            to represent infinity.

            (WebCore::TransformationMatrix::projectQuad): Fix an error where
            incorrect quads were being returned. Incorrect quads can occur
            when projectPoint clamped==true after returning.

2012-05-15  Lucas Forschler  <lforschler@apple.com>

    Merge 116427

    2012-05-08  Stephen Chenney  <schenney@chromium.org>

            Shrink ElementAttributeData by factoring out Attr object count.
            https://bugs.webkit.org/show_bug.cgi?id=85825

            Unreviewed build fix.

            * dom/ElementAttributeData.cpp:
            (WebCore::attrListForElement): Was returning false instead of 0 for a pointer value. Now returns 0.

2012-05-15  Lucas Forschler  <lforschler@apple.com>

    Merge 116419

    2012-05-08  Andreas Kling  <kling@webkit.org>

            Shrink ElementAttributeData by factoring out Attr object count.
            <http://webkit.org/b/85825>

            Reviewed by Antti Koivisto.

            Stop tracking the number of Attr objects that point to a given Element on the
            Element itself and manage this by having a global hashmap of Element => AttrList,
            where AttrList is a vector of (pointers to) the associated Attr objects.

            This shrinks ElementAttributeData by one integer, effectively reducing memory
            consumption by ~530kB when viewing the full HTML5 spec at <http://whatwg.org/c>.

            * dom/ElementAttributeData.h:
            (ElementAttributeData):

                Remove m_attrCount...

            * dom/Node.h:
            (WebCore::Node::hasAttrList):
            (WebCore::Node::setHasAttrList):
            (WebCore::Node::clearHasAttrList):

                ...replacing it with a Node flag that tells us whether there's an Attr
                object map for this Node (only applies to Elements.)

            * dom/ElementAttributeData.cpp:
            (WebCore::attrListMap):
            (WebCore::attrListForElement):
            (WebCore::ensureAttrListForElement):
            (WebCore::removeAttrListForElement):
            (WebCore::ElementAttributeData::attrIfExists):
            (WebCore::ElementAttributeData::ensureAttr):
            (WebCore::ElementAttributeData::setAttr):
            (WebCore::ElementAttributeData::removeAttr):
            (WebCore::ElementAttributeData::detachAttributesFromElement):

                Map Element => per-Element AttrList in a global hash.

2012-05-15  Lucas Forschler  <lforschler@apple.com>

    Merge 116368

    2012-05-07  Enrica Casucci  <enrica@apple.com>

            REGRESSION (r101575): Chinese input is broken when composing mail in iCloud using Safari.
            https://bugs.webkit.org/show_bug.cgi?id=85840
            <rdar://problem/11115520>

            Reviewed by Alexey Proskuryakov.

            The revision that broke this, introduced a way to sanitize the markup when deleting a range selection.
            iCloud listens for DOM modification events and clears the selection, altering the input method state.
            The fix consists in adding a paramenter to DeleteSelectionCommand to control when we sanitize the
            markup.

            * editing/CompositeEditCommand.cpp:
            (WebCore::CompositeEditCommand::deleteSelection):
            * editing/CompositeEditCommand.h:
            * editing/DeleteSelectionCommand.cpp:
            (WebCore::DeleteSelectionCommand::DeleteSelectionCommand):
            (WebCore::DeleteSelectionCommand::doApply):
            * editing/DeleteSelectionCommand.h:
            (WebCore::DeleteSelectionCommand::create):
            * editing/InsertTextCommand.cpp:
            (WebCore::InsertTextCommand::doApply):

2012-05-15  Lucas Forschler  <lforschler@apple.com>

    Merge 116367

    2012-05-07  Andy Estes  <aestes@apple.com>

            ENABLE_IFRAME_SEAMLESS should be part of FEATURE_DEFINES.

            * Configurations/FeatureDefines.xcconfig:

2012-05-15  Lucas Forschler  <lforschler@apple.com>

    Merge 116356

    2012-05-07  Eric Seidel  <eric@webkit.org>

            Add ENABLE_IFRAME_SEAMLESS so Apple can turn off SEAMLESS if needed
            https://bugs.webkit.org/show_bug.cgi?id=85822

            Reviewed by Adam Barth.

            * Configurations/FeatureDefines.xcconfig:
            * dom/Document.cpp:
            (WebCore::Document::shouldDisplaySeamlesslyWithParent):

2012-05-18  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/11477182> +[WebCache addImageToCache:forURL:] returns success but image loaded is blank

        Merged TOT WebKit r117656.

    2012-05-18  Pratik Solanki  <psolanki@apple.com>

        BitmapImage::BitmapImage(CGImageRef, ImageObserver*) needs to set m_sizeRespectingOrientation
        https://bugs.webkit.org/show_bug.cgi?id=86915

        Reviewed by Oliver Hunt.

        Set m_sizeRespectingOrientation to be the same as m_size. Otherwise it stays at 0x0 since
        this constructor also sets m_haveSize to true for the BitmapImage.

        * platform/graphics/cg/ImageCG.cpp:
        (WebCore::BitmapImage::BitmapImage):

2012-05-18  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/11201356> Investigate transforming youtube flash embeds to iframes

        Previously, when there is a flash youtube video embeded in a page, we create a iOS
        youtube plugin to play the video.  This patch creates a shadow DOM tree for the embed
        or object element, and adds an iframe in the shadow DOM to adopt the new youtube iFrame
        player API.  The shadow DOM will not change the original DOM, and it won't be visible
        to the regular DOM.  So any JS code accessing the embed or object element will still
        work as usual.

        Reviewed by David Kilzer.

        Test: platform/iphone-simulator/iphone/plugin/youtube-flash-plugin-iframe.html

        * WebCore.exp.in:
        * WebCore.xcodeproj/project.pbxproj:
        * html/HTMLPlugInImageElement.cpp:
        (WebCore::HTMLPlugInImageElement::createRenderer): if we already created a shadow
            DOM for this element and it is a youtube plugin, we create a RenderBlock to
            make it take children objects.
        (WebCore):
        (WebCore::HTMLPlugInImageElement::createShadowIFrameSubtree):
        * html/HTMLPlugInImageElement.h:
        (HTMLPlugInImageElement):
        * html/shadow/YouTubeEmbedShadowElement.cpp: Added.
        (WebCore):
        (WebCore::YouTubeEmbedShadowElement::create):
        (WebCore::YouTubeEmbedShadowElement::YouTubeEmbedShadowElement):
        (WebCore::YouTubeEmbedShadowElement::pluginElement):
        (WebCore::YouTubeEmbedShadowElement::shadowPseudoId):
        * html/shadow/YouTubeEmbedShadowElement.h: Added.
        (WebCore):
        (YouTubeEmbedShadowElement):

2012-05-17  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/11481100> WebCore-1123942 failed to build in the Innsbruck autoBot: GraphicsContext3DIOS.h:55:9: error: 'GL_RGB8' and 'GL_RGBA8' macro redefined [-Werror]

        Build fix (not reviewed).

        * platform/graphics/ios/GraphicsContext3DIOS.h: Test for GL_RGB8
        and GL_RGBA8 being undefined before defining them.

2012-05-17  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/11481085> WebCore-1565 failed to build in the Sundance autoBot: PlatformClockCM.mm:34:9: fatal error: 'CoreMedia/CMAudioDeviceClock.h' file not found

        Build fix (not reviewed).

        * platform/mac/PlatformClockCM.mm: Import CMAudioClock.h instead
        of CMAudioDeviceClock.h for PLATFORM(IOS).

2012-05-17  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/11253065> Certain ebooks have vertical text mispositioned selection rects that do not have isHorizontal set correctly

        Reviewed by Enrica Casucci.

        * rendering/RenderText.cpp:
        (WebCore::RenderText::collectSelectionRects): SVG vertical writing modes don’t mark individual text
        boxes as vertical, so for SVG text boxes infer whether they are vertical from the SVG style property.

2012-05-17  Enrica Casucci  <enrica@apple.com>

        <rdar://problem/11345383> text copied from iOS fields has spaces replaced with &nbsp when pasted.

        We want to match the Mac behavior when placing text data in the pasteboard.
        All the nbsp characters must be replaced with spaces.
        
        Reviewed by David Kilzer.

        * platform/Pasteboard.h: Added getStringSelection for iOS as well as Mac.
        * platform/ios/PasteboardIOS.mm:
        (WebCore::Pasteboard::getStringSelection): Get string from selection and replace nbsp
        with spaces.
        (WebCore::Pasteboard::writeSelection): Call getStringSelection when writing kUTTypeText
        to the pasteboard.

2012-05-17  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/11326104> [Mail]? KH:Sundance:10A293: only image contained emails have long line of unknown characters at the end of images

        Merged ToT WebKit r117451.

    2012-05-17  Antti Koivisto  <antti@apple.com>

        Frame flattening should not expand tiny frames
        https://bugs.webkit.org/show_bug.cgi?id=86736

        Reviewed by Kenneth Rohde Christiansen.
        
        If a frame has so small fixed size that it is not usefully scrollable on desktop it is probably
        not meant to be scrolled. Displaying any otherwise invisible content by expanding the frame
        may end up looking like a rendering error.

        The patch prevents expansion of frames that have fixed width or height less than 8px.

        Test: fast/frames/flattening/iframe-tiny.html

        * rendering/RenderFrameBase.cpp:
        (WebCore::shouldExpandFrame):
        (WebCore):
        (WebCore::RenderFrameBase::layoutWithFlattening):

2012-05-17  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/11151649> Paginated webviews can cut vertical text across a gap

        Merged TOT WebKit r117484.

    2012-05-17  Dan Bernstein  <mitz@apple.com>

        In vertical writing modes, pagination may split a line after a block shifts
        https://bugs.webkit.org/show_bug.cgi?id=86763

        Reviewed by Sam Weinig.

        Test: fast/multicol/pageLogicalOffset-vertical.html

        LayoutState::pageLogicalOffset() was returning bogus results in vertical writing modes,
        because it was always using physical heights. Changed it to take a RenderBox and use its
        writing mode to choose between heights and widths.

        * rendering/LayoutState.cpp:
        (WebCore::LayoutState::pageLogicalOffset):
        (WebCore::LayoutState::addForcedColumnBreak):
        * rendering/LayoutState.h:
        (LayoutState):
        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::layoutBlock):
        (WebCore::RenderBlock::markForPaginationRelayoutIfNeeded):
        (WebCore::RenderBlock::layoutColumns):
        (WebCore::RenderBlock::applyBeforeBreak):
        (WebCore::RenderBlock::applyAfterBreak):
        * rendering/RenderDeprecatedFlexibleBox.cpp:
        (WebCore::RenderDeprecatedFlexibleBox::layoutBlock):
        * rendering/RenderTable.cpp:
        (WebCore::RenderTable::layout):
        * rendering/RenderTableRow.cpp:
        (WebCore::RenderTableRow::layout):
        * rendering/RenderTableSection.cpp:
        (WebCore::RenderTableSection::layoutRows):

2012-05-17  Joseph Pecoraro  <pecoraro@apple.com>

        Remove duplicated lines.

        Reviewed by David Carson.

        * Configurations/WebCoreTestSupport.xcconfig:

2012-05-16  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/10217321> iOS: Cache parsed CSS

        Merged ToT WebKit r116291.

    2012-05-07  Antti Koivisto  <antti@apple.com>

        Share stylesheet data structures between documents
        https://bugs.webkit.org/show_bug.cgi?id=85598

        Reviewed by Darin Adler.

        We currently make a copy of the data structures when restoring a cached stylesheet. This patch lets us share
        the data until someone uses a mutating CSSOM API to modify the sheet.
        
        The patch implements copy-on-write for the internal style sheet data structures. If any mutating CSSOM API is
        invoked, we check if the mutation is safe (there is only one client, the sheet is not cached). If not then the
        internal structures are copied and any existing CSSOM objects are re-attached to the new style tree. The copied
        tree is mutated while the other clients stay attached to the original tree.
        
        Sharing can save significant amount of memory on sites with large stylesheets. For example if you have
        multiple articles open on wsj.com this saves ~2.6MB per tab.
        
        Test: http/tests/css/shared-stylesheet-mutation.html
              http/tests/css/shared-stylesheet-mutation-preconstruct.html

        * css/CSSFontFaceRule.cpp:
        (WebCore::CSSFontFaceRule::reattach):
        (WebCore):
        * css/CSSFontFaceRule.h:
        (CSSFontFaceRule):
        * css/CSSMediaRule.cpp:
        (WebCore::CSSMediaRule::insertRule):
        (WebCore::CSSMediaRule::deleteRule):
        (WebCore::CSSMediaRule::reattach):
        (WebCore):
        * css/CSSMediaRule.h:
        (CSSMediaRule):
        * css/CSSPageRule.cpp:
        (WebCore::CSSPageRule::setSelectorText):
        (WebCore::CSSPageRule::reattach):
        (WebCore):
        * css/CSSPageRule.h:
        (CSSPageRule):
        * css/CSSRule.cpp:
        (WebCore::CSSRule::reattach):
        
            After the internal stylerule tree has been copied, the existing wrappers are re-attached using recursive reattach() function.

        * css/CSSRule.h:
        (WebCore):
        (CSSRule):
        * css/CSSStyleRule.cpp:
        (WebCore::CSSStyleRule::setSelectorText):
        (WebCore::CSSStyleRule::reattach):
        (WebCore):
        * css/CSSStyleRule.h:
        (CSSStyleRule):
        * css/CSSStyleSheet.cpp:
        (WebCore::StyleSheetInternal::StyleSheetInternal):
        (WebCore::StyleSheetInternal::isCacheable):
        (WebCore::StyleSheetInternal::ruleAt):
        
            Add ruleAt(), use it for both wrapper creation and reattaching.  Remove createChildRuleCSSOMWrapper .

        (WebCore):
        (WebCore::StyleSheetInternal::wrapperInsertRule):
        (WebCore::StyleSheetInternal::wrapperDeleteRule):
        
            Invalidation moves to the calling wrapper.

        (WebCore::StyleSheetInternal::addedToMemoryCache):
        (WebCore::StyleSheetInternal::removedFromMemoryCache):
        (WebCore::CSSStyleSheet::willMutateRules):
        
            This is called whenever StyleSheetInternal is going to be mutated. It will do copy-on-write if needed.
            
            Usually invoked by CSSStyleSheet::RuleMutation RAII type.

        (WebCore::CSSStyleSheet::didMutateRules):
        
            This is called after the mutation is complete and will trigger the style recalc in the document.

        (WebCore::CSSStyleSheet::didMutate):
        
            This is called directly after mutations that don't change StyleSheetInternal so don't require copy-on-write.

        (WebCore::CSSStyleSheet::reattachChildRuleCSSOMWrappers):
        (WebCore::CSSStyleSheet::setDisabled):
        (WebCore::CSSStyleSheet::insertRule):
        (WebCore::CSSStyleSheet::deleteRule):
        * css/CSSStyleSheet.h:
        (StyleSheetInternal):
        (WebCore::StyleSheetInternal::hasOneClient):
        (WebCore::StyleSheetInternal::isMutable):
        (WebCore::StyleSheetInternal::setMutable):
        
            Track mutability. Mutation is allowed only after willMutate call.

        (WebCore::StyleSheetInternal::isInMemoryCache):
        
            Track if the object is in memory cache.

        (WebCore::CSSStyleSheet::clearOwnerRule):
        (CSSStyleSheet):
        * css/MediaList.cpp:
        (WebCore::MediaList::setMediaText):
        (WebCore::MediaList::deleteMedium):
        (WebCore::MediaList::appendMedium):
        (WebCore::MediaList::didMutate):
        (WebCore):
        (WebCore::MediaList::reattach):
        * css/MediaList.h:
        (MediaList):
        * css/PropertySetCSSStyleDeclaration.cpp:
        (WebCore::PropertySetCSSStyleDeclaration::setCssText):
        (WebCore::PropertySetCSSStyleDeclaration::setProperty):
        (WebCore::PropertySetCSSStyleDeclaration::removeProperty):
        (WebCore::PropertySetCSSStyleDeclaration::setPropertyInternal):
        (WebCore):
        (WebCore::StyleRuleCSSStyleDeclaration::willMutate):
        (WebCore::StyleRuleCSSStyleDeclaration::didMutate):
        (WebCore::StyleRuleCSSStyleDeclaration::reattach):
        (WebCore::InlineCSSStyleDeclaration::didMutate):
        * css/PropertySetCSSStyleDeclaration.h:
        (WebCore::PropertySetCSSStyleDeclaration::willMutate):
        (WebCore::PropertySetCSSStyleDeclaration::didMutate):
        (StyleRuleCSSStyleDeclaration):
        * css/WebKitCSSKeyframesRule.cpp:
        (WebCore::WebKitCSSKeyframesRule::setName):
        (WebCore::WebKitCSSKeyframesRule::insertRule):
        (WebCore::WebKitCSSKeyframesRule::deleteRule):
        (WebCore::WebKitCSSKeyframesRule::reattach):
        (WebCore):
        * css/WebKitCSSKeyframesRule.h:
        (WebKitCSSKeyframesRule):
        * css/WebKitCSSRegionRule.cpp:
        (WebCore::WebKitCSSRegionRule::reattach):
        * css/WebKitCSSRegionRule.h:
        (WebKitCSSRegionRule):
        * inspector/InspectorStyleSheet.cpp:
        (WebCore::InspectorStyleSheet::reparseStyleSheet):
        * loader/cache/CachedCSSStyleSheet.cpp:
        (WebCore::CachedCSSStyleSheet::~CachedCSSStyleSheet):
        (WebCore::CachedCSSStyleSheet::destroyDecodedData):
        (WebCore::CachedCSSStyleSheet::restoreParsedStyleSheet):
        
            Don't copy when restoring. It is no longer necessary.
            Set the cache bit on the stylesheet.

        (WebCore::CachedCSSStyleSheet::saveParsedStyleSheet):

2012-05-16  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/10942765> iOS: Improve time spent under Node::traverseNextNode()

        Merged ToT WebKit r116742.

        * WebCore.exp.in:
        - Remove iOS export: __ZNK7WebCore4Node16traverseNextNodeEPKS0_
        - Add iOS export: __ZNK7WebCore4Node27traverseNextAncestorSiblingEPKS0_

    2012-05-11  Antti Koivisto  <antti@apple.com>

        Inline Node::traverseNextNode
        https://bugs.webkit.org/show_bug.cgi?id=85844

        Reviewed by Ryosuke Niwa.
        
        Inline traverseNextNode and traverseNextSibling to reduce entry/exit overhead and allow better code generation
        for many hot loops.

        In this version only the firstChild()/nextSibling() tests are inlined and the ancestor traversal is not.
        
        Performance bots will tell if this was worthwhile.

        * dom/ContainerNode.h:
        (WebCore::Node::traverseNextNode):
        (WebCore):
        (WebCore::Node::traverseNextSibling):
        * dom/Node.cpp:
        (WebCore::Node::traverseNextAncestorSibling):
        * dom/Node.h:
        (Node):
        * bindings/v8/RetainedDOMInfo.cpp:

2012-05-16  Pratik Solanki  <psolanki@apple.com>

        Add logging statements to our quicklook code to help debug bugs in future.

        Reviewed by Joseph Pecoraro.

        * platform/network/ios/QuickLook.mm:
        (-[QuickLookHandleAsDelegate connection:didReceiveDataArray:]):
        (-[QuickLookHandleAsDelegate connection:didReceiveData:lengthReceived:]):
        (-[QuickLookHandleAsDelegate connectionDidFinishLoading:]):
        (-[QuickLookHandleAsDelegate connection:didFailWithError:]):
        (WebCore::QuickLookHandle::QuickLookHandle):
        (WebCore::QuickLookHandle::didReceiveDataArray):
        (WebCore::QuickLookHandle::didReceiveData):
        (WebCore::QuickLookHandle::didFinishLoading):
        (WebCore::QuickLookHandle::didFail):

2012-05-14  Benjamin Poulain  <bpoulain@apple.com>

        <rdar://problem/11406944> iOS WebKit merge: stabilizing merge branch to ToT r116210 (starts Mon, May 14)

        Merge up to OpenSource WebKit r116210.

2012-05-15  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/11124237> can't expand vertical selection to an additional line if the line contains ruby text

        Merged TOT WebKit r117116.

    2012-05-15  Dan Bernstein  <mitz@apple.com>

        Ruby annotation is incorrectly identified as a paragraph boundary
        https://bugs.webkit.org/show_bug.cgi?id=86507

        Reviewed by Darin Adler.

        Test: editing/selection/paragraph-with-ruby.html

        * editing/htmlediting.cpp:
        (WebCore::isBlock): Changed to return false for ruby text.

2012-05-15  Eric Carlson  <eric.carlson@apple.com>

        <rdar://problem/11376111> REGRESSION(Sundance): HTML5 grooveshark doesn't play song

        Merged ToT WebKit r116960.

    2012-05-14  Eric Carlson  <eric.carlson@apple.com>

        <video> won't load when URL ends with .php
        https://bugs.webkit.org/show_bug.cgi?id=86308

        Reviewed by Darin Adler.

        Test: http/tests/media/video-query-url.html

        * platform/graphics/MediaPlayer.cpp:
        (WebCore::MediaPlayer::MediaPlayer): Initialize m_typeInferredFromExtension.
        (WebCore::MediaPlayer::load): Set m_typeInferredFromExtension appropriately.
        (WebCore::MediaPlayer::loadWithNextMediaEngine): If we don't find a media engine registered
            for a MIME type, and the type was inferred from the extension, give the first registered
            media engine a chance anwyay just as we do when there is no MIME type at all.
        * platform/graphics/MediaPlayer.h: Add m_typeInferredFromExtension.

2012-05-15  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/10288903> Images split between pages when a top margin is what makes a line taller than a page

        Merged TOT WebKit r116986.

    2012-05-14  Dan Bernstein  <mitz@apple.com>

        Pagination splits lines that could fit on a single page if it were not for their top leading
        https://bugs.webkit.org/show_bug.cgi?id=86388

        Reviewed by Darin Adler.

        Test: fast/multicol/split-in-top-margin.html

        When a line’s visible content fits on a page, but adding the top leading makes it taller than
        a page, instead of giving up and splitting the line in an arbitrary position, add a strut
        to push it downwards so that the split occurs in the top leading, and the visible content is
        fully contained on a single page.

        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::adjustLinePositionForPagination):

2012-05-14  Alexey Proskuryakov  <ap@apple.com>

    <rdar://problem/10615880> Many crashes in iBooks under WebCore::HTMLImageElement::parseAttribute

    2012-05-10  Alexey Proskuryakov  <ap@apple.com>

        Crash in 3rd party WebKit apps that disable cache at a wrong time
        https://bugs.webkit.org/show_bug.cgi?id=86027
        <rdar://problem/10615880>

        Reviewed by Antti Koivisto.

        The fix is to use CachedResourceHandle throughout MemoryCache, which will certainly
        keep the resource alive. Also removed earlier fixes.

        * css/CSSImageSetValue.cpp: (WebCore::CSSImageSetValue::cachedImageSet):
        * css/CSSImageValue.cpp: (WebCore::CSSImageValue::cachedImage):
        * css/WebKitCSSShaderValue.cpp: (WebCore::WebKitCSSShaderValue::cachedShader):
        * history/PageCache.cpp: (WebCore::PageCache::releaseAutoreleasedPagesNow):
        * loader/ImageLoader.cpp: (WebCore::ImageLoader::updateFromElement):
        * loader/TextTrackLoader.cpp: (WebCore::TextTrackLoader::load):
        * loader/cache/CachedResourceLoader.cpp:
        (WebCore::CachedResourceLoader::requestImage):
        (WebCore::CachedResourceLoader::requestFont):
        (WebCore::CachedResourceLoader::requestTextTrack):
        (WebCore::CachedResourceLoader::requestShader):
        (WebCore::CachedResourceLoader::requestCSSStyleSheet):
        (WebCore::CachedResourceLoader::requestUserCSSStyleSheet):
        (WebCore::CachedResourceLoader::requestScript):
        (WebCore::CachedResourceLoader::requestXSLStyleSheet):
        (WebCore::CachedResourceLoader::requestSVGDocument):
        (WebCore::CachedResourceLoader::requestLinkResource):
        (WebCore::CachedResourceLoader::requestRawResource):
        (WebCore::CachedResourceLoader::requestResource):
        (WebCore::CachedResourceLoader::revalidateResource):
        (WebCore::CachedResourceLoader::loadResource):
        (WebCore::CachedResourceLoader::requestPreload):
        * loader/cache/CachedResourceLoader.h: (CachedResourceLoader):
        * loader/cache/MemoryCache.h: (WebCore::MemoryCache::setPruneEnabled):

        * loader/cache/CachedResourceHandle.h:
        (WebCore::CachedResourceHandle::CachedResourceHandle):
        (WebCore::CachedResourceHandle::operator=):
        Teach CachedResourceHandle how to make CachedResourceHandle<CachedResource> from
        a handle to subclass.

2012-05-14  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/11445446> iOS: html5test: width/height attributes of input element should be supported when the type of the input element is image. (70304)

        Merged ToT WebKit r116389.

    2012-05-07  Dongwoo Im  <dw.im@samsung.com>

        width/height attributes of input element cannot be accessed by JavaScript.
        https://bugs.webkit.org/show_bug.cgi?id=70304

        Reviewed by Darin Adler.

        If the type of input element is image button, width/height attributes should be supported.
        These attributes are defined in HTML5 spec.
        http://www.w3.org/TR/html5/the-map-element.html#attr-dim-width

        Tests: fast/forms/input-width-height-attributes-without-renderer-loaded-image.html
               fast/forms/input-width-height-attributes-without-renderer-not-loaded-image.html
               fast/forms/input-width-height-attributes-without-renderer.html
               fast/forms/input-width-height-attributes.html

        * html/HTMLInputElement.cpp: Add setter/getter functions to query/set width/height of input element.
        (WebCore):
        (WebCore::HTMLInputElement::height): Gets height of input element.
        (WebCore::HTMLInputElement::width): Gets width of input element.
        (WebCore::HTMLInputElement::setHeight): Sets height of input element.
        (WebCore::HTMLInputElement::setWidth): Sets width of input element.
        * html/HTMLInputElement.h: Add public prototype.
        (HTMLInputElement):
        * html/HTMLInputElement.idl: Add width/height attributes.
        * html/ImageInputType.cpp: Add getter functions if the element is an image button.
        (WebCore):
        (WebCore::ImageInputType::height): Gets height of input element.
        (WebCore::ImageInputType::width): Gets width of input element.
        * html/ImageInputType.h: Add prototype.
        (ImageInputType):
        * html/InputType.cpp: Add getter functions.
        (WebCore::InputType::height): Returns zero.
        (WebCore):
        (WebCore::InputType::width): Returns zero.
        * html/InputType.h: Add prototype.
        (InputType):

2012-05-11  Benjamin Poulain  <bpoulain@apple.com>

        Fix a typo in r1122532

        Unreviewed, the parameters for the viewport are supposed to be coma separated.

        * html/ImageDocument.cpp:
        (WebCore::ImageDocument::createDocumentStructure):

2012-05-11  Benjamin Poulain  <bpoulain@apple.com>

        <rdar://problem/11439965> Images with a width > 4 times the viewport with do not fit in the viewport

        Reviewed by David Kilzer.

        The default minimum zoom is 0.25. Since we set the viewport to device width, the largest image that
        can be viewed id 4 * 320px wide.

        This patch fixes this by setting a very small minimum.

        * html/ImageDocument.cpp:
        (WebCore::ImageDocument::createDocumentStructure):

2012-05-11  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/11439947> iOS: SVG animation causes leak of the HTMLDocument (83856)

        Merged ToT WebKit r115518.

    2012-04-27  Tim Horton  <timothy_horton@apple.com>

        SMIL animation causes leak of the related Document (and many elements)
        https://bugs.webkit.org/show_bug.cgi?id=83856
        <rdar://problem/11216047>

        Reviewed by Dean Jackson.

        The SVGAnimatedProperty cache was previously holding a reference to the properties it contained;
        said references were cleared in the SVGAnimatedProperty destructor (which was never called because
        there was always one remaining reference from the cache).

        The SVGAnimatedProperty cache now holds raw pointers instead of RefPtrs; the SVGAnimateElement now
        owns its own SVGAnimatedProperties, both for itself and for any <use/> instances of itself. They're
        cleared and destroyed within SVGAnimateElement::targetElementWillChange, at which time they're removed
        from the cache.

        SVGPropertyTearOffs now keep a reference to their SVGElement (m_contextElement) instead of their SVGAnimatedProperty;
        this way, there is no reference cycle, but the animated property (owned by the element) and the element itself are
        kept alive until the TearOff is garbage collected.

        Tests: svg/animations/smil-leak-dynamically-added-element-instances.svg
               svg/animations/smil-leak-elements.svg
               svg/animations/smil-leak-element-instances-noBaseValRef.svg
               svg/animations/smil-leak-element-instances.svg
               svg/animations/svglength-element-removed-crash.svg

        * svg/SVGAnimateElement.cpp:
        (WebCore::SVGAnimateElement::calculateAnimatedValue):
        (WebCore::propertyTypesAreConsistent):
        (WebCore::SVGAnimateElement::resetToBaseValue):
        (WebCore::SVGAnimateElement::applyResultsToTarget):
        (WebCore::SVGAnimateElement::targetElementWillChange):
        * svg/SVGAnimateElement.h:
        (SVGAnimateElement):
        * svg/SVGAnimatedAngle.cpp:
        (WebCore::SVGAnimatedAngleAnimator::startAnimValAnimation):
        (WebCore::SVGAnimatedAngleAnimator::stopAnimValAnimation):
        (WebCore::SVGAnimatedAngleAnimator::resetAnimValToBaseVal):
        (WebCore::SVGAnimatedAngleAnimator::animValWillChange):
        (WebCore::SVGAnimatedAngleAnimator::animValDidChange):
        * svg/SVGAnimatedAngle.h:
        (SVGAnimatedAngleAnimator):
        * svg/SVGAnimatedBoolean.cpp:
        (WebCore::SVGAnimatedBooleanAnimator::startAnimValAnimation):
        (WebCore::SVGAnimatedBooleanAnimator::stopAnimValAnimation):
        (WebCore::SVGAnimatedBooleanAnimator::resetAnimValToBaseVal):
        (WebCore::SVGAnimatedBooleanAnimator::animValWillChange):
        (WebCore::SVGAnimatedBooleanAnimator::animValDidChange):
        * svg/SVGAnimatedBoolean.h:
        (SVGAnimatedBooleanAnimator):
        * svg/SVGAnimatedColor.h:
        (WebCore::SVGAnimatedColorAnimator::startAnimValAnimation):
        (WebCore::SVGAnimatedColorAnimator::stopAnimValAnimation):
        (WebCore::SVGAnimatedColorAnimator::resetAnimValToBaseVal):
        (WebCore::SVGAnimatedColorAnimator::animValWillChange):
        (WebCore::SVGAnimatedColorAnimator::animValDidChange):
        * svg/SVGAnimatedEnumeration.cpp:
        (WebCore::SVGAnimatedEnumerationAnimator::startAnimValAnimation):
        (WebCore::SVGAnimatedEnumerationAnimator::stopAnimValAnimation):
        (WebCore::SVGAnimatedEnumerationAnimator::resetAnimValToBaseVal):
        (WebCore::SVGAnimatedEnumerationAnimator::animValWillChange):
        (WebCore::SVGAnimatedEnumerationAnimator::animValDidChange):
        * svg/SVGAnimatedEnumeration.h:
        (SVGAnimatedEnumerationAnimator):
        * svg/SVGAnimatedInteger.cpp:
        (WebCore::SVGAnimatedIntegerAnimator::startAnimValAnimation):
        (WebCore::SVGAnimatedIntegerAnimator::stopAnimValAnimation):
        (WebCore::SVGAnimatedIntegerAnimator::resetAnimValToBaseVal):
        (WebCore::SVGAnimatedIntegerAnimator::animValWillChange):
        (WebCore::SVGAnimatedIntegerAnimator::animValDidChange):
        * svg/SVGAnimatedInteger.h:
        (SVGAnimatedIntegerAnimator):
        * svg/SVGAnimatedIntegerOptionalInteger.cpp:
        (WebCore::SVGAnimatedIntegerOptionalIntegerAnimator::startAnimValAnimation):
        (WebCore::SVGAnimatedIntegerOptionalIntegerAnimator::stopAnimValAnimation):
        (WebCore::SVGAnimatedIntegerOptionalIntegerAnimator::resetAnimValToBaseVal):
        (WebCore::SVGAnimatedIntegerOptionalIntegerAnimator::animValWillChange):
        (WebCore::SVGAnimatedIntegerOptionalIntegerAnimator::animValDidChange):
        * svg/SVGAnimatedIntegerOptionalInteger.h:
        (SVGAnimatedIntegerOptionalIntegerAnimator):
        * svg/SVGAnimatedLength.cpp:
        (WebCore::SVGAnimatedLengthAnimator::startAnimValAnimation):
        (WebCore::SVGAnimatedLengthAnimator::stopAnimValAnimation):
        (WebCore::SVGAnimatedLengthAnimator::resetAnimValToBaseVal):
        (WebCore::SVGAnimatedLengthAnimator::animValWillChange):
        (WebCore::SVGAnimatedLengthAnimator::animValDidChange):
        * svg/SVGAnimatedLength.h:
        (SVGAnimatedLengthAnimator):
        * svg/SVGAnimatedLengthList.cpp:
        (WebCore::SVGAnimatedLengthListAnimator::startAnimValAnimation):
        (WebCore::SVGAnimatedLengthListAnimator::stopAnimValAnimation):
        (WebCore::SVGAnimatedLengthListAnimator::resetAnimValToBaseVal):
        (WebCore::SVGAnimatedLengthListAnimator::animValWillChange):
        (WebCore::SVGAnimatedLengthListAnimator::animValDidChange):
        * svg/SVGAnimatedLengthList.h:
        (SVGAnimatedLengthListAnimator):
        * svg/SVGAnimatedNumber.cpp:
        (WebCore::SVGAnimatedNumberAnimator::startAnimValAnimation):
        (WebCore::SVGAnimatedNumberAnimator::stopAnimValAnimation):
        (WebCore::SVGAnimatedNumberAnimator::resetAnimValToBaseVal):
        (WebCore::SVGAnimatedNumberAnimator::animValWillChange):
        (WebCore::SVGAnimatedNumberAnimator::animValDidChange):
        * svg/SVGAnimatedNumber.h:
        (SVGAnimatedNumberAnimator):
        * svg/SVGAnimatedNumberList.cpp:
        (WebCore::SVGAnimatedNumberListAnimator::startAnimValAnimation):
        (WebCore::SVGAnimatedNumberListAnimator::stopAnimValAnimation):
        (WebCore::SVGAnimatedNumberListAnimator::resetAnimValToBaseVal):
        (WebCore::SVGAnimatedNumberListAnimator::animValWillChange):
        (WebCore::SVGAnimatedNumberListAnimator::animValDidChange):
        * svg/SVGAnimatedNumberList.h:
        (SVGAnimatedNumberListAnimator):
        * svg/SVGAnimatedNumberOptionalNumber.cpp:
        (WebCore::SVGAnimatedNumberOptionalNumberAnimator::startAnimValAnimation):
        (WebCore::SVGAnimatedNumberOptionalNumberAnimator::stopAnimValAnimation):
        (WebCore::SVGAnimatedNumberOptionalNumberAnimator::resetAnimValToBaseVal):
        (WebCore::SVGAnimatedNumberOptionalNumberAnimator::animValWillChange):
        (WebCore::SVGAnimatedNumberOptionalNumberAnimator::animValDidChange):
        * svg/SVGAnimatedNumberOptionalNumber.h:
        (SVGAnimatedNumberOptionalNumberAnimator):
        * svg/SVGAnimatedPath.cpp:
        (WebCore::SVGAnimatedPathAnimator::startAnimValAnimation):
        (WebCore::SVGAnimatedPathAnimator::stopAnimValAnimation):
        (WebCore::SVGAnimatedPathAnimator::resetAnimValToBaseVal):
        (WebCore::SVGAnimatedPathAnimator::animValWillChange):
        (WebCore::SVGAnimatedPathAnimator::animValDidChange):
        * svg/SVGAnimatedPath.h:
        (SVGAnimatedPathAnimator):
        * svg/SVGAnimatedPointList.cpp:
        (WebCore::SVGAnimatedPointListAnimator::startAnimValAnimation):
        (WebCore::SVGAnimatedPointListAnimator::stopAnimValAnimation):
        (WebCore::SVGAnimatedPointListAnimator::resetAnimValToBaseVal):
        (WebCore::SVGAnimatedPointListAnimator::animValWillChange):
        (WebCore::SVGAnimatedPointListAnimator::animValDidChange):
        * svg/SVGAnimatedPointList.h:
        (SVGAnimatedPointListAnimator):
        * svg/SVGAnimatedPreserveAspectRatio.cpp:
        (WebCore::SVGAnimatedPreserveAspectRatioAnimator::startAnimValAnimation):
        (WebCore::SVGAnimatedPreserveAspectRatioAnimator::stopAnimValAnimation):
        (WebCore::SVGAnimatedPreserveAspectRatioAnimator::resetAnimValToBaseVal):
        (WebCore::SVGAnimatedPreserveAspectRatioAnimator::animValWillChange):
        (WebCore::SVGAnimatedPreserveAspectRatioAnimator::animValDidChange):
        * svg/SVGAnimatedPreserveAspectRatio.h:
        (SVGAnimatedPreserveAspectRatioAnimator):
        * svg/SVGAnimatedRect.cpp:
        (WebCore::SVGAnimatedRectAnimator::startAnimValAnimation):
        (WebCore::SVGAnimatedRectAnimator::stopAnimValAnimation):
        (WebCore::SVGAnimatedRectAnimator::resetAnimValToBaseVal):
        (WebCore::SVGAnimatedRectAnimator::animValWillChange):
        (WebCore::SVGAnimatedRectAnimator::animValDidChange):
        * svg/SVGAnimatedRect.h:
        (SVGAnimatedRectAnimator):
        * svg/SVGAnimatedString.cpp:
        (WebCore::SVGAnimatedStringAnimator::startAnimValAnimation):
        (WebCore::SVGAnimatedStringAnimator::stopAnimValAnimation):
        (WebCore::SVGAnimatedStringAnimator::resetAnimValToBaseVal):
        (WebCore::SVGAnimatedStringAnimator::animValWillChange):
        (WebCore::SVGAnimatedStringAnimator::animValDidChange):
        * svg/SVGAnimatedString.h:
        (SVGAnimatedStringAnimator):
        * svg/SVGAnimatedTransformList.cpp:
        (WebCore::SVGAnimatedTransformListAnimator::startAnimValAnimation):
        (WebCore::SVGAnimatedTransformListAnimator::stopAnimValAnimation):
        (WebCore::SVGAnimatedTransformListAnimator::resetAnimValToBaseVal):
        (WebCore::SVGAnimatedTransformListAnimator::animValWillChange):
        (WebCore::SVGAnimatedTransformListAnimator::animValDidChange):
        * svg/SVGAnimatedTransformList.h:
        (SVGAnimatedTransformListAnimator):
        * svg/SVGAnimatedTypeAnimator.h:
        (SVGAnimatedTypeAnimator):
        (WebCore::SVGAnimatedTypeAnimator::findAnimatedPropertiesForAttributeName):
        (WebCore::SVGAnimatedTypeAnimator::findAnimatedPropertiesFromInstancesForAttributeName):
        (WebCore::SVGAnimatedTypeAnimator::constructFromBaseValue):
        (WebCore::SVGAnimatedTypeAnimator::resetFromBaseValue):
        (WebCore::SVGAnimatedTypeAnimator::stopAnimValAnimationForType):
        (WebCore::SVGAnimatedTypeAnimator::animValDidChangeForType):
        (WebCore::SVGAnimatedTypeAnimator::animValWillChangeForType):
        (WebCore::SVGAnimatedTypeAnimator::constructFromBaseValues):
        (WebCore::SVGAnimatedTypeAnimator::resetFromBaseValues):
        (WebCore::SVGAnimatedTypeAnimator::stopAnimValAnimationForTypes):
        (WebCore::SVGAnimatedTypeAnimator::animValDidChangeForTypes):
        (WebCore::SVGAnimatedTypeAnimator::animValWillChangeForTypes):
        (WebCore::SVGAnimatedTypeAnimator::castAnimatedPropertyToActualType):
        (WebCore::SVGAnimatedTypeAnimator::executeAction):
        * svg/properties/SVGAnimatedProperty.h:
        (SVGAnimatedProperty):
        * svg/properties/SVGPropertyTearOff.h:
        (WebCore::SVGPropertyTearOff::animatedProperty):
        (SVGPropertyTearOff):

2012-05-11  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/11425812> CADisplayLink for requestAnimationFrame keeps running even when no callbacks are pending.
        <rdar://problem/9218033> Should we ENABLE(REQUEST_ANIMATION_FRAME)?

        Reviewed by Dean Jackson.

        Merged TOT WebKit r116792, and fix for iOS.
        
        I turned off DisplayRefreshMonitorMac.mm, and added a new DisplayRefreshMonitoriOS.mm
        file, since the #ifdefs were getting messy.

        * platform/graphics/ios/DisplayRefreshMonitoriOS.mm: Copied from Source/WebCore/platform/graphics/mac/DisplayRefreshMonitorMac.mm.
        (mediaTimeToCurrentTime):
        (-[WebDisplayLinkHandler initWithMonitor:WebCore::]):
        (-[WebDisplayLinkHandler dealloc]):
        (-[WebDisplayLinkHandler handleDisplayLink:]):
        (-[WebDisplayLinkHandler invalidate]):
        (WebCore):
        (WebCore::DisplayRefreshMonitor::~DisplayRefreshMonitor):
        (WebCore::DisplayRefreshMonitor::requestRefreshCallback):
        (WebCore::DisplayRefreshMonitor::displayLinkFired):
        * platform/graphics/mac/DisplayRefreshMonitorMac.mm:
        (WebCore::displayLinkCallback):
        (WebCore::DisplayRefreshMonitor::~DisplayRefreshMonitor):
        (WebCore::DisplayRefreshMonitor::requestRefreshCallback):
        (WebCore::DisplayRefreshMonitor::displayLinkFired):

        Also enabling fast/animation tests, per <rdar://problem/9218033>.

    2012-05-11  Simon Fraser  <simon.fraser@apple.com>
    
            CVDisplayLink keeps running after a single requestAnimationFrame
            https://bugs.webkit.org/show_bug.cgi?id=86174
            
            Reviewed by Sam Weinig.
            
            A DisplayRefreshMonitor would keep its CVDisplayLink alive for as long
            as it had clients, and the client is the ScriptedAnimationController, which
            lives on the document. So a single requestAnimationFrame call would kick
            off a CVDisplayLink which lived until the document was destroyed.
            
            Fix by having the DisplayRefreshMonitor kill itself if the CVDisplayLink
            fires for 10 times with no scheduled callbacks (to avoid creation/deletion
            thrash on pages that call requestAnimationFrames with short setTimeouts,
            as some do).
            
            Use a HashMap in DisplayRefreshMonitorManager for the set of DisplayRefreshMonitor,
            with the displayID as the key (using UnsignedWithZeroKeyHashTraits<uint64_t> since
            we want to allow for 0 to be a valid displayID).
            
            Use a HashSet in DisplayRefreshMonitor for the client set, so that we don't have to
            worry about adding clients twice.
            
            Also fix a possible crash when the only client of a DisplayRefreshMonitor
            was removed from inside the callback by making DisplayRefreshMonitor ref-counted,
            with a protector.
    
            Test: fast/animation/request-animation-frame-detach-element2.html
    
            * platform/graphics/DisplayRefreshMonitor.cpp:
            (WebCore::DisplayRefreshMonitor::DisplayRefreshMonitor): Initialize m_unscheduledFireCount
            (WebCore::DisplayRefreshMonitor::handleDisplayRefreshedNotificationOnMainThread): Renamed
            from refreshDisplayOnMainThread, since it doesn't just refresh the display.
            (WebCore::DisplayRefreshMonitor::addClient): No longer inline.
            (WebCore::DisplayRefreshMonitor::removeClient): No longer inline.
            (WebCore::DisplayRefreshMonitor::displayDidRefresh): Keep track of m_unscheduledFireCount,
            which we used to kill this monitor if it has been idle for a while.
            Use a RefPtr<DisplayRefreshMonitor> to prevent deletion while running the callback.
            Copy the clients to a vector to protect against mutating the set while enumerating it.
            Notify the DisplayRefreshMonitorManager when we're done, so that it can decide
            to delete inactive monitors.
            
            (WebCore::DisplayRefreshMonitorManager::ensureMonitorForClient): find or allocate
            a DisplayRefreshMonitor for a given client.
            (WebCore::DisplayRefreshMonitorManager::registerClient): Simplified by use of HashMap.
            (WebCore::DisplayRefreshMonitorManager::unregisterClient): Ditto.
            (WebCore::DisplayRefreshMonitorManager::scheduleAnimation): Ditto. Uses
            ensureMonitorForClient() since an earlier inactive monitor may have been removed.
            (WebCore::DisplayRefreshMonitorManager::displayDidRefresh): Remove inactive
            monitors.
            * platform/graphics/DisplayRefreshMonitor.h: Make DisplayRefreshMonitor
            ref-counted, to make it easier to avoid deletion while it's on the stack.
            (WebCore::DisplayRefreshMonitor::create):
            (DisplayRefreshMonitor):
            (WebCore::DisplayRefreshMonitor::shouldBeTerminated):
            (DisplayRefreshMonitorManager):
            * platform/graphics/blackberry/DisplayRefreshMonitorBlackBerry.cpp: Attempt to
            keep things building.
            (WebCore::DisplayRefreshMonitor::~DisplayRefreshMonitor):
            (WebCore::DisplayRefreshMonitor::displayLinkFired):
            to give the manager a chance to kill this monitor.
            * platform/graphics/mac/DisplayRefreshMonitorMac.cpp:
            (WebCore::DisplayRefreshMonitor::~DisplayRefreshMonitor):
            (WebCore::DisplayRefreshMonitor::displayLinkFired): Don't bail early
            if not scheduled; we want to call handleDisplayRefreshedNotificationOnMainThread(),

2012-05-11  Dean Jackson  <dino@apple.com>

        <rdar://problem/11332775> Inception: Canvas scaling seems broken on page load as of 10A295

        Reviewed by Simon Fraser.

        Reapply TOT WebKit r111872 after it was reverted in iOS WebKit r1118296. This no
        longer reproduces on later Sundances, suggesting that the root cause may have
        been in CG or QuartzCore, even though I couldn't find any changes since then that
        would have indicated a fix. I did rollback iOS WebKit to before we reverted and
        the problem did not reproduce.

        The benefit is that we're now aligned with ToT again. There were some slight
        changes needed due to ToT updates since the reversion.

        * html/HTMLCanvasElement.cpp:
        (WebCore::HTMLCanvasElement::HTMLCanvasElement):
        (WebCore::HTMLCanvasElement::reset):
        (WebCore::HTMLCanvasElement::setSurfaceSize):
        (WebCore::HTMLCanvasElement::createImageBuffer):
        (WebCore::HTMLCanvasElement::clearImageBuffer):
        (WebCore):
        (WebCore::HTMLCanvasElement::clearCopiedImage):
        * html/HTMLCanvasElement.h:
        (WebCore):
        (HTMLCanvasElement):
        * html/canvas/CanvasRenderingContext2D.cpp:
        (WebCore::CanvasRenderingContext2D::reset):

2012-05-10  Joseph Pecoraro  <pecoraro@apple.com>

        <rdar://problem/11421262> REGRESSION(10A305): Image stretched and rotated when pasted in compose sheet

        iOS used to always respect EXIF orientation. With the merge we switched to use
        the OpenSource path which has a runtime setting. The OpenSource runtime setting
        defaults to false causing some Documents to default to not respecting EXIF image
        orientation values where previously they did. This patch aims to catch all such
        cases by making the default runtime setting true for iOS.

        Reviewed by Tim Horton.

        * page/Settings.cpp:
        (WebCore::Settings::Settings):

2012-05-10  Joseph Pecoraro  <pecoraro@apple.com>

        <rdar://problem/11377266> REGRESSION(Sundance): LayoutTests/text-autosizing/text-size-adjust.html is failing

        iOS and OpenSource both have conflicting CSSPropertyWebkitTextSizeAdjust values.
        The OpenSource version accepts only keywords (auto | none), but the iOS version
        also accepts numeric values (percentages). The OpenSource path can safely return
        true from isKeywordPropertyID and check only against keywords, but on iOS we want
        to drop down to the already existing code that checks keywords and numeric values.

        Reviewed by David Carson.

        Covered by existing tests.

        * css/CSSParser.cpp:
        (WebCore::isKeywordPropertyID):

2012-05-10  Joseph Pecoraro  <pecoraro@apple.com>

        <rdar://problem/9761832> Investigate raising total application cache storage size

        This is the only remaining iOS difference in AppCache code. iOS used to
        obliterate the AppCache whenever it got above 256MB. This doesn't make
        sense if we want to allow websites to cache up to 1GB of data. We should
        remove this now stale iOS limit. Users can delete the data in Safari's
        Settings by removing all website data.

        Reviewed by David Carson.

        * loader/appcache/ApplicationCacheStorage.cpp:
        (WebCore::ApplicationCacheStorage::openDatabase):

2012-05-09  Enrica Casucci  <enrica@apple.com>

        <rdar://problem/10421832> Cutting/Copying and Pasting Text Results in Formatting Issue Where
        Line Break is Compromised on ALL devices.
        
        Reviewed by Darin Adler and David Kilzer.

        I've removed some iOS specific code from ReplaceSelectionCommand that was
        introduced 3 years ago to minimize the amount of nested divs during copy/paste operations.
        Since then, ReplaceSelectionCommand has been greatly improved in this area and this
        code is now obsolete. I verified that the current OpenSource implementation fixes
        the original bug that prompted the change that caused this bug.
        
        * editing/ReplaceSelectionCommand.cpp:
        (WebCore::ReplaceSelectionCommand::doApply): Removed all #if PLATFORM(iOS).

2012-05-08  Benjamin Poulain  <bpoulain@apple.com>

        <rdar://problem/9369508> Cannot expand/collapse children of a <details> element.

        Reviewed by David Kilzer.
        Reviewed by Joseph Pecoraro.

        Add support for willRespondToMouseClickEvents() to HTMLSummaryElement in order to open
        and close the <details> element.

        The conditions for willRespondToMouseClickEvents() mirror the minimum requirement
        of HTMLSummaryElement::defaultEventHandler().

        Patch inspired by Joe.

        * html/HTMLSummaryElement.cpp:
        (WebCore):
        (WebCore::HTMLSummaryElement::willRespondToMouseClickEvents):
        * html/HTMLSummaryElement.h:
        (HTMLSummaryElement):

2012-05-08  Benjamin Poulain  <bpoulain@apple.com>

        Merge Open Source r116486 for <rdar://problem/11092785>.

    2012-05-08  Benjamin Poulain  <bpoulain@apple.com>

        [JSC] Regression: addEventListener() and removeEventListener() raise an exception on missing args
        https://bugs.webkit.org/show_bug.cgi?id=85928

        Reviewed by Geoffrey Garen.

        The functions addEventListener() and removeEventListener() raise an exception if there are missin arguments.
        This behavior breaks existing content.

        This patch change the code generator of JavaScript core to have an exception for addEventListener() and removeEventListener().
        For those function, we do not raise an exception on missin argument.

        This patch does not modify the V8 code generator because such exceptions are already in place there.

        Tests: fast/dom/Window/window-legacy-event-listener.html
               fast/dom/XMLHttpRequest-legacy-event-listener.html
               fast/dom/node-legacy-event-listener.html

        * bindings/scripts/CodeGeneratorJS.pm:
        (GenerateImplementation):

2012-05-08  Joseph Pecoraro  <pecoraro@apple.com>

        <rdar://problem/11410835> WebCore[_Sim] fail to build in Sundance

        Add -isysroot to a $(CC) invocation. This change will be upstreamed.

        Rubber-stamped by Yongjun Zhang.

        * DerivedSources.make:

2012-05-08  Simon Fraser  <simon.fraser@apple.com>

        Merged TOT WebKit r116395.

    2012-05-07  Simon Fraser  <simon.fraser@apple.com>
    
            Compositing layers with transformed children not large enough to show contents
            https://bugs.webkit.org/show_bug.cgi?id=85855
    
            Reviewed by Dan Bernstein.
            
            r114518 added a code path to RenderLayer::calculateLayerBounds() which
            does an early return if the layer has clipping. However, this code
            path omitted to take local transforms into account.
            
            Fix is to handle transforms as we do in the non-clipped case.
    
            Test: compositing/geometry/bounds-clipped-composited-child.html
    
            * rendering/RenderLayer.cpp:
            (WebCore::RenderLayer::calculateLayerBounds):

2012-05-07  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/11213702> REGRESSION: Focusing address field in Safari with long URL jumps to start of URL and can't move cursor to end when editing

        Merged TOT WebKit r115846.

    2012-05-02  Julien Chaffraix  <jchaffraix@webkit.org>

        REGRESSION(110072): Clipping is not applied on layers that are animated using platform code
        https://bugs.webkit.org/show_bug.cgi?id=83954

        Reviewed by Simon Fraser.

        Tests: fast/layers/no-clipping-overflow-hidden-added-after-transform-expected.html
               fast/layers/no-clipping-overflow-hidden-added-after-transform.html
               fast/layers/no-clipping-overflow-hidden-added-after-transition-expected.html
               fast/layers/no-clipping-overflow-hidden-added-after-transition.html
               fast/layers/no-clipping-overflow-hidden-hardware-acceleration-expected.html
               fast/layers/no-clipping-overflow-hidden-hardware-acceleration.html
               (and all the tests that will need to be rebaselined)

        r110072 changed the way we create layers to lazily allocate overflow: hidden ones
        based on layout overflow. However with hardware acceleration, certain operations
        do cause overflow without actually calling layout (the test cases added as part
        of this change are using transition / animation). This means that those cases
        wouldn't properly clip.

        Due to the above issue and the other regressions from r110072, the easiest fix is
        to just to roll it out.

        * rendering/RenderBox.h:
        Changed to allocate a layer whenever we have an overflow clip.

        * rendering/RenderBox.cpp:
        (WebCore::RenderBox::scrolledContentOffset):
        (WebCore::RenderBox::cachedSizeForOverflowClip):
        Reverted those 2 to avoid using the cached size logic.

        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::updateScrollInfoAfterLayout):
        (WebCore::RenderBlock::layoutBlock):
        (WebCore::RenderBlock::paint):
        (WebCore::RenderBlock::isPointInOverflowControl):
        * rendering/RenderBlock.h:
        * rendering/RenderBox.cpp:
        (WebCore::RenderBox::willBeDestroyed):
        (WebCore::RenderBox::styleDidChange):
        (WebCore::RenderBox::layout):
        (WebCore::RenderBox::scrollWidth):
        (WebCore::RenderBox::scrollHeight):
        (WebCore::RenderBox::scrollLeft):
        (WebCore::RenderBox::scrollTop):
        (WebCore::RenderBox::setScrollLeft):
        (WebCore::RenderBox::setScrollTop):
        (WebCore::RenderBox::includeVerticalScrollbarSize):
        (WebCore::RenderBox::includeHorizontalScrollbarSize):
        (WebCore::RenderBox::pushContentsClip):
        (WebCore::RenderBox::popContentsClip):
        (WebCore::RenderBox::addLayoutOverflow):
        * rendering/RenderBoxModelObject.cpp:
        (WebCore::RenderBoxModelObject::styleDidChange):
        * rendering/RenderBoxModelObject.h:
        (RenderBoxModelObject):
        * rendering/RenderDeprecatedFlexibleBox.cpp:
        (WebCore::RenderDeprecatedFlexibleBox::layoutBlock):
        * rendering/RenderFlexibleBox.cpp:
        (WebCore::RenderFlexibleBox::layoutBlock):
        * rendering/RenderTable.cpp:
        (WebCore::RenderTable::layout):
        * rendering/RenderTableRow.h:
        (RenderTableRow):
        * rendering/RenderTableSection.cpp:
        (WebCore::RenderTableSection::layout):
        Removed the previous scaffolding code and reverted some functions to
        being private (as they were prior to r110072).

2012-05-07  Chris Fleizach  <cfleizach@apple.com>

        <rdar://problem/10643474> DOMFocusIn doesn't fire consistently on iOS when VoiceOver is running

        Reviewed by David Kilzer.

        When VoiceOver moves around, it fires focus() events, but if the element VoiceOver is on does not accept
        focus, no event is fired. However, when it's inside something that accepts focus, like text inside a link,
        we should focus on that link.

        Test: platform/iphone-simulator/accessibility/dom-focus-fires-on-correct-element.html

        * accessibility/ios/AccessibilityObjectWrapperIOS.mm:
        (-[WebAccessibilityObjectWrapper accessibilityElementDidBecomeFocused]):

2012-05-06  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/11310888> Move CFSystemVersion checks to WebKitSystemInterface

        Reviewed by Dan Bernstein.

        * WebCore.exp.in: Export
        wkExecutableWasLinkedOnOrAfterIOSVersion().
        * html/HTMLObjectElement.cpp:
        (WebCore::shouldNotPerformURLAdjustment): Switch to
        iosExecutableWasLinkedOnOrAfterVersion().
        * page/ios/EventHandlerIOSTouch.cpp:
        (WebCore::shouldPassTouchEventsToSubframes): Ditto.
        (WebCore::shouldSendTouchEventAboveShadowRoot): Ditto.
        * platform/graphics/ios/FontCacheIOS.mm:
        (WebCore::FontCache::createFontPlatformData): Ditto.
        * platform/graphics/mac/FontMac.mm:
        (WebCore::Font::drawGlyphs): Ditto.
        * platform/ios/WebCoreSystemInterfaceIOS.h:
        (wkExecutableWasLinkedOnOrAfterIOSVersion): Add declaration.
        (iosExecutableWasLinkedOnOrAfterVersion): Add.
        * platform/ios/WebCoreSystemInterfaceIOS.mm:
        (wkExecutableWasLinkedOnOrAfterIOSVersion): Add function
        pointer.

2012-05-06  David Kilzer  <ddkilzer@apple.com>

        Add WebCoreSystemInterfaceIOS.h

        Reviewed by Dan Bernstein.

        * WebCore.xcodeproj/project.pbxproj: Add
        WebCoreSystemInterfaceIOS.h to project.
        * platform/ios/WebCoreSystemInterfaceIOS.h: Add.
        (wkIsGB18030ComplianceRequired): Add declaration.
        * platform/mac/WebCoreSystemInterface.h: Include
        WebCoreSystemInterfaceIOS.h.
        (wkIsGB18030ComplianceRequired): Remove declaration.

2012-05-06  David Kilzer  <ddkilzer@apple.com>

        Clean up Xcode project file for WebCore

        Rubber-stamped by Dan Bernstein.

        Let Xcode have its way with the project file, and manually clean
        up remaining issues.  Only changes that do not involve resorting
        are noted below.

        * Configurations/WebCore.xcconfig:
        (EXCLUDED_SOURCE_FILE_NAMES_iphoneos): Add
        WebAccessibilityObjectWrapper.mm.

        * WebCore.xcodeproj/project.pbxproj:
        - Add missing entry for WebAccessibilityObjectWrapper.mm.
        - Remove duplicate entries for DOMWindowNotifications.h and
          DOMWindowNotifications.cpp.
        - Remove reference to QuartzCore.framework.  That is listed in
          WebCore.xcconfig for iOS WebKit.
        - Remove duplicate webaudio group (which had the old path).
        - Remove references to deleted files: GeolocationService.h,
          GeolocationService.cpp, GeolocationServiceMock.h and
          GeolocationServiceMock.cpp.

2012-05-05  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/11351120> WebKit should adopt CoreText's revised Emoji positioning

        In Sundance, Core Text is changing its positioning of Apple Color Emoji glyphs in clients
        linked on or after Sundance (see <rdar://problem/11310074>). Emoji positioning in WebKit
        clients and WebKit fast string drawing should not change, so this change adjusts for the
        new Core Text behavior.

        * platform/graphics/mac/FontMac.mm:
        (WebCore::Font::drawGlyphs): Changed to use different constants for the vertical position
        adjustment applied to emoji glyphs based on the iOS version at link time.

2012-05-05  Dean Jackson  <dino@apple.com>

        <rdar://problem/11043693> webbookmarksd shouldn't try to set up a CADisplayLink/requestAnimationFrame (85693)

        Merge OpenSource WebKit r116230.

    2012-05-05  Dean Jackson  <dino@apple.com>

        Add new Setting/Preference to disable requestAnimationFrame
        https://bugs.webkit.org/show_bug.cgi?id=85693

        Reviewed by Simon Fraser.

        Hook up the new WebPreference for disabling requestAnimationFrame
        to Settings. This isn't disabling the feature in the typical
        WebKit ENABLE() way - it's still available in the DOM, it's
        just that the animations will never be serviced. This allows a client
        to disable the machinery without breaking content (other than the
        animations).

        The new test is currently skipped on all platforms because toggling
        the preference interferes with the other tests that are running
        at the same time (and expect a working requestAnimationFrame).
        https://bugs.webkit.org/show_bug.cgi?id=85689

        Test: fast/animation/request-animation-frame-disabled.html

        * dom/ScriptedAnimationController.cpp:
        (WebCore::ScriptedAnimationController::serviceScriptedAnimations):
        (WebCore::ScriptedAnimationController::windowScreenDidChange):
        (WebCore::ScriptedAnimationController::scheduleAnimation):
        Check the setting before deciding to act.
        * page/Settings.cpp:
        (WebCore::Settings::Settings):
        * page/Settings.h:
        (WebCore::Settings::setRequestAnimationFrameEnabled):
        (WebCore::Settings::requestAnimationFrameEnabled):
        (Settings):

2012-05-03  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/11333142> Keep overlap testing on pages with animations and 3d transforms
        Partial fix for overflow which is stacking context.
        
        Merge OpenSource WebKit r115989.

    2012-05-03  Simon Fraser  <simon.fraser@apple.com>

        Keep overlap testing for compositing on pages with 3d transforms when possible
        https://bugs.webkit.org/show_bug.cgi?id=62487

        Reviewed by Antti Koivisto.
        
        Change RenderLayerCompositor to always use overlap testing when possible.

        Rather than turn off overlap testing wholesale when encountering a non-affine
        transform, or starting an accelerated transform animation, we constrain
        the disabling of overlap testing to within overflow:hidden areas when possible.

        Tests: compositing/layer-creation/overlap-animation.html
               compositing/layer-creation/overlap-transforms.html

        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::setCompositedBounds): Whitespace fix.
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::CompositingState::CompositingState):
        (CompositingState): Add a member boolean to track whether we're testing overlap. Add a copy
        constructor.
        (WebCore::RenderLayerCompositor::updateCompositingLayers): Initialize the 'testing overlap'
        setting based on m_compositingConsultsOverlap (though this will always be true until removed
        in a future commit).
        (WebCore::RenderLayerCompositor::updateBacking): No longer turn off overlap testing
        when we see a non-affine transform.
        (WebCore::RenderLayerCompositor::computeCompositingRequirements): No need for the 'struct'
        in the arguments.
        Consult compositingState.m_testingOverlap to see if we want to test overlap.
        Use the new CompositingState copy ctor for childState, but set m_subtreeIsCompositing to false
        as before.
        If this layer is composited, look to see if need to disable over lap testing based on
        the transform or an animation.
        Just as we propagate m_subtreeIsCompositing, we have to propagate m_testingOverlap=false
        for the rest of the traverse.
        If we've just processed a layer which clips compositing descendants, we can go back
        to testing for overlap.
        (WebCore::RenderLayerCompositor::didStartAcceleratedAnimation): No need to do anything
        here now. It will be removed in future.
        (WebCore::RenderLayerCompositor::hasNonAffineTransform): No longer check
        perspective here, since that doesn't affect whether _this_ layer should disable
        overlap testing. Checking for a non-affine transform is sufficient.
        (WebCore::RenderLayerCompositor::isRunningAcceleratedTransformAnimation):
        New method to check if AnimationController is running a transform animation.
        * rendering/RenderLayerCompositor.h:
        (RenderLayerCompositor):

2012-05-03  Simon Fraser  <simon.fraser@apple.com>

        Merge OpenSource WebKit r115396.

    2012-04-26  Simon Fraser  <simon.fraser@apple.com>

        Improve compositing logging output
        https://bugs.webkit.org/show_bug.cgi?id=85010

        Reviewed by Dean Jackson.

        In the compositing log channel output, indent the layers
        based on z-order tree depth. Tabulate the summary, and
        show obligate and secondary backing store area separately.

        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::updateClipRects):
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::RenderLayerCompositor):
        (WebCore::RenderLayerCompositor::updateCompositingLayers):
        (WebCore::RenderLayerCompositor::logLayerInfo):
        (WebCore::RenderLayerCompositor::rebuildCompositingLayerTree):
        (WebCore::RenderLayerCompositor::updateLayerTreeGeometry):
        (WebCore::RenderLayerCompositor::reasonForCompositing):
        * rendering/RenderLayerCompositor.h:
        (RenderLayerCompositor):

2012-05-04  Enrica Casucci  <enrica@apple.com>

        Merge OpenSource WebKit r116192.

    2012-05-04  Enrica Casucci  <enrica@apple.com>

        REGRESSION: Cursor jumps to the first line after deleting the last word.
        https://bugs.webkit.org/show_bug.cgi?id=85334
        <rdar://problem/11210059>

        Reviewed by Ryosuke Niwa.

        This regression was introduced with the work to remove redundant divs.
        When we decide to remove a DIV, we need to adjust the selection, if it is
        expressed in terms of the node being removed. The new position was computed
        using updatePositionForNodeRemoval that was not designed for the case where we
        remove preserving children.
        This patch adds a new method to CompositeEditCommand to do this properly.
        
        Test: editing/deleting/delete-word-from-unstyled-div.html

        * editing/CompositeEditCommand.cpp:
        (WebCore::CompositeEditCommand::isRemovableBlock): Code clenup.
        (WebCore::CompositeEditCommand::updatePositionForNodeRemovalPreservingChildren): Added.
        * editing/CompositeEditCommand.h:
        * editing/DeleteSelectionCommand.cpp:
        (WebCore::DeleteSelectionCommand::removeRedundantBlocks): Uses updatePositionForNodeRemovalPreservingChildren.
        
2012-05-04  Simon Fraser  <simon.fraser@apple.com>

        Remove ASSERT(0) inadvertently added by Tim Horton in r1120201.
        
        * loader/cache/CachedImage.cpp:
        (WebCore::CachedImage::setContainerSizeForRenderer):

2012-05-04  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/10137626> iOS Internationalized Domain Name Spoofing Vulnerability

        Merged WebKit r116189.

    2012-05-04  Yongjun Zhang  <yongjun_zhang@apple.com>

            Add "combining short stroke overlay character (u0335)" to lookalike characters blacklist.
            https://bugs.webkit.org/show_bug.cgi?id=85440

            Reviewed by David Kilzer.

            We should add u0335 to the characters blacklist.

            * platform/mac/WebCoreNSURLExtras.mm:
            (WebCore::isLookalikeCharacter):

2012-05-04  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/11379331> REGRESSION: Incorrect rendering of apple.com/iphone

        Reviewed by Dean Jackson.
        
        apple.com/iphone rendered incorrectly after a recent merge. This was caused
        by RenderLayerCompositor::addToOverlapMap() applying page scale to a computed
        clip rect, which is appropriate on desktop where page scale is applied by the RenderView,
        but not on iOS where "absolute" coordinates do not get affected by page scale.
        
        I did not find any other occurences of this incorrect application of page scale.

        Test: platform/iphone-simulator/iphone/compositing/overlap-page-scale.html

        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::addToOverlapMap):

2012-05-03  Benjamin Poulain  <bpoulain@apple.com>

        <rdar://problem/11239314> Reset CoreLocation Warnings will not reset Geolocation warnings

        Reviewed by David Kilzer.

        This patch prevent the Geolocation objects to enter the back-forward cache.

        The reason is the Geolocation object stores states that can be reset externaly once
        <rdar://problem/11239314> is fixed (m_allowGeolocation, m_pendingForPermissionNotifiers).

        We want the pages to query the GeolocationClient again in case the cache was cleared.

        * Modules/geolocation/Geolocation.cpp:
        (WebCore):
        * Modules/geolocation/Geolocation.h:
        (Geolocation):

2012-05-04  Enrica Casucci  <enrica@apple.com>

        REGRESSION(r1117609) Red correction underline persists after correct word is typed.
        <rdar://problem/11344952> 

        Reviewed by David Kilzer.

        This was lost during the merge.

        * platform/text/TextChecking.h:

2012-05-03  Tim Horton  <timothy_horton@apple.com>

        Merge OpenSource WebKit r116001.

    2012-05-03  Tim Horton  <timothy_horton@apple.com>

        REGRESSION(99539): SVG <img> disregards page scale and device scale
        https://bugs.webkit.org/show_bug.cgi?id=77237
        <rdar://problem/10767413>

        Reviewed by Simon Fraser.

        Rename SVGImageCache::SizeAndZoom to SVGImageCache::SizeAndScales, as it carries more than just zoom now.

        Pass the product of the device and page scales through everything that takes a SVGImageCache::SizeAndScales,
        using it to inflate the size of the buffer created in lookupOrCreateBitmapImageForRenderer,
        and to inflate the destination rectangle passed to SVGImage::draw, which will cause a transformation
        on the context being drawn into.

        Invalidate the SVGImageCache entry on device/page scale changes in addition to zoom changes.

        This patch does not cause SVGImageCache to take into account scale caused by CSS transforms; that is tracked
        separately by https://bugs.webkit.org/show_bug.cgi?id=85335.

        Tests: svg/as-image/image-respects-deviceScaleFactor.html
               svg/as-image/image-respects-pageScaleFactor.html

        * loader/cache/CachedImage.cpp:
        (WebCore::CachedImage::setContainerSizeForRenderer):
        (WebCore::CachedImage::imageSizeForRenderer):
        * svg/graphics/SVGImage.cpp:
        (WebCore::SVGImage::drawSVGToImageBuffer):
        * svg/graphics/SVGImage.h:
        * svg/graphics/SVGImageCache.cpp:
        (WebCore::SVGImageCache::~SVGImageCache):
        (WebCore::SVGImageCache::removeRendererFromCache):
        (WebCore::SVGImageCache::setRequestedSizeAndScales):
        (WebCore::SVGImageCache::requestedSizeAndScales):
        (WebCore::SVGImageCache::redraw):
        (WebCore::SVGImageCache::lookupOrCreateBitmapImageForRenderer):
        * svg/graphics/SVGImageCache.h:
        (WebCore::SVGImageCache::SizeAndScales::SizeAndScales):
        (SizeAndScales):
        (SVGImageCache):
        (WebCore::SVGImageCache::ImageData::ImageData):
        (ImageData):

2012-05-03  Benjamin Poulain  <bpoulain@apple.com>

        <rdar://problem/11273235> Get rid of WebEvent touchGlobalLocations

        Reviewed by Darin Adler.

        The old constructor was removed from UIKit, there are no reference left to this method.

        * platform/ios/WebEvent.h:
        * platform/ios/WebEvent.mm:
        (-[WebEvent initWithTouchEventType:timeStamp:location:modifiers:touchCount:touchLocations:touchIdentifiers:touchPhases:isGesture:gestureScale:gestureRotation:]):

2012-05-03  Benjamin Poulain  <bpoulain@apple.com>

        <rdar://problem/10307237> Get rid of WKWindowDrawRect()

        Reviewed by Darin Adler.

        All references have been removed, we can remove WKWindowDrawRect().

        * WebCore.exp.in:
        * wak/WKWindow.h:
        * wak/WKWindow.mm:
        (WKWindowPrepareForDrawing):

2012-05-03  Benjamin Poulain  <benjamin@webkit.org>

        Clean some left over after <rdar://problem/10951750>

        Reviewed by Paul Knight.

        I forgot to remove GeolocationClearPermissionGuard. This class is useless.

        * Modules/geolocation/Geolocation.h:

2012-05-01  Benjamin Poulain  <bpoulain@apple.com>

        <rdar://problem/10402010> REGRESSION(Telluride): contentobserver isn't eating <a> taps and click event handlers

        Reviewed by Simon Fraser.

        The content observer for detects visibility change on style recalc. If we do not force style recalc ourself, we
        rely on the page's JavaScript which is extremly unreliable.

        This patch moves the responsibility of observing content change from WAKWindow
        to the iOS EventHandler and force style recalc when needed.

        Before dispatching the mouse event, we force a style recalc so that any pending style change is resolved
        before observing.
        Next, we dispatch the event,observing any change in style.
        Finally, we force a style update to obtain any change of style left.

        * page/ios/EventHandlerIOS.mm:
        (WebCore::EventHandler::mouseMoved):
        * wak/WAKWindow.mm:
        (-[WAKWindow sendEvent:contentChange:]):

2012-05-01  Anton D'Auria  <adauria@apple.com>

        <rdar://problem/11044946> Time spent in -[TabDocument _createDocumentView] in launch on N90 increased 50% from 30 ms to 45 ms from Hoodoo to Sundance

        Reviewed by Pratik Solanki.

        In Hoodoo, WebCore early-returned from Settings::setPrivateBrowsingEnabled() if
        the setting didn't change. On Mac Safari, this was a problem because the setting
        is changed from private to non-private after all private windows are closed.
        When the next window opens, and the Page gets the non-private preference, the
        non-private cookie store isn't created. The default non-private Page setting is the
        same as the new setting, so the early return occurred. The Mac fix was to always
        make sure a cookie store is created when a page is created (<rdar://problem/9998144>
        After disabling private browsing, cookies are not available for the rest of the Safari
        session). This caused a 10ms regression in the creation of the first TabDocument.

        Mobile Safari always has a Page, For this reason, this patch reverts
        <rdar://problem/9998144>. The more general problem, of a per-Page setting that sets
        a global value, will be addressed in WebKit by <rdar://problem/10103215>.
        
        * page/Settings.cpp:
        (WebCore::Settings::setPrivateBrowsingEnabled):

2012-05-01  Benjamin Poulain  <bpoulain@apple.com>

        iOS fix for r114870

        * html/parser/HTMLTreeBuilder.cpp:
        (WebCore::HTMLTreeBuilder::insertPhoneNumberLink):

2012-04-30  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/11305369> Investigate whether hardware JPEG decoding could benefit WebKit when painting a mail composition containing images

        Reviewed by David Kilzer.

        Add an SPI to enable hardware JPEG decoding for Mail. When enabled we pass
        kCGImageSourceUseHardwareAcceleration in the options dictionary to
        CGImageSourceCreateImageAtIndex.

        * WebCore.exp.in:
        * platform/graphics/ImageSource.h:
        (WebCore::ImageSource::acceleratedImageDecodingEnabled):
        (WebCore::ImageSource::setAcceleratedImageDecodingEnabled):
        (ImageSource):
        * platform/graphics/cg/ImageSourceCG.cpp:
        (WebCore):
        (WebCore::ImageSource::imageSourceOptions):

2012-04-27  Gavin Barraclough  <barraclough@apple.com>

        <rdar://problem/7909395> Math in JavaScript is inaccurate
        
        iOS defaults to not supporting IEEE754 denormals, which leads
        to math bugs. To fix this WebCore's threads that run javascript
        should enable support for correct IEEE math. However we don't
        want to run the webcore thread in an inconsistent state with the
        UI thread, and we don't want WebCore to automatically opt the UI
        thread in to different math behaviour, so turn this around - let
        WebCore's behaviour be determined by the main thread. To opt in
        to correct math, an app can enabled denormal support on its main
        thread before calling in to WebCore. Make WebCore propagate the
        fenv state from the main thread to the webcore & worker threads
        (on which javascript code is run).

        Reviewed by Filip Pizlo.

        * wak/WebCoreThread.h:
        * wak/WebCoreThread.mm:
        (RunWebThread):
            - Set the webcore thread's fenv state.
        (StartWebThread):
            - Store the main thread's fenv state.
        * workers/WorkerThread.cpp:
        (WebCore::WorkerThread::workerThread):
            - Set the worker thread's fenv state.

2012-04-26  Pratik Solanki  <psolanki@apple.com>

        Merge OpenSource WebKit r114843.

    2012-04-21  Darin Adler  <darin@apple.com>

        Improve performance of removing user and password from URLs
        https://bugs.webkit.org/show_bug.cgi?id=84525

        Reviewed by Dan Bernstein.

        Performance improvement only. Correctness covered by existing regression tests.

        The most common use of KURL::setUser and KURL::setPass, by far, is to remove
        the user and password from a URL that already has neither. Optimize this by
        not re-parsing the URL in that case.

        * platform/KURL.cpp:
        (WebCore::KURL::setUser): Restructure code so that the code path that removes
        the user does no work when there is nothing to remove. Otherwise, leave the
        logic of the function untouched.
        (WebCore::KURL::setPass): Same thing, only for password rather than user.

2012-04-26  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/11330849> Inception: Canvas scaling seems broken on page load as of 10A295

        Reviewed by Dean Jackson.

        Reverted TOT WebKit r111872, which was part of r1117609 (the most recent WebKit merge).

        * html/HTMLCanvasElement.cpp:
        (WebCore::HTMLCanvasElement::HTMLCanvasElement):
        (WebCore::HTMLCanvasElement::reset):
        (WebCore::HTMLCanvasElement::setSurfaceSize):
        (WebCore::HTMLCanvasElement::createImageBuffer):
        (WebCore):
        (WebCore::HTMLCanvasElement::clearCopiedImage):
        * html/HTMLCanvasElement.h:
        (WebCore):
        (HTMLCanvasElement):
        * html/canvas/CanvasRenderingContext2D.cpp:
        (WebCore::CanvasRenderingContext2D::reset):

2012-04-26  Benjamin Poulain  <bpoulain@apple.com>

        Merge OpenSource WebKit r115392.

    2012-04-26  Benjamin Poulain  <bpoulain@apple.com>

        Use WebKit types for the cache of ObjcClass::methodsNamed()
        https://bugs.webkit.org/show_bug.cgi?id=85012

        Reviewed by Geoffrey Garen.

        This patch redefines the method cache ObjcClass to avoid memory allocations in the case of positive match.

        Instead of using the converted name as the key, the original identifier string is used. This shortcuts
        all the other operations when there is a match.

        A side effect is a method can appear multiple times in the cache if it is invoked with different names using
        the escape character "$". An attaquer could bloat the cache with a few hundreds strings.
        In the common case, having each name mapped is an improvment.

        * bridge/objc/objc_class.h:
        (ObjcClass):
        * bridge/objc/objc_class.mm:
        (JSC::Bindings::ObjcClass::ObjcClass):
        (JSC::Bindings::ObjcClass::methodsNamed):

2012-04-26  Benjamin Poulain  <bpoulain@apple.com>

        Merge OpenSource WebKit r115375.

    2012-04-26  Benjamin Poulain  <bpoulain@apple.com>

        Use String instead of RefPtr<StringImpl> for the cache of ObjcClass
        https://bugs.webkit.org/show_bug.cgi?id=84932

        Reviewed by Andreas Kling.

        The cache with RefPtr<StringImpl*> was added with r115007.

        This patch aims at making the code a little easier to read. By using String,
        one would not need to know the Traits for StringImpl.

        * bridge/objc/objc_class.h:
        (ObjcClass):

2012-04-26  Benjamin Poulain  <bpoulain@apple.com>

        Merge OpenSource WebKit r115358.

    2012-04-26  Benjamin Poulain  <bpoulain@apple.com>

        ObjcClass::methodsNamed() can leak if buffer is dynamically allocated
        https://bugs.webkit.org/show_bug.cgi?id=84668

        Reviewed by Alexey Proskuryakov.

        Change ObjcClass::methodsNamed() to be based on a vector instead of managing
        the memory manually.

        Tests: platform/mac/plugins/bindings-objc-long-method-name.html
               platform/mac/plugins/bindings-objc-method-name-conversion.html

        * bridge/objc/objc_class.mm:
        (Bindings):
        (JSC::Bindings::convertJSMethodNameToObjc):
        (JSC::Bindings::ObjcClass::methodsNamed):

2012-04-26  Benjamin Poulain  <bpoulain@apple.com>

        Merge OpenSource WebKit r115269.

    2012-04-25  Benjamin Poulain  <bpoulain@apple.com>

        Move convertJSMethodNameToObjc() to be a utility function of ObjcClass
        https://bugs.webkit.org/show_bug.cgi?id=84915

        Reviewed by Darin Adler.

        The function convertJSMethodNameToObjc() is only useful for ObjcClass::methodsNamed().

        This patch moves the function from objc_utility.mm to be a static function in objc_class.mm.
        It aims at simplifying the code for future changes of ObjcClass.

        * bridge/objc/objc_class.mm:
        (Bindings):
        (JSC::Bindings::convertJSMethodNameToObjc):
        * bridge/objc/objc_utility.h:
        * bridge/objc/objc_utility.mm:
        (Bindings):

2012-04-26  Benjamin Poulain  <bpoulain@apple.com>

        Merge OpenSource WebKit r115290.

    2012-04-25  Benjamin Poulain  <benjamin@webkit.org>

        Add a version of StringImpl::find() without offset
        https://bugs.webkit.org/show_bug.cgi?id=83968

        Reviewed by Sam Weinig.

        Remove the zero offset of the find() functions on strings.

        * html/parser/XSSAuditor.cpp:
        (WebCore::XSSAuditor::init):
        * platform/network/ResourceResponseBase.cpp:
        (WebCore::trimToNextSeparator):
        (WebCore::parseCacheHeader):

2012-04-26  Benjamin Poulain  <bpoulain@apple.com>

        Merge OpenSource WebKit r115007.

    2012-04-24  Benjamin Poulain  <bpoulain@apple.com>

        Implement the field cache of ObjcClass in WebKit types
        https://bugs.webkit.org/show_bug.cgi?id=84667

        Reviewed by Geoffrey Garen.

        Every time we get a field through the Objective-C bridge, we waste some time converting
        the incoming string to an CFString.

        This patch implement the field cache based on WTF types so that we can return directly
        in case of a positive match.

        When we do not have a match on the Identifier, we allocate the memory and find the valid field
        as before.

        * bridge/objc/objc_class.h:
        (ObjcClass):
        * bridge/objc/objc_class.mm:
        (JSC::Bindings::deleteMethod):
        (Bindings):
        (JSC::Bindings::ObjcClass::ObjcClass):
        (JSC::Bindings::ObjcClass::fieldNamed):

2012-04-26  Benjamin Poulain  <bpoulain@apple.com>

        Merge OpenSource WebKit r114539.

    2012-04-18  Benjamin Poulain  <bpoulain@apple.com>

        Remove m_subclassData from JSArray, move the attribute to subclass as needed
        https://bugs.webkit.org/show_bug.cgi?id=84249

        Reviewed by Geoffrey Garen.

        * bridge/runtime_array.cpp:
        (JSC::RuntimeArray::RuntimeArray):
        (JSC::RuntimeArray::finishCreation):
        * bridge/runtime_array.h:
        (JSC::RuntimeArray::getLength):
        (JSC::RuntimeArray::getConcreteArray):
        (RuntimeArray):

2012-04-26  Alexey Proskuryakov  <ap@apple.com>

        <rdar://problem/10836514> REGRESSION: initWithTouchEvent IDL needs to be updated due to
        arguments no longer being optional by default

        Reviewed by Sam Weinig.

        Fixes regression on platform/iphone-simulator/iphone/fast/events/touch/document-create-touch-list-ios.html

        * dom/GestureEvent.idl:
        * dom/TouchEvent.idl:
        Added [Optional=DefaultIsUndefined] to initializers to match old behavior.

2012-04-25  Dean Jackson  <dino@apple.com>

        <rdar://problem/11305119> In CoreMotionManager.mm, m_motionmanager.devicemotion (line 211) and m_motionmanager.accelerometerData (line 213) should do nil checks

        Reviewed by David Kilzer and Joseph Pecoraro.

        Followup patch. The CoreMotion team suggesting minimizing the
        number of accesses to properties, because each one takes a lock
        and is expensive.

        * platform/ios/CoreMotionManager.mm:
        (-[CoreMotionManager update]):

2012-04-25  Alexey Proskuryakov  <ap@apple.com>

        <rdar://problem/10487995> Can't paste twitter.app links into mail compositions

        Reviewed by Darin Adler.

        * platform/ios/PasteboardIOS.mm:
        (WebCore::documentFragmentWithImageResource): Removed unnecessary null checks.
        (WebCore::documentFragmentWithLink): Added a function to create <a href> from URL text.
        (WebCore::Pasteboard::documentFragmentForPasteboardItemAtIndex): Implemented pasting of
        arbitrary URLs into richly editable text. Previously, this was not implemented because
        Safari always puts text flavor into pasteboard, but other applications may only put URL,
        like Twitter does. Removed unnecessary null checks.

2012-04-25  Dean Jackson  <dino@apple.com>

        <rdar://problem/11305119> In CoreMotionManager.mm, m_motionmanager.devicemotion (line 211) and m_motionmanager.accelerometerData (line 213) should do nil checks

        Reviewed by Paul Knight.

        Guard against nil values for CMMotionManager.deviceMotion, CMMotionManager.accelerometerData
        and CLLocationManager.heading.

        * platform/ios/CoreMotionManager.mm:
        (-[CoreMotionManager update]):
          motion and acceleration data can be nil. Don't update if we get that.
        (-[CoreMotionManager sendMotionData:withHeading:]):
          If we get a nil heading, send the inaccurate data flag.

2012-04-25  Simon Fraser  <simon.fraser@apple.com>

        Merge OpenSource WebKit r115165 to gain logging of compositing data.
        
    2012-04-24  Simon Fraser  <simon.fraser@apple.com>
    
            Add a logging channel and some ouput for compositing
            https://bugs.webkit.org/show_bug.cgi?id=84817
    
            Reviewed by Darin Adler.
    
            Add a logging channel called "Compositing".
            
            Output useful information to this channel, including
            a line for each composited layer, its composited bounds,
            the reason it was composited, the backing store megapixels,
            and a count of total composited layers and total backing
            store megapixels.
    
            * platform/Logging.cpp:
            (WebCore):
            (WebCore::getChannelFromName):
            * platform/Logging.h:
            (WebCore):
            * platform/graphics/GraphicsLayer.cpp:
            (WebCore::GraphicsLayer::backingStoreArea):
            * platform/graphics/GraphicsLayer.h:
            (GraphicsLayer):
            * platform/graphics/ca/GraphicsLayerCA.cpp:
            (WebCore::GraphicsLayerCA::backingStoreArea):
            (WebCore):
            * platform/graphics/ca/GraphicsLayerCA.h:
            (GraphicsLayerCA):
            * platform/mac/LoggingMac.mm:
            (WebCore::initializeLoggingChannelsIfNecessary):
            * rendering/RenderLayerBacking.cpp:
            (WebCore::RenderLayerBacking::nameForLayer):
            (WebCore::RenderLayerBacking::backingStoreArea):
            (WebCore):
            * rendering/RenderLayerBacking.h:
            (RenderLayerBacking):
            * rendering/RenderLayerCompositor.cpp:
            (WebCore):
            (WebCore::compositingLogEnabled):
            (WebCore::RenderLayerCompositor::RenderLayerCompositor):
            (WebCore::RenderLayerCompositor::updateCompositingLayers):
            (WebCore::RenderLayerCompositor::logCompositingInfo):
            (WebCore::RenderLayerCompositor::rebuildCompositingLayerTree):
            (WebCore::RenderLayerCompositor::updateLayerTreeGeometry):
            (WebCore::RenderLayerCompositor::reasonForCompositing):
            * rendering/RenderLayerCompositor.h:
            (RenderLayerCompositor):

2012-04-24  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/11210742> iOS WebKit merge: stabilizing merge branch to ToT r113485

        Merge up to OpenSource WebKit r113485.

2012-04-24  Matt Lilek  <mrl@apple.com>

        Not reviewed, build fix: #import CFPriv.h for CFSystemVersionSundance.

        * platform/graphics/ios/FontCacheIOS.mm:

2012-04-24  Eric Carlson  <eric.carlson@apple.com>

        <rdar://problem/11273625> REGRESSION(r1115886): Can't play videos on apple.com and cnn.com anymore

        Reviewed by David Kilzer.

        No new tests, this will be tested by existing media tests once we get them working
        on iOS.

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::HTMLMediaElement): Do not add the RequireUserGestureForLoadRestriction
        behavior restriction. The plug-in always needs the url to find out if a resource is playable, 
        but it doesn't begin loading data until it is told to "prepare to play". The load method does
        not call prepareToPlay unless it is called in response to a user gesture.
        (WebCore::HTMLMediaElement::load): Update the comment and logic to make them clearer.

2012-04-24  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/11309367> REGRESSION (Sundance10A258): Courier vertical metrics are slightly off

        Reviewed by Dave Kilzer.

        The WebKit part of addressing this regression is to revert clients linked before Sundance to
        the old behavior of using Courier New when Courier is specified.

        * platform/graphics/ios/FontCacheIOS.mm:
        (WebCore::FontCache::createFontPlatformData): Restored code removed in r1105838 (the fix for
        <rdar://problem/10850227>) but made it conditional on the client executable having been
        linked before Sundance.

2012-04-24  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/11309416> Scrolling in an album in iTunes Store is messy on iPad

        Reviewed by Joseph Pecoraro.
        
        After merging r114283 from WebKit Open Source, we need to ensure
        that layers that use accelerated overflow scrolling get backing store
        on iOS.

        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::requiresCompositingLayer):
        (WebCore::RenderLayerCompositor::requiresOwnBackingStore):

2012-04-23  Andy Estes  <aestes@apple.com>

        <rdar://problem/10964413> Sundance: Can't watch video in ScoreCenter XL

        Reviewed by Simon Fraser.

        HTMLMediaElement::parseAttribute() has an iOS-specific code path to
        parse attributes (e.g. webkitairplay) and set those attributes on the
        corresponding MediaPlayer object. If no MediaPlayer object exists -
        perhaps because the media element isn't playable - then we return early
        from parseAttribute(), neglecting to call HTMLElement::parseAttribute().
        This prevents us from parsing a bunch of common attributes like id,
        class, style, etc.

        We should call HTMLElement::parseAttribute() first, even if there is no
        MediaPlayer.

        Test: platform/iphone-simulator/iphone/fast/media/media-no-src-attribute-parsing.html

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::parseAttribute):

2012-04-23  Alexey Proskuryakov  <ap@apple.com>

        <rdar://problem/10639231> Possibly exploitable crash in WebCore::ClipboardIPhone::getData?

        Reviewed by Pratik Solanki.

        * platform/ios/ClipboardIOS.mm: (WebCore::ClipboardIOS::getData): Fixed type safety error.
        This patch doesn't bring us anywhere close to correctness though - even Mac port fails
        DataTransfer tests.

2012-04-23  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/10644039> Avoid lots of compositing layers on techcrunch.com

        Reviewed by Dan Bernstein.
        
        Avoid throwing position:fixed layers which are outside the viewport into compositing,
        which avoids creating lots of compositing layers on techcrunch.com. This code
        already exists on TOT; the patch juggles some #ifdeffed code around to use
        the OpenSource code. It relies on a previous merge of r114785.
        
        Test: platform/iphone-simulator/iphone/fixed/fixed-position-out-of-view.html

        * rendering/RenderLayerCompositor.cpp:

2012-04-20  Simon Fraser  <simon.fraser@apple.com>

        Merge OpenSource WebKit r114786.

    2012-04-20  Anders Carlsson  <andersca@apple.com>

        Fix build.

        * page/scrolling/ScrollingCoordinator.cpp:
        (WebCore::ScrollingCoordinator::updateMainFrameScrollPositionAndScrollLayerPosition):

2012-04-20  Simon Fraser  <simon.fraser@apple.com>

        Merge OpenSource WebKit r114785.

    2012-04-19  Simon Fraser  <simon.fraser@apple.com>

        Set m_compositingDependsOnGeometry to false if possible
        https://bugs.webkit.org/show_bug.cgi?id=84391

        Reviewed by James Robinson.
        
        For some kinds of elements, RenderLayerCompositor has to delay decisions about
        compositing until the element's size and/or position are known. This was previsouly
        based on the confusingly named m_compositingDependsOnGeometry flag, but another
        variant of the same technique, with an additional flag m_compositingNeedsUpdate,
        was added in r98627.
        
        Also, once the m_compositingDependsOnGeometry flag was set to true, nothing
        set it to false, so every compositing layer update resulted in a computeCompositingRequirements()
        pass over the layers.
        
        Rename the m_compositingDependsOnGeometry flag to m_reevaluateCompositingAfterLayout,
        and clear the flag when we do a layout-related compositing layer update.
        Use the same flag for position:fixed compositing.
        
        This requires RenderLayerCompositor to distinguish between style- and layout-
        related updates, requiring some minor refactoring in FrameView.

        Should not change behavior.
        
        * dom/Document.cpp:
        (WebCore::Document::recalcStyle):
        (WebCore::Document::implicitClose):
        * page/FrameView.cpp:
        (WebCore::FrameView::updateCompositingLayersAfterStyleChange):
        (WebCore::FrameView::updateCompositingLayersAfterLayout):
        (WebCore::FrameView::restoreBackingStores):
        (WebCore::FrameView::layout):
        * page/FrameView.h:
        (FrameView):
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::RenderLayerCompositor):
        (WebCore::RenderLayerCompositor::updateCompositingLayersTimerFired):
        (WebCore::RenderLayerCompositor::updateCompositingLayers):
        (WebCore::RenderLayerCompositor::layerTreeAsText):
        (WebCore::RenderLayerCompositor::requiresCompositingForPlugin):
        (WebCore::RenderLayerCompositor::requiresCompositingForFrame):
        (WebCore::RenderLayerCompositor::requiresCompositingForPosition):
        * rendering/RenderLayerCompositor.h:
        (RenderLayerCompositor):

2012-04-23  Brady Eidson  <beidson@apple.com>

        <rdar://problem/10484294> SQL database sometimes calls success without calling execute

        Reviewed by David Kilzer.

        MobileWebKit defers/undefers page loading and pauses/unpauses timers for scrolling.

        Any callbacks made while page loading is deferred pile on to a callback queue.

        To properly address that queue after scrolling is complete, iOS needs to interact with
        suspend/resumeScheduledTasks() on the Document.

        Note on ActiveDOMObject::ReasonForSuspension:
        Before this page suspendActiveDOMObjects() is called with an iOS-specific reason of ActiveDOMObject::DocumentWillBePaused.
        suspendScheduledTasks() suspends the dom objects with a different ReasonForSuspension.
        In practice this is perfectly fine because only a single agent actually inspects the ReasonForSuspension and they only care 
        about the Page Cache case (DocumentWillBecomeInactive).

        * page/ios/FrameIOS.mm:
        (WebCore::Frame::setTimersPausedInternal): Call suspend/resumeScheduledTasks() instead of 
          suspend/resumeActiveDOMObjects(), as suspend/resumeScheduledTasks also handles active DOM objects.

2012-04-22  Benjamin Poulain  <bpoulain@apple.com>

        Add [WAKWindow displayRect:] to replace WKWindowDrawRect()
        <rdar://problem/10307237> Get rid of WKWindowDrawRect()

        Reviewed by Anders Carlsson.

        Add [WAKWindow displayRect:] to replace WKWindowDrawRect(). The name "display rect" is used
        instead of "draw rect" in order to be more consistent with the naming in WAKView/WKView.

        * platform/ios/TileCache.mm:
        (WebCore::TileCache::drawLayer):
        * wak/WAKWindow.h:
        * wak/WAKWindow.mm:
        (-[WAKWindow displayRect:]):
        * wak/WKWindow.mm:
        (WKWindowDrawRect):

2012-04-22  Benjamin Poulain  <bpoulain@apple.com>

        Get rid of WKViewDisplayRect().
        <rdar://problem/10307237> Get rid of WKWindowDrawRect()

        Reviewed by Anders Carlsson.

        First we get rid of WKViewDisplayRect() which is no longer used by dependencies.

        * wak/WKView.h:
        * wak/WKView.mm:
        * wak/WKWindow.h:
        * wak/WKWindow.mm:
        (WKWindowDrawRect):

2012-04-21  Benjamin Poulain  <bpoulain@apple.com>

        <rdar://problem/10321540> Get rid of WKWindowSendEvent

        Reviewed by Pratik Solanki.

        The function WKWindowSendEvent is no longer used by dependencies, we can remove it from WebCore.

        * WebCore.exp.in:
        * wak/WKWindow.h:
        * wak/WKWindow.mm:

2012-04-20  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/11287040> AudioDestinationIOS::initializeAudioSession() always runs through the initialization code

        Reviewed by Scott Grant.

        Set the static bool correctly so we don't execute the initialization code on every
        invocation of the method.

        * platform/audio/ios/AudioDestinationIOS.cpp:
        (WebCore::AudioDestinationIOS::initializeAudioSession):

2012-04-19  Chris Fleizach  <cfleizach@apple.com>

        <rdar://problem/10374022> WEB: Radio buttons read incorrectly on iPad

        Treat radio buttons as their own type for accessibility purposes.

        Reviewed by David Kilzer.

        Test: platform/iphone-simulator/accessibility/radio-button.html

        * accessibility/ios/AccessibilityObjectWrapperIOS.mm:
        (-[WebAccessibilityObjectWrapper accessibilityTraits]):
        (-[WebAccessibilityObjectWrapper accessibilityRowRange]):

2012-04-18  Enrica Casucci  <enrica@apple.com>

        <rdar://problem/10026357> Need to revisit how the selected frame is computed.

        See comments in WebKit changelog.
        
        Reviewed by Simon Fraser.

        * WebCore.exp.in: Added exported function.

2012-04-19  Pratik Solanki  <psolanki@apple.com>

        Merged ToT Webkit r114188 for minor perf win. Calling fastMallocSize() multiple times during
        page loads can slow us down.

    2012-04-13  Jessie Berlin  <jberlin@apple.com>

        Remove the calls to CRASH() from ResourceLoader.cpp.
        https://bugs.webkit.org/show_bug.cgi?id=83962

        Reviewed by Alexey Proskuryakov.

        They were added in r91316 to aid debugging for the issue fixed in r105556 and r106130.

        * loader/ResourceLoader.cpp:
        (WebCore::ResourceLoader::willSendRequest):
        (WebCore::ResourceLoader::didSendData):
        (WebCore::ResourceLoader::didReceiveResponse):
        (WebCore::ResourceLoader::didReceiveData):
        (WebCore::ResourceLoader::didFinishLoading):
        (WebCore::ResourceLoader::didFail):
        (WebCore::ResourceLoader::wasBlocked):
        (WebCore::ResourceLoader::cannotShowURL):
        (WebCore::ResourceLoader::shouldUseCredentialStorage):
        (WebCore::ResourceLoader::willCacheResponse):

2012-04-18  Benjamin Poulain  <bpoulain@apple.com>

        <rdar://problem/11273235> Get rid of WebEvent touchGlobalLocations

        Reviewed by Simon Fraser.

        The attribute reporting the global position of a touch event was useless since touchLocation
        is already a global position.
        This patch get rid of the attribute in WebEvent and PlatformTouchEvent.

        * page/ios/EventHandlerIOSTouch.cpp:
        (WebCore::EventHandler::handleTouchEvent):
        * platform/ios/PlatformEventFactoryIOS.mm:
        (WebCore::PlatformTouchEventBuilder::PlatformTouchEventBuilder):
        * platform/ios/PlatformTouchEventIOS.h:
        (WebCore::PlatformTouchEvent::PlatformTouchEvent):
        (PlatformTouchEvent):
        * platform/ios/WebEvent.h:
        * platform/ios/WebEvent.mm:
        (-[WebEvent initWithTouchEventType:timeStamp:location:modifiers:touchCount:touchLocations:touchGlobalLocations:touchIdentifiers:touchPhases:isGesture:gestureScale:gestureRotation:]):
        The change is made in a way that do not require immediate update of UIKit.
        (-[WebEvent initWithTouchEventType:timeStamp:location:modifiers:touchCount:touchLocations:touchIdentifiers:touchPhases:isGesture:gestureScale:gestureRotation:]):
        (-[WebEvent dealloc]):
        (-[WebEvent _eventDescription]):

2012-04-18  Benjamin Poulain  <bpoulain@apple.com>

        <rdar://problem/11133238> Hit CRASH() in WebCore::ScriptExecutionContext::willDestroyActiveDOMObject on maps.google.com

        Reviewed by David Kilzer.

        ActiveDOMObjects cannot be destroyed during resume(). This was causing crashes with Geolocation because
        Geolocation::resume() was invoking the JavaScript callbacks, which can in turn cause the destruction of
        other ActiveDOMObject.

        This patch simply move the code of Geolocation::resume() after a timer.

        * Modules/geolocation/Geolocation.cpp:
        (WebCore::Geolocation::Geolocation):
        (WebCore::Geolocation::suspend): Remove stopTimers() since that also prevents the timeout error
        from being triggered.
        (WebCore::Geolocation::resume): Clear the state in Geolocation::setIsAllowed() instead of here for simplicity.
        (WebCore):
        (WebCore::Geolocation::resumeTimerFired):
        (WebCore::Geolocation::positionChanged): Move the branch if(m_isSuspended) after stopTimers() so that the GeoNotifiers
        do not timeout on the suspended Geolocation object.
        * Modules/geolocation/Geolocation.h:

2012-04-18  Simon Fraser  <simon.fraser@apple.com>

        Cleanup after
        <rdar://problem/8372340> iOS: Avoid backing store allocation for a layer that just has -webkit-perspective or needs to clip.

        Merge OpenSource WebKit r114509.

    2012-04-18  Simon Fraser  <simon.fraser@apple.com>
    
            ASSERT when a layer with a foreground layer is in 'paint into ancestor' mode
            https://bugs.webkit.org/show_bug.cgi?id=84221
    
            Reviewed by Dean Jackson.
            
            When a RenderLayerBacking doesn't require its own backing store, and is
            in "paintIntoCompositingAncestor" mode, we would assert when trying to
            paint its m_foregroundLayer if it had one (because of a negative z-index child).
            
            The fix is to set the 'drawsContent' state on the m_foregroundLayer
            as well as m_graphicsLayer.
    
            Test: compositing/backing/no-backing-foreground-layer.html
    
            * rendering/RenderLayerBacking.cpp:
            (WebCore::RenderLayerBacking::updateDrawsContent):

2012-04-18  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/8372340> iOS: Avoid backing store allocation for a layer that just has -webkit-perspective or needs to clip.
        
        Merge OpenSource WebKit r114283.

    2012-04-13  Simon Fraser  <simon.fraser@apple.com>
    
            Avoid using backing store for compositing layers that just need to clip
            https://bugs.webkit.org/show_bug.cgi?id=40547
    
            Reviewed by Dean Jackson.
            
            If a layer becomes composited because it needs to clip composited
            descendants, or if it has perspective, then it doesn't actually
            needs its own backing store; its contents can be painted by an
            ancestor, and we can just have an empty layer that does the clipping
            or applies the perspective transform.
            
            This saves backing store memory on some pages.
    
            Tests: compositing/backing/no-backing-for-clip-overlap.html
                   compositing/backing/no-backing-for-clip.html
                   compositing/backing/no-backing-for-perspective.html
    
            * rendering/RenderLayer.cpp:
            (WebCore):
            (WebCore::RenderLayer::enclosingCompositingLayerForRepaint):
            (WebCore::RenderLayer::paintLayer):
            * rendering/RenderLayer.h:
            (RenderLayer):
            * rendering/RenderLayerBacking.cpp:
            (WebCore::RenderLayerBacking::RenderLayerBacking):
            (WebCore::RenderLayerBacking::updateGraphicsLayerGeometry):
            (WebCore::RenderLayerBacking::containsPaintedContent):
            (WebCore::RenderLayerBacking::setContentsNeedDisplay):
            (WebCore::RenderLayerBacking::setContentsNeedDisplayInRect):
            (WebCore::RenderLayerBacking::paintIntoLayer):
            * rendering/RenderLayerBacking.h:
            (RenderLayerBacking):
            (WebCore::RenderLayerBacking::paintsIntoCompositedAncestor):
            (WebCore::RenderLayerBacking::setRequiresOwnBackingStore):
            * rendering/RenderLayerCompositor.cpp:
            (WebCore::RenderLayerCompositor::layerWillBeRemoved):
            (WebCore::RenderLayerCompositor::recursiveRepaintLayerRect):
            (WebCore::RenderLayerCompositor::requiresCompositingLayer):
            (WebCore::RenderLayerCompositor::requiresOwnBackingStore):
            (WebCore):
            * rendering/RenderLayerCompositor.h:
            * rendering/RenderObject.cpp:
            (WebCore::RenderObject::containerForRepaint):
            * rendering/RenderTreeAsText.cpp:
            (WebCore::write):
            * rendering/RenderView.cpp:
            (WebCore::RenderView::paintBoxDecorations):

2012-04-18  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/8372340> iOS: Avoid backing store allocation for a layer that just has -webkit-perspective or needs to clip.
        
        Merge OpenSource WebKit r113514.

    2012-04-06  Simon Fraser  <simon.fraser@apple.com>
    
            Rename paintingGoesToWindow() to paintsIntoWindow()
            https://bugs.webkit.org/show_bug.cgi?id=83406
    
            Reviewed by Dirk Schulze.
            
            Rename paintingGoesToWindow() to paintsIntoWindow() to be consistent
            with some future refactoring.
    
            * rendering/RenderLayer.cpp:
            (WebCore::RenderLayer::setFilterBackendNeedsRepaintingInRect):
            (WebCore::RenderLayer::paintLayer):
            (WebCore::RenderLayer::paintsWithTransform):
            (WebCore::RenderLayer::setBackingNeedsRepaint):
            (WebCore::RenderLayer::setBackingNeedsRepaintInRect):
            * rendering/RenderLayerBacking.cpp:
            (WebCore::RenderLayerBacking::containsPaintedContent):
            (WebCore::RenderLayerBacking::paintsIntoWindow):
            (WebCore::RenderLayerBacking::paintIntoLayer):
            * rendering/RenderLayerBacking.h:
            (RenderLayerBacking):
            * rendering/RenderLayerCompositor.cpp:
            (WebCore::RenderLayerCompositor::rootLayerAttachmentChanged):
            * rendering/RenderObject.cpp:
            (WebCore::RenderObject::repaintUsingContainer):
            * rendering/RenderView.cpp:
            (WebCore::RenderView::paintBoxDecorations):

2012-04-17  Eric Carlson  <eric.carlson@apple.com>

        Merge OpenSource WebKit r114021.

    2012-04-12  Eric Carlson  <eric.carlson@apple.com>
    
            Media engine should not be told to prepare for playback if media loading is not allowed
            https://bugs.webkit.org/show_bug.cgi?id=83620
    
            Reviewed by Dan Bernstein.
    
            Test: media/video-load-require-user-gesture.html
    
            * html/HTMLMediaElement.cpp:
            (WebCore::HTMLMediaElement::load): Early return if user gesture requirement is not met.
    
            * testing/InternalSettings.cpp:
            (WebCore::InternalSettings::setMediaPlaybackRequiresUserGesture): Moved the method here from
                Internals to be with the rest of the Internals methods that expose preferences.
            * testing/InternalSettings.h:
            * testing/InternalSettings.idl:
    
            * testing/Internals.cpp: Moved setMediaPlaybackRequiresUserGesture to InternalSettings.
            * testing/Internals.h:
            * testing/Internals.idl:

2012-04-13  Benjamin Poulain  <bpoulain@apple.com>

        <rdar://problem/10951750> GEOLOCATION_PERMISSION_CACHE is incorrect

        Reviewed by David Kilzer.

        Get rid of the code related to GEOLOCATION_PERMISSION_CACHE.

        * Modules/geolocation/Geolocation.cpp:
        (WebCore::Geolocation::Geolocation):
        (WebCore::Geolocation::setIsAllowed):
        * Modules/geolocation/Geolocation.h:

2012-04-12  Benjamin Poulain  <bpoulain@apple.com>

        <rdar://problem/11203609> Safari is using location even if i switch from googlemaps.com to some other web site

        Reviewed by David Kilzer.

        This patch allows the Geolocation object to enter the Page Cache only if there is no active
        listener.

        The suspend code is moved from GeolocationController to Geolocation to encapsulate all the suspend() logic
        inside the ActiveDOMObject.

        The suspend was also improved to handle correctly the case where setIsAllowed() is called
        on a suspended object.

        * Modules/geolocation/Geolocation.cpp:
        (WebCore::Geolocation::Geolocation):
        (WebCore::Geolocation::canSuspend):
        (WebCore::Geolocation::suspend):
        (WebCore::Geolocation::resume):
        (WebCore::Geolocation::setIsAllowed):
        (WebCore::Geolocation::positionChanged):
        (WebCore::Geolocation::setError):
        * Modules/geolocation/Geolocation.h:
        * Modules/geolocation/GeolocationController.cpp:
        (WebCore::GeolocationController::positionChanged):
        (WebCore::GeolocationController::errorOccurred):
        * Modules/geolocation/GeolocationController.h:
        (GeolocationController):

2012-04-13  Matt Lilek  <mrl@apple.com>

        <rdar://problem/11070662> Stabilization: Check build fix for r110188

        I tested this behavior with and without this code (before the last merge
        where this was still used) and don't see any behavior difference.

        Reviewed by David Kilzer.

        * editing/ReplaceSelectionCommand.cpp:
        (WebCore::ReplacementFragment::insertFragmentForTestRendering):

2012-04-12  Benjamin Poulain  <bpoulain@apple.com>

        Merge OpenSource WebKit r113505.

    2012-04-06  Benjamin Poulain  <bpoulain@apple.com>

        Get rid of the useless flag PREEMPT_GEOLOCATION_PERMISSION
        https://bugs.webkit.org/show_bug.cgi?id=83325

        Reviewed by Ryosuke Niwa.

        The flag WTF_USE_PREEMPT_GEOLOCATION_PERMISSION was added in r63742 but
        was never disabled by anyone. Supporting this feature added complexity by
        introducing two authorization scheme.

        This patch removes WTF_USE_PREEMPT_GEOLOCATION_PERMISSION and the code supporting
        granting the authorization after startUpdating().

        * Modules/geolocation/Geolocation.cpp:
        (WebCore::Geolocation::GeoNotifier::runSuccessCallback): With the simplified
        authorization code, we ensure stronger constraint on GeoNotifier::runSuccessCallback().
        (WebCore::Geolocation::stop):
        (WebCore::Geolocation::startRequest):
        (WebCore::Geolocation::clearWatch):
        (WebCore::Geolocation::setIsAllowed):
        (WebCore::Geolocation::positionChanged): The case (!isAllowed()) was there
        to support granting the authorization for WTF_USE_PREEMPT_GEOLOCATION_PERMISSION.
        (WebCore::Geolocation::handlePendingPermissionNotifiers):
        * Modules/geolocation/Geolocation.h:
        (Geolocation):

2012-04-12  Benjamin Poulain  <bpoulain@apple.com>

        Merge OpenSource WebKit r112347.

     2012-03-27  Benjamin Poulain  <bpoulain@apple.com>

        Reinforce Geolocation to prevent accidental leak of the user position
        https://bugs.webkit.org/show_bug.cgi?id=82396

        Reviewed by Adam Barth.

        It is very important not to provide the position of the user to a page
        unless the user authorize it.

        The code used to make it easy to cause such problems, because any part
        of the Geolocation object could invoke the success callback directly.

        This patch add encapsulation for all the attributes of GeoNotifier,
        and add extra guards for the two callbacks.

        In the case of the success callback, we do one extra check before sending
        the value to the bindings.

        * Modules/geolocation/Geolocation.cpp:
        (WebCore::Geolocation::GeoNotifier::runSuccessCallback):
        (WebCore::Geolocation::GeoNotifier::runErrorCallback):
        (WebCore):
        (WebCore::Geolocation::GeoNotifier::stopTimer):
        (WebCore::Geolocation::GeoNotifier::timerFired):
        (WebCore::Geolocation::startRequest):
        (WebCore::Geolocation::sendError):
        (WebCore::Geolocation::sendPosition):
        (WebCore::Geolocation::stopTimer):
        (WebCore::Geolocation::extractNotifiersWithCachedPosition):
        (WebCore::Geolocation::startUpdating):
        * Modules/geolocation/Geolocation.h:
        (WebCore::Geolocation::isAllowed):
        (Geolocation):
        (GeoNotifier):
        (WebCore::Geolocation::GeoNotifier::options):
        (WebCore::Geolocation::GeoNotifier::useCachedPosition):

2012-04-12  Benjamin Poulain  <bpoulain@apple.com>

        Merge OpenSource WebKit r112592.

    2012-03-29  Benjamin Poulain  <bpoulain@apple.com>

        Get rid of Geolocation::positionChangedInternal(), use positionChanged() directly
        https://bugs.webkit.org/show_bug.cgi?id=82543

        Reviewed by Andreas Kling.

        After the change to client based geolocation, the method positionChangedInternal()
        is called only by positionChanged(). This patch remove this extra indirection.

        * Modules/geolocation/Geolocation.cpp:
        (WebCore::Geolocation::positionChanged):
        * Modules/geolocation/Geolocation.h:
        (Geolocation):
        * WebCore.order:

2012-04-12  Joseph Pecoraro  <pecoraro@apple.com>

        Merged ToT r113675.

    2012-04-09  Joseph Pecoraro  <pecoraro@apple.com>
    
            <http://webkit.org/b/83539> Web Inspector: ASSERT attempting to unbind null contentDocument
    
            Avoid calling unbind with a null object. The HTMLFrameOwnerElement's
            contentDocument can be null.
    
            Reviewed by Timothy Hatcher.
    
            * inspector/InspectorDOMAgent.cpp:
            (WebCore::InspectorDOMAgent::unbind):
    
2012-04-11  Enrica Casucci  <enrica@apple.com>

        <rdar://problem/11232785> REGRESSION: cannot type in any editable element inside an iframe

        Reviewed by Simon Fraser.
        
        Removing some platform-specific code that is not needed anymore and it is causing the
        layout not to be done on the subframes.

        * page/FrameView.cpp:
        (WebCore::FrameView::layout):

2012-04-10  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/11200153> WebKit merge: JavaScriptCore FastMalloc zone keeps growing after merge to ToT r111184

        Merged ToT r112483.

    2012-04-10  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r110064.
        http://trac.webkit.org/changeset/110064
        https://bugs.webkit.org/show_bug.cgi?id=82537

        The patch leaks the DOM when audio elements are used
        (Requested by sundiamonde on #webkit).

        * bindings/js/JSNodeCustom.cpp:
        (WebCore::isReachableFromDOM):

2012-04-10  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/11075566> WebCore should set the number of fast lanes explicitly (HTTP pipelining)

        Reviewed by David Carson.

        Set the number of fast lanes on iOS to 1 to match 5.0 behavior. "Fast lanes" are connections
        reserved for high priority request (CSS, JS).  Setting this prevents high priority requests
        from being blocked if we have a flood of lower priority requests (images).

        * platform/network/cf/ResourceRequestCFNet.cpp:
        (WebCore::initializeHTTPConnectionSettingsOnStartup):

2012-04-09  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/11067804> REGRESSION: Album Info Page Has Review Text Mixed In With the Track List

        Reviewed by Simon Fraser.

        Tests: platform/iphone-simulator/iphone/scrolling/overflow-clip-with-accelerated-scrolling-ancestor-expected.html
               platform/iphone-simulator/iphone/scrolling/overflow-clip-with-accelerated-scrolling-ancestor.html

        The PaintLayerPaintingOverflowContents flag is set whenever the root layer is an accelerated
        overflow: scroll layer painting its scrolling contents, but this flag should have no effect
        on descendant layers. In this bug, it was causing a descendant to not apply its own
        overflow clipping. The fix is to keep passing this flag through, but only consider it when
        acting on the root layer, which would be the layer with accelerated overflow: scroll.

        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::paintLayerContents):
        (WebCore::RenderLayer::calculateClipRects):
        (WebCore::RenderLayer::calculateRects):

2012-04-06  Benjamin Poulain  <bpoulain@apple.com>

        Remove an erroneous comment

        Reviewed by David Carson.

        The fixme is erroneous. The methods are used by the plugins YouTube and Maps.

        * plugins/PluginViewBase.h:

2012-04-06  Benjamin Poulain  <benjamin@webkit.org>

        LocalizationStrategy should have been removed in r108308

        Reviewed by David Kilzer.

        LocalizationStrategy was removed in r108308 in favor of a direct calls
        to LocalizedStrings.
        The files in the iOS branch are left over from a merge conflict.

        * platform/DefaultLocalizationStrategy.cpp: Removed.
        * platform/DefaultLocalizationStrategy.h: Removed.
        * platform/LocalizationStrategy.h: Removed.

2012-04-06  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/9587937> Switch c++0x and switch from libstdc++ to libc++ when building with clang

        Reviewed by Sam Weinig.

        * Configurations/Base.xcconfig: Set CLANG_CXX_LIBRARY based on
        REAL_PLATFORM_NAME.

2012-04-06  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/11122869> N90: Image contents missing in mail composition

        Reviewed by David Carson.

        We have two limits in WebCore, the subsampling limit in ImageSource (in pixels)
        which decides the maximum image size we will display before we start subsampling
        and a hard, maximum image size limit in Settings (in bytes) which is used by
        CachedImage to decide whether or not to show the image. This limit in CachedImage
        is checked after the image is subsampled, so if the image size after subsampling
        is greater than the image size in Settings, we simply fail to display the image.

        This led us to the following sequence of events and the above bug

        - The maximum decoded size value in WebPreferences (20MB for 5MP images) was out
          of sync with the default in Settings (12MB for 3MP images). This was fine for
          normal UIWebViews which would go through the regular WebView init path and reset
          the value in Settings from the one in WebPrefereces. But text views that used
          [WebView initSimpleHTMLDocumentWithStyle] would continue to use the default
          value in Settings.
        - This was still okay, since the subsampling limit was 2MP so we would always
          subsample images to be under 2MP so we would not really hit the 3MP limit in
          Settings and images would load.
        - Mail compose window decided to move to the initSimpleHTMLDocumentWithStyle path
          in 10A269 by fixing

            <rdar://problem/8022133> Would be nice if newly composed mail messages used the optimized -[UIWebDocumentView initSimpleHTMLDocumentWithStyle:editable:withFrame:withPreferences:]

          They got a nice perf win from the change. But in the process their maximum image
          size limit dropped to 3MP. Things were still okay until...

        - We decided to increase the subsampling limit in <rdar://7760127> in 10A271 to 5MP
          since the blogosphere got quite upset that we couldn't show hi res images on Jx.

        - This led to issues on the N90 and Jx which had a 5MP camera. When you try to
          paste a 5MP image, we wouldn't subsample it. And CachedImage threw the image out
          since it was greater than its limit of 3MP. N94, with an 8MP camera, was fine.

        The solution - have one image limit value to rule them all. We now use the
        subsampling limit in ImageSource to set the maximum image size limit in Settings
        and WebPreferences.

        * page/Settings.cpp:
        (WebCore::Settings::Settings):

2012-04-05  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/11186627> PEP WebKit merge: MobileSafari crashed at RenderLayerCompositor::computeCompositingRequirements when loading www.yahoo.com on K93.

        Reviewed by David Kilzer.

        Don't try to create layers inside computeRectForRepaint(), because
        we may be in the middle of walking layer lists.
        
        Here we can just check to see if a layer exists already.

        * rendering/RenderBox.cpp:
        (WebCore::RenderBox::computeRectForRepaint):

2012-04-05  Simon Fraser  <simon.fraser@apple.com>

        Add assertions to detect the issue reported in
        <rdar://problem/11186627> PEP WebKit merge: MobileSafari crashed at RenderLayerCompositor::computeCompositingRequirements when loading www.yahoo.com on K93.

        Merged TOT WebKit r113335.

    2012-04-04  Simon Fraser  <simon.fraser@apple.com>
    
            Add assertions to check for mutation of RenderLayer z-order lists during enumeration
            https://bugs.webkit.org/show_bug.cgi?id=83242
    
            Reviewed by James Robinson.
    
            Add debug-only code that detects whether RenderLayer's z-order and
            normal flow lists are being cleared or otherwise mutated while we're
            enumerating over them.
    
            * rendering/RenderLayer.cpp:
            (WebCore::RenderLayer::RenderLayer):
            (WebCore::RenderLayer::paintList):
            (WebCore::RenderLayer::calculateLayerBounds):
            (WebCore::RenderLayer::dirtyZOrderLists):
            (WebCore::RenderLayer::dirtyNormalFlowList):
            (WebCore::RenderLayer::updateZOrderListsSlowCase):
            (WebCore::RenderLayer::updateNormalFlowList):
            * rendering/RenderLayer.h:
            (RenderLayer):
            (WebCore::RenderLayer::layerListMutationAllowed):
            (WebCore::RenderLayer::setLayerListMutationAllowed):
            (WebCore):
            (LayerListMutationDetector):
            (WebCore::LayerListMutationDetector::LayerListMutationDetector):
            (WebCore::LayerListMutationDetector::~LayerListMutationDetector):
            * rendering/RenderLayerBacking.cpp:
            (WebCore::RenderLayerBacking::hasVisibleNonCompositingDescendantLayers):
            * rendering/RenderLayerCompositor.cpp:
            (WebCore::RenderLayerCompositor::addToOverlapMapRecursive):
            (WebCore::RenderLayerCompositor::computeCompositingRequirements):
            (WebCore::RenderLayerCompositor::rebuildCompositingLayerTree):
            (WebCore::RenderLayerCompositor::updateLayerTreeGeometry):
            (WebCore::RenderLayerCompositor::updateCompositingDescendantGeometry):
            (WebCore::RenderLayerCompositor::recursiveRepaintLayerRect):
            (WebCore::RenderLayerCompositor::layerHas3DContent):

2012-04-05  Simon Fraser  <simon.fraser@apple.com>

        Part of fix for:
        <rdar://problem/11160802> MERGE: CrashTracer: [USER] 3 crashes in DumpRenderTree at WebCore: WebCore::GraphicsLayerCA::removeFromParent + 121
        
        Merged TOT WebKit r113284.

    2012-04-04  Simon Fraser  <simon.fraser@apple.com>
    
            https://bugs.webkit.org/show_bug.cgi?id=82994
    
            Reviewed by James Robinson.
            
            Fix an issue when removing elements with reflections from the document.
    
            Test: compositing/reflections/remove-reflection.html
    
            * platform/graphics/GraphicsLayer.cpp:
            (WebCore::GraphicsLayer::willBeDestroyed):
    
2012-04-05  Simon Fraser  <simon.fraser@apple.com>

        Part of fix for:
        <rdar://problem/11160802> MERGE: CrashTracer: [USER] 3 crashes in DumpRenderTree at WebCore: WebCore::GraphicsLayerCA::removeFromParent + 121
        
        Merged TOT WebKit r113090.

    2012-04-03  Simon Fraser  <simon.fraser@apple.com>
    
            Avoid virtual method calls in the GraphicsLayer destructor
            https://bugs.webkit.org/show_bug.cgi?id=83067
    
            Reviewed by James Robinson.
    
            Code cleanup to avoid calling virtual methods in the GraphicsLayer
            destructor. Factor teardown code into a willBeDestroyed() method
            that is called from the most dervied class. willBeDestroyed()
            calls have to be chained. Fix the various ports' GraphicsLayer
            implementations.
    
            * platform/graphics/GraphicsLayer.cpp:
            (WebCore::GraphicsLayer::~GraphicsLayer):
            (WebCore):
            (WebCore::GraphicsLayer::willBeDestroyed):
            * platform/graphics/GraphicsLayer.h:
            (GraphicsLayer):
            * platform/graphics/blackberry/GraphicsLayerBlackBerry.cpp:
            (WebCore::GraphicsLayerBlackBerry::~GraphicsLayerBlackBerry):
            (WebCore):
            (WebCore::GraphicsLayerBlackBerry::willBeDestroyed):
            * platform/graphics/blackberry/GraphicsLayerBlackBerry.h:
            (GraphicsLayerBlackBerry):
            * platform/graphics/ca/GraphicsLayerCA.cpp:
            (WebCore::GraphicsLayerCA::~GraphicsLayerCA):
            (WebCore):
            (WebCore::GraphicsLayerCA::willBeDestroyed):
            * platform/graphics/ca/GraphicsLayerCA.h:
            (GraphicsLayerCA):
            * platform/graphics/chromium/GraphicsLayerChromium.cpp:
            (WebCore::GraphicsLayerChromium::~GraphicsLayerChromium):
            (WebCore):
            (WebCore::GraphicsLayerChromium::willBeDestroyed):
            * platform/graphics/chromium/GraphicsLayerChromium.h:
            (GraphicsLayerChromium):
            * platform/graphics/clutter/GraphicsLayerClutter.cpp:
            (WebCore::GraphicsLayerClutter::~GraphicsLayerClutter):
            * platform/graphics/efl/GraphicsLayerEfl.cpp:
            (WebCore::GraphicsLayerEfl::~GraphicsLayerEfl):
            * platform/graphics/qt/GraphicsLayerQt.cpp:
            (WebCore::GraphicsLayerQt::~GraphicsLayerQt):
            (WebCore):
            (WebCore::GraphicsLayerQt::willBeDestroyed):
            * platform/graphics/qt/GraphicsLayerQt.h:
            (GraphicsLayerQt):
    
2012-04-05  Simon Fraser  <simon.fraser@apple.com>

        Part of fix for:
        <rdar://problem/11160802> MERGE: CrashTracer: [USER] 3 crashes in DumpRenderTree at WebCore: WebCore::GraphicsLayerCA::removeFromParent + 121
        
        Merged TOT WebKit r113260.

    2012-04-02  Simon Fraser  <simon.fraser@apple.com>
    
            Fix issue with reflections and composited layers
            https://bugs.webkit.org/show_bug.cgi?id=82636
    
            Reviewed by Alexey Proskuryakov
            
            When tearing down GraphicsLayers which referene eachother via m_replicatedLayer/m_replicaLayer,
            we need to clean up the replica layer pointers.
    
            No new tests; tested by existing compositing and repaint tests.
    
            * platform/graphics/GraphicsLayer.cpp:
            (WebCore::GraphicsLayer::~GraphicsLayer):
            (WebCore::GraphicsLayer::setReplicatedByLayer):

2012-04-05  Simon Fraser  <simon.fraser@apple.com>

        Fix build error. ExtAudioFileOpenURL needs to be included in the soft-linked
        AudioToolbox calls.

        Reviewed by Pratik Solanki.

        * platform/audio/ios/AudioFileReaderIOS.cpp:

2012-04-04  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/11184606> UIKit-806c85 failed to build in the Innsbruck autoBot for sim

        Reviewed by Matt Lilek.

        * Configurations/Base.xcconfig: Hard-code VALID_ARCHS for
        iphoneos and iphonesimulator.

2012-04-04  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/11075261> Soft-link AudioToolbox in WebCore for fun and profit

        Reviewed by Pratik Solanki.

        * Configurations/WebCore.xcconfig: Remove hard links to
        AudioToolbox.framework and CoreAudio.framework.  It appears that
        we never needed to link to CoreAudio anyway.
        * platform/audio/ios/AudioDestinationIOS.cpp: Switch to soft-linking
        AudioToolbox.framework.
        * platform/audio/ios/AudioFileReaderIOS.cpp: Ditto.

2012-04-04  Joseph Pecoraro  <pecoraro@apple.com>

        Merged WebCore part of OpenSource r112589.

    2012-04-05  Joseph Pecoraro  <pecoraro@apple.com>
    
            <http://webkit.org/b/83108> Web Inspector: JSC Crash inspecting node with object event listener
    
            Reviewed by Geoff Garen.
    
            * bindings/js/ScriptEventListener.cpp:
            (WebCore::eventListenerHandlerLocation):
            Use jsDynamicCast to bail when the JSObject is not a JSFunction.
    
2012-04-04  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/11151618> Paginated webviews render nothing in their gutters

        Merged TOT WebKit r113260.

    2012-04-04  Dan Bernstein  <mitz@apple.com>

        Paginated webviews render nothing in their gutters
        https://bugs.webkit.org/show_bug.cgi?id=83231

        Reviewed by Adele Peterson.

        When the RenderView has columns, nothing draws in the gutters.

        * page/FrameView.cpp:
        (WebCore::FrameView::paintContents): Paint the background color behind everything when
        paginated.

2012-04-04  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/11184586> Local simulator build fails after merge to r111184

        Reviewed by David Kilzer.

        Add $(BUILT_PRODUCTS_DIR)$(SDROOT)/usr/local/include to search paths. Otherwise, local
        builds can't find wtf/Platform.h.

        * Configurations/WebCore.xcconfig:
        * bindings/scripts/CodeGeneratorObjC.pm:
        (ReadPublicInterfaces):
        * generate-export-file:
        (process):

2012-04-04  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/11142625> iOS WebKit merge: stabilizing merge branch to ToT r111184

        Merge up to OpenSource WebKit r111184.

2012-04-03  Andy Estes  <aestes@apple.com>

        <rdar://problem/11171610> 10A276: REGRESSION: MobileSafari crashed at ResourceLoadScheduler::scheduleSubresourceLoad when loading www.tmall.com.

        Patch by Yongjun Zhang <yongjun_zhang@apple.com> on 2012-04-03
        Reviewed by Andy Estes.
        
        r1111757 didn't account for a null loader. Null-check the loader.

        * loader/ResourceLoadScheduler.cpp:
        (WebCore::ResourceLoadScheduler::scheduleSubresourceLoad):

2012-04-02  Justin Garcia  <justin.garcia@apple.com>

        <rdar://problem/11142244> REGRESSION: Paste into Mail is not stripping background color

        Reviewed by Enrica Casucci.
        
        * editing/ios/EditorIOS.mm:
        (WebCore::Editor::removeUnchangeableStyles): Users cannot change the background color, and
        the body element doesn't have a default value for it, so remove it by applying a clear color.

2012-03-30  Joseph Pecoraro  <pecoraro@apple.com>

        <rdar://problem/10564650> Can still drag slider on disabled <input type="range">

        Don't allow dragging a readonly or disabled slider.
        Remove touch rects for a disabled slider.

        Reviewed by David Kilzer.

        * html/RangeInputType.h:
        * html/RangeInputType.cpp:
        (WebCore::RangeInputType::disabledAttributeChanged):
        Pass information on to the slider when the input's disabled attribute changes.

        * html/shadow/SliderThumbElement.cpp:
        (WebCore::SliderThumbElement::shouldAcceptTouchEvents):
        (WebCore::SliderThumbElement::registerForTouchEvents):
        (WebCore::SliderThumbElement::unregisterForTouchEvents):
        Consolidate register / unregister code to prevent duplicate registrations.

        (WebCore::SliderThumbElement::detach):
        (WebCore::SliderThumbElement::attach):
        (WebCore::SliderThumbElement::disabledAttributeChanged):
        Use the new register / unregister helpers.

        (WebCore::SliderThumbElement::handleTouchEvent):
        For readonly fields we ignore drag events. To be safe we
        do the same for disabled fields, but touch events should
        not come in for those.

        * html/shadow/SliderThumbElement.h:
        (WebCore::SliderThumbElement::SliderThumbElement):
        Initialize new data member that prevents registering multiple times.

2012-03-30  Joseph Pecoraro  <pecoraro@apple.com>

        Merge OpenSource r112589.

    2012-03-29  Joseph Pecoraro  <pecoraro@apple.com>

            InputType attribute changed functions should happen after the attribute change
            https://bugs.webkit.org/show_bug.cgi?id=82644

            Reviewed by Benjamin Poulain.

            * html/HTMLInputElement.cpp:
            (WebCore::HTMLInputElement::parseAttribute):

2012-03-30  Joseph Pecoraro  <pecoraro@apple.com>

        Restore #ifdef sanity to RangeInputType.h.

        Reviewed by Yongjun Zhang.

        * html/RangeInputType.h:
        (RangeInputType):

2012-03-30  Joseph Pecoraro  <pecoraro@apple.com>

        Merge OpenSource r112424.

    2012-03-27  Joseph Pecoraro  <pecoraro@apple.com>

            <http://webkit.org/b/82419> Web Inspector: Create -[DOMNode inspect] from IDL

            Instead of manually creating the method in DOM.mm we can specify it in
            Node.idl and autogenerate part of the interface.

            Reviewed by Timothy Hatcher.

            * bindings/objc/DOM.mm:
            * bindings/objc/DOMPrivate.h:
            Move the call to InspectorController::inspect from here ...

            * dom/Node.h:
            * dom/Node.idl: IDL only in an ObjC block.
            * dom/Node.cpp:
            (WebCore::Node::inspect):
            ... to here.

            * WebCore.xcodeproj/project.pbxproj:
            Add the new generated file so we can Copy it in the build phase.

2012-03-30  Joseph Pecoraro  <pecoraro@apple.com>

        Merge OpenSource r112305.

    2012-03-27  Joseph Pecoraro  <pecoraro@apple.com>
    
            <http://webkit.org/b/82362> Web Inspector: Provide private -[DOMNode inspect]
    
            Reviewed by Timothy Hatcher.
    
            No new tests, this is only an ObjC SPI.
    
            * bindings/objc/DOM.mm:
            * bindings/objc/DOMPrivate.h:
            (-[DOMNode inspect]):
            Call through to InspectorController inspect for the node.
    
            * inspector/InspectorDOMAgent.cpp:
            (WebCore::InspectorDOMAgent::handleMousePress):
            (WebCore::InspectorDOMAgent::inspect):
            Whenever we inspect an element, clear the node search.
            The frontend already takes this approach.

2012-03-30  Joseph Pecoraro  <pecoraro@apple.com>

        <rdar://problem/10657781> Remote Inspector: Improve Generic Searching for Node "Inspect Element Eyeglass"

        Reviewed by Yongjun Zhang.

        * WebCore.exp.in:
        * page/Frame.h:
        * page/ios/FrameIOS.mm:
        (WebCore::Frame::hitTestResultAtViewportLocation):
        Extract common code that runs the hit test into a helper function.

        (WebCore::Frame::qualifyingNodeAtViewportLocation):
        (WebCore::Frame::deepestNodeAtLocation):
        Use the helper function to hitTest. The deepest node does not do any
        better approximation, and it doesn't adjust the node if the hitTest was
        inside of content that is contenteditable.

2012-03-30  Joseph Pecoraro  <pecoraro@apple.com>

        <rdar://problem/10657781> Remote Inspector: Improve Generic Searching for Node "Inspect Element Eyeglass"

        Add a delegate message when the inspector's node search state changes.

        Reviewed by Timothy Hatcher.

        * inspector/InspectorClient.h:
        (InspectorClient):
        (WebCore::InspectorClient::didSetSearchingForNode):
        * inspector/InspectorDOMAgent.cpp:
        (WebCore::InspectorDOMAgent::setSearchingForNode):

2012-03-30  Alexey Proskuryakov  <ap@apple.com>

        <rdar://problem/10586639> Safari "Cannot make any requests from null" after viewing PDF
        with "Content-Disposition: attachment"

        Reviewed by Sam Weinig.

        When MobileSafari displays attachments inline, it forces frame sandbox protection, because
        file hostings certainly don't expect files they host for download only to be displayed with
        hosting's security origin.

        This is a document level restriction (akin to CSP), so we should not enforce it on the frame
        permanently.

        * loader/FrameLoader.cpp: (WebCore::FrameLoader::receivedFirstData): Don't do it here.

        * dom/Document.cpp: (WebCore::Document::initSecurityContext): Do it here, just for the
        document's security context.

2012-03-29  Andy Estes  <aestes@apple.com>

        <rdar://problem/11087806> REGRESSION (Sundance): Returning nil in a willSendRequest delegate prevents the load event from firing (affects iBooks)

        Reviewed by Antti Koivisto.

        Since we defer loader initialization until scheduling on iOS, we don't
        know whether a frame load delegate will cancel a load when creating the
        SubresourceLoader. This can result in a CachedResource holding a
        reference to a SubresourceLoader even though it was cancelled when the
        load was scheduled. Since the loading count is tied to the lifetime of
        SubresourceLoaders, this prevents the load event from firing
        indefinitely.

        Fix this by returning 0 in scheduleSubresourceLoad() if the load
        reached a terminal state after being scheduled. This prevents
        CachedResource from holding a reference to a cancelled loader, allowing
        the loader to be deallocated and the loading count to be decremented.

        Test: platform/iphone-simulator/iphone/fast/loader/subresource-willSendRequest-null-prevents-load-event.html

        Also, fast/loader/subresource-willSendRequest-null.html no longer times
        out due to this patch.

        * loader/ResourceLoadScheduler.cpp:
        (WebCore::ResourceLoadScheduler::scheduleSubresourceLoad): return 0 if
        loader->reachedTerminalState() is true after calling scheduleLoad().

2012-03-29  Alexey Proskuryakov  <ap@apple.com>

    <rdar://problem/11121501> Some Blob tests crash in CFNetwork in advanceCurrentStream(FormStreamFields*)
    
    Merge open source r112162, r112302, r112482.

    2012-03-28  Alexey Proskuryakov  <ap@apple.com>
    
            [Win] Some Blob tests crash in CFNetwork in advanceCurrentStream(FormStreamFields*)
            https://bugs.webkit.org/show_bug.cgi?id=82386
            <rdar://problem/11121501>
    
            Reviewed by Brady Eidson.
    
            Covered by existing tests.
    
            * platform/network/cf/FormDataStreamCFNet.cpp:
            * platform/network/cf/FormDataStreamCFNet.h:
            Moved low level implementation from FormDataStreamMac, and exposed an additional function
            to implement Foundation-based API on top of this.
    
            * platform/network/mac/FormDataStreamMac.h:
            * platform/network/mac/FormDataStreamMac.mm:
            Rely on toll-free bridging and implementation details to make this work without duplicating
            code.
            Note that httpBodyFromStream is confusing - I don't see how it can work when sending serialized
            requests across process boundary. We probably only get away with this because we don't attempt
            to send requests to UI process once they already have streams associated with them.
    
            * WebCore.vcproj/WebCore.vcproj: Added missing platform/cf files.
    
            * platform/cf/FileSystemCF.cpp: Fixed include style.
    
            * platform/win/FileSystemWin.cpp: (WebCore::fileSystemRepresentation): Ifdef out a broken
            implementation.
    
    2012-03-27  Alexey Proskuryakov  <ap@apple.com>
    
            [Mac] Stop using NSMapTable in FormDataStreamMac.mm
            https://bugs.webkit.org/show_bug.cgi?id=82358
    
            Reviewed by Darin Adler.
    
            * platform/network/mac/FormDataStreamMac.mm: Use WTF::HashMap, as we always do. All accesses
            are protected with a mutex anyway.
    
    2012-03-27  Alexey Proskuryakov  <ap@apple.com>
    
            Remove obsolete FormDataStreamMac code
            https://bugs.webkit.org/show_bug.cgi?id=82244
    
            Reviewed by Brady Eidson.
    
            * platform/network/ResourceHandle.h:
            Removed ResourceHandle::didSendBodyDataDelegateExists().
    
            * platform/network/mac/FormDataStreamMac.h:
            * platform/network/mac/FormDataStreamMac.mm:
            Removed code that was needed to call ResourceLoaderClient::didSendData() before Foundation
            added support for it.
    
            * platform/network/mac/ResourceHandleMac.mm:
            (WebCore::ResourceHandle::start):
            (WebCore::ResourceHandle::cancel):
            (-[WebCoreResourceHandleAsDelegate connection:willSendRequest:redirectResponse:]):
            (-[WebCoreResourceHandleAsDelegate connectionDidFinishLoading:]):
            (-[WebCoreResourceHandleAsDelegate connection:didFailWithError:]):
            We no longer need to associate streams with ResourceHandles!

2012-03-26  Benjamin Poulain  <bpoulain@apple.com>

        <rdar://problem/10373544> [WebCore] Add OVERRIDE to iOS virtual member functions

        Reviewed by David Carson.

        Cleanup of the polymorphic functions defined by iOS in WebCore:
        -Add the keyword "virtual" and "OVERRIDE".
        -Remove useless headers.
        -Remove the keyword "virtual" for methods never redefined.
        -Remove unused virtual methods.

        * Modules/webdatabase/DatabaseTask.h:
        (Database::DatabaseTransactionTask):
        * accessibility/AXObjectCache.h:
        * accessibility/AccessibilityTable.h:
        * bindings/objc/DOMInternal.h:
        * css/CSSFontSelector.h:
        * dom/Document.h:
        (Document):
        * dom/Element.h:
        * editing/InsertIntoTextNodeCommand.h:
        (InsertIntoTextNodeCommand):
        * editing/InsertTextCommand.h:
        * history/BackForwardListImpl.h:
        (BackForwardListImpl):
        * history/HistoryItem.h:
        * html/FileInputType.h:
        (FileInputType):
        * html/HTMLAnchorElement.h:
        (HTMLAnchorElement):
        * html/HTMLButtonElement.h:
        (HTMLButtonElement):
        * html/HTMLElement.h:
        (HTMLElement):
        * html/HTMLIFrameElement.h:
        * html/HTMLImageElement.h:
        (HTMLImageElement):
        * html/HTMLInputElement.h:
        (HTMLInputElement):
        * html/HTMLLabelElement.h:
        (HTMLLabelElement):
        * html/HTMLPlugInElement.h:
        * html/HTMLSelectElement.h:
        (HTMLSelectElement):
        * html/HTMLTextAreaElement.h:
        (HTMLTextAreaElement):
        * html/LegacyNumberInputType.h:
        (LegacyNumberInputType):
        * html/shadow/SliderThumbElement.h:
        (SliderThumbElement):
        * loader/EmptyClients.h:
        * loader/ResourceLoader.h:
        (ResourceLoader):
        * loader/SubresourceLoader.h:
        (SubresourceLoader):
        * loader/cache/CachedImage.h:
        (CachedImage):
        * platform/graphics/ca/GraphicsLayerCA.h:
        * platform/graphics/ios/BitmapImageManual.h:
        * platform/graphics/ios/MediaPlayerPrivateIOS.h:
        (MediaPlayerPrivateIOS):
        * platform/ios/ClipboardIOS.h:
        (ClipboardIOS):
        * platform/ios/DeviceMotionClientIOS.h:
        (DeviceMotionClientIOS):
        * platform/ios/DeviceOrientationClientIOS.h:
        (DeviceOrientationClientIOS):
        * platform/ios/PopupMenuIOS.h:
        (PopupMenuIOS):
        * platform/ios/ScrollAnimatorIOS.h:
        (ScrollAnimatorIOS):
        * platform/ios/ScrollbarThemeIOS.h:
        (ScrollbarThemeIOS):
        * platform/ios/SearchPopupMenuIOS.h:
        (SearchPopupMenuIOS):
        * plugins/PluginViewBase.h:
        (PluginViewBase):
        * rendering/RenderButton.h:
        (RenderButton):
        * rendering/RenderImage.h:
        (RenderImage):
        * rendering/RenderLayer.h:
        (RenderLayer):
        * rendering/RenderLayerBacking.h:
        (RenderLayerBacking):
        * rendering/RenderLayerCompositor.h:
        (RenderLayerCompositor):
        * rendering/RenderText.h:
        (RenderText):
        * rendering/RenderTextControl.h:
        (RenderTextControl):
        * rendering/RenderThemeIOS.h:
        (RenderThemeIOS):
        * svg/SVGAElement.h:
        (SVGAElement):

2012-03-27  David Kilzer  <ddkilzer@apple.com>

        Part 2: <rdar://problem/11124358> WebCore fails to build with clean install of Sundance10A270 with Shale4G27

        Reviewed by Dan Bernstein.

        * bindings/scripts/CodeGeneratorObjC.pm:
        (ReadPublicInterfaces): Add -isysroot argument if $ENV{SDKROOT}
        is set.  Remove redundant elsif clause for iOS--$ENV{CC} is set
        by the "Generate Derived Sources" build phase script now.
        * bindings/scripts/preprocessor.pm:
        (applyPreprocessor): Ditto.
        * generate-export-file:
        (process): Remove redundant -sdkroot argument to xcrun.

2012-03-26  David Kilzer  <ddkilzer@apple.com>

        Build system prep work for upstreaming iOS changes

        Merged ToT WebKit r112203.

        Part of: <rdar://problem/11124358> WebCore fails to build with clean install of Sundance10A270 with Shale4G27

    2012-03-26  David Kilzer  <ddkilzer@apple.com>

        Build system prep work for upstreaming iOS changes
        <http://webkit.org/b/82267>

        Reviewed by Mark Rowe.

        * DerivedSources.make: Move 'bison' into a variable and use
        xcrun to find it on Mac OS X.
        * bindings/scripts/preprocessor.pm:
        (applyPreprocessor): Add local @args variable.  On iOS, the
        compiler needs additional "-isysroot $(SDKROOT)" arguments when
        invoked, so it's easier to add them to an array, especially if
        $SDKROOT contains a space in the path.  Remove now-redundant
        $gccLocation variable.

2012-03-26  David Carson  <dacarson@apple.com>

        <rdar://problem/11059794> ASSERTION FAILED: !HashTranslator::equal(KeyTraits::emptyValue(), key) in WebFrameLoaderClient::canAuthenticateAgainstProtectionSpace loading the attached web archive

        Reviewed by Simon Fraser.

        Ensure that an identifier is always set for outgoing requests. WebKit2 does not use the
        identifier in it's call to canAuthenticateAgainstProtectionSpace, so this change is only
        needed for WebKit1, ie iOS.

        * loader/ResourceLoader.cpp:
        (WebCore::ResourceLoader::willSendRequest):

2012-03-26  Enrica Casucci  <enrica@apple.com>

        REGRESSION: After editing a word with red underline, the underline is still there
        <rdar://problem/10703096> 

        Reviewed by David Kilzer.

        The spelling markers are not removed because in Editor::updateMarkersForWordsAffectedByEditing
        we return immediately because shouldRemoveMarkersUponEditing() returns false.
        The method is implemented in SpellingCorrectionController and its implementation always returns
        false if USE_MARKER_REMOVAL_UPON_EDITING is false.
        The fix consists in setting USE_MARKER_REMOVAL_UPON_EDITING to 1. To do so, I've removed the iOS
        platform exclusion that includes also USE_AUTOCORRECTION_PANEL, but that should not be a problem
        since it is not used anywhere.
         
        * platform/text/TextChecking.h:

2012-03-25  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/7760127> Safari Image SubSampling is insufficient for devices with high resolution screens

        Reviewed by David Kilzer.

        Increase the subsampling image size limit to 5MP for devices that have 512MB or more RAM.
        The 2MP limit was set back in April 2007 for the following bug for the 1st gen iPhone which
        had 128MB RAM.

            <rdar://problem/5131951> Cypress: Downloading a 551KB JPG file via IMAP4 (AOL) resulted in a Question mark in a blue box. - QC: 26302

        * platform/graphics/ImageSource.h:
        (ImageSource):
        * platform/graphics/cg/ImageSourceCG.cpp:
        (WebCore):
        (WebCore::ImageSource::shouldSubsampleImageWithSize):
        (WebCore::ImageSource::maximumImageSizeBeforeSubsampling):
        * platform/ios/SystemMemoryIOS.cpp:
        (WebCore::systemTotalMemory): Increase the memory size of the Simulator to 512MB since most
        of the devices we ship now have at least that much RAM.

2012-03-23  Enrica Casucci  <enrica@apple.com>

        Crash in WebCore::Pasteboard::writeSelection on editing/pasteboard/copy-standalone-image.html.
        <rdar://problem/11035787>

        Reviewed by David Kilzer.

        Added the code that handles the case where the entire document is an image.
        The image data is written to the pasteboard according to the native image format.
        
        * editing/Editor.cpp:
        (WebCore::Editor::copy): Added case to handle the case where the entire document is an image.
        * platform/Pasteboard.h:
        (Pasteboard): Added new method writeImage for the iOS platform.
        * platform/ios/PasteboardIOS.mm:
        (WebCore::Pasteboard::writeImage): Added implementation.

2012-03-23  Alexey Proskuryakov  <ap@apple.com>

    <rdar://problem/8268351> Enable BLOB

    Merge OpenSource r111931.

    2012-03-23  Alexey Proskuryakov  <ap@apple.com>
    
            [Mac] No need for platform-specific ENABLE_BLOB values
            https://bugs.webkit.org/show_bug.cgi?id=82102
    
            Reviewed by David Kilzer.
    
            * Configurations/FeatureDefines.xcconfig:

2012-03-23  Joseph Pecoraro  <pecoraro@apple.com>

        Build fix for non-clean builds. Change rmdir to rm -rf.

        Unreviewed build fix.

        * WebCore.xcodeproj/project.pbxproj:

2012-03-23  Joseph Pecoraro  <pecoraro@apple.com>

        <rdar://problem/10408123> Master out or Remove Inspector Resources

        Bail from the inspector resource related WebCore build phases to
        prevent copying the resources to iOS build products.

        Reviewed by David Kilzer.

        * Configurations/WebCore.xcconfig: Exclude localizedStrings.js.
        * WebCore.xcodeproj/project.pbxproj: Bail from Copy and Optimize phases.

2012-03-23  Alexey Proskuryakov  <ap@apple.com>

        Part of
        <rdar://problem/8268351> Enable BLOB

        Reviewed by Oliver Hunt and Joe Pecoraro.

        Changed references to isMainThread() to an iOS friendly fashion.

        * fileapi/ThreadableBlobRegistry.cpp:
        * platform/network/BlobRegistryImpl.cpp:

2012-03-23  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/11059859> Some layers in accelerated overflow-scroll regions do not get accelerated drawing
        <rdar://problem/9900475> Double-tapping an accelerated overflow:scroll area results in fuzzy text
        
        Reviewed by Joseph Pecoraro.
        
        Have scrolling layers use the shared createGraphicsLayer() method. This ensure that
        their "acceleratedDrawing" and "keepPixelAligned" states are set correctly.
        
        This makes the scroll contents layer obey the setting to use acceleratedDrawing, and ensures
        that pixel alignment logic runs on these layer which fixes fuzziness at some scales.

        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::updateScrollingLayers):

2012-03-23  Simon Fraser  <simon.fraser@apple.com>

        Prerequisite for:
        <rdar://problem/11059859> Some layers in accelerated overflow-scroll regions do not get accelerated drawing
        
        Merge OpenSource r111908.
        
    2012-03-23  Simon Fraser  <simon.fraser@apple.com>
    
            Move code that calls setAcceleratesDrawing() on GraphicsLayers into RenderLayerBacking
            https://bugs.webkit.org/show_bug.cgi?id=82092
    
            Reviewed by Dean Jackson.
    
            A RenderLayerBacking manages several GraphicsLayers, but RenderLayerCompositor
            was only calling setAcceleratesDrawing() on the one it knows about. Fix by moving
            this setting code down into RenderLayerBacking.
            
            RenderLayerCompositor now caches the setAcceleratesDrawing setting, as it does
            for other compositing-related settings, so that RenderLayerBacking doesn't have
            to grovel for Settings every time.
    
            * rendering/RenderLayerBacking.cpp:
            (WebCore::RenderLayerBacking::createGraphicsLayer):
            (WebCore::RenderLayerBacking::createPrimaryGraphicsLayer):
            * rendering/RenderLayerCompositor.cpp:
            (WebCore::RenderLayerCompositor::RenderLayerCompositor):
            (WebCore::RenderLayerCompositor::cacheAcceleratedCompositingFlags):
            (WebCore::RenderLayerCompositor::updateBacking):
            * rendering/RenderLayerCompositor.h:
            (WebCore::RenderLayerCompositor::acceleratedDrawingEnabled):
            (RenderLayerCompositor):

2012-03-23  Joseph Pecoraro  <pecoraro@apple.com>

        Give <input type="range"> a readonly style.

        Reviewed by David Carson.

        * rendering/RenderThemeIOS.cpp:
        (WebCore::getReadonlySliderTrackGradient):
        (WebCore::gradientWithName):
        (WebCore::RenderThemeIOS::paintSliderTrack):
        Give the track readonly colors that match the disabled track color.

2012-03-23  Joseph Pecoraro  <pecoraro@apple.com>

        <rdar://problem/10610482> Date and Time input types should fire onchange events

        By default all -[DOMHTMLInputElement setValue*] methods will set the
        input value without triggering events. iOS uses the DOMNode APIs for
        form controls, so it needs SPI for setValue methods that trigger events.

        Reviewed by David Carson.

        * bindings/objc/DOMPrivate.h:
        * bindings/objc/DOMHTML.mm:
        (-[DOMHTMLInputElement setValueWithChangeEvent:]):
        (-[DOMHTMLInputElement setValueAsNumberWithChangeEvent:]):
        Provide SPI for setting input values that also trigger events.

2012-03-22  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/11101616> Remove RenderLayer code duplication after 11070990

        Reviewed by Anders Carlsson.

        Make use of the newly added method that updates compositing layers
        after scrolling in one new spot.

        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::scrollTo):

2012-03-22  Simon Fraser  <simon.fraser@apple.com>

        Merge OpenSource r111096.
        
        Allows cleanup after r1109465.

    2012-03-22  Simon Fraser  <simon.fraser@apple.com>
    
            Factor compositing layer updates after scroll into a new method
            https://bugs.webkit.org/show_bug.cgi?id=81943
    
            Reviewed by Dean Jackson.
    
            Move some code that updates compositing layers after scrolling
            into its own method, for cleanliness.
    
            * rendering/RenderLayer.cpp:
            (WebCore::RenderLayer::scrollTo):
            (WebCore::RenderLayer::updateCompositingLayersAfterScroll):
            (WebCore):
            * rendering/RenderLayer.h:
            (RenderLayer):

2012-03-21  Benjamin Poulain  <benjamin@webkit.org>

        <rdar://problem/10999598> Geolocation is probably pretty broken after OpenSource r109761

        Reviewed by David Carson.

        After Open Source WebKit r109761, the Geolocation object becomes an ActiveDOMObject.
        This patch adapts our previous suspend and resume mechanism to use ActiveDOMObject.

        * Modules/geolocation/Geolocation.cpp:
        (WebCore):
        (WebCore::Geolocation::canSuspend):
        (WebCore::Geolocation::suspend):
        (WebCore::Geolocation::resume):
        * Modules/geolocation/Geolocation.h:
        (Geolocation):
        * dom/Document.cpp:
        (WebCore::Document::suspendActiveDOMObjects):
        (WebCore::Document::resumeActiveDOMObjects):
        (WebCore::Document::stopActiveDOMObjects):

2012-03-21  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/11070990> Sundance (264+) webkit overflow scrolling shows some jitter in the store apps

        Reviewed by Dan Bernstein.
        
        When UIKit is in the mode where scroll events are fired all the time while scrolling,
        accelerated overflow:scroll was jittery. In response to the UIScrollView scroll (wherein
        the UIScrollView contentOffset changes, which changes the boundsOrigin of the layer),
        WebCore would be notified of the scroll position change, and would thence update its
        notion of the scroll offset, and update compositing layers, on the WebThread.
        
        This resulted in both UIKit (on the main thread) and WebCore (on the web thread)
        touching the boundsOrigin of the scrolling layer, causing jitter.
        
        Fix this by having WebCore not update the CALayer's boundsOrigin if a user-initiated
        scroll is in progress. RenderLayer needs to store some state to ensure that the
        GraphicsLayers get updated after the scroll is complete (because the last scroll notification
        has the same scroll offset as the penultimate one).

        * WebCore.exp.in:
        * page/Frame.h:
        (Frame):
        * page/ios/FrameIOS.mm:
        (WebCore::Frame::overflowScrollPositionChangedForNode):
        * platform/ScrollableArea.h:
        (WebCore::ScrollableArea::setIsUserScroll):
        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::RenderLayer):
        (WebCore::RenderLayer::scrollTo):
        * rendering/RenderLayer.h:
        (WebCore::RenderLayer::setIsUserScroll):
        (RenderLayer):
        (WebCore::RenderLayer::isInUserScroll):
        (WebCore::RenderLayer::requiresScrollBoundsOriginUpdate):
        (WebCore::RenderLayer::setRequiresScrollBoundsOriginUpdate):
        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::updateGraphicsLayerGeometry):

2012-03-20  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/11086330> ASSERTION FAILED: isMainThread() from InspectorCounters::incrementCounter()

        Reviewed by Joseph Pecoraro.
        
        Fix two isMainThread() assertions introduced by a recent merge.

        * inspector/InspectorCounters.h:
        (WebCore::InspectorCounters::incrementCounter):
        (WebCore::InspectorCounters::decrementCounter):

2012-03-19  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/11078106> Stop linking WebCore to CoreAudio.framework

        Reviewed by Andy Estes.

        * Configurations/WebCore.xcconfig: Don't link to CoreAudio.

2012-03-19  Oliver Hunt  <oliver@apple.com>

        <rdar://problem/11077141> iOS WebKit merge: stabilizing merge branch to ToT r110032

        Merge up to OpenSource WebKit r110032.

2012-03-19  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/11067481> Elements inside a position:fixed element aren't tappable

        Reviewed by Joseph Pecoraro.

        WebCore uses RenderObject::absoluteClippedOverflowRect() to compute touch event regions,
        and that code wasn't making use of the custom fixed-position layout rect. Fixed by
        having RenderView::computeRectForRepaint() use the special fixed position offset, as it
        already does for mapAbsoluteToLocalPoint() and friends.

        * rendering/RenderView.cpp:
        (WebCore::RenderView::computeRectForRepaint):

2012-03-19  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/11039491> AppStore crashes often in WebCore::ApplyPropertyDefault::applyValue

        Reviewed by Joseph Pecoraro.
        
        UIKit was calling -[WebView _allowsOverflowScrollbarsOnNode:allowHorizontal:allowVertical:] on
        the main thread without taking the web thread lock, resulting in two threads in WebCore, which
        corrupted CSSStyleSelector data structures.
        
        Rather than take the lock on the main thread, simply pass out whether scroll bars
        should be visible in the existing ChromeClient callback. This change removes the
        WebView SPI that was added in r1106657.

        * WebCore.exp.in:
        * loader/EmptyClients.h:
        (WebCore::EmptyChromeClient::addOrUpdateScrollingLayer):
        * page/ChromeClient.h:
        * page/Frame.h:
        (Frame):
        * page/ios/FrameIOS.mm:
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::scrollbarHasDisplayNone):
        (WebCore):
        (WebCore::RenderLayerCompositor::registerAllScrollingLayers):
        (WebCore::RenderLayerCompositor::scrollingLayerAddedOrUpdated):

2012-03-19  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/11069731> Please export DOMTouchEvent and DOMTouch

        Reviewed by Joseph Pecoraro.

        * WebCore.exp.in: Export DOMGestureEvent, DOMTouch,
        DOMTouchEvent and DOMTouchList Objective-C classes.

2012-03-16  Matt Lilek  <mrl@apple.com>

        <rdar://problem/10121259> Replace [NSNumberFormatter setHasThousandSeparators:] with grouping separator/size for iOS

        Merge OpenSource r111096.

        2012-03-16  Matt Lilek  <mrl@apple.com>

            Use modern NSNumberFormatter API in LocalizedNumberMac.mm 
            https://bugs.webkit.org/show_bug.cgi?id=81429 

            Reviewed by Dan Bernstein. 

            No new tests as no change in behavior. 

            * platform/text/mac/LocalizedNumberMac.mm: 
            (WebCore::createFormatterForCurrentLocaleForDisplay): 

2012-03-16  Joseph Pecoraro  <pecoraro@apple.com>

        Fix RenderTheme RGBA colors that use the float syntax. If floats are
        provided, they should be in the [0..1] range, not [0..255].

        Reviewed by Scott Grant and Simon Fraser.

        * rendering/RenderThemeIOS.cpp:
        (WebCore::RenderThemeIOS::shadowColor):
        (WebCore::RenderThemeIOS::paintCheckboxDecorations):
        (WebCore::RenderThemeIOS::paintMenuListButtonDecorations):

2012-03-16  Joseph Pecoraro  <pecoraro@apple.com>

        <rdar://problem/9254799> iOS: Readonly fields should have some appearance difference (dimmed edges)
        <rdar://problem/10080399> Tapping readonly date fields keep combo box arrow button in depressed state
        <rdar://problem/10863146> readonly <input type="date"> element appears pressed when tapped

        Style readonly fields and mark them as not responding to mouse
        events so they don't get the invert tap rect or clicks.

        Reviewed by Scott Grant.

        * css/html.css:
        (input:disabled, textarea:disabled):
        (input[readonly], textarea[readonly]):
        Give readonly fields a readonly style.

        * html/HTMLInputElement.cpp:
        (WebCore::HTMLInputElement::willRespondToMouseClickEvents):
        * html/HTMLTextAreaElement.cpp:
        (WebCore::HTMLTextAreaElement::willRespondToMouseClickEvents):
        Don't allow taps on readonly fields.

        * rendering/RenderThemeIOS.cpp:
        (WebCore::RenderThemeIOS::paintMenuListButtonDecorations):
        Fix opacity setting by default and dim it a bit more for a readonly field.

2012-03-16  Matt Lilek  <mrl@apple.com>

        <rdar://problem/10501894> Master out libWebCoreTestSupport.dylib in all builds

        Merge OpenSource r111058.

        2012-03-16  Matt Lilek  <mrl@apple.com>

            Don't install libWebCoreTestSupport on OS X production builds 
            https://bugs.webkit.org/show_bug.cgi?id=81087

            Reviewed by Mark Rowe.

            * Configurations/WebCoreTestSupport.xcconfig:

2012-03-16  Joseph Pecoraro  <pecoraro@apple.com>

        Fix build with newer versions of clang.

        Reviewed by Anders Carlsson.

        * accessibility/ios/AccessibilityObjectWrapperIOS.mm:
        (-[AccessibilityTextMarker description]):
        Changed %x and %d to %p because they deal with pointers.

        * editing/FrameSelection.cpp:
        (WebCore::FrameSelection::recomputeCaretRect):
        OpenSource fix was reviewed. Move the variable into a Guard because
        it is only used inside of the guard.

        * loader/FrameLoader.cpp:
        (WebCore::createWindow):
        Variable is not used on iOS so guard it out.

        * platform/ios/WebEvent.mm:
        (-[WebEvent _touchIdentifiersDescription]):
        Changed %p to %u because its an unsigned int.

2012-03-16  Joseph Pecoraro  <pecoraro@apple.com>

        Merged ToT r109663.

    2012-03-03  Anders Carlsson  <andersca@apple.com>
    
            Fix build with newer versions of clang.
    
            * bindings/objc/DOM.mm:
            (-[DOMNode description]):
            Remove an unused parameter.
    
            * bridge/objc/objc_instance.mm:
            (ObjcInstance::getClass):
            Use object_getClass instead of accessing isa directly.
    
            * platform/LocalizedStrings.cpp:
            (WebCore::formatLocalizedString):
            Disable the -Wformat-nonliteral warning around the call to CFStringCreateWithFormatAndArguments.
    
            * platform/graphics/mac/WebLayer.mm:
            (-[CALayer _descriptionWithPrefix:]):
            Use %p for the CALayer pointer, and use %lu for the number of sublayers.
    
            * platform/mac/HTMLConverter.mm:
            (-[WebHTMLConverter _addAttachmentForElement:URL:needsParagraph:usePlaceholder:]):
            Cast the NSAttachmentCharacte enum to unichar.
    
2012-03-16  Beth Dakin  <bdakin@apple.com>

        <rdar://problem/10857626> Ensure OpenSource r106977 was merged correctly

        Reviewed by Simon Fraser.

        This merge was slightly off. Simon corrected part of it yesterday 
        with https://svn.apple.com/trac/puzzlebox/changeset/1108173. Generally, 
        whenever RenderLayer calls removeScrollableArea() it should also call 
        unregisterAsTouchEventListenerForScrolling().
        
        The merged version of this was only calling 
        unregisterAsTouchEventListenerForScrolling() if 
        hasAcceleratedTouchScrolling() is true, but the original code only made that 
        check when adding a ScrollableArea, not when removing one.  
        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::styleChanged):

2012-03-15  Benjamin Poulain  <bpoulain@apple.com>

        <rdar://problem/10315023> Get rid of WKWindowSetContentRect

        Reviewed by David Carson.

        The last reference to WKWindowSetContentRect has been removed from UIKit.
        We can get rid of this method.

        * WebCore.exp.in:
        * wak/WKWindow.h:
        * wak/WKWindow.mm:

2012-03-15  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/11055380> PEP Web: MobileSafari crashed at WebCore::Document::eventRectRelativeToRoot when running Alexa1000 test.

        Reviewed by Joseph Pecoraro.

        The Document has a non ref-counted hash set of nodes which generate
        touch event regions. Nodes are added to this set for two reasons:
        either they have touch event handlers on them, or we treat them as
        touchable from RenderLayer because they have overflow:scroll.
        
        Nodes were not correctly removed from this set in the overflow:scroll
        case, causing Document::touchEventsChangedTimerFired() to reference
        deleted nodes.
        
        Fix by having RenderLayer unregister overflow:scroll nodes on destruction.
        
        This actually brings back some code that was lost in a merge (<rdar://problem/10857626>).
        
        Because this is timing-dependent, I wasn't able to make a simple test.

        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::~RenderLayer):

2012-03-14  Simon Fraser  <simon.fraser@apple.com>
    
        Part of:
        <rdar://problem/10273126> REGRESSION (Durango-Telluride): Poor frame rate scrolling techcrunch.com (>2x worse than Durango)
    
        Merge OpenSource r109851.

    2012-03-05  Adrienne Walker  <enne@google.com>
    
            Compositing overlap testing can throw layers into compositing when they should not be.
            https://bugs.webkit.org/show_bug.cgi?id=50192
    
            Reviewed by Simon Fraser.
    
            The previous overlap map behavior was that a non-composited query
            layer would become composited due to overlap if and only if the query
            layer's absolute bounds overlapped the absolute bounds of some other
            layer which:
                - draws before the query layer
                - is or has a compositing ancestor
    
            This behavior, while correct, was too permissive in throwing layers
            into compositing, causing many layers to get their own backing when
            they could have just gone into their compositing ancestor's backing.
    
            The correct logic is that non-composited query layer needs to be
            composited due to overlap if and only if the query layer's absolute
            bounds overlap the absolute bounds of some other layer which:
                - draws before the query layer
                - has a different compositing ancestor than the query layer
                - is or has a compositing ancestor that is a descendent of the
                  query layer's compositing ancestor
    
            This patch changes the semantics of the overlap map to enable this
            behavior.
    
            Rather than having one global overlap map, there is now a stack of
            overlap maps. New (empty) overlap maps are pushed onto the stack
            whenever a layer becomes a compositing ancestor and popped after all
            of the compositing requirements for that layer's children have been
            computed.
    
            The compositing ancestor and all of its non-composited children of a
            compositing ancestor do not get considered for overlap until their
            composited ancestor has been popped off the stack. If a compositing
            ancestor has a compositing subtree, then any descendents of that
            compositing ancestor that draw after that subtree will consider
            everything in the compositing subtree for overlap.
    
            Test: compositing/layer-creation/stacking-context-overlap.html
    
            * platform/graphics/Region.cpp:
            (WebCore::Region::intersects):
            (WebCore):
            * platform/graphics/Region.h:
            (Region):
            * rendering/RenderLayerCompositor.cpp:
            (RenderLayerCompositor::OverlapMap):
            (WebCore::RenderLayerCompositor::OverlapMap::OverlapMap):
            (WebCore::RenderLayerCompositor::OverlapMap::add):
            (WebCore::RenderLayerCompositor::OverlapMap::contains):
            (WebCore::RenderLayerCompositor::OverlapMap::overlapsLayers):
            (WebCore::RenderLayerCompositor::OverlapMap::isEmpty):
            (WebCore::RenderLayerCompositor::OverlapMap::popCompositingContainer):
            (WebCore::RenderLayerCompositor::OverlapMap::pushCompositingContainer):
            (WebCore::RenderLayerCompositor::addToOverlapMapRecursive):
            (WebCore::RenderLayerCompositor::computeCompositingRequirements):
            * rendering/RenderLayerCompositor.h:
            (RenderLayerCompositor):

2012-03-13  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/11030522> Avoid allocating backing store for accelerated overflow:scroll container layer

        Reviewed by Dean Jackson.
        
        We can avoid allocating layer backing store for some overflow-scrolling configurations.
        If the element with acceleratd overflow:scroll has no box decorations or background,
        the main layer doesn't require backing store. If the scrolled contents are entirely
        composited themselves, the container layer for the scrolled contents doesn't require
        backing store.
        
        This will save memory for some content.

        Test: platform/iphone-simulator/iphone/scrolling/overflow-scroll-layers.html

        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::updateDrawsContent):

2012-03-13  Simon Fraser  <simon.fraser@apple.com>

        Prerequisite for:
        <rdar://problem/11030522> Avoid allocating backing store for accelerated overflow:scroll container layer
    
        Merge OpenSource r110601.

    2012-03-12  Simon Fraser  <simon.fraser@apple.com>
    
            Refactor some code that is used to check whether a layer needs backing store
            https://bugs.webkit.org/show_bug.cgi?id=80917
    
            Reviewed by Dean Jackson.
    
            Move some code out of isSimpleContainerCompositingLayer() in two new
            methods to make the code more self-descriptive.
            
            No behavior change, so no tests.
    
            * rendering/RenderLayerBacking.cpp:
            (WebCore::RenderLayerBacking::paintsBoxDecorations):
            (WebCore::RenderLayerBacking::paintsChildren):
            (WebCore::RenderLayerBacking::isSimpleContainerCompositingLayer):
            * rendering/RenderLayerBacking.h:
            (RenderLayerBacking):

2012-03-12  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/10963482> ASSERTION FAILED: d->m_defersLoading != defers loading www.politico.com page

        Merged ToT WebKit r110349.

    2012-03-09  Pratik Solanki  <psolanki@apple.com>

        Assertion failure in ResourceHandle::setDefersLoading(): d->m_defersLoading != defers
        https://bugs.webkit.org/show_bug.cgi?id=80543

        Reviewed by Geoffrey Garen.

        Reset m_defersLoading flag to the value from Page::defersCallbacks() in
        ResourceLoader::init(). This is because the resource could have been in the pending requests
        queue in ResourceLoadScheduler and would have missed out on state changes to this flag
        happening from DocumentLoader::setDefersCallbacks().

        * loader/ResourceLoader.cpp:
        (WebCore::ResourceLoader::init):

2012-03-09  Benjamin Poulain  <benjamin@webkit.org>

        <rdar://problem/11013199> ASSERT(WebThreadIsCurrent()); in WebCore::GeolocationController::resume when canceling long press popover after rotation

        Reviewed by David Carson.

        There are plenty of code paths suspending the DOM Active Objects from the UI Thread.

        The assertion of GeolocationController::resume() is too restrictive. It is safe to suspend
        from the UI thread as long as the WebThread is locked.

        * Modules/geolocation/GeolocationController.cpp:
        (WebCore::GeolocationController::resume):

2012-03-08  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/10760845> Sub-TLF: Allow the hiding/disabling of scrollbars in Webkit on iOS

        Reviewed by David Kilzer.
        
        Allow authors to hide accelerated overflow:scroll scrollbars by setting
        the scrollbar to display:none via the ::-webkit-scrollbar pseudoelement.
        The horizontal and vertical scrollbars can be hidden independently.

        Done via a method on Frame.h for iOS that fetches scrollbar pseudostyle,
        and looks at the display property.
        
        The test exercises the new code paths for crash detection, but not correctness.

        Test: platform/iphone-simulator/iphone/scrolling/scrollbar-hiding.html

        * WebCore.exp.in:
        * page/Frame.h:
        (Frame):
        * page/ios/FrameIOS.mm:
        (WebCore::scrollbarHasDisplayNone):
        (WebCore):
        (WebCore::Frame::allowsOverflowScrollBarsForNode):
        * rendering/RenderScrollbar.h:
        (RenderScrollbar):

2012-03-08  David Kilzer  <ddkilzer@apple.com>

        Use SOFT_LINK_FRAMEWORK_OPTIONAL macro with QuickLook.framework

        Reviewed by Pratik Solanki.

        Follow-up fix for: <rdar://problem/9977043> Don't use QuickLook.framework if it's not available via soft-linking

        * platform/network/ios/QuickLook.mm: Switch to using
        SOFT_LINK_FRAMEWORK_OPTIONAL.

2012-03-08  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/10568990> Don't use DataDetectorsCore.framework if it's not available via soft-linking

        Reviewed by Pratik Solanki.

        * html/parser/HTMLTreeBuilder.cpp: Switch to using
        SOFT_LINK_PRIVATE_FRAMEWORK_OPTIONAL.
        (WebCore::HTMLTreeBuilder::processCharacterBufferForInBody):
        Add check for DataDetectorsCore.framework being loaded.

        * platform/mac/SoftLinking.h:
        (SOFT_LINK_PRIVATE_FRAMEWORK_OPTIONAL): Added.  Copied from
        SOFT_LINK_PRIVATE_FRAMEWORK and removed the ASSERT().

2012-03-08  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/9977043> Don't use QuickLook.framework if it's not available via soft-linking

        Reviewed by Pratik Solanki.

        * platform/mac/SoftLinking.h:
        (SOFT_LINK_MAY_FAIL): Added.  Copied from
        WebKitSystemInterface/Softlinking.h.  Updated to assume C++ and
        use ASSERT() macros.
        (SOFT_LINK_CONSTANT_MAY_FAIL): Added.  Copied from
        SOFT_LINK_CONSTANT and added a canLoad() method.

        * platform/network/ios/QuickLook.mm:
        (WebCore): Switch from using SOFT_LINK to SOFT_LINK_MAY_FAIL.
        Switch from SOFT_LINK_CONSTANT to SOFT_LINK_CONSTANT_MAY_FAIL.
        (WebCore::QLTypeCopyBestMimeTypeForFileNameAndMimeType): Added.
        Add canLoad() check in case QuickLook is not available.
        (WebCore::QLTypeCopyBestMimeTypeForURLAndMimeType): Ditto.
        (WebCore::QLPreviewGetSupportedMIMETypesSet): Ditto.  Make sure
        to call the local static method in DEFINE_STATIC_LOCAL().
        (WebCore::QLTypeCopyUTIForURLAndMimeType): Added.
        (WebCore::registerQLPreviewConverterIfNeeded): Make sure to use
        the namespace methods with a canLoad() check.
        (WebCore::QLPreviewProtocol): Add canLoad() check.
        (WebCore::QuickLookHandle::create): Make sure to use
        the namespace method with a canLoad() check.

2012-03-08  Matt Lilek  <mrl@apple.com>

    <rdar://problem/10821239> ENABLE_VIDEO_TRACK should not be defined for iOS

    Merge OpenSource r110212.

    2012-03-08  Matt Lilek  <mrl@apple.com>

            Don't enable VIDEO_TRACK on all OS X platforms
            https://bugs.webkit.org/show_bug.cgi?id=80635

            Reviewed by Eric Carlson.

            * Configurations/FeatureDefines.xcconfig:

2012-03-07  Benjamin Poulain  <bpoulain@apple.com>

        <rdar://problem/10266101> Crash in RenderLayer::hasAcceleratedTouchScrolling() at bing.com

        Reviewed by Simon Fraser.

        This is a prospective bug fix for a top crasher. I was not able to reproduce the crash.

        The most likely cause of the crash is a null settings for the document. This should
        not appear at this point.

        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::hasAcceleratedTouchScrolling):

2012-03-08  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/11012359> Don't take custom scrollbars into account when laying out an accelerated overflow:scroll area

        Reviewed by Pratik Solanki.

        If an accelerated overflow:scroll element has custom scrollbar
        style, don't allow the scrollbar dimensions to affect the layout,
        since we won't be displaying the custom scrollbar.
        
        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::visibleContentRect):
        (WebCore::RenderLayer::verticalScrollbarWidth):
        (WebCore::RenderLayer::horizontalScrollbarHeight):

2012-03-08  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/10009662> We invalidate scrollbar parts in overflow:scroll divs on iOS, when we have no need to
        <rdar://problem/11011945> Disable custom ::-webkit-scrollbar drawing for accelerated scroll

        Reviewed by David Carson.

        When pages use ::-webkit-scrollbar styles to style
        the scrollbar, we render those scrollbars on iOS.
        This makes no sense, so don't render such scrollbars
        when using -webkit-overflow-scrolling: touch. Since
        we don't render them, also don't waste time invalidating
        them.
        
        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::invalidateScrollbarRect):
        (WebCore::RenderLayer::invalidateScrollCornerRect):
        (WebCore::RenderLayer::paintOverflowControls):

2012-03-08  Dean Jackson  <dino@apple.com>

        <rdar://problem/10952293> Animate hardware filters

        Reviewed by Simon Fraser.

        Now that iOS filters can be composited, use CoreAnimation
        to animate their parameter values. Create a new file
        for the implementation of hardware-animated filters.
        Also fix a minor bug in the inversion color matrix.

        Covered by the existing tests from Open Source. I've
        added platform results for iOS.

        * WebCore.xcodeproj/project.pbxproj:
        * platform/graphics/ca/mac/PlatformCAAnimationMac.mm:
        * platform/graphics/ios/PlatformCAAnimationIOS.mm: Added.
        (colorMatrixFromComponents):
        (filterValueForOperation):
        (PlatformCAAnimation::setFromValue):
        (PlatformCAAnimation::setToValue):
        (PlatformCAAnimation::setValues):
        (PlatformCAAnimation::numAnimatedFilterProperties):
        (PlatformCAAnimation::animatedFilterPropertyName):
        * platform/graphics/ios/PlatformCALayerIOS.mm:
        (PlatformCALayer::setFilters):

2012-03-07  Dean Jackson  <dino@apple.com>

        <rdar://problem/10952293> Animate hardware filters

        Merged TOT WebKit r109953.

    2012-03-05  Dean Jackson  <dino@apple.com>

            Enable compositing when a CSS filter is animating
            https://bugs.webkit.org/show_bug.cgi?id=79048

            Reviewed by Simon Fraser.

            Now that some systems (e.g. OS X) have both hardware accelerated
            CSS filters, and the ability to animate them via the hardware
            compositor, all CSS filters should be composited when animating.

            Tests: css3/filters/composited-during-animation-layertree.html
                   css3/filters/composited-during-animation.html
                   css3/filters/composited-during-transition-layertree.html

            * platform/graphics/ca/GraphicsLayerCA.cpp:
            (WebCore):
            (WebCore::supportsAcceleratedFilterAnimations):
                new method that returns true if the platform supports
                hardware animations of filters.
            (WebCore::GraphicsLayerCA::addAnimation):
            (WebCore::GraphicsLayerCA::createAnimationFromKeyframes):
                only create layer-animations if the platform supports it.
            * rendering/RenderLayerCompositor.cpp:
            (WebCore::RenderLayerCompositor::requiresCompositingForAnimation):
                create a compositing layer if animating a filter on a
                supported platform.

2012-03-07  Scott Grant  <scott.grant@apple.com>

        <rdar://problem/9866128> Assertion on TileGridTile.mm:39 (!tileRect.isEmpty()) while moving through Find on Page results

        Reviewed by Ian Henderson.

        The find on page code asks us to create tiles for results that are off screen.  The tile grid will never generate tiles that 
        are outside of its bounds, so ignore such requests.

        * platform/ios/TileGrid.mm:
        (WebCore::TileGrid::addTilesCoveringRect):

2012-03-06  Justin Garcia  <justin.garcia@apple.com>

        <rdar://problem/10850227> UITextView renders Courier differently from UITextField and UILabel
        
        Removed a workaround for the fix for:
        
        <rdar://problem/5116477> All monospaced type shows up in italics
        
        which mapped Courier to Courier New. It was added at a time when the phone only had the oblique variant for Courier. Tested on K95.

        Reviewed by Scott Grant.

        * platform/graphics/ios/FontCacheIOS.mm:
        (WebCore::FontCache::createFontPlatformData):

2012-03-05  Benjamin Poulain  <bpoulain@apple.com>

        Remove ARMv5 support from the iOS build system as it is no longer needed

        Reviewed by David Kilzer.

        * Configurations/WebCore.xcconfig:
        * DerivedSources.make:

2012-03-03  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/10972071> PEP Web: MobileSafari crashed at SubresourceLoader::willSendRequest when running Alexa1000 test.

        Reviewed by David Kilzer.

        A subresource could be scheduled in ResourceLoaderScheduler's priority queue and wait for its turn to start loading. Its
        owning DocumentLoader won't put this subresource to its subresources list until the resource starts loading.  Before the
        scheduler really starts loading this subresource, if the owning DocumentLoader is detached, this subresource will be
        orphaned and its frame will be null which causes this crash.

        * loader/ResourceLoader.cpp:
        (WebCore::ResourceLoader::init):

2012-03-01  Benjamin Poulain  <bpoulain@apple.com>

        <rdar://problem/10922144> iOS WebKit merge: stabilizing merge branch to ToT r108448 or later (to pick up LLInt)

        Integrate the merge branch of Matt up to OpenSource WebKit r109201.

2012-03-01  Joseph Pecoraro  <pecoraro@apple.com>

        Follow-up fix: move from "File" to "Photo".

        * English.lproj/Localizable.strings:

2012-02-28  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/10542316> PEP Web: MobileSafari sometimes get jettisoned at FrameView::paintContents.

        Reviewed by Pratik Solanki.

        Before painting, if we are low in memory, prune memory cache resources.  To avoid unnecessary image
        decoding, we don't prune recently-decoded live resources at this point because we might need some live
        bitmaps on painting.  After painting, we can prune these live resources.

        During Alexa1000 test, we never see 2MB safe memory check fail in this function.  Replace that with
        the new memoryPressureHandler::hasReceivedMemoryPressure() check.

        * page/FrameView.cpp:
        (WebCore::FrameView::paintContents):

2012-02-29  Dean Jackson  <dino@apple.com>

        <rdar://problem/10952286> Enable hardware filters

        Reviewed by Simon Fraser.

        Use Core Animation private filters where possible on
        composited objects.

        No new tests. Covered by existing tests.

        * WebCore.xcodeproj/project.pbxproj:
        * platform/graphics/ca/mac/PlatformCALayerMac.mm:
        (PlatformCALayer::setFilters): mark this function to only compile
        on OS X.
        * platform/graphics/ios/PlatformCALayerIOS.mm: Added.
        (PlatformCALayer::setFilters): New file with the iOS implementation
        of setFilters, which uses Core Animation rather than Core Image.

2012-02-29  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/10079591> Sub-TLF: Add support in WebKit to achieve a grid layout that matches how Japanese books are displayed

        Merged TOT WebKit r109267.

    2012-02-29  David Hyatt  <hyatt@apple.com>

        https://bugs.webkit.org/show_bug.cgi?id=79940
        <rdar://problem/10080189>
        
        Add support in WebKit for an intra-line character grid for Japanese text layout.
        
        Patch logicalLeftOffsetForLine and logicalRightOffsetForLine in order to get the
        basic edge snapping grid functionality up and running. See all the FIXMEs in the function for
        some of the issues that still have to be dealt with for it to really work well.

        Reviewed by Dan Bernstein.

        Added new tests in fast/line-grid.

        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::logicalLeftOffsetForLine):
        (WebCore::RenderBlock::logicalRightOffsetForLine):

2012-02-29  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/10957135> Always fire requestAnimationFrame callbacks on the WebThread runloop

        Reviewed by Yongjun Zhang.

        requestAnimationFrame on iOS had two issues. First, it failed to
        take the WebThreadLock() in the display link callback, causing
        crashes. Secondly, it would use the current runloop, so
        if the request was made from a touch event handler (which runs
        on the main thread), all callbacks would fire on the main thread.
        
        Fixed to always fire on the Web Thread (which means there's no need
        to take the web thread lock).

        * platform/graphics/mac/DisplayRefreshMonitorMac.mm:
        (-[WebDisplayLinkHandler initWithMonitor:WebCore::]):
        (-[WebDisplayLinkHandler handleDisplayLink:]):

2012-02-29  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/10584394> WebKit refuses to render entire frame contents in iOS 5.1 when frame is inside an accelerated overflow: scroll container

        Reviewed by Simon Fraser.

        * manual-tests/ios/subframe-in-accelerated-overflow.html: Added.
        * platform/ios/WidgetIOS.mm:
        (WebCore::Widget::paint): Changed to use -[WAKView displayRectIgnoringOpacity:inContext:]
        instead of -displayRectIgnoringOpacity:. The latter always clips to the superview, which
        makes no sense when there is a copmositing layer boundary between the view and its superview.
        This new code is similar to what WidgetMac.mm does when drawing into a layer.

2012-02-29  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/10946255> Crash in MobileSafari at WebCore::DisplayRefreshMonitor::refreshDisplay (10A249)

        Reviewed by Yongjun Zhang.

        Fix crash after unloading a page that had used requestAnimationFrame.
        
        WebDisplayLinkHandler created a CADisplayLink with itself
        as the target, causing the WebDisplayLinkHandler to never
        get dealloc'd. It could later reference a deleted DisplayRefreshMonitor
        object.
        
        Fix by using an explicit -invalidate method.

        * platform/graphics/mac/DisplayRefreshMonitorMac.mm:
        (-[WebDisplayLinkHandler initWithMonitor:WebCore::]):
        (-[WebDisplayLinkHandler dealloc]):
        (-[WebDisplayLinkHandler invalidate]):
        (WebCore::DisplayRefreshMonitor::~DisplayRefreshMonitor):

2012-02-28  Benjamin Poulain  <bpoulain@apple.com>

        <rdar://problem/8976264> MobileSafari should switch to client-based geolocation

        Reviewed by David Kilzer.

        Move the implementation from WebCore to WebKit.

        GeolocationServiceCoreLocation disappears in favor of the Geolocation Client.

        The responsabilities of GeolocationLink are fulfilled by GeolocationController.

        GeolocationLocationDelegate is moved to its own file in WebKit.

        * Configurations/FeatureDefines.xcconfig:
        * WebCore.exp.in:
        * WebCore.xcodeproj/project.pbxproj:
        * dom/Document.cpp:
        (WebCore::Document::suspendActiveDOMObjects):
        (WebCore::Document::resumeActiveDOMObjects):
        (WebCore::Document::stopActiveDOMObjects):
        * page/Geolocation.cpp:
        * page/Geolocation.h:
        (Geolocation):
        * page/GeolocationController.cpp:
        (WebCore::GeolocationController::positionChanged):
        (WebCore::GeolocationController::errorOccurred):
        (WebCore):
        (WebCore::GeolocationController::suspend):
        (WebCore::GeolocationController::resume):
        * page/GeolocationController.h:
        (GeolocationController):
        * platform/ios/GeolocationManager.h: Removed.
        * platform/ios/GeolocationManager.mm: Removed.
        * platform/ios/GeolocationServiceCoreLocation.cpp: Removed.
        * platform/ios/GeolocationServiceCoreLocation.h: Removed.

2012-02-28  Dean Jackson  <dino@apple.com>

        <rdar://problem/10042073> Make CSS filters work on iOS

        Reviewed by Joseph Pecoraro.

        Turn ENABLE_CSS_FILTERS on for iOS. Surround CoreImage
        hardware path with PLATFORM(IOS), temporarily
        disabling hardware filters.

        * Configurations/FeatureDefines.xcconfig:
        * platform/graphics/ca/mac/PlatformCALayerMac.mm:
        (PlatformCALayer::setFilters):

2012-02-28  Joseph Pecoraro  <pecoraro@apple.com>

        Revert from "Media" to "File". Scott did not like "media" and
        everyone is already familiar with "file".

        Reviewed by David Carson.

        * English.lproj/Localizable.strings:

2012-02-28  Joseph Pecoraro  <pecoraro@apple.com>

        Remove stale iOS IDL diff, no longer needed for <input type="file">.

        Reviewed by David Carson.

        * html/HTMLInputElement.idl:

2012-02-28  Dean Jackson  <dino@apple.com>

        <rdar://problem/10042073> Make CSS filters work on iOS

        Merge Open Source r109152

    2012-02-28  Dean Jackson  <dino@apple.com>

            https://bugs.webkit.org/show_bug.cgi?id=79824

            Unreviewed build fix for when ENABLE(CSS_FILTERS) is on
            but ENABLE(CSS_SHADERS) is off.

            * css/WebKitCSSFilterValue.cpp:
            (WebCore::WebKitCSSFilterValue::typeUsesSpaceSeparator):

2012-02-28  Tim Horton  <timothy_horton@apple.com>

        Build fix, don't build NEON-accelerated SVG filters on iOS.

        Reviewed by Dean Jackson.
        
        Re-enabling these is tracked by <rdar://problem/10948500>.

        No new tests.

        * platform/graphics/filters/FEComposite.cpp:
        (WebCore::FEComposite::platformArithmeticSoftware):
        * platform/graphics/filters/FEGaussianBlur.cpp:
        (WebCore::FEGaussianBlur::platformApplyWorker):
        (WebCore::FEGaussianBlur::platformApply):
        * platform/graphics/filters/FELighting.cpp:
        (WebCore::FELighting::platformApply):
        * platform/graphics/filters/arm/FECompositeArithmeticNEON.cpp:
        * platform/graphics/filters/arm/FECompositeArithmeticNEON.h:
        * platform/graphics/filters/arm/FEGaussianBlurNEON.cpp:
        * platform/graphics/filters/arm/FEGaussianBlurNEON.h:
        * platform/graphics/filters/arm/FELightingNEON.cpp:
        * platform/graphics/filters/arm/FELightingNEON.h:

2012-02-27  Tim Horton  <timothy_horton@apple.com>

        <rdar://problem/6136646> iOS: Enable SVG filters

        Reviewed by Dean Jackson.
        
        Enable SVG filters.

        No new tests. Tests will be unskipped in <rdar://problem/8987731>.

        * Configurations/FeatureDefines.xcconfig:

2012-02-27  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/10157865> overflow:hidden not respected around image maps in an element with accelerated scrolling

        Reviewed by Simon Fraser.

        Test: platform/iphone-simulator/iphone/scrolling/clipping-ancestor-with-accelerated-scrolling-ancestor.html

        In the presence of an accelerated-scrolling ancestor, we were failing to apply any ancestor clip
        from closer ancestors. The fix is to revert to using backgroundClipRect() in this case, but
        tell it to ignore clipping imposed by accelerated scrolling ancestors.

        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::calculateClipRects): Changed the interpretation of the RespectOverflowClipOrNot
        parameter. It now dictates only whether to respect overflow clip for accelerated overflow scroll.
        Other overflow clip is always respected.
        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::updateGraphicsLayerGeometry): Changed to use
        RenderLayer::backgroundClipRect() regardless of whether the compositing ancestor is an
        accelerated overflow section, telling it to ignore clipping from such ancestors.

2012-02-27  David Kilzer  <ddkilzer@apple.com>

        Better fix: <rdar://problem/10937097> Sundance10A249: QuickTimeBrowserPlugin-214 fails to build: broken by WebKit

        Reviewed by Pratik Solanki.

        Back out puzzlebox svn r1103694.

        * platform/graphics/mac/MediaPlayerProxy.h: Duplicate the
        OBJC_CLASS macro for the case where it's used by
        QuickTimeBrowserPlugin.  This also addresses the use of
        PLATFORM(IOS) since that is stripped out by scrub-ifdefs.pl in
        WebKit.

2012-02-27  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/10937097> Sundance10A249: QuickTimeBrowserPlugin-214 fails to build: broken by WebKit

        Reviewed by Pratik Solanki.

        * platform/graphics/mac/MediaPlayerProxy.h: Include
        <wtf/Compiler.h> since this is used by QuickTimeBrowserPlugin,
        which won't get the header included from <wtf/Platform.h> via
        WebCorePrefix.h.

2012-02-27  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/9707221> Positioned descendants are not rendered in accelerated overflow:scroll divs

        Reviewed by Simon Fraser.

        Accelerated overflow layers should not apply overflow to their background clip rect.

        * manual-tests/ios/child-layers-in-accelerated-overflow.html: Added.
        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::paintLayer): Tell backgroundClipRect() to ignore overflow clip is we
        are painting the contents of an accelerated overflow scroll layer.
        (WebCore::RenderLayer::updateClipRects): Added a RespectOverflowClipOrNot parameter, which
        is passed through to updateClipRects() and calculateClipRects().
        (WebCore::RenderLayer::calculateClipRects): Added a RespectOverflowClipOrNot paramerer and
        changed to apply overflow clip only if it is set to RespectOverflowClip.
        (WebCore::RenderLayer::parentClipRects): Added a RespectOverflowClipOrNot parameter, which
        is passed through to updateClipRects() and calculateClipRects().
        (WebCore::RenderLayer::backgroundClipRect): Added a RespectOverflowClipOrNot paramerer,
        which is passed throguh to parentClipRects().
        (WebCore::RenderLayer::calculateRects): Tell backgroundClipRect() to ignore overflow clip
        is dontClipToOverflow is set.
        * rendering/RenderLayer.h:

2012-02-24  Chris Marrin  <cmarrin@apple.com>

        Make requestAnimationFrame work on iOS (change CVDisplayLink to CADisplayLink)
        <rdar://problem/10406593>

        Add CADisplayLink support for iOS in DisplayRefreshMonitorMac.mm. Also adds DisplayRefreshMonitor
        files to build, since they were being skipped before.

        Reviewed by Dean Jackson.

        * WebCore.xcodeproj/project.pbxproj:
        * platform/graphics/DisplayRefreshMonitor.cpp:
        (WebCore::DisplayRefreshMonitor::DisplayRefreshMonitor):
        (WebCore):
        (WebCore::DisplayRefreshMonitor::refreshDisplay):
        (WebCore::DisplayRefreshMonitor::refreshDisplayOnMainThread):
        (WebCore::DisplayRefreshMonitor::notifyClients):
        (WebCore::DisplayRefreshMonitorManager::sharedManager):
        (WebCore::DisplayRefreshMonitorManager::findMonitor):
        * platform/graphics/DisplayRefreshMonitor.h:
        (WebCore::DisplayRefreshMonitor::removeClient):
        (DisplayRefreshMonitor):
        (WebCore::DisplayRefreshMonitor::displayID):
        (WebCore):
        (DisplayRefreshMonitorManager):
        * platform/graphics/mac/DisplayRefreshMonitorMac.mm:
        (-[WebDisplayLinkHandler initWithMonitor:WebCore::]):
        (-[WebDisplayLinkHandler dealloc]):
        (-[WebDisplayLinkHandler handleDisplayLink:]):
        (WebCore):
        (WebCore::displayLinkCallback):
        (WebCore::DisplayRefreshMonitor::~DisplayRefreshMonitor):
        (WebCore::DisplayRefreshMonitor::requestRefreshCallback):
        (WebCore::DisplayRefreshMonitor::displayLinkFired):

2012-02-23  Benjamin Poulain  <bpoulain@apple.com>

        Fix the Framework Dir config for AutoBots

        * Configurations/WebCore.xcconfig:

2012-02-24  David Kilzer  <ddkilzer@apple.com>

        Use xcrun to find compiler paths for Generate Derived Sources build phase script

        Merged ToT WebKit r108826.

    2012-02-24  David Kilzer  <ddkilzer@apple.com>

        Use xcrun to find compiler paths for Generate Derived Sources build phase script
        <http://webkit.org/b/79512>

        Reviewed by Mark Rowe.

        * WebCore.xcodeproj/project.pbxproj:
        (Generate Derived Sources): Use xcrun to find the path to the
        compiler since that works on both iOS and OS X.

2012-02-24  Chris Marrin  <cmarrin@apple.com>

        Merged ToT revision 103361
        Seems like part of this change was already merged (DisplayRefreshMonitor.cpp).
        This brings all DisplayRefreshMonitor related files up to ToT.

        * ChangeLog:
        * platform/graphics/DisplayRefreshMonitor.h:
        (WebCore::DisplayRefreshMonitor::removeClient):
        (DisplayRefreshMonitor):
        (WebCore::DisplayRefreshMonitor::displayID):
        * platform/graphics/mac/DisplayRefreshMonitorMac.mm:
        (WebCore):
        (WebCore::DisplayRefreshMonitor::displayLinkCallback):
        (WebCore::DisplayRefreshMonitor::~DisplayRefreshMonitor):
        (WebCore::DisplayRefreshMonitor::requestRefreshCallback):
        (WebCore::DisplayRefreshMonitor::displayLinkFired):

2012-02-24  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/10928182> onorientationchange should use JSWindowEventListener attribute not WindowEventListener

        Reviewed by Joseph Pecoraro.

        * html/HTMLFrameSetElement.idl:

2012-02-24  Chris Marrin  <cmarrin@apple.com>

        Get rid of duplicate code from previous bad merge of DisplayRefreshMonitor files,
        and rename DisplayRefreshMonitorMac.cpp to DisplayRefreshMonitorMac.mm in preparation
        for adding CADisplayLink logic.

        Unreviewed.

        * WebCore.xcodeproj/project.pbxproj:
        * platform/graphics/DisplayRefreshMonitor.cpp:
        * platform/graphics/DisplayRefreshMonitor.h:
        * platform/graphics/mac/DisplayRefreshMonitorMac.cpp: Removed.
        * platform/graphics/mac/DisplayRefreshMonitorMac.mm: Added.

2012-02-24  Chris Marrin  <cmarrin@apple.com>

        Fixed path for DisplayRefreshMonitor.cpp in project file.

        Unreviewed.

        * WebCore.xcodeproj/project.pbxproj:

2012-02-23  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/10847224> Sundance: '-webkit-overflow-scrolling: touch' only seems to function on first element on a page

        Reviewed by Sam Weinig.

        -webkit-overflow-scrolling is an inherited property, and worked as such most of the time.
        However, CSSProperty::isInheritedProperty() returned 'false', not 'true' for this property,
        causing problems with some content.
        
        Test: platform/iphone-simulator/iphone/scrolling/overflow-scroll-inherited.html

        * css/CSSProperty.cpp:
        (WebCore::CSSProperty::isInheritedProperty):

2012-02-23  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/10922718> REGRESSION (Merge3): Accelerated overflow sections don’t paint while scrolling

        The regression was introduced by merging TOT WebKit r104903. The PaintLayerPaintingOverflowContents
        paint flag does not exist in TOT, so that revision fails to account for it.

        Reviewed by Simon Fraser.

        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::paintLayerContents): Added a check for the
        PaintLayerPaintingOverflowContents paint flag. If it is set, then we do not check for
        intersection between the damage rect and the layer bounds (which, for accelerated overflow
        layers, are stale during scroll).

2012-02-22  Matt Lilek  <mrl@apple.com>

        <rdar://problem/10917206> Remove the NSMultibyteGlyphPacking enum from WAKAppKitStubs.h

        Patch by Ian Baird <ibaird@apple.com>, reviewed by me.

        * wak/WAKAppKitStubs.h:

2012-02-22  Benjamin Poulain  <bpoulain@apple.com>

        <rdar://problem/10913679> Stabilization: assertion problem in WebKitMutationObserver

        Reviewed by Joseph Pecoraro.

        The original ASSERT(isMainThread()) was done to ensure this code is never executed in Web Workers.

        In our case, the code can be executed either by the WebThread or the UIThread.

        * dom/WebKitMutationObserver.cpp:
        (WebCore::WebKitMutationObserver::enqueueMutationRecord):
        (WebCore::WebKitMutationObserver::deliverAllMutations):

2012-02-07  Benjamin Poulain  <bpoulain@apple.com>

        <rdar://problem/10603457> Stabilization: r103212 breaks autosizing SpecificiedLineHeight initialization

        Reviewed by Joseph Pecoraro.

        Before r103212, the property CSSPropertyLineHeight use to do the HANDLE_INHERIT_AND_INITIAL() of
        SpecifiedLineHeight. This was left off the merge.

        This patch adds the inherit and initial of SpecifiedLineHeight through the CSSStyleApplyProperty
        of CSSPropertyLineHeight.

        * css/CSSStyleApplyProperty.cpp:
        (WebCore::ApplyPropertyLineHeight::applyValue):

2012-02-07  Benjamin Poulain  <bpoulain@apple.com>

        <rdar://problem/10713313> Stabilization: Merge ToT WebKit r104903

        Reviewed by Simon Fraser.

        Add back the different computation of the clip rect for GraphicsLayerPaintBackground.

        The iOS specific code was removed in the merge of r104903. This patch adds the feature
        back by having the flag PaintLayerPaintingOverflowContents propagate the same check
        that use to be done on GraphicsLayerPaintOverflowContents in RenderLayerBacking.

        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::paintLayerContents):
        * rendering/RenderLayer.h:
        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::paintIntoLayer):

2012-02-07  Benjamin Poulain  <bpoulain@apple.com>

        <rdar://problem/10702920> Stabilization: check after Merge ToT WebKit r104782

        Reviewed by Joseph Pecoraro.
        Reviewed by Simon Fraser.

        The merge of r104782 was incorrect.
        After r104782, the offset of the clip is done before RenderLayerBacking::paintContents() is
        invoked, in GraphicsLayer::paintGraphicsLayerContents().

        By keeping the old iOS code, we translated the clip twice.

        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::paintContents):

2012-01-31  Benjamin Poulain  <bpoulain@apple.com>

        <rdar://problem/10599922> Stabilization: clean PlatformTouchEvent.h

        Reviewed by a sad, sad Sam Weinig.

        The class PlatformTouchEvent has nothing in common between iOS and OpenSource WebKit.
        In the past, merging the two has been done by discarding anything from OpenSource.

        This patch moves PlatformTouchEvent.h to PlatformTouchEventIOS.h, and restore
        PlatformTouchEvent.h to the unmodified version from ToT WebKit.

        This will simplify future merge and clarify what PlatformTouchEvent is in iOS.

        * WebCore.xcodeproj/project.pbxproj:
        * dom/TouchEvent.cpp:
        * page/EventHandler.cpp:
        * page/ios/EventHandlerIOSTouch.cpp:
        * platform/PlatformTouchEvent.h:
        (WebCore::PlatformTouchEvent::PlatformTouchEvent):
        (PlatformTouchEvent):
        (WebCore::PlatformTouchEvent::touchPoints):
        * platform/ios/PlatformEventFactoryIOS.h:
        * platform/ios/PlatformTouchEventIOS.h: Copied from Source/WebCore/platform/PlatformTouchEvent.h.
        (WebCore):
        (): 
        (PlatformTouchEvent):
        (WebCore::PlatformTouchEvent::PlatformTouchEvent):
        (WebCore::PlatformTouchEvent::touchCount):
        (WebCore::PlatformTouchEvent::touchLocationAtIndex):
        (WebCore::PlatformTouchEvent::globalTouchLocationAtIndex):
        (WebCore::PlatformTouchEvent::touchIdentifierAtIndex):
        (WebCore::PlatformTouchEvent::touchPhaseAtIndex):
        (WebCore::PlatformTouchEvent::isGesture):
        (WebCore::PlatformTouchEvent::scale):
        (WebCore::PlatformTouchEvent::rotation):
        (WebCore::PlatformTouchEvent::pos):
        (WebCore::PlatformTouchEvent::x):
        (WebCore::PlatformTouchEvent::y):
        (WebCore::PlatformTouchEvent::globalX):
        (WebCore::PlatformTouchEvent::globalY):
        * platform/ios/ScrollAnimatorIOS.mm:

2012-02-22  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/9897420> Telluride9A289: Blurry website when zoomed in under memory pressure (because of position:fixed)
    
        Reviewed by Sam Weinig.

        Remove the code that reduces the contentsScale of compositing
        layers under memory pressure. We decided that it's better
        to maintain rendering quality.

        * platform/graphics/ca/GraphicsLayerCA.cpp:
        (WebCore::GraphicsLayerCA::updateContentsScale):

2012-02-22  Chris Fleizach  <cfleizach@apple.com>

        <rdar://problem/10025735> AXRuntime framework referenced in WebKit but is not available in NonUI SDK

        Don't link AXRuntime. We can instead retrieve the values for the AXTrait constants dynamically.

        Reviewed by David Kilzer.       

        * accessibility/ios/AccessibilityObjectWrapperIOS.mm:
        (-[WebAccessibilityObjectWrapper _accessibilityTraitsFromAncestors]):
        (-[WebAccessibilityObjectWrapper accessibilityTraits]):

2012-02-07  Benjamin Poulain  <bpoulain@apple.com>

        <rdar://problem/10603457> Stabilization: r103212 breaks autosizing SpecificiedLineHeight initialization

        Reviewed by Joseph Pecoraro.

        Before r103212, the property CSSPropertyLineHeight use to do the HANDLE_INHERIT_AND_INITIAL() of
        SpecifiedLineHeight. This was left off the merge.

        This patch adds the inherit and initial of SpecifiedLineHeight through the CSSStyleApplyProperty
        of CSSPropertyLineHeight.

        * css/CSSStyleApplyProperty.cpp:
        (WebCore::ApplyPropertyLineHeight::applyValue):

2012-02-07  Benjamin Poulain  <bpoulain@apple.com>

        <rdar://problem/10713313> Stabilization: Merge ToT WebKit r104903

        Reviewed by Simon Fraser.

        Add back the different computation of the clip rect for GraphicsLayerPaintBackground.

        The iOS specific code was removed in the merge of r104903. This patch adds the feature
        back by having the flag PaintLayerPaintingOverflowContents propagate the same check
        that use to be done on GraphicsLayerPaintOverflowContents in RenderLayerBacking.

        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::paintLayerContents):
        * rendering/RenderLayer.h:
        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::paintIntoLayer):

2012-02-07  Benjamin Poulain  <bpoulain@apple.com>

        <rdar://problem/10702920> Stabilization: check after Merge ToT WebKit r104782

        Reviewed by Joseph Pecoraro.
        Reviewed by Simon Fraser.

        The merge of r104782 was incorrect.
        After r104782, the offset of the clip is done before RenderLayerBacking::paintContents() is
        invoked, in GraphicsLayer::paintGraphicsLayerContents().

        By keeping the old iOS code, we translated the clip twice.

        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::paintContents):

2012-01-31  Benjamin Poulain  <bpoulain@apple.com>

        <rdar://problem/10599922> Stabilization: clean PlatformTouchEvent.h

        Reviewed by a sad, sad Sam Weinig.

        The class PlatformTouchEvent has nothing in common between iOS and OpenSource WebKit.
        In the past, merging the two has been done by discarding anything from OpenSource.

        This patch moves PlatformTouchEvent.h to PlatformTouchEventIOS.h, and restore
        PlatformTouchEvent.h to the unmodified version from ToT WebKit.

        This will simplify future merge and clarify what PlatformTouchEvent is in iOS.

        * WebCore.xcodeproj/project.pbxproj:
        * dom/TouchEvent.cpp:
        * page/EventHandler.cpp:
        * page/ios/EventHandlerIOSTouch.cpp:
        * platform/PlatformTouchEvent.h:
        (WebCore::PlatformTouchEvent::PlatformTouchEvent):
        (PlatformTouchEvent):
        (WebCore::PlatformTouchEvent::touchPoints):
        * platform/ios/PlatformEventFactoryIOS.h:
        * platform/ios/PlatformTouchEventIOS.h: Copied from Source/WebCore/platform/PlatformTouchEvent.h.
        (WebCore):
        (): 
        (PlatformTouchEvent):
        (WebCore::PlatformTouchEvent::PlatformTouchEvent):
        (WebCore::PlatformTouchEvent::touchCount):
        (WebCore::PlatformTouchEvent::touchLocationAtIndex):
        (WebCore::PlatformTouchEvent::globalTouchLocationAtIndex):
        (WebCore::PlatformTouchEvent::touchIdentifierAtIndex):
        (WebCore::PlatformTouchEvent::touchPhaseAtIndex):
        (WebCore::PlatformTouchEvent::isGesture):
        (WebCore::PlatformTouchEvent::scale):
        (WebCore::PlatformTouchEvent::rotation):
        (WebCore::PlatformTouchEvent::pos):
        (WebCore::PlatformTouchEvent::x):
        (WebCore::PlatformTouchEvent::y):
        (WebCore::PlatformTouchEvent::globalX):
        (WebCore::PlatformTouchEvent::globalY):
        * platform/ios/ScrollAnimatorIOS.mm:

2012-02-21  Chris Fleizach  <cfleizach@apple.com>

        <rdar://problem/10073594> AX: VoiceOver speaks nothing for aria-invalid="true"

        Expose the property and notification that aria-invalid sets, for iOS.

        Reviewed by David Kilzer.

        Test is dependent on
        https://bugs.webkit.org/show_bug.cgi?id=79041

        * accessibility/ios/AXObjectCacheIOS.mm:
        (WebCore::AXObjectCache::postPlatformNotification):
        * accessibility/ios/AccessibilityObjectWrapperIOS.h:
        * accessibility/ios/AccessibilityObjectWrapperIOS.mm:
        (-[WebAccessibilityObjectWrapper postInvalidStatusChangedNotification]):
        (-[WebAccessibilityObjectWrapper accessibilityInvalidStatus]):

2012-02-20  Dan Bernstein  <mitz@apple.com>

        Updated Localizable.strings.

        Rubber-stamped by Joseph Pecoraro.

        * English.lproj/Localizable.strings:

2012-02-18  Joseph Pecoraro  <pecoraro@apple.com>

        <rdar://problem/10857617> Remote Inspector: Remove Download Frontend from Device Code

        No longer generate the inspector frontend archive. We also remove
        all iOS related resources from the old frontend. They will no
        longer be needed.

        Reviewed by Timothy Hatcher.

        * WebCore.xcodeproj/project.pbxproj:
        * inspector/front-end/ios/remote.js: Removed.
        * inspector/generate-inspector-html-with-extras: Removed.

2012-02-17  Chris Marrin  <cmarrin@apple.com>

        Merged TOT revision 97405
        As first step of <rdar://problem/10406593> Make requestAnimationFrame work on iOS (change CVDisplayLink to CADisplayLink)

2012-02-15  Jer Noble  <jer.noble@apple.com>

        <rdar://problem/10326923> Support HTML5 media synchronization through AVFoundation

        Merged ToT revisions 106978, 106996

    2012-02-07  Jer Noble  <jer.noble@apple.com>

            Unreviewed build fix; make OSStatus the explicit return type for CMTimebase functions.

            * platform/mac/PlatformClockCM.mm:

    2012-02-06  Jer Noble  <jer.noble@apple.com>

            Use CMClock as a timing source for PlatformClock where available.
            https://bugs.webkit.org/show_bug.cgi?id=77885

            Reviewed by Eric Carlson.

            No new tests; performance improvement covered by existing test cases.

            * WebCore.xcodeproj/project.pbxproj:
            * platform/Clock.cpp:
            (Clock::create): Use PlatformClockCM if available.
            * platform/mac/PlatformClockCM.h: Added.
            (WebCore::PlatformClockCM::playRate):
            (WebCore::PlatformClockCM::isRunning):
            * platform/mac/PlatformClockCM.mm: Added.
            (PlatformClockCM::PlatformClockCM):
            (PlatformClockCM::initializeWithTimingSource):
            (PlatformClockCM::setCurrentTime):
            (PlatformClockCM::currentTime):
            (PlatformClockCM::setPlayRate):
            (PlatformClockCM::start):
            (PlatformClockCM::stop):

2012-02-15  Matt Lilek  <mrl@apple.com>

        <rdar://problem/10866016> tokenizerForString() leaks the lang when the locale cannot be created

        Use a RetainPtr so we don't leak a CFStringRef in the early return case.

        Reviewed by Ian Henderson.

        * platform/text/mac/TextBoundaries.mm:
        (WebCore::tokenizerForString):

2012-02-13  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/10853544> Get ToT WebKit to compile on Hoodoo

        Reviewed by Scott Grant.

        * wak/WAKWindow.mm:
        (+[WAKWindow hasLandscapeOrientation]):

2012-02-13  Gavin Barraclough  <barraclough@apple.com>

        Merged TOT revision 106783

    2012-02-05  Gavin Barraclough  <barraclough@apple.com>
    
            Remove JSObject defineGetter/defineSetter lookupGetter/lookupSetter
            https://bugs.webkit.org/show_bug.cgi?id=77451
    
            Reviewed by Sam Weinig.
    
            These can now all be implemented in terms of defineOwnProperty & getPropertyDescriptor.
            Also remove initializeGetterSetterProperty, since this is equivalent to putDirectAccessor.
    
            * bindings/js/JSDOMWindowCustom.cpp:
            (WebCore):
            (WebCore::JSDOMWindow::defineOwnProperty):
            * bindings/js/JSDOMWindowShell.cpp:
            (WebCore):
            * bindings/js/JSDOMWindowShell.h:
            (JSDOMWindowShell):
            * bindings/js/JSLocationCustom.cpp:
            (WebCore::JSLocation::defineOwnProperty):
            (WebCore::JSLocationPrototype::defineOwnProperty):
            * bindings/scripts/CodeGeneratorJS.pm:
            (GenerateHeader):
            * page/DOMWindow.idl:
            * page/Location.idl:
    
2012-02-13  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/10637410> Investigate increasing inactive font data limit

        Reviewed by David Carson.

        Increase inactive font cache size limits back to Telluride levels for normal operation.
        However, when under memory pressure we use the current, more aggressive, font cache size
        limits to try to avoid any memory usage regressions from current Sundance behavior.

        In my traces, I saw 169ms (~0.84%) of WebCore thread CPU time and 165ms (~6.2%) of main
        thread time spent in this function for the full PLT2 run. This change gets rid of that time
        completely.

        * platform/graphics/FontCache.cpp:

2012-02-10  Benjamin Poulain  <bpoulain@apple.com>

        Change %lu to %zu for correctness of the string format specifier

        Unreviewed.

        Darin mentioned %zu is the correct specifier for size_t.

        * platform/DefaultLocalizationStrategy.cpp:
        (WebCore::DefaultLocalizationStrategy::htmlSelectMultipleItems):

2012-02-09  Benjamin Poulain  <bpoulain@apple.com>

        Change the type of htmlSelectMultipleItems's argument to size_t

        Reviewed by Adele Peterson.

        The type "int" for the argument of htmlSelectMultipleItems is inconsistent. The number
        is originally a size_t, we do not need to support negative values.

        * platform/DefaultLocalizationStrategy.cpp:
        (WebCore::DefaultLocalizationStrategy::htmlSelectMultipleItems):
        * platform/DefaultLocalizationStrategy.h:
        * platform/LocalizationStrategy.h:
        * platform/LocalizedStrings.h:
        * platform/ios/LocalizedStringsIOS.mm:
        (WebCore::htmlSelectMultipleItems):

2012-02-09  Joseph Pecoraro  <pecoraro@apple.com>

        Revert r1099338 because it breaks clean builds.

        Unreviewed Build Fix.

        * dom/DocumentIOS.idl:

2012-02-09  Joseph Pecoraro  <pecoraro@apple.com>

        <rdar://problem/10833682> Document::createTouchList() doesn't list its support for a varying number of Touch arguments

        This has worked since the feature was originally added in iOS WebKit:
        r42975 = <rdar://problem/5747289> Need to specify/implement document.createTouchList

        The original radar asked how we could syntactically describe variadic
        argument lists. That may not have been defined yet in WebIDL, but it is
        defined now and we can add that to improve the documentation.

        Reviewed by Dean Jackson.

        The iOS LayoutTests for document.createTouchList are broken for multiple
        reasons, and fixing them is covered by: <rdar://problem/10836514>. However,
        I tested createTouchList with multiple touches after this change and it
        continued to work as expected. The generated code did not change.

        * dom/DocumentIOS.idl:

2012-02-06  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/10462857> PEP Web: don't put page into page cache if memory is low.

        Reviewed by Ian Henderson.

        When we start loading a new page, if system memory is low, we shouldn't put the previous page into page cache.
        In addition, we could also prune some existing cached pages to release more memory.  During the test, it looks
        like evicting half of the cached pages gives us a good balance.

        iOS WebKit also inherited the algorithm of determining page cache capacity from Mac OS X, but it seems to be too
        aggressive for devices with limited memory.  This patch reduces page cache capacity by 1 for iOS.

        When page cache prunes pages, it doesn't delete them immediately.  Instead, it kicks off a timer and deletes those
        pages after 3 seconds, so the memory they occupy won't be immediately available.  The patch fixes this behavior
        by deleting pages immediately on memory pressure.

        * history/PageCache.cpp:
        (WebCore::PageCache::canCache):
        (WebCore::PageCache::pruneToCapacityNow):
        (WebCore::PageCache::releaseAutoreleasedPagesNow):
        * history/PageCache.h:

2012-02-03  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/10352073> Floating image leaves hole in previous column when wrapped to next column

	 Merged TOT WebKit r106673.

    2012-02-03  Dan Bernstein  <mitz@apple.com>

        Floating image leaves hole in previous column when wrapped to next column
        https://bugs.webkit.org/show_bug.cgi?id=77694

        Reviewed by Darin Adler.

        Tests: fast/dynamic/float-moved-downwards-for-pagination-expected.html
               fast/dynamic/float-moved-downwards-for-pagination.html

        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::clearFloats): When determining which lines to dirty,
        also check for changes to the top edge of the float, which can happen when
        float gets pushed down by a pagination strut.

2012-02-01  Dan Bernstein  <mitz@apple.com>

        Part of <rdar://problem/10117031> WebKit should support screen based pagination

        Merged TOT WebKit r106511.

    2012-02-01  Dan Bernstein  <mitz@apple.com>

        WebCore part of <rdar://problem/10442663> Paginated display does not respect page-break-{before,after}
        https://bugs.webkit.org/show_bug.cgi?id=77505

        Reviewed by Darin Adler.

        * page/Page.h:
        (WebCore::Page::Pagination::Pagination): Added initializer for the behavesLikeColumns member
        variable.
        (WebCore::Page::Pagination::operator==): Added comparison of behavesLikeColumns values.
        (Pagination): Added behavesLikeColumns member variable. When set to false (the default),
        paginated display respects the page-break-{before,after} properties rather than the
        column-break-{before,after} ones.
        * rendering/ColumnInfo.h:
        (WebCore::ColumnInfo::ColumnInfo): Added initializer for the m_paginationUnit member.
        (WebCore::ColumnInfo::paginationUnit): Added this getter.
        (WebCore::ColumnInfo::setPaginationUnit): Added this setter.
        (ColumnInfo): Added m_paginationUnit member. It defaults to Column.
        * rendering/LayoutState.h:
        (WebCore::LayoutState::isPaginatingColumns): Changed to check the pagination unit.
        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::layoutBlock): Added code to set the pagination unit in the ColumnInfo.
        (WebCore::RenderBlock::paginationUnit): Added. The base class implementation returns Column.
        * rendering/RenderBlock.h:
        * rendering/RenderView.cpp:
        (WebCore::RenderView::paginationUnit): Added this override that returns Page, unless
        this is the RenderView for the main frame and pagination is set to behave like columns.
        * rendering/RenderView.h:

2012-01-31  Mark Hahnenberg  <mhahnenberg@apple.com>

        Merged ToT WebKit r105442

    2012-01-19  Mark Hahnenberg  <mhahnenberg@apple.com> 

        Implement a new allocator for backing stores 
        https://bugs.webkit.org/show_bug.cgi?id=75181 

        Reviewed by Filip Pizlo.

        No new tests.

        Added forwarding header for new CheckedBoolean used in the bump allocator.

        * ForwardingHeaders/wtf/CheckedBoolean.h: Added.

2012-01-31  Michael Saboff  <msaboff@apple.com>

        Merged TOT revisions: 106253 & 106254.

    2012-01-30  Michael Saboff  <msaboff@apple.com>

        Dromaeo tests call parseSimpleLengthValue() on 8 bit strings
        https://bugs.webkit.org/show_bug.cgi?id=76649

        Reviewed by Geoffrey Garen.

        No functionality change, therefore no new tests.

        Added 8 bit patch for parseSimpleLengthValue().

        * css/CSSParser.cpp:
        (WebCore::parseSimpleLengthValue):

    2012-01-30  Michael Saboff  <msaboff@apple.com>

        WebCore decodeEscapeSequences unnecessarily converts 8 bit strings to 16 bit when decoding.
        https://bugs.webkit.org/show_bug.cgi?id=76648

        Reviewed by Geoffrey Garen.

        Using new overloaded append(String&, offset, length)  member to build result string.
        The new member properly handles 8/16 bit-ness of strings.

        Functionality not changed, therefore no new tests.

        * platform/text/DecodeEscapeSequences.h:
        (WebCore::decodeEscapeSequences):

2012-01-27  Gavin Barraclough  <barraclough@apple.com>

        Merged ToT WebKit r104899.

    2012-01-12  Gavin Barraclough  <barraclough@apple.com>

            Clean up putDirect (part 2)
            https://bugs.webkit.org/show_bug.cgi?id=76232

            Reviewed by Sam Weinig.

            Rename putWithAttributes to putDirectVirtual.

            * bindings/js/JSDOMWindowShell.cpp:
            (WebCore::JSDOMWindowShell::putDirectVirtual):
            * bindings/js/JSDOMWindowShell.h:

2012-01-24  Joseph Pecoraro  <pecoraro@apple.com>

        <rdar://problem/10708253> Remote Inspector: Inject InspectorFrontendHost object

        With a native InspectorFrontendHost object injected in
        RemoteWebInspector.framework, we won't need the workaround
        for its older WebScriptObject and WebInspector.socket.

        Reviewed by David Carson.

        * inspector/front-end/ios/remote.js:

2012-01-28  Joseph Pecoraro  <pecoraro@apple.com>

        <rdar://problem/10763091> File Upload: Change <input type="file"> width to better suit iOS

        Up the width by a few characters. This takes the
        file input from 211px wide by default to 235px.
        This also gives equal white space on both sides
        of the thumbnail icons.

        Reviewed by David Carson.

        * rendering/RenderFileUploadControl.cpp:

2012-01-28  Joseph Pecoraro  <pecoraro@apple.com>

        <rdar://problem/10763072> File Upload: Change button text to better suit iOS

        Added choose media file localization string variants.
        These refer to new "Choose Media (Single)" and
        "Choose Media (Multiple)" localization strings.
        Likewise for "no media selected".

        Reviewed by David Carson.

        * English.lproj/Localizable.strings:
        * platform/DefaultLocalizationStrategy.cpp:
        (WebCore::DefaultLocalizationStrategy::fileButtonChooseMediaFileLabel):
        (WebCore::DefaultLocalizationStrategy::fileButtonChooseMultipleMediaFilesLabel):
        (WebCore::DefaultLocalizationStrategy::fileButtonNoMediaFileSelectedLabel):
        (WebCore::DefaultLocalizationStrategy::fileButtonNoMediaFilesSelectedLabel):
        * platform/DefaultLocalizationStrategy.h:
        * platform/LocalizationStrategy.h:
        * platform/ios/LocalizedStringsIOS.mm:
        (WebCore::fileButtonChooseFileLabel):
        (WebCore::fileButtonChooseMultipleFilesLabel):
        (WebCore::fileButtonNoFileSelectedLabel):
        (WebCore::fileButtonNoFilesSelectedLabel):

2012-01-27  Dan Bernstein  <mitz@apple.com>

        WebCore part of trying to fix bugs like <rdar://problem/10734035> Inferno LCDTest crashed and the unit in spinning mode with HoodooYabuli9B3149b

        Reviewed by Joseph Pecoraro.

        * WebCore.exp.in: Exported FontCache::getLastResortFallbackFont().

2012-01-27  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/8856934> Remove calls to Document::updateStyleForAllDocuments()

        Merged ToT WebKit r106043.

    2012-01-26  James Robinson  <jamesr@chromium.org>

        We shouldn't synchronously update styles on all documents after running script
        https://bugs.webkit.org/show_bug.cgi?id=46761

        Reviewed by Simon Fraser.

        Currently we call Document::updateStyleForAllDocuments() after invoking any event or timeout handler. This is
        slow since it iterates over the entire document tree and defeats our recalcStyle timer batching. It is
        unnecessary as any code that depends on styles or the render tree being up to date must call
        updateStyleIfNeeded() on the document it is accessing.

        The first reference I can find to this code is in r798 in the file WebCore/khtml/xml/domnode_impl.cpp. It's been
        cargo culted forward ever since.

        * bindings/ScriptControllerBase.cpp:
        (WebCore::ScriptController::executeScript):
        * bindings/js/ScheduledAction.cpp:
        (WebCore::ScheduledAction::execute):
        * bindings/js/ScriptController.cpp:
        (WebCore::ScriptController::ScriptController):
        (WebCore::ScriptController::executeScriptInWorld):
        * bindings/js/ScriptController.h:
        * bindings/v8/ScheduledAction.cpp:
        (WebCore::ScheduledAction::execute):
        * bindings/v8/ScriptController.cpp:
        (WebCore::ScriptController::ScriptController):
        * bindings/v8/ScriptController.h:
        * dom/ScriptElement.cpp:
        (WebCore::ScriptElement::executeScript):
        * inspector/InspectorClient.cpp:
        (WebCore::InspectorClient::doDispatchMessageOnFrontendPage):

2012-01-27  Joseph Pecoraro  <pecoraro@apple.com>

        <rdar://problem/10245334> Sub-TLF: <input type="file"> On-Page UI

        Cleanup drawing code and move it to RenderTheme.
        Use the input's button styles (input::-webkit-file-upload-button)
        when drawing the thumbnail icons.

        Reviewed by Benjamin Poulain.

        * rendering/RenderFileUploadControl.cpp:
        (WebCore::RenderFileUploadControl::paintObject):
        * rendering/RenderTheme.h:
        (WebCore::RenderTheme::paintFileUploadIconDecorations):
        * rendering/RenderThemeIOS.cpp:
        (WebCore::RenderThemeIOS::paintFileUploadIconDecorations):
        * rendering/RenderThemeIOS.h:

2012-01-27  Joseph Pecoraro  <pecoraro@apple.com>

        <rdar://problem/10245334> Sub-TLF: <input type="file"> On-Page UI

        Expand chooseMediaFiles to also take an icon. The file chooser
        delegate can then use that Icon instead of requesting an icon
        from the chrome client.

        Draw thumbnail images for File Upload content. This will be
        cleaned up in the next patch.

        Reviewed by David Carson.

        * WebCore.exp.in:
        Updated FileChooser symbol.

        * platform/FileChooser.cpp:
        (WebCore::FileChooser::chooseMediaFiles):
        * platform/FileChooser.h:
        Add Icon parameter to the incoming chooseMediaFiles call
        and outgoing filesChosen call.

        * html/FileInputType.cpp:
        (WebCore::FileInputType::filesChosen):
        * html/FileInputType.h:
        Update as we normally would when we get an Icon.

        * platform/graphics/Icon.h:
        * platform/graphics/ios/IconIOS.mm:
        (WebCore::Icon::createIconForFiles):
        (WebCore::Icon::createIconForImage):
        iOS implementation using CGImageRefs.

        * rendering/RenderFileUploadControl.cpp:
        (WebCore::nodeHeight):
        (WebCore::RenderFileUploadControl::maxFilenameWidth):
        (WebCore::RenderFileUploadControl::paintObject):
        Draw the thumbnail icon with rounded rect picture frame borders.

2012-01-27  Joseph Pecoraro  <pecoraro@apple.com>

        <rdar://problem/10245334> Sub-TLF: <input type="file"> On-Page UI

        Reviewed by David Kilzer.

        Add "displayString" property to HTMLInputElement and InputTypes.
        Like files and icon this is only used by the FileInputType.

        * WebCore.exp.in:
        Export new FileChooser symbol.

        * html/FileInputType.cpp:
        (WebCore::FileInputType::FileInputType):
        (WebCore::FileInputType::filesChosen):
        (WebCore::FileInputType::displayString):
        * html/FileInputType.h:
        * platform/FileChooser.cpp:
        (WebCore::FileChooser::chooseMediaFiles):
        * platform/FileChooser.h:
        Provide FileChooser capability that sets both
        the filelist and a display string.

        * html/InputType.cpp:
        (WebCore::InputType::displayString):
        * html/InputType.h:
        * html/HTMLInputElement.cpp:
        (WebCore::HTMLInputElement::displayString):
        * html/HTMLInputElement.h:
        Accessor for the file upload display string.
        This should only be accessed file file types.

        * rendering/RenderFileUploadControl.cpp:
        (WebCore::RenderFileUploadControl::fileTextValue):
        On iOS use the client provided display string
        for non-empty lists. Otherwise fallback to the
        default empty strings.

2012-01-27  Joseph Pecoraro  <pecoraro@apple.com>

        <rdar://problem/10245334> Sub-TLF: <input type="file"> On-Page UI

        Remove remaining iOS diffs from File Upload renderer. iOS has
        Icon.h we just never have an icon yet and things work just fine.

        Reviewed by Sam Weinig.

        * rendering/RenderFileUploadControl.cpp:
        (WebCore::RenderFileUploadControl::maxFilenameWidth):
        (WebCore::RenderFileUploadControl::paintObject):

2012-01-26  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/10092396> TLF: Safari should not jetsam across the top 1M sites (Tile cache)

        Reviewed by Ian Henderson.

        If we see memory pressure before creating tiles, we could remove non visible tiles, and force
        TileGrid to only create tiles for covering the visible rect.  This could help reduce the chances
        of being jettisoned when generating and painting tile layers.

        * platform/ios/TileCache.h:
        * platform/ios/TileCache.mm:
        (WebCore::TileCache::doLayoutTiles):
        (WebCore::TileCache::layoutTilesNow):
        (WebCore::TileCache::removeAllNonVisibleTiles):
        (WebCore::TileCache::removeAllNonVisibleTilesInternal):  make a non-lock version of removeAllVisibleTiles since
            we need to call it in TileGrid::createTilesOnActiveGrid and the lock is already taken.
        (WebCore::TileCache::tileCreationTimerFired):
        (WebCore::TileCache::createTilesOnActiveGrid): check memory pressure before generating tiles.
        (WebCore::TileCache::updateTilingMode):
        * platform/ios/TileGrid.mm:
        (WebCore::TileGrid::dropDistantTiles):
        (WebCore::TileGrid::calculateCoverRect): use minimum cover rect on memory pressure.
        * platform/ios/TileLayerPool.mm:
        (WebCore::TileLayerPool::addLayer): don't grow the TileLayerPool on memory pressure.

2012-01-26  Geoffrey Garen  <ggaren@apple.com>

        Merged ToT WebKit revisions: 105698; 105702; 105703; 105713; 105811.

    2012-01-24  Mario Sanchez Prada  <msanchez@igalia.com>

            Unreviewed build fix for GTK after r105698.

            * bindings/js/JSPeerConnectionCustom.cpp:
            (WebCore::JSPeerConnectionConstructor::constructJSPeerConnection):

    2012-01-24  Ilya Tikhonovsky  <loislo@chromium.org>

            Unreviewed build fix for GTK Debug build after r105698.

            * bindings/js/JSNavigatorCustom.cpp:
            (WebCore::JSNavigator::webkitGetUserMedia):

    2012-01-23  Geoffrey Garen  <ggaren@apple.com>

            JSValue::toString() should return a JSString* instead of a UString
            https://bugs.webkit.org/show_bug.cgi?id=76861

            Reviewed by Gavin Barraclough.

            Mechanical changes to call value() after calling toString(), to
            convert from "JS string" (JSString*) to "C++ string" (UString), since
            toString() no longer returns a "C++ string".

            * bindings/js/IDBBindingUtilities.cpp:
            (WebCore::createIDBKeyFromValue):
            * bindings/js/JSCSSStyleDeclarationCustom.cpp:
            (WebCore::JSCSSStyleDeclaration::getPropertyCSSValue):
            * bindings/js/JSClipboardCustom.cpp:
            (WebCore::JSClipboard::clearData):
            (WebCore::JSClipboard::getData):
            * bindings/js/JSCustomXPathNSResolver.cpp:
            (WebCore::JSCustomXPathNSResolver::lookupNamespaceURI):
            * bindings/js/JSDOMBinding.cpp:
            (WebCore::valueToStringWithNullCheck):
            (WebCore::valueToStringWithUndefinedOrNullCheck):
            (WebCore::reportException):
            * bindings/js/JSDOMFormDataCustom.cpp:
            (WebCore::JSDOMFormData::append):
            * bindings/js/JSDOMStringMapCustom.cpp:
            (WebCore::JSDOMStringMap::putDelegate):
            * bindings/js/JSDOMWindowCustom.cpp:
            (WebCore::JSDOMWindow::setLocation):
            (WebCore::JSDOMWindow::open):
            (WebCore::JSDOMWindow::addEventListener):
            (WebCore::JSDOMWindow::removeEventListener):
            * bindings/js/JSDeviceMotionEventCustom.cpp:
            (WebCore::JSDeviceMotionEvent::initDeviceMotionEvent):
            * bindings/js/JSDeviceOrientationEventCustom.cpp:
            (WebCore::JSDeviceOrientationEvent::initDeviceOrientationEvent):
            * bindings/js/JSDictionary.cpp:
            (WebCore::JSDictionary::convertValue):
            * bindings/js/JSDocumentCustom.cpp:
            (WebCore::JSDocument::setLocation):
            * bindings/js/JSEventListener.cpp:
            (WebCore::JSEventListener::handleEvent):
            * bindings/js/JSHTMLAllCollectionCustom.cpp:
            (WebCore::callHTMLAllCollection):
            (WebCore::JSHTMLAllCollection::item):
            (WebCore::JSHTMLAllCollection::namedItem):
            * bindings/js/JSHTMLCanvasElementCustom.cpp:
            (WebCore::JSHTMLCanvasElement::getContext):
            * bindings/js/JSHTMLCollectionCustom.cpp:
            (WebCore::JSHTMLCollection::item):
            (WebCore::JSHTMLCollection::namedItem):
            * bindings/js/JSHTMLDocumentCustom.cpp:
            (WebCore::documentWrite):
            * bindings/js/JSHTMLInputElementCustom.cpp:
            (WebCore::JSHTMLInputElement::setSelectionDirection):
            (WebCore::JSHTMLInputElement::setSelectionRange):
            * bindings/js/JSInspectorFrontendHostCustom.cpp:
            (WebCore::JSInspectorFrontendHost::showContextMenu):
            * bindings/js/JSJavaScriptCallFrameCustom.cpp:
            (WebCore::JSJavaScriptCallFrame::evaluate):
            * bindings/js/JSLocationCustom.cpp:
            (WebCore::JSLocation::setHref):
            (WebCore::JSLocation::setProtocol):
            (WebCore::JSLocation::setHost):
            (WebCore::JSLocation::setHostname):
            (WebCore::JSLocation::setPort):
            (WebCore::JSLocation::setPathname):
            (WebCore::JSLocation::setSearch):
            (WebCore::JSLocation::setHash):
            (WebCore::JSLocation::replace):
            (WebCore::JSLocation::assign):
            * bindings/js/JSMessageEventCustom.cpp:
            (WebCore::handleInitMessageEvent):
            * bindings/js/JSSQLTransactionCustom.cpp:
            (WebCore::JSSQLTransaction::executeSql):
            * bindings/js/JSSQLTransactionSyncCustom.cpp:
            (WebCore::JSSQLTransactionSync::executeSql):
            * bindings/js/JSSharedWorkerCustom.cpp:
            (WebCore::JSSharedWorkerConstructor::constructJSSharedWorker):
            * bindings/js/JSStorageCustom.cpp:
            (WebCore::JSStorage::putDelegate):
            * bindings/js/JSWebGLRenderingContextCustom.cpp:
            (WebCore::JSWebGLRenderingContext::getExtension):
            * bindings/js/JSWebSocketCustom.cpp:
            (WebCore::JSWebSocketConstructor::constructJSWebSocket):
            (WebCore::JSWebSocket::send):
            (WebCore::JSWebSocket::close):
            * bindings/js/JSWorkerContextCustom.cpp:
            (WebCore::JSWorkerContext::importScripts):
            * bindings/js/JSWorkerCustom.cpp:
            (WebCore::JSWorkerConstructor::constructJSWorker):
            * bindings/js/JSXMLHttpRequestCustom.cpp:
            (WebCore::JSXMLHttpRequest::open):
            (WebCore::JSXMLHttpRequest::send):
            * bindings/js/JSXSLTProcessorCustom.cpp:
            (WebCore::JSXSLTProcessor::setParameter):
            (WebCore::JSXSLTProcessor::getParameter):
            (WebCore::JSXSLTProcessor::removeParameter):
            * bindings/js/ScheduledAction.cpp:
            (WebCore::ScheduledAction::create):
            * bindings/js/ScriptEventListener.cpp:
            (WebCore::eventListenerHandlerBody):
            * bindings/js/ScriptValue.cpp:
            (WebCore::ScriptValue::toString):
            * bindings/scripts/CodeGeneratorJS.pm:
            (GenerateEventListenerCall):
            (JSValueToNative):
            (GenerateConstructorDefinition):
            * bridge/c/c_utility.cpp:
            (JSC::Bindings::convertValueToNPVariant):
            * bridge/jni/jni_jsobject.mm:
            (JavaJSObject::convertValueToJObject):
            * bridge/jni/jsc/JNIUtilityPrivate.cpp:
            (JSC::Bindings::convertArrayInstanceToJavaArray):
            (JSC::Bindings::convertValueToJValue):
            * bridge/jni/jsc/JavaFieldJSC.cpp:
            (JavaField::dispatchValueFromInstance):
            (JavaField::valueFromInstance):
            (JavaField::dispatchSetValueToInstance):
            (JavaField::setValueToInstance):
            * bridge/jni/jsc/JavaInstanceJSC.cpp:
            (JavaInstance::invokeMethod):
            * testing/js/JSInternalsCustom.cpp:
            (WebCore::JSInternals::setUserPreferredLanguages):

2012-01-26  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/10703398> REGRESSION: AdSheet crashing at +[WebCache addImageToCache:forURL:]

        Reviewed by Yongjun Zhang.

        Construct the newly added CachedImageClient class as the client. Otherwise we cast a
        CachedResourceClient* to a CachedImageClient* and crash.

        * loader/cache/CachedImage.cpp:
        (WebCore::CachedImageManual::CachedImageManual):
        * loader/cache/CachedResourceClient.h:

2012-01-24  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/10092396> TLF: Safari should not jetsam across the top 1M sites (Memory pressure logging)

        Add a new channel (MemoryPressure) to log memory pressure messages.

        Reviewed by Pratik Solanki and Ian Henderson.

        * platform/Logging.cpp:
        (WebCore::getChannelFromName):
        * platform/Logging.h:
        * platform/ios/MemoryPressureHandlerIOS.mm:
        (WebCore::MemoryPressureHandler::respondToMemoryPressureIfNeeded):
        * platform/mac/LoggingMac.mm:
        (WebCore::InitializeLoggingChannelsIfNecessary):
        * storage/DatabaseThread.cpp: use LOG_DISABLED since that is how debugTaskName() declared in DataBaseTask.h.

2012-01-23  Benjamin Poulain  <bpoulain@apple.com>

        <rdar://problem/10585653> Stabilization: r102619 adds pageCacheSupportsPlugins() is a cross port way

        Reviewed by Joseph Pecoraro.

        Remove the iOS specific #ifdef, use the pageCacheSupportsPlugins() introduced in r102619.

        * history/PageCache.cpp:
        (WebCore::logCanCacheFrameDecision):
        (WebCore::PageCache::canCachePageContainingThisFrame):

2012-01-20  Benjamin Poulain  <bpoulain@apple.com>

        Adopt RenderMenuList::multiple() from WebKit ToT
        <rdar://problem/10577278> Stabilization: clean Merge ToT WebKit r102419

        Reviewed by Yongjun Zhang.

        ToT WebKit r102419 introduced RenderMenuList::multiple() as a mandatory method.
        This method conflicts with the one we had in iOS.

        This patch attempts to bring us closer to ToT by using the multiple() defined
        for the other platforms, and get rid of our #ifdef when possible.

        RenderThemeIOS is modified to use the Element's attribute instead of
        the RenderObject. It is a common practice in RenderTheme and it will avoid
        more #ifdef in RenderMenuList.h.

        * platform/PopupMenuClient.h:
        (WebCore::PopupMenuClient::multiple):
        * rendering/RenderMenuList.cpp:
        (RenderMenuList::multiple):
        * rendering/RenderMenuList.h:
        * rendering/RenderThemeIOS.cpp:
        (WebCore::RenderThemeIOS::paintMenuListButtonDecorations):

2012-01-20  Benjamin Poulain  <bpoulain@apple.com>

        Make selectedOptionCount() local to RenderMenuList.cpp
        <rdar://problem/10577278> Stabilization: clean Merge ToT WebKit r102419

        Reviewed by Yongjun Zhang.

        Make selectedOptionCount() local to RenderMenuList.cpp to clean the header
        and avoid future conflicts.

        * rendering/RenderMenuList.cpp:
        (WebCore::RenderMenuList::multiple):
        (WebCore::selectedOptionCount):
        (WebCore::RenderMenuList::adjustInnerStyle):
        (RenderMenuList::setTextFromOption):
        * rendering/RenderMenuList.h:

2012-01-23  Benjamin Poulain  <bpoulain@apple.com>

        <rdar://problem/10585653> Stabilization: r102619 adds pageCacheSupportsPlugins() is a cross port way

        Reviewed by Joseph Pecoraro.

        Remove the iOS specific #ifdef, use the pageCacheSupportsPlugins() introduced in r102619.

        * history/PageCache.cpp:
        (WebCore::logCanCacheFrameDecision):
        (WebCore::PageCache::canCachePageContainingThisFrame):

2012-01-20  Benjamin Poulain  <bpoulain@apple.com>

        Adopt RenderMenuList::multiple() from WebKit ToT
        <rdar://problem/10577278> Stabilization: clean Merge ToT WebKit r102419

        Reviewed by Yongjun Zhang.

        ToT WebKit r102419 introduced RenderMenuList::multiple() as a mandatory method.
        This method conflicts with the one we had in iOS.

        This patch attempts to bring us closer to ToT by using the multiple() defined
        for the other platforms, and get rid of our #ifdef when possible.

        RenderThemeIOS is modified to use the Element's attribute instead of
        the RenderObject. It is a common practice in RenderTheme and it will avoid
        more #ifdef in RenderMenuList.h.

        * platform/PopupMenuClient.h:
        (WebCore::PopupMenuClient::multiple):
        * rendering/RenderMenuList.cpp:
        (RenderMenuList::multiple):
        * rendering/RenderMenuList.h:
        * rendering/RenderThemeIOS.cpp:
        (WebCore::RenderThemeIOS::paintMenuListButtonDecorations):

2012-01-20  Benjamin Poulain  <bpoulain@apple.com>

        Make selectedOptionCount() local to RenderMenuList.cpp
        <rdar://problem/10577278> Stabilization: clean Merge ToT WebKit r102419

        Reviewed by Yongjun Zhang.

        Make selectedOptionCount() local to RenderMenuList.cpp to clean the header
        and avoid future conflicts.

        * rendering/RenderMenuList.cpp:
        (WebCore::RenderMenuList::multiple):
        (WebCore::selectedOptionCount):
        (WebCore::RenderMenuList::adjustInnerStyle):
        (RenderMenuList::setTextFromOption):
        * rendering/RenderMenuList.h:

2012-01-20  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/10692589> REGRESSION: MobileSafari malloc zone keeps growing in K93 with 10A217.

        Merged ToT WebKit r100517, r103913 and r103915.

    2011-11-16  Sam Weinig  <sam@webkit.org>

            JS wrappers of DOM objects should have no-op constructors
            https://bugs.webkit.org/show_bug.cgi?id=72556

            Reviewed by Geoffrey Garen.

            Stop using a RefPtr to hold DOM objects contained by JavaScript
            wrappers and instead use a raw pointer. We were already releasing
            the underlying object before the destructor ran (via the finalizer)
            so the default behavior of destroying the RefPtr is always unnecessary
            busy work. 

            * bindings/js/JSCSSValueCustom.cpp:
            (WebCore::JSCSSValueOwner::finalize):
            * bindings/js/JSNodeCustom.cpp:
            (WebCore::JSNodeOwner::finalize):
            (WebCore::JSNode::visitChildren):
            Call releaseImpl() instead of clearImpl().

            * bindings/scripts/CodeGeneratorJS.pm:
            (GenerateHeader):
            Stop storing m_impl in a RefPtr and instead use a raw pointer. Switch
            clearImpl() to releaseImpl(), which explicitly derefs the pointer and
            clear it.

            (GenerateImplementation):
            Use leakPtr() to explicitly adopt the PassRefPtr into the raw pointer.
            Change default finalize to call releaseImpl() instead of clearImpl().

    2012-01-02  Sam Weinig  <sam@webkit.org>

            REGRESSION(r100517): We're leaking many, many DOM objects!
            https://bugs.webkit.org/show_bug.cgi?id=75451

            Reviewed by Mark Rowe.

            * bindings/scripts/CodeGeneratorJS.pm:
            Add a temporary workaround to the problem of handle finalizers
            not getting called by adding back the destructors (or rather
            their replacement, destroy() functions).

2012-01-22  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/10720867> Add a version of WebThreadCallDelegate that uses blocks

        Reviewed by Dan Bernstein and Ian Henderson.

        Add WebThreadRunOnMainThread that takes a block and executes it synchronously on the main
        thread. This method is identical in function to WebThreadCallDelegate except it takes a
        block instead of an NSInvocation.

        Tested this by updating [UIWebPlugInView reshape] to use this new API. Sample says that the
        time spent under that method reduced from 57ms to 13ms while scrolling on failblog.org even
        though the time spent under [UIWebPlugInView _reshapeOnMainThread] stayed roughly the same
        (10-11ms).  Nearly 66% of the time under [UIWebPlugInView reshape] was spent in
        WebThreadMakeNSInvocation and we get rid of that with this API.

        * WebCore.exp.in:
        * wak/WAKView.mm:
        (notificationCallback):
        * wak/WebCoreThread.mm:
        (SendDelegateMessage):
        (WebThreadRunOnMainThread):
        * wak/WebCoreThreadMessage.h:

12-01-20  Yongjun Zhang  <yongjun_zhang@apple.com>

        Reviewed by Benjamin Poulain.

        <rdar://problem/10092396> TLF: Safari should not jetsam across the top 1M sites (memory pressure hander)

        Implement iOS memory pressure handler.  The handler will update a flag (m_receivedMemoryPressure) when
        system sends us the memory pressure notification in global dispatch queue.  This make it possible
        to detect memory pressure if WebCore is busy inside a runloop when system issues the notification.

        When WebCore detects memory pressure, we can release some memory before entering functions (hot paths)
        that might take large memory, to reduce the chance of being jetsammed.  For now, we only schedule a
        runloop observer to release memory at runloop exit.  Future patches will attack the hot paths.

        MemoryPressureHandler needs to stay inside WebCore, since we will check the memory pressure flag on
        hot paths.  However, we would like to reuse _handleMemoryWarning function in WebView.  To fix this,
        the patch adds a releaseMemory block, which will be set at WebKit's initialization.

        * ChangeLog-PEP:
        * WebCore.exp.in:
        * WebCore.xcodeproj/project.pbxproj:
        * platform/MemoryPressureHandler.cpp:
        (WebCore::MemoryPressureHandler::MemoryPressureHandler):
        * platform/MemoryPressureHandler.h:
        * platform/ios/MemoryPressureHandlerIOS.mm: Added.
        (WebCore::respondToMemoryPressureCallback):
        (WebCore::MemoryPressureHandler::install):
        (WebCore::MemoryPressureHandler::setReceivedMemoryPressure):
        (WebCore::MemoryPressureHandler::hasReceivedMemoryPressure):
        (WebCore::MemoryPressureHandler::clearMemoryPressure):
        (WebCore::MemoryPressureHandler::respondToMemoryPressureIfNeeded):

2012-01-20  Joseph Pecoraro  <pecoraro@apple.com>

        <rdar://problem/9730006> Remove Remote Inspector "loaded" message handling after merging r90394

        Reviewed by David Carson.

        * inspector/front-end/ios/remote.js:

2012-01-17  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/10508332> REGRESSION: Link to an #anchor jumps to the wrong position

        Reviewed by Joseph Pecoraro.

        Fix a merge error.  In iOS, we should use actualVisibleContentRect() rather than visibleContentRect() when calculating
        the exposed rect in top frame.

        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::scrollRectToVisible):

2012-01-13  Dan Bernstein  <mitz@apple.com>

        Part of <rdar://problem/10504778> Sub-TLF: Implement WebKit support to draw rich text

        Reviewed by Dave Kilzer and Enrica Casucci.

        * WebCore.exp.in: Exported BidiContext::copyStackRemovingUnicodeEmbeddingContexts().

2012-01-12  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/10670958> WebKit: make MemoryPressureHandler::respondToMemoryPressure shareable.

        Merged ToT WebKit r104873.

    2012-01-12  Yongjun Zhang  <yongjun_zhang@apple.com>

            Reviewed by Benjamin Poulain.

            https://bugs.webkit.org/show_bug.cgi?id=75991
            Make the code in MemoryPressureHandler::respondToMemoryPressure shareable.

            Move memory pressure handling code inside a new function (releaseMemory) so that
            we could shared it between mac and iOS.

            * Configurations/WebCore.xcconfig: add MemoryPressureHandlerMac.mm into iOS build.
            * platform/MemoryPressureHandler.h:
            * platform/mac/MemoryPressureHandlerMac.mm:
            (WebCore::MemoryPressureHandler::respondToMemoryPressure):
            (WebCore::MemoryPressureHandler::releaseMemory):

2012-01-12  Gavin Barraclough  <barraclough@apple.com>

        Merged ToT revisions 104602, 104604, 104611, 104620, 104777, 104784, 104836, 104871.

    2012-01-10  Gavin Barraclough  <barraclough@apple.com>
    
            Do not allow Array length to be set if it is non-configurable
            https://bugs.webkit.org/show_bug.cgi?id=75935
    
            Reviewed by Sam Weinig.
    
            * bindings/js/SerializedScriptValue.cpp:
            (WebCore::CloneDeserializer::deserialize):
                - remove unnecessary call to JSArray::setLength.

2012-01-11  Yongjun Zhang  <yongjun_zhang@apple.com>

        Reviewed by Benjamin Poulain.

        <rdar://problem/10567624> Safari is jetsam'd on N81 on the Grand Central retail store 360

        For devices with 256MB RAM, if the system memory is low, we could lower the image subsampling
        threshold value (from 2M pixels to 1M) to reduce the chance of being jetsammed.

        * platform/graphics/ImageSource.h:
        * platform/graphics/cg/ImageSourceCG.cpp:
        (WebCore::ImageSource::frameSizeAtIndex):
        (WebCore::ImageSource::shouldSubsampleImageWithSize):

2012-01-09  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/10551153> Perf regression on N88/N90 from Telluride

        Reviewed by Benjamin Poulain.

        Change the default interpolation to low quality. This is what QuartzCore was doing in
        Telluride even though we were asking for high quality interpolation. In Sundance, they
        started honoring the flag <rdar://problem/9793367>. Also add a new pref to control this -
        WebKitInterpolationQualityPreferenceKey.

        * wak/WAKView.h:
        * wak/WAKView.mm:
        (toCGInterpolationQuality):
        (+[WAKView _setInterpolationQuality:]):
        (-[WAKView _drawRect:context:lockFocus:]):

2012-01-09  Joseph Pecoraro  <pecoraro@apple.com>

        Let Xcode modify the project file, then sort it.

        Reviewed by Benjamin Poulain.

        * WebCore.xcodeproj/project.pbxproj:

2012-01-06  Benjamin Poulain  <bpoulain@apple.com>

        <rdar://problem/10657401> Remove EditCommand::updateLayout() for r102833

        Reviewed by David Carson.

        I missed the removal of updateLayout() when resolving the conflicts of merging r102833.

        * editing/EditCommand.h:

2012-01-06  Benjamin Poulain  <bpoulain@apple.com>

        <rdar://problem/10569888> Stabilization: double check the merging of WebKit r102225

        Reviewed by David Carson.

        After merging r102225, the last typing command was not public so the
        function TypingCommand::ensureLastEditCommandHasCurrentSelectionIfOpenForMoreTyping() was introduced
        to preserve the editing behavior on iOS.

        This patch cleans some of the hacks to reduce the scope of the changes needed for iOS.

        * WebCore.exp.in: Removed exported symbols for methods that no longer need to be exposed after r102225.
        * editing/EditCommand.h: Remove the iOS hacks for the header to make it easier to merge in the future.
        * editing/Editor.cpp: Fix a style issue.
        (WebCore::Editor::ensureLastEditCommandHasCurrentSelectionIfOpenForMoreTyping):
        * editing/TypingCommand.cpp:
        (WebCore::FriendlyEditCommand::setEndingSelection): Use the class FriendlyEditCommand to expose the needed
        method. This replace the change in the header of EditCommand.
        (WebCore::TypingCommand::setEndingSelectionOnLastInsertCommand):

2012-01-06  Benjamin Poulain  <bpoulain@apple.com>

        <rdar://problem/10657401> Remove EditCommand::updateLayout() for r102833

        Reviewed by David Carson.

        I missed the removal of updateLayout() when resolving the conflicts of merging r102833.

        * editing/EditCommand.h:

2012-01-06  Benjamin Poulain  <bpoulain@apple.com>

        <rdar://problem/10569888> Stabilization: double check the merging of WebKit r102225

        Reviewed by David Carson.

        After merging r102225, the last typing command was not public so the
        function TypingCommand::ensureLastEditCommandHasCurrentSelectionIfOpenForMoreTyping() was introduced
        to preserve the editing behavior on iOS.

        This patch cleans some of the hacks to reduce the scope of the changes needed for iOS.

        * WebCore.exp.in: Removed exported symbols for methods that no longer need to be exposed after r102225.
        * editing/EditCommand.h: Remove the iOS hacks for the header to make it easier to merge in the future.
        * editing/Editor.cpp: Fix a style issue.
        (WebCore::Editor::ensureLastEditCommandHasCurrentSelectionIfOpenForMoreTyping):
        * editing/TypingCommand.cpp:
        (WebCore::FriendlyEditCommand::setEndingSelection): Use the class FriendlyEditCommand to expose the needed
        method. This replace the change in the header of EditCommand.
        (WebCore::TypingCommand::setEndingSelectionOnLastInsertCommand):

2012-01-05  Michael Saboff  <msaboff@apple.com>

        Merged ToT WebKit JavaScriptCore Changes up to r104219

        This change includes merges from OpenSource from the following JavaScriptCore
        changes sets and corresponding changes in other parts of WebCore where needed.
        It also includes the proposed fix for bugzilla bug 75595.
        r100006 r100030 r100031 r100037 r100039 r100080 r100081 r100082 r100095 r100165
        r100166 r100167 r100168 r100171 r100175 r100195 r100197 r100200 r100202 r100205
        r100205 r100208 r100219 r100221 r100223 r100224 r100227 r100242 r100244 r100260
        r100310 r100314 r100315 r100320 r100363 r100375 r100385 r100391 r100405 r100412
        r100417 r100418 r100462 r100469 r100493 r100510 r100514 r100516 r100518 r100521
        r100523 r100527 r100537 r100540 r100544 r100556 r100672 r100729 r100810 r100820
        r100822 r100829 r100876 r100878 r100879 r100880 r100881 r100883 r100888 r100972
        r100975 r101042 r101054 r101147 r101148 r101151 r101152 r101186 r101187 r101217
        r101278 r101283 r101291 r101295 r101298 r101304 r101305 r101324 r101332 r101334
        r101426 r101443 r101447 r101448 r101450 r101457 r101473 r101521 r101528 r101539
        r101582 r101598 r101604 r101615 r101639 r101693 r101713 r101729 r101747 r101806
        r101886 r101910 r101942 r101945 r101946 r101964 r102011 r102017 r102028 r102038
        r102042 r102057 r102059 r102061 r102065 r102082 r102084 r102146 r102167 r102169
        r102179 r102182 r102194 r102200 r102220 r102261 r102293 r102295 r102298 r102302
        r102380 r102442 r102459 r102475 r102485 r102489 r102508 r102509 r102522 r102534
        r102545 r102546 r102547 r102549 r102550 r102623 r102629 r102631 r102692 r102694
        r102707 r102709 r102723 r102728 r102743 r102811 r102831 r102869 r102917 r102931
        r103023 r103028 r103083 r103127 r103144 r103202 r103218 r103243 r103287 r103292
        r103294 r103299 r103306 r103356 r103364 r103380 r103384 r103390 r103392 r103482
        r103522 r103587 r103594 r103598 r103599 r103604 r103626 r103636 r103637 r103641
        r103665 r103672 r103674 r103689 r103691 r103697 r103698 r103699 r103728 r103758
        r103792 r103818 r103823 r103887 r103921 r103922 r103924 r103926 r103958 r103960
        r103964 r103981 r104016 r104086 r104090 r104094 r104105 r104107 r104119 r104120
        r104184 r104212 r104219

2012-01-05  Benjamin Poulain  <bpoulain@apple.com>

        <rdar://problem/10576391> Stabilization: apply https://bugs.webkit.org/show_bug.cgi?id=74102 to the IOS fields

        Reviewed by David Kilzer.

        Yongjun packed the boolean attributes of BitmapImage in r102404.

        This patch removes 4 more bytes for iOS by packing the attribute m_progressiveLoadChunkCount with the booleans
        already packed.

        It is unlikely the number of chunks we receives overflow 16bits, and if that happened the only outcome
        would be more updates of the image.

        * platform/graphics/BitmapImage.cpp:
        (WebCore::BitmapImage::BitmapImage):
        (WebCore::BitmapImage::dataChanged):
        * platform/graphics/BitmapImage.h:

2012-01-05  Benjamin Poulain  <bpoulain@apple.com>

        <rdar://problem/10576391> Stabilization: apply https://bugs.webkit.org/show_bug.cgi?id=74102 to the IOS fields

        Reviewed by David Kilzer.

        Yongjun packed the boolean attributes of BitmapImage in r102404.

        This patch removes 4 more bytes for iOS by packing the attribute m_progressiveLoadChunkCount with the booleans
        already packed.

        It is unlikely the number of chunks we receives overflow 16bits, and if that happened the only outcome
        would be more updates of the image.

        * platform/graphics/BitmapImage.cpp:
        (WebCore::BitmapImage::BitmapImage):
        (WebCore::BitmapImage::dataChanged):
        * platform/graphics/BitmapImage.h:

2012-01-05  Enrica Casucci  <enrica@apple.com>

        <rdar://problem/10644693> WebKit should prefix the enumerations copied into WAKAppKitStubs.h

        Reviewed by David Kilzer.

        Move the enum WKWritingDirection from WebFrameIOS.h to WAKAppKitStubs.h where the
        NSWriting direction is being removed. This is temporary solution until Foundation
        supports NSWritingDirection.
        
        * editing/Editor.h: Changed NSWritingDirection to WKWritingDirection for platform IOS.
        * editing/ios/EditorIOS.mm: 
        (WebCore::Editor::baseWritingDirectionForSelectionStart): ditto.
        * wak/WAKAppKitStubs.h: Removed NSWritingDirection and added WKWritingDirection.

2012-01-03  Joseph Pecoraro  <pecoraro@apple.com>

        <rdar://problem/9322235> Remote Inspector: Switch Node Highlighting to Simple Layer Backgrounds + Borders

        For iOS to do highlighting with native layers and not
        GraphicsContexts we expose a method that fills a struct
        with highlighting information that the platform can
        use and highlight on its own.

        * WebCore.exp.in:
        Expose some functions to WebKit.

2012-01-03  Joseph Pecoraro  <pecoraro@apple.com>

        <rdar://problem/9322235> Remote Inspector: Switch Node Highlighting to Simple Layer Backgrounds + Borders

        Merged ToT WebKit r100395 and r103992.

    2012-01-03  Joseph Pecoraro  <pecoraro@apple.com>

            Web Inspector: Access to Node Highlighting info without drawing
            https://bugs.webkit.org/show_bug.cgi?id=75504

            Provide a "getHighlight" method alongside "drawHighlight" that
            gets most of the important node highlighting information. This
            can be used by a port to do its own node highlighting or provide
            extra content without interfering with the highlight rects.

            Reviewed by Timothy Hatcher.

            * WebCore.xcodeproj/project.pbxproj:
            Privately expose the Highlight struct in DOMNodeHighlighter.h.

            * inspector/DOMNodeHighlighter.cpp:
            (WebCore::DOMNodeHighlighter::drawHighlight):
            (WebCore::DOMNodeHighlighter::getHighlight):
            * inspector/DOMNodeHighlighter.h:
            Reuse the existing draw code to instead populate
            the Highlight struct with the information it is
            about to draw, and only draw if there is a context.

            * inspector/InspectorController.cpp:
            (WebCore::InspectorController::getHighlight):
            * inspector/InspectorController.h:
            * inspector/InspectorDOMAgent.cpp:
            (WebCore::InspectorDOMAgent::getHighlight):
            * inspector/InspectorDOMAgent.h:
            Get highlight information by going through getHighlight
            in InspectorController. This is alongside drawHighlight.

    2011-11-15  Joseph Pecoraro  <pecoraro@apple.com>

            Web Inspector: Share Highlight Code for Drawing Outlined Quad
            https://bugs.webkit.org/show_bug.cgi?id=72451

            Reviewed by Timothy Hatcher.

            * inspector/DOMNodeHighlighter.cpp:

2012-01-03  Benjamin Poulain  <bpoulain@apple.com>

        <rdar://problem/10638222> Stabilization: align iOS event creation with OS X

        Reviewed by NOBODY (OOPS!).

        The patch r103643 moves the creation of PlatformEvent outside of the event classes
        in order to remove the Mac specific code from the headers.

        This patch does the same for iOS. The creation of platform events is moved to
        the factory PlatformEventFactory in PlatformEventFactoryIOS.mm.

        * WebCore.exp.in:
        * WebCore.xcodeproj/project.pbxproj:
        * page/EventHandler.h:
        * page/ios/EventHandlerIOS.mm:
        (WebCore::EventHandler::wheelEvent):
        (WebCore::EventHandler::touchEvent):
        (WebCore::EventHandler::keyEvent):
        (WebCore::EventHandler::currentPlatformMouseEvent):
        * platform/PlatformKeyboardEvent.h:
        * platform/PlatformMouseEvent.h:
        * platform/PlatformTouchEvent.h:
        (WebCore::PlatformTouchEvent::PlatformTouchEvent):
        * platform/PlatformWheelEvent.h:
        * platform/ios/KeyEventIOS.mm:
        * platform/ios/PlatformEventFactoryIOS.h: Added.
        * platform/ios/PlatformEventFactoryIOS.mm: Added.
        (WebCore::modifiersForEvent):
        (WebCore::pointForEvent):
        (WebCore::globalPointForEvent):
        (WebCore::mouseEventType):
        (WebCore::PlatformMouseEventBuilder::PlatformMouseEventBuilder):
        (WebCore::PlatformEventFactory::createPlatformMouseEvent):
        (WebCore::PlatformWheelEventBuilder::PlatformWheelEventBuilder):
        (WebCore::PlatformEventFactory::createPlatformWheelEvent):
        (WebCore::keyIdentifierForKeyEvent):
        (WebCore::PlatformKeyboardEventBuilder::PlatformKeyboardEventBuilder):
        (WebCore::PlatformEventFactory::createPlatformKeyboardEvent):
        (WebCore::convertTouchPhase):
        (WebCore::touchEventType):
        (WebCore::PlatformTouchEventBuilder::PlatformTouchEventBuilder):
        (WebCore::PlatformEventFactory::createPlatformTouchEvent):
        * platform/ios/PlatformMouseEventIOS.mm: Removed.
        * platform/ios/PlatformTouchEventIOS.mm: Removed.
        * platform/ios/WheelEventIOS.mm: Removed.

2012-01-03  Benjamin Poulain  <bpoulain@apple.com>

        <rdar://problem/10638222> Stabilization: align iOS event creation with OS X

        Reviewed by NOBODY (OOPS!).

        The patch r103643 moves the creation of PlatformEvent outside of the event classes
        in order to remove the Mac specific code from the headers.

        This patch does the same for iOS. The creation of platform events is moved to
        the factory PlatformEventFactory in PlatformEventFactoryIOS.mm.

        * WebCore.exp.in:
        * WebCore.xcodeproj/project.pbxproj:
        * page/EventHandler.h:
        * page/ios/EventHandlerIOS.mm:
        (WebCore::EventHandler::wheelEvent):
        (WebCore::EventHandler::touchEvent):
        (WebCore::EventHandler::keyEvent):
        (WebCore::EventHandler::currentPlatformMouseEvent):
        * platform/PlatformKeyboardEvent.h:
        * platform/PlatformMouseEvent.h:
        * platform/PlatformTouchEvent.h:
        (WebCore::PlatformTouchEvent::PlatformTouchEvent):
        * platform/PlatformWheelEvent.h:
        * platform/ios/KeyEventIOS.mm:
        * platform/ios/PlatformEventFactoryIOS.h: Added.
        * platform/ios/PlatformEventFactoryIOS.mm: Added.
        (WebCore::modifiersForEvent):
        (WebCore::pointForEvent):
        (WebCore::globalPointForEvent):
        (WebCore::mouseEventType):
        (WebCore::PlatformMouseEventBuilder::PlatformMouseEventBuilder):
        (WebCore::PlatformEventFactory::createPlatformMouseEvent):
        (WebCore::PlatformWheelEventBuilder::PlatformWheelEventBuilder):
        (WebCore::PlatformEventFactory::createPlatformWheelEvent):
        (WebCore::keyIdentifierForKeyEvent):
        (WebCore::PlatformKeyboardEventBuilder::PlatformKeyboardEventBuilder):
        (WebCore::PlatformEventFactory::createPlatformKeyboardEvent):
        (WebCore::convertTouchPhase):
        (WebCore::touchEventType):
        (WebCore::PlatformTouchEventBuilder::PlatformTouchEventBuilder):
        (WebCore::PlatformEventFactory::createPlatformTouchEvent):
        * platform/ios/PlatformMouseEventIOS.mm: Removed.
        * platform/ios/PlatformTouchEventIOS.mm: Removed.
        * platform/ios/WheelEventIOS.mm: Removed.

2011-12-22  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/10426927> WebKit should move from UIOrientation to UIInterfaceOrientation

        Reviewed by Ian Henderson.

        Redo callback so we don't directly call [UIApplication orientation] and instead call into a
        class method on UIWebDocumentView which checks if we are in landscape mode.

        * wak/WAKWindow.mm:
        (+[WAKWindow setOrientationProvider:]):
        (+[WAKWindow hasLandscapeOrientation]):

2011-12-21  Ian Henderson  <ianh@apple.com>

        <rdar://problem/8378319> Clean up BrowserController methods for getting various frames - too many methods returning CGRect

        Reviewed by David Kilzer.

        Text autosizing only cares about the available width.  We have been
        setting the height incorrectly anyway.  Instead of providing a visible
        size, just pass the width into the autosizing code.

        * WebCore.exp.in:
        * page/Frame.h:
        * page/FrameView.cpp:
        (WebCore::FrameView::layout):
        * page/ios/FrameIOS.mm:
        (WebCore::Frame::textAutosizingWidth):
        (WebCore::Frame::setTextAutosizingWidth):

2011-12-21  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/10507353> PEP Web: PODIntervalTree takes 1.7 MB memory on nytimes.com.

        Merged ToT WebKit r103030.

    2011-12-15  Yongjun Zhang  <yongjun_zhang@apple.com>

            PODIntervalTree takes 1.7MB memory on www.nytimes.com.
            https://bugs.webkit.org/show_bug.cgi?id=73712

            Reviewed by Kenneth Russell.

            For a RenderBlock which has floating objects inside, we will create a PODIntervalTree and a PODArena with
            at least one 16KB chunk.  A page could have a large number of such RenderBlocks and they could take huge
            amount of memory.  To fix that, we can create a shared PODArena in the root RenderView.  Instead of having
            their own PODArena, each RenderBlock with floating objects could share this PODArena to reduce memory consumption.

            The shared PODArena could grow unboundedly if we keep removing and adding floating objects.  We can fix that
            by reusing the freed memory in each chunk.  However, a PODArena could allocate objects of different sizes and
            it would be complex to keep track of the size for each allocation in PODArena.  To address that, this patch
            added class PODFreeListArena<T> which only allocates objects of type T (hence the same size).  We can then use a
            free list to track freed nodes inside the chunk and reuse the free nodes in future allocations.

            Manually tested on nytimes.com and the heap consumption of PODIntervalTree reduced from 1.7MB to 16KB. Performance
            doesn't regress on test PerformanceTests/Layout/floats.html.

            * WebCore.xcodeproj/project.pbxproj: add new header file PODFreeListArena.h.
            * platform/PODArena.h:
            (WebCore::PODArena::~PODArena): change dtor to virtual.
            (WebCore::PODArena::Chunk::~Chunk): ditto.
            * platform/PODFreeListArena.h: Added.
            (WebCore::PODFreeListArena::create): 
            (WebCore::PODFreeListArena::allocateObject): allocate an object.
            (WebCore::PODFreeListArena::freeObject): free an object, find the right chunk and update its free list.
            (WebCore::PODFreeListArena::allocate): allocate memory from the free list or current chunk.
            (WebCore::PODFreeListArena::FreeListChunk::FreeListChunk): add m_freeList to track freed cells.
            (WebCore::PODFreeListArena::FreeListChunk::allocate): reuse a free cell if there is one.
            (WebCore::PODFreeListArena::FreeListChunk::free): make the memory taken by this object is free, and link it to m_freeList.
            (WebCore::PODFreeListArena::FreeListChunk::contains): check if a pointer is inside this chunk.
            (WebCore::PODFreeListArena::FreeListChunk::hasFreeList): check if this chunk has free cells.
            * platform/PODRedBlackTree.h:
            (WebCore::PODRedBlackTree::PODRedBlackTree): take PODFreeListArena instead of PODArena, since nodes of a particular PODRedBlackTree
                is always of the same size.
            (WebCore::PODRedBlackTree::clear): mark all nodes before clearing the tree.
            (WebCore::PODRedBlackTree::initIfNeeded): add initIfNeeded to take an external PODFreeListArena.
            (WebCore::PODRedBlackTree::add):
            (WebCore::PODRedBlackTree::deleteNode): mark the node free in arena after it is removed from the tree.
            (WebCore::PODRedBlackTree::markFree): mark all node free in the tree.
            * rendering/RenderBlock.cpp:
            (WebCore::RenderBlock::insertFloatingObject):
            (WebCore::RenderBlock::addOverhangingFloats):
            (WebCore::RenderBlock::addIntrudingFloats):
            (WebCore::RenderBlock::FloatingObjects::computePlacedFloatsTree):  passing the shared PODFreeListArena to m_placedFloatsTree.
            * rendering/RenderBlock.h:
            (WebCore::RenderBlock::FloatingObjects::FloatingObjects):
            * rendering/RenderView.cpp:
            (WebCore::RenderView::intervalArena): create the shared PODFreeListArena lazily.
            * rendering/RenderView.h:

2011-12-21  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/10300242> Crashes under WebCore::CSSStyleSelector::loadPendingImages

        Modified and merged ToT WebKit r103080.

    2011-12-21  Antti Koivisto  <antti@apple.com>

            https://bugs.webkit.org/show_bug.cgi?id=74677
            Count ResourceLoadScheduler suspends/resumes

            Reviewed by Andreas Kling.

            Using boolean is not robust when there are multiple clients calling suspendPendingRequests/resumePendingRequests.

            Increment and decrement suspend count instead of just setting/unsetting a boolean.

            * loader/ResourceLoadScheduler.cpp:
            (WebCore::ResourceLoadScheduler::ResourceLoadScheduler):
            (WebCore::ResourceLoadScheduler::servePendingRequests):
            (WebCore::ResourceLoadScheduler::suspendPendingRequests):
            (WebCore::ResourceLoadScheduler::resumePendingRequests):
            * loader/ResourceLoadScheduler.h:
            (WebCore::ResourceLoadScheduler::isSuspendingPendingRequests):

2011-12-18  Benjamin Poulain  <bpoulain@apple.com>

        Do not compile the TileCache from GraphicsLayer as the name conflics with iOS's tile cache

        Reviewed by NOBODY (OOPS!).

        Skip everything related to the TileCache because the name conflicts with iOS's TileCache.

        * Configurations/WebCore.xcconfig:
        * platform/graphics/ca/GraphicsLayerCA.cpp:
        (WebCore::GraphicsLayerCA::GraphicsLayerCA):
        (WebCore::GraphicsLayerCA::requiresTiledLayer):
        (WebCore::GraphicsLayerCA::swapFromOrToTiledLayer):
        * platform/graphics/ca/PlatformCALayer.h:
        * platform/graphics/ca/mac/PlatformCALayerMac.mm:
        (PlatformCALayer::PlatformCALayer):
        (PlatformCALayer::setContentsScale):

2011-12-18  Benjamin Poulain  <bpoulain@apple.com>

        De-virtualize iOS methods of for JSObjects

        Reviewed by NOBODY (OOPS!).

        Implement the virtual function through static methods.

        The method getConstructDataVirtual() is removed following r98203.

        * bindings/js/JSDOMWindowBase.cpp:
        (WebCore::JSDOMWindowBase::shouldInterruptScriptBeforeTimeout):
        * bindings/js/JSDOMWindowBase.h:
        * bindings/js/JSTouchConstructor.cpp:
        * bindings/js/JSTouchConstructor.h:
        * bindings/js/JSTouchListConstructor.cpp:
        * bindings/js/JSTouchListConstructor.h:

2011-12-18  Benjamin Poulain  <bpoulain@apple.com>

        Do not compile the TileCache from GraphicsLayer as the name conflics with iOS's tile cache

        Reviewed by NOBODY (OOPS!).

        Skip everything related to the TileCache because the name conflicts with iOS's TileCache.

        * Configurations/WebCore.xcconfig:
        * platform/graphics/ca/GraphicsLayerCA.cpp:
        (WebCore::GraphicsLayerCA::GraphicsLayerCA):
        (WebCore::GraphicsLayerCA::requiresTiledLayer):
        (WebCore::GraphicsLayerCA::swapFromOrToTiledLayer):
        * platform/graphics/ca/PlatformCALayer.h:
        * platform/graphics/ca/mac/PlatformCALayerMac.mm:
        (PlatformCALayer::PlatformCALayer):
        (PlatformCALayer::setContentsScale):

2011-12-18  Benjamin Poulain  <bpoulain@apple.com>

        De-virtualize iOS methods of for JSObjects

        Reviewed by NOBODY (OOPS!).

        Implement the virtual function through static methods.

        The method getConstructDataVirtual() is removed following r98203.

        * bindings/js/JSDOMWindowBase.cpp:
        (WebCore::JSDOMWindowBase::shouldInterruptScriptBeforeTimeout):
        * bindings/js/JSDOMWindowBase.h:
        * bindings/js/JSTouchConstructor.cpp:
        * bindings/js/JSTouchConstructor.h:
        * bindings/js/JSTouchListConstructor.cpp:
        * bindings/js/JSTouchListConstructor.h:

2011-12-17  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/10592365> Innsbruck11A6: REGRESSION: WebCore_Sim-1455 fails to build: tries to convert UInt32 as unsigned long

        Reviewed by David Carson.

        Fixes the following build failure:

            Source/WebCore/platform/audio/ios/AudioDestinationIOS.cpp:252:48:{252:46-252:49}{252:54-252:64}: error: conversion specifies type 'unsigned long' but the argument has type 'UInt32' (aka 'unsigned int') [-Werror,-Wformat,10]
                 fprintf(stderr, ">>>> frameSizeChanged = %lu\n", bufferSize);
                                                          ~~^     ~~~~~~~~~~
                                                          %u
            fix-it:"Source/WebCore/platform/audio/ios/AudioDestinationIOS.cpp":{252:46-252:49}:"%u"

        * platform/audio/ios/AudioDestinationIOS.cpp:
        (WebCore::AudioDestinationIOS::frameSizeChangedProc): On 32-bit
        architectures, CarbonCore/MacTypes.h defines UInt32 as unsigned
        long (64 bits), but on 64-bit architectures it's defined as
        unsigned int (32 bits).  To work around this insanity, we use a
        static_cast to make bufferSize an unsigned long value.

2011-12-13  Joseph Pecoraro  <pecoraro@apple.com>

        <rdar://problem/10577714> <input type="range"> is not painting thumb gradient when active

        Reviewed by Yongjun Zhang.

        Follow suit with OpenSource r88415 and allow drawing a slider thumb
        for any nodes. The shadow structure of <input type="range"> changed
        such that the old check was failing anyways.

        * rendering/RenderTheme.cpp:
        (WebCore::RenderTheme::paintDecorations):

2011-12-16  Joseph Pecoraro  <pecoraro@apple.com>

        Re-enable <input type="file">.

        Reviewed by Sam Weinig.

        * html/FileInputType.cpp:
        (WebCore::FileInputType::handleDOMActivateEvent):

2011-12-15  Dan Bernstein  <mitz@apple.com>

        Part of <rdar://problem/10117031> WebKit should support screen based pagination

        Merged TOT WebKit r101574.

    2011-11-30  Dan Bernstein  <mitz@apple.com>

        WebCore part of: Allow the length of a page along the pagination axis to differ from the length of the view
        https://bugs.webkit.org/show_bug.cgi?id=73476

        Reviewed by Anders Carlsson.

        * page/Page.cpp:
        (WebCore::Page::setPagination): Changed to use Pagination::operator==.
        * page/Page.h:
        (WebCore::Page::Pagination::Pagination): Added initializer for the new pageLength member variable.
        (WebCore::Page::Pagination::operator==): Added.
        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::layoutColumns): Narrowed the scope of a local variable.
        * rendering/RenderBlock.h: Promoted setDesiredColumnCountAndWidth() from private to protected,
        allowing its use from RenderView::calcColumnWidth(). Made calcColumnWidth() virtual.
        * rendering/RenderView.cpp:
        (WebCore::RenderView::calcColumnWidth): Added. Uses the page length specified in the pagination
        parameters to set the column width, if pages are to be laid out one next to the other.
        (WebCore::RenderView::viewLogicalHeight): Added. Uses the page length specified in the pagination
        parameters as the height, if pages are to be laid out one after the other.
        * rendering/RenderView.h:

2011-12-15  Dan Bernstein  <mitz@apple.com>

        Part of <rdar://problem/10117031> WebKit should support screen based pagination

        Merged TOT WebKit r100534.

    2011-11-16  Dan Bernstein  <mitz@apple.com>

        WebCore part of <rdar://problem/10262242> Add API for paginated display
        https://bugs.webkit.org/show_bug.cgi?id=72537

        Reviewed by Anders Carlsson.

        * WebCore.exp.in: Exported Page::pageCount().
        * page/Page.cpp:
        (WebCore::Page::pageCount): Added this getter.
        * page/Page.h:

2011-12-12  Benjamin Poulain  <bpoulain@apple.com>

        Merge r102368 from WebKit ToT.

    2011-12-08  Benjamin Poulain  <bpoulain@apple.com>

        Add a platform EventLoop for iOS
        https://bugs.webkit.org/show_bug.cgi?id=74043

        Reviewed by David Kilzer.

        * WebCore.xcodeproj/project.pbxproj:
        * platform/ios/EventLoopIOS.mm: Added.
        (WebCore::EventLoop::cycle):

2011-12-12  Benjamin Poulain  <bpoulain@apple.com>

        Merge WebKit ToT r102097. The only changes are the project files,
        this merge bring it closer to OpenSource WebKit.

    2011-12-05  Benjamin Poulain  <bpoulain@apple.com>

        Upstream the Cursor implementation of iOS
        https://bugs.webkit.org/show_bug.cgi?id=73724

        Reviewed by David Kilzer.

        iOS does not need to support the Cursor of WebKit. For compatibility, Cursor
        is implemented as an empty class on the platform.

        * Configurations/WebCore.xcconfig:
        * WebCore.xcodeproj/project.pbxproj:
        * platform/Cursor.h:
        (WebCore::Cursor::Cursor):
        * platform/ios/CursorIOS.cpp: Added.
        (WebCore::cursor):
        (WebCore::pointerCursor):
        (WebCore::crossCursor):
        (WebCore::handCursor):
        (WebCore::moveCursor):
        (WebCore::iBeamCursor):
        (WebCore::waitCursor):
        (WebCore::helpCursor):
        (WebCore::eastResizeCursor):
        (WebCore::northResizeCursor):
        (WebCore::northEastResizeCursor):
        (WebCore::northWestResizeCursor):
        (WebCore::southResizeCursor):
        (WebCore::southEastResizeCursor):
        (WebCore::southWestResizeCursor):
        (WebCore::westResizeCursor):
        (WebCore::northSouthResizeCursor):
        (WebCore::eastWestResizeCursor):
        (WebCore::northEastSouthWestResizeCursor):
        (WebCore::northWestSouthEastResizeCursor):
        (WebCore::columnResizeCursor):
        (WebCore::rowResizeCursor):
        (WebCore::middlePanningCursor):
        (WebCore::eastPanningCursor):
        (WebCore::northPanningCursor):
        (WebCore::northEastPanningCursor):
        (WebCore::northWestPanningCursor):
        (WebCore::southPanningCursor):
        (WebCore::southEastPanningCursor):
        (WebCore::southWestPanningCursor):
        (WebCore::westPanningCursor):
        (WebCore::verticalTextCursor):
        (WebCore::cellCursor):
        (WebCore::contextMenuCursor):
        (WebCore::noDropCursor):
        (WebCore::notAllowedCursor):
        (WebCore::progressCursor):
        (WebCore::aliasCursor):
        (WebCore::zoomInCursor):
        (WebCore::zoomOutCursor):
        (WebCore::copyCursor):
        (WebCore::noneCursor):
        (WebCore::grabCursor):
        (WebCore::grabbingCursor):
        (WebCore::determineHotSpot):

2011-12-10  Benjamin Poulain  <bpoulain@apple.com>

        Remove a useless !PLATFORM(IOS)

        Reviewed by David Kilzer.

        BUILDING_ON_LEOPARD and BUILDING_ON_SNOW_LEOPARD should never be defined when building iOS.

        This check comes from r717727 when __COCOA_FORMAL_PROTOCOLS_2__ was removed.

        * platform/mac/EmptyProtocolDefinitions.h:

2011-12-10  Benjamin Poulain  <bpoulain@apple.com>

        Merge WebKit ToT r101867.

        The conflicts of WebCore.xcodeproj/project.pbxproj are merged in favor of Open Source, in order
        to avoid future conflicts.

    2011-12-02  Benjamin Poulain  <bpoulain@apple.com>

        Update platform/iphone to platform/ios
        https://bugs.webkit.org/show_bug.cgi?id=73708

        Reviewed by Darin Adler.

        The platform is now best known as iOS, update the platform layer accordingly.

        * Configurations/WebCore.xcconfig:
        * WebCore.gypi:
        * WebCore.xcodeproj/project.pbxproj:
        * platform/cocoa/KeyEventCocoa.mm:
        * platform/ios/KeyEventCodesIOS.h: Renamed from Source/WebCore/platform/iphone/KeyEventCodesIPhone.h.
        * platform/ios/KeyEventIOS.mm: Renamed from Source/WebCore/platform/iphone/KeyEventIPhone.mm.
        (WebCore::keyIdentifierForKeyEvent):
        (WebCore::PlatformKeyboardEvent::PlatformKeyboardEvent):
        (WebCore::PlatformKeyboardEvent::disambiguateKeyDownEvent):
        (WebCore::PlatformKeyboardEvent::currentCapsLockState):
        (WebCore::PlatformKeyboardEvent::getCurrentModifierState):

2011-12-10  Benjamin Poulain  <bpoulain@apple.com>

        Simplify the obvious #ifdef from WebCore/platform/mac to get closer to OpenSource WebKit

        Reviewed by David Kilzer.

        Remove the PLATFORM(IOS) #ifdef when possible to move the
        branch closer to Open Source and avoid future conflicts.

        When a file was totally ignored through the preprocessor, it
        is now excluded from the build on iOS.

        * Configurations/WebCore.xcconfig:
        * platform/FileSystem.cpp:
        * platform/mac/FileSystemMac.mm: Use the code from FileSystem.cpp
        used by the other platforms instead of modifying the Mac functions.
        (WebCore::canExcludeFromBackup):
        (WebCore::excludeFromBackup):
        * platform/mac/HTMLConverter.h:
        * platform/mac/HTMLConverter.mm:
        (fileWrapperForElement):
        * platform/mac/Language.mm: The static value languageChangeObserverAdded is
        never set on iOS, move the #ifdef accordingly.
        (WebCore::platformDefaultLanguage):
        * platform/mac/MemoryPressureHandlerMac.mm:
        * platform/mac/SSLKeyGeneratorMac.cpp:
        * platform/mac/SearchPopupMenuMac.mm:
        * platform/mac/WebVideoFullscreenController.h:
        * platform/mac/WebVideoFullscreenController.mm:
        * platform/mac/WebVideoFullscreenHUDWindowController.h:
        * platform/mac/WebVideoFullscreenHUDWindowController.mm:
        * platform/mac/WebWindowAnimation.h:
        * platform/mac/WebWindowAnimation.mm:

2011-12-09  Joseph Pecoraro  <pecoraro@apple.com>

        <rdar://problem/9878650> Remove WebInspectorServer*HTTP code

        Reviewed by David Kilzer.

        * Configurations/FeatureDefines.xcconfig: Remove ENABLE_HTTP_INSPECTOR_SERVER

2011-11-29  Jer Noble  <jer.noble@apple.com>

        iOS: Enable the Web Audio API
        <rdar://problem/10388394>

        Reviewed by NOBODY (OOPS!).

        * Configurations/WebCore.xcconfig:
        * WebCore.xcodeproj/project.pbxproj:
        * platform/audio/ios/AudioDestinationIOS.cpp: Copied from AudioDestinationMac.cpp.
        (WebCore::audioDestinations): Added. Contains a set of live AudioDestinationIOS objects.
        (WebCore::AudioDestination::create): Returns a new AudioDestinationIOS.
        (WebCore::AudioDestination::hardwareSampleRate): Use AudioSession to retrieve the hardware sample rate.
        (WebCore::AudioDestinationIOS::AudioDestinationIOS): 
        (WebCore::AudioDestinationIOS::~AudioDestinationIOS):
        (WebCore::AudioDestinationIOS::configure): Slightly different AudioUnit parameters on iOS.
        (WebCore::AudioDestinationIOS::audioDestinationInterruptionListener): Added.
        (WebCore::AudioDestinationIOS::initializeAudioSession): Added.
        (WebCore::AudioDestinationIOS::beganAudioInterruption): Added.
        (WebCore::AudioDestinationIOS::endedAudioInterruption): Added.
        (WebCore::AudioDestinationIOS::render): Break the incoming buffer list into 128-frame chunks.
        (WebCore::AudioDestinationIOS::frameSizeChangedProc): Added.
        * platform/audio/ios/AudioDestinationIOS.h: Copied from AudioDestinationMac.h.
        * platform/audio/ios/AudioFileReaderIOS.cpp: Copied from AudioFileReaderMac.cpp.
        (WebCore::AudioFileReader::AudioFileReader): Use CFURLCreateFromFileSystemRepresentation.
        (WebCore::AudioFileReader::createBus): Slightly different client data format flags.
        * platform/audio/ios/AudioFileReaderIOS.h: Copied from AudioFileReaderMac.h.

2011-11-29  Jer Noble  <jer.noble@apple.com>

    <rdar://problem/10494046> MERGE(r101265): WebAudio: AudioContext::uninitialize() can cause AudioContext deletion before deleting marked nodes.

    Merged ToT r101265.

    2011-11-28  Jer Noble  <jer.noble@apple.com>

        WebAudio: AudioContext::uninitialize() can caused AudioContext deletion before deleting marked nodes.
        https://bugs.webkit.org/show_bug.cgi?id=72755

        Reviewed by Eric Carlson.

        No new tests.

        Protect AudioContext from being deleted before uninitialize() returns. Fixes an assertion in ~AudioContext() and 
        a potential source of leaks.

        * webaudio/AudioContext.cpp:
        (WebCore::AudioContext::uninitialize):

2011-12-06  Joseph Pecoraro  <pecoraro@apple.com>

        <rdar://problem/10537034> STABILIZE: Crash in WebCore::CSSParser::updateLastMediaLine on (http://yandex.ru)

        Merge ToT WebKit r100092.

    2011-11-13  Julien Chaffraix  <jchaffraix@webkit.org>

        REGRESSION(99849): NULL-deref in updateLastMediaLine when parsing some media-queries
        https://bugs.webkit.org/show_bug.cgi?id=72222

        Reviewed by Pavel Feldman.

        Test: fast/media/update-media-query-css-parser.html

        * css/CSSGrammar.y: Added a proper NULL-check.

2011-12-05  Joseph Pecoraro  <pecoraro@apple.com>

        <rdar://problem/10533060> STABILIZE: Remote Inspector broken - console.timeStamp missing

        Reviewed by Yongjun Zhang.

        In r91061 WebKit switch from console.markTimeline to console.timeStamp.
        This means that console.timeStamp in the frontend is not available on
        older Lion systems and we were getting errors in the front-end. Use
        the older, still existing, console API, or fallback to an empty function.

        * inspector/front-end/ios/remote.js:
        Add a compatible function or a stub for console.timeStamp if its missing.

2011-12-02  Joseph Pecoraro  <pecoraro@apple.com>

        <rdar://problem/10513430> <select> can trigger onchange event outside of a user action

        Reviewed by David Carson.

        This was a merge issue, the opposite case used to be true (the forced
        UserDriven flag on selection changes) but that is no longer necessary
        on iOS. UIKit will use SPI to make selection changes.

        * html/HTMLSelectElement.cpp:
        (WebCore::HTMLSelectElement::setSelectedIndex):

2011-12-01  Joseph Pecoraro  <pecoraro@apple.com>

        <rdar://problem/10506808> STABILIZE: Gmail loads blank, POST requests are sent as GET requests

        Part of patch by David Kilzer.

        Reviewed by Pratik Solanki and Joseph Pecoraro.

        After Merging ToT WebKit r98380, some DocumentThreadableLoader requests
        go through the CachedResource/Loader/Request path. This includes
        XMLHttpRequests. In this path we were failing to copy important fields of
        the original ResourceRequest when using a non-"copy"-constructor for
        QuickLook code. The solution here is to do a real copy, and just set
        the necessary QuickLook url on the new ResourceRequest.

        * loader/cache/CachedResourceRequest.cpp:
        (WebCore::CachedResourceRequest::load):

2011-11-30  Joseph Pecoraro  <pecoraro@apple.com>

        Merge Stabilization: Merge r100413 to fix GraphicsContext ASSERT
        
        Merge ToT WebKit r100413.

    2011-11-15  Sergio Villar Senin  <svillar@igalia.com>

        [WK2] [GTK] fast/css/webkit-mask-crash-fieldset-legend.html asserts WebKitWebProcess
        https://bugs.webkit.org/show_bug.cgi?id=69510

        Reviewed by Simon Fraser.

        End the current transparency layer before early returning from
        paintMask() when there is a maskBoxImage which is still being
        loaded. This will balance the previous call to
        beginTransparencyLayer().

        * rendering/InlineFlowBox.cpp:
        (WebCore::InlineFlowBox::paintMask):

2011-12-07  Benjamin Poulain  <bpoulain@apple.com>

        Remove EXCLUDED_SOURCE_FILE_NAMES_macosx from WebCore configuration

        Reviewed by David Kilzer.

        The parameter EXCLUDED_SOURCE_FILE_NAMES_macosx is completely outdated and
        does not match many of the files in the repository. This setting causes
        conflicts when merging with WebKit ToT.

        This patch removes the setting, to match the configuration file in
        ToT r95467.
        The new parameter will be merged when we merge r101867 from ToT.

        * Configurations/WebCore.xcconfig:

2011-12-06  Benjamin Poulain  <bpoulain@apple.com>

        Move two iOS functions from FileSystem.h to a new iOS header

        Reviewed by David Kilzer.

        Two functions of FileSystem.h are specific to iOS and are
        unrelated to the other functions of the file. Move those function
        outside of the header to ease future merge and upstreaming.

        The header is exported as a private header since it is used
        by the WebKit layer.

        * WebCore.xcodeproj/project.pbxproj:
        * loader/mac/DiskImageCacheMac.mm:
        * platform/FileSystem.h:
        * platform/ios/FileSystemIOS.h: Added.
        * platform/ios/FileSystemIOS.mm:
        * platform/network/ios/QuickLook.mm:

2011-12-06  Benjamin Poulain  <benjamin@webkit.org>

        Prepare EventLoopIOS for upstreaming

        Reviewed by David Kilzer.

        * platform/ios/EventLoopIOS.mm:
        (WebCore::EventLoop::cycle):

2011-12-06  Benjamin Poulain  <bpoulain@apple.com>

        Merge WebKit ToT r102205 to fix the build.

    2011-12-06  Benjamin Poulain  <bpoulain@apple.com>

        WebKit Mac does not build without CONTEXT MENU
        https://bugs.webkit.org/show_bug.cgi?id=73962

        Reviewed by Pavel Feldman.

        In the patch r100903, the symbols were exported under ENABLE(CONTEXT_MENUS)
        because the feature is triggered from the menus.

        The implementation has no dependency on the context menu but is necessary to build
        when the inspector is enabled.
        This patch moves the exported symbols from ENABLE(CONTEXT_MENUS) to ENABLE(INSPECTOR).

        * WebCore.exp.in:

2011-12-06  Benjamin Poulain  <bpoulain@apple.com>

        Merge WebKit ToT r102205 to fix the build.

    2011-12-06  Benjamin Poulain  <bpoulain@apple.com>

        WebKit Mac does not build without CONTEXT MENU
        https://bugs.webkit.org/show_bug.cgi?id=73962

        Reviewed by Pavel Feldman.

        In the patch r100903, the symbols were exported under ENABLE(CONTEXT_MENUS)
        because the feature is triggered from the menus.

        The implementation has no dependency on the context menu but is necessary to build
        when the inspector is enabled.
        This patch moves the exported symbols from ENABLE(CONTEXT_MENUS) to ENABLE(INSPECTOR).

        * WebCore.exp.in:

2011-12-05  Benjamin Poulain  <bpoulain@apple.com>

        Merge WebKit ToT r102086 and update our code accordingly.

    2011-12-05  Benjamin Poulain  <bpoulain@apple.com>

        Upstream htmlSelectMultipleItems needed for <select multiple> by iOS
        https://bugs.webkit.org/show_bug.cgi?id=73734

        Reviewed by David Kilzer.

        * platform/DefaultLocalizationStrategy.cpp:
        (WebCore::DefaultLocalizationStrategy::htmlSelectMultipleItems):
        * platform/DefaultLocalizationStrategy.h:

2011-12-05  Benjamin Poulain  <bpoulain@apple.com>

        Merge ToT r102064 to fix the build.

    2011-12-05  Benjamin Poulain  <bpoulain@apple.com>

        Build fix for SecurityOrigin.cpp when neither BLOB nor FILE_SYSTEM are defined

        Reviewed by David Kilzer.

        When neither BLOB nor FILE_SYSTEM are defined, the parameter is unused.

        * page/SecurityOrigin.cpp:
        (WebCore::shouldUseInnerURL):

2011-12-05  Benjamin Poulain  <bpoulain@apple.com>

        Merge ToT r102064 to fix the build.

    2011-12-05  Benjamin Poulain  <bpoulain@apple.com>

        Build fix for SecurityOrigin.cpp when neither BLOB nor FILE_SYSTEM are defined

        Reviewed by David Kilzer.

        When neither BLOB nor FILE_SYSTEM are defined, the parameter is unused.

        * page/SecurityOrigin.cpp:
        (WebCore::shouldUseInnerURL):

2011-12-02  Benjamin Poulain  <bpoulain@apple.com>

        Modify platform/Cursor to a state that can be easily upstreamed.

        Reviewed by Sam Weinig.

        Cursor.h is modified to have the minimum change from OpenSource WebKit
        to support iOS.

        The implementation of the Cursor functions are moved to a separate file,
        CursorIOS.cpp, and the file Cursor.cpp is skipped on iOS.

        * Configurations/WebCore.xcconfig:
        * WebCore.xcodeproj/project.pbxproj:
        * platform/Cursor.cpp:
        (WebCore::determineHotSpot):
        * platform/Cursor.h:
        * platform/ios/CursorIOS.cpp: Added.
        (WebCore::cursor):
        (WebCore::pointerCursor):
        (WebCore::crossCursor):
        (WebCore::handCursor):
        (WebCore::moveCursor):
        (WebCore::iBeamCursor):
        (WebCore::waitCursor):
        (WebCore::helpCursor):
        (WebCore::eastResizeCursor):
        (WebCore::northResizeCursor):
        (WebCore::northEastResizeCursor):
        (WebCore::northWestResizeCursor):
        (WebCore::southResizeCursor):
        (WebCore::southEastResizeCursor):
        (WebCore::southWestResizeCursor):
        (WebCore::westResizeCursor):
        (WebCore::northSouthResizeCursor):
        (WebCore::eastWestResizeCursor):
        (WebCore::northEastSouthWestResizeCursor):
        (WebCore::northWestSouthEastResizeCursor):
        (WebCore::columnResizeCursor):
        (WebCore::rowResizeCursor):
        (WebCore::middlePanningCursor):
        (WebCore::eastPanningCursor):
        (WebCore::northPanningCursor):
        (WebCore::northEastPanningCursor):
        (WebCore::northWestPanningCursor):
        (WebCore::southPanningCursor):
        (WebCore::southEastPanningCursor):
        (WebCore::southWestPanningCursor):
        (WebCore::westPanningCursor):
        (WebCore::verticalTextCursor):
        (WebCore::cellCursor):
        (WebCore::contextMenuCursor):
        (WebCore::noDropCursor):
        (WebCore::notAllowedCursor):
        (WebCore::progressCursor):
        (WebCore::aliasCursor):
        (WebCore::zoomInCursor):
        (WebCore::zoomOutCursor):
        (WebCore::copyCursor):
        (WebCore::noneCursor):
        (WebCore::grabCursor):
        (WebCore::grabbingCursor):
        (WebCore::determineHotSpot):

2011-12-01  Benjamin Poulain  <bpoulain@apple.com>

        Merge WebKit ToT r101698.

    2011-12-01  Benjamin Poulain  <bpoulain@apple.com>

        Get rid of the unused function nameForCursorType()
        https://bugs.webkit.org/show_bug.cgi?id=73529

        Reviewed by Joseph Pecoraro.

        The function nameForCursorType was introduced in r63339 and has not been used anywhere
        since that commit.

        * WebCore.exp.in:
        * platform/Cursor.cpp:
        * platform/Cursor.h:

2011-12-02  Benjamin Poulain  <bpoulain@apple.com>

        Merge WebKit ToT r101874.

    2011-12-02  Benjamin Poulain  <bpoulain@apple.com>

        Build fix for SubresourceLoader when building with Core Foundation
        https://bugs.webkit.org/show_bug.cgi?id=73709

        Reviewed by David Kilzer.

        The patch r100311 removed SubresourceClient and merged it in SubresourceLoader.
        Consequently, m_client does not exist anymore and there is no need to do the check
        before invoking didReceiveData().

        * loader/cf/SubresourceLoaderCF.cpp:
        (WebCore::SubresourceLoader::didReceiveDataArray):

2011-11-30  Benjamin Poulain  <benjamin@webkit.org>

        Merge WebKit ToT r100079.

    2011-11-12  Patrick Gansterer  <paroga@webkit.org>

        Add stub implementation for SVGResources::filter()
        https://bugs.webkit.org/show_bug.cgi?id=72211

        Reviewed by Dirk Schulze.

        Add an empty implementation, which only returns 0 for !ENABLE(FILTERS)
        to reduce the #if ENABLE(FILTERS) complexity a bit.

        * rendering/svg/RenderSVGContainer.cpp:
        (WebCore::RenderSVGContainer::selfWillPaint):
        * rendering/svg/RenderSVGRoot.cpp:
        (WebCore::RenderSVGRoot::selfWillPaint):
        * rendering/svg/SVGRenderSupport.cpp:
        (WebCore::SVGRenderSupport::filtersForceContainerLayout):
        * rendering/svg/SVGResources.h:
        (WebCore::SVGResources::filter):
        * rendering/svg/SVGResourcesCache.cpp:
        (WebCore::SVGResourcesCache::clientLayoutChanged):
        (WebCore::SVGResourcesCache::clientUpdatedFromElement):

2011-11-30  Benjamin Poulain  <benjamin@webkit.org>

        Merge WebKit ToT r100076.

    2011-11-12  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r100013.
        http://trac.webkit.org/changeset/100013
        https://bugs.webkit.org/show_bug.cgi?id=72210

        It breaks all mac builds (Requested by WildFox on #webkit).

        * html/HTMLAnchorElement.idl:
        * html/HTMLAreaElement.idl:
        * html/HTMLButtonElement.idl:
        * html/HTMLElement.idl:
        * html/HTMLInputElement.idl:
        * html/HTMLLabelElement.idl:
        * html/HTMLLegendElement.idl:
        * html/HTMLTextAreaElement.idl:

2011-12-02  Benjamin Poulain  <bpoulain@apple.com>

        Merge WebKit ToT r101874.

    2011-12-02  Benjamin Poulain  <bpoulain@apple.com>

        Build fix for SubresourceLoader when building with Core Foundation
        https://bugs.webkit.org/show_bug.cgi?id=73709

        Reviewed by David Kilzer.

        The patch r100311 removed SubresourceClient and merged it in SubresourceLoader.
        Consequently, m_client does not exist anymore and there is no need to do the check
        before invoking didReceiveData().

        * loader/cf/SubresourceLoaderCF.cpp:
        (WebCore::SubresourceLoader::didReceiveDataArray):

2011-11-30  Benjamin Poulain  <benjamin@webkit.org>

        Merge WebKit ToT r100079.

    2011-11-12  Patrick Gansterer  <paroga@webkit.org>

        Add stub implementation for SVGResources::filter()
        https://bugs.webkit.org/show_bug.cgi?id=72211

        Reviewed by Dirk Schulze.

        Add an empty implementation, which only returns 0 for !ENABLE(FILTERS)
        to reduce the #if ENABLE(FILTERS) complexity a bit.

        * rendering/svg/RenderSVGContainer.cpp:
        (WebCore::RenderSVGContainer::selfWillPaint):
        * rendering/svg/RenderSVGRoot.cpp:
        (WebCore::RenderSVGRoot::selfWillPaint):
        * rendering/svg/SVGRenderSupport.cpp:
        (WebCore::SVGRenderSupport::filtersForceContainerLayout):
        * rendering/svg/SVGResources.h:
        (WebCore::SVGResources::filter):
        * rendering/svg/SVGResourcesCache.cpp:
        (WebCore::SVGResourcesCache::clientLayoutChanged):
        (WebCore::SVGResourcesCache::clientUpdatedFromElement):

2011-11-30  Benjamin Poulain  <benjamin@webkit.org>

        Merge WebKit ToT r100076.

    2011-11-12  Sheriff Bot  <webkit.review.bot@gmail.com>

        Unreviewed, rolling out r100013.
        http://trac.webkit.org/changeset/100013
        https://bugs.webkit.org/show_bug.cgi?id=72210

        It breaks all mac builds (Requested by WildFox on #webkit).

        * html/HTMLAnchorElement.idl:
        * html/HTMLAreaElement.idl:
        * html/HTMLButtonElement.idl:
        * html/HTMLElement.idl:
        * html/HTMLInputElement.idl:
        * html/HTMLLabelElement.idl:
        * html/HTMLLegendElement.idl:
        * html/HTMLTextAreaElement.idl:

2011-11-29  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/10498421> PEP Web: use bitfields for data members in ResourceRequestBase to reduce memory size.

        Merged ToT r101327.

    2011-11-29  Yongjun Zhang  <yongjun_zhang@apple.com>

        Size of ResourceRequestBase could be reduced by using bitfields.
        https://bugs.webkit.org/show_bug.cgi?id=73271

        Reviewed by Alexey Proskuryakov.

        Add bitfield for bool members in ResourceRequestBase to reduce its memory size.

        * platform/network/ResourceRequestBase.h:

2011-11-28  Chris Fleizach  <cfleizach@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/10414850> 9B110: MobileSafari crash in WebCore: WebCore::Document::topDocument below -[AccessibilityObjectWrapper accessibilityContainer]

        There was a missing null check when document() was null.

        Test: platform/iphone-simulator/accessibility/accessibility-crash-in-axcontainer.html

        * accessibility/ios/AccessibilityObjectWrapperIOS.mm:
        (-[WebAccessibilityObjectWrapper accessibilityContainer]):

2011-11-18  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/10420473> Performance loss on PLT2 in Sundance due to higher quality interpolation

        Reviewed by Ian Henderson.

        Set the CG interpolation quality to Medium instead of High. CA is now doing really good and
        really expensive interpolation when you request High quality. This causes a big performance
        drop (~80% slower) on pages like rottentomatoes.com. Use Medium quality interpolation to get
        back the performance.

        * wak/WAKView.mm:
        (-[WAKView _drawRect:context:lockFocus:]):

2011-11-15  Joseph Pecoraro  <pecoraro@apple.com>

        <rdar://problem/9980903> Use of RefPtr in DiskImageCache::Entry::map is not thread safe

        Reviewed by Scott Grant and Antti Koivisto.

        RefPtr is not threadsafe. Previously the DiskImageCache was
        managing DiskImageCache::Entry and SharedBuffer objects on
        both the WebThread and a dispatch_queue. This patch manages
        the lifetime of these objects entirely on the WebThread. It
        uses ref() and deref() calls to reuse the same refcounting
        that RefPtr would have used but makes sure these are done
        on the WebThread.

        The DiskImageCache::Entry is always ref'd before being put
        on a dispatch_queue, and then deref'd by a WebThreadRun when
        the work is complete. This way it is always sure to exist
        inside of a dispatch. As before, the table of entries keeps
        the important reference.

        The SharedBuffer is ref'd as it goes into a DiskImageCache::Entry,
        that Entry is immediately told to be mapped, and the SharedBuffer
        is deref'd as soon as it is no longer needed. There are 3 exits:

          - bail before even getting to map it (cache was full)
          - map failed
          - map succeeded

        We release this ref as soon as possible to break a circular
        reference between the SharedBuffer and DiskImageCache::Entry.

        * loader/DiskImageCache.cpp:
        (WebCore::DiskImageCache::Entry::Entry):
        (WebCore::DiskImageCache::Entry::~Entry):
        (WebCore::DiskImageCache::Entry::mapInternal):
        (WebCore::DiskImageCache::Entry::map):
        (WebCore::DiskImageCache::Entry::clearDataWithoutMapping):
        (WebCore::DiskImageCache::writeItem):
        (WebCore::DiskImageCache::removeItem):
        * loader/DiskImageCache.h:
        (WebCore::DiskImageCache::Entry::create):

2011-11-14  Joseph Pecoraro  <pecoraro@apple.com>

        <rdar://problem/10326156> Remote Inspector: Incomplete Right Click Context Menu

        Merged ToT r100114.

    2011-11-14  Joseph Pecoraro  <pecoraro@apple.com>

        Web Inspector: Give HTML ContextMenu a more Native look
        https://bugs.webkit.org/show_bug.cgi?id=72207

        Reviewed by Pavel Feldman.

        * inspector/front-end/SoftContextMenu.js:
        (.WebInspector.SoftContextMenu.prototype._createMenuItem):
        Give the checkmark a class name so that it can be styled more
        with CSS instead of with JavaScript.

        * inspector/front-end/inspector.css:
        (.soft-context-menu): tweak the border and shadow.
        (.soft-context-menu-item): tweak the font size and positioning.
        (.soft-context-menu-separator): tweak the whitespace.
        (.soft-context-menu-item-mouse-over): solid blue for non-mac platforms.
        (body.platform-mac .soft-context-menu-item-mouse-over): gradient for mac platforms.
        (.soft-context-menu-item-checkmark): gray color normally.
        (.soft-context-menu-item-mouse-over .soft-context-menu-item-checkmark): white on hover.

2011-11-14  Yongjun Zhang  <yongjun_zhang@apple.com>

        Reviewed by Simon Fraser.

        <rdar://problem/9083381> Blurry content in MobileSafari with nested -webkit-perspective

        Nested perspective transforms without preserving 3D can cause blurry results since the inner level
        will be rasterized (flattened) into a buffer at identity matrix, which could be different than the
        layer's contentsScale when the page is zoomed in MobileSafari.  To avoid this, we can tell CA to use
        contentsScale as rasterizationScale.

        This patch checks if a layer's ancestors have nested perspective transforms, if so, we will set the
        right rasterizationScale for this layer to avoid blurry content.

        * platform/graphics/GraphicsLayer.h:
        (WebCore::GraphicsLayer::hasFlattenedPerspectiveTransform): add a method to check if the layer has perspective transform
            without preserving 3D.
        * platform/graphics/ca/GraphicsLayerCA.cpp:
        (WebCore::GraphicsLayerCA::updateContentsScale):
        * platform/graphics/ca/PlatformCALayer.h:
        * platform/graphics/ca/mac/PlatformCALayerMac.mm:
        (PlatformCALayer::setRasterizationScale): add method to set the rasterizationScale.

2011-11-13  Joseph Pecoraro  <pecoraro@apple.com>

        Reviewed by David Carson.

        Remove duplicate exported symbols. Many of the symbols
        that were previously exported for iOS are now always
        exported in OpenSource, so we can remove our duplicate.
        A few duplicates remain, but are okay since they are
        only added for particular ENABLE features.

        * WebCore.exp.in:

2011-11-10  Benjamin Poulain  <benjamin@webkit.org>

        Merge ToT WebKit r99896

    2011-11-10  Benjamin Poulain  <benjamin@webkit.org>

        Do not share CSS style for MediaElement backed by a plugin
        https://bugs.webkit.org/show_bug.cgi?id=72005

        Reviewed by Simon Fraser.

        With PLUGIN_PROXY_FOR_VIDEO, the RenderMedia elements are rendered through RenderBoxModelObject.
        Like the embedded element, the proxied media element can gain a layer outside a change of style.

        This patch prevents style sharing for the Audio and Video elements when PLUGIN_PROXY_FOR_VIDEO
        is enabled.

        This path is covered by exising tests. In particular, http/tests/misc/empty-urls.html
        ASSERT() because of this.

        * css/CSSStyleSelector.cpp:
        (WebCore::CSSStyleSelector::canShareStyleWithElement):


2011-11-10  Joseph Pecoraro  <pecoraro@apple.com>

        <rdar://problem/10381714> Sub-TLF: Download Inspector Front-end From the Device

        Reviewed by David Kilzer.

        Add an "Archive Remote Inspector Resources for iOS" build
        phase for iOS which zips up the inspector resources into
        "inspector-remote.zip". This can be sent to a remote
        debugger and contains all the front-end resources. The
        build phase runs every time but it is short and quiet.

        * WebCore.xcodeproj/project.pbxproj:

2011-11-07  Benjamin Poulain  <bpoulain@apple.com>

        Merge ToT WebKit r99334.

    2011-11-04  Benjamin Poulain  <bpoulain@apple.com>

        [Mac] ResourceRequest's nsURLRequest() does not differentiate null and empty URLs with CFNetwork
        https://bugs.webkit.org/show_bug.cgi?id=71539

        Reviewed by David Kilzer.

        In order to have CFURL and NSURL to be consistent when both are used on Mac,
        KURL::createCFURL() is changed to support empty URL values.

        * platform/cf/KURLCFNet.cpp:
        (WebCore::createCFURLFromBuffer):
        (WebCore::KURL::createCFURL):
        * platform/mac/KURLMac.mm:
        (WebCore::KURL::operator NSURL *):
        (WebCore::KURL::createCFURL):

2011-11-06  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/10398462> ASSERTION Failure: WebCore::screenRect (widget=0xd45bc00) at Source/WebCore/platform/ios/PlatformScreenIOS.mm:62

        Reviewed by David Carson.

        If an iframe has display:none, its platformWidget's window will be nil since it hasn't been
        added to view hierarchy yet.  We can early return in this case to avoid the assertion failure. 

        * platform/ios/PlatformScreenIOS.mm:
        (WebCore::screenRect):
        (WebCore::screenAvailableRect):

2011-11-05  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/10349104> Homebrew: WebKit_Sim-1119 failed to build ( missing symbols )

        Reviewed by Ian Henderson.

        Because CGFloat is defined as a float for 32-bit architectures
        and as a double for 64-bit architectures, we must conditionalize
        the exported symbol based on 64-bit-ness of the architecture.

        * WebCore.exp.in: Conditionalize the export of
        WebCore::createCGColorWithDeviceWhite() based on whether we're
        building for 64-bit or not.

2011-11-03  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/10394410> REGRESSION: window.internals.shadowPseudoId(node) undefined error in editing layout tests.

        Reviewed by David Carson.

        Fix a merge issue that Internals::shadowPseudoId and Internals::elementsRenderTreeAsText are
        wrongly wrapped inside ENABLE(NETSCAPE_PLUGIN_API) flag.

        * WebCore.exp.in:
        * testing/Internals.cpp:
        (WebCore::Internals::elementRenderTreeAsText): remove ENABLE(NETSCAPE_PLUGIN_API) to match open source Webkit.
        (WebCore::Internals::shadowPseudoId): ditto.
        (WebCore::Internals::setSuggestedValue): ditoo.
        * testing/Internals.h:
        * testing/Internals.idl:

2011-11-03  Joseph Pecoraro  <pecoraro@apple.com>

        Merged ToT r99150.

    2011-11-03  Joseph Pecoraro  <pecoraro@apple.com>

        Web Inspector: Allow the toolbar background to be transparent on mac platforms when remote
        https://bugs.webkit.org/show_bug.cgi?id=71437

        Reviewed by Yury Semikhatsky.

        * inspector/front-end/inspector.css:
        (body.detached.platform-mac-snowleopard #toolbar):

2011-11-03  Joseph Pecoraro  <pecoraro@apple.com>

        <rdar://problem/5905197> Remove unused -webkit-image-loading-border support

        Reviewed by David Carson and Simon Fraser.

        No new tests. There were no LayoutTests for this feature. This was
        originally added for the Weather widget which no longer exists. We
        did not see any other uses of this. The original radar was:
        <rdar://problem/4582378> Images draw white borders before/while loading

        * css/CSSComputedStyleDeclaration.cpp:
        (WebCore::CSSComputedStyleDeclaration::getPropertyCSSValue):
        * css/CSSParser.cpp:
        (WebCore::CSSParser::parseValue):
        * css/CSSPrimitiveValueMappings.h:
        * css/CSSPropertyNames.in:
        * css/CSSStyleSelector.cpp:
        (WebCore::CSSStyleSelector::applyProperty):
        * css/CSSValueKeywords.in:
        * rendering/RenderImage.cpp:
        (WebCore::RenderImage::paintReplaced):
        * rendering/style/RenderStyle.h:
        * rendering/style/RenderStyleConstants.h:
        * rendering/style/StyleRareNonInheritedData.cpp:
        (WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData):
        (WebCore::StyleRareNonInheritedData::operator==):
        * rendering/style/StyleRareNonInheritedData.h:

2011-11-03  Joseph Pecoraro  <pecoraro@apple.com>

        <rdar://problem/10394078> getComputedStyle is missing -webkit-overflow-scroll entry

        Reviewed by David Carson.

        No new tests. I did not think this warranted an iOS specific test.
        Instead there should be a more generic test for the results of
        getComputedStyle in Open Source.

        * css/CSSComputedStyleDeclaration.cpp:

2011-11-03  Joseph Pecoraro  <pecoraro@apple.com>

        <rdar://problem/5905197> Remove unused -webkit-image-loading-border support

        Reviewed by David Carson and Simon Fraser.

        No new tests. There were no LayoutTests for this feature. This was
        originally added for the Weather widget which no longer exists. We
        did not see any other uses of this. The original radar was:
        <rdar://problem/4582378> Images draw white borders before/while loading

        * css/CSSComputedStyleDeclaration.cpp:
        (WebCore::CSSComputedStyleDeclaration::getPropertyCSSValue):
        * css/CSSParser.cpp:
        (WebCore::CSSParser::parseValue):
        * css/CSSPrimitiveValueMappings.h:
        * css/CSSPropertyNames.in:
        * css/CSSStyleSelector.cpp:
        (WebCore::CSSStyleSelector::applyProperty):
        * css/CSSValueKeywords.in:
        * rendering/RenderImage.cpp:
        (WebCore::RenderImage::paintReplaced):
        * rendering/style/RenderStyle.h:
        * rendering/style/RenderStyleConstants.h:
        * rendering/style/StyleRareNonInheritedData.cpp:
        (WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData):
        (WebCore::StyleRareNonInheritedData::operator==):
        * rendering/style/StyleRareNonInheritedData.h:

2011-11-03  Joseph Pecoraro  <pecoraro@apple.com>

        Reviewed by Pratik Solanki.

        Revert the iOS addition to the "Copy Inspector Resources" build phase
        added in <rdar://problem/10002257> JavaScript files should not be executable.
        Fixes from Open Source have merged and made this extra code unnecessary.

        * WebCore.xcodeproj/project.pbxproj:

2011-11-03  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/10380964> Ask CG to not parse image metadata

        Reviewed by Joseph Pecoraro.

        Update iOS code to use new enum added in r98657 and pass down the option to CG in the image
        source dictionary. This reduces the time spent under CGImageSourceCopyPropertiesAtIndex and
        CGImageSourceCreateFrameAtIndex by almost half. Instruments showed the time go from 325ms to
        172ms on a K93/10A144 doing an uncached load of nytimes.com.

        * platform/graphics/ImageSource.h:
        * platform/graphics/cg/ImageSourceCG.cpp:
        (WebCore::ImageSource::imageSourceOptions):
        (WebCore::ImageSource::orientationAtIndex):
        (WebCore::ImageSource::createFrameAtIndex):

2011-11-03  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/10380964> Ask CG to not parse image metadata

        Merged ToT WebKit r98657.

    2011-10-27  Pratik Solanki  <psolanki@apple.com>

        Ask CG to not parse image metadata
        https://bugs.webkit.org/show_bug.cgi?id=71029

        Reviewed by Simon Fraser.

        We don't need CG to parse the image metadata since WebCore never uses it. Passing this
        option shaves off time spent under CGImageSourceCopyPropertiesAtIndex. Under Instruments I
        saw the time drop from ~75ms to ~25ms when loading http://boston.com/bigpicture and the
        first link on that page.

        No new tests because no change in functionality.

        * platform/graphics/ImageSource.h:
        * platform/graphics/cg/ImageSourceCG.cpp:
        (WebCore::imageSourceOptions):
        (WebCore::ImageSource::isSizeAvailable):
        (WebCore::ImageSource::frameSizeAtIndex):
        (WebCore::ImageSource::getHotSpot):
        (WebCore::ImageSource::repetitionCount):
        (WebCore::ImageSource::createFrameAtIndex):
        (WebCore::ImageSource::frameDurationAtIndex):

2011-11-02  Dean Jackson  <dino@apple.com>

        <rdar://problem/10283098> Allow detection of inline media playback capability

        Reviewed by Simon Fraser.

        Add a -webkit-video-playable-inline media query that evaluates using the
        associated Setting on iPhone. On iPad, where inline media is
        always allowed, the query evaluates to true. Since all the media
        features are declared in a single line macro, this fix involved adding
        a new iOS-specific macro to add the new feature.

        Test: platform/iphone-simulator/iphone/fast/media/video-inline.html

        * css/MediaFeatureNames.cpp:
        (WebCore::MediaFeatureNames::init):
        * css/MediaFeatureNames.h:
        * css/MediaQueryEvaluator.cpp:
        (WebCore::video_playable_inlineMediaFeatureEval):
        (WebCore::createFunctionMap):

2011-11-01  Ian Henderson  <ianh@apple.com>

        Reviewed by David Carson.

        <rdar://problem/10365975> Lower tile cache memory limits when not keeping zoomed out tiles

        * platform/ios/TileCache.mm:
        (WebCore::TileCache::tileCapacityForGrid): On 512 MB devices, reduce
        the tile cache size to 64 MB so it's in line with the other limits.

        In MobileSafari, when you zoom in, only 3/4 of our capacity is filled
        with zoomed-in tiles (the other 1/4 is for zoomed out tiles).  We can
        reduce the tile capacity by 3/4 for tile caches that don't keep zoomed
        out tiles.  This matches the shipping zoomed-in behavior for
        MobileSafari, but shaves 1/4 off our memory usage.

2011-11-01  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/10371110> iOS Webkit Merge: REGRESSION: MobileSafari hangs at loading us.moo.com

        Merged ToT WebKit r95567.

    2011-09-20  David Hyatt  <hyatt@apple.com>

        https://bugs.webkit.org/show_bug.cgi?id=68314

        Make sure that the containing block loop when clipping to border-radius
        terminates by checking if you hit the RenderView. Null checking isn't sufficient
        for stupid historical reasons that should be fixed (i.e., the RenderView returns itself
        as its own containing block, even though this should just be changed).

        Reviewed by Simon Fraser and Darin Adler.

        Added new test in fast/clip.

        * rendering/RenderLayer.cpp:
        (WebCore::inContainingBlockChain):

2011-11-01  David Kilzer  <ddkilzer@apple.com>

        Fix build verification errors for WebCoreTestSupport target

        Reviewed by NOBODY (OOPS!).

        Fixes the following XBS verification errors:

            [severity: error] bad_sdk_install_path (reported by 'bogus_simulator_files' verifier) 
            ./usr/local/include/WebCoreTestSupport/WebCoreTestSupport.h
            ./usr/local/lib/libWebCoreTestSupport.dylib

            [severity: error] sim_files_outside_sim (reported by 'bogus_simulator_files' verifier) 
            This iOS Simulator project installs files outside of the canonical iOS Simulator path, ./Developer/P...
            (for more information, see http://lockerroom.apple.com/verification?page=docs#sim_files_outside_sim)
            ./usr/local/include/WebCoreTestSupport/WebCoreTestSupport.h
            ./usr/local/lib/libWebCoreTestSupport.dylib

        * Configurations/WebCoreTestSupportIOS.xcconfig: Added.  We must
        #include AspenFamily.xcconfig so that INDIGO_INSTALL_PATH_PREFIX
        is defined on iOS Simulator builds.
        * WebCore.xcodeproj/project.pbxproj: Switch iOS configurations
        on WebCoreTestSupport target to use
        WebCoreTestSupportIOS.xcconfig as the base configuration file.

2011-10-27  Benjamin Poulain  <bpoulain@apple.com>

        Reviewed by Ian Henderson.

        <rdar://problem/7292622> Replace WK with WAK
        Get rid of WKViewGetSuperview().

        * WebCore.exp.in:
        * wak/WAKView.mm:
        (-[WAKView superview]):
        * wak/WKView.mm:
        (WKViewTraverseNext):

2011-10-27  Benjamin Poulain  <bpoulain@apple.com>

        Reviewed by Ian Henderson.

        <rdar://problem/7292622> Replace WK with WAK.
        Kill WKClipView, replace it by WAKClipView.


        * Configurations/WebCore.xcconfig:
        * WebCore.xcodeproj/project.pbxproj:
        * wak/WAKClipView.h:
        * wak/WAKClipView.m:
        (-[WAKClipView initWithFrame:]):
        (-[WAKClipView dealloc]):
        (-[WAKClipView _setDocumentView:]):
        (-[WAKClipView documentVisibleRect]):
        * wak/WAKScrollView.mm:
        (-[WAKScrollView initWithFrame:]):
        * wak/WAKView.mm:
        (+[WAKView _wrapperForViewRef:]):
        (-[WAKView addSubview:]): Remove the subview from its previous
        superview before adding.
        * wak/WKClipView.c: Removed.
        * wak/WKClipView.h: Removed.
        * wak/WKTypes.h:

2011-10-27  Benjamin Poulain  <bpoulain@apple.com>

        Reviewed by Ian Henderson.

        <rdar://problem/7292622> Replace WK with WAK.
        Kill WKScrollView.

        * Configurations/WebCore.xcconfig:
        * WebCore.exp.in:
        * WebCore.xcodeproj/project.pbxproj:
        * platform/ios/ScrollViewIOS.mm:
        * wak/WAKClipView.h:
        * wak/WAKClipView.m:
        (-[WAKClipView _setDocumentView:]): Change WAKClipView so we can
        interact directly with the Objective-C object instead of the C API.
        * wak/WAKScrollView.h:
        * wak/WAKScrollView.mm:
        (-[WAKScrollView initWithFrame:]):
        (-[WAKScrollView dealloc]):
        (-[WAKScrollView _selfHandleEvent:]): It turns out nobody uses mouseDownPoint
        and lastDraggedPoint so we can get rid of the MouseDown handling.
        (-[WAKScrollView documentVisibleRect]):
        (-[WAKScrollView setDocumentView:]):
        (-[WAKScrollView documentView]):
        (-[WAKScrollView contentView]):
        (-[WAKScrollView setScrollOrigin:updatePositionAtAll:immediately:]):
        (-[WAKScrollView scrollWheel:]):
        (-[WAKScrollView actualDocumentVisibleRect]):
        (-[WAKScrollView setActualScrollPosition:]):
        (-[WAKScrollView _adjustScrollers]): Fix a typo, this is supposed to verify
        the documentView exists.
        * wak/WAKView.mm:
        (+[WAKView _wrapperForViewRef:]):
        * wak/WKScrollView.h: Removed.
        * wak/WKScrollView.mm: Removed.
        * wak/WKTypes.h:
        * wak/WKView.mm:

2011-10-26  Benjamin Poulain  <bpoulain@apple.com>

        Reviewed by Ian Henderson.

        Remove dead code in WidgetIOS's safeRemoveFromSuperview

        This code gives a false sense of security. The method
        [WAKWindow makeFirstResponder] does not actually do anything.

        * platform/ios/WidgetIOS.mm:
        (WebCore::safeRemoveFromSuperview):

2011-10-26  Benjamin Poulain  <bpoulain@apple.com>

        Reviewed by Ian Henderson.

        Change the type of firstResponder to the most specialized know type

        [WAKWindow firstResponder] can only be a WAKView. By changing the return
        type we can avoid a few check and cast in the other parts of the code.

        * wak/WAKWindow.h:
        * wak/WAKWindow.mm:
        (-[WAKWindow firstResponder]):

2011-10-27  Dean Jackson  <dino@apple.com>

        <rdar://problem/5320768> Need a way for web developers to disable rotation in WebApps and Safari on iPhone

        Reviewed by Joseph Pecoraro.

        Add support for <meta name="apple-mobile-web-app-orientations">.
        When a meta element with this name is changed send a notification to the ChromeClient,
        and from there up to WebKit.

        * dom/Document.cpp:
        (WebCore::Document::processWebAppOrientations):
        * dom/Document.h:
        * html/HTMLMetaElement.cpp:
        (WebCore::HTMLMetaElement::process):
        * loader/EmptyClients.h:
        (WebCore::EmptyChromeClient::webAppOrientationsUpdated):
        * page/ChromeClient.h:

2011-10-27  Dean Jackson  <dino@apple.com>

        <rdar://problem/5320768> Need a way for web developers to disable rotation in WebApps and Safari on iPhone

        Reviewed by Joseph Pecoraro.

        Add support for <meta name="apple-mobile-web-app-orientations">.
        When a meta element with this name is changed send a notification to the ChromeClient,
        and from there up to WebKit.

        * dom/Document.cpp:
        (WebCore::Document::processWebAppOrientations):
        * dom/Document.h:
        * html/HTMLMetaElement.cpp:
        (WebCore::HTMLMetaElement::process):
        * loader/EmptyClients.h:
        (WebCore::EmptyChromeClient::webAppOrientationsUpdated):
        * page/ChromeClient.h:

2011-10-27  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/9940707> WebCore::screenRect() and screenAvailableRect() can return garbage if passed a NULL pointer

        Reviewed by Joseph Pecoraro.

        Fixes the following 2 static analyzer warnings:

            WebCore/platform/ios/PlatformScreenIOS.mm:64:40:{64:41-64:47}: warning: The receiver of message 'screenSize' is nil and returns a value of type 'CGSize' that will be garbage
                 CGRect screenRect = { CGPointZero, [window screenSize] };
                                                    ^~~~~~~
            WebCore/platform/ios/PlatformScreenIOS.mm:71:40:{71:41-71:47}: warning: The receiver of message 'availableScreenSize' is nil and returns a value of type 'CGSize' that will be garbage
                 CGRect screenRect = { CGPointZero, [window availableScreenSize] };
                                                    ^~~~~~~

        This change is covered by the following layout tests, both of
        which send a NULL widget pointer when calling each method:

            fast/frames/crash-removed-iframe.html (WebCore::screenAvailableRect)
            fast/frames/iframe-access-screen-of-deleted.html (WebCore::screenRect)

        * platform/ios/PlatformScreenIOS.mm:
        (WebCore::screenRect): If widget is nil, return early.  Assert
        that window is non-nil.
        (WebCore::screenAvailableRect): Ditto.

2011-10-26  Joseph Pecoraro  <pecoraro@apple.com>

        Reviewed by David Carson.

        <rdar://problem/9924618> Remote Inspector protocol needs a better name than fakeSend

        Rename webInspectorSocket.fakeSend: to webInspectorSocket.send.
        Drive-by fix renaming "inspector/front-end/iphone" to "inspector/front-end/ios".

        * WebCore.xcodeproj/project.pbxproj:
        * inspector/front-end/ios/remote.js: Renamed from Source/WebCore/inspector/front-end/iphone/remote.js.

2011-10-27  Ian Henderson  <ianh@apple.com>

        Reviewed by Antti Koivisto.

        <rdar://problem/10343841> UITextView in a UIScrollView with super long text crashes due to low memory warning crash

        UITextView calls layoutTilesNow in its setFrame: implementation.  This
        often happens before the UITextView is parented, so we create tiles
        covering its entire bounds.

        After the UITextView has a parent, CA will commit and we'll get
        another call to createTiles() with a smaller visibleRect.
        Unfortunately, we don't drop any tiles unless we've added tiles
        earlier in the method.  We'll never add any tiles if the entire view
        is already covered, so we're stuck with an entire bounds' worth of
        tiles forever.

        Update createTiles() to drop distant tiles unconditionally.  Pass in
        the maximum covered tile distance so we don't remove tiles that will
        be immediately re-created next time we enter createTiles().

        * platform/ios/TileGrid.mm:
        (WebCore::TileGrid::createTiles):

2011-10-26  Benjamin Poulain  <bpoulain@apple.com>

        Reviewed by Ian Henderson.

        <rdar://problem/7292622> Replace WK with WAK.
        Untangle WKScrollViewAdjustScrollers() and clean its dependencies.

        Replace WKScrollViewAdjustScrollers() by [WAKScrollView _adjustScrollers]
        and clean the dependencies in WKScrollView.

        * WebCore.exp.in:
        * wak/WAKScrollView.h:
        * wak/WAKScrollView.mm:
        (_notificationCallback): The notificationcallback code is moved over
        from WKScrollView so we can use the WAKScrollView as userInfo.

        The code could be simplified due to the following:
        -both branch of if() start by doing the same thing: set the size
        of the content view's frame to the size of the frame.
        -[WAKScrollView _adjustScrollers] start by doing that, and then
        update the document origin if necessary.

        (-[WAKScrollView initWithFrame:]): The initialization of WKScrollView
        is moved from WKScrollViewCreateWithFrame to here to simplify 
        the code and the initialization of the notification callback.
        (setDocumentViewOrigin): Objective-C version of _WKScrollViewSetDocumentViewOrigin
        (scrollViewToPoint):
        (-[WAKScrollView _adjustScrollers]):
        * wak/WAKView.mm:
        (enclosingScrollView): Rewrite to use WAKView.
        (notificationCallback):
        (-[WAKView lastScrollableAncestor]): Switch to the new enclosingScrollView and to WAKScrollView.
        (-[WAKView scrollPoint:]):
        * wak/WKScrollView.h:
        * wak/WKScrollView.mm:
        * wak/WKView.mm:
        * wak/WKViewPrivate.h:

2011-10-25  Benjamin Poulain  <bpoulain@apple.com>

        Reviewed by Ian Henderson.

        <rdar://problem/7292622> Replace WK with WAK
        Partly untangle the scrolling code of wak.

        Previously, all path ended up in WKScrollViewScrollToPoint(), which
        then called back WAKScrollView and changed the document position when
        necessary.

        This patch make WAKScrollView the entry point for scrolling and
        move the implementation to this class.

        * wak/WAKScrollView.mm:
        (-[WAKScrollView initWithFrame:]):
        (-[WAKScrollView _selfHandleEvent:]):
        (shouldScroll): This is equivalent to the callback _shouldScroll.
        (viewDocumentScrollableLength):
        (updateScrollerWithDocumentPosition):
        (scrollViewToPoint): This function replace WKScrollViewScrollToPoint.
        (-[WAKScrollView scrollPoint:]): This method override scrollPoint: from
        WAKView with an actual implementation.
        (-[WAKScrollView scrollWheel:]):
        (-[WAKScrollView setActualScrollPosition:]):
        * wak/WAKView.mm:
        (-[WAKView scrollPoint:]):
        (-[WAKView scrollRectToVisible:]):
        * wak/WKScrollView.h:
        * wak/WKScrollView.mm:
        (_WKScrollViewSetDocumentViewOrigin):
        (WKScrollViewInitialize):
        (WKScrollViewCreateWithFrame):
        * wak/WKView.h:
        * wak/WKView.mm:
        (_WKViewAdjustScrollers):

2011-10-25  Ian Henderson  <ianh@apple.com>

        Reviewed by Cameron Zwarich.

        <rdar://problem/10304437> WebCore: Please stop using PurpleGfxMem and ask for write combined memory instead

        * platform/graphics/cg/ImageBufferCG.cpp:
        (WebCore::createIOSurface):

2011-10-24  Benjamin Poulain  <bpoulain@apple.com>

        Reviewed by Ian Henderson.

        <rdar://problem/7292622> Replace WK with WAK
        Move the implementation of [WAKView hitTest] to WAKView itself.

        Previously, hit testing was done through WKViewHitTest(), which
        called the callback hitTestCallback(), which called [WAKView hitTest],
        which called _WKViewHitTest().

        This patch cut the indirections and implement _WKViewHitTest() in
        [WAKView hitTest].

        * wak/WAKView.mm:
        (-[WAKView initWithFrame:]):
        (-[WAKView hitTest:]):
        * wak/WAKWindow.mm:
        (-[WAKWindow sendEventSynchronously:]):
        * wak/WKView.h:
        * wak/WKView.mm:
        * wak/WKViewPrivate.h:

2011-10-24  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/10281227> HTTPBodyStream in NSURLRequest gets lost within UIWebView

        Merged ToT WebKit r98198.

    2011-10-22  Pratik Solanki  <psolanki@apple.com>

        HTTPBodyStream in NSURLRequest gets lost when using CFNetwork loader
        https://bugs.webkit.org/show_bug.cgi?id=70583
        <rdar://problem/10281227>

        Reviewed by Darin Adler.

        Call WebCore::setHTTPBody() only if we actually have a FormData. Unconditionally calling it
        results in us passing 0 to wkCFURLRequestSetHTTPRequestBodyParts() which resets any input
        stream specified by the user on the NSURLRequest. This code matches the behavior in the
        Foundation version of doUpdatePlatformRequest().

        * platform/network/cf/ResourceRequestCFNet.cpp:
        (WebCore::ResourceRequest::doUpdatePlatformRequest):

2011-10-23  Benjamin Poulain  <bpoulain@apple.com>

        Reviewed by Ian Henderson.

        <rdar://problem/7292622> Replace WK with WAK
        Remove dead code, the WKViewLayout() code path is never used.

        The function WKViewLayout() is never called anywhere. We can safely
        remove it and the associated callback in WAKView.

        * WebCore.exp.in:
        * wak/WAKView.mm:
        (-[WAKView initWithFrame:]):
        * wak/WKScrollView.mm:
        (WKScrollViewInitialize):
        * wak/WKView.h:
        * wak/WKView.mm:

2011-10-21  Benjamin Poulain  <bpoulain@apple.com>

        Reviewed by Ian Henderson.

        <rdar://problem/7292622> Replace WK with WAK
        Simplify event delivery through WAK.

        Previously, event delivery would be done from WAKResponder and WAKWindow
        by calling _WKViewHandleEvent(), which would execute the call back on
        the view, and go up the superview chain until a callback returns true.

        This patch changes the event delivery to be made by two functions.
        -[WAKView handleEvent:] deliver the event to views and their chain of superviews
        -[WAKView _selfHandleEvent:] process the event and correspond to the callback
        in the former model.

        * WebCore.exp.in:
        * wak/WAKResponder.m:
        (-[WAKResponder handleEvent:]): Instead of checking for the type, the
        method is now overridden in WAKView.
        * wak/WAKScrollView.mm:
        (-[WAKScrollView _selfHandleEvent:]):
        * wak/WAKView.mm:
        (hitTestCallback):
        (-[WAKView handleEvent:]):
        (-[WAKView _selfHandleEvent:]): Since the method handleEvent() deliver to
        the chain of superviews, this method is named _selfHandleEvent to avoid
        confusing the two.
        (-[WAKView initWithFrame:]):
        * wak/WAKViewPrivate.h:
        * wak/WAKWindow.mm:
        (-[WAKWindow sendEventSynchronously:]):
        * wak/WKScrollView.mm:
        (WKScrollViewInitialize):
        * wak/WKView.h:
        * wak/WKView.mm:
        * wak/WKViewPrivate.h:
        * wak/WKWindow.h:

2011-10-21  Matt Lilek  <mlilek@apple.com>

        Not reviewed, build fix.

        * wak/WKWindow.mm:
        (WKWindowDrawRect):

2011-10-21  Benjamin Poulain  <bpoulain@apple.com>

        Reviewed by Ian Henderson.

        <rdar://problem/7292622> Replace WK with WAK
        Add [WAKWindow makeViewFirstResponder:] to replace WKWindowMakeFirstResponder.

        Many applications rely on WKWindowMakeFirstResponder() to make a subframe
        the first responder. The class WAKWindow does not have any equivalent.

        This patch adds [WAKWindow makeViewFirstResponder:] so that it can be used
        in place of WKWindowMakeFirstResponder().

        * wak/WAKWindow.h:
        * wak/WAKWindow.mm:
        (-[WAKWindow makeViewFirstResponder:]):

2011-10-20  Benjamin Poulain  <bpoulain@apple.com>

        Reviewed by Ian Henderson.

        Remove two unused functions from WKWindow.

        * wak/WKWindow.h:
        * wak/WKWindow.mm:
        (WKWindowDrawRect):

2011-10-20  Benjamin Poulain  <bpoulain@apple.com>

        Reviewed by Ian Henderson.

        <rdar://problem/7292622> Replace WK with WAK
        Move event handling from WKWindowSendEvent to WAKWindow.

        Add [WAKWindow sendEventSynchronously:] to replace WKWindowSendEvent().

        * WebCore.exp.in:
        * page/ios/EventHandlerIOS.mm:
        (WebCore::lastEventIsMouseUp):
        * wak/WAKWindow.h:
        * wak/WAKWindow.mm:
        (-[WAKWindow sendEvent:]):
        (-[WAKWindow sendEventSynchronously:]):
        (+[WAKWindow currentEvent]):
        * wak/WKWindow.h:
        * wak/WKWindow.mm:
        (WKWindowSendEvent):

2011-10-20  Benjamin Poulain  <bpoulain@apple.com>

        Reviewed by Ian Henderson.

        <rdar://problem/7292622> Replace WK with WAK
        Get rid of WKWindowPrivate.h

        Remove the file WKWindowPrivate.h, the functions defined in this
        file are not implemented anywhere.

        * WebCore.xcodeproj/project.pbxproj:
        * bindings/objc/DOM.mm:
        * bindings/objc/DOMHTML.mm:
        * wak/WAKView.mm:
        * wak/WAKWindow.mm:
        * wak/WKView.mm:
        * wak/WKWindow.mm:
        * wak/WKWindowPrivate.h: Removed.
        * wak/WebCoreThread.mm:

2011-10-20  Benjamin Poulain  <bpoulain@apple.com>

        Reviewed by NOBODY (OOPS!).

        Revert: "Move event handling from WKWindowSendEvent to [WAKWindow sendEvent:]."

        The calls to WKWindowSendEvent() expect the function to be synchronous. This
        was no longer the case with that patch.

        * WebCore.exp.in:
        * page/ios/EventHandlerIOS.mm:
        (WebCore::lastEventIsMouseUp):
        * wak/WAKWindow.h:
        * wak/WAKWindow.mm:
        (-[WAKWindow sendEvent:]):
        * wak/WKWindow.h:
        * wak/WKWindow.mm:
        (WKWindowSendEvent):
        (WKEventGetCurrentEvent):

2011-10-20  Benjamin Poulain  <bpoulain@apple.com>

        Reviewed by Ian Henderson.

        <rdar://problem/7292622> Replace WK with WAK
        Move event handling from WKWindowSendEvent to [WAKWindow sendEvent:].

        * WebCore.exp.in:
        * page/ios/EventHandlerIOS.mm:
        (WebCore::lastEventIsMouseUp):
        * wak/WAKWindow.h:
        * wak/WAKWindow.mm:
        (-[WAKWindow sendEvent:]):
        (+[WAKWindow currentEvent]):
        * wak/WKWindow.h:
        * wak/WKWindow.mm:
        (WKWindowSendEvent):

2011-10-19  Benjamin Poulain  <bpoulain@apple.com>

        Reviewed by Ian Henderson.

        <rdar://problem/7292622> Replace WK with WAK
        Move the frame attribute from WKWindow to WAKWindow.

        * WebCore.exp.in:
        * wak/WAKWindow.h:
        * wak/WAKWindow.mm:
        (-[WAKWindow initWithLayer:]):
        (-[WAKWindow initWithFrame:]):
        (-[WAKWindow setFrame:display:]):
        (-[WAKWindow frame]):
        (-[WAKWindow setContentRect:]):
        * wak/WKWindow.h:
        * wak/WKWindow.mm:
        (WKWindowCreate):
        (WKWindowSetContentRect):

2011-10-19  Benjamin Poulain  <bpoulain@apple.com>

        Reviewed by Ian Henderson.

        <rdar://problem/7292622> Replace WK with WAK
        Move useOrientationDependentFontAntialiasing from WKWindow to being a property of WAKWindow

        * wak/WAKWindow.h:
        * wak/WAKWindow.mm:
        (-[WAKWindow initWithLayer:]):
        * wak/WKWindow.h:

2011-10-19  Benjamin Poulain  <bpoulain@apple.com>

        Reviewed by Ian Henderson.

        Keep the value of Screen Scale in WAKWindow only

        Instead of pushing the value of screen scale from WAKWindow to the TileCache,
        access the value directly from WAKWindow when needed.
        This avoid the duplicated data and the risk the two objects get out of sync.

        * platform/ios/TileCache.h:
        * platform/ios/TileCache.mm:
        (WebCore::TileCache::TileCache):
        (WebCore::TileCache::screenScale):
        * platform/ios/TileGridTile.mm:
        (WebCore::TileGridTile::TileGridTile):
        * wak/WAKWindow.mm:
        (-[WAKWindow setScreenScale:]):

2011-10-19  Benjamin Poulain  <bpoulain@apple.com>

        Reviewed by Ian Henderson.

        <rdar://problem/7292622> Replace WK with WAK
        Move the screen size and scale attributes from WKWindow to WAKWindow.

        * wak/WAKWindow.h:
        * wak/WAKWindow.mm:
        (-[WAKWindow initWithLayer:]):
        (-[WAKWindow initWithFrame:]):
        (-[WAKWindow setScreenSize:]):
        (-[WAKWindow screenSize]):
        (-[WAKWindow setAvailableScreenSize:]):
        (-[WAKWindow availableScreenSize]):
        (-[WAKWindow setScreenScale:]):
        (-[WAKWindow screenScale]):
        * wak/WKWindow.h:
        * wak/WKWindow.mm:
        (WKWindowCreate):

2011-10-18  Benjamin Poulain  <bpoulain@apple.com>

        Reviewed by Ian Henderson.

        <rdar://problem/7292622> Replace WK with WAK
        Get rid of the SetNeedsDisplay functions from the WK C APIs

        Move the code from WKView to WAKView and remove all the C functions.

        * WebCore.exp.in:
        * wak/WAKView.mm:
        (-[WAKView setNeedsDisplayInRect:]):
        * wak/WKScrollView.mm:
        (_WKScrollViewSetDocumentViewOrigin):
        * wak/WKView.h:
        * wak/WKView.mm:
        * wak/WKWindow.h:
        * wak/WKWindow.mm:
        (WKWindowDrawRect): WKWindowSetNeedsDisplay(false) does not do any operation, the call
        can be removed.

2011-10-18  Benjamin Poulain  <bpoulain@apple.com>

        Reviewed by Ian Henderson.

        <rdar://problem/7292622> Replace WK with WAK
        Move WKView focus locking and unlocking to WAKView

        The globalFocusView become a WAKView and the focus functions are moved from WKView to private
        methods of WAKView.

        * WebCore.exp.in:
        * wak/WAKView.mm:
        (setGlobalFocusView):
        (+[WAKView focusView]):
        (-[WAKView _lockFocusViewInContext:]):
        (-[WAKView _unlockFocusViewInContext:]):
        (-[WAKView _drawRect:context:lockFocus:]):
        (-[WAKView lockFocus]):
        (-[WAKView unlockFocus]):
        * wak/WKView.h:
        * wak/WKView.mm:
        (WKViewGetTransform):
        (WKViewConvertRectToSuperview):
        (WKViewConvertPointToSuperview):
        (WKViewConvertPointFromSuperview):
        (WKViewConvertRectFromSuperview):

2011-10-18  Benjamin Poulain  <bpoulain@apple.com>

        Reviewed by Ian Henderson.

        <rdar://problem/7292622> Replace WK with WAK
        Move the drawing responsibilities from WKView to WAKView

        Drawing was done through WKView's _WKViewDraw by setting the context and calling drawCallback on WAKView.

        With this patch, this code is moved to [WAKView _drawRect:context:lockFocus:].

        The two states isHidden and drawsOwnDescendants are moved from WKViewRef to WAKView as they are no longer
        needed by the C API.

        * WebCore.exp.in:
        * wak/WAKView.h:
        * wak/WAKView.mm:
        (-[WAKView initWithFrame:]):
        (-[WAKView setNeedsDisplay:]):
        (-[WAKView setNeedsDisplayInRect:]):
        (-[WAKView display]):
        (-[WAKView _drawRect:context:lockFocus:]):
        (-[WAKView displayRect:]):
        (-[WAKView displayRectIgnoringOpacity:]):
        (-[WAKView displayRectIgnoringOpacity:inContext:]):
        (-[WAKView setHidden:]):
        (-[WAKView _setDrawsOwnDescendants:]):
        * wak/WKScrollView.mm:
        (_WKScrollViewSetDocumentViewOrigin):
        (WKScrollViewInitialize):
        * wak/WKView.h:
        * wak/WKView.mm:
        (WKViewInitialize):
        (WKViewSetNeedsDisplayInRect):
        (_WKViewLockFocus):
        (_WKViewUnlockFocus):
        (WKViewDisplayRect):

2011-10-16  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/10291619> Fix arm64 build of JavaScriptCore, WebCore, WebKit

        Reviewed by Cameron Zwarich.

        * Configurations/Base.xcconfig: Don't use -Wshorten-64-to-32
        when building arm64.  This matches Mac OS X 64-bit builds.
        * Configurations/WebCore.xcconfig: Define
        EXPORTED_SYMBOLS_FILE_arm64 so the correct export file is found.
        * DerivedSources.make: Create WebCore.LP64.arm64.exp if needed.

2011-10-14  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/10287123> WebCore_Sim fails to build for x86_64

        Reviewed by Joseph Pecoraro.

        Merged ToT WebKit r97538.

        Fixes the following build errors:

            platform/graphics/cg/ImageCG.cpp:249:46:{249:46-249:54}: error: no matching function for call to 'min' [3]
                     image = frameAtIndex(m_currentFrame, std::min(1.0f, std::max(transformedDstRect.size.width  / srcRect.width(), transformedDstRect.size.height / srcRect.height())));
                                                          ^~~~~~~~

            dom/ViewportArguments.cpp:157:35:{157:35-157:38}: error: no matching function for call to 'max' [3]
                         result.initialScale = max(result.initialScale, availableHeight / args.height);
                                               ^~~
            dom/ViewportArguments.cpp:185:13:{185:13-185:16}: error: no matching function for call to 'max' [3]
                 width = max(width, availableWidth / result.initialScale);
                         ^~~
            dom/ViewportArguments.cpp:186:14:{186:14-186:17}: error: no matching function for call to 'max' [3]
                 height = max(height, availableHeight / result.initialScale);
                          ^~~
            dom/ViewportArguments.cpp:191:27:{191:27-191:30}: error: no matching function for call to 'max' [3]
                 result.minimumScale = max(result.minimumScale, max(availableWidth / width, availableHeight / height));
                                       ^~~

            wak/WKGraphics.mm:200:9:{200:9-200:32}: error: no matching function for call to 'CGContextSetFillPattern' [3]
                     CGContextSetFillPattern(context, pattern, &patternAlpha);
                     ^~~~~~~~~~~~~~~~~~~~~~~
            wak/WKGraphics.mm:204:9:{204:9-204:34}: error: no matching function for call to 'CGContextSetStrokePattern' [3]
                     CGContextSetStrokePattern(context, pattern, &patternAlpha);
                     ^~~~~~~~~~~~~~~~~~~~~~~~~

            wak/WKView.mm:193:23:{193:25-193:44}: error: assigning to 'float *' from incompatible type 'CGFloat *' (aka 'double *') [3]
                     origFrameXorY = &newFrame->origin.y;
                                   ^ ~~~~~~~~~~~~~~~~~~~
            wak/WKView.mm:194:32:{194:34-194:56}: error: assigning to 'float *' from incompatible type 'CGFloat *' (aka 'double *') [3]
                     origFrameWidthOrHeight = &newFrame->size.height;
                                            ^ ~~~~~~~~~~~~~~~~~~~~~~
            wak/WKView.mm:199:23:{199:25-199:44}: error: assigning to 'float *' from incompatible type 'CGFloat *' (aka 'double *') [3]
                     origFrameXorY = &newFrame->origin.x;
                                   ^ ~~~~~~~~~~~~~~~~~~~
            wak/WKView.mm:200:32:{200:34-200:55}: error: assigning to 'float *' from incompatible type 'CGFloat *' (aka 'double *') [3]
                     origFrameWidthOrHeight = &newFrame->size.width;
                                            ^ ~~~~~~~~~~~~~~~~~~~~~

        * Configurations/Base.xcconfig: Don't use -Wshorten-64-to-32
        when building the 64-bit simulator.  Matches Mac OS X 64-bit
        builds.
        * Configurations/WebCore.xcconfig: Define EXPORTED_SYMBOLS_FILE
        for 64-bit Simulator.
        * DerivedSources.make: Create the 64-bit Simulator export file.
        * dom/ViewportArguments.cpp:
        (WebCore::computeViewportAttributes): Use std::max<float>()
        instead of std::max().
        * platform/graphics/cg/ImageCG.cpp:
        (WebCore::BitmapImage::draw): Use std::min<float>() instead of
        std::min().
        * wak/WKGraphics.mm:
        (WKSetPattern): Use CGFloat instead of float.
        * wak/WKView.mm:
        (_WKViewAutoresizeCoord): Ditto.

    2011-10-14  David Kilzer  <ddkilzer@apple.com>

        <http://webkit.org/b/70158> Fix clang compiler warnings

        Reviewed by Darin Adler.

        * dom/ViewportArguments.cpp:
        (WebCore::computeViewportAttributes): Use std::max<float>()
        instead of std::max().

2011-10-11  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/10269662> Sundance: HiDPI: -webkit-mask-box-image doesn't always work properly at 2x

        Merged iOS Hoodoo branch r1075405.

    2011-10-09  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/10141026> HiDPI: -webkit-mask-box-image doesn't always work properly at 2x

        Merged ToT WebKit r94206, r94299, r94420, r94593, r94596, r94597, r94912, r95058, r95096, r95099, r95386, r95121, r95129.

    2011-09-14  David Hyatt  <hyatt@apple.com>

        https://bugs.webkit.org/show_bug.cgi?id=52736

        Tiles were not being properly centered within border image sides for the "repeat"
        keyword. This patch fixes the buggy math behind the pattern tiling to actually get
        the initial phases correct.

        Reviewed by Sam Weinig.
        
        Added new tests in fast/borders and updated broken existing tests.

        * platform/graphics/Image.cpp:
        (WebCore::Image::drawTiled):

    2011-09-14  David Hyatt  <hyatt@apple.com>

        https://bugs.webkit.org/show_bug.cgi?id=68103
        
        Centered portions of border images don't render correctly. Make the tile scale factor have to be
        explicitly passed in and modify paintNinePieceImage to compute it for all sides. The attempts to
        implicitly compute the scale for the pattern based off the source and destination rects just don't
        work, since the center image rects don't provide the right information to be able to infer the
        scale factor.

        Reviewed by Sam Weinig.

        Reset all the existing fast/borders pixel results to Lion for these changes.

        * platform/graphics/GraphicsContext.cpp:
        (WebCore::GraphicsContext::drawTiledImage):
        * platform/graphics/GraphicsContext.h:
        * platform/graphics/Image.cpp:
        (WebCore::Image::drawTiled):
        * platform/graphics/Image.h:
        * rendering/RenderBoxModelObject.cpp:
        (WebCore::RenderBoxModelObject::paintNinePieceImage):

    2011-09-17  David Hyatt  <hyatt@apple.com>

        https://bugs.webkit.org/show_bug.cgi?id=68307
        
        Crash in border image cssText. Make sure to null check all the components, since they're all
        optional now.

        Reviewed by Sam Weinig.

        Added fast/borders/border-image-slice-omission.html

        * css/CSSBorderImageValue.cpp:
        (WebCore::CSSBorderImageValue::cssText):

    2011-09-14  David Hyatt  <hyatt@apple.com>

        https://bugs.webkit.org/show_bug.cgi?id=68040
        
        Make sure border image sub-properties can be specified in any order.

        Reviewed by Beth Dakin.

        New tests in fast/borders.

        * css/CSSParser.cpp:
        (WebCore::BorderImageParseContext::BorderImageParseContext):
        (WebCore::BorderImageParseContext::canAdvance):
        (WebCore::BorderImageParseContext::setCanAdvance):
        (WebCore::BorderImageParseContext::allowCommit):
        (WebCore::BorderImageParseContext::allowImage):
        (WebCore::BorderImageParseContext::allowImageSlice):
        (WebCore::BorderImageParseContext::allowSlash):
        (WebCore::BorderImageParseContext::requireWidth):
        (WebCore::BorderImageParseContext::requireOutset):
        (WebCore::BorderImageParseContext::commitImage):
        (WebCore::BorderImageParseContext::commitImageSlice):
        (WebCore::BorderImageParseContext::commitSlash):
        (WebCore::BorderImageParseContext::commitBorderWidth):
        (WebCore::BorderImageParseContext::commitBorderOutset):
        (WebCore::BorderImageParseContext::commitRepeat):
        (WebCore::CSSParser::parseBorderImage):
        (WebCore::CSSParser::parseBorderImageRepeat):
        (WebCore::CSSParser::parseBorderImageSlice):
        (WebCore::CSSParser::parseBorderImageQuad):
        * css/CSSParserValues.h:
        (WebCore::CSSParserValueList::previous):

    2011-09-13  David Hyatt  <hyatt@apple.com>

        https://bugs.webkit.org/show_bug.cgi?id=68050
        
        Regressions in some layout tests from making border/mask/reflection nine-piece-image
        parsing match the spec, which allows any of the pieces to be omitted and to also be
        specifiable in any order.
        
        When the higher level code suddenly allowed the image slices to be omitted, the fixup
        for legacy compatibility for reflections and masks in the parseBorderImageSlice function
        no longer happened because that function no longer got called.
        
        The fix is to properly set the defaults to include the "fill" keyword, so the fixup is
        applied to the NinePieceImages you create before you ever map anything in from the rules.
        
        This also has the side effect of fixing -webkit-max-box-image-slice to actually dump as
        "0 fill" instead of just "0", which is the correct initial value for this property.

        Reviewed by Adam Roben.

        * css/CSSParser.cpp:
        (WebCore::CSSParser::parseBorderImageSlice):
        * css/CSSStyleSelector.cpp:
        (WebCore::CSSStyleSelector::applyProperty):
        * rendering/style/StyleRareNonInheritedData.cpp:
        (WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData):
        * rendering/style/StyleReflection.h:
        (WebCore::StyleReflection::StyleReflection):

    2011-09-13  David Hyatt  <hyatt@apple.com>

        https://bugs.webkit.org/show_bug.cgi?id=68040

        Make sure border image sub-properties can be specified in any order.

        Reviewed by Beth Dakin.

        New tests in fast/borders.

        * css/CSSParser.cpp:
        (WebCore::BorderImageParseContext::BorderImageParseContext):
        (WebCore::BorderImageParseContext::canAdvance):
        (WebCore::BorderImageParseContext::setCanAdvance):
        (WebCore::BorderImageParseContext::allowCommit):
        (WebCore::BorderImageParseContext::allowImage):
        (WebCore::BorderImageParseContext::allowImageSlice):
        (WebCore::BorderImageParseContext::allowSlash):
        (WebCore::BorderImageParseContext::requireWidth):
        (WebCore::BorderImageParseContext::requireOutset):
        (WebCore::BorderImageParseContext::commitImage):
        (WebCore::BorderImageParseContext::commitImageSlice):
        (WebCore::BorderImageParseContext::commitSlash):
        (WebCore::BorderImageParseContext::commitBorderWidth):
        (WebCore::BorderImageParseContext::commitBorderOutset):
        (WebCore::BorderImageParseContext::commitRepeat):
        (WebCore::CSSParser::parseBorderImage):
        (WebCore::CSSParser::parseBorderImageRepeat):
        (WebCore::CSSParser::parseBorderImageSlice):
        (WebCore::CSSParser::parseBorderImageQuad):
        * css/CSSParserValues.h:
        (WebCore::CSSParserValueList::previous):

    2011-09-09  David Hyatt  <hyatt@apple.com>

        https://bugs.webkit.org/show_bug.cgi?id=67861
        
        Implement border-image-outset (and the mask equivalents).

        Reviewed by Beth Dakin.

        Added new tests in fast/borders and fast/reflections.

        * css/CSSBorderImageValue.cpp:
        (WebCore::CSSBorderImageValue::CSSBorderImageValue):
        (WebCore::CSSBorderImageValue::cssText):
        * css/CSSBorderImageValue.h:
        (WebCore::CSSBorderImageValue::create):
        Add m_outset field to CSSBorderImageValue and teach it how to dump the field as
        part of cssText().

        * css/CSSComputedStyleDeclaration.cpp:
        (WebCore::valueForNinePieceImageQuad):
        (WebCore::valueForNinePieceImage):
        (WebCore::CSSComputedStyleDeclaration::getPropertyCSSValue):
        Add support for border-image-outset and -webkit-mask-box-image-outset. Refactor
        the code so that border-image-width and border-image-outset use a common
        function.

        * css/CSSParser.cpp:
        (WebCore::CSSParser::parseValue):
        (WebCore::BorderImageParseContext::BorderImageParseContext):
        (WebCore::BorderImageParseContext::allowOutset):
        (WebCore::BorderImageParseContext::commitSlash):
        (WebCore::BorderImageParseContext::commitBorderWidth):
        (WebCore::BorderImageParseContext::commitBorderOutset):
        (WebCore::BorderImageParseContext::commitRepeat):
        (WebCore::BorderImageParseContext::commitBorderImage):
        (WebCore::CSSParser::parseBorderImage):
        Teach the border image parsing code about outsets. This code will soon be
        replaced by true shorthand parsing code, but for now keep it working and add
        outset support to it.

        (WebCore::BorderImageQuadParseContext::BorderImageQuadParseContext):
        (WebCore::BorderImageQuadParseContext::commitBorderImageQuad):
        (WebCore::CSSParser::parseBorderImageQuad):
        (WebCore::CSSParser::parseBorderImageWidth):
        (WebCore::CSSParser::parseBorderImageOutset):
        * css/CSSParser.h:
        Refactor the border-image-width code so that it can be shared by border-image-outset, since
        they are extremely similar.

        * css/CSSPropertyNames.in:
        Add the new properties.

        * css/CSSStyleSelector.cpp:
        (WebCore::CSSStyleSelector::applyProperty):
        (WebCore::CSSStyleSelector::mapNinePieceImage):
        (WebCore::CSSStyleSelector::mapNinePieceImageQuad):
        (WebCore::CSSStyleSelector::loadPendingImages):
        * css/CSSStyleSelector.h:
        Refactor the code so that width/outset share common mapping functions. Add support for outset.

        * rendering/InlineFlowBox.cpp:
        (WebCore::InlineFlowBox::addToLine):
        (WebCore::InlineFlowBox::addBoxShadowVisualOverflow):
        (WebCore::InlineFlowBox::addBorderOutsetVisualOverflow):
        (WebCore::InlineFlowBox::computeOverflow):
        Add new functions for computing the visual overflow caused by border outsets. Fix bugs in
        the shadow overflow code as well.

        (WebCore::clipRectForNinePieceImageStrip):
        (WebCore::InlineFlowBox::paintBoxDecorations):
        (WebCore::InlineFlowBox::paintMask):
        * rendering/InlineFlowBox.h:
        Make sure the clip rect pushed when painting one piece of a split inline strip is expanded to
        include the border and mask outsets. Always include the block direction expansion, and conditionally
        include the inline direction expansion based off includeLogicalLeftEdge()/includeLogicalRightEdge().
        clipRectForNinePieceImageStrip is a common function shared by masks and border images that does this
        work.

        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::computeOverflow):
        * rendering/RenderBox.cpp:
        (WebCore::RenderBox::maskClipRect):
        (WebCore::RenderBox::addBoxShadowAndBorderOverflow):
        * rendering/RenderBox.h:
        Rename addShadowOverflow to addBoxShadowAndBorderOverflow. Have it compute both shadow and border image
        outset overflow. Fix bugs with shadow overflow computation.

        * rendering/RenderBoxModelObject.cpp:
        (WebCore::RenderBoxModelObject::paintNinePieceImage):
        Change painting to apply the outsets to inflate the border image drawing area.

        * rendering/RenderEmbeddedObject.cpp:
        (WebCore::RenderEmbeddedObject::layout):
        * rendering/RenderIFrame.cpp:
        (WebCore::RenderIFrame::layout):
        Patched to call the renamed addBoxShadowAndBorderOverflow function instead of addShadowOverflow.

        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::calculateRects):
        Patched to no longer apply box-shadow to overflow clip areas when inflating the intersection area for the
        layer bounds. Instead we generically apply all visual overflow so that border image outsets will also be
        included. This fixes https://bugs.webkit.org/show_bug.cgi?id=37467.

        * rendering/RenderReplaced.cpp:
        (WebCore::RenderReplaced::layout):
        Patched to call the renamed addBoxShadowAndBorderOverflow function instead of addShadowOverflow.

        * rendering/style/NinePieceImage.cpp:
        (WebCore::NinePieceImage::operator==):
        * rendering/style/NinePieceImage.h:
        (WebCore::NinePieceImage::NinePieceImage):
        (WebCore::NinePieceImage::outset):
        (WebCore::NinePieceImage::setOutset):
        (WebCore::NinePieceImage::computeOutset):
        (WebCore::NinePieceImage::copyOutsetFrom):
        Add the outset field to NinePieceImage along with some helpers for manipulating outsets.

        * rendering/style/RenderStyle.cpp:
        (WebCore::RenderStyle::getImageOutsets):
        (WebCore::RenderStyle::getImageHorizontalOutsets):
        (WebCore::RenderStyle::getImageVerticalOutsets):
        * rendering/style/RenderStyle.h:
        (WebCore::InheritedFlags::hasBorderImageOutsets):
        (WebCore::InheritedFlags::getBorderImageOutsets):
        (WebCore::InheritedFlags::getBorderImageHorizontalOutsets):
        (WebCore::InheritedFlags::getBorderImageVerticalOutsets):
        (WebCore::InheritedFlags::getBorderImageInlineDirectionOutsets):
        (WebCore::InheritedFlags::getBorderImageBlockDirectionOutsets):
        (WebCore::InheritedFlags::getImageInlineDirectionOutsets):
        (WebCore::InheritedFlags::getImageBlockDirectionOutsets):
        Helpers for outset computation used by painting and overflow functions.

    2011-09-06  David Hyatt  <hyatt@apple.com>

        https://bugs.webkit.org/show_bug.cgi?id=67672

        Improve background-size parsing. Make it actually dump auto values properly, and also make it omit
        auto if it is the second value. Fix the parsing to not create a value list when only a singleton value
        is specified.

        Reviewed by Beth Dakin.

        Covered well by existing tests.

        * css/CSSComputedStyleDeclaration.cpp:
        (WebCore::fillSizeToCSSValue):
        * css/CSSParser.cpp:
        (WebCore::CSSParser::parseFillSize):
        * css/CSSStyleSelector.cpp:
        (WebCore::CSSStyleSelector::mapFillSize):

    2011-09-06  David Hyatt  <hyatt@apple.com>

        https://bugs.webkit.org/show_bug.cgi?id=67657
        
        Implement border-image-width. This patch stops short of converting -webkit-border-image to a shorthand.
        I'll do that in the next patch.

        Note that unlike the -webkit-border-image syntax, border-image-width does not actually set the border
        width values. It simply makes cuts into the border image drawing area (which for now is just the border
        box, but that will change once border-image-outset is implemented).
        
        This means we need additional storage for the slices, since they are now separate from the border widths.
        
        For backwards compatibility, -webkit-border-image will continue to set the border widths when
        border-image-width is specified in the -webkit-border-image shorthand.

        Reviewed by Beth Dakin.

        Added new tests in fast/borders.

        * css/CSSBorderImageSliceValue.cpp:
        (WebCore::CSSBorderImageSliceValue::CSSBorderImageSliceValue):
        (WebCore::CSSBorderImageSliceValue::cssText):
        * css/CSSBorderImageSliceValue.h:
        (WebCore::CSSBorderImageSliceValue::create):
        (WebCore::CSSBorderImageSliceValue::slices):
        Rename slices() to imageSlices() and add borderSlices() and m_borderSlices to hold the desired cuts
        for the border image drawing area. Converted the slices over to the new Quad primitive value (a RectBase
        subclass that is identical to Rect but dumps as a quad instead of a rect primitive).

        * css/CSSBorderImageValue.cpp:
        (WebCore::CSSBorderImageValue::CSSBorderImageValue):
        (WebCore::CSSBorderImageValue::cssText):
        * css/CSSBorderImageValue.h:
        (WebCore::CSSBorderImageValue::create):
        Make CSSBorderImageValue take the border slices during construction now.
    
        * css/CSSComputedStyleDeclaration.cpp:
        (WebCore::valueForNinePieceImageSlice):
        (WebCore::valueForNinePieceImageWidth):
        (WebCore::valueForNinePieceImageRepeat):
        (WebCore::valueForNinePieceImage):
        (WebCore::CSSComputedStyleDeclaration::getPropertyCSSValue):
        Add support for computed style via valueForNinePieceImageWidth. Patch all of the border image properties
        to dump the most compact form possible for the property values, e.g., "stretch stretch" becomes "stretch."

        * css/CSSParser.cpp:
        (WebCore::CSSParser::parseValue):
        (WebCore::CSSParser::parseReflect):
        (WebCore::BorderImageParseContext::BorderImageParseContext):
        (WebCore::BorderImageParseContext::commitImageSlice):
        (WebCore::BorderImageParseContext::commitBorderWidth):
        (WebCore::BorderImageParseContext::commitBorderImage):
        (WebCore::CSSParser::parseBorderImage):
        (WebCore::isBorderImageRepeatKeyword):
        (WebCore::CSSParser::parseBorderImageRepeat):
        (WebCore::BorderImageSliceParseContext::commitBorderImageSlice):
        (WebCore::CSSParser::parseBorderImageSlice):
        (WebCore::BorderImageWidthParseContext::BorderImageWidthParseContext):
        (WebCore::BorderImageWidthParseContext::allowNumber):
        (WebCore::BorderImageWidthParseContext::allowFinalCommit):
        (WebCore::BorderImageWidthParseContext::top):
        (WebCore::BorderImageWidthParseContext::commitNumber):
        (WebCore::BorderImageWidthParseContext::setAllowFinalCommit):
        (WebCore::BorderImageWidthParseContext::setTop):
        (WebCore::BorderImageWidthParseContext::commitBorderImageWidth):
        (WebCore::CSSParser::parseBorderImageWidth):
        * css/CSSParser.h:
        Modify the border-image code to pass off border-image-width parsing to parseBorderImageWidth.

        * css/CSSPrimitiveValue.cpp:
        (WebCore::isValidCSSUnitTypeForDoubleConversion):
        (WebCore::CSSPrimitiveValue::init):
        (WebCore::CSSPrimitiveValue::cleanup):
        (WebCore::CSSPrimitiveValue::getQuadValue):
        (WebCore::CSSPrimitiveValue::cssText):
        * css/CSSPrimitiveValue.h:
        (WebCore::CSSPrimitiveValue::getQuadValue):
        Add the new Quad value to CSSPrimitiveValue.
    
        * css/CSSPropertyNames.in:
        Add the new properties for border-image-width and -webkit-mask-box-image-width.

        * css/CSSStyleSelector.cpp:
        (WebCore::CSSStyleSelector::applyProperty):
        (WebCore::CSSStyleSelector::mapNinePieceImage):
        (WebCore::CSSStyleSelector::mapNinePieceImageSlice):
        (WebCore::CSSStyleSelector::mapNinePieceImageWidth):
        (WebCore::CSSStyleSelector::loadPendingImages):
        * css/CSSStyleSelector.h:
        Add the code to map the image width into border slices.
    
        * css/Rect.h:
        (WebCore::RectBase::top):
        (WebCore::RectBase::right):
        (WebCore::RectBase::bottom):
        (WebCore::RectBase::left):
        (WebCore::RectBase::setTop):
        (WebCore::RectBase::setRight):
        (WebCore::RectBase::setBottom):
        (WebCore::RectBase::setLeft):
        (WebCore::RectBase::RectBase):
        (WebCore::RectBase::~RectBase):
        (WebCore::Rect::create):
        (WebCore::Rect::Rect):
        (WebCore::Quad::create):
        (WebCore::Quad::Quad):
        Adding the new Quad value.

        * rendering/RenderBoxModelObject.cpp:
        (WebCore::computeBorderImageSide):
        (WebCore::RenderBoxModelObject::paintNinePieceImage):
        Modify painting to treat the border slices as separate from the border widths.
        
        * rendering/style/NinePieceImage.cpp:
        (WebCore::NinePieceImage::operator==):
        * rendering/style/NinePieceImage.h:
        (WebCore::NinePieceImage::NinePieceImage):
        (WebCore::NinePieceImage::imageSlices):
        (WebCore::NinePieceImage::setImageSlices):
        (WebCore::NinePieceImage::borderSlices):
        (WebCore::NinePieceImage::setBorderSlices):
        (WebCore::NinePieceImage::copyImageSlicesFrom):
        (WebCore::NinePieceImage::copyBorderSlicesFrom):
        * rendering/style/StyleRareNonInheritedData.cpp:
        Add the border slices.
        
        (WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData):
        * rendering/style/StyleReflection.h:
        (WebCore::StyleReflection::StyleReflection):
        Make sure masks and reflections default border-image-width to auto instead of 1, since that matches
        old behavior.

    2011-09-01  David Hyatt  <hyatt@apple.com>

        https://bugs.webkit.org/show_bug.cgi?id=67431
        
        Implement border-image-repeat. Similar to how border-image-slice was implemented, the parsing of the two
        repeat values has been moved into separate functions. The value is represented as a Pair (similar to how we
        handle border radius).

        Reviewed by Beth Dakin.

        Added fast/borders/border-image-repeat.html.

        * css/CSSBorderImageValue.cpp:
        (WebCore::CSSBorderImageValue::CSSBorderImageValue):
        (WebCore::CSSBorderImageValue::cssText):
        * css/CSSBorderImageValue.h:
        (WebCore::CSSBorderImageValue::create):
        Modified the CSSBorderImageValue (you're living on borrowed time, my friend!) to have a CSSValue that
        contains a Pair.

        * css/CSSComputedStyleDeclaration.cpp:
        (WebCore::valueForRepeatRule):
        (WebCore::valueForNinePieceImageRepeat):
        (WebCore::valueForNinePieceImage):
        (WebCore::CSSComputedStyleDeclaration::getPropertyCSSValue):
        Add support for the new properties. Break out the value retrieval for the image repeat rules into its
        own function, valueForNinePieceImageRepeat.

        * css/CSSParser.cpp:
        (WebCore::CSSParser::parseValue):
        (WebCore::BorderImageParseContext::BorderImageParseContext):
        (WebCore::BorderImageParseContext::allowRepeat):
        (WebCore::BorderImageParseContext::commitSlice):
        (WebCore::BorderImageParseContext::commitSlash):
        (WebCore::BorderImageParseContext::commitWidth):
        (WebCore::BorderImageParseContext::commitRepeat):
        (WebCore::BorderImageParseContext::commitBorderImage):
        (WebCore::CSSParser::parseBorderImage):
        Modified the parsing of border image to call into parseBorderImageRepeat for the repeat values.

        (WebCore::isBorderImageRepeatKeyword):
        (WebCore::CSSParser::parseBorderImageRepeat):
        The new parsing code for border-image-repeat is here. It will build up a CSSValue containing a Pair and
        return the result.

        * css/CSSParser.h:
        * css/CSSPropertyNames.in:
        Add the new properties.

        * css/CSSStyleSelector.cpp:
        (WebCore::CSSStyleSelector::applyProperty):
        (WebCore::CSSStyleSelector::mapNinePieceImage):
        (WebCore::CSSStyleSelector::mapNinePieceImageRepeat):
        * css/CSSStyleSelector.h:
        The mapping into the front end is done the same way as border-image-slice. Factor out the image repeat rules
        portion into mapNinePieceImageRepeat.

        * platform/graphics/Image.cpp:
        (WebCore::Image::drawTiled):
        * platform/graphics/Image.h:
        Add the new 'space' value as a valid image tiling rule. It's not yet supported and, like the 'round' value,
        is just mapped to 'repeat' for now.
        
        * rendering/style/NinePieceImage.h:
        (WebCore::NinePieceImage::copyRepeatFrom):
        Helper for copying only the repeat rules from another NinePieceImage.

    2011-08-31  David Hyatt  <hyatt@apple.com>

        https://bugs.webkit.org/show_bug.cgi?id=67321

        Implement border-image-slice. This will eventually be a component of the new border-image shorthand
        property. It holds the cuts that you make into the border image along with a new optional "fill"
        keyword that indicates whether or not the center should be filled with the middle slice of the image.
        
        By default -webkit-border-image has always filled, but this does not match the specification. To preserve
        backwards compatibility, -webkit-border-image will continue to fill by default, but this does slightly affect
        computed style results, since the "fill" keyword will now be included in property dumps.

        Reviewed by Beth Dakin.

        Added fast/borders/border-image-slices.html.

        * CMakeLists.txt:
        * WebCore.gypi:
        * WebCore.pro:
        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.xcodeproj/project.pbxproj:
        * css/CSSBorderImageSliceValue.cpp: Added.
        (WebCore::CSSBorderImageSliceValue::CSSBorderImageSliceValue):
        (WebCore::CSSBorderImageSliceValue::~CSSBorderImageSliceValue):
        (WebCore::CSSBorderImageSliceValue::cssText):
        * css/CSSBorderImageSliceValue.h: Added.
        (WebCore::CSSBorderImageSliceValue::create):
        (WebCore::CSSBorderImageSliceValue::isBorderImageSliceValue):
        Add a new CSSBorderImageSliceValue that holds both the four slices (as a CSS rect) and the
        fill keyword (as a boolean). Note that the cssText() dumping of the slices has been refined
        to be smarter, and it will no longer dump repeating values.

        * css/CSSBorderImageValue.cpp:
        (WebCore::CSSBorderImageValue::CSSBorderImageValue):
        (WebCore::CSSBorderImageValue::cssText):
        * css/CSSBorderImageValue.h:
        (WebCore::CSSBorderImageValue::create):
        CSSBorderImageValue now owns a CSSBorderImageSliceValue instead of just a CSS rect.

        * css/CSSComputedStyleDeclaration.cpp:
        (WebCore::valueForNinePieceImageSlice):
        (WebCore::valueForNinePieceImage):
        Add a new method, valueForNinePieceImageSlice, for getting the slices plus the fill value
        from the NinePieceImage and putting it into a CSSBorderImageSliceValue. This method is now used by
        valueForNinePieceImage to get the CSSBorderImageSliceValue that is part of the overall
        CSSBorderImageValue.
    
        (WebCore::CSSComputedStyleDeclaration::getPropertyCSSValue):
        Adding support for the new properties: border-image-slice and -webkit-mask-box-image-slice.

        * css/CSSParser.cpp:
        (WebCore::CSSParser::parseValue):
        (WebCore::BorderImageParseContext::BorderImageParseContext):
        (WebCore::BorderImageParseContext::allowBreak):
        (WebCore::BorderImageParseContext::commitImage):
        (WebCore::BorderImageParseContext::commitSlice):
        (WebCore::BorderImageParseContext::commitSlash):
        (WebCore::BorderImageParseContext::commitBorderImage):
        (WebCore::CSSParser::parseBorderImage):
        Modify parseBorderImage to no longer parse the slices itself. Instead it farms out the parsing
        to parseBorderImageSlice.

        (WebCore::BorderImageSliceParseContext::BorderImageSliceParseContext):
        (WebCore::BorderImageSliceParseContext::allowNumber):
        (WebCore::BorderImageSliceParseContext::allowFill):
        (WebCore::BorderImageSliceParseContext::allowFinalCommit):
        (WebCore::BorderImageSliceParseContext::top):
        (WebCore::BorderImageSliceParseContext::commitNumber):
        (WebCore::BorderImageSliceParseContext::commitFill):
        (WebCore::BorderImageSliceParseContext::setAllowFinalCommit):
        (WebCore::BorderImageSliceParseContext::setTop):
        (WebCore::BorderImageSliceParseContext::commitBorderImageSlice):
        (WebCore::CSSParser::parseBorderImageSlice):
        Slice parsing has now been broken out so that it can be parsed as a single property. In addition
        support for the "fill" keyword has been added to control image filling.

        * css/CSSParser.h:
        Modified to add the new parseBorderImageSlice method.

        * css/CSSPropertyNames.in:
        Add the new properties: border-image-slice and -webkit-mask-box-image-slice.

        * css/CSSStyleSelector.cpp:
        (WebCore::CSSStyleSelector::applyProperty):
        (WebCore::CSSStyleSelector::mapNinePieceImage):
        Rework mapNinePieceImage to call mapNinePieceImageSlice so that the mapping can be done just for
        the slices.

        (WebCore::CSSStyleSelector::mapNinePieceImageSlice):
        A new method that handles mapping just the slices into the front-end NinePieceImage.

        (WebCore::CSSStyleSelector::loadPendingImages):
        Modified to ensure the fill value is preserved when box-reflect makes a new NinePieceImage.

        * css/CSSStyleSelector.h:
        Added the new mapNinePieceImageSlice method.

        * css/CSSValue.h:
        (WebCore::CSSValue::isBorderImageSliceValue):
        Virtual function for identifying border image slice values.

        * rendering/RenderBoxModelObject.cpp:
        (WebCore::RenderBoxModelObject::paintNinePieceImage):
        The painting of the nine piece image has been modified to match the specification. The "fill"
        keyword controls whether or not the middle is painted.

        * rendering/style/NinePieceImage.cpp:
        (WebCore::NinePieceImage::operator==):
        The fill keyword has to be checked now for equality.

        * rendering/style/NinePieceImage.h:
        (WebCore::NinePieceImage::NinePieceImage):
        (WebCore::NinePieceImage::fill):
        (WebCore::NinePieceImage::setFill):
        Added the fill keyword to the front end NinePieceImage.

        (WebCore::NinePieceImage::copySlicesFrom):
        Added a helper to copy only the slices over from another NinePieceImage. Used when inheriting
        the border-image-slice property from a parent style.

    2011-08-31  David Hyatt  <hyatt@apple.com>

        https://bugs.webkit.org/show_bug.cgi?id=67300
        
        Add the new border-image-source property (and its corresponding analogue for masks, mask-box-image-source).
        Change the border-image parsing code to no longer consider "none" to represent the entire border-image
        expression, but instead to just mean "none" for the image component of the expression.
        
        Change the pending image code for border-image and mask-box-image to use the new *-source properties when
        loading the image so that they're considered the same.
        
        This is the first step towards eliminating the border-image parsing code in favor of just parsing it as
        a shorthand instead, but for now I'm implementing each property one by one, and once they're all there,
        we can cut over to border-image as a true shorthand.

        Reviewed by Beth Dakin.

        Added fast/borders/border-image-source.html.

        * css/CSSComputedStyleDeclaration.cpp:
        (WebCore::CSSComputedStyleDeclaration::getPropertyCSSValue):
        * css/CSSParser.cpp:
        (WebCore::CSSParser::parseValue):
        (WebCore::CSSParser::parseBorderImage):
        * css/CSSPropertyNames.in:
        * css/CSSStyleSelector.cpp:
        (WebCore::CSSStyleSelector::applyProperty):
        (WebCore::CSSStyleSelector::mapNinePieceImage):
        (WebCore::CSSStyleSelector::loadPendingImages):
        * rendering/style/NinePieceImage.h:
        (WebCore::NinePieceImage::setImage):
        * rendering/style/RenderStyle.h:
        (WebCore::InheritedFlags::borderImageSource):
        (WebCore::InheritedFlags::maskBoxImageSource):
        (WebCore::InheritedFlags::setBorderImageSource):
        (WebCore::InheritedFlags::setMaskBoxImageSource):
        (WebCore::InheritedFlags::initialBorderImageSource):
        (WebCore::InheritedFlags::initialMaskBoxImageSource):

2011-10-06  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by Scott Grant.

        <rdar://problem/10245309> Sub-TLF: <input type="file"> Upload Functionality

        No longer ifdef out the OpenSource pieces for <input type="file">.
        This enables the input and displays it like Desktop Safari, with
        a string next to the button. iOS does not display an icon. The UI
        is likely to change.

        The button triggers the following WebUIDelegate callback:
        -webView:runOpenPanelForFileButtonWithResultListener:allowMultipleFiles:

        * html/HTMLInputElement.h:
        * platform/ios/LocalizedStringsIPhone.mm:
        iOS implements only the localized strings it uses, so add the
        implementation for the string needed for a file upload description.

        * html/HTMLInputElement.cpp:
        (WebCore::HTMLInputElement::updateType):
        (WebCore::multipleFileUploadText):
        * platform/mac/FileChooserMac.mm:
        (WebCore::FileChooser::basenameForWidth):
        * rendering/RenderFileUploadControl.cpp:
        (WebCore::RenderFileUploadControl::RenderFileUploadControl):
        (WebCore::RenderFileUploadControl::~RenderFileUploadControl):
        (WebCore::RenderFileUploadControl::valueChanged):
        (WebCore::RenderFileUploadControl::chooseIconForFiles):
        (WebCore::RenderFileUploadControl::click):
        (WebCore::RenderFileUploadControl::updateFromElement):
        (WebCore::RenderFileUploadControl::paintObject):
        (WebCore::RenderFileUploadControl::fileTextValue):
        * rendering/RenderFileUploadControl.h:

2011-10-07  Benjamin Poulain  <bpoulain@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/8350969> Crash running webarchive/test-css-url-resources-in-stylesheets.html and test-css-url-resources-inline-styles.html

        WebCore expects ResourceResponse to have a MIME type with the content.
        The function didReceiveResponse() ensures that by calling adjustMIMETypeIfNecessary().
        That method should ensure there is a MIMEType, and that was not the case on iOS.

        The crashes in the WebArchive tests were due to the expectation that the local
        file of the Font is in the Archive with the default MIMEType.

        * platform/network/ios/WebCoreURLResponseIOS.mm:
        (WebCore::adjustMIMETypeIfNecessary):

2011-10-03  Ian Henderson  <ianh@apple.com>

        Reviewed by Simon Fraser.

        <rdar://problem/9633111> Tile cache layers are not pixel-aligned sometimes
        <rdar://problem/10041735> Dropping all zoomed out tiles on sina.com.cn

        Instead of trying to manage the frame of our (potentially transformed)
        tile host layer, work with the bounds directly.  We can round the
        bound size to avoid 10041735 and keep the bounds anchored to the top
        left to avoid 9633111.

        * platform/iphone/TileCache.mm:
        (WebCore::TileCache::hostLayerSizeChanged): No need to pass the frame.
        (WebCore::TileCache::adjustTileGridTransforms): We don't want to set
        the frame directly here -- we will probably end up with fractional
        bounds.  Just call updateHostLayerSize() and let the TileGrid figure
        out the proper dimensions.
        * platform/iphone/TileGrid.h:
        * platform/iphone/TileGrid.mm:
        (WebCore::TileGrid::updateHostLayerSize): Instead of taking an
        explicit size in the global coordinate space, we compute the proper
        size in the tile host layer's coordinate space and round it.
        * platform/iphone/TileLayer.mm:
        (-[TileHostLayer initWithTileGrid:WebCore::]):
        Keep tile host layers anchored to the top left as we change their
        bounds.

2011-10-03  Ian Henderson  <ianh@apple.com>

        Reviewed by Simon Fraser.

        <rdar://problem/9633111> Tile cache layers are not pixel-aligned sometimes
        <rdar://problem/10041735> Dropping all zoomed out tiles on sina.com.cn

        We are going to need to access the WAKWindow's host layer from
        TileGrid -- add an accessor to TileCache.  Refactor TileCache code to
        use the accessor.

        * platform/iphone/TileCache.h:
        * platform/iphone/TileCache.mm:
        (WebCore::TileCache::TileCache):
        (WebCore::TileCache::visibleRectInLayer):
        (WebCore::TileCache::hostLayer):
        (WebCore::TileCache::hostLayerSizeChanged):
        (WebCore::TileCache::commitScaleChange):
        (WebCore::TileCache::bringActiveTileGridToFront):
        (WebCore::TileCache::adjustTileGridTransforms):
        (WebCore::TileCache::drawLayer):
        (WebCore::TileCache::setNeedsDisplayInRect):

2011-09-30  Ian Henderson  <ianh@apple.com>

        Reviewed by David Carson.

        <rdar://problem/9987177> dropDistantTiles() default parameters are pure evil

        Remove default parameters from dropDistantTiles().  Add a comment
        about the meaning of the parameters at the affected callsite.

        * platform/iphone/TileCache.mm:
        (WebCore::TileCache::finishedCreatingTiles):
        * platform/iphone/TileGrid.h:

2011-09-30  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Carson.

        <rdar://problem/9725613> Top border draws in text input even when not specified in CSS

        Don't paint the top gradient text field decoration if the top
        border is invisible. Some previously unhandled cases were
        if the top-border had a 0 width, or if it was transparent.

        We still remain different from Desktop here. Desktop completely
        stops styling the textfield if CSS has modified any border property.
        On iOS we continue to apply the platform theme. This allows web
        content to continue to get the gradient, in most cases. As always,
        web content can opt out with -webkit-appearance: none.

        * rendering/RenderThemeIOS.cpp:
        (WebCore::RenderThemeIOS::paintTextFieldDecorations):

2011-09-30  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by Eric Carlson and David Carson.

        <rdar://problem/10068499> WebKit: <audio> tag with .pls now broken

        Add "audio/scpls" to the cached list of supported mime
        types. This matches the QuickTime Plugin's list.

        * platform/graphics/iphone/MediaPlayerPrivateIPhone.mm:
        (WebCore::mimeTypeCache):

2011-09-30  Dan Bernstein  <mitz@apple.com>

        Reviewed by Dave Kilzer.

        Renamed iPhone.xcconfig to iOS.xcconfig

        * Configurations/iOS.xcconfig: Copied from Source/WebCore/Configurations/iPhone.xcconfig.
        * Configurations/iPhone.xcconfig: Removed.
        * WebCore.xcodeproj/project.pbxproj:

2011-09-29  Dan Bernstein  <mitz@apple.com>

        Reviewed by Dave Kilzer.

        Change filename and class name suffixes from IPhone to IOS

        * WebCore.exp.in:
        * WebCore.xcodeproj/project.pbxproj:
        * accessibility/ios/AXObjectCacheIOS.mm: Copied from Source/WebCore/accessibility/ios/AXObjectCacheIPhone.mm.
        * accessibility/ios/AXObjectCacheIPhone.mm: Removed.
        * accessibility/ios/AccessibilityObjectIOS.mm: Copied from Source/WebCore/accessibility/ios/AccessibilityObjectIPhone.mm.
        * accessibility/ios/AccessibilityObjectIPhone.mm: Removed.
        * accessibility/ios/AccessibilityObjectWrapperIOS.h: Copied from Source/WebCore/accessibility/ios/AccessibilityObjectWrapperIPhone.h.
        * accessibility/ios/AccessibilityObjectWrapperIOS.mm: Copied from Source/WebCore/accessibility/ios/AccessibilityObjectWrapperIPhone.mm.
        * accessibility/ios/AccessibilityObjectWrapperIPhone.h: Removed.
        * accessibility/ios/AccessibilityObjectWrapperIPhone.mm: Removed.
        * bindings/objc/PublicDOMInterfaces.h:
        * bindings/objc/PublicDOMInterfacesIOS.h: Copied from Source/WebCore/bindings/objc/PublicDOMInterfacesIPhone.h.
        * bindings/objc/PublicDOMInterfacesIPhone.h: Removed.
        * dom/Document.cpp:
        (WebCore::Document::Document):
        * dom/Document.h:
        * dom/Document.idl:
        * dom/DocumentIOS.cpp: Copied from Source/WebCore/dom/DocumentIPhone.cpp.
        * dom/DocumentIOS.h: Copied from Source/WebCore/dom/DocumentIPhone.h.
        * dom/DocumentIOS.idl: Copied from Source/WebCore/dom/DocumentIPhone.idl.
        * dom/DocumentIOSForward.h: Copied from Source/WebCore/dom/DocumentIPhoneForward.h.
        * dom/DocumentIPhone.cpp: Removed.
        * dom/DocumentIPhone.h: Removed.
        * dom/DocumentIPhone.idl: Removed.
        * dom/DocumentIPhoneForward.h: Removed.
        * editing/ios/EditorIOS.mm: Copied from Source/WebCore/editing/ios/EditorIPhone.mm.
        (WebCore::Editor::newGeneralClipboard):
        * editing/ios/EditorIPhone.mm: Removed.
        * html/HTMLMediaElement.cpp:
        * html/HTMLObjectElement.cpp:
        * loader/FrameLoader.cpp:
        * loader/MainResourceLoader.cpp:
        * loader/mac/ResourceLoaderMac.mm:
        * page/ios/EventHandlerIOS.mm: Copied from Source/WebCore/page/ios/EventHandlerIPhone.mm.
        * page/ios/EventHandlerIOSTouch.cpp: Copied from Source/WebCore/page/ios/EventHandlerIPhoneTouch.cpp.
        * page/ios/EventHandlerIPhone.mm: Removed.
        * page/ios/EventHandlerIPhoneTouch.cpp: Removed.
        * page/ios/FrameIOS.mm: Copied from Source/WebCore/page/ios/FrameIPhone.mm.
        * page/ios/FrameIPhone.mm: Removed.
        * platform/RuntimeApplicationChecksIOS.h: Copied from Source/WebCore/platform/RuntimeApplicationChecksIPhone.h.
        * platform/RuntimeApplicationChecksIOS.mm: Copied from Source/WebCore/platform/RuntimeApplicationChecksIPhone.mm.
        * platform/RuntimeApplicationChecksIPhone.h: Removed.
        * platform/RuntimeApplicationChecksIPhone.mm: Removed.
        * platform/cf/KURLCFNet.cpp:
        * platform/cocoa/KeyEventCocoa.mm:
        * platform/graphics/MediaPlayer.cpp:
        * platform/graphics/ios/GraphicsContext3DIOS.h: Copied from Source/WebCore/platform/graphics/ios/GraphicsContext3DIPhone.h.
        * platform/graphics/ios/GraphicsContext3DIPhone.h: Removed.
        * platform/graphics/ios/IconIOS.mm: Copied from Source/WebCore/platform/graphics/ios/IconIPhone.mm.
        * platform/graphics/ios/IconIPhone.mm: Removed.
        * platform/graphics/ios/MediaPlayerPrivateIOS.h: Copied from Source/WebCore/platform/graphics/ios/MediaPlayerPrivateIPhone.h.
        * platform/graphics/ios/MediaPlayerPrivateIOS.mm: Copied from Source/WebCore/platform/graphics/ios/MediaPlayerPrivateIPhone.mm.
        (WebCore::MediaPlayerPrivateIOS::create):
        (WebCore::MediaPlayerPrivateIOS::registerMediaEngine):
        (WebCore::MediaPlayerPrivateIOS::MediaPlayerPrivateIOS):
        (WebCore::MediaPlayerPrivateIOS::~MediaPlayerPrivateIOS):
        (WebCore::MediaPlayerPrivateIOS::setMediaPlayerProxy):
        (WebCore::MediaPlayerPrivateIOS::load):
        (WebCore::MediaPlayerPrivateIOS::cancelLoad):
        (WebCore::MediaPlayerPrivateIOS::addDeferredRequest):
        (WebCore::MediaPlayerPrivateIOS::processDeferredRequests):
        (WebCore::MediaPlayerPrivateIOS::setPoster):
        (WebCore::MediaPlayerPrivateIOS::setControls):
        (WebCore::MediaPlayerPrivateIOS::processPendingRequests):
        (WebCore::MediaPlayerPrivateIOS::prepareToPlay):
        (WebCore::MediaPlayerPrivateIOS::play):
        (WebCore::MediaPlayerPrivateIOS::pause):
        (WebCore::MediaPlayerPrivateIOS::duration):
        (WebCore::MediaPlayerPrivateIOS::currentTime):
        (WebCore::MediaPlayerPrivateIOS::seek):
        (WebCore::MediaPlayerPrivateIOS::setEndTime):
        (WebCore::MediaPlayerPrivateIOS::paused):
        (WebCore::MediaPlayerPrivateIOS::seeking):
        (WebCore::MediaPlayerPrivateIOS::naturalSize):
        (WebCore::MediaPlayerPrivateIOS::hasVideo):
        (WebCore::MediaPlayerPrivateIOS::hasAudio):
        (WebCore::MediaPlayerPrivateIOS::volume):
        (WebCore::MediaPlayerPrivateIOS::setVolume):
        (WebCore::MediaPlayerPrivateIOS::rate):
        (WebCore::MediaPlayerPrivateIOS::setRate):
        (WebCore::MediaPlayerPrivateIOS::setMuted):
        (WebCore::MediaPlayerPrivateIOS::dataRate):
        (WebCore::MediaPlayerPrivateIOS::networkState):
        (WebCore::MediaPlayerPrivateIOS::readyState):
        (WebCore::MediaPlayerPrivateIOS::maxTimeBuffered):
        (WebCore::MediaPlayerPrivateIOS::bytesLoaded):
        (WebCore::MediaPlayerPrivateIOS::totalBytesKnown):
        (WebCore::MediaPlayerPrivateIOS::totalBytes):
        (WebCore::MediaPlayerPrivateIOS::maxTimeSeekable):
        (WebCore::MediaPlayerPrivateIOS::buffered):
        (WebCore::MediaPlayerPrivateIOS::setSize):
        (WebCore::MediaPlayerPrivateIOS::setVisible):
        (WebCore::MediaPlayerPrivateIOS::paint):
        (WebCore::MediaPlayerPrivateIOS::supportsType):
        (WebCore::MediaPlayerPrivateIOS::getSupportedTypes):
        (WebCore::MediaPlayerPrivateIOS::isAvailable):
        (WebCore::MediaPlayerPrivateIOS::supportsAcceleratedRendering):
        (WebCore::MediaPlayerPrivateIOS::enterFullScreen):
        (WebCore::MediaPlayerPrivateIOS::exitFullScreen):
        (WebCore::MediaPlayerPrivateIOS::attributeChanged):
        (WebCore::MediaPlayerPrivateIOS::readyForPlayback):
        (WebCore::MediaPlayerPrivateIOS::hasClosedCaptions):
        (WebCore::MediaPlayerPrivateIOS::setClosedCaptionsVisible):
        (WebCore::MediaPlayerPrivateIOS::deliverNotification):
        (-[WebCoreMediaPlayerNotificationHelper initWithClient:]):
        * platform/graphics/ios/MediaPlayerPrivateIPhone.h: Removed.
        * platform/graphics/ios/MediaPlayerPrivateIPhone.mm: Removed.
        * platform/graphics/mac/GraphicsContext3DMac.mm:
        * platform/graphics/opengl/Extensions3DOpenGL.cpp:
        * platform/graphics/opengl/GraphicsContext3DOpenGL.cpp:
        * platform/ios/ClipboardIOS.h: Copied from Source/WebCore/platform/ios/ClipboardIPhone.h.
        (WebCore::ClipboardIOS::create):
        * platform/ios/ClipboardIOS.mm: Copied from Source/WebCore/platform/ios/ClipboardIPhone.mm.
        (WebCore::Clipboard::create):
        (WebCore::ClipboardIOS::ClipboardIOS):
        (WebCore::ClipboardIOS::~ClipboardIOS):
        (WebCore::ClipboardIOS::hasData):
        (WebCore::ClipboardIOS::clearData):
        (WebCore::ClipboardIOS::clearAllData):
        (WebCore::ClipboardIOS::getData):
        (WebCore::ClipboardIOS::setData):
        (WebCore::ClipboardIOS::types):
        (WebCore::ClipboardIOS::files):
        (WebCore::ClipboardIOS::writeRange):
        (WebCore::ClipboardIOS::writePlainText):
        (WebCore::ClipboardIOS::writeURL):
        (WebCore::ClipboardIOS::declareAndWriteDragImage):
        (WebCore::ClipboardIOS::createDragImage):
        (WebCore::ClipboardIOS::setDragImage):
        (WebCore::ClipboardIOS::setDragImageElement):
        * platform/ios/ClipboardIPhone.h: Removed.
        * platform/ios/ClipboardIPhone.mm: Removed.
        * platform/ios/CoreMotionManager.h:
        * platform/ios/CoreMotionManager.mm:
        (-[CoreMotionManager addMotionClient:WebCore::]):
        (-[CoreMotionManager removeMotionClient:WebCore::]):
        (-[CoreMotionManager addOrientationClient:WebCore::]):
        (-[CoreMotionManager removeOrientationClient:WebCore::]):
        (-[CoreMotionManager sendAccelerometerData:]):
        (-[CoreMotionManager sendMotionData:withHeading:]):
        * platform/ios/DeviceMotionClientIOS.h: Copied from Source/WebCore/platform/ios/DeviceMotionClientIPhone.h.
        (WebCore::DeviceMotionClientIOS::create):
        * platform/ios/DeviceMotionClientIOS.mm: Copied from Source/WebCore/platform/ios/DeviceMotionClientIPhone.mm.
        (WebCore::DeviceMotionClientIOS::DeviceMotionClientIOS):
        (WebCore::DeviceMotionClientIOS::~DeviceMotionClientIOS):
        (WebCore::DeviceMotionClientIOS::setController):
        (WebCore::DeviceMotionClientIOS::startUpdating):
        (WebCore::DeviceMotionClientIOS::stopUpdating):
        (WebCore::DeviceMotionClientIOS::currentDeviceMotion):
        (WebCore::DeviceMotionClientIOS::deviceMotionControllerDestroyed):
        (WebCore::DeviceMotionClientIOS::motionChanged):
        * platform/ios/DeviceMotionClientIPhone.h: Removed.
        * platform/ios/DeviceMotionClientIPhone.mm: Removed.
        * platform/ios/DeviceOrientationClientIOS.h: Copied from Source/WebCore/platform/ios/DeviceOrientationClientIPhone.h.
        (WebCore::DeviceOrientationClientIOS::create):
        * platform/ios/DeviceOrientationClientIOS.mm: Copied from Source/WebCore/platform/ios/DeviceOrientationClientIPhone.mm.
        (WebCore::DeviceOrientationClientIOS::DeviceOrientationClientIOS):
        (WebCore::DeviceOrientationClientIOS::~DeviceOrientationClientIOS):
        (WebCore::DeviceOrientationClientIOS::setController):
        (WebCore::DeviceOrientationClientIOS::startUpdating):
        (WebCore::DeviceOrientationClientIOS::stopUpdating):
        (WebCore::DeviceOrientationClientIOS::lastOrientation):
        (WebCore::DeviceOrientationClientIOS::deviceOrientationControllerDestroyed):
        (WebCore::DeviceOrientationClientIOS::orientationChanged):
        * platform/ios/DeviceOrientationClientIPhone.h: Removed.
        * platform/ios/DeviceOrientationClientIPhone.mm: Removed.
        * platform/ios/EventLoopIOS.mm: Copied from Source/WebCore/platform/ios/EventLoopIPhone.mm.
        * platform/ios/EventLoopIPhone.mm: Removed.
        * platform/ios/KeyEventCodesIOS.h: Copied from Source/WebCore/platform/ios/KeyEventCodesIPhone.h.
        * platform/ios/KeyEventCodesIPhone.h: Removed.
        * platform/ios/KeyEventIOS.mm: Copied from Source/WebCore/platform/ios/KeyEventIPhone.mm.
        * platform/ios/KeyEventIPhone.mm: Removed.
        * platform/ios/LocalizedStringsIOS.mm: Copied from Source/WebCore/platform/ios/LocalizedStringsIPhone.mm.
        * platform/ios/LocalizedStringsIPhone.mm: Removed.
        * platform/ios/MIMETypeRegistryIOS.mm: Copied from Source/WebCore/platform/ios/MIMETypeRegistryIPhone.mm.
        * platform/ios/MIMETypeRegistryIPhone.mm: Removed.
        * platform/ios/PasteboardIOS.mm: Copied from Source/WebCore/platform/ios/PasteboardIPhone.mm.
        * platform/ios/PasteboardIPhone.mm: Removed.
        * platform/ios/PlatformMouseEventIOS.mm: Copied from Source/WebCore/platform/ios/PlatformMouseEventIPhone.mm.
        * platform/ios/PlatformMouseEventIPhone.mm: Removed.
        * platform/ios/PlatformScreenIOS.mm: Copied from Source/WebCore/platform/ios/PlatformScreenIPhone.mm.
        * platform/ios/PlatformScreenIPhone.mm: Removed.
        * platform/ios/PlatformTouchEventIOS.mm: Copied from Source/WebCore/platform/ios/PlatformTouchEventIPhone.mm.
        * platform/ios/PlatformTouchEventIPhone.mm: Removed.
        * platform/ios/PopupMenuIOS.h: Copied from Source/WebCore/platform/ios/PopupMenuIPhone.h.
        * platform/ios/PopupMenuIOS.mm: Copied from Source/WebCore/platform/ios/PopupMenuIPhone.mm.
        (WebCore::PopupMenuIOS::PopupMenuIOS):
        (WebCore::PopupMenuIOS::show):
        (WebCore::PopupMenuIOS::hide):
        (WebCore::PopupMenuIOS::updateFromElement):
        (WebCore::PopupMenuIOS::disconnectClient):
        * platform/ios/PopupMenuIPhone.h: Removed.
        * platform/ios/PopupMenuIPhone.mm: Removed.
        * platform/ios/ScrollAnimatorIOS.h: Copied from Source/WebCore/platform/ios/ScrollAnimatorIPhone.h.
        * platform/ios/ScrollAnimatorIOS.mm: Copied from Source/WebCore/platform/ios/ScrollAnimatorIPhone.mm.
        (WebCore::ScrollAnimator::create):
        (WebCore::ScrollAnimatorIOS::ScrollAnimatorIOS):
        (WebCore::ScrollAnimatorIOS::~ScrollAnimatorIOS):
        (WebCore::ScrollAnimatorIOS::handleTouchEvent):
        (WebCore::ScrollAnimatorIOS::determineScrollableAreaForTouchSequence):
        * platform/ios/ScrollAnimatorIPhone.h: Removed.
        * platform/ios/ScrollAnimatorIPhone.mm: Removed.
        * platform/ios/ScrollViewIOS.mm: Copied from Source/WebCore/platform/ios/ScrollViewIPhone.mm.
        * platform/ios/ScrollViewIPhone.mm: Removed.
        * platform/ios/ScrollbarThemeIOS.h: Copied from Source/WebCore/platform/ios/ScrollbarThemeIPhone.h.
        * platform/ios/ScrollbarThemeIOS.mm: Copied from Source/WebCore/platform/ios/ScrollbarThemeIPhone.mm.
        (WebCore::ScrollbarTheme::nativeTheme):
        (WebCore::ScrollbarThemeIOS::registerScrollbar):
        (WebCore::ScrollbarThemeIOS::unregisterScrollbar):
        (WebCore::ScrollbarThemeIOS::ScrollbarThemeIOS):
        (WebCore::ScrollbarThemeIOS::~ScrollbarThemeIOS):
        (WebCore::ScrollbarThemeIOS::preferencesChanged):
        (WebCore::ScrollbarThemeIOS::scrollbarThickness):
        (WebCore::ScrollbarThemeIOS::initialAutoscrollTimerDelay):
        (WebCore::ScrollbarThemeIOS::autoscrollTimerDelay):
        (WebCore::ScrollbarThemeIOS::buttonsPlacement):
        (WebCore::ScrollbarThemeIOS::hasButtons):
        (WebCore::ScrollbarThemeIOS::hasThumb):
        (WebCore::ScrollbarThemeIOS::backButtonRect):
        (WebCore::ScrollbarThemeIOS::forwardButtonRect):
        (WebCore::ScrollbarThemeIOS::trackRect):
        (WebCore::ScrollbarThemeIOS::minimumThumbLength):
        (WebCore::ScrollbarThemeIOS::shouldCenterOnThumb):
        (WebCore::ScrollbarThemeIOS::paint):
        * platform/ios/ScrollbarThemeIPhone.h: Removed.
        * platform/ios/ScrollbarThemeIPhone.mm: Removed.
        * platform/ios/SearchPopupMenuIOS.cpp: Copied from Source/WebCore/platform/ios/SearchPopupMenuIPhone.cpp.
        (WebCore::SearchPopupMenuIOS::SearchPopupMenuIOS):
        (WebCore::SearchPopupMenuIOS::popupMenu):
        (WebCore::SearchPopupMenuIOS::saveRecentSearches):
        (WebCore::SearchPopupMenuIOS::loadRecentSearches):
        (WebCore::SearchPopupMenuIOS::enabled):
        * platform/ios/SearchPopupMenuIOS.h: Copied from Source/WebCore/platform/ios/SearchPopupMenuIPhone.h.
        * platform/ios/SearchPopupMenuIPhone.cpp: Removed.
        * platform/ios/SearchPopupMenuIPhone.h: Removed.
        * platform/ios/SharedTimerIOS.mm: Copied from Source/WebCore/platform/ios/SharedTimerIPhone.mm.
        (WebCore::setSharedTimerFireTime):
        * platform/ios/SharedTimerIPhone.mm: Removed.
        * platform/ios/SoundIOS.mm: Copied from Source/WebCore/platform/ios/SoundIPhone.mm.
        * platform/ios/SoundIPhone.mm: Removed.
        * platform/ios/SystemMemoryIOS.cpp: Copied from Source/WebCore/platform/ios/SystemMemoryIPhone.cpp.
        * platform/ios/SystemMemoryIPhone.cpp: Removed.
        * platform/ios/SystemTimeIOS.cpp: Copied from Source/WebCore/platform/ios/SystemTimeIPhone.cpp.
        * platform/ios/SystemTimeIPhone.cpp: Removed.
        * platform/ios/ThemeIOS.h: Copied from Source/WebCore/platform/ios/ThemeIPhone.h.
        (WebCore::ThemeIOS::ThemeIOS):
        (WebCore::ThemeIOS::~ThemeIOS):
        * platform/ios/ThemeIOS.mm: Copied from Source/WebCore/platform/ios/ThemeIPhone.mm.
        (WebCore::platformTheme):
        * platform/ios/ThemeIPhone.h: Removed.
        * platform/ios/ThemeIPhone.mm: Removed.
        * platform/ios/WebCoreSystemInterfaceIOS.mm: Copied from Source/WebCore/platform/ios/WebCoreSystemInterfaceIPhone.mm.
        * platform/ios/WebCoreSystemInterfaceIPhone.mm: Removed.
        * platform/ios/WebEvent.mm:
        (windowsKeyCodeForCharCodeIOS):
        (-[WebEvent initWithKeyEventType:timeStamp:characters:charactersIgnoringModifiers:modifiers:isRepeating:isPopupVariant:keyCode:isTabKey:characterSet:]):
        * platform/ios/WebFontCacheIOS.mm: Copied from Source/WebCore/platform/ios/WebFontCacheIPhone.mm.
        * platform/ios/WebFontCacheIPhone.mm: Removed.
        * platform/ios/WheelEventIOS.mm: Copied from Source/WebCore/platform/ios/WheelEventIPhone.mm.
        * platform/ios/WheelEventIPhone.mm: Removed.
        * platform/ios/WidgetIOS.mm: Copied from Source/WebCore/platform/ios/WidgetIPhone.mm.
        * platform/ios/WidgetIPhone.mm: Removed.
        * platform/network/ios/NetworkStateNotifierIOS.cpp: Copied from Source/WebCore/platform/network/ios/NetworkStateNotifierIPhone.cpp.
        * platform/network/ios/NetworkStateNotifierIPhone.cpp: Removed.
        * platform/network/ios/QuickLook.mm:
        * platform/network/ios/ResourceHandleIOS.mm: Copied from Source/WebCore/platform/network/ios/ResourceHandleIPhone.mm.
        * platform/network/ios/ResourceHandleIPhone.mm: Removed.
        * platform/network/ios/WebCoreURLResponseIOS.h: Copied from Source/WebCore/platform/network/ios/WebCoreURLResponseIPhone.h.
        * platform/network/ios/WebCoreURLResponseIOS.mm: Copied from Source/WebCore/platform/network/ios/WebCoreURLResponseIPhone.mm.
        * platform/network/ios/WebCoreURLResponseIPhone.h: Removed.
        * platform/network/ios/WebCoreURLResponseIPhone.mm: Removed.
        * platform/network/mac/ResourceHandleMac.mm:
        * platform/text/ios/LocalizedDateIOS.mm: Copied from Source/WebCore/platform/text/ios/LocalizedDateIPhone.mm.
        * platform/text/ios/LocalizedDateIPhone.mm: Removed.
        * rendering/RenderButton.cpp:
        (WebCore::RenderButton::layout):
        * rendering/RenderTextControlSingleLine.cpp:
        (WebCore::RenderTextControlSingleLine::layout):
        * rendering/RenderThemeIOS.cpp: Copied from Source/WebCore/rendering/RenderThemeIPhone.cpp.
        (WebCore::IOSGradient::IOSGradient):
        (WebCore::interpolateLinearGradient):
        (WebCore::interpolateExponentialGradient):
        (WebCore::getSharedFunctionRef):
        (WebCore::drawAxialGradient):
        (WebCore::drawRadialGradient):
        (WebCore::getInsetGradient):
        (WebCore::getShineGradient):
        (WebCore::getShadeGradient):
        (WebCore::getConvexGradient):
        (WebCore::getConcaveGradient):
        (WebCore::getSliderTrackGradient):
        (WebCore::getSliderThumbOpaquePressedGradient):
        (WebCore::gradientWithName):
        (WebCore::RenderTheme::themeForPage):
        (WebCore::RenderThemeIOS::create):
        (WebCore::RenderThemeIOS::shadowColor):
        (WebCore::RenderThemeIOS::addRoundedBorderClip):
        (WebCore::RenderThemeIOS::adjustCheckboxStyle):
        (WebCore::RenderThemeIOS::paintCheckboxDecorations):
        (WebCore::RenderThemeIOS::baselinePosition):
        (WebCore::RenderThemeIOS::isControlStyled):
        (WebCore::RenderThemeIOS::adjustRadioStyle):
        (WebCore::RenderThemeIOS::paintRadioDecorations):
        (WebCore::RenderThemeIOS::paintTextFieldDecorations):
        (WebCore::RenderThemeIOS::paintTextAreaDecorations):
        (WebCore::RenderThemeIOS::popupInternalPaddingRight):
        (WebCore::RenderThemeIOS::adjustRoundBorderRadius):
        (WebCore::RenderThemeIOS::adjustMenuListButtonStyle):
        (WebCore::RenderThemeIOS::paintMenuListButtonDecorations):
        (WebCore::RenderThemeIOS::adjustSliderTrackStyle):
        (WebCore::RenderThemeIOS::paintSliderTrack):
        (WebCore::RenderThemeIOS::adjustSliderThumbSize):
        (WebCore::RenderThemeIOS::paintSliderThumbDecorations):
        (WebCore::RenderThemeIOS::adjustSearchFieldStyle):
        (WebCore::RenderThemeIOS::paintSearchFieldDecorations):
        (WebCore::RenderThemeIOS::adjustButtonStyle):
        (WebCore::RenderThemeIOS::paintButtonDecorations):
        (WebCore::RenderThemeIOS::paintPushButtonDecorations):
        (WebCore::RenderThemeIOS::setButtonSize):
        (WebCore::RenderThemeIOS::platformActiveSelectionBackgroundColor):
        (WebCore::RenderThemeIOS::platformInactiveSelectionBackgroundColor):
        (WebCore::RenderThemeIOS::shouldShowPlaceholderWhenFocused):
        (WebCore::RenderThemeIOS::shouldHaveSpinButton):
        * rendering/RenderThemeIOS.h: Copied from Source/WebCore/rendering/RenderThemeIPhone.h.
        (WebCore::RenderThemeIOS::RenderThemeIOS):
        (WebCore::RenderThemeIOS::~RenderThemeIOS):
        * rendering/RenderThemeIPhone.cpp: Removed.
        * rendering/RenderThemeIPhone.h: Removed.

2011-09-29  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/9378829> Implement iOS equivalents of NSBitsPerPixelFromDepth() and NSBitsPerSampleFromDepth() in WebKit.

        Reviewed by David Carson and Paul Knight.

        No tests since this only updated comments.

        * platform/ios/PlatformScreenIPhone.mm:
        (WebCore::screenDepth): Update comments.
        (WebCore::screenDepthPerComponent): Ditto.

2011-09-28  Enrica Casucci  <enrica@apple.com>

        Reviewed by NOBODY (OOPS!).

        <rdar://problem/10160760> 9A334: Style in copied text is lost when paste

        The bug was caused by the chosePlainText variable not being initialized in the
        iOS implementation of the documentFragment method of the Pasteboard class.
        The fix consists in ensuring the variable is initialized by default to false
        and set it to true when appropriate, based on the value of the allowPlainText
        variable and the availability of plain text content in the pasteboard. 

        * platform/Pasteboard.h:
        * platform/iphone/PasteboardIPhone.mm:
        (WebCore::Pasteboard::documentFragmentForPasteboardItemAtIndex):
        (WebCore::Pasteboard::documentFragment):

2011-09-27  Ian Henderson  <ianh@apple.com>

        Reviewed by Antti Koivisto.

        <rdar://problem/9755007> Throw away non-visible tiles in background tabs

        Previously, the tile cache would ignore requests to throw away
        non-visible tiles in the zoomed out grid.  This is counterproductive
        -- we'll have to redraw the tiles if they are purged, and they take up
        space in the vm map.

        Instead of returning early if the zoomed out grid is active, drop
        non-visible tiles regardless of whether the the zoomed out or zoomed
        in grid is active.  Additionally, drop all the zoomed out tiles if the
        zoomed in grid is active and contains tiles (while loading pages, the
        zoomed in grid can become active without having tiles for a short
        time.  This caused the flashing last time I tried to fix this).

        * platform/iphone/TileCache.mm:
        (WebCore::TileCache::removeAllNonVisibleTiles):

2011-09-27  David Kilzer  <ddkilzer@apple.com>

        BUILD FIX: WebCore should compile with USE(CFNETWORK) disabled

        Reviewed by Pratik Solanki.

        * platform/network/mac/ResourceErrorMac.mm: Add #if
        USE(CFNETWORK)/#endif macro around static method that should not
        be compiled when USE(CFNETWORK) is disabled.

2011-09-24  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by Dan Bernstein.

        Remove More Stale iOS Differences.

        * rendering/InlineFlowBox.cpp: Include is not used.
        * rendering/RenderButton.cpp: Namespace std is not used.
        * rendering/svg/RenderSVGContainer.cpp: Include is not used.
        * rendering/RenderTheme.h: class is not needed.

        * rendering/RenderTheme.cpp:
        (WebCore::RenderTheme::adjustStyle):
        (WebCore::RenderTheme::paint):
        For both of these, iOS doesn't implement an adjust/paint for the
        individual custom SearchField*Parts, so it's okay to fallback to
        the default implementation in RenderTheme that does nothing.

2011-09-23  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by Simon Fraser.

        Remove Stale iOS Difference.

        * html/HTMLFrameSetElement.h:

2011-09-22  Dan Bernstein  <mitz@apple.com>

        Reviewed by Sam Weinig.

        Renamed directories and groups in the Xcode project from "iphone" to "ios".

        * ForwardingHeaders/wtf/ios: Copied from Source/WebCore/ForwardingHeaders/wtf/iphone.
        * ForwardingHeaders/wtf/iphone: Removed.
        * ForwardingHeaders/wtf/iphone/WebCoreThread.h: Removed.
        * WebCore.xcodeproj/project.pbxproj:
        * accessibility/ios: Copied from Source/WebCore/accessibility/iphone.
        * accessibility/iphone: Removed.
        * accessibility/iphone/AXObjectCacheIPhone.mm: Removed.
        * accessibility/iphone/AccessibilityObjectIPhone.mm: Removed.
        * accessibility/iphone/AccessibilityObjectWrapperIPhone.h: Removed.
        * accessibility/iphone/AccessibilityObjectWrapperIPhone.mm: Removed.
        * editing/ios: Copied from Source/WebCore/editing/iphone.
        * editing/iphone: Removed.
        * editing/iphone/DictationCommand.cpp: Removed.
        * editing/iphone/DictationCommand.h: Removed.
        * editing/iphone/EditorIPhone.mm: Removed.
        * manual-tests/ios: Copied from Source/WebCore/manual-tests/iphone.
        * manual-tests/iphone: Removed.
        * manual-tests/iphone/BudgetPreview.pdf: Removed.
        * manual-tests/iphone/exploded-iframe-noscroll-horizontal.html: Removed.
        * manual-tests/iphone/exploded-iframe-noscroll-vertical.html: Removed.
        * manual-tests/iphone/exploded-iframe-scroll-horizontal.html: Removed.
        * manual-tests/iphone/exploded-iframe-scroll-pdf.html: Removed.
        * manual-tests/iphone/exploded-iframe-scroll-vertical.html: Removed.
        * manual-tests/iphone/touch: Removed.
        * manual-tests/iphone/touch/circles-following-touches.html: Removed.
        * manual-tests/iphone/touch/resources: Removed.
        * manual-tests/iphone/touch/resources/script.js: Removed.
        * manual-tests/iphone/touch/resources/styles.css: Removed.
        * manual-tests/iphone/touch/touch-and-gesture-events.html: Removed.
        * page/ios: Copied from Source/WebCore/page/iphone.
        * page/iphone: Removed.
        * page/iphone/EventHandlerIPhone.mm: Removed.
        * page/iphone/EventHandlerIPhoneTouch.cpp: Removed.
        * page/iphone/FrameIPhone.mm: Removed.
        * page/iphone/WebEventRegion.h: Removed.
        * page/iphone/WebEventRegion.mm: Removed.
        * platform/graphics/ios: Copied from Source/WebCore/platform/graphics/iphone.
        * platform/graphics/iphone: Removed.
        * platform/graphics/iphone/BitmapImageManual.h: Removed.
        * platform/graphics/iphone/FontCacheIOS.mm: Removed.
        * platform/graphics/iphone/GraphicsContext3DIPhone.h: Removed.
        * platform/graphics/iphone/IconIPhone.mm: Removed.
        * platform/graphics/iphone/MediaPlayerPrivateIPhone.h: Removed.
        * platform/graphics/iphone/MediaPlayerPrivateIPhone.mm: Removed.
        * platform/ios: Copied from Source/WebCore/platform/iphone.
        * platform/iphone: Removed.
        * platform/iphone/ClipboardIPhone.h: Removed.
        * platform/iphone/ClipboardIPhone.mm: Removed.
        * platform/iphone/CoreMotionManager.h: Removed.
        * platform/iphone/CoreMotionManager.mm: Removed.
        * platform/iphone/DeviceMotionClientIPhone.h: Removed.
        * platform/iphone/DeviceMotionClientIPhone.mm: Removed.
        * platform/iphone/DeviceOrientationClientIPhone.h: Removed.
        * platform/iphone/DeviceOrientationClientIPhone.mm: Removed.
        * platform/iphone/EventLoopIPhone.mm: Removed.
        * platform/iphone/FileSystemIOS.mm: Removed.
        * platform/iphone/GeolocationManager.h: Removed.
        * platform/iphone/GeolocationManager.mm: Removed.
        * platform/iphone/GeolocationServiceCoreLocation.cpp: Removed.
        * platform/iphone/GeolocationServiceCoreLocation.h: Removed.
        * platform/iphone/KeyEventCodesIPhone.h: Removed.
        * platform/iphone/KeyEventIPhone.mm: Removed.
        * platform/iphone/LocalizedStringsIPhone.mm: Removed.
        * platform/iphone/MIMETypeRegistryIPhone.mm: Removed.
        * platform/iphone/PasteboardIPhone.mm: Removed.
        * platform/iphone/PlatformMouseEventIPhone.mm: Removed.
        * platform/iphone/PlatformScreenIPhone.mm: Removed.
        * platform/iphone/PlatformTouchEventIPhone.mm: Removed.
        * platform/iphone/PopupMenuIPhone.h: Removed.
        * platform/iphone/PopupMenuIPhone.mm: Removed.
        * platform/iphone/SSLKeyGeneratorIOS.cpp: Removed.
        * platform/iphone/ScrollAnimatorIPhone.h: Removed.
        * platform/iphone/ScrollAnimatorIPhone.mm: Removed.
        * platform/iphone/ScrollViewIPhone.mm: Removed.
        * platform/iphone/ScrollbarThemeIPhone.h: Removed.
        * platform/iphone/ScrollbarThemeIPhone.mm: Removed.
        * platform/iphone/SearchPopupMenuIPhone.cpp: Removed.
        * platform/iphone/SearchPopupMenuIPhone.h: Removed.
        * platform/iphone/SelectionRect.cpp: Removed.
        * platform/iphone/SelectionRect.h: Removed.
        * platform/iphone/SharedTimerIPhone.mm: Removed.
        * platform/iphone/SoundIPhone.mm: Removed.
        * platform/iphone/SystemMemoryIPhone.cpp: Removed.
        * platform/iphone/SystemTimeIPhone.cpp: Removed.
        * platform/iphone/ThemeIPhone.h: Removed.
        * platform/iphone/ThemeIPhone.mm: Removed.
        * platform/iphone/TileCache.h: Removed.
        * platform/iphone/TileCache.mm: Removed.
        * platform/iphone/TileGrid.h: Removed.
        * platform/iphone/TileGrid.mm: Removed.
        * platform/iphone/TileGridTile.h: Removed.
        * platform/iphone/TileGridTile.mm: Removed.
        * platform/iphone/TileLayer.h: Removed.
        * platform/iphone/TileLayer.mm: Removed.
        * platform/iphone/TileLayerPool.h: Removed.
        * platform/iphone/TileLayerPool.mm: Removed.
        * platform/iphone/WebCoreSystemInterfaceIPhone.mm: Removed.
        * platform/iphone/WebEvent.h: Removed.
        * platform/iphone/WebEvent.mm: Removed.
        * platform/iphone/WebFontCacheIPhone.mm: Removed.
        * platform/iphone/WheelEventIPhone.mm: Removed.
        * platform/iphone/WidgetIPhone.mm: Removed.
        * platform/network/ios: Copied from Source/WebCore/platform/network/iphone.
        * platform/network/iphone: Removed.
        * platform/network/iphone/NetworkStateNotifierIPhone.cpp: Removed.
        * platform/network/iphone/QuickLook.h: Removed.
        * platform/network/iphone/QuickLook.mm: Removed.
        * platform/network/iphone/ResourceHandleIPhone.mm: Removed.
        * platform/network/iphone/WebCoreURLResponseIPhone.h: Removed.
        * platform/network/iphone/WebCoreURLResponseIPhone.mm: Removed.
        * platform/sql/ios: Copied from Source/WebCore/platform/sql/iphone.
        * platform/sql/iphone: Removed.
        * platform/sql/iphone/SQLiteDatabaseTracker.cpp: Removed.
        * platform/sql/iphone/SQLiteDatabaseTracker.h: Removed.
        * platform/sql/iphone/SQLiteDatabaseTrackerClient.h: Removed.
        * platform/text/ios: Copied from Source/WebCore/platform/text/iphone.
        * platform/text/iphone: Removed.
        * platform/text/iphone/LocalizedDateCache.h: Removed.
        * platform/text/iphone/LocalizedDateCache.mm: Removed.
        * platform/text/iphone/LocalizedDateIPhone.mm: Removed.
        * wak/WebCoreThreadSystemInterface.cpp:

2011-09-22  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/9967274> Remove Facely specific changes made in <rdar://9642290>

        Reviewed by David Carson.

        Revert r1053838. The app has been updated in the app store so it doesn't need this hack.
        We've also switched to the CFNetwork based loader so this is effectively dead code.

        * platform/RuntimeApplicationChecksIPhone.h:
        * platform/RuntimeApplicationChecksIPhone.mm:
        * platform/network/mac/ResourceRequestMac.mm:
        (WebCore::ResourceRequest::doUpdatePlatformRequest):

2011-09-22  Dan Bernstein  <mitz@apple.com>

        Reviewed by Dave Kilzer.

        Moved the iOS platform-specific parts of FontCache out of FontCacheMac.mm and into their own file,
        FontCacheIOS.mm. The iOS implementation had nearly nothing in common with the Mac implementation,
        so there was no benefit in keeping it in the same file.

        * WebCore.xcodeproj/project.pbxproj: Added FontCacheIOS.mm.
        * platform/graphics/iphone/FontCacheIOS.mm: Copied from Source/WebCore/platform/graphics/mac/FontCacheMac.mm,
        removed the !PLATFORM(IOS) sections and trimmed down the #import list.
        * platform/graphics/mac/FontCacheMac.mm: Replaced with the version in WebKit TOT r95669 and added
        !PLATFORM(IOS) guards around the entire file.

2011-09-13  Enrica Casucci  <enrica@apple.com>

        Merged OpenSource r94737.

    2011-09-07  David Hyatt  <hyatt@apple.com>

        https://bugs.webkit.org/show_bug.cgi?id=67739

        adjustRectForColumns is O(# of columns) when it can be O(1). Fix the slow performance of this
        function by removing the loop and just computing the start and end column for a repaint rect
        and uniting everything in between.

        Reviewed by Dan Bernstein.

        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::adjustRectForColumns):

2011-09-16  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Carson.

        <rdar://problem/5338968> Form label clicks don't act as clicks on the element itself

        Send clicks for taps on labels that have an associated control.

        * html/HTMLLabelElement.h:
        * html/HTMLLabelElement.cpp:
        (WebCore::HTMLLabelElement::willRespondToMouseClickEvents):

2011-09-14  Shuchen Li  <shuchen_li@apple.com>

        Reviewed by Justin Garcia

        <rdar://problem/10081551> no smart space insertion around dictation results in iWork

        Move smart space insertion for dictation to UIDictationController.m

        * editing/iphone/DictationCommand.cpp:
        (WebCore::DictationCommand::doApply):

2011-09-13  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Carson.

        <rdar://problem/9647006> Safari bounces to anchor when element display is changed

        Cannot be tested. Requires UIKit user scroll message.

        * WebCore.exp.in: export FrameView::setWasScrolledByUser

2011-09-13  Cameron Zwarich  <zwarich@apple.com>

        Reviewed by Anders Carlsson.

        <rdar://problem/10117956> SWBDC regression [error: method has no return type specified; defaults to] [WebCore-1403~48] [Sundance10A105-Slate4C175-DTSF-clang-315.3]

        Merge ToT WebKit r94365 and r94386:

    2011-09-01  Mark Rowe  <mrowe@apple.com>

            <rdar://problem/10063411> WebScriptObject.h declares an Objective-C method without a return type.

            Rubber-stamped by Anders Carlsson.

            * bridge/objc/WebScriptObject.h:

    2011-09-01  Mark Rowe  <mrowe@apple.com>

            Fix the build by adding some more missing return types.

            * page/mac/WebCoreViewFactory.m:
            (-[WebCoreViewFactory init]):

2011-09-13  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by Yongjun Zhang.

        <rdar://problem/5191107> text sized incorrectly (too small) at http://foothilldental.com/map.html

        A FontPlatformDataCacheKey in the FontCache ignores the case
        of the font family so it is safe to just case-insensitively
        compare the font-familys of the FontDescriptions when comparing
        for text autosizing equality.

        Test: text-autosizing/font-family-case-insensitive.html

        * platform/graphics/FontDescription.h:
        (WebCore::FontDescription::equalForTextAutoSizing):
        Compare the FontFamily lists case-insensitively.

        * platform/graphics/FontFamily.h:
        * platform/graphics/FontFamily.cpp:
        (WebCore::FontFamily::equalForTextAutoSizing):
        Expose a method for text autosizing that compares
        the FontFamily lists case-insensitively.

2011-09-13  Joseph Pecoraro  <joepeck@webkit.org>

        Merged ToT WebKit r95013.

        <rdar://problem/10064708> ASSERT(!storageTracker) running LayoutTests/storage/domstorage/localstorage/storagetracker

    2011-09-12  Joseph Pecoraro  <joepeck@webkit.org>

            Possible ASSERT(!storageTracker) in Lazily Initialized StorageTracker
            https://bugs.webkit.org/show_bug.cgi?id=67957

            Reviewed by Darin Adler.

            The storageTracker singleton may already have been created
            through StorageTracker::tracker before initializeTracker
            gets called. Update the ASSERT in this case to check that
            there is no client for the tracker.

            No test, this depends on how the port initializes the tracker.

            * storage/StorageTracker.cpp:
            (WebCore::StorageTracker::initializeTracker):

2011-09-12  Anton D'Auria  <adauria@apple.com>

        Reviewed by Yongjun Zhang.

        <rdar://problem/10112566> ASSERT(isMainThread()) fails in WebCore::StorageTracker::internalInitialize()

        There is no notion of a web thread on Desktop. On iOS,
        isMainThread() checks if the calling thread is the web thread,
        so if the check should mean the main thread, or both threads,
        we must check pthread_main_np().

        LocalStorage initialization and StorageTracker initialization can begin
        on the main thread, so we need to add pthread_main_np() to the assertion
        in StorageTracker::internalInitialize().

        * storage/StorageTracker.cpp:
        (WebCore::StorageTracker::internalInitialize): checking pthread_main_np() with isMainThread().

2011-09-08  Yongjun Zhang  <yongjun_zhang@apple.com>

        Reviewed by Anton D'Auria..

        <rdar://problem/10074770> MobileSafari crashes in WebKitInitializeWebDiskImageCache on launch

        Fallback to Durango's behavior, return nil if creating temp directory fails.  If it fails, we
        will try to create the directory again when adding an item into disk image cache.

        Tested by hardcoding an invalid directory for disk image cache in memory warnings, and verified
        MobileSafari doesn't crash on restart.  Also tested with QuickLook content since QuickLook also
        uses createTemporaryDirectory().

        * platform/iphone/FileSystemIOS.mm:
        (WebCore::createTemporaryDirectory):

2011-09-06  Julio Gonzalez  <juliog@apple.com>

        Reviewed by Dan Bernstein.

        <rdar://problem/10027112> Fallback needs to be changed to reflect the change of the Korean Fonts

        * platform/graphics/mac/FontCacheMac.mm:
        (WebCore::FontCache::getFontDataForCharacters): Use AppleSDGothicNeo Medium and Bold for Korean
        instead of AppleGothic.

2011-09-01  Dmitry Gorbik  <dgorbik@apple.com>

        Reviewed by Joseph Pecoraro.

        <rdar://problem/6646628> Text Autosizing: Overlapping text in message

        When the line-height is fixed and the -webkit-text-size-adjust property is some percentage value,
        adjust the line-height to match the text size.

        Test: text-autosizing/text-size-adjust.html

        * css/CSSStyleSelector.cpp:
        (WebCore::CSSStyleSelector::SelectorChecker::checkOneSelector):
        * rendering/style/TextSizeAdjustment.h:
        (TextSizeAdjustment::isPercentage):

2011-09-01  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Kilzer.

        <rdar://problem/10018452> Leak: Getting scaledFontData leaks a GSFontRef

        * platform/graphics/mac/SimpleFontDataMac.mm:
        (WebCore::SimpleFontData::createScaledFontData):
        Another case where GSFontCreate* was being retained
        by FontPlatformData and the creator was not releasing.

2011-09-01  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Kilzer.

        Remove unnecessary #ifdef. iOS doesn't have ATSUI enabled
        and if it did we would want this snippet. The !PLATFORM(IOS)
        block was inherited from a long time ago when the entire
        block was #if'd out for ASPEN, and has evolved overtime to
        just that small section.

        * platform/graphics/mac/SimpleFontDataMac.mm:
        (WebCore::SimpleFontData::platformDestroy):

2011-09-01  Joseph Pecoraro  <joepeck@webkit.org>
 
        Reviewed by Ian Henderson.

        <rdar://problem/9997646> iOS browser does not honor event handler specification for return values

        If my spleen could vent, it would vent profusely due to this.
        Remove code added for a feature that never actually made it into
        an iOS release but has caused compatibility issues and head
        scratching for developers.

        * html/HTMLElement.cpp:
        (WebCore::HTMLElement::parseMappedAttribute):

2011-09-01  David Kilzer  <ddkilzer@apple.com>

        Part 2 of 2: <rdar://problem/9139206> Build iOS WebKit with clang

        Reviewed by David Carson.

        * Configurations/CompilerVersion.xcconfig: Switch to using clang
        for both iphoneos and iphonesimulator platforms.

2011-09-01  David Kilzer  <ddkilzer@apple.com>

        Replace deprecated CGContextClear() with CGContextClearRect()

        Patch suggested by Dan Bernstein.  Reviewed by David Carson.

        Part 1 of 2: <rdar://problem/9139206> Build iOS WebKit with clang

        Fixes the following deprecation warning:

            Source/WebCore/page/iphone/FrameIPhone.mm:918:5: error: 'CGContextClear' is deprecated [-Werror,-Wdeprecated-declarations,8]
                 CGContextClear(contextRef);
                 ^

        * page/iphone/FrameIPhone.mm:
        (WebCore::Frame::imageFromRect): Call CGContextClearRect()
        instead of CGContextClear().

2011-08-27  Justin Garcia  <justin.garcia@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/9322094> GM Task: Un-obscure dictation code/strings/resource file names after seed 7

        * Resources/DictationPhraseWithAlternativesDot.png: Added.
        * Resources/DictationPhraseWithAlternativesDot@2x.png: Added.
        * Resources/MarsVoltaWithAlternativesDot.png: Removed.
        * Resources/MarsVoltaWithAlternativesDot@2x.png: Removed.
        * WebCore.exp.in:
        * WebCore.xcodeproj/project.pbxproj:
        * dom/DocumentMarker.h:
        (WebCore::DocumentMarker::AllMarkers::AllMarkers):
        * dom/DocumentMarkerController.cpp:
        (WebCore::DocumentMarkerController::addDictationPhraseWithAlternativesMarker):
        (WebCore::DocumentMarkerController::addDictationResultMarker):
        * dom/DocumentMarkerController.h:
        * editing/EditAction.h:
        * editing/EditCommand.cpp:
        (WebCore::EditCommand::apply):
        * editing/Editor.cpp:
        (WebCore::Editor::insertDictationPhrases):
        (WebCore::Editor::setDictationPhrasesAsChildOfElement):
        (WebCore::Editor::updateMarkersForWordsAffectedByEditing):
        * editing/Editor.h:
        * WebCore/English.lproj/Localizable.strings: 
        * editing/iphone/DictationCommand.cpp: Added.
        (WebCore::DictationCommand::DictationCommand):
        (WebCore::DictationCommand::~DictationCommand):
        (WebCore::DictationCommand::doApply):
        * editing/iphone/DictationCommand.h: Added.
        (WebCore::DictationCommand::create):
        (WebCore::DictationCommand::editingAction):
        * editing/iphone/InsertMarsVoltasCommand.cpp: Removed.
        * editing/iphone/InsertMarsVoltasCommand.h: Removed.
        * page/iphone/FrameIPhone.mm:
        (WebCore::Frame::interpretationsForCurrentRoot):
        * platform/graphics/GraphicsContext.h:
        * platform/graphics/mac/GraphicsContextMac.mm:
        (WebCore::GraphicsContext::drawLineForTextChecking):
        * rendering/InlineTextBox.cpp:
        (WebCore::textCheckingLineStyleForMarkerType):
        (WebCore::InlineTextBox::paintDocumentMarkers):

2011-08-24  Matt Lilek  <mlilek@apple.com>

        <rdar://problem/10018841> iOS: Regression(83075): Use after free of RootInlineBox (65924)

        Merge OpenSource r92692.

    2011-08-09  Abhishek Arya  <inferno@chromium.org>

        Regression(83075): Fix updateAlwaysCreateLineBoxes on information 
        about full layout which is needed when dirtying lineboxes.
        https://bugs.webkit.org/show_bug.cgi?id=65924

        Reviewed by Dave Hyatt.

        Test: fast/inline/update-always-create-line-boxes-full-layout-crash.html

        * rendering/RenderBlockLineLayout.cpp:
        (WebCore::RenderBlock::layoutInlineChildren):
        * rendering/RenderInline.cpp:
        (WebCore::RenderInline::updateAlwaysCreateLineBoxes):
        * rendering/RenderInline.h:

2011-08-24  Matt Lilek  <mlilek@apple.com>

        <rdar://problem/10018140> iOS: Use after free in TextIterator::emitText (65296)

        Merge OpenSource r91908.

    2011-07-27  Ryosuke Niwa  <rniwa@webkit.org>

        Calling window.find immediately after mutating the document crashes WebKit.
        https://bugs.webkit.org/show_bug.cgi?id=65296

        Reviewed by Darin Adler.

        Don't forget to layout first.

        Test: editing/text-iterator/find-after-mutation.html

        * editing/TextIterator.cpp:
        (WebCore::findPlainText):

2011-08-24  Matt Lilek  <mlilek@apple.com>

        <rdar://problem/10018836> iOS: CVE-2011-2797: Use-after-free of CachedResourceHandle in CachedResource:stopLoading() (fast/dom/HTMLLinkElement/link-and-subresource-test.html is flaky on chromium debug bots) (60097)

        Merge OpenSource r90595.

    2011-07-07  Gavin Peters  <gavinp@chromium.org>

        Reviewed by Alexey Proskuryakov.

        fast/dom/HTMLLinkElement/link-and-subresource-test.html is flaky on chromium debug bots
        https://bugs.webkit.org/show_bug.cgi?id=60097

        The culprit was that CachedResource:stopLoading() was using *this
        after a call to checkNotify(), which isn't kosher.  This patch
        uses a CachedResourceHandle to keep the CachedResource alive.

        The test is a very close copy of the eponymous
        link-and-subresource-test.html, only substituting invalid
        resources for the valid ones in that test.  The reproduction is
        timing related, and happens much more consistantly with an invalid
        resource for whatever reason.
        Test: fast/dom/HTMLLinkElement/link-and-subresource-test-nonexistent.html

        * loader/cache/CachedResource.cpp:
        (WebCore::CachedResource::stopLoading):

2011-08-24  Matt Lilek  <mlilek@apple.com>

        <rdar://problem/10018843> iOS: CVE-2011-2788: Buffer overrun in WebCore::InspectorBasicValue::writeJSON (52791)

        Merge OpenSource r88444.

    2011-06-08  Mikołaj Małecki  <m.malecki@samsung.com>

        Reviewed by Pavel Feldman.

        Web Inspector: Crash by buffer overrun crash when serializing inspector object tree.
        https://bugs.webkit.org/show_bug.cgi?id=52791

        No new tests. The problem can be reproduced by trying to create InspectorValue
        from 1.0e-100 and call ->toJSONString() on this.

        * inspector/InspectorValues.cpp:
        (WebCore::InspectorBasicValue::writeJSON):
        Added checking the predicted buffer size and choosing exponential format, or
        eventually "NaN" if the buffer is too small for decimal format.

2011-08-25  David Kilzer  <ddkilzer@apple.com>

        Part 2: <rdar://problem/10016938> iOS: Unlimited memory growth running the stress test in the WebProcess

        Merged ToT WebKit r93793.

    2011-08-25  Sam Weinig  <sam@webkit.org>

        JSHTMLImageElement (and associated Node) is abandoned when image load is canceled via beforeload
        <rdar://problem/9925630>
        https://bugs.webkit.org/show_bug.cgi?id=66906

        Reviewed by Darin Adler.

        * loader/ImageLoader.cpp:
        (WebCore::ImageLoader::dispatchPendingBeforeLoadEvent):
        Very similar fix to the one in r93717 except this patches the case where the image load was
        canceled via beforeload.

2011-08-24  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Carson.

        <rdar://problem/10019407> WebKit Should Clear RegExpCache on Memory Warnings

        Rename the recompileAllJSFunctions to releaseExecutableMemory
        now that we are piping through to perform that function.

        * WebCore.exp.in: function rename.
        * bindings/js/GCController.cpp:
        * bindings/js/GCController.h: function rename.
        (WebCore::GCController::releaseExecutableMemory):
        We need to take the lock before calling releaseExecutableMemory
        like we do for garbage collection because releaseExecutableMemory
        does garbage collection.

2011-08-24  Chris Marrin  <cmarrin@apple.com>

        Reviewed by Simon Fraser.

        <rdar://problem/9892107> AT&T SVD: Learn More view not displayed correctly upon return from video
        
        Reflected layers don't get refreshed when getting reparented. Add reloadValueForKeyPath for the
        content on the onOrderIn event (when the layer gets reparented).
        
        * platform/graphics/mac/WebLayer.mm:
        (-[WebLayer actionForKey:]):

2011-08-24  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/10016938> iOS: Unlimited memory growth running the stress test in the WebProcess

        Merged ToT WebKit r93717.

    2011-08-24  Sam Weinig  <sam@webkit.org>

        JSHTMLImageElement (and associated Node) is abandoned when image load is canceled
        <rdar://problem/9925630>
        https://bugs.webkit.org/show_bug.cgi?id=66864

        Reviewed by Anders Carlsson.

        In the JSC bindings, we use HTMLImageElement::hasPendingActivity() (which in turn calls
        HTMLImageLoader::haveFiredLoadEvent()) to reason about the liveness of JSHTMLImageElements.
        In the case that an image load is canceled, the haveFiredLoadEvent never true, so the
        JSHTMLImageElement is kept alive forever (and since it references the global object, it
        keeps the entire graph alive as well).

        * loader/ImageLoader.cpp:
        (WebCore::ImageLoader::notifyFinished):
        Set m_firedLoad to true in the case of a canceled load, to reset the state back to
        its initial values.

2011-08-24  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/9975272> REGRESSION: iOS 5.0 beta 5: Excel documents can't be loaded into UIWebView.

        Reviewed by Pratik Solanki.

        The bug is that the QLPreviewConverter was being released before
        all the subresources for the MS Excel document could be served.

        The fix is to store the QLPreviewConverter in the
        QLPreviewConverterDictionary() so that it is retained as long as
        the WebDataSource that represents the converted web content is
        alive.  The QLPreviewConverterDictionary() entry is cleaned up
        in -[WebDataSource dealloc].

        * platform/network/iphone/QuickLook.mm:
        (WebCore::QuickLookHandle::QuickLookHandle): If the current
        application is not MobileSafari, store the QLPreviewConverter
        but don't create the unneeded temporary file.

2011-08-23  Yongjun Zhang  <yongjun_zhang@apple.com>

        Reviewed by Eric Carlson.

        <rdar://problem/9975608> Embedded MP4 videos automatically play in Safari

        For embed and object element, don't tell plugin to be in full page mode if the generated plugin document is not the
        top level document.  Audio and video element are not affected by this change since they use a different path
        to create proxy plugins.

        * loader/SubframeLoader.cpp:
        (WebCore::SubframeLoader::loadPlugin):

2011-08-23  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/9991020> Accelerated contenteditable overflow area stretched until repaint forced

        Reviewed by Dan Bernstein.

        When editing inside an accelerated overflow:scroll element, adding new lines of content
        will resize the scrolling contents layer. When that happens, we have to repaint the
        entire layer, otherwise CA will just stretch it. So call setNeedsDisplay on the
        this layer when its size changes.
        
        If repaints happen outside the region of the scrolling contents layer that happens to 
        be visible, RenderBox::computeRectForRepaint() would also incorrectly compute the repaint
        rect, clipping it to just the visible part of the layer. In order for repaints in non-visible
        parts of the layer to correctly update the backing store, we need to not clip the repaint rect
        based on the clipping container's size.

        * rendering/RenderBox.cpp:
        (WebCore::RenderBox::computeRectForRepaint):
        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::updateGraphicsLayerGeometry):

2011-08-23  Eric Carlson  <eric.carlson@apple.com>

        Reviewed by Dean Jackson.

        <rdar://problem/9998081> Disabled Airplay content can be over-ridden

        Don't allow JavaScript to enable AirPlay if the application has disabled it.

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::attributeChanged): Don't change 'x-webkit-airplay' 
            attribute if the preference doesn't allow it.

        * page/Settings.cpp:
        (WebCore::Settings::Settings): Initialize m_mediaPlaybackAllowsAirPlay.
        * page/Settings.h:
        (WebCore::Settings::setMediaPlaybackAllowsAirPlay): New, set setting.
        (WebCore::Settings::mediaPlaybackAllowsAirPlay): New, return setting.

2011-08-23  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/10010841> ResourceRequest::setStorageSession should update NSURLRequest as well

        Merged ToT WebKit r93648.

    2011-08-23  Pratik Solanki  <psolanki@apple.com>

        ResourceRequest::setStorageSession should update NSURLRequest as well
        https://bugs.webkit.org/show_bug.cgi?id=66811

        Reviewed by Darin Adler.

        * platform/network/cf/ResourceRequestCFNet.cpp:
        (WebCore::ResourceRequest::setStorageSession): Update the m_nsRequest field as well since we
        have a new CFURLRequestRef.

2011-08-23  Justin Garcia  <justin.garcia@apple.com>

        Reviewed by Yongjun Zhang.

        <rdar://problem/9949608> dictation dots cover placeholder text in web forms

        * WebCore.exp.in:
        * html/HTMLFormControlElement.cpp:
        (WebCore::HTMLTextFormControlElement::hidePlaceholder):
        (WebCore::HTMLTextFormControlElement::showPlaceholderIfNecessary):
        * html/HTMLFormControlElement.h:

2011-08-23  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/9910118> [BETA 5] [NSURLRequest setTimeoutInterval:] unrecognized selector sent to instance

        Reviewed by Ian Henderson.

        The bug here is that we pass an NSURLRequest to the delegate callback where the API says we
        need to pass an NSURLRequest. Obviously, we need to pass an NSMutableURLRequest since thats
        what we've been doing till I switched WebCore to use the CFNetwork based loader and
        developers seem to really want NSMutableURLRequest. Tweak the code to create an
        NSMutableURLRequest if we were passed in an NSURLRequest in loadRequest.  If we got some
        other class (e.g. iBooks passes us a custom subclass of NSURLRequest) then we create an
        instance of that class.

        * platform/network/mac/ResourceRequestMac.mm:
        (WebCore::ResourceRequest::updateNSURLRequest):

2011-08-22  Enrica Casucci  <enrica@apple.com>

        Reviewed by Antti Koivisto.

        <rdar://problem/9993404> Data detected in comment field in Facebook.

        We should not perform data detection when parsing fragments. This is
        a regression that was introduced when the data detection code was merged
        in the new HTML parser code.
        
        * html/parser/HTMLTreeBuilder.cpp:
        (WebCore::HTMLTreeBuilder::processCharacterBuffer):

2011-08-22  Joseph Pecoraro  <joepeck@webkit.org>

        Merged ToT WebKit r87894.

        <rdar://problem/10002257> JavaScript files should not be executable

         Reviewed by David Kilzer.

        * WebCore.xcodeproj/project.pbxproj:
        This file will eventually be removed, but in the meantime
        exclude the ExtensionAPISchema.json, file from the build output.

        * inspector/front-end/CSSKeywordCompletions.js
        * inspector/front-end/CookieParser.js
        * inspector/front-end/ExtensionAPISchema.json
        * inspector/front-end/SearchController.js
        * inspector/front-end/Toolbar.js
        Removed the executable flag.

    ToT WebKit Patch had no ChangeLog. Commit Message was:
    
            Unreviewed: Web Inspector: remove accidental eXecutable flag from certain script files

2011-08-22  Scott Grant  <scott.grant@apple.com>

        <rdar://problem/9975411> 9A304: Can't view any more PDFs after receiving memory warning

        Reviewed by NOBODY (OOPS!).

        Provide more clear possible return values for WebCore::SharedBuffer::allowToBeMemoryMapped() to indicate the memory mapping state.

        * platform/SharedBuffer.cpp:
        (WebCore::SharedBuffer::allowToBeMemoryMapped):
        * platform/SharedBuffer.h:

2011-08-22  Enrica Casucci  <enrica@apple.com>

        Reviewed by David Carson.

        <rdar://problem/9787728> UIWebView - onPaste clipboardData contains no text

        When I ported this code to iPhone, I removed the support for "Text" and "URL"
        formats based on a comment in the OpenSource code that I misinterpreted.
        The change adds the converions from these two formats to the appropriate
        iOS pasteboard type.
        
        * platform/iphone/ClipboardIPhone.mm:
        (WebCore::cocoaTypeFromHTMLClipboardType):

2011-08-19  Ian Henderson  <ianh@apple.com>

        Reviewed by Antti Koivisto.

        <rdar://problem/9982102> Tiles sometimes go missing when scrolled partially offscreen

        When given no arguments, the dropDistantTiles() method defaults to a
        "shortestDistance" of -1.  This means visible tiles, which have
        distance 0, are eligible to be dropped.

        We already drop distant tiles for the active grid in
        TileGrid::createTiles().  We don't need to continue dropping distant
        zoomed out tiles unless the zoomed in grid is active.

        * platform/iphone/TileCache.mm:
        (WebCore::TileCache::finishedCreatingTiles):
        Only call dropDistantTiles() for the zoomed out grid when it's not
        active.

2011-08-19  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/9980688> [WebCore] Revert korean font fallback to AppleGothic

        Reviewed by Dan Bernstein.

        * platform/graphics/mac/FontCacheMac.mm:
        (WebCore::FontCache::getFontDataForCharacters): Back out
        r1060869, but keep the fix for r1061431.

2011-08-18  Matt Lilek  <mlilek@apple.com>

        <rdar://problem/9979946> iOS: Regression(82144): OOB read in TrailingObjects::updateMidpointsForTrailingBoxes (65137)

        Merge OpenSource r92132.

    2011-07-28  Abhishek Arya  <inferno@chromium.org>

        Regression(82144): Crash in TrailingObjects::updateMidpointsForTrailingBoxes
        https://bugs.webkit.org/show_bug.cgi?id=65137

        Fix the looping condition to prevent trailingSpaceMidpoint from becoming negative.

        Reviewed by Dave Hyatt.

        Test: fast/block/update-midpoints-for-trailing-boxes-crash.html

        * rendering/RenderBlockLineLayout.cpp:
        (WebCore::TrailingObjects::updateMidpointsForTrailingBoxes):

2011-08-18  Matt Lilek  <mlilek@apple.com>

        <rdar://problem/9979913> iOS: Document::updateBaseURL shouldn't accept javascript URLs (65038)

        Merge OpenSource r91611.

    2011-07-22  Sergey Glazunov  <serg.glazunov@gmail.com>

        Perform the JavaScript navigation check on a complete URL
        https://bugs.webkit.org/show_bug.cgi?id=65038

        Reviewed by Adam Barth.

        Test: http/tests/security/xss-DENIED-document-baseURI-javascript.html

        * page/DOMWindow.cpp:
        (WebCore::DOMWindow::setLocation):
        (WebCore::DOMWindow::createWindow):
        (WebCore::DOMWindow::open):

2011-08-18  Matt Lilek  <mlilek@apple.com>

        <rdar://problem/9979887> iOS: DOMWindow::open performs a security check on a wrong window (64651)

        Merge OpenSource r91152.

    2011-07-16  Sergey Glazunov  <serg.glazunov@gmail.com>

        DOMWindow::open performs a security check on a wrong window
        https://bugs.webkit.org/show_bug.cgi?id=64651

        Reviewed by Adam Barth.

        Test: http/tests/security/xss-DENIED-window-open-parent.html

        * page/DOMWindow.cpp:
        (WebCore::DOMWindow::open):

2011-08-18  Matt Lilek  <mlilek@apple.com>

        <rdar://problem/9979951> iOS: The beforeload event allows tracking URI changes in a frame (64482)

        Merge OpenSource r91044.

    2011-07-14  Adam Barth  <abarth@webkit.org>

        The beforeload event allows tracking URI changes in a frame
        https://bugs.webkit.org/show_bug.cgi?id=64482

        Reviewed by Nate Chapin.

        Tests: http/tests/security/beforeload-iframe-client-redirect.html
               http/tests/security/beforeload-iframe-server-redirect.html

        Only dispatch the beforeload event for a frame if we haven't yet
        committed our first real load.  The URL that we send to our parent will
        be the same URL the parent seens in the src attribute.

        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::loadWithDocumentLoader):

2011-08-18  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/9981301> Enclosed numeral emoji (such as 1⃣) can get broken up at line wrap

        Merged TOT WebKit r93384.

        Test: platform/iphone-simulator/iphone/fast/text/mid-word-break-before-combining-mark.html

    2011-08-18  Dan Bernstein  <mitz@apple.com>

        Mid-word break can occur between a character and a combining mark
        https://bugs.webkit.org/show_bug.cgi?id=66529

        Reviewed by Simon Fraser.

        No test added because I could not find a combining mark with a non-zero advance in
        any of the system fonts and tests fonts. 

        * rendering/RenderBlockLineLayout.cpp:
        (WebCore::RenderBlock::LineBreaker::nextLineBreak): Disallow a mid-word break before a
        combining mark.

2011-08-18  Dan Bernstein  <mitz@apple.com>

        iOS-specific addendum to <rdar://problem/9973194> REGRESSION: Fonts with positive descender value (should be negative) are treated as having “negative descender” resulting in bottoms of characters cut off

        * platform/graphics/mac/SimpleFontDataMac.mm:
        (WebCore::SimpleFontData::platformInit):

2011-08-18  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/9973194> REGRESSION: Fonts with positive descender value (should be negative) are treated as having “negative descender” resulting in bottoms of characters cut off

        Merged TOT WebKit r93376.

    2011-08-18  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/9973194> Fonts that specify a positive descender value are treated as having descenders ending above the baseline
        https://bugs.webkit.org/show_bug.cgi?id=66515

        Reviewed by Darin Adler.

        No test because none of the system fonts and test fonts have an incorrectly-specified descender value.

        * platform/graphics/mac/SimpleFontDataMac.mm:
        (WebCore::SimpleFontData::platformInit): If the font specifies a positive descender, assume that it meant
        the same amount, but negative. This is consistent with what Core Text does.

2011-08-18  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/9980402> TELLURIDE: Crashing in DiskImageCache::Entry::map block when flipping through interactive epub

        Reviewed by Joseph Pecoraro.
        
        When the buffer has just one reference, DiskImageCache::Entry::mapInternal() would clear the buffer
        and return false. However, DiskImageCache::Entry::map() would then schedule a block on the WebThread
        to call failedMemoryMap() on that null buffer.
        
        Fix by moving the "has one ref" optimization out of mapInternal() into map(), and doing an early
        return, so that we don't every schedule the block and risk dereferencing a null buffer.

        * loader/DiskImageCache.cpp:
        (WebCore::DiskImageCache::Entry::mapInternal):
        (WebCore::DiskImageCache::Entry::map):

2011-08-15  Yongjun Zhang  <yongjun_zhang@apple.com>

        Reviewed by David Kilzer, Antti Koivisto and Sam Weinig.

        <rdar://problem/9778644> scheme of URL not preserving case in UIWebView delegate callback.

        Don't canonicalize URL scheme for applications linked before iOS 5.  The patch is based on Joe's work.  To avoid
        performance hit in WebCore::equal(), we make a pointer for string comparison function and switch to case-insensitive
        or sensitive version at WebKit initialization.

        * WebCore.exp.in:
        * platform/KURL.cpp:
        (WebCore::enableKURLSchemeCanonicalization): switch to use case-insensitive or case-sensitive string compare function, depending on
            whether the app is linked before iOS 5 SDK.
        (WebCore::equal):
        (WebCore::KURL::parse):
        * platform/KURL.h:
        * platform/cf/KURLCFNet.cpp:
        (WebCore::KURL::createCFURL): remove application specific quirks for URL scheme canonicalization.

2011-08-18  Dan Bernstein  <mitz@apple.com>

        Reviewed by Justin Garcia and Joseph Pecoraro.

        <rdar://problem/9977703> REGRESSION: Images sometimes fail to render in iBooks read-aloud books

        * platform/SharedBuffer.cpp:
        (WebCore::SharedBuffer::markAsMemoryMapped): Use size() rather than m_size to get the size for
        restoring it after clearing, since m_size is 0 for purgeable buffers.

2011-08-17  Brady Eidson  <beidson@apple.com>

        <rdar://problem/9564357> REGRESSION: Constantly prompted for authentication when searching on il.systemb2b.com

        Merge ToT http://trac.webkit.org/changeset/93247

    2011-08-17  Brady Eidson  <beidson@apple.com>

        https://bugs.webkit.org/show_bug.cgi?id=66354 and <rdar://problem/9965209>
        Regression:  On Lion, redirects lose HTTP authentication headers

        Reviewed by Alexey Proskuryakov and Darin Adler.

        This changes makes WebCore try to apply basic credentials after a redirect if the redirect is to the same origin,
        assuming the redirected URL did not contain credentials directly.

        Tests: http/tests/misc/authentication-redirect-1/authentication-sent-to-redirect-cross-origin.html
               http/tests/misc/authentication-redirect-2/authentication-sent-to-redirect-same-origin.html
               http/tests/misc/authentication-redirect-3/authentication-sent-to-redirect-same-origin-with-location-credentials.html

        * platform/network/cf/ResourceHandleCFNet.cpp:
        (WebCore::applyBasicAuthorizationHeader): Apply the user/password from a credential to the HTTP headers for a request.
        (WebCore::ResourceHandle::createCFURLConnection): Use the applyBasicAuthorizationHeader helper.
        (WebCore::ResourceHandle::willSendRequest): If this is a redirect within the same origin, apply any stored target credentials to the new request.

        * platform/network/mac/ResourceHandleMac.mm:
        (WebCore::applyBasicAuthorizationHeader): Apply the user/password from a credential to the HTTP headers for a request.
        (WebCore::ResourceHandle::createNSURLConnection): Use the applyBasicAuthorizationHeader helper.
        (WebCore::ResourceHandle::willSendRequest): If this is a redirect within the same origin, apply any stored target credentials to the new request.

2011-08-17  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/9949582> [Softbank] Emoji "Flags" disappear at line break

        Merged TOT WebKit r93237.

    2011-08-17  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/9971293> Mid-word breaks can occur in the middle of a surrogate pair
        https://bugs.webkit.org/show_bug.cgi?id=66402

        Reviewed by Dave Hyatt.

        Test: fast/text/midword-break-before-surrogate-pair-2.html

        * rendering/RenderBlockLineLayout.cpp:
        (WebCore::RenderBlock::LineBreaker::nextLineBreak): Just never allow a mid-word
        break before a trailing surrogate.

2011-08-17  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/9913526> REGRESSION: 9A294: Sports.fr does not load articles anymore

        Reviewed by David Kilzer and Alexey Proskuryakov.

        There is a subtle behavior change between the Foundation and CFNetwork codepaths in that the
        Foundation side does not clear out the m_httpMethod field when the NSURLRequest is nil.
        While CF does clear it out. I filed <https://bugs.webkit.org/show_bug.cgi?id=66336> to fix
        the NS code. This causes an equality check later on to succeed with CF where otherwise it
        was failing with NS. The real fix for this should be to fix the delegate callbacks so we
        make the callback when the request is nil. This is tracked by
        <https://bugs.webkit.org/show_bug.cgi?id=66350>. Unfortunately, it caused layout tests to
        fail in open source which is why I resorted to this hack.

        For Telluride, the safest option is to mimic the Foundation based code and "save" the
        m_httpMethod field. This will let code in PolicyChecker run in the same way it did before.

        * platform/network/cf/ResourceRequestCFNet.cpp:
        (WebCore::ResourceRequest::doUpdateResourceRequest):

2011-08-16  Yongjun Zhang  <yongjun_zhang@apple.com>

        Reviewed by Pratik Solanki.

        <rdar://problem/9119126> Images added via +[WebCache addImageToCache:forURL:] elicit ImageIO errors when drawn

        A cached image added by MemoryCache::addImageToCache doesn't have encoded data.  If this image's decoded
        data is destroyed, it won't be able to re-decode since there is no raw data.  In WebCore, if we change the
        src attribute of an image element, ImageLoader::updateFromElement() will call resetAnimation for the underlying
        bitmap image, which will eventually destroy decoded data if the image size is bigger than 2M pixels in iOS.  If
        this image was added by MemoryCache::addImageToCache, we will end up with a broken image at painting.

        The fix is to avoid destroying decoded data in resetAnimation, if this image was added by MemoryCache::addImageToCache.
        When the image is not needed, memory cache will put it into dead resources and destroy the decoded data before evicting it.

        * WebCore.xcodeproj/project.pbxproj:
        * loader/cache/MemoryCache.cpp:
        (WebCore::MemoryCache::addImageToCache): set the correct decoded size for this image, and use MemoryCache::add to add the resource.
        * platform/graphics/BitmapImage.cpp:
        (WebCore::BitmapImage::destroyDecodedDataIfNecessary): add a virtual method to tell if we can destroy decoded data.
        * platform/graphics/BitmapImage.h:
        (WebCore::BitmapImage::canDestroyDecodedDataIfNecessary):
        * platform/graphics/iphone/BitmapImageManual.h: Added.
        (WebCore::BitmapImageManual::create): Add a new class BitmapImageManual.
        (WebCore::BitmapImageManual::canDestroyDecodedDataIfNecessary): don't destroy decoded data for BitmapImageManual.

2011-08-16  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Kilzer.

        <rdar://problem/9959497> Overretain of System Fallback Font

        The contract is that FontCache::getFontDataForCharacters should
        not retain the font it returns, so use the non retained version.

        * platform/graphics/mac/FontCacheMac.mm:
        (WebCore::FontCache::getFontDataForCharacters):
        Use the non retained version.

        (WebCore::FontCache::getCustomFallbackFont):
        Drive-by fix for a separate merge issue from before.
        FontCache::getCachedFontPlatformData does not have a
        ShouldRetain parameter, this was being passed as "false" for
        the optional third parameter. That is what we want, but it
        is misleading to pass DoNotRetain. Just use the default false.

2011-08-16  Joseph Pecoraro  <joepeck@webkit.org>

        Merged ToT WebKit r93171.

        <rdar://problem/9959497> Overretain of System Fallback Font

    2011-08-16  Joseph Pecoraro  <joepeck@webkit.org>

            ASSERT in fast/css/custom-font-xheight.html
            https://bugs.webkit.org/show_bug.cgi?id=66328

            Reviewed by Dan Bernstein.

            In r93140 the temporary font created for a remote CSS font face
            was created without being retained. We need to protect the
            font from being purged while we hold onto it, so add a font cache
            purge preventer.

            * css/CSSFontFaceSource.cpp:
            (WebCore::CSSFontFaceSource::getFontData):

2011-08-16  Joseph Pecoraro  <joepeck@webkit.org>

        Merged ToT WebKit r93140.

        <rdar://problem/9959497> Overretain of System Fallback Font

        (WebCore::FontCache::getLastResortFallbackFont):
        * platform/graphics/mac/FontCacheMac.mm:
        Changed the iOS portion of getLastResortFallbackFont to
        handle the new ShouldRetain parameter.

    2011-08-15  Joseph Pecoraro  <joepeck@webkit.org>

            Abandoned Memory: Temporary CSS Fonts May Never Be Purged
            https://bugs.webkit.org/show_bug.cgi?id=66153

            Reviewed by Dan Bernstein.

            While a remote CSS font face is loading we fallback to a
            temporary font. We don't want to retain the fallback font
            because noone takes ownership of the temporary font. This
            patch adds a way to get an uncached fallback font, which
            plumbs the ShouldRetain enum through the different platform
            implementations of getLastResortFallbackFont.

            No new tests, no functional change.

            * css/CSSFontFaceSource.cpp:
            (WebCore::CSSFontFaceSource::getFontData):
            * platform/graphics/FontCache.cpp:
            (WebCore::FontCache::getNonRetainedLastResortFallbackFont):
            * platform/graphics/FontCache.h:
            * platform/graphics/chromium/FontCacheChromiumWin.cpp:
            (WebCore::fontDataFromDescriptionAndLogFont):
            (WebCore::GetLastResortFallbackFontProcData::GetLastResortFallbackFontProcData):
            (WebCore::getLastResortFallbackFontProc):
            (WebCore::FontCache::getLastResortFallbackFont):
            * platform/graphics/chromium/FontCacheLinux.cpp:
            (WebCore::FontCache::getLastResortFallbackFont):
            * platform/graphics/freetype/FontCacheFreeType.cpp:
            (WebCore::FontCache::getLastResortFallbackFont):
            * platform/graphics/haiku/FontCacheHaiku.cpp:
            (WebCore::FontCache::getLastResortFallbackFont):
            * platform/graphics/mac/FontCacheMac.mm:
            (WebCore::FontCache::getLastResortFallbackFont):
            * platform/graphics/pango/FontCachePango.cpp:
            (WebCore::FontCache::getLastResortFallbackFont):
            * platform/graphics/qt/FontCacheQt.cpp:
            (WebCore::FontCache::getLastResortFallbackFont):
            * platform/graphics/win/FontCacheWin.cpp:
            (WebCore::fontDataFromDescriptionAndLogFont):
            (WebCore::FontCache::getLastResortFallbackFont):
            * platform/graphics/wince/FontCacheWinCE.cpp:
            * platform/graphics/wx/FontCacheWx.cpp:
            (WebCore::FontCache::getLastResortFallbackFont):

2011-08-16  Paul Knight  <pknight@apple.com>

        <rdar://problem/9937022> MobileSafari crashing in -[BookmarksTableViewController _bookmarkAtIndexPath:]

        Reviewed by Scott Grant.

        Speculative crash fix. Make sure we have a DOMWindow before asking it
        if it has any touch event listeners.

        * dom/DocumentIPhone.cpp:
        (WebCore::Document::getTouchRects):

2011-08-16  Anders Carlsson  <andersca@apple.com>

        <rdar://problem/9434765> Flashes of stale content when rotating and zooming pages with tiled layers (e.g nytimes.com, apple.com/ipad)

        Reviewed by Chris Marrin.

        When updating the contents scale of a tiled layer, make sure to invalidate all the current tiles. This way we won't end up with stale
        tiles in weird places.

        * platform/graphics/ca/mac/PlatformCALayerMac.mm:
        (PlatformCALayer::setContentsScale):

2011-08-16  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/9935030> Atomic Web Browser pages never finish loading on Telluride9A296

        Reviewed by David Kilzer.

        Even though the delegate callback API webView:shouldStartLoadWithRequest:navigationType says
        that we pass it an NSURLRequest, we used to pass it an NSMutableURLRequest and the app was
        calling setCachePolicy on that object. With the move to CFNetwork based loader, we started
        returning an NSURLRequest object which broke the app. Return an NSMutableURLRequest
        instead. This is safe because an NSMutableURLRequest is a subclass of NSURLRequest and while
        I am passing in a CFURLRequestRef instead of a CFMutableURLRequestRef, the only difference
        between those two is a const attribute on CFURLRequestRef. So this should be fine.

        * platform/network/mac/ResourceRequestMac.mm:
        (WebCore::ResourceRequest::updateNSURLRequest):

2011-08-16  Anders Carlsson  <andersca@apple.com>

        First step towards fixing 
        
        <rdar://problem/9434765> Flashes of stale content when rotating and zooming pages with tiled layers (e.g nytimes.com, apple.com/ipad)
        
        Back out r1060763, r1060752, r1060018 that would compute the visible layer rect when updating the compositing state. Turns out we don't
        need this, so there's no point in wasting cycles computing it. The fix for <rdar://problem/9706222> also did not need the visible layer rect
        to be computed all the time.

2011-08-16  Ian Henderson  <ianh@apple.com>

        Reviewed by Antti Koivisto.

        <rdar://problem/9958553> Zoomed out invalidation rect is wrong while zooming

        While zooming, we make the zoomed out grid active temporarily.  During
        this time, the scale factor of the zoomed out grid's host layer is not
        the same as the overall tile cache scale factor.

        Whenever we invalidate the zoomed out grid, even if it's active, we
        need to make sure the invalidation rect is properly transformed.

        * platform/iphone/TileCache.mm:
        (WebCore::TileCache::invalidateTiles):

2011-08-16  Ian Henderson  <ianh@apple.com>

        Reviewed by Antti Koivisto.

        <rdar://problem/9946759> REGRESSION: Calendar popup on expedia.com not repainted after choosing a date

        While zooming, we switch temporarily to the zoomed out tile grid.
        Typically when the zoomed out tile grid is active, we will switch back
        to the zoomed in grid only after removing all zoomed in tiles.  For this
        reason, we don't invalidate zoomed in tiles while zoomed out.

        We keep both tile grids on screen while zooming, however, and if the
        document scale is unchanged, we may switch back to the zoomed in tile
        grid without dropping anything.  In this case, the zoomed in tiles
        will end up stale.

        The fix is to invalidate zoomed in tiles while zooming, even if the
        zoomed out grid is active.

        * platform/iphone/TileCache.mm:
        (WebCore::TileCache::invalidateTiles):

2011-08-16  Alexey Proskuryakov  <ap@apple.com>

        <rdar://problem/9946466> Backspacing over Emoji flags removes icon but leaves letter-symbol behind

        Merge open source r93068.

    2011-08-15  Alexey Proskuryakov  <ap@apple.com>

        Regional indicator symbols that are combined should behave as a single character when editing
        https://bugs.webkit.org/show_bug.cgi?id=65395

        Reviewed by Dan Bernstein.

        Part one: make backspace work.

        Test: editing/deleting/regional-indicators.html

        * rendering/RenderText.cpp:
        (WebCore::isRegionalIndicator):
        (WebCore::RenderText::previousOffsetForBackwardDeletion): Added a special case for regional
        indicator symbols.

2011-08-15  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/9941235> [CFNetwork] willCacheResponse() leaks CFCachedURLResponseRef if delegate changes CacheStoragePolicy (66113)

        Merged ToT WebKit r92897.

    2011-08-11  David Kilzer  <ddkilzer@apple.com>

        <http://webkit.org/b/66113> [CFNetwork] willCacheResponse() leaks CFCachedURLResponseRef if delegate changes CacheStoragePolicy

        Reviewed by Joseph Pecoraro.

        This first appeared in ToT WebKit r23462 (Windows merge).

        * platform/network/cf/ResourceHandleCFNet.cpp:
        (WebCore::willCacheResponse): Only retain cachedResponse if we
        are returning the same object passed into the method, otherwise
        we end up double-retaining the new object created.

2011-08-12  Chris Marrin  <cmarrin@apple.com>

        Reviewed by Simon Fraser.

        <rdar://problem/9706222> MyShuttle flip animation flashes badly

        Get rid of backingScaleFactor() from computation that decides whether or not to
        flip into tiled layer. This means that tiled layers on HiDPI devices (currently
        only N90) will not kick in until the layer is 2560 pixels in one dimension.
        This requires <rdar://problem/9947342> to avoid failure of accelerated
        drawing to layers > 2048 pixels.

        * platform/graphics/ca/GraphicsLayerCA.cpp:
        (WebCore::GraphicsLayerCA::requiresTiledLayer):

2011-08-14  Scott Grant  <scott.grant@apple.com>

        Part of <rdar://problem/9224632> SF: PDF rendering issue with http://www.lpch.org/pdf/annual-report-2008.pdf

        Reviewed by Joe Pecoraro.

        Correct an ASSERT that would cause a crash closing a PDF tab.

        * platform/SharedBuffer.cpp:
        (WebCore::SharedBuffer::setMemoryMappedNotificationCallback):

2011-07-31  Matt Lilek  <mlilek@apple.com>

        <rdar://problem/9739282> iOS: REGRESSION (83075): Use after free in line box culling optimization

        Merge OpenSource r91781.

    2011-07-26  David Hyatt  <hyatt@apple.com>

        https://bugs.webkit.org/show_bug.cgi?id=60778

        Use after free because of line box culling optimization regression.

        In the case of a child with no line box being removed (typically
        a <br> in quirks mode), if there is no previous sibling with a line
        box, then we have a potential problem with the culling optimization.

        The culled inline may still have other leaf line box children, but
        they may follow the removed <br>. In this case we can't rely on
        them, since we need a line box that comes before the <br>.

        The fix is to simply recur up to the parent if we are a culled inline
        and could not find a previous line box.

        Reviewed by Dan Bernstein.

        Added editing/execCommand/crash-line-break-after-outdent.html

        * rendering/RenderLineBoxList.cpp:
        (WebCore::RenderLineBoxList::dirtyLinesFromChangedChild):

2011-07-31  Matt Lilek  <mlilek@apple.com>

        <rdar://problem/9861426> iOS: REGRESSION (r85964): Relayout causes crash with some nested elements (input) (64286)

        Merge OpenSource r91689.

    2011-07-25  Daniel Bates  <dbates@rim.com>

        REGRESSION (r85964): Improper relayout of some nested positioned elements
        https://bugs.webkit.org/show_bug.cgi?id=64286

        Reviewed by David Hyatt.

        Fixes an issue when traversing up the containing block hierarchy after skipping
        relatively positioned inlines.

        When processing a positioned element we skip any intermediate inlines to get to
        to enclosing block B, but don't use the containing block for B (call this P_B) to
        properly continue traversing up the containing block hierarchy. So, B may be
        considered again instead of looking at P_B. Hence, we don't set the correct dirty
        bits for P_B and may not schedule a relayout with respect to the correct layout node.

        Test: fast/block/positioning/relayout-nested-positioned-elements-crash.html

        * rendering/RenderObject.h:
        (WebCore::RenderObject::markContainingBlocksForLayout):

2011-07-31  Matt Lilek  <mlilek@apple.com>

        <rdar://problem/9861398> iOS: Use after free in CSSStyleSheet::checkLoaded (64736)

        Merge OpenSource r91531.

    2011-07-21  Gavin Peters  <gavinp@chromium.org>

        Extend the protector of a CSS style sheet.  Because checkLoaded() can recursively delete
        parent style elements, the protector should be extended to include the parent call.

        https://bugs.webkit.org/show_bug.cgi?id=64736

        Reviewed by Simon Fraser.

        Test: fast/css/css-imports-2.html

        * css/CSSStyleSheet.cpp:
        (WebCore::CSSStyleSheet::checkLoaded):

2011-07-31  Matt Lilek  <mlilek@apple.com>

        <rdar://problem/9861394> iOS: Stale pointer due to floats not removed (flexible box display) (64603)

        Merge OpenSource r91386.

    2011-07-20  Tony Chang  <tony@chromium.org>

        Stale pointer due to floats not removed (flexible box display)
        https://bugs.webkit.org/show_bug.cgi?id=64603

        Reviewed by David Hyatt.

        Flexbox items should avoid floats.

        Test: fast/flexbox/horizontal-box-float-crash.html

        * rendering/RenderBox.cpp:
        (WebCore::RenderBox::avoidsFloats):
        * rendering/RenderBox.h:
        (WebCore::RenderBox::isDeprecatedFlexItem):

2011-07-31  Matt Lilek  <mlilek@apple.com>

        <rdar://problem/9861421> iOS: Use after free in ReplacementFragment::removeUnrenderedNodes (64801)

        Merge OpenSource r91270.

    2011-07-19  Abhishek Arya  <inferno@chromium.org>

        Crash when removing unrenderered nodes in replacement fragment.
        https://bugs.webkit.org/show_bug.cgi?id=64801

        Reviewed by Ryosuke Niwa.

        Test: editing/pasteboard/replacement-fragment-remove-unrendered-node-crash.html

        * editing/ReplaceSelectionCommand.cpp:
        (WebCore::ReplacementFragment::removeUnrenderedNodes):

2011-07-31  Matt Lilek  <mlilek@apple.com>

        <rdar://problem/9727602> iOS: SecuritySaver: *exploitable* use after free in use after free in SVGUseElement::invalidateShadowTree / SVGElementInstance::invalidateAllInstancesOfElement (63739)

        Merge OpenSource r91005.

    2011-07-14  Tim Horton  <timothy_horton@apple.com>

        Clear SVGElementInstance's children immediately upon detachment
        https://bugs.webkit.org/show_bug.cgi?id=63739
        <rdar://problem/9705708>

        Reviewed by Nikolas Zimmermann.

        In addition to clearing the instance's children in the destructor,
        clear them when the instance is detached from its <use>. This way,
        we won't attempt to use them after we're detached but before the
        destructor has been called.

        Test: svg/custom/use-crash-using-children-before-destroy.svg

        * svg/SVGElementInstance.cpp:
        (WebCore::SVGElementInstance::~SVGElementInstance):
        (WebCore::SVGElementInstance::clearChildren):
        * svg/SVGElementInstance.h:
        * svg/SVGUseElement.cpp:
        (WebCore::SVGUseElement::detachInstance):

2011-07-31  Matt Lilek  <mlilek@apple.com>

        <rdar://problem/9778787> iOS: Use after free in FrameLoader (64457)

        Merge OpenSource r90936.

    2011-07-13  Abhishek Arya  <inferno@chromium.org>

        Reviewed by Adam Barth.

        Issue with Frame lifetime due to deletion in beforeload event.
        https://bugs.webkit.org/show_bug.cgi?id=64457

        Copy the Frame protector higher in the stack from loadWithDocumentLoader
        to loadFrameRequest since any of loadPostRequest or loadURL can call
        loadWithDocumentLoader, thereby dispatching the beforeload event and
        blowing away the frame. This deleted frame will be later accessed in
        the loadFrameRequest function causing a crash.       
 
        Test: fast/events/form-iframe-target-before-load-crash2.html

        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::loadFrameRequest):
        (WebCore::FrameLoader::loadWithDocumentLoader):

2011-07-31  Matt Lilek  <mlilek@apple.com>

        <rdar://problem/9778773> iOS: Protect reference to Geolocation object in timerFired and setIsAllowed. (64363)

        Merge OpenSource r90914.

    2011-07-13  John Knottenbelt  <jknotten@chromium.org>

        Reference Geolocation object from GeoNotifier and Geolocation::setIsAllowed.
        https://bugs.webkit.org/show_bug.cgi?id=64363

        Reviewed by Tony Gentilcore.

        Test: fast/dom/Geolocation/remove-remote-context-in-error-callback-crash.html

        * page/Geolocation.cpp:
        (WebCore::Geolocation::setIsAllowed):
        * page/Geolocation.h:

2011-07-31  Matt Lilek  <mlilek@apple.com>

        <rdar://problem/9778740> iOS: Partial layout when a flex-box has visibility: collapse (63776)

        Merge OpenSource r90568.

    2011-07-07  Julien Chaffraix  <jchaffraix@webkit.org>

        Reviewed by David Hyatt.

        Partial layout when a flex-box has visibility: collapse
        https://bugs.webkit.org/show_bug.cgi?id=63776

        Tests: fast/flexbox/crash-button-input-autofocus.html
               fast/flexbox/crash-button-keygen.html
               fast/flexbox/crash-button-relayout.html

        The issue is that FlexBoxIterator would skip any child if it has visibility: collapsed.
        However if one of the child is anonymous, it may wrap some other child that would be skipped.
        Now FlexBoxIterator is called during the layout phase and thus some nodes would not relayouted
        as expected.

        * rendering/RenderDeprecatedFlexibleBox.cpp:
        (WebCore::FlexBoxIterator::next): When iterating, don't skip anonymous content as there may
        be real content hiding below.

2011-07-31  Matt Lilek  <mlilek@apple.com>

        <rdar://problem/9778761> iOS: Update SVG position values on SVG DOM updates (62439)

        Merge OpenSource r90166.

    2011-06-30  Julien Chaffraix  <jchaffraix@webkit.org>

        Reviewed by Nikolas Zimmermann.

        Update SVG position values on SVG DOM updates
        https://bugs.webkit.org/show_bug.cgi?id=62439

        Test: svg/custom/crash-textPath-attributes.html

        * rendering/svg/RenderSVGInline.cpp:
        (WebCore::RenderSVGInline::destroy): Notify our containing RenderSVGText that it needs
        to update its positioning information.

        * rendering/svg/SVGInlineFlowBox.cpp:
        (WebCore::SVGInlineFlowBox::calculateBoundaries): Check the type of the InlineBox
        like the rest of the code (fixes an ASSERT_NOT_REACHED in InlineBox::calculateBoudaries).

        * rendering/svg/SVGTextLayoutAttributesBuilder.cpp:
        (WebCore::SVGTextLayoutAttributesBuilder::buildLayoutAttributesForTextSubtree): Clear
        our cached layout attributes every time we invalidate them. This avoids keeping stale
        attribute that have a backpointer to a RenderObject.

2011-07-31  Matt Lilek  <mlilek@apple.com>

        <rdar://problem/9778728> iOS: Assertion failure in RenderSVGInlineText::characterStartsNewTextChunk (63076)

        Merge OpenSource r90156.

    2011-06-30  Julien Chaffraix  <jchaffraix@webkit.org>

        Reviewed by Nikolas Zimmermann.

        Assertion failure in RenderSVGInlineText::characterStartsNewTextChunk
        https://bugs.webkit.org/show_bug.cgi?id=63076

        Tests: svg/custom/crash-text-in-textpath.svg
               svg/custom/text-node-in-text-invalidated.svg

        The problem was that we did not call setNeedsPositionUpdate on RenderSVGText. When
        doing our layout, we would not update the attributes on our SVGRenderInlineText as
        we would not lay it out.

        This was caused by childrenChanged being overridden on SVGTextPositioningElement but
        not on SVGTextPathElement.

        As both classes shared the same mother class, it made sense to move the logic here.
        There should be no other side effects as SVGTextPathElement and SVGTextPositioningElement
        are the only classes deriving from SVGTextContentElement.

        * svg/SVGTextContentElement.cpp:
        (WebCore::SVGTextContentElement::childrenChanged): Moved this method from SVGTextPositioningElement.
        * svg/SVGTextContentElement.h:
        * svg/SVGTextPositioningElement.cpp:
        (WebCore::SVGTextPositioningElement::svgAttributeChanged): Updated after updatePositioningValuesInRenderer
        removal, replaced by RenderSVGText::locateRenderSVGTextAncestor.
        * svg/SVGTextPositioningElement.h:

2011-07-31  Matt Lilek  <mlilek@apple.com>

        <rdar://problem/9739102> iOS: Crash when DOMSubtreeModified event modifies a range (63650)

        Merge OpenSource r90130.

    2011-06-30  Abhishek Arya  <inferno@chromium.org>

        Reviewed by Ryosuke Niwa.

        Crash when calling DOMSubtreeModified event when extracting range
        contents.
        https://bugs.webkit.org/show_bug.cgi?id=63650

        Convert a few nodes to RefPtrs and add commonRoot verification checks
        for Range::processContents.

        Tests: fast/dom/Range/range-extract-contents-event-fire-crash.html
               fast/dom/Range/range-extract-contents-event-fire-crash2.html

        * dom/Range.cpp:
        (WebCore::childOfCommonRootBeforeOffset):
        (WebCore::Range::processContents):
        (WebCore::Range::processContentsBetweenOffsets):
        (WebCore::Range::processAncestorsAndTheirSiblings):

2011-07-31  Matt Lilek  <mlilek@apple.com>

        <rdar://problem/9734088> iOS: Use after free due to float not removed from lineBreakObj (float not placed, ASSERT(isPlaced)) (60307)

        Merge OpenSource r90068.

    2011-06-23  Abhishek Arya  <inferno@chromium.org>

        Reviewed by James Robinson.

        In RenderBlock, RenderWidget and RenderReplaced destroy functions,
        call dirtyLinesFromChangedChild to tell our parent that we are going away.
        https://bugs.webkit.org/show_bug.cgi?id=60307

        Test: fast/block/child-not-removed-from-parent-lineboxes-crash.html
              fast/block/block-not-removed-from-parent-lineboxes-crash.html

        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::destroy):
        * rendering/RenderReplaced.cpp:
        (WebCore::RenderReplaced::destroy):
        * rendering/RenderReplaced.h:
        * rendering/RenderWidget.cpp:
        (WebCore::RenderWidget::destroy):

2011-07-31  Matt Lilek  <mlilek@apple.com>

        <rdar://problem/9778715> iOS: Regression (r89733): Use after free in fast/forms/text-control-intrinsic-widths.html (63543)

        Merge OpenSource r89950.

    2011-06-28  Abhishek Arya  <inferno@chromium.org>

        Reviewed by Anders Carlsson.

        Split the string creation into a local (while creating text runs)
        so that it is not destroyed prematurely.
        https://bugs.webkit.org/show_bug.cgi?id=63543

        Run fast/forms/text-control-intrinsic-widths.html under valgrind/ASAN.       
        * rendering/RenderFileUploadControl.cpp:
        (WebCore::RenderFileUploadControl::computePreferredLogicalWidths):
        this one is just done for caution, in case, we don't do the same
        mistake when adding legacy rounding hacks option.
        * rendering/RenderTextControl.cpp:
        (WebCore::RenderTextControl::getAvgCharWidth):

2011-07-31  Matt Lilek  <mlilek@apple.com>

        <rdar://problem/9727708> iOS: Use after free due to floats not removed (63355)

        Merge OpenSource r89836.

    2011-06-27  Abhishek Arya  <inferno@chromium.org>

        Reviewed by Simon Fraser.

        Fix removal of overhanging floats on style changes to absolute/fixed position.
        https://bugs.webkit.org/show_bug.cgi?id=63355

        1. If we are not currently positioned.
        2. And we are not floating. (If we are floating, then this will be automatically
           done in RenderBox::styleWillChange as part of removeFloatingOrPositionedChildFromBlockLists) 
        3. And we have overhanging floats from previous sibling blocks.
        4. And our new new style tells that we will have absolute or fixed position.

        Then, we mark all our descendants with floats for layout. This will make sure that
        overhanging floats are removed. Also, it is important to do that since if that previous
        sibling block goes away, it is not able to tell us that to remove those floats thinking 
        that being a positioned block, we should have removed them already.

        Tests: fast/block/float/intruding-float-add-in-sibling-block-on-static-position.html
               fast/block/float/intruding-float-add-in-sibling-block-on-static-position2.html
               fast/block/float/intruding-float-remove-from-sibling-block-on-absolute-position.html
               fast/block/float/intruding-float-remove-from-sibling-block-on-absolute-position2.html
               fast/block/float/intruding-float-remove-from-sibling-block-on-fixed-position.html
               fast/block/float/intruding-float-remove-from-sibling-block-on-fixed-position2.html
               fast/block/float/overhanging-float-add-in-static-position-block.html
               fast/block/float/overhanging-float-add-in-static-position-block2.html
               fast/block/float/overhanging-float-remove-from-absolute-position-block.html
               fast/block/float/overhanging-float-remove-from-absolute-position-block2.html
               fast/block/float/overhanging-float-remove-from-fixed-position-block.html
               fast/block/float/overhanging-float-remove-from-fixed-position-block2.html

        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::styleWillChange):

2011-07-31  Matt Lilek  <mlilek@apple.com>

        <rdar://problem/9778860> iOS: REGRESSION (r65062): Out of bound access in TextIterator by first-letter on RTL text (63334)

        Merge OpenSource r89831.

    2011-06-27  Ryosuke Niwa  <rniwa@webkit.org>

        Reviewed by Kent Tamura.

        Crash in TextIterator
        https://bugs.webkit.org/show_bug.cgi?id=63334

        Fix a crash in TextIterator. Keep m_sortedTextBoxes and renderer consistent
        and check !m_offset when handling first letter.

        Also add more assertions to help detecting similar bugs.

        Test: editing/text-iterator/first-letter-rtl-crash.html

        * editing/TextIterator.cpp:
        (WebCore::TextIterator::handleTextNode):
        (WebCore::TextIterator::emitText):

2011-07-31  Matt Lilek  <mlilek@apple.com>

        <rdar://problem/9778682> iOS: Use after free due to removedFromDocument not getting called when node deleted (62956)

        Merge OpenSource r89780.

    2011-06-26  Adam Barth  <abarth@webkit.org>

        Reviewed by Kent Tamura.

        m_formElementsWithFormAttribute doesn't ref the objects it holds
        https://bugs.webkit.org/show_bug.cgi?id=62956

        Test: fast/forms/form-associated-element-crash3.html

        * dom/Document.h:

2011-07-31  Matt Lilek  <mlilek@apple.com>

        <rdar://problem/9778751> iOS: CSSPrimitiveValue::getIntValue() and getFloatValue() should clamp to avoid overflow (53449)

        Merge OpenSource r89705.

    2011-06-24  Abhishek Arya  <inferno@chromium.org>

        Reviewed by Darin Adler.

        Add clamping for CSSPrimitiveValues and SVGInlineText font size.
        https://bugs.webkit.org/show_bug.cgi?id=53449        

        Test: svg/text/svg-zoom-large-value.xhtml

        * css/CSSPrimitiveValue.cpp:
        (WebCore::CSSPrimitiveValue::CSSPrimitiveValue): add asserts to detect if the
        number created is valid.
        * css/CSSPrimitiveValue.h: add clamping checks to prevent overflows.
        (WebCore::CSSPrimitiveValue::getFloatValue):
        (WebCore::CSSPrimitiveValue::getIntValue):
        * css/CSSStyleSelector.cpp:
        (WebCore::CSSStyleSelector::getComputedSizeFromSpecifiedSize): split into two
        static functions, one specific to CSSStyleSelector and other generic to help
        in clamping font size for other callers like svg text, etc.
        * css/CSSStyleSelector.h:
        * platform/graphics/FontDescription.h: add asserts to detect if the new font
        size is valid.
        (WebCore::FontDescription::setComputedSize):
        (WebCore::FontDescription::setSpecifiedSize):
        * rendering/svg/RenderSVGInlineText.cpp:
        (WebCore::RenderSVGInlineText::computeNewScaledFontForStyle): use the new helper
        from CSSStyleSelector to help in clamping new scaled font size. do not use
        "smart minimum" since svg allows really small unreadable fonts (tested by existing
        layout tests). Document's minimum font size clamp (0 in my case) and harmless epsilon
        check in CSSStyleSelector function should still hold for svg.

2011-07-31  Matt Lilek  <mlilek@apple.com>

        <rdar://problem/9778703> iOS: Use after free in MediaQueryEvaluator m_Style (63264)

        Merge OpenSource r89595.

    2011-06-23  Abhishek Arya  <inferno@chromium.org> 

        Reviewed by Adam Barth. 
 
        RefPtr m_style in MediaQueryEvaluator in case of callers like 
        MediaQueryMatcher::prepareEvaluator that do not retain its reference. 
        https://bugs.webkit.org/show_bug.cgi?id=63264 
 
        Test: fast/css/media-query-evaluator-crash.html 
 
        * css/MediaQueryEvaluator.cpp: 
        (WebCore::MediaQueryEvaluator::eval): 
        * css/MediaQueryEvaluator.h: 
 
2011-07-31  Matt Lilek  <mlilek@apple.com>

        <rdar://problem/9778673> iOS: Use after free due to floats not removed (62875)

        Merge OpenSource r89165.

    2011-06-23  Abhishek Arya  <inferno@chromium.org>

        Reviewed by Adam Barth.

        RefPtr m_style in MediaQueryEvaluator in case of callers like
        MediaQueryMatcher::prepareEvaluator that do not retain its reference.
        https://bugs.webkit.org/show_bug.cgi?id=63264

        Test: fast/css/media-query-evaluator-crash.html

        * css/MediaQueryEvaluator.cpp:
        (WebCore::MediaQueryEvaluator::eval):
        * css/MediaQueryEvaluator.h:

2011-07-31  Matt Lilek  <mlilek@apple.com>

        <rdar://problem/9778673> iOS: Use after free due to floats not removed (62875)

        Merge OpenSource r89165.

    2011-06-17  Abhishek Arya  <inferno@chromium.org>

        Reviewed by Dave Hyatt.

        When we lose ability to propagate floats, need to find topmost
        parent with that overhanging float, and then iterate over its
        sibling blocks to remove the float.
        https://bugs.webkit.org/show_bug.cgi?id=62875

        Test: fast/block/float/float-not-removed-from-next-sibling5.html

        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::styleDidChange):
        (WebCore::RenderBlock::hasOverhangingFloat):
        * rendering/RenderBlock.h:

2011-07-31  Matt Lilek  <mlilek@apple.com>

        <rdar://problem/9734118> iOS: CVE-2011-2356: Use after free of frame in Document::finishedParsing (62812)

        Merge OpenSource r89067.

    2011-06-16  Abhishek Arya  <inferno@chromium.org>

        Reviewed by Adam Barth.

        RefPtr frame since it can get removed in
        FrameLoader::finishedParsing.
        https://bugs.webkit.org/show_bug.cgi?id=62812

        Tests: already tested by fast/parser/document-write-into-initial-document.html.

        * dom/Document.cpp:
        (WebCore::Document::finishedParsing):

2011-07-31  Matt Lilek  <mlilek@apple.com>

        <rdar://problem/9778852> iOS: CVE-2011-2355: Use after free in Stylesheet due to issue in CLONE nodes (62586)

        Merge OpenSource r88987.

    2011-06-15  Abhishek Arya  <inferno@chromium.org>

        Reviewed by Antti Koivisto.

        Revert speculative fix in r84151. It caused some issues with
        stylesheet lifetimes.
        https://bugs.webkit.org/show_bug.cgi?id=62586

        Tests: fast/dom/body-clone-link-decl-parent-crash.html
               fast/dom/styled-clone-inline-style-decl-parent-crash.html
               fast/dom/styled-not-in-document-clone-inline-style-decl-parent-crash.html

        * dom/Document.cpp:
        (WebCore::Document::removedLastRef):

2011-07-31  Matt Lilek  <mlilek@apple.com>

        <rdar://problem/9727597> iOS: CVE-2011-2351: Use after free in SVGUseElement::buildShadowTree (62225)

        Merge OpenSource r88549.

    2011-06-10  James Simonsen  <simonjam@chromium.org>

        Reviewed by Tony Gentilcore.

        Don't execute scripts in shadow SVG.
        https://bugs.webkit.org/show_bug.cgi?id=62225

        Test: svg/dom/use-style-recalc-script-execute-crash.html

        * dom/ScriptElement.cpp:
        (WebCore::ScriptElement::prepareScript):

2011-07-31  Matt Lilek  <mlilek@apple.com>

        <rdar://problem/9758962> iOS: CVE-2011-2349: Use-after-free in WebCore::RenderTextControl::isSelectableElement (62329)

        Merge OpenSource r88456.

    2011-06-08  Abhishek Arya  <inferno@chromium.org>

        Reviewed by Ryosuke Niwa.

        Make indexForVisiblePosition and isSelectableElement static.
        https://bugs.webkit.org/show_bug.cgi?id=62329

        This protects us when converting frame->selection->start() or end()
        to VisiblePosition which blows away the RenderTextControl from
        underneath (due to layout update).

        Test: fast/forms/text-control-selection-crash.html

        * accessibility/AccessibilityRenderObject.cpp:
        (WebCore::AccessibilityRenderObject::indexForVisiblePosition):
        * rendering/RenderTextControl.cpp:
        (WebCore::RenderTextControl::selectionStart):
        (WebCore::RenderTextControl::selectionEnd):
        (WebCore::RenderTextControl::isSelectableElement):
        (WebCore::RenderTextControl::indexForVisiblePosition):
        * rendering/RenderTextControl.h:

2011-07-31  Matt Lilek  <mlilek@apple.com>

        <rdar://problem/9758958> iOS: CVE-2011-2350: Use after free in WebCore::ContainerNode::parserAddChild (62160)

        Merge OpenSource r88434.

    2011-06-09  Adam Barth  <abarth@webkit.org>

        Reviewed by Eric Seidel.

        Running script from attach can remove elements from the stack of open elements
        https://bugs.webkit.org/show_bug.cgi?id=62160

        When the tree build runs script synchronously, that script can remove
        arbitrary elements from the stack of open elements.  We need to hold a
        reference to |parent| in attach instead of rely upon the reference in
        the stack of open elements.

        Test: fast/parser/document-write-onload-clear.html

        * html/parser/HTMLConstructionSite.cpp:
        (WebCore::HTMLConstructionSite::attach):

2011-07-31  Matt Lilek  <mlilek@apple.com>

        <rdar://problem/9758958> iOS: CVE-2011-2350: Use after free in WebCore::ContainerNode::parserAddChild (62160)

        Merge OpenSource r88411.

    2011-06-08  Adam Barth  <abarth@webkit.org>

        Reviewed by Eric Seidel.

        constructTreeFromToken can re-enter parser, causing ASSERTs
        https://bugs.webkit.org/show_bug.cgi?id=62160

        This patch clears the HTMLToken before constructing the tree from the
        token, putting the HTMLDocumentParser in a good state to be re-entered.

        Tests: fast/parser/document-write-onload-nesting.html
               fast/parser/document-write-onload-ordering.html

        * html/parser/HTMLDocumentParser.cpp:
        (WebCore::HTMLDocumentParser::pumpTokenizer):
        * html/parser/HTMLToken.h:
        (WebCore::HTMLToken::isUninitialized):
        * html/parser/HTMLTreeBuilder.cpp:
        (WebCore::HTMLTreeBuilder::constructTreeFromToken):

2011-07-31  Matt Lilek  <mlilek@apple.com>

        <rdar://problem/9734107> iOS: OOB read in ComplexTextControllerLinux.cpp Plus One byte read in WidthIterator::advance (62085)

        Merge OpenSource r88139.

    2011-06-04  Abhishek Arya  <inferno@chromium.org>

        Reviewed by Kent Tamura.

        Add some asserts for array boundary checks in TextRun. Fix
        an integer issue in linux text controller code.
        https://bugs.webkit.org/show_bug.cgi?id=62085

        Testing ComplexTextControllerLinux change requires a testcase
        > 32 kb which is not feasible. All other changes are tested by
        existing layouttests.

        * platform/graphics/TextRun.h:
        (WebCore::TextRun::operator[]): add assert.
        (WebCore::TextRun::data): add assert.
        * platform/graphics/WidthIterator.cpp:
        (WebCore::WidthIterator::advance): bail early and prevent access
        to one byte across the text run boundary.
        * platform/graphics/chromium/ComplexTextControllerLinux.cpp:
        (WebCore::ComplexTextController::getNormalizedTextRun): wrong
        int16 vs int comparison.
        * rendering/svg/SVGTextRunRenderingContext.cpp:
        (WebCore::SVGTextRunWalker::walk): bail early when from and to
        is outside the text run boundary. this hit easily after adding
        the assert when from = to = end and read in run.data(from). 

2011-07-31  Matt Lilek  <mlilek@apple.com>

        <rdar://problem/9778661> iOS: Use-after-free, bad cast, and other crashes by cloning elements with new shadow DOM (62100)

        Merge OpenSource r88137.

    2011-06-05  Kent Tamura  <tkent@chromium.org>

        Reviewed by Dimitri Glazkov.

        Rolling out r84528.
        http://trac.webkit.org/changeset/84528
        https://bugs.webkit.org/show_bug.cgi?id=62100

        It made several problems on elements with new shadow DOM.

        * dom/Element.cpp:
        (WebCore::Element::copyNonAttributeProperties):

2011-07-31  Matt Lilek  <mlilek@apple.com>

        <rdar://problem/9739286> iOS: DOMWindow::setLocation doesn't understand that DOMWindow can be inactive (62057)

        Merge OpenSource r88071.

    2011-06-03  Adam Barth  <abarth@webkit.org>

        Reviewed by Eric Seidel.

        DOMWindow::setLocation doesn't understand that DOMWindow can be inactive
        https://bugs.webkit.org/show_bug.cgi?id=62057

        This code gets confused when dealing with inactive DOMWindows.  We
        should just block inactive DOMWindows because there's no compatibility
        reason to support them in this code path.

        Test: http/tests/security/xss-DENIED-contentWindow-eval.html

        * page/DOMWindow.cpp:
        (WebCore::DOMWindow::isInsecureScriptAccess):

2011-07-31  Matt Lilek  <mlilek@apple.com>

        <rdar://problem/9739292> iOS: Cloned <input type="range"> does invalid cast (61982)

        Merge OpenSource r87995.

    2011-06-03  Dominic Cooney  <dominicc@chromium.org>

        Reviewed by Kent Tamura.

        Cloned range input sliders should be SliderThumbElements, not divs.
        https://bugs.webkit.org/show_bug.cgi?id=61982

        Test: fast/html/clone-range.html

        * html/shadow/SliderThumbElement.h:
        (WebCore::SliderThumbElement::cloneElementWithoutAttributesAndChildren): Create a SliderThumbElement when being cloned.

2011-07-31  Matt Lilek  <mlilek@apple.com>

        <rdar://problem/9778840> iOS: CVE-2011-2352: REGRESSION: SecuritySaver: *exploitable* use after free in CSSStyleDeclaration::parentRule (60831)

        Merge OpenSource r87875.

    2011-06-01  Abhishek Arya  <inferno@chromium.org>

        Unreviewed.

        Coding style nit. Move ec=0 initialization, change
        recommended by Alexey in bug.
        https://bugs.webkit.org/show_bug.cgi?id=60831

        * dom/Document.cpp:
        (WebCore::Document::setBody):

2011-07-31  Matt Lilek  <mlilek@apple.com>

        <rdar://problem/9778840> iOS: CVE-2011-2352: REGRESSION: SecuritySaver: *exploitable* use after free in CSSStyleDeclaration::parentRule (60831)

        Merge OpenSource r87863.

    2011-06-01  Abhishek Arya  <inferno@chromium.org>

        Reviewed by Alexey Proskuryakov.

        Fix setting of document.body
        https://bugs.webkit.org/show_bug.cgi?id=60831

        1. Only allowing setting to an element if it has a body tag.
        2. If element is from another document, import it.

        Test: fast/dom/document-set-body.html

        * dom/Document.cpp:
        (WebCore::Document::setBody):

2011-07-31  Matt Lilek  <mlilek@apple.com>

        <rdar://problem/9758955> iOS: REGRESSION: Reproducible crash in HTMLMediaElement::mediaPlayerReadyStateChanged() when activating Reader while a video is playing at jerryseinfeld.com

        Merge OpenSource r87743.

    2011-05-31  Abhishek Arya  <inferno@chromium.org>

        Reviewed by Dimitri Glazkov.

        Improve hasMediaControls logic to check that node has
        media controls. This can be false when cloning nodes.
        https://bugs.webkit.org/show_bug.cgi?id=61765

        Test: media/media-controls-clone-crash.html

        * dom/Node.h:
        (WebCore::Node::isMediaControls):
        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::mediaControls):
        (WebCore::HTMLMediaElement::hasMediaControls):
        * html/shadow/MediaControls.h:
        (WebCore::MediaControls::isMediaControls):
        (WebCore::toMediaControls):

2011-07-31  Matt Lilek  <mlilek@apple.com>

        <rdar://problem/9727567> iOS: CVE-2011-2341: SecuritySaver: *exploitable* use after free in WebCore::ContainerNode::firstChild / WebCore::XMLDocumentParser::insertErrorMessageBlock (61688)

        Merge OpenSource r87737.

    2011-05-31  Abhishek Arya  <inferno@chromium.org>

        Reviewed by Dimitri Glazkov.

        Convert raw ptr to RefPtr for documentElement.
        https://bugs.webkit.org/show_bug.cgi?id=61688

        Test: fast/dom/xml-parser-error-message-crash.svg

        * dom/XMLDocumentParser.cpp:
        (WebCore::XMLDocumentParser::insertErrorMessageBlock):

2011-07-31  Matt Lilek  <mlilek@apple.com>

        <rdar://problem/9739059> iOS: CVE-2011-2354: REGRESSION (r82516): SecuritySaver: *exploitable* OOB read in WebCore::ImageBufferData::getData (61135)

        Merge OpenSource r87171.

    2011-05-24  Matthew Delaney  <mdelaney@apple.com>

        Reviewed by Simon Fraser.

        Clamp coordinates to integers for canvas create/getImageData routines
        https://bugs.webkit.org/show_bug.cgi?id=61135

        Test: fast/canvas/canvas-getImageData-largeNonintegralDimensions.html

        * html/HTMLCanvasElement.cpp:
        (WebCore::HTMLCanvasElement::convertLogicalToDevice): clamp to ints
        * html/canvas/CanvasRenderingContext2D.cpp:
        (WebCore::CanvasRenderingContext2D::createImageData):
        (WebCore::CanvasRenderingContext2D::getImageData):
        * platform/graphics/cg/ImageBufferDataCG.cpp:
        (WebCore::ImageBufferData::getData):

2011-07-31  Matt Lilek  <mlilek@apple.com>

        <rdar://problem/9739059> iOS: CVE-2011-2354: REGRESSION (r82516): SecuritySaver: *exploitable* OOB read in WebCore::ImageBufferData::getData (61135)

        Merge OpenSource r87103.

    2011-05-23  Matthew Delaney  <mdelaney@apple.com>

        Reviewed by Simon Fraser.

        Remove safeFloatToInt() in FloatRect.cpp and replace with working version of clampToInteger()
        https://bugs.webkit.org/show_bug.cgi?id=58216

        No new tests. The SVG tests mask-excessive-malloc.svg and pattern-excessive-malloc.svg exercise this code path.

        * platform/graphics/FloatRect.cpp:
        (WebCore::enclosingIntRect):

2011-07-31  Matt Lilek  <mlilek@apple.com>

        <rdar://problem/9734122> iOS: REGRESSION (r79114): Use after free in XMLDocumentParser::endElementNs (61196)

        Merge OpenSource r87098.

    2011-05-23  James Simonsen  <simonjam@chromium.org>

        Reviewed by Adam Barth.

        Convert raw pointer to RefPtr.
        https://bugs.webkit.org/show_bug.cgi?id=61196

        * dom/XMLDocumentParserLibxml2.cpp:
        (WebCore::XMLDocumentParser::endElementNs):
        * dom/XMLDocumentParserQt.cpp:
        (WebCore::XMLDocumentParser::parseEndElement):

2011-07-31  Matt Lilek  <mlilek@apple.com>

        <rdar://problem/9734092> iOS: Bad cast in createLineBoxes due to auto-focus trigger in HTMLFormControlElement::attach() (32882)

        Merge OpenSource r86976.

    2011-05-20  Abhishek Arya  <inferno@chromium.org>

        Reviewed by Kent Tamura.

        Make auto-focus a post attach callback in
        HTMLFormControlElement::attach().
        https://bugs.webkit.org/show_bug.cgi?id=32882

        Original patch by Darin Adler. This one uses a part of it.

        Test: fast/forms/input-element-attach-crash.html

        * dom/Document.cpp:
        (WebCore::Document::recalcStyle): Make sure that m_inStyleRecalc is
        already false by the time post-attach callbacks are done so that
        layout triggered inside those callbacks can work properly.
        * html/HTMLFormControlElement.cpp:
        (WebCore::shouldAutofocus): Helper function that expresses
        the rule for which form control elements should auto-focus.
        (WebCore::focusPostAttach): Called post-attach to focus an
        element if we discover it should be focused during attach.
        (WebCore::HTMLFormControlElement::attach): Refactored code for
        which elements need auto-focus into a separate function. Instead
        of focusing right away, use the focusPostAttach function to focus
        after attach is done. Also added calls to suspendPostAttachCallbacks
        and resumePostAttachCallbacks so post-attach callbacks happen late
        enough. Before, they could run inside the base attach function.
        * html/HTMLInputElement.cpp:
        (WebCore::HTMLInputElement::attach): Added calls to
        suspendPostAttachCallbacks and resumePostAttachCallbacks so
        post-attach callbacks happen late enough

2011-08-13  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by Dan Bernstein.

        <rdar://problem/9950592> Abandoned Memory: Fonts for Complex Text Accidentally Retained

        The getFontDataForCharacters should not retain the font it
        returns but it was thwarted by default parameters.

        * platform/graphics/mac/FontCacheMac.mm:
        (WebCore::FontCache::getFontDataForCharacters):
        We do not want to retain these fonts. Fill in the missing
        parameter where appropriate and add DoNotRetain for the
        CustomFallbackFont.

        (WebCore::FontCache::getLastResortFallbackFont):
        We do want to retain this font to match OpenSource.

2011-08-13  Joseph Pecoraro  <joepeck@webkit.org>

        Merged ToT WebKit r88691.

        Part of: <rdar://problem/9950592> Abandoned Memory: Fonts for Complex Text Accidentally Retained

    2011-06-13  Michael Saboff  <msaboff@apple.com>

            Reviewed by Oliver Hunt.

            Additional FontCache::FontCachePurgePreventer instances needed
            https://bugs.webkit.org/show_bug.cgi?id=62498

            Added some needed and speculative FontCachePurgePreventer objects.
            Built and ran Safari with debug version of webkit that purges all
            purgeable fonts in FontCache::purgeInactiveFontDataIfNeeded in order
            to find system fallback fonts access via code paths that aren't
            protected with FontCachePurgePreventer objects.  Also examined
            platform specific code that calls either Font::drawText() or
            Canvas::drawText().  For those methods that may be called from currently
            unprotected paths, added FontCachePurgePreventer objects.

            No new functionality so no new tests.

            * inspector/DOMNodeHighlighter.cpp:
            * platform/graphics/ca/win/PlatformCALayerWinInternal.cpp:
            (PlatformCALayerWinInternal::displayCallback):
            * platform/graphics/chromium/cc/CCHeadsUpDisplay.cpp:
            (WebCore::CCHeadsUpDisplay::drawHudContents):
            * platform/mac/DragImageMac.mm:
            (WebCore::widthWithFont):
            (WebCore::drawAtPoint):
            * rendering/RenderMenuList.cpp:
            (WebCore::RenderMenuList::updateOptionsWidth):

2011-08-04  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/9877734> MobileSafari can't access website that requires SSL client authentication

        Merged ToT WebKit r92410.

    2011-08-04  Pratik Solanki  <psolanki@apple.com>

        Implement CERTIFICATE_CREDENTIALS_SUPPORTED for CFNetwork
        https://bugs.webkit.org/show_bug.cgi?id=65704
        <rdar://problem/9877734>

        Reviewed by Oliver Hunt.

        Implement support for client side certificate authentication in the CFNetwork based loader.

        * platform/network/cf/AuthenticationCF.cpp:
        (WebCore::createCF):
        (WebCore::core): Also fix leak of password string.

2011-08-12  Scott Grant  <scott.grant@apple.com>

        Part of <rdar://problem/9224632> SF: PDF rendering issue with http://www.lpch.org/pdf/annual-report-2008.pdf

        Reviewed by Joe Pecoraro.

        Enhance the DiskImageCache to support notification that the memory mapping process has failed using Joe Pecoraro's proposed patch. 
        Enhance SharedBuffer to support a notification callback for both the success and failure cases for memory mapping.

        * WebCore.exp.in:
        * loader/DiskImageCache.cpp:
        (WebCore::DiskImageCache::Entry::mapInternal):
        (WebCore::DiskImageCache::Entry::map):
        * loader/DiskImageCache.h:
        * platform/SharedBuffer.cpp:
        (WebCore::SharedBuffer::SharedBuffer):
        (WebCore::SharedBuffer::failedMemoryMap):
        (WebCore::SharedBuffer::markAsMemoryMapped):
        (WebCore::SharedBuffer::memoryMappedNotificationCallbackData):
        (WebCore::SharedBuffer::memoryMappedNotificationCallback):
        (WebCore::SharedBuffer::setMemoryMappedNotificationCallback):
        * platform/SharedBuffer.h:
        * platform/cf/SharedBufferCF.cpp:
        (WebCore::SharedBuffer::SharedBuffer):


2011-08-12  Yongjun Zhang  <yongjun_zhang@apple.com>

        Reviewed by Simon Fraser.

        <rdar://problem/9747111> Safari crashes in WebCore::CSSStyleSelector::loadPendingImages() viewing Netflix movie queue

        Export ResourceLoadScheculer::suspendPendingRequests() and resumePendingRequests() so that MobileSafari could
        use them to suspend loading CSS images during Reader detection.

        * WebCore.exp.in:

2011-08-12  Jon Lee  <jonlee@apple.com>

        <rdar://problem/9922944> REGRESSION: Copy/Cut/Paste menu does not appear after a select/select all
        
        Reviewed by NOBODY. (OOPS!)
        
        The regression came from trying to solve <rdar://problem/9728478> by delaying the selectionChanged
        callback in UIKit.
        
        The call to updateLayout() causes a selection change in
        FrameSelection::textWillBeReplaced() before the text node gets altered during the post-attach phase.
        In Telluride UIKit updates its selection rect by querying the selection, which is in a fluctuating
        and possible invalid (when adding a character) state. This is a behavior not normally seen for
        desktop clients. Consequently the WebCore frame selection is updated, but UIKit reflects something else.
        The final setSelection() call in this function ultimately does nothing, because its current selection
        is the same as the desired new selection.  We want to force another update to the client so that
        it reflects the right selection. We do this by checking to see if the updateLayout() call did
        make any changes to the selection, and then defensively look to see if the setSelection() call
        will return early and not notify the client.

        Also, removing the previous change to UIKit that caused the bug regression.
        
        The added code is wrapped in #if PLATFORM(IOS) blocks, all of which should be completely removed
        when the next ToT WK merge occurs.
        
        * rendering/RenderTextControl.cpp:
        (WebCore::setSelectionRange):

2011-08-12  Joseph Pecoraro  <joepeck@webkit.org>

        Merged ToT WebKit r93011.

        <rdar://problem/9947969> Abandoned Memory: Temporary CSS Fonts May Never Be Purged (66153)

    2011-08-12  Joseph Pecoraro  <joepeck@webkit.org>

            Abandoned Memory: Temporary CSS Fonts May Never Be Purged
            https://bugs.webkit.org/show_bug.cgi?id=66153

            Reviewed by Dan Bernstein.

            No new tests, this is not a functional change.

            * css/CSSFontFaceSource.cpp:
            (WebCore::CSSFontFaceSource::getFontData):
            If the CSS font-face is loading from a URL then immediately
            fallback to a system font matching the description, since we
            cannot determine a reasonable family name from the m_string
            URL. The URL could be a dataURI.

2011-08-12  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/9948330> Canvases > 2048px in size don't render

        Reviewed by Ian Henderson.
        
        On iOS, use a limit of 2048px for the largest canvas size that will use
        an IOSurface (and therefore be accelerated). It was 4048, which is too large
        for some iOS devices.

        * platform/graphics/cg/ImageBufferCG.cpp:
        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::updateClipRects):

2011-08-11  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Kilzer.

        <rdar://problem/9938057> Possible Leak of GSFonts created through FontCache

        FontPlatformData Retains the GSFontRef passed into it,
        so we should Release the GSFontRef that we pass it!

        * platform/graphics/mac/FontCacheMac.mm:
        (WebCore::FontCache::createFontPlatformData):

2011-08-12  Alexey Proskuryakov  <ap@apple.com>

        Reviewed by Dan Bernstein.

        <rdar://problem/9860801> REGRESSION: selecting the word enclosing a position at the beginning of a sentence selects the space before the sentence

        Limits the fix for <rdar://problem/9471531> to symbol characters only, reverting space behavior
        to the previous state (arguably incorrect).

        * platform/text/mac/TextBoundaries.mm:
        (WebCore::isSkipCharacter): Use proper 32-bit character type, because we should always do that.
        (WebCore::isWhitespaceCharacter): Ditto.
        (WebCore::isWordDelimitingCharacter): Ditto.
        (WebCore::isSymbolCharacter): Added a function to check whether a character is a symbol
        (whicg includes Emoji, mathematical symbols like "+" or "=" and many others).
        (WebCore::isAmbiguousBoundaryCharacter): Use proper 32-bit character type.
        (WebCore::findSimpleWordBoundary): Rewrote to properly iterate the Unicode string when
        it has 32-bit characters. Limited the emptiness check to symbol characters.
        (WebCore::findWordBoundary): Build fix for logging code (normally ifdefed out).

2011-08-11  Dan Bernstein  <mitz@apple.com>

        Reviewed by Andy Estes and Simon Fraser.

        WebCore part of <rdar://problem/9726300> Economist articles showing up empty after first three sections

        * WebCore.exp.in:
        * platform/RuntimeApplicationChecksIPhone.h:
        * platform/RuntimeApplicationChecksIPhone.mm:
        (WebCore::applicationIsTheEconomistOnIPhone): Added.
        * wak/WebCoreThread.h:
        * wak/WebCoreThread.mm:
        (StartWebThread): Use the delegateSourceRunLoopMode static variable for the run loop mode to register
        the delegate source with. Set it to kCFRunLoopCommonModes if it has not been set yet.
        (WebThreadSetDelegateSourceRunLoopMode): Added. Sets the delegateSourceRunLoopMode variable.

2011-08-11  Julio Gonzalez  <juliog@apple.com>

        Reviewed by Dan Bernstein.

        <rdar://problem/9934158> Korean UI font has changed. Fallback needs to be changed to reflect this

        * platform/graphics/mac/FontCacheMac.mm:
        (WebCore::FontCache::getFontDataForCharacters): Use AppleSDGothicNeo Medium and Bold for Korean
        instead of AppleGothic.

2011-08-11  Ian Henderson  <ianh@apple.com>

        Reviewed by David Carson.

        <rdar://problem/9933402> -[TileLayer display] potentially results in setNeedsLayout set globally and handled on wrong thread

        During a CA commit, we layout until no layout is necessary, then
        display until no display is necessary.  If a layer marks itself as
        needing layout during display, we don't go back and lay it out.

        Instead, CA moves the "needs layout" flag out of the per-thread
        transaction into the layer itself.  The next transaction that touches
        the layer ends up committing it.  This transaction could be on a
        different thread than the original transaction.

        In -[TileLayer display], we call prepareToDraw() on the TileCache,
        which can cause a WebCore layout.  If we're on the main thread, many
        layers (e.g. text selection and plugin views) may have their "needs
        layout" flags set in response to the WebCore layout.  Since we're in
        the "display" part of the commit, these flags are moved to the layers
        themselves, to be committed at some time in the future (possibly on
        the web thread or a background thread).

        This causes a crash in iBooks.

        The fix is to update the WebCore layout in -layoutSublayers instead of
        -display.  That way we can process any newly marked layers in the same
        commit.

        Whenever our layer is marked as needing display (which can only happen
        by calling setNeedsDisplayInRect:), also mark it as needing layout.
        We also need to set needsLayoutOnGeometryChange to NO so CA doesn't
        mark our layer as needing layout unnecessarily.

        Incidentally, this is how TiledSurface used to work before r83440 in
        Kirkwood.  I'm not sure why that change was made, but judging by the
        FIXME, it was due to layoutSublayers being called unexpectedly.  I
        browsed the web for about 15 minutes with this patch without seeing
        any unexpected calls.

        * platform/iphone/TileGridTile.mm:
        (WebCore::TileGridTile::TileGridTile):
        * platform/iphone/TileLayer.mm:
        (-[TileLayer setNeedsDisplayInRect:]):
        (-[TileLayer layoutSublayers]):

2011-08-09  Chris Marrin  <cmarrin@apple.com>

        <https://bugs.webkit.org/show_bug.cgi?id=66098> Avoid adding the visible wash layer twice

        Merged ToT WebKit r92884.

2011-08-11  Chris Marrin  <cmarrin@apple.com>

        Reviewed by Simon Fraser.

        Fix initial clip rect for <rdar://problem/9706222> MyShuttle flip animation flashes badly
        
        This starts with a clip rect that properly takes into account the current zoom and scroll
        position of the frame.

        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::flushPendingLayerChanges):

2011-08-10  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by Dan Bernstein.

        <rdar://problem/9934915> CGFontRef leak found through source inspection

        * platform/graphics/cocoa/FontPlatformDataCocoa.mm:
        (WebCore::FontPlatformData::FontPlatformData):
        Adopt the Copy. Also driveby fix the GSFontCreate to use the
        size from the real CTFont and not 0.0 from the NULL m_CTFont.

2011-08-10  Sam Weinig  <sam@webkit.org>

        Reviewed by Simon Fraser.

        <rdar://problem/9878093> iTunes Store: Graphics corruption in Purchased section of iTunes store

        Add setting to control whether we should use scaled down layers on memory pressure.

        * page/Settings.cpp:
        (WebCore::Settings::Settings):
        * page/Settings.h:
        (WebCore::Settings::setAllowCompositingLayerVisualDegradation):
        (WebCore::Settings::shouldConstrainContentsScaleBasedOnAvailableMemory):
        Add settings.

        * platform/graphics/ca/GraphicsLayerCA.cpp:
        (WebCore::constrainedContentsScale):
        (WebCore::GraphicsLayerCA::updateContentsScale):
        Only constrain the the contents scale if the settings is set.

        * platform/graphics/GraphicsLayerClient.h:
        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::allowCompositingLayerVisualDegradation):
        * rendering/RenderLayerBacking.h:
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::allowCompositingLayerVisualDegradation):
        * rendering/RenderLayerCompositor.h:
        Pipe setting through.

2011-08-10  Chris Marrin  <cmarrin@apple.com>

        Commented out debugging flag accidentally left enabled in r92651 merge.

        Unreviewed.

2011-08-09  Yongjun Zhang  <yongjun_zhang@apple.com>

        Reviewed by Justin Garcia.

        <rdar://problem/9341565> Support for underlined text for UILabel.

        Export GraphicsContext's drawLineForText method.  When calling drawLineForText from UIKit, CGContext's
        stroke color is already set in UIKit, and GraphicsContext should not use its own stroke color
        in this case.  We can add a flag (shouldUseContextColors) in GraphicsContextState to tell if GraphicsContext's
        colors should be used in painting.

        * WebCore.exp.in:
        * platform/graphics/GraphicsContext.h:
        (WebCore::GraphicsContextState::GraphicsContextState):
        * platform/graphics/cg/GraphicsContextCG.cpp:
        (WebCore::GraphicsContext::platformInit):

2011-08-09  Enrica Casucci  <enrica@apple.com>

        Reviewed by Justin Garcia.

        <rdar://problem/9794411> Crash when I dictate in web form or App that web content in -[UIWebDocumentView insertDictationResultPlaceholder:] (INVALID_NODE_TYPE_ERR)

        The changes in WebCore for this patch are needed because we did not merge r87067 and r90885.
        I did not want to merge the entire revisions because the first one is huge and scary at this
        stage and the second one requires a set of other revisions to be merged first.
        I've added a FIXME in Range.cpp to indicate that the platform specific code is there only
        to avoid confusion during the next big merge from OpenSource.
        
        * dom/Range.cpp:
        (WebCore::Range::checkNodeBA): Allow shadowRoot nodes in Ranges.
        * rendering/RenderTextControl.cpp:
        (WebCore::RenderTextControl::indexForVisiblePosition): Removed the incorrect
        use of deprecated position methods.

2011-08-09  Eric Carlson  <eric.carlson@apple.com>

        Reviewed by Dean Jackson.

        <rdar://problem/9779652> autoplay sometimes needs a .load() call on the video element to work

        The media element state machine automatically triggers auto-play when enough data has buffered
        to allow uninterrupted playback. This is problematic on iOS where we generally don't automatically 
        buffer media data, so when auto-play is allowed we forced playback to begin once the media engine
        signaled that the file was playable. The fix for <rdar://problem/9449208> broke auto-play 
        without an explicit call to load(), because play() is never called until the media engine is
        active and was ready for playback. 

        To fix this, this patch tells the media engine to begin loading data once a file validates
        if auto-play is allowed. Playback is then triggered once enough data has loaded, as it does
        on the desktop.

        (WebCore::HTMLMediaElement::setNetworkState): Move auto-play logic to deliverNotification.
        (WebCore::HTMLMediaElement::deliverNotification): When the media engine signals that a file is 
            playable and auto-play is allowed, call prepareToPlay() to tell the media engine to begin
            loading media data. setReadyState will then trigger playback once enough data has loaded
            in the same way it does in a desktop build.

        * platform/graphics/iphone/MediaPlayerPrivateIPhone.h:
        * platform/graphics/iphone/MediaPlayerPrivateIPhone.mm:
        (WebCore::MediaPlayerPrivateiPhone::MediaPlayerPrivateiPhone): Initialize m_bufferingState.
        (WebCore::MediaPlayerPrivateiPhone::deliverNotification): Keep track of the buffering state because
            it can change before the player reports that it is ready for inspection. Set m_readyState
            to HaveEnoughData if data has already buffered.

2011-08-09  Chris Marrin  <cmarrin@apple.com>

        <https://bugs.webkit.org/show_bug.cgi?id=65708> Logic to compute visible display rect in GraphicsLayerCA::syncCompositingState

        Merged ToT WebKit r92651.

2011-08-09  Chris Marrin  <cmarrin@apple.com>

        https://bugs.webkit.org/show_bug.cgi?id=64542 Move TransformState to platform/graphics and give it the option to transform just a FloatQuad

        Merged ToT WebKit r91110.

2011-08-09  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by Sam Weinig.

        <rdar://problem/9838159> Telluride: MASH Lite not displaying story

        Workaround MASH URLs in MASH applications.

        * platform/RuntimeApplicationChecksIPhone.h:
        * platform/RuntimeApplicationChecksIPhone.mm:
        (WebCore::applicationIsMASH):
        * platform/cf/KURLCFNet.cpp:
        (WebCore::createCFURLWithMASHQuirkIfNecessary):
        (WebCore::KURL::createCFURL):

2011-08-09  Justin Garcia  <justin.garcia@apple.com>

        Reviewed by Alexey Proskuryakov.

        <rdar://problem/9907362> dictating "new paragraph" or "new line" doesn’t split quoted text in Mail

        * editing/CompositeEditCommand.cpp:
        (WebCore::CompositeEditCommand::inputText): Newlines should break Mail blockquotes (this method is 
        only for inserting text for dictation result insertions).

2011-08-08  Anton D'Auria  <adauria@apple.com>

        Reviewed by Yongjun Zhang.

        <rdar://problem/9640473> REGRESSION: Pressing "stop" can still result in visited links

        Visited links are stored in a hash table. If a link isn't present in this
        table attached to a PageGroup, then it won't have the visited link style.

        If a quick-stop performs an instant back navigation, then a new WebCore
        API is used to remove the cancelled URL from the hash table of visited links.

        * WebCore.exp.in: removeVisitedLink is called by WebKit.
        * page/PageGroup.cpp:
        (WebCore::PageGroup::removeVisitedLink): Removes URL from hash table of visited links.
        * page/PageGroup.h:

2011-08-08  Joseph Pecoraro  <joepeck@webkit.org>

        Rubber-stamped by Ian Henderson.

        <rdar://problem/9917359> JavaScript errors about missing files when opening inspector-remote.html

        * WebCore.xcodeproj/project.pbxproj:
        To enforce the "Inject Inspector Extras" remote inspector build
        phase happens after the "Streamline Inspector Source" build
        phase give the streamline phase an output file which the
        inspector extras phase depends on. Also, correct exactly what
        is being output by the remote inspector build phase so that
        its output cannot be considered a requirement for another
        build phase.

2011-08-08  Ian Henderson  <ianh@apple.com>

        Reviewed by Joseph Pecoraro.

        <rdar://problem/9907852> REGRESSION(9A283): Ugly whole-page flash when loading nytimes.com on the device

        Revert r1055424, which caused this regression.  We can investigate a
        better fix post-Telluride.

        * platform/iphone/TileCache.mm:
        (WebCore::TileCache::removeAllNonVisibleTiles):
        * platform/iphone/TileGrid.h:
        * platform/iphone/TileGrid.mm:

2011-08-08  Shuchen Li  <shuchen_li@apple.com>

        Reviewed by Justin Garcia.

        <rdar://problem/9803528> When I dictate punctuation, a space is inserted before it

        We only check the leading and trailing character in the existing text of the insertion point for smart space insertion.
        We also need to check the first and last character of the to be inserted words.

        * editing/iphone/InsertMarsVoltasCommand.cpp:
        (WebCore::InsertMarsVoltasCommand::doApply):

2011-08-07  Antti Koivisto  <antti@apple.com>

        Reviewed by Joseph Pecoraro.

        <rdar://problem/9886539> MobileMail crash in WebCore: WebCore::ResourceLoadScheduler::servePendingRequests when resource load fails synchornously
        
        If the resource load fails synchronously we would re-enter servePendingRequests, corrupting the host map and leading to a crash.
        
        This happens on iOS because ResourceRequest construction (and so the synchronous failure) is delayed until the request is actually issued.
        The existing mechanism to prevent this in CachedResourceLoader works only if the request fails synchorously during CachedResourceRequest::load.
        
        Fix by explicitly avoiding synchronous call to servePendingRequests on didFail using the existing mechanism in CachedResourceLoader.

        * loader/cache/CachedResourceLoader.cpp:
        * loader/cache/CachedResourceLoader.h:
        * loader/cache/CachedResourceRequest.cpp:
        (WebCore::CachedResourceRequest::didFail):

2011-08-07  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/9884604> Should clean up JIT code when we get a memory warning

        Reviewed by Oliver Hunt.

        * WebCore.exp.in:
        * bindings/js/GCController.cpp:
        (WebCore::GCController::recompileAllJSFunctions): Added. Called by WebKit when we receive a
        memory warning. This calls into JSGlobalData to free up JIT code.
        * bindings/js/GCController.h:

2011-08-06  Sam Weinig  <sam@webkit.org>

        Reviewed by David Kilzer.

        <rdar://problem/9790483> Epicurious recipe photos do not enlarge on Telluride.

        * platform/cf/KURLCFNet.cpp:
        (WebCore::createCFURLWithEpicuriousQuirkIfNecessary):
        Extend URL canonicalization quirk for the additional schemes "singleTap:" and "photoTap:"

2011-08-06  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/9338442> Reproducible crash in icu::RuleBasedBreakIterator::next() when scrolling TOC in iBooks (crash when scroll in TOC, while is still loading)

    2011-08-06  Dan Bernstein  <mitz@apple.com>

        Move the shared LineBreakIteratorPool from ThreadGlobalData into its own ThreadSpecific
        https://bugs.webkit.org/show_bug.cgi?id=65809

        Reviewed by Darin Adler and Sam Weinig.

        * platform/ThreadGlobalData.cpp:
        (WebCore::ThreadGlobalData::destroy): Removed code to clear the m_lineBreakIteratorPool member
        variable, which was removed.
        * platform/ThreadGlobalData.h: Removed lineBreakIteratorPool() and associated member variable.
        * platform/text/LineBreakIteratorPoolICU.h:
        (WebCore::LineBreakIteratorPool::sharedPool): Changed to return a thread-specific pool.

2011-08-05  Joseph Pecoraro  <joepeck@webkit.org>

        Merged ToT WebKit r92530.

        <rdar://problem/9907716> Leak in CFNetwork Loader RetainPtr<> should Adopt a Copy allocation

    2011-08-05  Joseph Pecoraro  <joepeck@webkit.org>

            Leak in CFNetwork Loader RetainPtr<> should Adopt a Copy allocation
            https://bugs.webkit.org/show_bug.cgi?id=65789

            Reviewed by David Kilzer.

            Fix a leak by adopting an allocation instead of retaining it.

            * platform/network/cf/FormDataStreamCFNet.cpp:
            (WebCore::httpBodyFromRequest):

2011-08-05  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/9506220> Selection doesn't track fixed position content

        Reviewed by Sam Weinig.

        Add a field to WebSelectionRect to track whether this rect is inside
        fixed-position content, and set that flag in places where we collect
        the selection rects.
        
        Add a method to DOMNode in DOMExtensions that returns both the
        quad for that node, and a flag saying whether the node is inside
        fixed-position content.

        * bindings/objc/DOM.mm:
        (-[DOMNode absoluteQuad]):
        (-[DOMNode absoluteQuadAndInsideFixedPosition:]):
        * bindings/objc/DOMExtensions.h:
        * platform/iphone/SelectionRect.cpp:
        (WebCore::SelectionRect::SelectionRect):
        * platform/iphone/SelectionRect.h:
        (WebCore::SelectionRect::isInFixedPosition):
        * rendering/RenderImage.cpp:
        (WebCore::RenderImage::collectSelectionRects):
        * rendering/RenderText.cpp:
        (WebCore::RenderText::collectSelectionRects):

2011-08-04  Simon Fraser  <simon.fraser@apple.com>

        Prerequisite for
        <rdar://problem/9506220> Selection doesn't track fixed position content

        Merge WebKit ToT r92438.
        
    2011-08-04  Simon Fraser  <simon.fraser@apple.com>
    
            Add code to determine whether a Range in inside fixed position content
            https://bugs.webkit.org/show_bug.cgi?id=65720
    
            Reviewed by Sam Weinig.
    
            Propagate the 'wasFixed' flag out from various methods that
            are used when computing the collection of rects or quads
            for a range. Use the flag in Range to computer whether
            the Range is entirely within, partially within, or outside
            of fixed-position content.
    
            * WebCore.exp.in:
            * accessibility/AccessibilityRenderObject.cpp:
            (WebCore::AccessibilityRenderObject::boundingBoxRect):
            * dom/Range.cpp:
            (WebCore::Range::textRects):
            (WebCore::Range::textQuads):
            * dom/Range.h:
            * rendering/RenderBlock.cpp:
            (WebCore::RenderBlock::absoluteQuads):
            * rendering/RenderBlock.h:
            * rendering/RenderBox.cpp:
            (WebCore::RenderBox::absoluteQuads):
            * rendering/RenderBox.h:
            * rendering/RenderInline.cpp:
            (WebCore::RenderInline::absoluteQuads):
            * rendering/RenderInline.h:
            * rendering/RenderObject.h:
            (WebCore::RenderObject::absoluteQuads):
            * rendering/RenderText.cpp:
            (WebCore::RenderText::absoluteRectsForRange):
            (WebCore::RenderText::absoluteQuads):
            (WebCore::RenderText::absoluteQuadsForRange):
            * rendering/RenderText.h:
            * rendering/RenderView.cpp:
            (WebCore::RenderView::absoluteQuads):
            * rendering/RenderView.h:
            * rendering/svg/RenderSVGHiddenContainer.cpp:
            (WebCore::RenderSVGHiddenContainer::absoluteQuads):
            * rendering/svg/RenderSVGHiddenContainer.h:
            * rendering/svg/RenderSVGInline.cpp:
            (WebCore::RenderSVGInline::absoluteQuads):
            * rendering/svg/RenderSVGInline.h:
            * rendering/svg/RenderSVGModelObject.cpp:
            (WebCore::RenderSVGModelObject::absoluteQuads):
            * rendering/svg/RenderSVGModelObject.h:
            * rendering/svg/RenderSVGText.cpp:
            (WebCore::RenderSVGText::absoluteQuads):
            * rendering/svg/RenderSVGText.h:

2011-08-04  Simon Fraser  <simon.fraser@apple.com>

        Prerequisite for
        <rdar://problem/9506220> Selection doesn't track fixed position content
        
        Merge ToT r92435, which, with r92434 landed on ToT, brings iOS and ToT
        back in line with respect to the changes Joe Pecoraro made to fix the
        inspector highlight.

    2011-08-04  Simon Fraser  <simon.fraser@apple.com>
    
            Fix release build failure with last commit.
    
            * rendering/RenderView.cpp:
            (WebCore::RenderView::mapLocalToContainer):

2011-08-04  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Carson.

        <rdar://problem/9795993> Remote Inspector: breakpoint hit inside touchend event prevents Safari from refreshing

        The assumption that only JavaScript running on the WebThread
        could hit a breakpoint was wrong. One such case is touch events.
        We need to be able to run a nested MainThread run loop for
        touch events.

        When reaching a JavaScript breakpoint on the MainThread the
        MainThread already has the WebThreadLock and an auto unlock
        observer. The MainThread removes the observer, releases the
        lock, and runs a nested runloop. When continuing the MainThread
        will relock and re-add its autolock observer.
        
        The WebThread can wake-up / sleep at different run loop stages.
        It may now wake up "Before Timers" and find the web thread lock
        was taken. In the past it assumed that it held the lock, however,
        when continuing from a breakpoint it is actually the MainThread
        that may have taken the lock. In this case the WebThread needs
        to wait to acquire. Likewise we can ASSERT unlocking that we
        were the holders of the lock and not the main thread.

        * bindings/js/PageScriptDebugServer.cpp:
        (WebCore::PageScriptDebugServer::didContinue):
        When paused on a touch handler breakpoint and the page is
        closed completely this code will run when the page is already
        destroyed.

        * platform/iphone/EventLoopIPhone.mm:
        (WebCore::EventLoop::cycle):
        Remove the incorrect assert.

        * wak/WebCoreThread.mm:
        (WebRunLoopUnlockInternal):
        (WebRunLoopLock):
        (WebRunLoopUnlock):
        Handle the situations described above. The WebThread should
        never have early returned if someone else holds the lock
        because it always tries to release the lock when its RunLoop
        ends. pthread_mutex_unlock would object and the WebCore's
        lock counters would have moved to a bad state.

2011-08-05  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/9872667> REGRESSION (9A282): Safari hangs when trying to download a file from iWork.com

        Reviewed by David Kilzer.

        Initialize m_mainResourceRequest in the new ResourceRequest constructor added. Without this,
        the code think all requests are main resource requests (unless the memory happens to be 0).
        And that can result in our quicklook code being activated for an XHR request.

        * platform/network/mac/ResourceRequestMac.mm:
        (WebCore::ResourceRequest::ResourceRequest):

2011-08-05  Alexey Proskuryakov  <ap@apple.com>

        Reviewed by Scott Grant and Simon Fraser.

        <rdar://problem/9686016> Selection handles don't track scrolling in accelerated overflow:scroll content

        This only does the minimal fix - updates scroll highlight position after scrolling. It jumps
        directly to new position after deceleration stops, and doesn't perform clipping.

        * page/iphone/FrameIPhone.mm:
        (WebCore::Frame::overflowScrollPositionChangedForNode): Notify UIKit after scrolling
        an accelerated overflow:scroll.

        * rendering/RenderLayer.h:
        (WebCore::RenderLayer::isTouchScrollable):
        (WebCore::RenderLayer::isOverflowScroll):
        Made functions that are public in ScrollableArea public in RenderLayer - there is no reason
        why the should only be called through base class.

2011-08-05  Antti Koivisto  <antti@apple.com>

        Reviewed by Pratik Solanki.

        <rdar://problem/9177501> Reeder for iPad jetsamming more frequently due to logic error in tile cache memory adaptation code
        
        The if conditions were wrong way round, we never reduced the tile count below 3/4 of the maximum.
        
        The patch also increases the maximum capacity (and so also the reduced capacities) by 50% for 512MB devices
        to lessen the impact of this fix there. We haven't see much memory problems of this type on those.
        
        Tested on N90, K94 and K48 with memory munched way down, with Safari and other clients.
        
        On K48 this fixes a reproducible crashing scenario where
        - Reeder is launched and the first article of a feed is loaded (Ars Technica).
        - Memory is munched down to 15% (munch -p15)
        - User starts rapidly going through the rest of the articles of the feed.

        * platform/iphone/TileCache.mm:
        (WebCore::TileCache::tileCapacityForGrid):

2011-08-04  Andy Estes  <aestes@apple.com>

        Reviewed by Joseph Pecoraro.

        <rdar://problem/9902264> -[EventSendingController scalePageBy:atX:andY:] should be a no-op on iOS.

        * page/Frame.cpp:
        (WebCore::Frame::pageScaleFactorChanged): Fix a typo in a comment.

2011-08-04  Ian Henderson  <ianh@apple.com>

        Reviewed by Joseph Pecoraro.

        <rdar://problem/9839867> Zoomed out tiles persisted from previous page

        When we change the content frame, we call through to doLayoutTiles.
        If the frame became smaller, some tiles may be invalid.  We already
        remove these invalid tiles in createTiles(), but we only create tiles
        in the active tile grid.

        Add a call to dropInvalidTiles() for the inactive grid as well.

        * platform/iphone/TileCache.h:
        * platform/iphone/TileCache.mm:
        (WebCore::TileCache::inactiveTileGrid): This code was in
        bringActiveTileGridToFront; move it into a separate method so we can
        use it in doLayoutTiles().
        (WebCore::TileCache::doLayoutTiles):
        (WebCore::TileCache::bringActiveTileGridToFront):

2011-08-04  Sam Weinig  <sam@webkit.org>

        Reviewed by Dave Carson.

        <rdar://problem/9502977> Document-wide click handler interfering with text selection

        When finding an approximate node, never consider the document the best alternative.

        * page/iphone/FrameIPhone.mm:
        (WebCore::Frame::betterApproximateNode):

2011-08-04  Alexey Proskuryakov  <ap@apple.com>

        <rdar://problem/9686016> Selection handles don't track scrolling in accelerated overflow:scroll content

        Rolling out the fix due to a bug discovered soon after landing.

        * rendering/RenderLayer.cpp: (WebCore::RenderLayer::scrollTo):

2011-08-04  Alexey Proskuryakov  <ap@apple.com>

        Reviewed by Simon Fraser.

        <rdar://problem/9686016> Selection handles don't track scrolling in accelerated overflow:scroll content

        This only does the minimal fix - updates scroll highlight position after scrolling. It jumps
        directly to new position after deceleration stops, and doesn't perform clipping.

        * rendering/RenderLayer.cpp: (WebCore::RenderLayer::scrollTo): Notify UIKit after scrolling
        an accelerated scroll area.

2011-08-04  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/9877734> MobileSafari can't access website that requires SSL client authentication

        Merged ToT WebKit r92410.

    2011-08-04  Pratik Solanki  <psolanki@apple.com>

        Implement CERTIFICATE_CREDENTIALS_SUPPORTED for CFNetwork
        https://bugs.webkit.org/show_bug.cgi?id=65704
        <rdar://problem/9877734>

        Reviewed by Oliver Hunt.

        Implement support for client side certificate authentication in the CFNetwork based loader.

        * platform/network/cf/AuthenticationCF.cpp:
        (WebCore::createCF):
        (WebCore::core): Also fix leak of password string.

2011-08-04  Sam Weinig  <sam@webkit.org>

        Reviewed by Eric Carlson.

        <rdar://problem/9355355> Telluride: Can't watch NASA TV in NASA app

        Add work around for NASA HD App that doesn't perform the non-standard URL
        adjustment for object tags that is done today.  When we remove that code,
        we can remove this work around as well.

        * html/HTMLObjectElement.cpp:
        (WebCore::shouldNotPerformURLAdjustment):
        (WebCore::HTMLObjectElement::parametersForPlugin):
        Don't perform the URL adjustment if NASA HD.

        * platform/RuntimeApplicationChecksIPhone.h:
        * platform/RuntimeApplicationChecksIPhone.mm:
        (WebCore::applicationIsNASAHD):
        Add check for NASA HD.

2011-08-04  Brady Eidson  <beidson@apple.com>

        <rdar://problem/9882581> REGRESSION (91931) - Two LocalStorage threads started, thread unsafe operations can cause crash or other problems later.

        Merge ToT r92406

    2011-08-04  Brady Eidson  <beidson@apple.com>

            <rdar://problem/9882581>, <rdar://problem/9868015>, and https://bugs.webkit.org/show_bug.cgi?id=65712
            REGRESSION (91931) - Two LocalStorage threads started, thread unsafe operations can cause crash or other problems later.

            Reviewed by Darin Adler.

            * storage/StorageTracker.cpp:
            (WebCore::StorageTracker::internalInitialize): Set the "needs initialization" flag before doing a 
              whole bunch of stuff that might need to check it.

2011-08-04  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/9877129> Block selection overlay animates weirdly when scrolling non-accelerated overflow:scroll div

        Reviewed by Chris Marrin.
        
        Add a parameter to ChromeClient::didLayout() that indicates whether the
        "layout" was just an overflow scroll, and change RenderLayer::didUpdateScroll()
        to pass this value.

        * loader/EmptyClients.h:
        (WebCore::EmptyChromeClient::didLayout):
        * page/ChromeClient.h:
        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::didUpdateScroll):

2011-08-03  Ian Henderson  <ianh@apple.com>

        <rdar://problem/9326550> Panning while zoomed-in on iPad 2 Features page is jerkier than Durango

        Merge ToT r92340.

    2011-08-03  Ian Henderson  <ianh@apple.com>

            Draw rectangular box shadow for elements with border-radius if no corners are visible
            https://bugs.webkit.org/show_bug.cgi?id=65006

            Reviewed by Simon Fraser.

            Change "unroundClippedCorners" to "allCornersClippedOut" and use it to
            determine when the corners' influence affects the blurred shadow in
            the current drawing region.

            Test: fast/box-shadow/box-shadow-clipped-slices.html

            * rendering/InlineFlowBox.cpp:
            (WebCore::InlineFlowBox::paintBoxShadow): Pass PaintInfo through to
            RenderBoxModelObject::paintBoxShadow.
            (WebCore::InlineFlowBox::paintBoxDecorations): Ditto.
            * rendering/InlineFlowBox.h:
            * rendering/RenderBox.cpp:
            (WebCore::RenderBox::paintBoxDecorations): Ditto.
            * rendering/RenderBoxModelObject.cpp:
            (WebCore::allCornersClippedOut): Determines whether the bounding rects
            for any of the given rounded rect's corners intersects the clip rect.
            (WebCore::RenderBoxModelObject::paintBorder): Instead of "unrounding"
            any corner outside the clip rect, unround all corners at once, and
            only if they are all outside the clip rect.
            (WebCore::RenderBoxModelObject::paintBoxShadow): Determine whether any
            corner will influence shadow drawing using allCornersClippedOut on the
            influenceRect, whose corners extend past the fillRect's corners by the
            blur radius and inside the fillRect's corners by the blur radius.
            * rendering/RenderBoxModelObject.h:
            * rendering/RenderFieldset.cpp:
            (WebCore::RenderFieldset::paintBoxDecorations): Pass PaintInfo into
            RenderBoxModelObject::paintBoxShadow.
            * rendering/RenderTable.cpp:
            (WebCore::RenderTable::paintBoxDecorations): Ditto.
            * rendering/RenderTableCell.cpp:
            (WebCore::RenderTableCell::paintBoxDecorations): Ditto.

2011-08-03  Dan Bernstein  <mitz@apple.com>

        Reviewed by Sam Weinig.

        Preparation for <rdar://problem/9751762> TELLURIDE: iBooks renders emoji characters; shouldn't

        * css/html.css:
        Appended -webkit-pictograph to the font family list for text controls, so that when users use the
        Emoji keyboard to enter text, it always renders using emoji, even if the setting to prefer pictographs
        in general is turned off.
        * dom/Document.cpp:
        (WebCore::Document::recalcStyle): Ensure that the fontFallbackPrefersPictographs setting works even
        on the default font of the document.

2011-08-03  Dan Bernstein  <mitz@apple.com>

        Preparation for <rdar://problem/9751762> TELLURIDE: iBooks renders emoji characters; shouldn't

        Merged TOT WebKit r92287.

        This completes the change for <rdar://problem/9853445> by making the SPI for forcing fallback through
        the pictograph font work with @font-face-based fonts.

    2011-08-03  Dan Bernstein  <mitz@apple.com>

        FontCache::getFontData() does not set the familyIndex to cAllFamiliesScanned if the last font is a custom font
        https://bugs.webkit.org/show_bug.cgi?id=65597

        Reviewed by Simon Fraser.

        No test added because behavior is unchanged, but this saves a call to getFontData().

        * platform/graphics/FontCache.cpp:
        (WebCore::FontCache::getFontData): Eliminated early return inside the loop, allowing execution
        to continue and familyIndex to be set.

2011-08-03  Antti Koivisto  <antti@apple.com>

        <rdar://problem/9887770> Use smaller threshold value for didFirstVisuallyNonEmptyLayout pixel count
        
        Merge open source r92264.
    
        This just makes the value more conservative. Verified that cases originally fixed by <rdar://problem/9407710> 
        are still handled as expected.

    2011-08-03  Antti Koivisto  <antti@apple.com>

            https://bugs.webkit.org/show_bug.cgi?id=65599
            Image loads should trigger didFirstVisuallyNonEmptyLayout more easily

            Reviewed by Dan Bernstein.

            Tweak the heuristic pixel count so logo-sized images trigger didFirstVisuallyNonEmptyLayout.

        * page/FrameView.h:
        (WebCore::FrameView::incrementVisuallyNonEmptyPixelCount):

2011-08-02  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/9878360> Safari crashes in WebCore::ResourceResponse::platformCompare with SSL client identity installed

        Merged ToT WebKit r92261.

    2011-08-02  Pratik Solanki  <psolanki@apple.com>

        Crash in ResourceResponse::platformCompare() with USE(CFNETWORK)
        https://bugs.webkit.org/show_bug.cgi?id=65584

        Reviewed by David Kilzer.

        * platform/network/cf/ResourceResponseCFNet.cpp:
        (WebCore::ResourceResponse::platformCompare): Don't call CFEqual with 0 as an argument.

2011-08-02  Yongjun Zhang  <yongjun_zhang@apple.com>

        Reviewed by Joseph Pecoraro.

        <rdar://problem/9491498> Daijisen Japanese dictionary doesn't show dictionary content

        The app uses self-closing script tag in its content.  HTML5 parser by default doesn't allow
        that.  For this app, enable _needsPreHTML5ParserQuirks flag and make sure WebCore handles
        self-closing script tag in the parser.

        * WebCore.exp.in:
        * platform/RuntimeApplicationChecksIPhone.h:
        * platform/RuntimeApplicationChecksIPhone.mm:
        (WebCore::applicationIsDaijisenDictionary):

2011-08-02  Dan Bernstein  <mitz@apple.com>

        Reviewed by Simon Fraser.

        <rdar://problem/9394430> WebKit can't show these emoji glyphs 1⃣2⃣3⃣4⃣5⃣6⃣7⃣ correctly unless proper font is being specified

        Test: platform/iphone-simulator/iphone/fast/text/combining-enclosing-keycap.html

        This change, based on a patch from Ned Holbrook, is focused on making the keycap glyphs included
        in Apple Color Emoji work in iOS, and does not address the general issue of combining character
        sequences getting split up before being passed into Core Text, such as in <rdar://problem/7860281>.

        * platform/graphics/FontCache.h: Made ComplexTextController a friend class in order to allow it to call
        getCachedFontData().
        * platform/graphics/FontPlatformData.h:
        * platform/graphics/cocoa/FontPlatformDataCocoa.mm:
        (WebCore::FontPlatformData::FontPlatformData): Added this constructor that takes a CTFontRef.
        * platform/graphics/mac/ComplexTextController.cpp:
        (WebCore::ComplexTextController::collectComplexTextRuns): Check for the combining enclosing keycap
        character, and if it is encountered, always keep it with the previous character, and set a flag
        telling collectComplexTextRunsForCharacters() to check the actual fonts Core Text will end up
        using for this run.
        (WebCore::ComplexTextController::collectComplexTextRunsForCharacters):
        * platform/graphics/mac/ComplexTextController.h:
        * platform/graphics/mac/ComplexTextControllerCoreText.cpp:
        (WebCore::ComplexTextController::collectComplexTextRunsForCharactersCoreText): Added a checkActualFonts
        boolean parameter. When it is set, check the font of each run Core Text produced and use it for
        the corresponding ComplexTextRun.

2011-08-01  Antti Koivisto  <antti@apple.com>

        <rdar://problem/9504157> iOS: REGRESSION (r39725?): Resources removed from document can not be freed until the document is deleted (61006)

        Merge open source r92143.

    2011-07-27  Scott Graham  <scottmg@chromium.org>

            REGRESSION (r39725?): Resources removed from document can not be freed until the document is deleted
            https://bugs.webkit.org/show_bug.cgi?id=61006

            Reviewed by Antti Koivisto.

            Upon completing a load start a Timer to iterate through
            CachedResourceLoader's m_documentResources map to check for any items
            that have only one reference (thus being the reference in the map
            itself). The map should really be weak, but because the
            CachedResourceHandle achieves bookkeeping work in addition to
            reference counting, this is a simpler and more localized way to free
            the used memory while maintaining the other behaviour (when
            CachedResource is used as proxy).

            With this patch the testcase at
            https://bugs.webkit.org/attachment.cgi?id=93850 should no longer
            consume 400MB of ram on load. Test added for crash discovered in
            previous revision, but no tests for memory usage.


        * loader/cache/CachedResource.h:
        (WebCore::CachedResource::hasOneHandle):
        * loader/cache/CachedResourceLoader.cpp:
        (WebCore::CachedResourceLoader::CachedResourceLoader):
        (WebCore::CachedResourceLoader::loadDone):
        (WebCore::CachedResourceLoader::garbageCollectDocumentResourcesTimerFired):
        * loader/cache/CachedResourceLoader.h:

2011-08-01  Sam Weinig  <sam@webkit.org>

        Reviewed by Anders Carlsson.

        <rdar://problem/9790517> Epicurious share button doesn't work in Telluride.

        Changes to URL canonicalization caused special URLs in Epicurious, such as
        "shareRecipe://", to loose there camel-casing, something the Epicurious app
        was not prepared for.

        * platform/RuntimeApplicationChecksIPhone.h:
        * platform/RuntimeApplicationChecksIPhone.mm:
        (WebCore::applicationIsEpicurious):
        Add runtime check for Epicurious.

        * platform/cf/KURLCFNet.cpp:
        (WebCore::createCFURLWithEpicuriousQuirkIfNecessary):
        (WebCore::KURL::createCFURL):
        When converting a KURL to a CFURLRef (and NSURL), apply a quirk
        for Epicurious which transforms the canonicalized scheme back to
        to the camel case scheme the app is expecting.  As with other quirks,
        this will only work for if the running app Epicurious and it is a
        copy that was linked prior to Telluride.

2011-07-31  Eric Carlson  <eric.carlson@apple.com>

        Reviewed by Dean Jackson.

        <rdar://problem/9769896> Previews do not work in iTunes store (sometimes never, sometimes after 2 or 3 taps)

        The plug-in used as the media element backend initializes itself and sets up the connection to
        MediaPlayerPrivateiPhone asynchronously, so remember if play() is called before the connection is complete
        and call it later instead of dropping it on the floor.

        * platform/graphics/iphone/MediaPlayerPrivateIPhone.h:
        * platform/graphics/iphone/MediaPlayerPrivateIPhone.mm:
        (WebCore::MediaPlayerPrivateiPhone::load): addDeferredProperty -> addDeferredRequest.
        (WebCore::MediaPlayerPrivateiPhone::addDeferredRequest): Renamed from addDeferredRequest.
        (WebCore::MediaPlayerPrivateiPhone::processDeferredRequests): Deal with deferred play.
        (WebCore::MediaPlayerPrivateiPhone::setPoster): addDeferredProperty -> addDeferredRequest.
        (WebCore::MediaPlayerPrivateiPhone::setControls): addDeferredProperty -> addDeferredRequest.
        (WebCore::MediaPlayerPrivateiPhone::play): Call addDeferredRequest if helper hasn't been
            connected yet.
        (WebCore::MediaPlayerPrivateiPhone::attributeChanged): addDeferredProperty -> addDeferredRequest.
        (-[WebCoreMediaPlayerNotificationHelper scheduleDeferredPropertiesWithOptionalDelay:]): addDeferredProperty -> addDeferredRequest.

2011-07-30  Enrica Casucci  <enrica@apple.com>

        Merge ToT WebKit r92059.

    2011-07-30  Enrica Casucci  <enrica@apple.com>

            REGRESSION: culledInlineAbsoluteRects needs to translate a 0,0 point to absolute
            coordinates so that the top left position is accurate.
            https://bugs.webkit.org/show_bug.cgi?id=65419
            <rdar://problem/9408862>

            This patch fixes a regression introduced in r83075.
            Make sure that culledInlineAbsoluteRects still does
            a translation of a 0,0 point to absolute coordinates so that the top left position is
            accurate.
            This code path could not be tested via JavaScript. The patch
            extends the Internals object to be able to test this case.

            Reviewed by Dan Bernstein.

            * rendering/RenderInline.cpp:
            (WebCore::RenderInline::culledInlineAbsoluteRects):

2011-07-30  Antti Koivisto  <antti@apple.com>

        Reviewed by Dave Carson.

        <rdar://problem/9869160> Crash stopping load of daringfireball.net under WebCore::ResourceLoadNotifier::assignIdentifierToInitialRequest
        
        ResourceLoader::url() won't return correct value until load starts. As a result we would fail to remove the resource loader from the correct
        scheduled load list when canceled. Later the scheduler would try to load the canceled resource, which would crash.
        
        Nicer fixes would be considerably more risky.

        * loader/ResourceLoadScheduler.cpp:
        (WebCore::ResourceLoadScheduler::remove): Check for originalRequest().url() too.

2011-07-29  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/9840716> REGRESSION (Durango8H7-Telluride9A280): Space showing on the wrong side of the quote when message doesn't get sent

        Merged TOT WebKit r88487. Note that TOT r88478, which introduced the regression, was merged into iOS in r1049027.

    2011-06-09  Dan Bernstein  <mitz@apple.com>

        Reviewed by Darin Adler.

        Fix a regression from r88478.

        * platform/graphics/mac/ComplexTextControllerCoreText.cpp:
        (WebCore::ComplexTextController::collectComplexTextRunsForCharactersCoreText): Add the runs
        in reverse order in the RTL case here, since the whole vector is reversed by collectComplexTextRuns()
        afterwards.

2011-07-29  Eric Carlson  <eric.carlson@apple.com>
    
    Merged ToT WebKit r92009.

    Fixes <rdar://problem/9864775> Crash in WebCore::ResourceLoadNotifier::assignIdentifierToInitialRequest

    2011-07-29  Eric Carlson  <eric.carlson@apple.com>
    
            Load delegate not consulted before loading some poster images
            https://bugs.webkit.org/show_bug.cgi?id=65270
    
            Reviewed by Joseph Pecoraro.
    
            * html/HTMLVideoElement.cpp:
            (WebCore::HTMLVideoElement::setDisplayMode): Don't ask a load delegate if it is OK to 
                load an empty poster url.
    
2011-07-29  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/9843898> [Telluride9A281] Emoji for Chinese flag does not render correctly

        Merged TOT WebKit r92005.

    2011-07-29  Dan Bernstein  <mitz@apple.com>

        Added the regional indicator symbols to the set of codepoints that force use of the complex text code path.

        Fixes <rdar://problem/9864578> Regional indicator symbols do not combine into national flags
        https://bugs.webkit.org/show_bug.cgi?id=65380

        Reviewed by Anders Carlsson.

        Test: fast/text/regional-indicator-symobls.html

        * platform/graphics/Font.cpp:
        (WebCore::Font::codePath): Added handling of surrogate pairs, which returns Complex for characters in
        the range U+1F1E6..U+1F1FF.

2011-07-29  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/9845371> REGRESSION(r1055024): Self-signed OS X Server certificate is automatically denied

        Reviewed by David Kilzer.

        When Safari handles a self-signed certificate alert, it calls [NSURLRequest
        setAllowsSpecificHTTPSCertificate:forHost:]. NSURLConnection pays attention to that call and
        sets up appropriate properties on CFURLRequest. With the move to CF-based loader, we broke
        this. Fix it by doing what NSURLConnection does. Note that the Windows code also does
        something similar - see the allowsAnyHTTPSCertificateHosts() array and its usage. Using that
        code also seemed to work when I tried it, but it sets a different set of properties than
        Foundation and the client certificate settings call is Windows only. I felt more comfortable
        setting the exact same properties as NSURLConnection.

        * WebCore.xcodeproj/project.pbxproj:
        * platform/network/ResourceHandle.h:
        * platform/network/cf/ResourceHandleCFNet.cpp:
        (WebCore::makeFinalRequest):
        * platform/network/iphone/ResourceHandleIPhone.mm: Added.
        (WebCore::ResourceHandle::createSSLPropertiesFromNSURLRequest):

2011-07-29  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/9845371> REGRESSION(r1055024): Self-signed OS X Server certificate is automatically denied

        Reviewed by David Kilzer.

        CFErrorRefs and NSErrors have different domains and just creating an NSError from a
        CFErrorRef causes calling code to get confused. Client code looks for NSErrors with
        NSURLErrorDomain as the domain, but they get one with kCFErrorDomainCFNetwork. There is code
        in Foundation that converts one to another. This is the code I have copied over into WebKit
        for now, until we can get CFNetwork folks to expose it as SPI. See <rdar://problem/9837415>
        Need SPI for translateCFError. This change makes Safari pop up a certificate accept alert
        when navigating to a site with self-signed certificates.

        * platform/network/mac/ResourceErrorMac.mm:
        (dictionaryThatCanCode):
        (-[CustomNSURLError encodeWithCoder:]):
        (NSErrorFromCFError):
        (WebCore::ResourceError::nsError):

2011-07-29  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/9864012> Clean up compiler settings (ANGLE project doesn't specify compiler correctly)

        Reviewed by Joseph Pecoraro.

        * Configurations/CompilerVersion.xcconfig: Build Development
        and Development_Hardware configurations using clang.
        Deployment, Deployment_Hardware, Production_Deployment and
        Production_Hardware configurations still use llvm-gcc-4.2.

2011-07-29  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/9861231> REGRESSION: QuickLookBanner does not display on MS Word documents

        Reviewed by David Carson and Pratik Solanki.

        * platform/network/iphone/QuickLook.h:
        (WebCore::addQLPreviewConverterWithFileForURL): Clean up
        parameter name.
        * platform/network/iphone/QuickLook.mm:
        (WebCore::addQLPreviewConverterWithFileForURL): Ditto.
        (WebCore::QuickLookHandle::QuickLookHandle): Use the generated
        URL from QLPreviewConverter instead of the actual URL.  This
        fixes the bug by restoring the behavior prior to r1053424.

2011-07-28  Ian Henderson  <ianh@apple.com>

        Reviewed by David Carson.

        <rdar://problem/9798407> REGRESSION: Black flashes when zooming in Safari tabs

        The zoomed in tile grid's host layer was unparented, so when we asked
        for its visible rect we got some bogus value.  Add the host layer
        immediately after creating the zoomed in tile grid so the visible rect
        is always valid.

        * platform/iphone/TileCache.mm:
        (WebCore::TileCache::commitScaleChange): After creating the zoomed in
        tile grid, add its host layer to the layer tree instead of waiting for
        bringActiveTileGridToFront().

2011-07-29  Matthew Delaney  <mdelaney@apple.com>

    Merged ToT WebKit r91628.

    Fixes <rdar://problem/9755607> Some tiles in BBC News app are continually redrawing (9A264)

    Note: Added in typedef for LayoutRect at the top of RenderBox.h which should be removed once r89945 is merged.

    2011-07-22  Simon Fraser  <simon.fraser@apple.com>

        Avoiding painting backgrounds if they are fully obscures by an object's foreground
        https://bugs.webkit.org/show_bug.cgi?id=65030

        Reviewed by Dan Bernstein.

        Some pages used animated loading GIFs as the background of <img>,
        but WebKit keeps animating these after the image has loaded.
        
        Thwart this by avoiding the painting of such backgrounds, if we can
        determine that they are completely obscured by the border and content
        of the element.

        * platform/graphics/BitmapImage.h:
        (WebCore::BitmapImage::currentFrameHasAlpha): Utility method, since currentFrame()
        is protected.
        * rendering/RenderBox.cpp:
        (WebCore::RenderBox::paintBoxDecorations): Call paintBackground().
        (WebCore::RenderBox::paintBackground): New wrapper for the paintFillLayers() which
        paints the background layers, plus some code we call in a couple of places. This
        checks the new backgroundIsObscured() method before doing any painting.
        * rendering/RenderBox.h:
        (WebCore::RenderBox::backgroundIsObscured): New virtual method that determines
        whether any of the background is visible.
        * rendering/RenderBoxModelObject.h:
        * rendering/RenderBoxModelObject.cpp:
        (WebCore::BorderEdge::obscuresBackground): Returns true if this edge will
        entirely hide the background under it.
        (WebCore::RenderBoxModelObject::borderObscuresBackground): Determine whether
        the border hides the background.
        * rendering/RenderImage.cpp:
        (WebCore::RenderImage::backgroundIsObscured): Override the RenderBox method
        and return true if the image is a loaded, opaque bitmap image, and the background
        won't show in the border or padding areas.
        * rendering/RenderImage.h:
        * rendering/RenderTable.cpp:
        (WebCore::RenderTable::paintBoxDecorations): Use paintBackground().

2011-07-28  Dmitry Gorbik  <dgorbik@apple.com>

        Reviewed by Joseph Pecoraro.

        <rdar://problem/9324346> REGRESSION: Text Autosizing: plays poorly with first-letter

        Copying VISITED_LINK pseudo style for an autosized text is necessary to address <rdar://problem/8865898>.
        Copying any other pseudo style may cause an override of our autosizing changes and will cause regression.
        Also a lot of pseudo styles do not affect the text so we do not need to copy them.

        Test: text-autosizing/first-letter.html

        * dom/Document.cpp:
        (WebCore::cloneRenderStyleWithState):

2011-07-28  Sam Weinig  <sam@webkit.org>

        Reviewed by Anders Carlsson.

        <rdar://problem/9434450> REGRESSION: Loading computerworld.com article hangs, never completes in MobileSafari

        Test: platform/iphone-simulator/http/tests/loading/multiple-prioritization.html

        * loader/ResourceLoadScheduler.cpp:
        (WebCore::ResourceLoadScheduler::scheduleLoad):
        Change to use ResourceLoader::originalRequest() instead of ResourceLoader::url(), 
        which uses the request(), on iOS. This is necessary because when are scheduling
        the load on iOS the request is null.

2011-07-28  Brady Eidson  <beidson@apple.com>

        <rdar://problem/9714337> MobileSafari: WebKitInitializeStorageIfNecessary() takes about 30ms in startup in N90.

        Merged ToT WebKit r91931 and r91943

    2011-07-28  Brady Eidson  <beidson@apple.com>

        <rdar://problem/9714337> and https://bugs.webkit.org/show_bug.cgi?id=65306
        WebKitInitializeStorageIfNecessary() can take awhile performing i/o, isn't necessary for every WebView

        Move the heavy lifting done in StorageTracker::initializeTracker() until when the global tracker is actually
        accessed, therefore deferring it until a web page actually uses LocalStorage or the app uses the API.

        Reviewed by Maciej Stachowiak and Sam Weinig.

        No new tests. (Not possible to test this API implementation detail)

        * WebCore.exp.in:

        * storage/StorageAreaImpl.cpp:
        (WebCore::StorageAreaImpl::StorageAreaImpl): Access the global StorageTracker to indicate that a web page
          is actually using the storage APIs.

        * storage/StorageTracker.cpp:
        (WebCore::StorageTracker::initializeTracker): Moved the potentially hefty work from here...
        (WebCore::StorageTracker::internalInitialize): ...to here.
        (WebCore::StorageTracker::tracker): If the global tracker still needs internalInitialize() called, do so.
        (WebCore::StorageTracker::StorageTracker):
        * storage/StorageTracker.h:

2011-07-28  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/9349958> Ensure that GeolocationPositionCache never writes to disk

        Merged ToT WebKit r91936.

        Rubber-stamped by Ian Henderson.

    2011-07-28  David Kilzer  <ddkilzer@apple.com>

        <http://webkit.org/b/65289> Remove GeolocationPositionCache

        Reviewed by Adam Barth.

        * CMakeLists.txt: Remove references to GeolocationPositionCache.
        * GNUmakefile.list.am: Ditto.
        * WebCore.gypi: Ditto.
        * WebCore.order: Ditto.
        * WebCore.pro: Ditto.
        * WebCore.vcproj/WebCore.vcproj: Ditto.
        * WebCore.xcodeproj/project.pbxproj: Ditto.

        * page/Geolocation.cpp: Switch from using m_positionCache to
        m_cachedPosition.
        (WebCore::Geolocation::makeCachedPositionCallbacks):
        (WebCore::Geolocation::haveSuitableCachedPosition):
        (WebCore::Geolocation::positionChangedInternal):
        * page/Geolocation.h: Remove PositionCacheWrapper and replace
        with RefPtr<Geoposition>.
        * page/GeolocationPositionCache.cpp: Removed.
        * page/GeolocationPositionCache.h: Removed.

2011-07-27  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Carson.

        Remove last reference to stale variable "mainThreadWaitingToDraw".
        The variable was actually removed in r79944 when drawing switched
        to just using the auto lock. This is also debug only code.

        * wak/WebCoreThread.mm:
        (_WebTryThreadLock):

2011-07-28  Dan Bernstein  <mitz@apple.com>

        Reviewed by Paul Knight.

        <rdar://problem/9856900> REGRESSION (r1055890): Double Byte characters are missing

        * platform/graphics/mac/FontCacheMac.mm:
        (WebCore::FontCache::getFontDataForCharacters): In r1055890 I accidentally inserted the test for
        the PUA block used for emoji too early in the cascade of range checks. Moved that test to the
        right place further down.

2011-07-27  Jon Lee  <jonlee@apple.com>

        <rdar://problem/9421891> REGRESSION: can't comment on a post in Facebook

        Reviewed by Andy Estes.

        We now support window.onerror, which ends up causing "No Internet Connection" pages to appear
        in Facebook.  We have communicated through evangelism that Facebook needs to fix this on their
        end, but until then, we will insert a hack to disable window.onerror support for this app.

        * WebCore.exp.in: Expose applicationIsFacebook() to WebKit
        * dom/ScriptExecutionContext.cpp:
        (WebCore::ScriptExecutionContext::dispatchErrorEvent): Check to see if the error event is on
        the DOMWindow object, and if we are supposed to dispatch the error event.
        * page/Settings.h: Add a new flag to check to see if we should dispatch window.onerror events
        (WebCore::Settings::setShouldDispatchJavaScriptWindowOnErrorEvents): Basic setter
        (WebCore::Settings::shouldDispatchJavaScriptWindowOnErrorEvents): Basic getter
        * platform/RuntimeApplicationChecksIPhone.h:
        * platform/RuntimeApplicationChecksIPhone.mm:
        (WebCore::applicationIsFacebook): looks at bundle identifier

2011-07-27  Matt Lilek  <mlilek@apple.com>

        Not reviewed, Deployment build fix.

        * css/CSSFontSelector.cpp:
        (WebCore::CSSFontSelector::getFallbackFontData):

2011-07-27  Pratik Solanki  <psolanki@apple.com>

        Merged ToT WebKit r91885.

    2011-07-27  Pratik Solanki  <psolanki@apple.com>

        Incorrect arguments passed to LOG statement
        https://bugs.webkit.org/show_bug.cgi?id=65293

        Reviewed by Oliver Hunt.

        * platform/network/mac/ResourceHandleMac.mm:
        (-[WebCoreResourceHandleAsDelegate connection:canAuthenticateAgainstProtectionSpace:]):

2011-07-27  Dan Bernstein  <mitz@apple.com>

        Reviewed by Anders Carlsson.

        <rdar://problem/9853445> Demote Apple Color Emoji in the default fallback list and on-by-default SPI for appending it to any font’s fallback
        This is in preparation for <rdar://problem/9751762> TELLURIDE: iBooks renders emoji characters; shouldn't

        1. Undo the change made for <rdar://problem/8892916>, which moved Apple Color Emoji to the top
           of the default fallback list in FontCache::getFontDataForCharacters().
        2. Add interfaces to allow WebKit to insert the pictograph font (or any font) at the end of
           all fonts’ (or any font’s) own fallback list, just before the default fallback list, thus
           maintaining the same behavior (of emoji being preferred over monochrome glyphs).

        * WebCore.exp.in: Exported a new Font constructor and Settings::setFontFallbackPrefersPictographs().
        * css/CSSFontSelector.cpp:
        (WebCore::CSSFontSelector::fallbackFontDataCount): Added an implementation that returns 1 if
        font fallback should prefer pictographs, 0 otherwise.
        (WebCore::CSSFontSelector::getFallbackFontData): Added an implementation that returns the pictograph
        font if font fallback should prefer pictographs.
        * css/CSSFontSelector.h:
        * page/Settings.cpp:
        (WebCore::Settings::Settings): Initialize new member variable.
        (WebCore::Settings::setFontFallbackPrefersPictographs): Added this setter. When set to true,
        all fonts behave as if "-webkit-pictograph" has been appended to their specified font-family values.
        * page/Settings.h:
        (WebCore::Settings::fontFallbackPrefersPictographs): Added this getter.
        * platform/graphics/Font.cpp:
        (WebCore::Font::Font): Added this constructor for a platform font with a font selector. The latter
        can provide fallback fonts to be inserted before the default fallback list.
        * platform/graphics/Font.h:
        * platform/graphics/FontFallbackList.cpp:
        (WebCore::FontFallbackList::fontDataAt): After exhausting the font’s specified family list, go on
        to retrieve fallback fonts from the font selector, if it offers any. This is how CSSFontSelector and
        the EmojiFallbackFontSelector added in WebKit insert their fallback fonts ahead of the default fallback
        list.
        * platform/graphics/FontSelector.h:
        * platform/graphics/mac/FontCacheMac.mm:
        (WebCore::FontCache::getFontDataForCharacters): Reverted r997406.

2011-07-27  Eric Carlson  <eric.carlson@apple.com>

        <rdar://problem/8904358> iTunes may load podcast poster images from non-whitelisted hosts

        Merged ToT WebKit r91872.

    2011-07-27  Eric Carlson  <eric.carlson@apple.com>
    
            Load delegate not consulted before loading some poster images
            https://bugs.webkit.org/show_bug.cgi?id=65270
    
            Reviewed by Darin Adler.
    
            Test: media/video-poster-blocked-by-willsendrequest.html
    
            * html/HTMLVideoElement.cpp:
            (WebCore::HTMLVideoElement::setDisplayMode): Don't ask media engine to set poster if
                willLoadMediaElementURL returns false.
    
2011-07-26  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by Simon Fraser.

        <rdar://problem/9830441> Viewport "device-height" not respected for "width"

        Test: viewport/viewport-width-device-height.html

        * dom/ViewportArguments.cpp:
        (WebCore::finializeViewportArguments): properly finalize
        device-width and device-height values for both width and
        height on iOS.

2011-07-26  Joseph Pecoraro  <joepeck@webkit.org>

        <rdar://problem/9812115> iPad: Inline video player controls not working after PageCache back/forward navigation

        Merged ToT WebKit r91808.

    2011-07-26  Joseph Pecoraro  <joepeck@webkit.org>

            Restore Composited Layers Faster from PageCache
            https://bugs.webkit.org/show_bug.cgi?id=65216

            Reviewed by NOBODY (OOPS!).

            Restore the layer tree hierarchy a little sooner, when
            restoring from the page cache. This more closely matches
            original restore behavior.

            Existing test showed no change.

            * page/FrameView.cpp:
            (WebCore::FrameView::restoreBackingStores):

2011-07-26  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/9843582> iBooks shows no pages

        Reviewed by Yongjun Zhang and Dan Bernstein.

        iBooks extends NSURLRequest class and expects to get back an instance of the same class in
        the delegate callback methods. It has overrides for copy and copyWithZone: to ensure that it
        got back the same class. With the move to CFNetwork based loader, we were creating a new
        NSURLrequest using [NSURLrequest alloc], and not through [NSURLRequest copy], which iBooks
        relied on. This change fixes it so that we create an instance of the same type as the
        request passed to us (if we have one).

        * platform/network/mac/ResourceRequestMac.mm:
        (WebCore::ResourceRequest::updateNSURLRequest):

2011-07-26  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/9842424> Add protection space authentication callback code to CFNetwork loader on Mac

        Merged ToT WebKit r91799.

    2011-07-26  Pratik Solanki  <psolanki@apple.com>

        Add protection space authentication callback code to CFNetwork loader on Mac
        https://bugs.webkit.org/show_bug.cgi?id=65190
        <rdar://problem/9842424>

        Reviewed by Oliver Hunt.

        Port over protection space authentication callback code from ResourceHandleMac.mm to
        ResourceHandleCFNet.cpp.

        * platform/network/ResourceHandle.h:
        * platform/network/cf/ResourceHandleCFNet.cpp:
        (WebCore::canRespondToProtectionSpace):
        (WebCore::ResourceHandle::createCFURLConnection):
        (WebCore::ResourceHandle::canAuthenticateAgainstProtectionSpace):
        (WebCore::WebCoreSynchronousLoaderClient::canAuthenticateAgainstProtectionSpace):
        * platform/network/mac/ResourceHandleMac.mm:
        (-[WebCoreResourceHandleAsDelegate connection:canAuthenticateAgainstProtectionSpace:]): Add logging.

2011-07-26  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/9842905> Add a generic pictograph font family

        Merged TOT WebKit r91777 and r91778.

    2011-07-26  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/9842889> Add a generic pictograph font family
        https://bugs.webkit.org/show_bug.cgi?id=65197

        Reviewed by Anders Carlsson.

        Test: fast/css/font-family-pictograph.html

        * WebCore.exp.in: Export Settings::setPictographFontFamily().
        * css/CSSComputedStyleDeclaration.cpp:
        (WebCore::identifierForFamily): Added -webkit-pictograph.
        * css/CSSFontSelector.cpp:
        (WebCore::CSSFontSelector::addFontFaceRule): Ditto.
        (WebCore::fontDataForGenericFamily): Ditto.
        * css/CSSStyleSelector.cpp:
        (WebCore::CSSStyleSelector::applyProperty): Ditto.
        * css/CSSValueKeywords.in:
        * inspector/front-end/CSSKeywordCompletions.js: Ditto.
        * inspector/front-end/SourceCSSTokenizer.js: Ditto.
        (WebInspector.SourceCSSTokenizer):
        * inspector/front-end/SourceCSSTokenizer.re2js: Ditto.
        * page/Settings.cpp:
        (WebCore::Settings::pictographFontFamily): Added this getter.
        (WebCore::Settings::setPictographFontFamily): Added this setter.
        * page/Settings.h:
        * platform/graphics/FontDescription.h: Added PictographFamily to the GenericFamilyType enum.

2011-07-26  Ian Henderson  <ianh@apple.com>

        Reviewed by David Carson.

        <rdar://problem/9755007> Throw away non-visible tiles in background tabs

        We already call removeAllNonVisibleTiles when switching tabs, but it
        didn't remove zoomed out tiles in my misguided attempt to improve the
        user experience.

        Even though tiles in background tabs are purgeable, they still
        contribute to memory pressure while resident.  Also, if the tiles are
        purged, we must redraw all of them after switching back to their tab
        and re-adding their layers to the layer tree.

        Instead of treating zoomed out tiles as sacred, always remove tiles
        from the active tile grid and, if we're zoomed in, completely clear
        the zoomed out grid.

        * platform/iphone/TileCache.mm:
        (WebCore::TileCache::removeAllNonVisibleTiles):
        * platform/iphone/TileGrid.h:
        * platform/iphone/TileGrid.mm:
        (WebCore::TileGrid::dropNonVisibleTiles):

2011-07-25  Ian Henderson  <ianh@apple.com>

        <rdar://problem/9434637> Unexpected back navigation when leaving to another application on a page in the back/forward cache

        Merge ToT r91727.

    2011-07-25  Ian Henderson  <ianh@apple.com>

            WebFrame should have a method to determine its visual emptiness
            https://bugs.webkit.org/show_bug.cgi?id=64223

            Reviewed by Dan Bernstein.

            * page/FrameView.h:
            (WebCore::FrameView::isVisuallyNonEmpty): Add an accessor to FrameView
            so we can tell whether it's visually non-empty.

2011-07-25  Andy Estes  <aestes@apple.com>

        Reviewed by Darin Adler.

        <rdar://problem/9827302> Add a compile-time option to enable the HTTP inspector server on the device.

        * Configurations/FeatureDefines.xcconfig: Add ENABLE_HTTP_INSPECTOR_SERVER.

2011-07-25  Matthew Delaney  <mdelaney@apple.com>

        Reviewed by Ian Henderson.

        <rdar://problem/9323883> Fix button drawing to avoid pixel bleed issues

        This patch makes background drawing for the RenderThemeIPhone code clip to the outer border
        instead of inner to avoid pixel gaps in the cases where bleeding was noticed. This applies
        to checkboxes, radio buttons, push buttons, and range slides. For radio and checkboxes, no bleeding
        was seen when they were checked, so in that case we leave the clip to the inner border.

        No new tests. We'd need the ability to run pixel tests before creating a useful test here.

        * css/html.css: Changed border-color to have alpha of 0, instead of unnecessary 0.1 for the rule:
        (input[type="checkbox"]:checked, input[type="radio"]:checked): The 0.1 alpha was legacy from being
        copied over from opensource way back in the day. I can find no reason for it being needed now and
        changing it doesn't appear to cause any issues.

        * rendering/RenderThemeIPhone.cpp:
        (WebCore::RenderThemeIPhone::addRoundedBorderClip): Modified to choose inner or outer border based off if the box is checked or not.
        (WebCore::RenderThemeIPhone::paintCheckboxDecorations): Clip to outer border when unchecked for drawing background to remove pixel gaps.
        (WebCore::RenderThemeIPhone::paintRadioDecorations): Clip to outer border when unchecked for drawing background to remove pixel gaps.
        (WebCore::RenderThemeIPhone::paintSliderThumbDecorations): Clip to outer border for drawing background to remove pixel gaps.
        (WebCore::RenderThemeIPhone::paintPushButtonDecorations): Clip to outer border for drawing background to remove pixel gaps.
        * rendering/RenderThemeIPhone.h: Pass renderobject to addRoundedBorderClip so that it can checked isChecked(), removes need for passing the style in separately as well.

2011-07-25  Sam Weinig  <sam@webkit.org>

        <rdar://problem/9740379> One-finger scrolling an overflow div often scrolls the page by mistake

        Merged TOT WebKit r91699.

        * platform/iphone/ScrollAnimatorIPhone.mm:
        (WebCore::ScrollAnimatorIPhone::determineScrollableAreaForTouchSequence):
        Use now more correctly named predicate, isPinnedInBothDirections.

    2011-07-25  Sam Weinig  <sam@webkit.org>

        Refactor ScrollableArea pinned predicates to be more generally useful
        <rdar://problem/9740379>

        Reviewed by Dan Bernstein.

        * platform/ScrollableArea.cpp:
        (WebCore::ScrollableArea::isPinnedInBothDirections):
        (WebCore::ScrollableArea::isPinnedHorizontallyInDirection):
        (WebCore::ScrollableArea::isPinnedVerticallyInDirection):
        * platform/ScrollableArea.h:

2011-07-25  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/9462931> Crash below WebCore::FontFallbackList::fontDataAt on some production iAds

        Merged TOT WebKit r91699.

    2011-07-25  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/9835028> Font loading during layout can cause layout code to be re-entered via resource load delegate
        https://bugs.webkit.org/show_bug.cgi?id=65123

        Reviewed by Anders Carlsson.

        Since CSSFontFaceSource::getFontData() can get called during layout, avoid calling out to loader
        code from under it, and instead defer that work using a zero-delay timer.

        * css/CSSFontFaceSource.cpp:
        (WebCore::CSSFontFaceSource::CSSFontFaceSource):
        (WebCore::CSSFontFaceSource::~CSSFontFaceSource):
        (WebCore::CSSFontFaceSource::getFontData): Rather than starting the font load here, schedule
        a zero-delay timer to do it.
        (WebCore::CSSFontFaceSource::startLoadingTimerFired): Added. Starts loading the font if needed.
        * css/CSSFontFaceSource.h:

2011-07-25  Alexey Proskuryakov  <ap@apple.com>

        Reviewed by Sam Weinig.

        <rdar://problem/9834718> Selection bounds calculation doesn't take borders into account

        * bindings/objc/DOM.mm: (-[DOMNode innerFrameQuad]): Fixed arithmetics.

        * bindings/objc/DOMExtensions.h: Removed unused and buggy -innerFrame.

2011-07-23  Justin Garcia  <justin.garcia@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/9648895> make data transient - text before and after dictation position

        * WebCore.exp.in:

2011-07-22  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/9826892> Zooming in then back out cause canvas benchmark to permanently lose framerate
        
        Merge WebKit ToT r91623.

    2011-07-22  Simon Fraser  <simon.fraser@apple.com>
    
            Need to update the acceleratesDrawing status on a layer when switching to/from tiled layers
            https://bugs.webkit.org/show_bug.cgi?id=65057
    
            Reviewed by Joseph Pecoraro.
    
            When switching to or from tiled layers, we need to update the new layer's
            acceleratesDrawing status.
    
            * platform/graphics/ca/GraphicsLayerCA.cpp:
            (WebCore::GraphicsLayerCA::swapFromOrToTiledLayer):

2011-07-22  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/8727143> Investigate moving to the C CFNetwork APIs

        Reviewed by David Carson.

        iOS specific changes needed to get USE(CFNETWORK) working.

        * platform/network/cf/CredentialStorageCFNet.cpp:
        (WebCore::CredentialStorage::saveToPersistentStorage): Port over NS based code from CredentialStorageMac.cpp.
        * platform/network/mac/AuthenticationMac.mm:
        (WebCore::mac): Use new method name.

2011-07-21  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/9821051> Get authentication to work with USE(CFNETWORK) on Mac

        Merged ToT WebKit r91554.

    2011-07-21  Pratik Solanki  <psolanki@apple.com>

        https://bugs.webkit.org/show_bug.cgi?id=65002
        Get authentication to work with USE(CFNETWORK) on Mac

        Reviewed by David Kilzer.

        Instead of creating a new CFURLAuthChallengeRef, we save and reuse the same object as the
        one given to us by CFNetwork.

        * platform/network/mac/AuthenticationMac.mm:
        (-[WebCoreAuthenticationClientAsChallengeSender setCFChallenge:]): Accessor methods for the
        new CFURLAuthChallengeRef ivar.
        (-[WebCoreAuthenticationClientAsChallengeSender cfChallenge]):
        (WebCore::core): Create AuthenticationChallenge using the saved CFURLAuthChallengeRef.
        (WebCore::mac): Use the CFURLAuthChallengeRef object in AuthenticationChallenge instead of
        creating a new one.

2011-07-21  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/9812734> REGRESSION: nytimes.com video caption is blurry when zooming
        
        Merge WebKit ToT r91542.

    2011-07-21  Simon Fraser  <simon.fraser@apple.com>
    
            GraphicsLayers in subframes can get sync'd multiple times
            https://bugs.webkit.org/show_bug.cgi?id=52489
    
            Reviewed by James Robinson.
            
            Avoid doing a 'syncCompositingState' pass on the GraphicsLayers
            for subframes, when those GraphicsLayers are rooted in the
            parent document.
    
            * page/FrameView.cpp:
            (WebCore::FrameView::syncCompositingStateForThisFrame): Add a parameter
            that contains the rootmost frame on which sync was called. This is used
            to indicate to the compositor whether it's the root of the sync.
            (WebCore::FrameView::syncCompositingStateIncludingSubframes): Pass the current
            Frame in.
            (WebCore::FrameView::paintContents): The sync is for this frame, so pass m_frame.
            * page/FrameView.h:
            * rendering/RenderLayerCompositor.cpp:
            (WebCore::RenderLayerCompositor::flushPendingLayerChanges): New parameter
            to specify whether this compositor is in the rootmost Frame being flushed.
            We can avoid doing work if we know that flushing some ancestor frame would
            have also traversed our GraphicsLayers.
            * rendering/RenderLayerCompositor.h:
            (WebCore::RenderLayerCompositor::isFlushingLayers): Make this private, since
            callers are probably most intersted in enclosingCompositorFlushingLayers().
    
2011-07-21  Enrica Casucci  <enrica@apple.com>

        Reviewed by Justin Garcia.

        <rdar://problem/9772036> 9A268: Underline in text is not copied or sent in email
        
        Underline was being removed because it is necessary to remove
        CSSPropertyWebkitTextDecorationsInEffect too from the properties we don't
        want to modify before executing the applyStyle command.

        * editing/iphone/EditorIPhone.mm:
        (WebCore::Editor::removeUnchangeableStyles): Added code to remove the additional property.

2011-07-21  Matthew Delaney  <mdelaney@apple.com>

        Reviewed by David Carson.

        <rdar://problem/9794571> Improve performance of drawing canvas-to-canvas images

        Merged ToT WebKit r91332, r91446, r91496, r91532.

        * platform/graphics/GraphicsContext.h: Had to add two new params for exif orientation and scale factor.
        * platform/graphics/cg/GraphicsContextCG.cpp: Minor changes to merge patch to use orientation and scale.
        * platform/graphics/cg/ImageCG.cpp: Had to change it to grab the scale and orientation and pass those
        down to the drawNativeImage call.

    2011-07-21  Matthew Delaney  <mdelaney@apple.com>

        Add fast path for ImageBuffer::draw, Take 2.
        https://bugs.webkit.org/show_bug.cgi?id=64535

        Reviewed by Simon Fraser.

        No new tests. This patch doesn't change behavior; current tests are sufficient.

        * platform/graphics/GraphicsContext.cpp:
        (WebCore::GraphicsContext::drawImage): Moved the main method version next to wrapper versions.

        * platform/graphics/ImageBuffer.h:
        1) Added BackingStoreCopy enum for choosing to copy backing store or not in copyImage().
        2) Added copyNativeImage() behind USE(CG) - same as copyImage() but gives NativeImagePtr.
        * platform/graphics/cg/ImageBufferCG.cpp: Added new methods described above.

        * platform/graphics/GraphicsContext.h: Adding drawNativeImage() for fast draw path.
        * platform/graphics/cg/GraphicsContextCG.cpp:
        (WebCore::GraphicsContext::drawNativeImage): Added. Draws a nativeImagePtr into context.

        * platform/graphics/Image.h: Added imageWithColorSpace behind CG platform ifdef
        * platform/graphics/cg/ImageCG.cpp:
        (WebCore::BitmapImage::draw): Refactored out actual image drawing code into GraphicsContext,
        so that it can be used by more than just BitmapImage without having to copy code.
        (WebCore::Image::imageWithColorSpace): Made into an Image class function.

        Updated copyImage() to use BackingStoreCopy:
        * platform/graphics/qt/ImageBufferQt.cpp
        * platform/graphics/filters/FETile.cpp
        * platform/graphics/cairo/ImageBufferCairo.cpp
        * platform/graphics/skia/ImageBufferSkia.cpp
        * platform/graphics/wx/ImageBufferWx.cpp
        * platform/graphics/wince/ImageBufferWinCE.cpp
        * svg/SVGFEImageElement.cpp
        * svg/graphics/SVGImage.cpp
        * html/HTMLCanvasElement.cpp
        * html/canvas/WebGLRenderingContext.cpp
        * rendering/svg/RenderSVGResourcePattern.cpp

2011-07-21  Andy Estes  <aestes@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/9642290> Telluride: Facely HD missing "facebook" logo, other icons

        Facely HD implements a resource load delegate that can load resources
        from its bundle matching the following URL 'scheme':

            http://local://<path-to-file>

        It's unclear how the Facely HD developer intended this URL to be
        interpreted, but the correct interpretation is that the scheme is HTTP,
        the host is 'local', the following colon represents an empty port
        specification, and the following two slashes are part of the path
        component. When Telluride merged open source WebKit changes, it picked
        up <http://trac.webkit.org/changeset/78383> which fixed a URL
        canonicalization bug in KURL related to default or empty port
        components in URLs. RFC 3986 says default or empty port components
        should be pruned, so this change manifested in the second colon being
        removed from the above string. Facely HD does not handle this change
        gracefully and stops loading resources from its bundle.

        Resolve this by lying to Facely HD's resource load delegate. Allow
        WebCore to prune the empty port component from KURL, but add it back to
        the NSURL when calling Facely HD's delegate methods. This hack is
        guarded by a linked-on-or-after check, so will only affect versions of
        the app linked against a pre-Telluride iOS SDK.

        * platform/RuntimeApplicationChecksIPhone.h: Add declaration for
        applicationIsFacebookTouchHD().
        * platform/RuntimeApplicationChecksIPhone.mm:
        (WebCore::applicationIsFacebookTouchHD): Check if the application is
        Facely HD (either the free or paid version).
        * platform/network/mac/ResourceRequestMac.mm:
        (WebCore::applyFacebookTouchHDURLQuirkIfNecessary): Modify the
        MutableNSURLRequest's URL to contain an empty path component after the
        host if the application is Facely HD and was linked against a
        pre-Telluride iOS SDK.
        (WebCore::ResourceRequest::doUpdatePlatformRequest): Call
        applyFacebookTouchHDURLQuirkIfNecessary()

2011-07-21  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/9818772> Clean up generated HTMLEntityTable.cpp output (64972)

        Merged ToT WebKit r91494.

    2011-07-21  David Kilzer  <ddkilzer@apple.com>

        <http://webkit.org/b/64972> Clean up generated HTMLEntityTable.cpp output

        Reviewed by Eric Seidel.

        * html/parser/create-html-entity-table:
        - Fix duplicate "EntityName" suffix on local variables (changes
          fooSemicolonEntityNameEntityName to fooSemicolonEntityName)
          for all 2138 symbols.
        - Add newlines to make source file human-readable (as originally
          intended).
        - Add static (const) keywords to local variables that are never
          referenced externally.

2011-07-21  Alexey Proskuryakov  <ap@apple.com>

        <rdar://problem/9817460> Selection is not properly updated in non-accelerated non-editable overflow:scroll content
        Part 1: show and hide callout bar during scrolling.

        Reviewed by Adele Peterson.

        * platform/iphone/ScrollAnimatorIPhone.mm:
        (WebCore::ScrollAnimatorIPhone::handleTouchEvent): Don't say that we ended scrolling if we
        didn't even start.

2011-07-21  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/9812773> position:relative with percentage offset is incorrectly positioned inside position:fixed

        Reviewed by Dave Hyatt.
        
        When computing the locations of positioned elements inside a fixed position container, where the
        container is using percentage height, and the offset of the child is a percentage, we need
        to use the custom fixed position layout rectangle when computing the child offset.
        
        Created "logical" wrappers for the existing customContainingBlockWidth/Height methods
        to match the existing code better.

        Test: platform/iphone-simulator/iphone/fixed/percentage-inside-fixed.html

        * rendering/RenderBox.cpp:
        (WebCore::customContainingBlockWidth):
        (WebCore::customContainingBlockHeight):
        (WebCore::customContainingBlockLogicalWidth):
        (WebCore::customContainingBlockLogicalHeight):
        (WebCore::customContainingBlockAvailableLogicalHeight):
        (WebCore::RenderBox::availableLogicalHeightUsing):
        (WebCore::RenderBox::containingBlockLogicalWidthForPositioned):
        (WebCore::RenderBox::containingBlockLogicalHeightForPositioned):

2011-07-21  Enrica Casucci  <enrica@apple.com>

        Merge ToT WebKit r91481.

    2011-07-21  Enrica Casucci  <enrica@apple.com>

        Cannot click to position the caret to the right of an image with display:block style.
        https://bugs.webkit.org/show_bug.cgi?id=64962
        <rdar://problem/9446343>

        Reviewed by David Hyatt.

        Test: editing/selection/click-on-block-image.html

        The current implementation of positionForPoint always returns the visible
        position to the left of the image, if the image has a block style.
        This patch changes the behavior for block styled images to match the behavior
        for inline images.

        * rendering/RenderReplaced.cpp:
        (WebCore::RenderReplaced::positionForPoint): Modified to avoid relying entirely
        on InlineBox to calculate the position.

2011-07-21  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/9813262> Positioned elements inside position:fixed don't stay still on scrolling

        Reviewed by Chris Marrin.
        
        A position:absolute element inside a position:fixed element will be composisted,
        and should stay fixed when you scroll. However, position:fixed does not create
        stacking context, so the layer for the absolutely positioned element is not a child
        of the layer for the fixed position element, so does not get the special treatment
        on scrolling.
        
        For Telluride, work around this by making fixed position create stacking context.
        We believe that this is very unlikely to change rendering behavior on most sites.

        Test: platform/iphone-simulator/iphone/fixed/absolute-inside-fixed.html

        * css/CSSStyleSelector.cpp:
        (WebCore::CSSStyleSelector::adjustRenderStyle):

2011-07-21  David Carson  <dacarson@apple.com>

        <rdar://problem/9720348> WebApp: Retina Startup Image not working

        Reviewed by Joseph Pecoraro.

        Factor out the media query evaluation so that it can be called separately. WebClip code
        will use the separate function to evaluate which launch thumbnail to download.

        * bindings/objc/DOM.mm:
        (-[DOMHTMLLinkElement _mediaQueryMatchesForOrientation:]):
        (-[DOMHTMLLinkElement _mediaQueryMatches]):
        * bindings/objc/DOMPrivate.h:

2011-07-21  David Kilzer  <ddkilzer@apple.com>

        BUILD FIX: QuickLook.mm should build with clang

        Reviewed by Joseph Pecoraro.

        Fixes the following 3 compiler errors (plus one that will occur
        when USE(CFNETWORK) is enabled):

            WebCore/platform/network/iphone/QuickLook.mm:361:40:{361:40-361:49}: error: cannot initialize a parameter of type 'NSArray *' with an lvalue of type 'const NSArray *' [3]
                 [m_converter.get() appendDataArray:dataArray];
                                                    ^~~~~~~~~
            /Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator5.0.sdk/System/Library/Frameworks/QuickLook.framework/PrivateHeaders/QLPreviewConverter.h:51:36: note: passing argument to parameter 'dataArray' here [3]
             - (void)appendDataArray:(NSArray *)dataArray;
                                                ^
            WebCore/platform/network/iphone/QuickLook.mm:376:35:{376:35-376:39}: error: cannot initialize a parameter of type 'NSData *' with an lvalue of type 'const NSData *' [3]
                 [m_converter.get() appendData:data];
                                               ^~~~
            /Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator5.0.sdk/System/Library/Frameworks/Foundation.framework/Headers/NSData.h:128:30: note: passing argument to parameter 'other' here [3]
             - (void)appendData:(NSData *)other;
                                          ^
            WebCore/platform/network/iphone/QuickLook.mm:378:48:{378:48-378:52}: error: cannot initialize a parameter of type 'NSData *' with an lvalue of type 'const NSData *' [3]
                     [m_quicklookFileHandle.get() writeData:data];
                                                            ^~~~
            /Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator5.0.sdk/System/Library/Frameworks/Foundation.framework/Headers/NSFileHandle.h:18:29: note: passing argument to parameter 'data' here [3]
             - (void)writeData:(NSData *)data;
                                         ^

        The alternative to doing a simple C-style cast is this:

            NSString *s = reinterpret_cast<NSString *>(const_cast<struct __CFString *>(cfString));

        The observant reader will notice that this is equivalent to:

            NSString *s = reinterpret_cast<NSString *>(const_cast<CFMutableStringRef>(cfString));

        So just use a simple C-style cast instead.

        * platform/network/iphone/QuickLook.mm:
        (WebCore::QuickLookHandle::create): Use simple (NSString *)
        C-style cast.
        (WebCore::QuickLookHandle::didReceiveDataArray): Use simple
        (NSArray *) C-style cast.  Move the const modifier.
        (WebCore::QuickLookHandle::didReceiveData): Use simple
        (NSData *) C-style cast.  Move the const modifier.

2011-07-21  Sam Weinig  <sam@webkit.org>

        <rdar://problem/9196953> REGRESSION: margin-top: 25% is ignored when the html element has -webkit-column-width specified

        Merged ToT WebKit r91474.

    2011-07-21  Sam Weinig  <sam@webkit.org>
        
        CSS top margin collapses when paginating
        https://bugs.webkit.org/show_bug.cgi?id=64906
        
        Reviewed by David Hyatt.
        
        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::collapseMargins):
        (WebCore::RenderBlock::estimateLogicalTopPosition):
        Update to only go down paginated path when we actually have a page height (so
        not in the case that we are just gathering breaks) and to call the version of
        of nextPageLogicalTop that actually returns the next page, even if we are at
        the boundary point.
        
        (WebCore::RenderBlock::nextPageLogicalTopExcludingBoundaryPoint):
        (WebCore::RenderBlock::nextPageLogicalTopIncludingBoundaryPoint):
        Split into two functions which differ in how they deal with the boundary condition.
        
        (WebCore::RenderBlock::applyBeforeBreak):
        (WebCore::RenderBlock::applyAfterBreak):
        Switch to call nextPageLogicalTopIncludingBoundaryPoint.
        
        * rendering/RenderBlock.h:
        Add new functions declarations and comment them.

2011-07-20  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/9809383> Get QuickLook to work with USE(CFNETWORK)

        Reviewed by David Kilzer.

        Refactor QuickLook code from ResourceHandleMac.mm. Instead of having the QuickLook related
        ivars in WebCoreResourceHandleAsDelegate, we move them into a new class QuickLookHandle and
        keep a reference to that in ResourceHandle. QuickLookHandle::create() then returns a valid
        object if the response is for an object that can be QuickLooked.

        * platform/network/ResourceHandle.h:
        (WebCore::ResourceHandle::quickLookHandle):
        (WebCore::ResourceHandle::setQuickLookHandle):
        * platform/network/iphone/QuickLook.h:
        * platform/network/iphone/QuickLook.mm:
        (WebCore::createTemporaryFileForQuickLook):
        (WebCore::QuickLookHandle::QuickLookHandle):
        (WebCore::QuickLookHandle::create):
        (WebCore::QuickLookHandle::nsResponse):
        (WebCore::QuickLookHandle::didReceiveDataArray):
        (WebCore::QuickLookHandle::didReceiveData):
        (WebCore::QuickLookHandle::didFinishLoading):
        (WebCore::QuickLookHandle::didFail):
        (WebCore::QuickLookHandle::~QuickLookHandle):
        * platform/network/mac/ResourceHandleMac.mm:
        (-[WebCoreResourceHandleAsDelegate initWithHandle:]):
        (-[WebCoreResourceHandleAsDelegate detachHandle]):
        (-[WebCoreResourceHandleAsDelegate connection:didReceiveResponse:]):
        (-[WebCoreResourceHandleAsDelegate connection:didReceiveDataArray:]):
        (-[WebCoreResourceHandleAsDelegate connection:didReceiveData:lengthReceived:]):
        (-[WebCoreResourceHandleAsDelegate connectionDidFinishLoading:]):
        (-[WebCoreResourceHandleAsDelegate connection:didFailWithError:]):

2011-07-20  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/9809383> Get QuickLook to work with USE(CFNETWORK)

        Reviewed by David Kilzer.

        Add QuickLook support for CFNetwork based loader.

        * platform/network/ResourceHandle.h:
        * platform/network/cf/ResourceHandleCFNet.cpp:
        (WebCore::didReceiveResponse):
        (WebCore::didReceiveDataArray):
        (WebCore::didReceiveData):
        (WebCore::didFinishLoading):
        (WebCore::didFail):
        (WebCore::ResourceHandle::connectionClientCallbacks):
        * platform/network/iphone/QuickLook.h:
        * platform/network/iphone/QuickLook.mm:
        (-[QuickLookHandleAsDelegate initWithConnection:handle:]):
        (-[QuickLookHandleAsDelegate connection:didReceiveDataArray:]):
        (-[QuickLookHandleAsDelegate connection:didReceiveData:lengthReceived:]):
        (-[QuickLookHandleAsDelegate connectionDidFinishLoading:]):
        (-[QuickLookHandleAsDelegate connection:didFailWithError:]):
        (WebCore::QuickLookHandle::QuickLookHandle):
        (WebCore::QuickLookHandle::create):
        (WebCore::QuickLookHandle::cfResponse):

2011-07-20  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/9805386> WebCore and WebKit should build with -O3

        Reviewed by David Carson.

        * Configurations/Base.xcconfig: Set GCC_OPTIMIZATION_LEVEL = 3
        when building for iphoneos and iphonesimulator platforms.

2011-07-20  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Joseph Pecoraro.

        <rdar://problem/9438297> "Inside nytimes.com" layer is blurrier than other content (9A177) when zooming under memory pressure
        
        Don't reduce rendering quality until the free memory level is 20 or below,
        since many devices are consistently under the 45 threshold.
        
        Some quality reduction is still done when memory is very low, otherwise
        jetsams on layer-heavy pages like http://www.apple.com/appletv are
        frequent.

        * platform/graphics/ca/GraphicsLayerCA.cpp:
        (WebCore::constrainedContentsScale):

2011-07-20  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Kilzer.

        <rdar://problem/9792964> REGRESSION: Embedded videos don't play on spiegel.de (html file as src)

        Test: http/tests/iphone/video-with-src-as-html.html

        Previously the "html" file extension was not being converted
        to a MIME type for media. However, ToT WebKit r72119, added
        platform mime type checking for file extensions and the "html"
        extension for media files returns "text/html" which the iOS
        media engine does not support. To match old behavior, we add
        "text/html" as a media type our engine "may" support.

        * platform/graphics/iphone/MediaPlayerPrivateIPhone.mm:
        (WebCore::mimeTypeCache): Let our media engine say it can
        support "text/html" as a mime type.

2011-07-20  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/9802938> Merge open source bug 63674 - Get webkit to compile with USE(CFNETWORK) enabled on Mac

        Merged ToT WebKit r90873, r91081, r91084, r91102, r91154, r91198, r91200 and r91201.

        * platform/iphone/WebCoreSystemInterfaceIPhone.mm: Add new function pointer definitions.

    2011-07-18  Pratik Solanki  <psolanki@apple.com>

        Unreviewed. Fix Windows build. Move static function defaultSessionCookieStorage() to before
        its use in defaultCookieStorage().

        * platform/network/cf/CookieStorageCFNet.cpp:
        (WebCore::defaultSessionCookieStorage):

    2011-07-18  Pratik Solanki  <psolanki@apple.com>

       Part of https://bugs.webkit.org/show_bug.cgi?id=63674
       Get webkit to compile with USE(CFNETWORK) enabled on Mac

       Reviewed by David Kilzer.

       Get coookie storage code to work with USE(CFNETWORK) enabled on Mac.

       No new tests because no change in functionality.

       * platform/network/cf/CookieStorageCFNet.cpp:
       (WebCore::defaultCookieStorage):
       (WebCore::defaultSessionCookieStorage):
       * platform/network/cf/ResourceHandleCFNet.cpp:
       (WebCore::ResourceHandle::createPrivateBrowsingStorageSession):
       * platform/network/mac/CookieStorageMac.mm:

    2011-07-18  Pratik Solanki  <psolanki@apple.com>

        Part of https://bugs.webkit.org/show_bug.cgi?id=63674
        Get webkit to compile with USE(CFNETWORK) enabled on Mac

        Reviewed by David Kilzer.

        * WebCore.exp.in:

    2011-07-15  Pratik Solanki  <psolanki@apple.com>

        Part of https://bugs.webkit.org/show_bug.cgi?id=63674
        Get webkit to compile with USE(CFNETWORK) enabled on Mac

        Reviewed by David Kilzer.

        New WebKitSystemInterface functions for CFNetwork-based loader.

        * WebCore.exp.in:
        * platform/mac/WebCoreSystemInterface.h:
        * platform/mac/WebCoreSystemInterface.mm:

    2011-07-15  Pratik Solanki  <psolanki@apple.com>

        Part of https://bugs.webkit.org/show_bug.cgi?id=63674
        Get webkit to compile with USE(CFNETWORK) enabled on Mac

        Reviewed by David Kilzer.

        Minor changes needed to keep the compiler happy.

        No new tests because no change in functionality.

        * platform/network/cf/FormDataStreamCFNet.cpp:
        * platform/network/cf/ResourceErrorCF.cpp:
        (WebCore::ResourceError::platformCopy):
        * platform/network/cf/ResourceHandleCFNet.cpp:
        (WebCore::WebCoreSynchronousLoaderClient::willSendRequest):
        * platform/network/cf/ResourceResponseCFNet.cpp:
        (WebCore::toTimeT):

    2011-07-15  Pratik Solanki  <psolanki@apple.com>

        Part of https://bugs.webkit.org/show_bug.cgi?id=63674
        Get webkit to compile with USE(CFNETWORK) enabled on Mac

        Reviewed by David Kilzer.

        No new tests because no change in functionality and option is not enabled on Mac.

        * platform/network/cf/AuthenticationCF.h: Just use AuthenticationMac.h instead of having
        Mac-specific declarations here.
        * platform/network/cf/CredentialStorageCFNet.cpp:
        * platform/network/mac/AuthenticationMac.h:

    2011-07-15  Pratik Solanki  <psolanki@apple.com>

        Part of https://bugs.webkit.org/show_bug.cgi?id=63674
        Get webkit to compile with USE(CFNETWORK) enabled on Mac

        Reviewed by David Kilzer.

        Get LoaderRunLoop to work on Mac when USE(CFNETWORK) is enabled. Although we could use the
        main run loop, it's better to have a separate thread handling the loads so that it can work
        in parallel to the main thread. This is similar to what NSURLConnection does for us
        internally when we use the NS APIs.

        No new tests because no change in functionality and option is not enabled on Mac.

        * platform/network/cf/LoaderRunLoopCF.cpp:
        (WebCore::runLoaderThread): Create an autorelease pool for objc code that might be called in
        the run loop.
        (WebCore::loaderRunLoop):
        * platform/network/cf/LoaderRunLoopCF.h:

    2011-07-12  Pratik Solanki  <psolanki@apple.com>

        Get webkit to compile with USE(CFNETWORK) enabled on Mac
        https://bugs.webkit.org/show_bug.cgi?id=63674

        Reviewed by David Kilzer.

        Changes to ResourceHandle class to get it to compile with USE(CFNETWORK).

        No new tests because no change in functionality and option is not enabled on Mac.

        * platform/network/ResourceHandle.h:
        * platform/network/ResourceHandleInternal.h:
        * platform/network/cf/ResourceHandleCFNet.cpp:
        (WebCore::didReceiveResponse):
        (WebCore::ResourceHandleInternal::~ResourceHandleInternal):
        (WebCore::ResourceHandle::start):
        (WebCore::WebCoreSynchronousLoaderClient::willSendRequest): Call adjustMIMETypeIfNecessary
        on Mac. Also port over fix for <rdar://problem/6901522> added in r43993 which forces the
        MIME type to text/html if the request is annotated with a "ForceHTMLMIMEType" property.

2011-07-19  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/9803897> Remove backing rounding epsilon in GraphicsLayerCA

        Reviewed by Ian Henderson.

        Now that Core Animation does rounding when computing backing store size (<rdar://problem/9803897>),
        remove the epsilon fudge factor in the layer scaling code.
        
        I verified that the CA layer backing store sizes matched what we expect.

        * platform/graphics/ca/GraphicsLayerCA.cpp:
        (WebCore::GraphicsLayerCA::computePixelAlignment):

2011-07-19  Dan Bernstein  <mitz@apple.com>

        Reviewed by Justin Garcia.

        <rdar://problem/9777990> REGRESSION: Cursor doesn't go back to the left when switching back from hebrew to english keyboard

        * page/iphone/FrameIPhone.mm:
        (WebCore::Frame::createDefaultFieldEditorDocumentStructure): Set the contentEditable attributed of the
        text element to 'true' rather than 'plaintext-only'. This allows its writing direction to be changed
        by the keyboard.

2011-07-19  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/9804805> Composting layers changes may not be committed sometimes

        Merged TOT WebKit r91324.

    2011-07-19  Simon Fraser  <simon.fraser@apple.com>
    
            REGRESSION (r91136-r91146): 40 tests failing on Windows 7 Release (Tests)
            https://bugs.webkit.org/show_bug.cgi?id=64808
    
            Reviewed by Adam Roben.
    
            Initializing m_uncommittedChanges to a non-zero value
            caused the first call to noteLayerPropertyChanged() to
            not call m_client->notifySyncRequired(). This resulted in
            animations never getting committed on Windows, which broke
            a lot of tests.
    
            * platform/graphics/ca/GraphicsLayerCA.cpp:
            (WebCore::GraphicsLayerCA::GraphicsLayerCA):
    
2011-07-19  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/9739255> MobileMail crashes in Simulator attempting to print .doc files from quicklook

        Merged TOT WebKit r91314.

    2011-07-19  Dan Bernstein  <mitz@apple.com>

        Nothing printed when specifying a very large maximum layout width
        https://bugs.webkit.org/show_bug.cgi?id=64831

        Reviewed by Beth Dakin.

        I am not adding a test because the DumpRenderTree printing test machinery is based on PrintContext,
        which does not exercise the code path on which this bug lies.

        * page/FrameView.cpp:
        (WebCore::FrameView::forceLayoutForPagination): Fixed an integer overflow.

2011-07-19  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/9796891> Semi-repro crash when rotating under GraphicsLayerCA::swapFromOrToTiledLayer()

        Merge WebKit ToT r91294.

    2011-07-19  Simon Fraser  <simon.fraser@apple.com>
    
            Possible recursion in GraphicsLayerCA::updateGeometry()
            https://bugs.webkit.org/show_bug.cgi?id=64815
    
            Reviewed by Sam Weinig.
            
            It was possible to recurse via updateGeometry/swapFromOrToTiledLayer/
            updateContentsScale because updateGeometry() and updateContentsScale()
            used different sizes; updateGeometry() used the scaled size, while
            updateContentsScale() used the unscaled size.
            
            Always use the unscaled size; the scaled size will be at most a couple
            of pixels bigger, and our threshold is not close to the max texture
            size limit, so using the slightly smaller size is OK.
        
            * platform/graphics/ca/GraphicsLayerCA.cpp:
            (WebCore::GraphicsLayerCA::updateGeometry):
            (WebCore::GraphicsLayerCA::updateLayerDrawsContent):
            (WebCore::GraphicsLayerCA::updateContentsScale):
            (WebCore::GraphicsLayerCA::requiresTiledLayer):
            * platform/graphics/ca/GraphicsLayerCA.h:
    
2011-07-19  Antti Koivisto  <antti@apple.com>

        Reviewed by Ian Henderson.

        <rdar://problem/9608286> Telluride9A243-N90: Safari often shows a black section in Google Reader

        The problem is that the document size changes multiple times and we miss some tile invalidations due to tiles
        being temporarily outside the current frame.

        Fix by recording the smallest bounds seen when invalidating tiles. Everything outside these is also considered invalid and
        dropped by dropInvalidTiles(). Due to dirtyRect being limited to current bounds the tiles that are temporarily 
        outside might miss invalidation completely othwerwise.

        I can't catch the exact Google Reader bug in debugger but I believe this is it. I can't repro the bug anymore with this patch. 
        The code drops additional tiles on Google Reader and has no effect in any regular scenarios I tried.

        * platform/iphone/TileGrid.h:
        * platform/iphone/TileGrid.mm:
        (WebCore::TileGrid::TileGrid):
        (WebCore::TileGrid::dropInvalidTiles):
        (WebCore::TileGrid::invalidateTiles):

2011-07-19  Jer Noble  <jer.noble@apple.com>

        <rdar://problem/9793982> Video on nytimes.com sometimes offset when the page loads

        Reviewed by Ian Henderson.

        Don't pass values into blocks by reference when the lifetime of the block will outlast
        the reference. In setAnchorPointOnMainThread, this results in the contents of "value"
        being destroyed and replaced by the time the block is handled.  Instead, convert the
        FloatPoint3D reference into a CGPoint and CGFloat variables, and pass those into the
        block instead.

        * platform/graphics/ca/mac/PlatformCALayerMac.mm:
        (PlatformCALayer::setAnchorPointOnMainThread):

2011-07-19  Jer Noble  <jer.noble@apple.com>

        <rdar://problem/9455306> Audio player UI does not appear when playing these mp3's

        Reviewed by Dean Jackson.

        When calculating the available height of a frameView hosting a plugin document, only
        use that frameView's fixed layout size if the frameView has a fixed layout size, which
        it won't in the case of an embedded plugin document.

        * rendering/RenderBox.cpp:
        (WebCore::RenderBox::availableLogicalHeightUsing):

2011-07-19  Chris Fleizach  <cfleizach@apple.com>

        <rdar://problem/8785384> WEBAX: can't select a plan in account creation

        Merge WebKit ToT r91267.

        Make sure if a control is hidden, it's associated label is exposed.

        * accessibility/AccessibilityRenderObject.cpp:
        (WebCore::AccessibilityRenderObject::exposesTitleUIElement):

        2011-07-19  Chris Fleizach  <cfleizach@apple.com> 
 		 
            If the control associated with a <label> is hidden, the label is also hidden (incorrectly)      
            https://bugs.webkit.org/show_bug.cgi?id=64752 
 
            Reviewed by Darin Adler. 
 		 
            * platform/mac/accessibility/label-element-with-hidden-control-expected.txt: Added. 
            * platform/mac/accessibility/label-element-with-hidden-control.html: Added.  

2011-07-19  David Kilzer  <ddkilzer@apple.com>

        Don't install generate-inspector-html-with-extras into WebCore.framework bundle

        Reviewed by Scott Grant.

        * WebCore.xcodeproj/project.pbxproj: Removed
        generate-inspector-html-with-extras from Resources.

2011-07-18  Andy Estes  <aestes@apple.com>

        Reviewed by Simon Fraser.

        <rdar://problem/9019888> Telluride: Solar Walk is missing text
        
        Add a runtime application check for Solar Walk.

        * WebCore.exp.in:
        * platform/RuntimeApplicationChecksIPhone.h:
        * platform/RuntimeApplicationChecksIPhone.mm:
        (WebCore::applicationIsSolarWalk):

2011-07-18  Dean Jackson  <dino@apple.com>

        <rdar://problem/9794233> Media settings on UIWebView propagate to the Frame not the View

        Merge WebKit ToT r91232.

        HTMLMediaElement now checks the new public setting, which has a slightly
        different name than when it was only in the iPhone branch.

    2011-07-18  Dean Jackson  <dino@apple.com>

            https://bugs.webkit.org/show_bug.cgi?id=64742
            Expose WebPreferences for media playback requiring user gestures and inline playback

            Reviewed by Simon Fraser.

            Media playback already tested if it should require user gestures, but
            no setting was ever exposed to clients. Also, some ports only allow media
            playback to be fullscreen, so exposing a new setting for them.

            * html/HTMLMediaElement.cpp:
            (WebCore::HTMLMediaElement::HTMLMediaElement): Examine the new Setting
            for user gestures.
            * page/Settings.cpp:
            (WebCore::Settings::Settings):
            * page/Settings.h: Two new settings.
            (WebCore::Settings::setMediaPlaybackRequiresUserGesture):
            (WebCore::Settings::mediaPlaybackRequiresUserGesture):
            (WebCore::Settings::setMediaPlaybackAllowsInline):
            (WebCore::Settings::mediaPlaybackAllowsInline):

2011-07-18  Adele Peterson  <adele@apple.com>

        Reviewed by Simon Fraser.

        Rolling this back in, after further testing.

        WebCore part of fix for <rdar://problem/9566890> REGRESSION: Caret doesn't update when scrolling <textarea>

        * loader/EmptyClients.h:
        (WebCore::EmptyChromeClient::didStartOverflowScroll): Added empty implementation.
        (WebCore::EmptyChromeClient::didEndOverflowScroll): ditto.
        * page/ChromeClient.h:
        * platform/ScrollableArea.h:
        (WebCore::ScrollableArea::didStartScroll): Added.
        (WebCore::ScrollableArea::didEndScroll): Added.
        (WebCore::ScrollableArea::didUpdateScroll): Added.
        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::didStartScroll): Calls through ChromeClient to UIKit to hide the callout bar if necessary.
        (WebCore::RenderLayer::didEndScroll): Calls through ChromeClient to UIKit to show the callout bar if necessary.
        (WebCore::RenderLayer::didUpdateScroll): Calls through ChromeClient to UIKit, using the didLayout notification, which is how selection gets updated.
        * rendering/RenderLayer.h:

        * platform/iphone/ScrollAnimatorIPhone.mm: (WebCore::ScrollAnimatorIPhone::handleTouchEvent):
        Call didStartScroll and didEndScroll to hide and show the callout bar during unaccelerated scrolling.
        Once scrolling has started, call didUpdateScroll if the touch event is handled and a scroll occurs.

2011-07-18  Paul Knight  <pknight@apple.com>

        Reviewed by Simon Fraser.

        <rdar://problem/9318914> Touch handlers on the window, with no other handlers, don't work at all

        Test: platform/iphone-simulator/iphone/touch/touch-handler-on-window.html

        * dom/DocumentIPhone.cpp:
        (WebCore::Document::getTouchRects): If the window has registered touch
            event listeners, add an infite rect since the whole window will
            respond to events.
        * page/DOMWindow.cpp: Add a new member variable that counts the number
            of registered touch event handlers on the window.
        (WebCore::DOMWindow::DOMWindow): Clear the count.
        (WebCore::DOMWindow::addEventListener): If we add a touch event
            listener, increment the count.
        (WebCore::DOMWindow::removeEventListener): If we remove a touch event
            listener, decrement the count.
        (WebCore::DOMWindow::removeAllEventListeners): Clear the count.
        * page/DOMWindow.h:
        (WebCore::DOMWindow::hasTouchEventListeners): Return true if the
            window has any registered touch event listeners.
        * page/iphone/EventHandlerIPhoneTouch.cpp:
        (WebCore::EventHandler::handleTouchEvent): If the window has touch
            event listeners, always dispatch the touch event.

2011-07-18  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/9223956> REGRESSION (Durango-Telluride): "Inside nytimes.com" layer is blurrier than other content (9A177)

        Reviewed by Oliver Hunt.

        I noticed a few sites where CA's backing store was still a pixel smaller than
        that which WebCore requires to avoid scaling, and thence blurriness. Tweak
        the epsilon to fix this.

        * platform/graphics/ca/GraphicsLayerCA.cpp:
        (WebCore::GraphicsLayerCA::computePixelAlignment):

2011-07-18  Ian Henderson  <ianh@apple.com>

        Reviewed by Antti Koivisto.

        <rdar://problem/9788006> TileLayerPool shouldn't use WebCore timers

        Instead of using a WebCore timer, continue pruning tiles using
        dispatch_after.  Add a schedulePrune() method to mark the layer pool
        as needing a prune -- if no dispatch_after is in flight, schedule
        pruning for one second in the future.

        Also, whenever we would call prune(), e.g. after adding a layer or
        changing the pool capacity, instead call schedulePrune().  This means
        the layer pool can grow to an arbitrary size before prune() is
        actually invoked, which may sound a bit scary.  All these layers are
        purgeable, however, so the system can reclaim them if we're really in
        a tight spot.  And there's an advantage to doing it this way--

        In general, the pool currently works best in this situation:
        ADD LAYER
        REMOVE LAYER
        ADD LAYER
        REMOVE LAYER
        ADD LAYER
        REMOVE LAYER

        But can drop layers too eagerly in this situation, since we prune
        after each layer is added:
        ADD LAYER
        ADD LAYER
        ADD LAYER
        REMOVE LAYER
        REMOVE LAYER
        REMOVE LAYER

        If we let the pool grow momentarily, we can get through this latter
        situation without dropping any layers (and without allocating any new
        layers when we try to remove a layer from an empty pool).

        This clearly benefits zooming, since we throw out all the old tiles
        before creating new ones.  Also, during zooming, if we prune while
        throwing out the old tiles, we have no knowledge of what layer sizes
        we'll need at the new zoom level, and may end up throwing away layers
        we could have reused.  Coalescing the prunes after a delay means
        m_sizesInPruneOrder will be more up-to-date during prune().

        I tested on both N81 and K48 with heavy scrolling, zooming and
        rotating.  At no point did MobileSafari jetsam or even receive a
        memory warning.

        * platform/iphone/TileLayerPool.h:
        * platform/iphone/TileLayerPool.mm:
        (WebCore::TileLayerPool::TileLayerPool):
        (WebCore::TileLayerPool::addLayer): Instead of firing a timer, call
        schedulePrune().
        (WebCore::TileLayerPool::setCapacity): Call schedulePrune() instead of
        prune(), and only if the capacity decreases.
        (WebCore::TileLayerPool::schedulePrune):
        (WebCore::TileLayerPool::prune): If the capacity is decaying, call
        schedulePrune to queue another call to prune() in one second.

2011-07-18  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Kilzer.

        <rdar://problem/9786965> Remote Inspector: WebKit should generate html for the minor changes

        The changes for a remote frontend that works over XPC and not HTTP (Web Sockets)
        are minor. The web content for these changes should be included in the WebCore
        framework so that Desktop Applications don't need to bundle the web content with
        the app, but they can use the inspector resources already in the Simulator SDK.

        * WebCore.xcodeproj/project.pbxproj:
        * inspector/generate-inspector-html-with-extras: Added.
        Restore the Build Phase and Generator scripts previously
        used for the on-device "Lite" Web Inspector. They were
        removed in r1020244 but are useful again.

        * inspector/front-end/iphone/remote.js: Added.
        These are the changes needed to the inspector front-end to
        use a Fake WebSocket like object, "window.webInspectorSocket"
        injected into the page by the containing Desktop Application.
        Further the desktop application sends messages back into
        the page through "window.webInspectorSocketOnMessage".

2011-07-18  Antti Koivisto  <antti@apple.com>

        Reviewed by Ian Henderson and Joe Pecoraro.

        <rdar://problem/9464193> MobileSafari briefly zooms in when navigating to a new page (N88)

        Fix a number of related problems that make transitions to and from back-forward cached pages ugly.

        - In WebCore, ensure that load commit delegate is invoked before viewport change delegate on page cache restore.
          This would cause the source page visually jump to the scroll position of the target page before target page
          was switched in.
        - In UIKit, reset _hasScrollPoint early in didCommitLoadForFrame. Before we would end up dispatching restoreStateFromHistoryItem
          synchronously within that same function, receiving a new scroll point and then resetting _hasScrollPoint. As a result we would
          ignore the scrollpoint. The scroll point would eventually get set correctly anyway but we would first render 
          the target document to (0, 0), then jump to the correct position.
        - In UIKit, create tiles synchornously in _resetForNewPage if the document scale differs from the previous document. Otherwise
          we get visible scale change on old document before the new document pops in.

        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::commitProvisionalLoad):
        * page/Chrome.cpp:
        (WebCore::Chrome::Chrome):
        (WebCore::Chrome::dispatchViewportDataDidChange):
        * page/Chrome.h:
        (WebCore::Chrome::setDispatchViewportDataDidChangeSuppressed):

2011-07-17  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/9132676> REGRESSION: Fixed position element on facebook looks blurry

        Reviewed by Antti Koivisto.

        When adjusting the positions of fixed-position layers, make sure we do
        the same math that GraphicsLayerCA does, and take pixel alignment into
        account. Since pixel alignment can change as a result of scale or geometry
        changes, we may have to send new values over to WebKit at the end of
        flushPendingLayerChanges().
        
        Fixed position data are stored now as floats, and we pass pixel alignment out to
        WebKit.

        * WebCore.exp.in: WebKit needs FloatSize::operator CGSize() const
        * page/ChromeClient.h: addOrUpdateFixedPositionLayer() signature changed.
        * loader/EmptyClients.h: Ditto.
        (WebCore::EmptyChromeClient::addOrUpdateFixedPositionLayer):
        
        * platform/graphics/GraphicsLayer.h:
        (WebCore::GraphicsLayer::pixelAlignmentOffset): New method.
        * platform/graphics/ca/GraphicsLayerCA.cpp:
        (WebCore::GraphicsLayerCA::updateGeometry): Save the pixel alignment. The data
        member was already present (but unused).
        * platform/graphics/ca/GraphicsLayerCA.h:
        (WebCore::GraphicsLayerCA::pixelAlignmentOffset): Override to return the alignment.
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::flushPendingLayerChanges): If any properties changed
        on a fixed position layer, add that layer to a hash set.
        (WebCore::RenderLayerCompositor::didFlushChangesForLayer): Note that will need to update
        the fixed position data for this layer.
        (WebCore::RenderLayerCompositor::platformLayerChanged): getFixedPositionLayerSizing() now
        returns more data, which we send through the ChromeClient.
        (WebCore::RenderLayerCompositor::getFixedPositionLayerSizing): Rather than using
        RenderLayerBacking::compositedBounds(), go to the GraphicsLayer directly. Compute offset
        of fixed layer, and get its bounds to send over to WebKit.
        (WebCore::RenderLayerCompositor::registerOrUpdateFixedPositionLayer): Send more data
        over via ChromeClient.
        * rendering/RenderLayerCompositor.h: New HashSet m_fixedPositionLayersNeedingUpdate.

2011-07-16  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/9223956> REGRESSION (Durango-Telluride): "Inside nytimes.com" layer is blurrier than other content (9A177)

        Followup fix; correct function signature to match WebKit OpenSource.

        * platform/graphics/GraphicsLayerClient.h:
        (WebCore::GraphicsLayerClient::didCommitChangesForLayer):

2011-07-16  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/9223956> REGRESSION (Durango-Telluride): "Inside nytimes.com" layer is blurrier than other content (9A177)

        Merge WebKit ToT r91161.

    2011-07-16  Simon Fraser  <simon.fraser@apple.com>
    
            Add code to attempt to align compositing layers to pixel boundaries when page scale changes
            https://bugs.webkit.org/show_bug.cgi?id=64658
    
            Reviewed by Dan Bernstein.
            
            Implemented a new behavior on GraphicsLayerCA which attempts to keep layers pixel
            aligned as page scale changes.
            
            This requires denoting which layer has the page scale on it (it is assumed to be
            already aligned), via setAppliesPageScale(). We also now pass a scale and offset
            down through the GraphicsLayer commits, which are used to map layer bounds to display
            coordinates for rounding.
    
            * platform/graphics/GraphicsLayer.h: New flags and getters/setters for pixel alignment,
            and the layer that is the applier of the scale.
            (WebCore::GraphicsLayer::setMaintainsPixelAlignment):
            (WebCore::GraphicsLayer::maintainsPixelAlignment):
            (WebCore::GraphicsLayer::setAppliesPageScale):
            (WebCore::GraphicsLayer::appliesPageScale):
    
            * platform/graphics/GraphicsLayer.cpp:
            (WebCore::GraphicsLayer::GraphicsLayer): Initialize the new flags.
            (WebCore::GraphicsLayer::backingScaleFactor): Utility method that calls the client if there is one.
            (WebCore::GraphicsLayer::pageScaleFactor): Ditto.
    
            * platform/graphics/GraphicsLayerClient.h:
            (WebCore::GraphicsLayerClient::backingScaleFactor): Provide default implementation.
            (WebCore::GraphicsLayerClient::pageScaleFactor): Ditto.
    
            * platform/graphics/ca/GraphicsLayerCA.h: Pass scale and base-relative offset around
            to methods that need to update geometry during commit.
            Some new methods related to pixel alignment.
            
            * platform/graphics/ca/GraphicsLayerCA.cpp:
            (WebCore::GraphicsLayerCA::computePositionRelativeToBase): For single-layer commits,
            we have to compute the base-relative offset, and whether we're under the layer
            applying the scale by walking up the tree.
            
            (WebCore::GraphicsLayerCA::syncCompositingStateForThisLayerOnly): Call
            computePositionRelativeToBase() to get scaling parameters for the target layer.
            
            (WebCore::GraphicsLayerCA::recursiveCommitChanges): Pass flags related to scaling.
            positionRelativeToBase is an offset relative to the ancestor layer known to be pixel
            aligned. affectedByPageScale is true for layers which are descendants of the layer
            which applies the scale.
            
            (WebCore::GraphicsLayerCA::commitLayerChangesBeforeSublayers): Pass scale and offset.
            (WebCore::GraphicsLayerCA::updateGeometry): Call computePixelAlignment() to get
            pixel-aligned geometry. This only needs to be applied to layers which render content,
            so re-organize the code to use the unchanged layer geometry for the structural layer,
            but to apply the adjusted geometry to the m_layer.
            
            (WebCore::GraphicsLayerCA::updateStructuralLayer): Pass scale and offset.
            (WebCore::GraphicsLayerCA::ensureStructuralLayer): Ditto.
            (WebCore::GraphicsLayerCA::updateLayerDrawsContent): Ditto.
            (WebCore::GraphicsLayerCA::updateContentsScale): Ditto.
            (WebCore::GraphicsLayerCA::requiresTiledLayer): Ditto.
            (WebCore::GraphicsLayerCA::swapFromOrToTiledLayer): Ditto.
            (WebCore::GraphicsLayerCA::setKeepPixelAligned): When set, dirties flags
            for properties that need to be recomputed.
            (WebCore::GraphicsLayerCA::noteChangesForScaleSensitiveProperties):
            (WebCore::isIntegral):
            (WebCore::GraphicsLayerCA::computePixelAlignment): Map our bounds to screen
            scale, round out to an integral rect, then map it back, adding a fudge factor
            so that CA backing stores don't end up being smaller than we expect because
            of integer truncation.
    
            * rendering/RenderLayerBacking.cpp:
            (WebCore::RenderLayerBacking::createGraphicsLayer): Turn on pixel alignment if
            the compositor says so.
            (WebCore::RenderLayerBacking::createPrimaryGraphicsLayer): Set the RenderView's
            layer as the one applying the scale, for the main frame.
    
            * rendering/RenderLayerCompositor.h: New method.
            * rendering/RenderLayerCompositor.cpp:
            (WebCore::RenderLayerCompositor::keepLayersPixelAligned): Master switch for
            pixel alignment. Default to on.
            (WebCore::RenderLayerCompositor::ensureRootLayer): Give the two root-ish layers
            a client so they can ask for page scale if necessary.

        iOS changes:
        (WebCore::RenderLayerBacking::createPrimaryGraphicsLayer):
        (WebCore::RenderLayerCompositor::ensureRootLayer): Call setAppliesPageScale() for
        our root layer, rather than the RenderView's layer.

2011-07-16  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/9789056> Clean up PlatformCALayer::setPositionOnMainThread() and friends

        Clean up *OnMainThread methods on PlatformCALayer to use dispatch_async,
        which avoids the need for *WithValue methods. Add a new one for setting
        the anchor point, which is needed for <rdar://problem/9223956>.

        * platform/graphics/ca/PlatformCALayer.h:
        * platform/graphics/ca/mac/PlatformCALayerMac.mm:
        (PlatformCALayer::setBoundsOnMainThread):
        (PlatformCALayer::setPositionOnMainThread):
        (PlatformCALayer::setAnchorPointOnMainThread):

2011-07-16  Simon Fraser  <simon.fraser@apple.com>

    Prerequisite for
    <rdar://problem/9223956> REGRESSION (Durango-Telluride): "Inside nytimes.com" layer is blurrier than other content (9A177)

    Merge WebKit ToT r91137, r91140.

    2011-07-15  Simon Fraser  <simon.fraser@apple.com>
    
            Have GraphicsLayer pull their contentsScale, rather than pushing it onto them
            https://bugs.webkit.org/show_bug.cgi?id=64643
    
            Reviewed by Darin Adler.
    
            RenderLayerBacking would set the contentsScale on GraphicsLayers
            on creation, and update it when the pageScaleFactor changed. However,
            RenderLayerBacking doesn't really know what contentsScale is best
            for a layer, so instead, have GraphicsLayers call back through the
            GraphicsLayerClient to get the two relevant scale factors, and do
            their own computation of contentsScale.
    
            No testable behavior changes.
    
            * page/Frame.cpp:
            (WebCore::Frame::pageScaleFactorChanged): No need to pass the scale.
    
            * platform/graphics/GraphicsLayer.cpp:
            (WebCore::GraphicsLayer::notePageScaleFactorChangedIncludingDescendants):
            Recurse through the GraphicsLayer tree, calling pageScaleFactorChanged() on 
            each layer.
    
            * platform/graphics/GraphicsLayer.h:
            (WebCore::GraphicsLayer::pageScaleFactorChanged):
            Remove contentsScale/setContentsScale
            
            * platform/graphics/GraphicsLayerClient.h:
            Add methods to fetch the backingScaleFactor() and pageScaleFactor().
            
            * platform/graphics/ca/GraphicsLayerCA.cpp:
            (WebCore::GraphicsLayerCA::GraphicsLayerCA): m_uncommittedChanges
            defaults to ContentsScaleChanged so we update contentsScale on
            the first flush.
            
            (WebCore::GraphicsLayerCA::setContentsToBackgroundColor):
            This was the wrong time to call updateContentsRect() and setupContentsLayer();
            those should be done at commit time, so moved to updateLayerBackgroundColor().
            (WebCore::GraphicsLayerCA::recursiveCommitChanges): Note whether we
            have any changes, and call didCommitChangesForLayer() on the client.
            (WebCore::GraphicsLayerCA::updateLayerBackgroundColor): Code moved to here.
            (WebCore::clampedContentsScaleForScale): No longer has any hysteresis
            on the scale, and now just clamps.
            (WebCore::GraphicsLayerCA::updateContentsScale): Fetch the scales
            from the client, and multiply them, then clamp.
            (WebCore::GraphicsLayerCA::requiresTiledLayer): This now takes
            contentsScale into account when deciding to use tiled layer,
            so that zooming in will cause layers to start tiling.
            (WebCore::GraphicsLayerCA::swapFromOrToTiledLayer): Don't call
            setContentsScale(), but rather updateContentsScale().
            (WebCore::GraphicsLayerCA::pageScaleFactorChanged): Set the bits
            for properties that depend on the scale.
            (WebCore::GraphicsLayerCA::noteChangesForScaleSensitiveProperties):
            Note that contentsScale needs to be updated. At some point we might also
            need to dirty other properties.
            * platform/graphics/ca/GraphicsLayerCA.h: Moved the m_allowTiledLayer
            bool for better packing. No need for a m_contentsScale member now.
            * rendering/RenderLayer.cpp: Removed pageScaleFactorChanged().
            * rendering/RenderLayer.h: Ditto.
            * rendering/RenderLayerBacking.cpp:
            (WebCore::RenderLayerBacking::createPrimaryGraphicsLayer): No need
            to push the contents scale.
            (WebCore::RenderLayerBacking::updateForegroundLayer): Ditto.
            (WebCore::RenderLayerBacking::updateMaskLayer): Ditto.
            (WebCore::RenderLayerBacking::pageScaleFactor): GraphicsLayerClient method.
            (WebCore::RenderLayerBacking::backingScaleFactor): GraphicsLayerClient method.
            (WebCore::RenderLayerBacking::didCommitChangesForLayer): Send through
            to the compositor.
            * rendering/RenderLayerBacking.h: GraphicsLayerClient methods.
            * rendering/RenderLayerCompositor.cpp:
            (WebCore::RenderLayerCompositor::didFlushChangesForLayer): We'll use
            this later.
            (WebCore::RenderLayerCompositor::backingScaleFactor): GraphicsLayerClient method.
            (WebCore::RenderLayerCompositor::pageScaleFactor): Ditto.
            (WebCore::RenderLayerCompositor::didCommitChangesForLayer): Ditto.
            (WebCore::RenderLayerCompositor::ensureRootLayer): No need to push the contents scale.
            (WebCore::RenderLayerCompositor::pageScaleFactorChanged): Just call notePageScaleFactorChangedIncludingDescendants()
            on the root GraphicsLayer.
            * rendering/RenderLayerCompositor.h: Added GraphicsLayerClient methods.

2011-07-16  Simon Fraser  <simon.fraser@apple.com>

        Prerequisite for
        <rdar://problem/9223956> REGRESSION (Durango-Telluride): "Inside nytimes.com" layer is blurrier than other content (9A177)
    
        Merge WebKit ToT r90954, r90959.

    2011-07-13  Simon Fraser  <simon.fraser@apple.com>
    
            Factor some GraphicsLayer creation code in RenderLayerBacking
            https://bugs.webkit.org/show_bug.cgi?id=64487
    
            Reviewed by Sam Weinig.
    
            Move the GraphicsLayer::create() calls into once place so that we
            don't have lots of #ifndef NDEBUG in various places, and can share
            more code in future.
            
            No behavior change, so no new tests.
    
            * rendering/RenderLayerBacking.cpp:
            (WebCore::RenderLayerBacking::RenderLayerBacking):
            (WebCore::RenderLayerBacking::~RenderLayerBacking):
            (WebCore::RenderLayerBacking::createGraphicsLayer):
            (WebCore::RenderLayerBacking::createPrimaryGraphicsLayer):
            (WebCore::RenderLayerBacking::destroyGraphicsLayers):
            (WebCore::RenderLayerBacking::updateLayerTransform):
            (WebCore::RenderLayerBacking::updateClippingLayers):
            (WebCore::RenderLayerBacking::updateOverflowControlsLayers):
            (WebCore::RenderLayerBacking::updateForegroundLayer):
            (WebCore::RenderLayerBacking::updateMaskLayer):
            * rendering/RenderLayerBacking.h:
    
        * page/Frame.cpp:
        (WebCore::Frame::pageScaleFactorChanged): Add assertion that this is never
        reached on iOS, since the scale it passes ignores the device scale factor.

2011-07-16  Simon Fraser  <simon.fraser@apple.com>

        Prerequisite for
        <rdar://problem/9223956> REGRESSION (Durango-Telluride): "Inside nytimes.com" layer is blurrier than other content (9A177)
    
        Merge WebKit ToT r90925.

    2011-07-12  Simon Fraser  <simon.fraser@apple.com>
    
            Rename compositing-related updateContentsScale() methods
            https://bugs.webkit.org/show_bug.cgi?id=64430
    
            Reviewed by Joseph Pecoraro.
    
            Rename updateContentsScale() to something less presumptuous; layers may choose
            to do something other than update their contents scale when the page scale factor
            changes. pageScaleFactorChanged() is a better name.
    
            * page/Frame.cpp:
            (WebCore::Frame::pageScaleFactorChanged):
            (WebCore::Frame::scalePage):
            * page/Frame.h:
            * rendering/RenderLayer.cpp:
            (WebCore::RenderLayer::pageScaleFactorChanged):
            * rendering/RenderLayer.h:
            * rendering/RenderLayerBacking.cpp:
            (WebCore::RenderLayerBacking::pageScaleFactorChanged):
            * rendering/RenderLayerBacking.h:
            * rendering/RenderLayerCompositor.cpp:
            (WebCore::RenderLayerCompositor::pageScaleFactorChanged):
            * rendering/RenderLayerCompositor.h:

        * page/iphone/FrameIPhone.mm:
        (WebCore::Frame::documentScaleChanged):

2011-07-14  Simon Fraser  <simon.fraser@apple.com>

        Prerequisite for
        <rdar://problem/9223956> REGRESSION (Durango-Telluride): "Inside nytimes.com" layer is blurrier than other content (9A177)
        
        Merge WebKit ToT r90860.
    
    2011-07-12  Simon Fraser  <simon.fraser@apple.com>
    
            Clean up some RenderLayerCompositor code relating to scroll and root layers
            https://bugs.webkit.org/show_bug.cgi?id=64400
    
            Reviewed by James Robinson.
    
            There was no need for FrameView::syncCompositingStateForThisFrame()
            to call syncCompositingStateForThisLayerOnly() on the various
            scrollbar-related layers, because the subsequent call to 
            compositor()->flushPendingLayerChanges() starts to flush at
            m_overflowControlsHostLayer if one exists, and it's an ancestor
            of the scrollbar layers.
            
            Also clean up terminology in RenderLayerCompositor.
                m_rootPlatformLayer -> m_rootContentLayer
                rootPlatformLayer() -> rootGraphicsLayer()
            
            No behavior change, so no new tests.
            
            * page/FrameView.cpp:
            (WebCore::FrameView::syncCompositingStateForThisFrame):
            * rendering/RenderLayerCompositor.cpp:
            (WebCore::RenderLayerCompositor::enableCompositingMode):
            (WebCore::RenderLayerCompositor::flushPendingLayerChanges):
            (WebCore::RenderLayerCompositor::updateCompositingLayers):
            (WebCore::RenderLayerCompositor::layerTreeAsText):
            (WebCore::RenderLayerCompositor::parentFrameContentLayers):
            (WebCore::RenderLayerCompositor::rootGraphicsLayer):
            (WebCore::RenderLayerCompositor::didMoveOnscreen):
            (WebCore::RenderLayerCompositor::willMoveOffscreen):
            (WebCore::RenderLayerCompositor::updateRootLayerPosition):
            (WebCore::RenderLayerCompositor::ensureRootLayer):
            (WebCore::RenderLayerCompositor::destroyRootLayer):
            (WebCore::RenderLayerCompositor::attachRootLayer):
            (WebCore::RenderLayerCompositor::detachRootLayer):
            (WebCore::RenderLayerCompositor::updateRootLayerAttachment):
            * rendering/RenderLayerCompositor.h:

2011-07-16  Enrica Casucci  <enrica@apple.com>

        <rdar://problem/9737491> Hitting "return" from English keyboard in notes doesn't enter return

        Merged ToT r91158

    2011-07-16  Enrica Casucci  <enrica@apple.com>

        REGRESSION: Pressing return in a particular document sends the cursor to the end of the document.
        https://bugs.webkit.org/show_bug.cgi?id=64140
        <rdar://problem/9737491>

        Inserting a paragraph separator at a break element, inside an inline, generates redundant markup
        and moves the selection at the end of the inserted block.
        The fix consists in detecting that the insertion point is a break element and simply inserting another
        break element. This solves the problem of the wrong final selection and also produces less redundant
        markup.

        Reviewed by Simon Fraser.

        Test: editing/inserting/insert-paragraph-separator-at-break.html

        * editing/InsertParagraphSeparatorCommand.cpp:
        (WebCore::InsertParagraphSeparatorCommand::doApply): Modified logic for insertion at a break
        element.

2011-07-16  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/9754425> Crashes in WebCore::SubresourceLoader::didReceiveDataArray

        Merged ToT WebKit r91157.

    2011-07-16  Pratik Solanki  <psolanki@apple.com>

        SubresourceLoader::didReceiveDataArray can crash when calling m_client->didReceiveData()
        https://bugs.webkit.org/show_bug.cgi?id=64656
        <rdar://problem/9754425>

        Reviewed by Alexey Proskuryakov.

        * loader/cf/SubresourceLoaderCF.cpp:
        (WebCore::SubresourceLoader::didReceiveDataArray): Check for m_client before calling
        m_client->didReceiveData().

2011-07-16  Antti Koivisto  <antti@apple.com>

        Reviewed by Ian Henderson.

        <rdar://problem/9783820> Don't shrink cover rect based on memory level

        Stop shrinking the cover rect based on memory level. The overall tile count mechanism stops us from creating more 
        than allowed number of tiles so shrinking is redundant and does nothing to reduce memory use. It only makes us have
        more late popping tiles during scrolling when memory level <=15, turning the condition user visible.

        Tested on K48 and N90 under low memory conditions.

        * platform/iphone/TileGrid.mm:
        (WebCore::TileGrid::calculateCoverRect):

2011-07-16  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/9786936> ToT iOS WebCore fails to build with clang

        Reviewed by David Carson.

        * accessibility/iphone/AccessibilityObjectWrapperIPhone.mm:
        Changed "const NSString*" to "NSString * const".

2011-07-15  Andy Estes  <aestes@apple.com>

        Merge ToT r91134.

    2011-07-15  Andy Estes  <aestes@apple.com>

            Rename applicationIsSolarWalk() to applicationIsSolarWalkMac().
            https://bugs.webkit.org/show_bug.cgi?id=64641

            Reviewed by Brian Weinstein.

            * WebCore.exp.in: Update to new symbol.
            * platform/RuntimeApplicationChecks.cpp:
            (WebCore::applicationIsSolarWalkMac): Renamed from applicationIsSolarWalk.
            * platform/RuntimeApplicationChecks.h: Ditto.

2011-07-15  Sam Weinig  <sam@webkit.org>

        Reviewed by Enrica Cassuci and Justin Garcia.

        <rdar://problem/9109065> Remove blue dictation underline if the user types inside it

        * editing/Editor.cpp:
        (WebCore::Editor::updateMarkersForWordsAffectedByEditing):
        Also remove dictation underlines when updating markers affected by editing.

2011-07-15  Chris Fleizach  <cfleizach@apple.com>

        Reviewed by Joseph Pecoraro.

        <rdar://problem/9700947> ASSERTION FAILED: [parentView accessibilityContainer] hit in accessibility/centerpoint.html test case

        The ASSERT for checking whether there is a connection to a UIKit containing view is not always valid in DRT, because the containing
        view may not be there.
         
        * accessibility/iphone/AccessibilityObjectWrapperIPhone.mm:
        (-[AccessibilityObjectWrapper _accessibilityWebDocumentView]):

2011-07-15  Ian Henderson  <ianh@apple.com>

        <rdar://problem/9326550> Panning while zoomed-in on iPad 2 Features page is jerkier than Durango

        Merge ToT r91090.

    2011-07-15  Ian Henderson  <ianh@apple.com>

            Avoid rounded rect corner-drawing overhead if no corners are visible
            https://bugs.webkit.org/show_bug.cgi?id=64584

            Reviewed by Simon Fraser.

            No new tests, rendering is visually identical.

            * rendering/InlineFlowBox.cpp:
            (WebCore::InlineFlowBox::paintBoxDecorations): Pass PaintInfo into
            paintBorder.
            * rendering/RenderBox.cpp:
            (WebCore::RenderBox::paintBoxDecorations): Ditto.
            * rendering/RenderBoxModelObject.cpp:
            (WebCore::unroundClippedCorners):
            (WebCore::RenderBoxModelObject::paintBorder):
            Any invisible corner may be replaced with a corner of radius zero, as
            long as the stroke style is solid.  Change the GraphicsContext
            parameter into a PaintInfo parameter so we can get the rect to be
            drawn.
            * rendering/RenderBoxModelObject.h:
            * rendering/RenderFieldset.cpp:
            (WebCore::RenderFieldset::paintBoxDecorations): Pass PaintInfo into
            paintBorder.
            * rendering/RenderTable.cpp:
            (WebCore::RenderTable::paintBoxDecorations): Ditto.
            * rendering/RenderTableCell.cpp:
            (WebCore::RenderTableCell::paintBoxDecorations): Ditto.

2011-07-15  Enrica Casucci  <enrica@apple.com>

        Reviewed by Justin Garcia.

        <rdar://problem/9746392> Copying text from CNN videos page destroys line spacing in notes.
        <rdar://problem/9702793> Between 9A254->9A255: paste: replaces Message's UITextContentView's backing WebView's <body> node?

        This patch fixes a regression introduced with the fix for <rdar://problem/9505785>.
        The list of the supported pasteboard types should be generated by the client, except
        when the client has no selection. This happens when the selection has been set only
        programmatically and is not reflected in the client.
        This change restores the client call to retrieve the supported types and uses WebKit supported
        types only when the client returns an empty list.

        * loader/EmptyClients.h:
        (WebCore::EmptyEditorClient::supportedPasteboardTypesForCurrentSelection): Added client method.
        * page/EditorClient.h:
        * platform/iphone/PasteboardIPhone.mm:
        (WebCore::Pasteboard::documentFragmentForPasteboardItemAtIndex): Added logic to default to
        WebKit supported types when the client retunrs an empty list.

2011-07-14  Antti Koivisto  <antti@apple.com>

        Reviewed by Pratik Solanki.

        <rdar://problem/9691871> MobileSafari is requesting CSS resources late

        Initialize pipelining priorities early. CFNetwork does not allow changing these after
        first request is made in the process.

        Verified that the additional code in WebKitInitilize does not show up in startup profile.

        * WebCore.exp.in:
        * platform/network/ResourceRequestBase.h:
        * platform/network/cf/ResourceRequestCFNet.cpp:
        (WebCore::initializeHTTPConnectionSettingsOnStartup):

2011-07-14  Enrica Casucci  <enrica@apple.com>

        Reviewed by Justin Garcia.

        <rdar://problem/9569852> devforums.apple.com contenteditable form is hard to focus.

        When approximating a node in editable content, we must call rootEditableElement().
        The previous version was climbing the node hierarchy looking for the mouse focusable
        node that did not produce the correct result when the initial node was an editable html element
        inside a non editable iframe.

        * page/iphone/FrameIPhone.mm:
        (WebCore::Frame::qualifyingNodeAtViewportLocation): Replaced the loop with the call
        to rootEditableElement().

2011-07-14  Chris Fleizach  <cfleizach@apple.com>

        Reviewed by Justin Garcia.

        <rdar://problem/9622320> AX: VoiceOver: Selection doesn't start at right place after moving by words through a block of text

        Add a method to allow VoiceOver to set the selection to where it wants. This allows VoiceOver to navigate within a block
        of text and start selection at the correct place.

        * accessibility/iphone/AccessibilityObjectWrapperIPhone.mm:
        (-[AccessibilityObjectWrapper accessibilityModifySelection:increase:]):
        (-[AccessibilityObjectWrapper accessibilityMoveSelectionToMarker:]):
        (-[AccessibilityObjectWrapper elementsForRange:]):
            Fix a spacing issue.

2011-07-14  Andy Estes  <aestes@apple.com>

        Reviewed by Ian Henderson.

        <rdar://problem/9714414> MobileSafari: _preferencesChangedNotification
        collectively takes over 25ms at start up in N90.

        When WebKit needs to call a routine that must execute on the web
        thread, it invokes WebThreadRun(). This method adds the invocation to a
        queue that is processed by an input source on the web thread's
        CFRunLoop. In Telluride, this input source is initialized and added to
        the run loop lazily on the first call to WebThreadRun().

        The call adding this source to the run loop - CFRunLoopAddSource() -
        takes a lock on the CFRunLoop passed to it as an argument. Due to the
        lazy initialization, a non-web thread can end up calling
        CFRunLoopAddSource() after the web thread has already spun up, creating
        the potential for it to block if the web thread happens to already be
        holding a lock on it's CFRunLoop. This lock contention is responsible
        for the increase in wall clock time while executing
        +[WebView _preferencesChangedNotification:], and perhaps other methods
        that forward invocations to the web thread.

        The solution to this lock contention is to eagerly initialize the web
        thread's input source at the same time we create the thread and its run
        loop. Since this will happen on the web thread before it enters its
        main event loop, there will be no lock contention.

        I measure an ~76% speedup on K94 and a ~26% speedup on N88 in the
        cumulative wall time of +[WebView _preferencesChangedNotification:] and
        -[WebView _preferencesChangedNotification:] during WebView
        initialization. The measurements in <rdar://problem/9714414> were taken
        on an N90, but unfortunately I don't have a development N90 with which
        to test.

        * wak/WebCoreThread.mm:
        (RunWebThread): Initialized the web thread's run loop input source.
        * wak/WebCoreThreadInternal.h: Added declaration of
        WebThreadInitRunQueue().
        * wak/WebCoreThreadRun.cpp: Removed the lazy initialization of the web
        thread's run loop input source that happened on the first call to
        _WebThreadRun().

2011-07-14  Antti Koivisto  <antti@apple.com>

        Reviewed by David Carson.

        <rdar://problem/9775157> Mail is crashing often in 9A270

        If someone managed to trigger a layout when a newly created frame was in InitialEmptyDocument state,
        we would end up dispatching didFirstVisuallyNonEmptyLayout.

        UIKit side couldn't handle didFirstVisuallyNonEmptyLayout happening before didCommitLoadForFrame.

        Fix by sending didFirstVisuallyNonEmptyLayout only for real documents.

        Verified the fix both on device and in the debugger.

        * page/FrameView.cpp:
        (WebCore::FrameView::performPostLayoutTasks):

2011-07-14  Chris Fleizach  <cfleizach@apple.com>

        Reviewed by Justin Garcia.

        <rdar://problem/9720612> AX: Support ability to retrieve attributed strings for text

        Expose attributes of text to the iOS AX API. Most of the code is taken from the Mac AX wrapper.

        * accessibility/iphone/AccessibilityObjectWrapperIPhone.mm:
        (blockquoteLevel):
        (AXAttributeStringSetBlockquoteLevel):
        (AXAttributeStringSetHeadingLevel):
        (AXAttributeStringSetFont):
        (AXAttributeStringSetNumber):
        (AXAttributeStringSetStyle):
        (AXAttributedStringAppendText):
        (-[AccessibilityObjectWrapper arrayOfTextForTextMarkers:attributed:]):
        (-[AccessibilityObjectWrapper _stringForRange:attributed:]):
        (-[AccessibilityObjectWrapper stringForRange:]):
        (-[AccessibilityObjectWrapper attributedStringForRange:]):
        (-[AccessibilityObjectWrapper elementsForRange:]):

2011-07-13  Joseph Pecoraro  <joepeck@webkit.org>

        <rdar://problem/9414829> Cannot continue appcache downloading after increasing the quota

        Merged ToT WebKit r90856 and r90947.

    2011-07-12  Joseph Pecoraro  <joepeck@webkit.org>

            ApplicationCache update should not immediately fail when reaching per-origin quota
            https://bugs.webkit.org/show_bug.cgi?id=64177

            Reviewed by Alexey Proskuryakov.

            New behavior of handling ApplicationCache per-origin quotas. Previously,
            if the quota was reached while downloading we would fail the download
            and then prompt the user for a storage increase. This required a refresh,
            a redownload of resources, and the total storage was not known so the
            process could be repeated multiple times before an acceptable quota
            was found or the user disallowed an increase.

            The new behavior is to complete the download of the entire appcache.
            When the cache completes downloading and it is greater than the origin
            quota, prompt the user to allow a quota increase with the known space
            needed. If the quota is increased, the cache will succeed, otherwise
            it will fail with the normal failure steps.

            An alternative behavior is prompting while downloading immediately
            when the origin quota is reached, however at that point the entire
            space needed is unknown and so quota increases might not be enough
            and could result in multiple prompts to the user.

            Tests: http/tests/appcache/origin-quota-continued-download-multiple-manifests.html
                   http/tests/appcache/origin-quota-continued-download.html

            * loader/appcache/ApplicationCacheGroup.h:
            * loader/appcache/ApplicationCacheGroup.cpp:
            (WebCore::ApplicationCacheGroup::ApplicationCacheGroup):
            Rename instance variable to be more clear on its intent.

            (WebCore::ApplicationCacheGroup::didFinishLoading):
            Check the quota limit while downloading so we can fail early
            if the user already denied a quota increase.

            (WebCore::ApplicationCacheGroup::didReachOriginQuota):
            Pass the space needed information to the chrome client.

            (WebCore::ApplicationCacheGroup::cacheUpdateFailedDueToOriginQuota):
            Removed. Instead convert the callers to update state and console
            log when the per-origin quota is reached. This allows us to follow
            the normal failure steps if the quota is reached at the end of a
            download, and the alternative short path when we fail during downloading.

            (WebCore::ApplicationCacheGroup::recalculateAvailableSpaceInQuota):
            Extract to a helper function.

            (WebCore::ApplicationCacheGroup::checkIfLoadIsComplete):
            Allow for a quota increase at the end of the download now that
            we know the space needed. Then proceed to fail or succeed
            as we normally would.

            * loader/appcache/ApplicationCacheStorage.h:
            * loader/appcache/ApplicationCacheStorage.cpp:
            (WebCore::ApplicationCacheStorage::checkOriginQuota):
            (WebCore::ApplicationCacheStorage::storeNewestCache):
            Extract checking the origin quota for when an ApplicationCacheGroup
            will be replacing an ApplicationCacheGroup into a helper function.
            The helper also provides an out parameter for the space needed
            to properly fit the new cache group if it wouldn't fit.

            * page/ChromeClient.h:
            * loader/EmptyClients.h:
            (WebCore::EmptyChromeClient::reachedApplicationCacheOriginQuota):
            Add a space needed parameter when reaching the per-origin quota.

    2011-07-13  Joseph Pecoraro  <joepeck@webkit.org>

            Some ApplicationCache Origin Cleanup
            https://bugs.webkit.org/show_bug.cgi?id=64431

            Reviewed by Alexey Proskuryakov.

            - m_loadedSize is inaccurate. This just replaces it with
            calls to ApplicationCache::estimatedSizeInStorage.

            - m_availableSpaceInQuota can get out of date, so we just
            recalculate it at the start of appcache downloads.

            * loader/appcache/ApplicationCacheGroup.h:
            * loader/appcache/ApplicationCacheGroup.cpp:
            (WebCore::ApplicationCacheGroup::ApplicationCacheGroup):
            (WebCore::ApplicationCacheGroup::didReceiveData):
            Remove references to m_loadedSize.

            (WebCore::ApplicationCacheGroup::didFinishLoading):
            Replace m_loadedSize with estimatedSizeInStorage after we
            add the new cached resource to the cache. The calculation
            already happened so this check is fast.

            (WebCore::ApplicationCacheGroup::didFinishLoadingManifest):
            When we start the Downloading phase, recalculate the quota
            so that we have an up to date quota value so that we can
            break early if needed.

2011-07-12  Joseph Pecoraro  <joepeck@webkit.org>

        <rdar://problem/9713087> CrashTracer: [USER] 6 crashes in MobileSafari at JavaScriptCore: JSC::Heap::allocate + 184

        Merged ToT WebKit r87793.

    2011-06-01  Joseph Pecoraro  <joepeck@webkit.org>

            Reviewed by Pavel Feldman.

            Web Inspector: [JSC] JSLock ASSERTs Seen Under eventListenerHandlerBody
            https://bugs.webkit.org/show_bug.cgi?id=61835

            Add a JSLock call before possible allocations in jsFunction and toString.

            * bindings/js/ScriptEventListener.cpp:
            (WebCore::eventListenerHandlerBody):

2011-07-13  Enrica Casucci  <enrica@apple.com>

        Rolling out r1050695.
        Unreviewed. 

        * ChangeLog-PEP:
        * loader/EmptyClients.h:
        (WebCore::EmptyChromeClient::didLayout):
        * page/ChromeClient.h:
        * platform/ScrollableArea.h:
        (WebCore::ScrollableArea::isOverflowScroll):
        * platform/iphone/ScrollAnimatorIPhone.mm:
        (WebCore::ScrollAnimatorIPhone::handleTouchEvent):
        * rendering/RenderLayer.cpp:
        * rendering/RenderLayer.h:

2011-07-13  Wil Turner  <wturner@apple.com>

        Reviewed by Pratik Solanki.

        <rdar://problem/9767399> CachedImageManual should never be revalidated

        CachedImageManual is an iOS-specific mechanism for clients to directly insert a 
        CGImageRef into the WebCache. Such images don't represent true network resources,
        so revalidation will always fail. This disables validation for CachedImageManual
        by making WebCore::CachedResource::mustRevalidateDueToCacheHeaders virtual in
        the iOS build and overriding it in CachedImageManual to always return false.

        * loader/cache/CachedImage.cpp:
        (WebCore::CachedImageManual::mustRevalidateDueToCacheHeaders):
        * loader/cache/CachedImage.h:
        * loader/cache/CachedResource.h:

2011-07-13  Antti Koivisto  <antti@apple.com>

        <rdar://problem/9407710> Many pages paint empty during loading

        Merged open source r90900

    2011-07-12  Antti Koivisto  <antti@apple.com>

        didFirstVisuallyNonEmptyLayout dispatched too early
        https://bugs.webkit.org/show_bug.cgi?id=64412

        Reviewed by Darin Adler and Sam Weinig.

        Improve the mechanism that dispatches didFirstVisuallyNonEmptyLayout

        - Wait until a threshold of characters and pixels has been exceeded before dispatching.
        - Wait until stylesheets are loaded (painting is disabled in this case).


        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::didFirstLayout):
        (WebCore::FrameLoader::didFirstVisuallyNonEmptyLayout):
        * page/FrameView.cpp:
        (WebCore::FrameView::reset):
        (WebCore::FrameView::performPostLayoutTasks):
        * page/FrameView.h:
        (WebCore::FrameView::incrementVisuallyNonEmptyCharacterCount):
        (WebCore::FrameView::incrementVisuallyNonEmptyPixelCount):
        * rendering/RenderImage.cpp:
        (WebCore::RenderImage::RenderImage):
        (WebCore::RenderImage::imageChanged):
        * rendering/RenderImage.h:
        * rendering/RenderText.cpp:
        (WebCore::RenderText::RenderText):

2011-07-12  Adele Peterson  <adele@apple.com>

        Build fix.

        Add empty implementations of new methods to EmptyChromeClient.

        * loader/EmptyClients.h:
        (WebCore::EmptyChromeClient::didStartOverflowScroll):
        (WebCore::EmptyChromeClient::didEndOverflowScroll):

2011-07-12  Adele Peterson  <adele@apple.com>

        Reviewed by Simon Fraser.

        WebCore part of fix for <rdar://problem/9566890> REGRESSION: Caret doesn't update when scrolling <textarea>

        * page/ChromeClient.h:
        * platform/ScrollableArea.h:
        (WebCore::ScrollableArea::didStartOverflowScroll): Added.
        (WebCore::ScrollableArea::didEndOverflowScroll): Added.
        * platform/iphone/ScrollAnimatorIPhone.mm: (WebCore::ScrollAnimatorIPhone::handleTouchEvent):
        Call didStartOverflowScroll and didEndOverflowScroll to hide and show the callout bar during unaccelerated scrolling.
        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::scrollTo): Send the didLayout notification on iOS when we scroll RenderLayers, 
        since this is how we keep selection updated.
        (WebCore::RenderLayer:: didStartOverflowScroll): Added.
        (WebCore::RenderLayer:: didEndOverflowScroll): Added.
        * rendering/RenderLayer.h:

2011-07-12  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/9753888> Implement didReceiveDataArray callback for CFNetwork based loader

        Merged ToT WebKit r90834.

    2011-07-12  Pratik Solanki  <psolanki@apple.com>

        Implement didReceiveDataArray callback for CFNetwork based loader
        https://bugs.webkit.org/show_bug.cgi?id=64130

        Reviewed by David Kilzer.

        Factor out the didReceiveDataArray code from ResourceHandleMac.mm into
        a new method ResourceHandle::handleDataArray(). Implement the callback
        in the CFNetwork loader code and call handleDataArray() to process
        incoming data.

        No new tests because the flag is not enabled for any bots.

        * platform/network/ResourceHandle.h:
        * platform/network/cf/ResourceHandleCFNet.cpp:
        (WebCore::didReceiveDataArray):
        (WebCore::ResourceHandle::createCFURLConnection):
        (WebCore::ResourceHandle::handleDataArray):
        * platform/network/mac/ResourceHandleMac.mm:
        (-[WebCoreResourceHandleAsDelegate connection:didReceiveDataArray:]):

2011-07-12  Sam Weinig  <sam@webkit.org>

        Reviewed by Joe Pecoraro.

        <rdar://problem/9760622> Crash in WebCore::Document::eventRectRelativeToRoot viewing an album on the iTunes store

        * dom/DocumentIPhone.cpp:
        (WebCore::Document::eventRectRelativeToRoot):
        Add a null check for the Node for the case that the renderer is for an
        anonymous block.

2011-07-12  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/9762358> Merge r90825 - Add NSURLResponse wrapper in ResourceResponse when USE(CFNETWORK) is enabled

        Merged ToT WebKit r90825.

    2011-07-12  Pratik Solanki  <psolanki@apple.com>

        Reviewed by David Kilzer.

        Add NSURLResponse wrapper in ResourceResponse when USE(CFNETWORK) is enabled
        https://bugs.webkit.org/show_bug.cgi?id=63286

        When USE(CFNETWORK) is enabled on Mac, keep an NSURLResponse object along with the
        CFURLResponseRef so that WebKit can continue using the NSURLResponse.

        No new tests because no change in functionality and option is not enabled on Mac.

        * platform/network/cf/ResourceResponse.h:
        (WebCore::ResourceResponse::ResourceResponse):
        * platform/network/mac/ResourceResponseMac.mm:
        (WebCore::ResourceResponse::initNSURLResponse):
        (WebCore::ResourceResponse::nsURLResponse):
        (WebCore::ResourceResponse::ResourceResponse):

2011-07-12  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/9762002> Merge r90807 - Add NSURLRequest wrapper in ResourceRequest when USE(CFNETWORK) is enabled

        Merged ToT WebKit r90807.

    2011-07-11  Pratik Solanki  <psolanki@apple.com>

        Reviewed by David Kilzer.

        Add NSURLRequest wrapper in ResourceRequest when USE(CFNETWORK) is enabled
        https://bugs.webkit.org/show_bug.cgi?id=63276

        When USE(CFNETWORK) is enabled on Mac, keep an NSURLRequest object along with the
        CFURLRequestRef so that WebKit can continue using the NSURLRequest.

        No new tests because no change in functionality and option is not enabled on Mac.

        * platform/network/cf/ResourceRequest.h:
        (WebCore::ResourceRequest::updateNSURLRequest):
        (WebCore::ResourceRequest::ResourceRequest):
        * platform/network/cf/ResourceRequestCFNet.cpp:
        (WebCore::findCFURLRequestSetContentDispositionEncodingFallbackArrayFunction):
        (WebCore::findCFURLRequestCopyContentDispositionEncodingFallbackArrayFunction):
        (WebCore::ResourceRequest::doUpdatePlatformRequest):
        (WebCore::ResourceRequest::applyWebArchiveHackForMail):
        * platform/network/mac/ResourceRequestMac.mm:
        (WebCore::ResourceRequest::nsURLRequest):
        (WebCore::ResourceRequest::ResourceRequest):
        (WebCore::ResourceRequest::updateNSURLRequest):

2011-07-12  Antti Koivisto  <antti@apple.com>

        Not reviewed.

        <rdar://problem/9752666> Shrink tile layer pool size over time

        Lock the layer pool mutex.

        * platform/iphone/TileLayerPool.mm:
        (WebCore::TileLayerPool::pruneTimerFired):

2011-07-11  Antti Koivisto  <antti@apple.com>

        Reviewed by Ian Henderson.

        <rdar://problem/9752666> Shrink tile layer pool size over time

        Make the tile pool shrink over time after last addition. This way we
        can utilize full pool size during rapid zooming and scrolling while
        keeping around less resources (IOSurfaces) in long term.

        Also halved the maximum size of the pool as it was pretty large.

        * platform/iphone/TileGridTile.mm:
        (WebCore::TileGridTile::TileGridTile):
        * platform/iphone/TileLayerPool.h:
        * platform/iphone/TileLayerPool.mm:
        (WebCore::TileLayerPool::TileLayerPool):
        (WebCore::TileLayerPool::addLayer):
        (WebCore::TileLayerPool::takeLayerWithSize): Renamed to describe the function better.
        (WebCore::TileLayerPool::decayedCapacity):
        (WebCore::TileLayerPool::prune):
        (WebCore::TileLayerPool::pruneTimerFired):

2011-07-11  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/9716643> REGRESSION (Telluride9A260): Text clipped in blog entries in Flipboard

        Merged TOT WebKit r90798.

    2011-07-11  Dan Bernstein  <mitz@apple.com>

        Excessive expansion of justified text when rounding hacks are enabled
        https://bugs.webkit.org/show_bug.cgi?id=64331

        Reviewed by Anders Carlsson.

        Test: platform/mac/fast/text/rounding-hacks-expansion.html

        When rounding hacks are enabled, the expansion at each expansion opportunity should be by an
        integer. Restored more of the logic that was removed in r78846 in order to ensure this.

        * platform/graphics/WidthIterator.cpp:
        (WebCore::WidthIterator::advance):
        * platform/graphics/mac/ComplexTextController.cpp:
        (WebCore::ComplexTextController::adjustGlyphsAndAdvances):

2011-07-11  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/9451762> no keyboard on PIN screen in USAA mobile app

        Merged WebKit ToT r90691.

    2011-07-11  Dan Bernstein  <mitz@apple.com>

            <rdar://problem/9750062> REGRESSION: Button text missing in many iTunes Store pages
            https://bugs.webkit.org/show_bug.cgi?id=64236

            Reviewed by Maciej Stachowiak.

            Test: fast/css/empty-display-none.html

            When an :empty selector caused an element to not have a renderer, the check for empty style
            change when finishing parsing the elemenet did nothing, because it could not check if the
            element’s current style was affected by :empty. The fix is to record the fact that the style
            was affected by :empty in ElementRareData in the no-renderer case.

            * dom/Element.cpp:
            (WebCore::Element::recalcStyle): Clear the m_styleAffectedByEmpty flag.
            (WebCore::checkForEmptyStyleChange): If the style is null (meaning there is no renderer), check
            Element::styleAffectedByEmpty().
            (WebCore::Element::setStyleAffectedByEmpty): Added. Sets the flag in rare data.
            (WebCore::Element::styleAffectedByEmpty): Added. Checks for the flag in rare data.
            * dom/Element.h:
            * dom/ElementRareData.h:
            (WebCore::ElementRareData::ElementRareData): Added m_styleAffectedByEmpty and initialized it
            to false.
            * dom/NodeRenderingContext.cpp:
            (WebCore::NodeRendererFactory::createRendererAndStyle): If an element doesn’t need a renderer
            and its style is affected by :empty, record this fact in the element by calling setStyleAffectedByEmpty().

2011-07-11  Sam Weinig  <sam@webkit.org>

        Reviewed by Simon Fraser.

        <rdar://problem/9737248> REGRESSION: Touch events added to document object aren't fired below initial viewport height

        Can't add automated test due to WebEventRegions not be taken into account in DRT.

        * dom/DocumentIPhone.cpp:
        (WebCore::Document::eventRectRelativeToRoot):
        (WebCore::Document::touchEventsChangedTimerFired):
        (WebCore::Document::checkChildRenderers):
        * dom/DocumentIPhone.h:
        Special case the Document node when computing the event rect. Make it
        return the entire document rect.

2011-07-1  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/8548085> Video disappears when resized in Pocket Informant HD (moves to position:fixed)
        
        When the RenderLayer for a video changed, because the style changed
        such that we destroyed and re-created it, we failed to re-connect the
        plug-in's UIView with the compositing layer hierarchy, so the video
        would disappear.

        Fix by hooking up a 'willBeDestroyed' method that propagates through
        to the RenderLayerBacking, which can use it to inform the plug-in that
        it is being detached. UIKit can then use this to unset the flag which
        indicates that the UIView is parented in a layer. This allows a later
        call to _attachPluginLayerOnMainThread to continue to completion.

        * plugins/PluginViewBase.h:
        (WebCore::PluginViewBase::detachPluginLayer):
        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::willBeDestroyed):
        * rendering/RenderLayer.h:
        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::layerWillBeDestroyed):
        * rendering/RenderLayerBacking.h:
        * rendering/RenderObject.cpp:
        (WebCore::RenderObject::destroy):
        * rendering/RenderWidget.cpp:
        (WebCore::RenderWidget::willBeDestroyed):

2011-07-08  Simon Fraser  <simon.fraser@apple.com>
    
    Prerequisite for
    <rdar://problem/8548085> Video disappears when resized in Pocket Informant HD (moves to position:fixed)
    
    Merge WebKit ToT r90675.

    2011-07-08  Simon Fraser  <simon.fraser@apple.com>
    
            Clean up RenderWidget::destroy() to share more code
            https://bugs.webkit.org/show_bug.cgi?id=64138
    
            Reviewed by James Robinson.
    
            RenderWidget::destroy() copied code from various other
            destroy() methods, which made code maintenance in this
            area very risky.
            
            Fix by adding a virtual willBeDestroyed() method, which
            replaces most instances of destroy(). Now, only RenderWidget
            and RenderObject implement destroy(), and each just calls
            willBeDestroyed(). Code duplication is averted.
            
            No behavior change, so no tests.
    
            * rendering/RenderBlock.cpp:
            (WebCore::RenderBlock::willBeDestroyed):
            * rendering/RenderBlock.h:
            * rendering/RenderBox.cpp:
            (WebCore::RenderBox::willBeDestroyed):
            * rendering/RenderBox.h:
            * rendering/RenderBoxModelObject.cpp:
            (WebCore::RenderBoxModelObject::willBeDestroyed):
            * rendering/RenderBoxModelObject.h:
            * rendering/RenderFullScreen.cpp:
            (RenderFullScreenPlaceholder::willBeDestroyed):
            (RenderFullScreen::willBeDestroyed):
            * rendering/RenderFullScreen.h:
            * rendering/RenderInline.cpp:
            (WebCore::RenderInline::willBeDestroyed):
            * rendering/RenderInline.h:
            * rendering/RenderListItem.cpp:
            (WebCore::RenderListItem::willBeDestroyed):
            * rendering/RenderListItem.h:
            * rendering/RenderObject.cpp:
            (WebCore::RenderObject::willBeDestroyed):
            (WebCore::RenderObject::destroy):
            * rendering/RenderObject.h:
            * rendering/RenderReplaced.cpp:
            (WebCore::RenderReplaced::willBeDestroyed):
            * rendering/RenderReplaced.h:
            * rendering/RenderTableCell.cpp:
            (WebCore::RenderTableCell::willBeDestroyed):
            * rendering/RenderTableCell.h:
            * rendering/RenderTableRow.cpp:
            (WebCore::RenderTableRow::willBeDestroyed):
            * rendering/RenderTableRow.h:
            * rendering/RenderTableSection.cpp:
            (WebCore::RenderTableSection::willBeDestroyed):
            * rendering/RenderTableSection.h:
            * rendering/RenderText.cpp:
            (WebCore::RenderText::willBeDestroyed):
            * rendering/RenderText.h:
            * rendering/RenderTextFragment.cpp:
            (WebCore::RenderTextFragment::willBeDestroyed):
            * rendering/RenderTextFragment.h:
            * rendering/RenderWidget.cpp:
            (WebCore::RenderWidget::willBeDestroyed):
            (WebCore::RenderWidget::destroy):
            * rendering/RenderWidget.h:
            * rendering/svg/RenderSVGBlock.cpp:
            (WebCore::RenderSVGBlock::willBeDestroyed):
            * rendering/svg/RenderSVGBlock.h:
            * rendering/svg/RenderSVGInline.cpp:
            (WebCore::RenderSVGInline::willBeDestroyed):
            * rendering/svg/RenderSVGInline.h:
            * rendering/svg/RenderSVGInlineText.cpp:
            (WebCore::RenderSVGInlineText::willBeDestroyed):
            * rendering/svg/RenderSVGInlineText.h:
            * rendering/svg/RenderSVGModelObject.cpp:
            (WebCore::RenderSVGModelObject::willBeDestroyed):
            * rendering/svg/RenderSVGModelObject.h:
            * rendering/svg/RenderSVGResourceContainer.cpp:
            (WebCore::RenderSVGResourceContainer::willBeDestroyed):
            * rendering/svg/RenderSVGResourceContainer.h:
            * rendering/svg/RenderSVGRoot.cpp:
            (WebCore::RenderSVGRoot::willBeDestroyed):
            * rendering/svg/RenderSVGRoot.h:
            * rendering/svg/SVGResourcesCache.h:

2011-07-11  Justin Garcia  <justin.garcia@apple.com>

        Reviewed by Morgan Winer and David Kilzer.

        <rdar://problem/9031811> SPI: Method to obtain all dictation interpretations

        * WebCore.exp.in:
        * page/Frame.h:
        * page/iphone/FrameIPhone.mm:
        (WebCore::Frame::interpretationsForCurrentRoot): Iterates over all of the markers for
        dictation phrases with alternatives. Combines those phrases and their alternatives with 
        all of the others in the document, while adding text before, after and between them.

2011-07-09  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Kilzer.

        <rdar://problem/9421503> Do Not Crush WebCore.framework inspector images

        WebCore has a build phase which runs the iOS optimizers for
        images, strings files, and plist files. We don't want to optimize
        the inspector resources because they are not meant to be displayed
        on an iOS device and may instead potentially be served to remote
        clients, like Desktop applications.

        This patch makes the following changes to the build phase:

          - update to using the newer iphoneos-optimize script, and not
            using a hardcoded path which worked on B&I machines but not
            developer machines.

          - adds a fake output file "$(SRCROOT)/inspector/front-end"
            which is an input file for the "Copy Inspector Resources"
            build phase and guarantees that the optimize build phase
            runs before the inspector resources are copied and installed
            to the DSTROOT.

        * WebCore.xcodeproj/project.pbxproj:

2011-07-08  Michael Saboff  <msaboff@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/8580643> v8 Benchmark version 6 stalls at 33% complete on N90 due to JS timeout

        Made JavaScript timeout platform specific and then made iOS timeout
        20 seconds.

        No new test, since core functionality unchanged.

        * bindings/js/JSDOMWindowBase.cpp:
        (WebCore::JSDOMWindowBase::commonJSGlobalData):

2011-07-08  Sam Weinig  <sam@webkit.org>

        Reviewed by Pratik Solanki.

        <rdar://problem/9725311> MobileSafari crashed in WebCore::ScrollableArea::handleTouchEvent after touching a text box

        * platform/ScrollableArea.cpp:
        (WebCore::ScrollableArea::handleTouchEvent):
        Call scrollAnimator() rather than accessing m_scrollAnimator. This is necessary to lazily
        allocate the ScrollAnimator.

2011-07-08  Dan Bernstein  <mitz@apple.com>

        Some preparation for <rdar://problem/9394430> WebKit can't show these emoji glyphs correctly unless proper font is being specified

        Merged TOT WebKit r88478.

    2011-06-09  Dan Bernstein  <mitz@apple.com>

        Reviewed by Darin Adler.

        Simplify ComplexTextController::collectComplexTextRuns()
        https://bugs.webkit.org/show_bug.cgi?id=62387

        No new test, since functionality is unchanged.

        * platform/graphics/mac/ComplexTextController.cpp:
        (WebCore::ComplexTextController::collectComplexTextRuns): Always iterate characters in logical order,
        then reverse the run vector for RTL.

2011-07-07  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/9741253> Merge r89534 - Add NSError wrapper functions in ResourceError when USE(CFNETWORK) is enabled

        Merged ToT WebKit r89534.

    2011-06-22  Pratik Solanki  <psolanki@apple.com>

        Reviewed by Darin Adler.

        Add NSError wrapper functions in ResourceError when USE(CFNETWORK) is enabled
        https://bugs.webkit.org/show_bug.cgi?id=63155

        Add wrapper functions to ResourceError when building with USE(CFNETWORK). We need to create
        a new NSError in ResourceError::nsError() since Safari has category methods on NSError and
        passing a CFErrorRef back does not work even though CFErrorRef/NSErrror are toll-free
        bridged.

        No tests because no change in functionality.

        * WebCore.exp.in:
        * platform/network/cf/ResourceError.h:
        * platform/network/mac/ResourceErrorMac.mm:
        (WebCore::ResourceError::ResourceError):
        (WebCore::ResourceError::nsError):
        (WebCore::ResourceError::operator NSError *):

2011-07-07  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/9730850> Instead of starting connection on WebThread, use scheduleInRunLoop

        Reviewed by Anders Carlson.

        As far as I can tell, the point of calling [NSURLConnection start] on the web thread was so
        that the connection callbacks (like didReceiveData) happen on the web thread. But instead of
        doing a WebThreadRun, we can just schedule the connection to use the web thread run loop.
        It's very easy to hit WebThreadIsLockedOrDisabled() assertions if we call start on the main
        thread. But after calling [NSURLConnection scheduleInRunLoop:], I don't see any asserts
        being triggered.

        * platform/network/mac/ResourceHandleMac.mm:
        (WebCore::ResourceHandle::start):
        * wak/WebCoreThread.h:
        * wak/WebCoreThread.mm:
        (RunWebThread):
        (WebThreadNSRunLoop):

2011-07-07  Pratik Solanki  <psolanki@apple.com>

        Create iOS specific versions of these functions since the opensource versions use deprecated
        APIs. In practice, soft-linking would have ensured we used the correct function at runtime,
        however since we get warnings at build time, it requres us to have this iOS specific block.
        This is part of

        <rdar://problem/8727143> Investigate moving to the C CFNetwork APIs

        Reviewed by David Kilzer.

        * platform/network/cf/CookieJarCFNet.cpp:
        (WebCore::cookieDomain):
        (WebCore::cookieExpirationTime):
        (WebCore::cookieName):
        (WebCore::cookiePath):
        (WebCore::cookieValue):

2011-07-07  Pratik Solanki  <psolanki@apple.com>

        Merge in iOS specific code to the CFNetwork based ResourceHandle::start(). Pass in an extra
        properties parameter to createCFURLConnection(). This is part of

        <rdar://problem/8727143> Investigate moving to the C CFNetwork APIs

        Reviewed by David Kilzer.

        * platform/network/ResourceHandle.h:
        * platform/network/cf/ResourceHandleCFNet.cpp:
        (WebCore::willCacheResponse):
        (WebCore::createConnectionProperties):
        (WebCore::ResourceHandle::createCFURLConnection):
        (WebCore::ResourceHandle::start):
        (WebCore::ResourceHandle::loadResourceSynchronously):

2011-07-07  Pratik Solanki  <psolanki@apple.com>

        Update isMainThread() asserts on iOS. This is part of

        <rdar://problem/8727143> Investigate moving to the C CFNetwork APIs

        Reviewed by David Kilzer.

        * platform/network/cf/CookieStorageCFNet.cpp:
        (WebCore::currentCookieStorage):
        (WebCore::setCurrentCookieStorage):
        (WebCore::setCookieStoragePrivateBrowsingEnabled):
        (WebCore::notifyCookiesChangedOnMainThread):
        (WebCore::startObservingCookieChanges):
        (WebCore::stopObservingCookieChanges):
        * platform/network/cf/LoaderRunLoopCF.cpp:
        (WebCore::loaderRunLoop):

2011-07-07  Matthew Delaney  <mdelaney@apple.com>

        Reviewed by Chris Marrin.

        <rdar://problem/9169494> Mobile Safari crashes sometimes when leaving page with WebGL
        The bug here came down to a crash in [EAGLContext setContext] when Whippet went to create an IOSurface.
        Whippet was storing the previous context, doing its work on new context(s), and then restoring the previous context.
        So, the crash was caused every time Whippet went to reinstall a previous context that we had deleted elsewhere.
        On every paint cycle (which can happen on either thread), we call display on the webgl canvas, which ends up
        setting the current EAGLContext on that thread to the 3D context's EAGLContext. Since each thread has a "current" 
        EAGLContext, if we set the current context on one thread (via a paint cycle) and then delete it later on another thread
        then Whippet running on that first thread will pick up, store, and later reinstall that now deleted context -> boom.

        So, the fix for this is simply to unset the current context when we're done painting so that we ensure we don't leave
        the current context on any painting/compositing thread set to any context that our main rendering thread(s) may later
        delete. In the future, if we thread up the rendering process then we'll have to deal with this there too.

        No new tests. Any test here would be flaky at best since it's not clear/easy to know
        when the compositor will run on separate threads and tickle this bug.

        * platform/graphics/mac/GraphicsContext3DMac.mm:
        (WebCore::GraphicsContext3D::endPaint):

2011-07-07  Dan Bernstein  <mitz@apple.com>

        Reviewed by Simon Fraser.

        <rdar://problem/9365117> ContentEditable areas should disable text autosizing on iPhone/iPod Touch

        Test: text-autosizing/contenteditable.html

        * css/CSSStyleSelector.cpp:
        (WebCore::CSSStyleSelector::styleForDocument): Disable text size adjustment in the document style
        if the document is in design mode.
        * html/HTMLElement.cpp:
        (WebCore::HTMLElement::setContentEditable): Set -webkit-text-size-adjust to 'none' in the mapped style
        declaration for contentEditable="true" and contentEditable="plaintext-only", remove it for contentEditable="false".

2011-07-07  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/8328256> [ibooks] Support keeping figure and table captions with figures and tables

        Merged TOT WebKit r90573.

    2011-07-07  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/9737435> Re-enable -webkit-column-break-inside: avoid
        https://bugs.webkit.org/show_bug.cgi?id=64102

        Reviewed by Simon Fraser.

        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::adjustForUnsplittableChild): Treat the child as unsplittable if
        '-webkit-column-break-inside: avoid' was specified.

2011-07-06  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Carson.

        <rdar://problem/9508693> REGRESSION: iApprove pages are not drawn at the right size

        During a merge we lost the "default" keyword handling. Without
        any reported issues we left this off. However, this site was using
        the keyword and saw a drastic change. Instead of getting a
        reasonable default initial-scale the now unrecognized string value
        was ignored and returned 0, resulting in an overly zoomed out page.

        Test: viewport/viewport-default-scale.html

        * dom/ViewportArguments.h:
        Restore the -2 constant "default" value matching UIKit.

        * dom/ViewportArguments.cpp:
        (WebCore::findSizeValue):
        (WebCore::findScaleValue):
        Handle the "default" keyword.

2011-07-06  Dan Bernstein  <mitz@apple.com>

        Reviewed by Dave Kilzer.

        <rdar://problem/9713022> REGRESSION (Durango-Telluride): Text autosizing line spacing(?) changed (9A257)

        Test: text-autosizing/anonymous-block.html

        When applying text autosizing to a RenderText whose parent is an anonymous block, apply the style
        changes to the grandparent block rather than to the parent, so that they are inherited by any new
        anonymous blocks created in the same block.

        * dom/Document.cpp:
        (WebCore::TextAutoSizingValue::adjustNodeSizes):
        (WebCore::TextAutoSizingValue::reset):

2011-07-06  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Adele Peterson.

        <rdar://problem/9686598> Safari crashed in WebCore::RenderLayerCompositor::unregisterFixedPositionLayer

        When clearing RenderLayer backing stores as a page goes into the page cache, also remove
        the layers from the hash table of layers for fixed position elements, so that we don't
        assume that they are composited later when calling unregisterAllFixedPositionLayers().

        Test: platform/iphone-simulator/iphone/fixed/fixed-back-forward.html

        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::clearBackingForLayerIncludingDescendants):

2011-07-06  Simon Fraser  <simon.fraser@apple.com>

    Prerequisite for:
    <rdar://problem/9686598> Safari crashed in WebCore::RenderLayerCompositor::unregisterFixedPositionLayer
    
    Merge WebKit ToT r90484.

    2011-07-06  Simon Fraser  <simon.fraser@apple.com>
    
            Have RenderLayerCompositor take care of clearing backing store when entering the page cache
            https://bugs.webkit.org/show_bug.cgi?id=64018
    
            Reviewed by Joseph Pecoraro.
    
            Move responsibility for tearing down all RenderLayer backing stores from
            RenderLayer itself to RenderLayerCompositor, since RenderLayerCompositor 
            manages backing store creation and destruction in general.
    
            * page/FrameView.cpp:
            (WebCore::FrameView::clearBackingStores):
            * rendering/RenderLayer.cpp:
            * rendering/RenderLayer.h:
            * rendering/RenderLayerCompositor.cpp:
            (WebCore::RenderLayerCompositor::clearBackingForLayerIncludingDescendants):
            (WebCore::RenderLayerCompositor::clearBackingForAllLayers):
            * rendering/RenderLayerCompositor.h:
    
2011-07-05  David Kilzer  <ddkilzer@apple.com>

        Switch to using llvm-gcc-4.2 when compiling for the iOS Simulator

        Reviewed by Paul Knight.

        Fixes: <rdar://problem/9723923> SWB: WebCore_Sim-1235 hardcodes use of (soon-to-be-obsolete) gcc-4.2

        * Configurations/CompilerVersion.xcconfig:
        (TARGET_GCC_VERSION_iphonesimulator): Switched to LLVM_GCC_42.
        * DerivedSources.make: Switched to using xcrun to find the C
        compiler instead of hard-coding /usr/bin/gcc and /usr/bin/g++.
        * bindings/scripts/CodeGeneratorObjC.pm: Use xcrun to find the
        C compiler if the SDKROOT environment variable is set.
        * bindings/scripts/IDLParser.pm: Ditto.
        * dom/make_names.pl: Ditto.

2011-07-05  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Ian Henderson.

        <rdar://problem/9720303> Stuttery scrolling due to touch events

        Unaccelerated overflow:scroll caused a RenderLayer to register itself as a touch
        event listener, even if no content on the page was actually scrollable. This sometimes
        causes panning stutters, since we then have to send touch events to WebCore.
        
        Fix by having the RenderLayer's node only register for touch events when there
        is scrollable content.

        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::RenderLayer):
        (WebCore::RenderLayer::~RenderLayer):
        (WebCore::RenderLayer::registerAsTouchEventListenerForScrolling):
        (WebCore::RenderLayer::unregisterAsTouchEventListenerForScrolling):
        (WebCore::RenderLayer::updateScrollInfoAfterLayout):
        (WebCore::RenderLayer::styleChanged):
        * rendering/RenderLayer.h:

2011-07-05  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/9715181> Coalesce data array into one NSData before calling didReceiveData

        Merged ToT WebKit r90400.

        In my testing this reduced the time spent in the Web thread by about 100-150ms when doing a
        cached load of nytimes.com on N90.

    2011-07-05  Pratik Solanki  <psolanki@apple.com>

        Reviewed by Dan Bernstein.

        Coalesce data array into one NSData before calling didReceiveData
        https://bugs.webkit.org/show_bug.cgi?id=63916
        <rdar://problem/9715181>

        Instead of calling didReceiveData multiple times with smaller chunks of data, we merge the
        data buffers into one and call it once.

        No new tests because the flag isn't enabled yet.

        * platform/network/mac/ResourceHandleMac.mm:
        (-[WebCoreResourceHandleAsDelegate connection:didReceiveDataArray:]):

2011-07-01  Adele Peterson  <adele@apple.com>

        <rdar://problem/8981062> DOS: Crash in WebCore::Frame::applyEditingStyleToElement in Mail compose sheet on malicious website

        Merged ToT WebKit r90290.

    2011-07-01  Adele Peterson  <adele@apple.com>

        Reviewed by Darin Adler.

        WebCore part of fix for https://bugs.webkit.org/show_bug.cgi?id=63851
        <rdar://problem/8981062> Crash when loading a document in an editable WebView that has a subframe with an unstyled body

        No new tests.  I tried to make a test in DumpRenderTree with an editable WebView, 
        but was unsuccessful in getting the crash to happen in that instance.

        * editing/Editor.cpp: (WebCore::Editor::applyEditingStyleToElement): Add a nil check that exits early, in addition to the ASSERT.

2011-07-01  Adele Peterson  <adele@apple.com>

        RS by Justin Garcia

        Added a FIXME comment for:
        <rdar://problem/9711665> Vertical text selection: Don't mix horizontal and vertical SelectionRects when computing how much to stretch a selection

        * dom/Range.cpp: (WebCore::Range::collectSelectionRects):

2011-07-01  Adele Peterson  <adele@apple.com>

        Reviewed by Justin Garcia.

        Fix for <rdar://problem/9469640> Content selection has overlaps and gaps
        <rdar://problem/9560246> Inconsistent and ugly double highlighting and pixel cracks in highlighting mail content
        <rdar://problem/9136927> Selection has cracks at some style change boundaries

        * rendering/RenderText.cpp: (WebCore::RenderText::collectSelectionRects):
        We were using the size of the InlineTextBox instead of the selectionRect in most cases here.  
        They are often different, and the selectionRect gives a much better geometry in all of the cases I tested.

2011-07-01  Sam Weinig  <sam@webkit.org>

        <rdar://problem/9011942> REGRESSION: Telluride: Attached e-mail crashes Mail on viewing (recursion; stack blown)

        Merge TOT WebKit r90301.

    2011-07-01  Sam Weinig  <sam@webkit.org>
        
        Reduce parser nesting cap to 512
        https://bugs.webkit.org/show_bug.cgi?id=63856
        
        Reviewed by Dan Bernstein.
        
        Given Firefox's cap of 200, our cap of 2048 seemed a little excessive. Lower
        the nesting cap to 512 to cover more cases where rending recursion was biting us.
        
        * page/Settings.h:
        Reduce the nesting cap to 512.

2011-07-01  Eric Carlson  <eric.carlson@apple.com>

    <rdar://problem/8992044> REGRESSION (Merge1): bogus video does not reach NETWORK_NO_SOURCE on iOS

    Merge TOT WebKit r90039.

    2011-07-01  Eric Carlson  <eric.carlson@apple.com>
    
            Reviewed by Darin Adler.
    
            Media element loads blocked by a resource load delegate do not generate an error event
            https://bugs.webkit.org/show_bug.cgi?id=63558
    
            Tests: media/media-blocked-by-beforeload.html
                   media/media-blocked-by-willsendrequest.html
    
            * html/HTMLMediaElement.cpp:
            (WebCore::HTMLMediaElement::selectMediaResource): Call mediaLoadingFailed instead of noneSupported
                so all failures follow the same code path.
            (WebCore::HTMLMediaElement::loadResource): Call mediaLoadingFailed when there is no frame, when 
                the loader delegate rejects the url, or when MediaPlayer doesn't find a media engine that
                supports the type.
            (WebCore::HTMLMediaElement::selectNextSourceChild): Fix incorrect logging.
    
            * platform/graphics/MediaPlayer.cpp:
            (WebCore::MediaPlayer::load): Return a bool indicating whether or not the url was given to
                a media engine.
            (WebCore::MediaPlayer::loadWithNextMediaEngine): Add some logging.
            * platform/graphics/MediaPlayer.h:

2011-07-01  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/9711693> Missing symbol when compiling WidgetIPhone.mm with clang

        Reviewed by Anders Carlsson.

        * WebCore.exp.in: Don't export constructor for abstract class
        Widget.  The clang compiler doesn't emit it because it can never
        be called.

2011-07-01  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/9692243> WebCore should build for armv7f and armv7s

        Reviewed by David Carson.

        Original patch by Denis Palmans <dpalmans@apple.com>.

        * Configurations/Base.xcconfig: Don't override VALID_ARCHS when
        building for iphoneos or iphonesimulator SDKs.  This keeps the
        original value of VALID_ARCHS and only adds platform-specific
        values for macosx.
        * Configurations/WebCore.xcconfig: Added support for armv7f and
        armv7s when setting EXPORTED_SYMBOLS_FILE.
        * DerivedSources.make: Update rules for WEBCORE_EXPORT_FILES to
        make sure the correct architecture is used in
        generate-export-file.

2011-07-01  David Kilzer  <ddkilzer@apple.com>

        Let Xcode fix the formatting of the WebCore project file

        * WebCore.xcodeproj/project.pbxproj:

2011-06-30  Adele Peterson  <adele@apple.com>

        Reviewed by Simon Fraser.

        First step to fix <rdar://problem/9469640> Content selection has overlaps and gaps

        Always pass isHorizontal when creating SelectionRects.  This is used when adjusting iOS selection, 
        and can not be a default value.  Also, removed the unused empty constructor.

        * dom/Range.cpp: (WebCore::Range::collectSelectionRects):
        * platform/iphone/SelectionRect.cpp: (WebCore::SelectionRect::SelectionRect):
        * platform/iphone/SelectionRect.h:
        * rendering/RenderObject.cpp: (WebCore::RenderObject::collectSelectionRects):

2011-06-30  Anders Carlsson  <andersca@apple.com>

        Reviewed by Simon Fraser.

        <rdar://problem/9417143> Make scrolling of nested (non-accelerated) overflow:scroll divs work correctly

        When we begin a touch sequence, go ahead and check if the scrollable area is pinned to the edge in the
        direction(s) of the scroll gesture. If this is the case, we'll look for a containing scrollable area that
        is not pinned and use it for the duration of the touch sequence.

        * platform/iphone/ScrollAnimatorIPhone.h:
        Add determineScrollableAreaForTouchSequence member function, and m_scrollableAreaForTouchSequence member variable.
        Since we only care about RenderLayers, this can be a weak pointer; the member variable can only point to a ScrollableArea
        that's a RenderLayer further up in the hierarchy and a child RenderLayer can't outlive its parent.

        * platform/iphone/ScrollAnimatorIPhone.mm:
        (WebCore::ScrollAnimatorIPhone::ScrollAnimatorIPhone):
        Initialize m_scrollableAreaForTouchSequence to null.

        (WebCore::ScrollAnimatorIPhone::handleTouchEvent):
        When ending the touch sequence, null out m_scrollableAreaForTouchSequence. Make sure to determine the scrollable area
        to use for the touch sequence and use it for scrolling.

        (WebCore::ScrollAnimatorIPhone::determineScrollableAreaForTouchSequence):
        Go up the scrollable area hierarhcy and look for a scrollable area that is not pinned in the direction indicated by the
        scroll delta. 

2011-06-30  Anders Carlsson  <andersca@apple.com>

        Another step towards fixing
    
        <rdar://problem/9417143> Make scrolling of nested (non-accelerated) overflow:scroll divs work correctly

        Merge ToT WebKit r90152.

    2011-06-30  Anders Carlsson  <andersca@apple.com>

            Reviewed by Dan Bernstein.

            More ScrollableArea scaffolding
            https://bugs.webkit.org/show_bug.cgi?id=63678

            Add a way to get the enclosing scrollable area for a given scrollable area.
            Also, add ScrollableArea::isPinnedInDirectionOfScrollDelta.

            * page/FrameView.cpp:
            (WebCore::FrameView::enclosingScrollableArea):
            Return 0 for now.

            * page/FrameView.h:
            Add FrameView::enclosingScrollableArea.

            * platform/ScrollableArea.cpp:
            (WebCore::ScrollableArea::isPinnedInDirectionOfScrollDelta):
            Return whether the area is pinned in the direction of the scroll delta.

            * platform/ScrollableArea.h:
            Add new member functions.

            * rendering/RenderLayer.cpp:
            (WebCore::RenderLayer::enclosingScrollableLayer):
            Add helper function.

            (WebCore::RenderLayer::scrollByRecursively):
            Use the new enclosingScrollableLayer helper function.

            (WebCore::RenderLayer::enclosingScrollableArea):
            Return the enclosing scrollable area.

            * rendering/RenderLayer.h:
            Add new member function.

            * rendering/RenderListBox.cpp:
            (WebCore::RenderListBox::enclosingScrollableArea):
            Return 0 for now.

            * rendering/RenderListBox.h:
            Add new member function.

2011-06-30  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/9704630> WebKit: REGRESSION (Telluride9A255): Apps linked before Telluride nudge the AM/PM indicator to the right a pixel or 2

        Merged TOT WebKit r90129.

    2011-06-30  Dan Bernstein  <mitz@apple.com>

        Reviewed by Adele Peterson.

        Add +[WebView _allowsRoundingHacks]
        https://bugs.webkit.org/show_bug.cgi?id=63734

        * WebCore.exp.in: Export TextRun::allowsRoundingHacks().
        * platform/graphics/TextRun.cpp:
        (WebCore::TextRun::allowsRoundingHacks): Added this accessor.
        * platform/graphics/TextRun.h:

2011-06-30  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/9277972> Error installing iPhone profiles with a prepending authentication web page

        Reviewed by Yongjun Zhang.

        * platform/network/iphone/WebCoreURLResponseIPhone.h:
        (WebCore::shouldUseQuickLookForMIMEType): Added XML MIME types
        (application/xml and text/xml) to the list of types to always
        check since we need those for *.mobileconfig files.  Checking
        these values directly was faster than using another hash table
        in a microbenchmark.
        * platform/network/iphone/WebCoreURLResponseIPhone.mm:
        (WebCore::adjustMIMETypeIfNecessary): Perform some early summer
        cleaning while we're in the neighborhood:
        - Switch to using an early return.
        - Get rid of manual -release call by using RetainPtr<NSString>.
        - Switch from -isEqualToString: to -caseInsensitiveCompare:
          since it's slightly faster in a microbenchmark.  (Note that
          mimeType and updatedMIMEType are always lowercase in this
          method.)

2011-06-29  Antti Koivisto  <antti@apple.com>

        Reviewed by Ian Henderson.

        <rdar://problem/9103801> Drop tiles based on memory instead of keepRect

        Eliminate the concept of keepRect, instead drop tiles based on biased distance
        until the memory use is below a set limit.

        Make the limit calculation dynamic with memory level to match the behavior
        of the keepRect code. Available tile memory is divided 3/4 for zoomed in grid
        and 1/4 for zoomed out grid (when zoomed in). 

        Eliminate TileGrid::m_dropsTilesBasedOnVisibleRect which is now obsolete.

        Remove canTileAggressively(), as it is always true on supported platforms.

        * platform/iphone/TileCache.h:
        * platform/iphone/TileCache.mm:
        (WebCore::TileCache::setKeepsZoomedOutTiles):
        (WebCore::TileCache::removeAllNonVisibleTiles):
        (WebCore::TileCache::finishedCreatingTiles): Call only when tiles were actually created, remove the "tilesCreated" bool.
        (WebCore::TileCache::tileCapacityForGrid):
        (WebCore::TileCache::invalidateTiles):
        * platform/iphone/TileGrid.h:
        * platform/iphone/TileGrid.mm:
        (WebCore::TileGrid::TileGrid):
        (WebCore::TileGrid::tileByteSize):
        (WebCore::TileGrid::dropDistantTiles):
        (WebCore::TileGrid::checkDoSingleTileLayout):
        (WebCore::TileGrid::adjustCoverRectForPageBounds):
        (WebCore::TileGrid::calculateCoverRect):
        (WebCore::TileGrid::createTiles):
        * platform/iphone/TileGridTile.mm:
        (WebCore::TileGridTile::TileGridTile):

2011-06-29  Justin Garcia  <justin.garcia@apple.com>

        I made changes to iOS WebKit for:

        <rdar://problem/9619891> Tapping Done after dictating into a web form removes the caret but doesn't dismiss the keyboard. Tapping Done again crashes Safari.
        
        I made some modifications to those changes and checked them into Open Source WebKit in r90072. I'm now merging those modifications back to iOS WebKit.
        
    2011-06-29  Justin Garcia  <justin.garcia@apple.com>

            Reviewed by Enrica Casucci.

            https://bugs.webkit.org/show_bug.cgi?id=62922
            indexForVisiblePosition(const VisiblePosition& visiblePosition) does not consider shadow content
        
            VisiblePositions can be inside web form text regions, which use shadow trees. Made indexForVisiblePosition
            aware of this, and added a new parameter to obtain the scope for a VisiblePosition, in addition to its index.
        
            Added visiblePositionForIndex to go in the opposite direction, taking into account the scope
            used to compute the index.
        
            These two functions use TextIterators to convert between VisiblePositions and indices. But 
            TextIterator iteration using TextIteratorEmitsCharactersBetweenAllVisiblePositions does not 
            exactly match VisiblePosition iteration, so using them to preserve a selection during an 
            editing operation is unreliable. This can be seen in the expected results for:
        
            editing/execCommand/indent-pre-list.html
            editing/execCommand/crash-indenting-list-item.html
        
            TextIterator's TextIteratorEmitsCharactersBetweenAllVisiblePositions mode needs to be fixed, or 
            these functions need to be changed to iterate using actual VisiblePositions. See:
        
            https://bugs.webkit.org/show_bug.cgi?id=63590
            TextIterators in TextIteratorEmitsCharactersBetweenAllVisiblePositions do not exactly match VisiblePositions
        
            Also:
        
            https://bugs.webkit.org/show_bug.cgi?id=63592
            Use visiblePositionForIndex and indexForVisiblePosition everywhere that TextIterators are used to convert between VisiblePositions and indices
        
            No new tests added because indexForVisiblePosition is currently only used for editing operations
            that cannot be performed inside web form fields.

            * editing/ApplyBlockElementCommand.cpp:
            (WebCore::ApplyBlockElementCommand::doApply):
            * editing/InsertListCommand.cpp:
            (WebCore::InsertListCommand::doApply):
            * editing/htmlediting.cpp:
            (WebCore::indexForVisiblePosition):
            (WebCore::visiblePositionForIndex):
            * editing/htmlediting.h:

2011-06-29  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Anders Carlsson.

        <rdar://problem/9701463> Assertion leaving page with accelerated overflow:scroll div
        
        If we're in the page cache, don't send notifications to UIKit that we removed
        the layer for an overflow:scroll element, since we will have already done
        so via RenderLayerCompositor::unregisterAllScrollingLayers().

        Test: platform/iphone-simulator/iphone/scrolling/touch-scroll-back-forward.html

        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::scrollingLayerAddedOrUpdated):
        (WebCore::RenderLayerCompositor::scrollingLayerRemoved):

2011-06-29  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Dean Jackson.

        <rdar://problem/9700988> fast/layers/generated-layer-scrollbar-crash.html test asserts
        
        Avoid assertion when an anonymous renderer creates scrolling layers.
        It has no node, so we can't add the node to the list of touch event listeners.

        Tested by existing tests in fast/layers

        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::~RenderLayer):
        (WebCore::RenderLayer::styleChanged):

2011-06-29  Anders Carlsson  <andersca@apple.com>

        First step towards fixing
    
        <rdar://problem/9417143> Make scrolling of nested (non-accelerated) overflow:scroll divs work correctly

        Merge ToT WebKit r90058

    2011-06-29  Anders Carlsson  <andersca@apple.com>

            Reviewed by Simon Fraser.
 
            RenderLayer::maximumScrollPosition() is wrong
            https://bugs.webkit.org/show_bug.cgi?id=62667
 
            * platform/ScrollableArea.h:
            (WebCore::ScrollableArea::isVerticalScrollerPinnedToMinimumPosition):
            (WebCore::ScrollableArea::isVerticalScrollerPinnedToMaximumPosition):
            Add these for good measure; they will be needed in an upcoming patch.
 
            * rendering/RenderLayer.cpp:
            (WebCore::RenderLayer::maximumScrollPosition):
            Subtract the visible content rect, including the scroll bars.

2011-06-29  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/9697823> scrollTop should be negative when rubber-banding an overflow:scroll view
        
        Merge WebKit ToT r90059.

    2011-06-29  Simon Fraser  <simon.fraser@apple.com>
    
            Reviewed by Beth Dakin.
    
            Lay some groundwork for rubber-banding in overflow:scroll divs
            https://bugs.webkit.org/show_bug.cgi?id=63654
    
            Make it possible for scrollTop and scrollLeft on a RenderLayer to be
            set to negative values, which we will do during rubber-banding in
            future. Continue to clamp programmatic scrolls, and scroll positions
            set by layout between 0 and the max value.
    
            Test: fast/layers/negative-scroll-positions.html
    
            * rendering/RenderBox.cpp:
            (WebCore::RenderBox::setScrollLeft):
            (WebCore::RenderBox::setScrollTop):
            * rendering/RenderLayer.cpp:
            (WebCore::RenderLayer::scrollToOffset):
            (WebCore::RenderLayer::scrollTo):
            * rendering/RenderLayer.h:
            (WebCore::RenderLayer::scrollToXOffset):
            (WebCore::RenderLayer::scrollToYOffset):
            * rendering/RenderTextControlSingleLine.cpp:
            (WebCore::RenderTextControlSingleLine::forwardEvent):
    
2011-06-29  Dan Bernstein  <mitz@apple.com>

        Reviewed by Simon Fraser.

        <rdar://problem/9590447> Emoji gets clipped in some cases

        CoreText-227 changed the size and offset adjustments it applies to Apple Color Emoji. Update
        the WebKit code to account for the new adjustments. The net result is that Emoji rendered by
        WebKit will have the same sizes and positions as in iOS 4.x and earlier.

        * platform/graphics/cocoa/FontPlatformDataCocoa.mm:
        (WebCore::FontPlatformData::ctFont):
        * platform/graphics/mac/FontMac.mm:
        (WebCore::Font::drawGlyphs):

2011-06-28  Anton D'Auria  <adauria@apple.com>

        Reviewed by Joseph Pecoraro.

        <rdar://problem/9631025> Ensure orphaned data can be removed from device

        MobileSafari can create LocalStorage and Databases dbs without Settings being
        aware of it, since DatabaseTracker and StorageTracker are singletons that
        can be out of sync across multiple processes. This fix does an extra pass over
        the Databases and LocalStorage directories where those dbs are stored and deletes
        any stray files. This is safe because Safari is killed when all persistent storage
        is cleared in Settings. This change will be reverted once a fix lands for
        <rdar://problem/9567500> Remove Website Data pane is not kept in sync with Safari.
        
        * storage/DatabaseTracker.cpp:
        (WebCore::DatabaseTracker::deleteAllDatabases): Delete all database files
        that remain in the directory used by Databases that match http*.
        * storage/StorageTracker.cpp:
        (WebCore::StorageTracker::syncDeleteAllOrigins):  Delete all local storage db files
        that remain in the LocalStorage directory that match *.localstorage.

2011-06-28  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Dan Bernstein.

        <rdar://problem/9691326> position:relative inside accelerated overflow:scroll doesn't render correctly
        
        RenderLayerBacking::updateCompositedBounds() tried to be smart and clip
        compositing layers to the size of the viewport. This causes problems
        inside of accelerated scrolling layers, however, so disable this clipping
        in that case, as we do for elements with a transformed ancestor.

        Test: platform/iphone-simulator/iphone/scrolling/scrolling-content-clip-to-viewport.html

        * rendering/RenderLayer.h: Make hasAcceleratedTouchScrolling() public.
        * rendering/RenderLayerBacking.cpp:
        (WebCore::layerOrAncestorIsTransformedOrScrolling):
        (WebCore::RenderLayerBacking::updateCompositedBounds):

2011-06-28  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by David Carson.

        <rdar://problem/9690046> Some content below viewable area never rendered with "-webkit-overflow-scrolling: touch"

        RenderBlock::paint() tries to short-circuit the paint if the rect being
        painted falls outside the renderer's visual overflow rect. This stops
        painting in tiles of CATiledLayers which fall outside the exposed portion
        of overflow:scroll content; they appear empty when scrolled into view.
        
        Fix by going ahead with the paint in this case if we're painting into
        a composited layer.

        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::paint):

2011-06-27  Joseph Pecoraro  <joepeck@webkit.org>

        <rdar://problem/9665451> ASSERT isMainThread in WebCore::LineBreakIteratorPool::sharedPool

        Merged ToT WebKit r89851 and r89878.

    2011-06-27  Joseph Pecoraro  <joepeck@webkit.org>

            Reviewed by Darin Adler.

            Extract LineBreakIteratorPool class into its own file
            https://bugs.webkit.org/show_bug.cgi?id=63471

            * GNUmakefile.list.am:
            * WebCore.gypi:
            * WebCore.vcproj/WebCore.vcproj:
            * WebCore.xcodeproj/project.pbxproj:
            Add the new file to builds that used TextBreakIteratorPoolICU.h.

            * platform/text/LineBreakIteratorPoolICU.h: Added.
            (WebCore::LineBreakIteratorPool::sharedPool):
            (WebCore::LineBreakIteratorPool::LineBreakIteratorPool):
            Expose the constructor so it can be used by others.

            * platform/text/TextBreakIteratorICU.cpp:
            Remove the old LineBreakIteratorPool implementation.

    2011-06-27  Joseph Pecoraro  <joepeck@webkit.org>

            Reviewed by Darin Adler.

            Allow non-main thread text drawing in ICU ports
            https://bugs.webkit.org/show_bug.cgi?id=63482

            Some ports allow multiple threads to draw strings.
            LineBreakIteratorPool is not thread safe and the existing
            ASSERT caught cases where multiple threads were trying
            to access the shared pool. This makes the pool a lazily
            created per-thread pool to allow for thread safe pool use.

            * platform/ThreadGlobalData.h:
            * platform/ThreadGlobalData.cpp:
            (WebCore::ThreadGlobalData::ThreadGlobalData): start with null.
            (WebCore::ThreadGlobalData::lineBreakIteratorPool): lazily create.
            (WebCore::ThreadGlobalData::destroy): delete.
            Manage the lifetime of the per-thread pool instance.

            * platform/text/LineBreakIteratorPoolICU.h:
            (WebCore::LineBreakIteratorPool::sharedPool):
            Use the per-thread pool instance and remove the ASSERT that
            this needs to be on the main thread.

            (WebCore::LineBreakIteratorPool::create):
            Create a PassOwnPtr so we can use OwnPtr on pools.

            (WebCore::LineBreakIteratorPool::LineBreakIteratorPool):
            Private now that there is a public create function.

2011-06-27  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/9686095> WebKit: Restore pre-Telluride word rounding with linked-on-or-after check for third-party apps

        Merged TOT WebKit r89733.

    2011-06-24  Dan Bernstein  <mitz@apple.com>

        Reviewed by Anders Carlsson.

        Add an option to enable legacy rounding hacks
        https://bugs.webkit.org/show_bug.cgi?id=63363

        Restored most of text rounding hacks which were removed in r78846, with a global flag to control
        whether rounding hacks are allowed, which defaults to false.

        Test: platform/mac/fast/text/rounding-hacks.html

        * CMakeLists.txt: Added TextRun.cpp.
        * GNUmakefile.list.am: Ditto.
        * WebCore.exp.in: Export new TextRun function and global and updated StringTruncator functions.
        * WebCore.gypi: Added TextRun.cpp.
        * WebCore.pro: Ditto.
        * WebCore.vcproj/WebCore.vcproj: Ditto.
        * WebCore.xcodeproj/project.pbxproj: Ditto.
        * html/canvas/CanvasRenderingContext2D.cpp:
        (WebCore::CanvasRenderingContext2D::drawTextInternal): Disable rounding hacks in the one place
        they used to be disabled.
        * platform/graphics/Font.cpp: Re-added the rounding character table.
        * platform/graphics/Font.h:
        (WebCore::Font::isRoundingHackCharacter): Re-added.
        * platform/graphics/FontFastPath.cpp:
        (WebCore::Font::getGlyphsAndAdvancesForSimpleText): Account for final rounding width.
        * platform/graphics/SimpleFontData.cpp:
        (WebCore::SimpleFontData::platformGlyphInit): Initialize m_adjustedSpaceWidth.
        * platform/graphics/SimpleFontData.h:
        (WebCore::SimpleFontData::adjustedSpaceWidth): Re-added.
        * platform/graphics/StringTruncator.cpp:
        (WebCore::stringWidth): Re-added disableRoundingHacks parameter.
        (WebCore::truncateString): Ditto.
        (WebCore::StringTruncator::centerTruncate): Added EnableRoundingHacksOrNot parameter.
        (WebCore::StringTruncator::rightTruncate): Ditto.
        (WebCore::StringTruncator::width): Ditto.
        * platform/graphics/StringTruncator.h:
        * platform/graphics/TextRun.cpp: Added.
        (WebCore::TextRun::setAllowsRoundingHacks): Added.
        * platform/graphics/TextRun.h:
        (WebCore::TextRun::TextRun): Added RoundingHacks parameter to the constructors, used to initialize
        the m_applyRunRounding and m_applyWordRounding member variables, subject to rounding hacks being allowed.
        (WebCore::TextRun::applyRunRounding): Re-added this accessor.
        (WebCore::TextRun::applyWordRounding): Ditto.
        (WebCore::TextRun::disableRoundingHacks): Re-added.
        * platform/graphics/WidthIterator.cpp:
        (WebCore::WidthIterator::WidthIterator): Re-added code to apply rounding hacks.
        (WebCore::WidthIterator::advance): Ditto.
        * platform/graphics/WidthIterator.h:
        * platform/graphics/mac/ComplexTextController.cpp:
        (WebCore::ceilCGFloat): Re-added.
        (WebCore::ComplexTextController::ComplexTextController): Re-added code to apply rounding hacks.
        (WebCore::ComplexTextController::advance): Ditto.
        (WebCore::ComplexTextController::adjustGlyphsAndAdvances): Ditto.
        * platform/graphics/mac/ComplexTextController.h:
        (WebCore::ComplexTextController::finalRoundingWidth): Re-added this accessor.
        * platform/graphics/mac/FontComplexTextMac.cpp:
        (WebCore::Font::getGlyphsAndAdvancesForComplexText): Accound for final rounding width.
        * platform/graphics/qt/SimpleFontDataQt.cpp:
        (WebCore::SimpleFontData::platformGlyphInit): Initialize m_adjustedSpaceWidth.
        * platform/gtk/RenderThemeGtk.cpp:
        (WebCore::RenderThemeGtk::fileListNameForWidth): Enabled rounding hacks in the string truncator.
        * platform/mac/DragImageMac.mm:
        (WebCore::widthWithFont): Disable rounding hacks when measuring.
        (WebCore::drawAtPoint): Disable rounding hacks when drawing.
        * platform/win/DragImageWin.cpp:
        (WebCore::createDragImageForLink): Enable rounding hacks in the string truncator.
        * platform/win/WebCoreTextRenderer.cpp:
        (WebCore::WebCoreTextFloatWidth): Ditto.
        * rendering/RenderFileUploadControl.cpp:
        (WebCore::RenderFileUploadControl::paintObject): Disable rounding hacks.
        * rendering/RenderListBox.cpp:
        (WebCore::RenderListBox::updateFromElement): Ditto.
        (WebCore::RenderListBox::paintItemForeground): Ditto.
        * rendering/RenderTextControl.cpp:
        (WebCore::RenderTextControl::getAvgCharWidth): Ditto.
        * rendering/RenderTheme.cpp:
        (WebCore::RenderTheme::fileListNameForWidth): Enabled rounding hacks in the string truncator.
        * rendering/RenderThemeMac.mm:
        (WebCore::RenderThemeMac::fileListNameForWidth): Ditto.
        * rendering/svg/SVGInlineTextBox.cpp:
        (WebCore::SVGInlineTextBox::constructTextRun): Disabled rounding hacks.
        * rendering/svg/SVGTextMetrics.cpp:
        (WebCore::constructTextRun): Ditto.

2011-06-27  Enrica Casucci  <enrica@apple.com>

        Reviewed by Justin Garcia.

        <rdar://problem/9413884> Keyboard is in shifted state when the keyboard is activated in the end of a line.

        Fixes a merge issue. The iOS specific code needs to use document->rendererIsEditable() instead of
        isContentEditable() that always returns false if there is no selection.

        * editing/FrameSelection.cpp:
        (WebCore::FrameSelection::setSelectionFromNone):

2011-06-27  Justin Garcia  <justin.garcia@apple.com>

        <rdar://problem/9619891> Tapping Done after dictating into a web form removes the caret but doesn't dismiss the keyboard. Tapping Done again crashes Safari.

        The bug has already been fixed in iOS webkit. The problematic code was unused in ToT WebKit so I removed it 
        in r89844. Merging one whitespace change over from that revision.

2011-06-27  Justin Garcia  <justin.garcia@apple.com>

        Reviewed by Ryosuke Niwa.

        CompositeEditCommand::inputText(const String& text, bool selectedInsertText) is unused
        https://bugs.webkit.org/show_bug.cgi?id=62921

        * editing/CompositeEditCommand.cpp:
        * editing/CompositeEditCommand.h:
        * editing/InsertTextCommand.cpp:
        (WebCore::InsertTextCommand::input):

2011-06-26  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/9666101> Emoji doesn't know how to wrap N90/9A251

        Merged ToT WebKit 89769.

    2011-06-26  Dan Bernstein  <mitz@apple.com>

        Reviewed by Darin Adler.

        With word-break: break-all, words do not break correctly before a surrogate pair
        https://bugs.webkit.org/show_bug.cgi?id=63401

        The code to check for mid-word breaks accumulates width one character at a time. It was actually
        measuring the two parts of the surrogate pair individually, so they appeared to have zero width.
        Fixed by checking for surrogate pairs and measuring the pair as one unit.

        Test: fast/text/midword-break-before-surrogate-pair.html

        * rendering/RenderBlockLineLayout.cpp:
        (WebCore::RenderBlock::LineBreaker::nextLineBreak):

2011-06-26  Antti Koivisto  <antti@apple.com>

        Reviewed by Ian Henderson.

        <rdar://problem/7237502> Tile cache should be optimized for scrolling to the top of a page

        Add a tiling mode for scrolling to the top. In this mode we shift the visible rect
        to the top of the document immediately. This way we will have tiles ready when
        the scrolling reached the top and user doesn't get to watch the background color
        for a moment.

        If zoomed in, user will usually see blurry tiles (from zoomed out grid) during long fast-scrolls.

        The UIKit side changes also fix an unrelated bug where selection popup would stay
        visible during scrolling to the top.

        * platform/iphone/TileCache.h:
        * platform/iphone/TileCache.mm:
        (WebCore::TileCache::setNeedsDisplayInRect):
        (WebCore::TileCache::isTileInvalidationSuspended): Renamed to better reflect what it does.
        (WebCore::TileCache::updateTilingMode):
        * platform/iphone/TileGrid.mm:
        (WebCore::TileGrid::visibleRect):
        * wak/WAKWindow.h:

2011-06-25  Joseph Pecoraro  <joepeck@webkit.org>

        <rdar://problem/8908611> Investigate misuse of RenderObject::absoluteBoundingBoxRect() (rect incorrectly assumed to be wrt to main frame)

        Merged ToT WebKit r89753, r89754, and r89756.

    2011-06-25  Joseph Pecoraro  <joepeck@webkit.org>

            Reviewed by Simon Fraser.

            Inspector highlight rect is wrong for contents of transformed iframes
            https://bugs.webkit.org/show_bug.cgi?id=53627

            Part 1: Provide FloatQuad versions of convertFromRenderer,
            convertToContainingView, and convertChildToSelf, so that we
            can get the fully transformed quad of a renderer all the
            way up to the root widget.

            * page/FrameView.cpp:
            (WebCore::FrameView::convertFromRenderer):
            (WebCore::FrameView::convertToContainingView):
            * page/FrameView.h:
            * platform/ScrollView.h:
            (WebCore::ScrollView::convertChildToSelf):
            * platform/Widget.h:
            * platform/Widget.cpp:
            (WebCore::Widget::convertToContainingView):
            Provide FloatQuad versions of these already existing functions.

            (WebCore::Widget::convertToRootContainingView):
            Provide a helper conversion function to recursively
            convert a given FloatQuad up to the root widget.

            * inspector/DOMNodeHighlighter.cpp:
            (WebCore::DOMNodeHighlighter::DrawNodeHighlight):
            Use the new methods to convert the FloatQuad for the highlighted
            node to the root container, without losing transformation
            information. Add a FIXME for SVG, which is still broken.

            * WebCore.exp.in:
            Export the new Widget functions so WebKit can link properly.

    2011-06-25  Joseph Pecoraro  <joepeck@webkit.org>

            Reviewed by Simon Fraser.

            Inspector highlight rect is wrong for contents of transformed iframes
            https://bugs.webkit.org/show_bug.cgi?id=53627

            Part 2: Only adjust for the FrameView's scroll position when
            the localToAbsolute mapping did not end with fixed content.
            Content that is inside of a fixed position container is already
            adjusted for the FrameView's scrollPosition when RenderView
            maps local to container.

            This patch uses a "wasFixed" out parameter to determine if
            the localToAbsolute transformation ended inside a fixed block,
            and if so does not apply the scroll position.

            * page/FrameView.cpp:
            (WebCore::FrameView::convertFromRenderer):
            Respect wasFixed as described above.

            * rendering/RenderBox.h:
            * rendering/RenderBox.cpp:
            (WebCore::RenderBox::mapLocalToContainer):
            This is the only time that "fixed" ever changed. So when
            fixed changes, update the optional wasFixed out parameter.

            * rendering/RenderObject.cpp:
            (WebCore::RenderObject::localToAbsolute):
            (WebCore::RenderObject::mapLocalToContainer):
            (WebCore::RenderObject::localToContainerQuad):
            * rendering/RenderObject.h:
            (WebCore::RenderObject::localToAbsoluteQuad):
            Ignore wasFixed by default, but pipe it though where needed.

            * rendering/RenderView.h:
            * rendering/RenderView.cpp:
            (WebCore::RenderView::mapLocalToContainer):
            This is the final recursive call, so wasFixed goes no
            further. We sanity check its value in debug builds.

            * rendering/RenderBlock.cpp:
            (WebCore::RenderBlock::selectionGapRectsForRepaint):
            * rendering/RenderInline.cpp:
            (WebCore::RenderInline::mapLocalToContainer):
            * rendering/RenderInline.h:
            * rendering/svg/RenderSVGForeignObject.cpp:
            (WebCore::RenderSVGForeignObject::mapLocalToContainer):
            * rendering/svg/RenderSVGForeignObject.h:
            * rendering/svg/RenderSVGInline.cpp:
            (WebCore::RenderSVGInline::mapLocalToContainer):
            * rendering/svg/RenderSVGInline.h:
            * rendering/svg/RenderSVGModelObject.cpp:
            (WebCore::RenderSVGModelObject::mapLocalToContainer):
            * rendering/svg/RenderSVGModelObject.h:
            * rendering/svg/RenderSVGRoot.cpp:
            (WebCore::RenderSVGRoot::mapLocalToContainer):
            * rendering/svg/RenderSVGRoot.h:
            * rendering/svg/RenderSVGText.cpp:
            (WebCore::RenderSVGText::mapLocalToContainer):
            * rendering/svg/RenderSVGText.h:
            * rendering/svg/SVGRenderSupport.cpp:
            (WebCore::SVGRenderSupport::mapLocalToContainer):
            * rendering/svg/SVGRenderSupport.h:
            Pipe wasFixed through where needed.

    2011-06-25  Joseph Pecoraro  <joepeck@webkit.org>

            Unreviewed build fix.

            Use UNUSED_PARAM on the correct param!

            * rendering/RenderView.cpp:
            (WebCore::RenderView::mapLocalToContainer):

2011-06-25  Antti Koivisto  <antti@apple.com>

        Reviewed by Ian Henderson.

        <rdar://problem/9673636> Move grid specific function from TileCache to TileGrid

        We have a bunch of code in TileCache that really belongs the the TileGrid. 
        Move it to make the code more understandable and hackable.

        - move createTiles(), dropsTilesBasedOnVisibleRect(), adjustForPageBounds() and transformed visible rect function to TileGrid
        - make a bunch of function in TileGrid private since they are no longer called from outside
        - remove TileCache::keepingTilesInActiveGrid() function in favor of a boolean on grid
        - drop visibleRect parameters from several functions calling to grid
        - remove dumpTilesForGrid()

        * platform/iphone/TileCache.h:
        * platform/iphone/TileCache.mm:
        (WebCore::TileCache::visibleRectInLayer):
        (WebCore::TileCache::doLayoutTiles):
        (WebCore::TileCache::setKeepsZoomedOutTiles):
        (WebCore::TileCache::layoutTilesNow):
        (WebCore::TileCache::removeAllNonVisibleTiles):
        (WebCore::TileCache::finishedCreatingTiles):
        (WebCore::TileCache::tileCreationTimerFired):
        (WebCore::TileCache::invalidateTiles):
        (WebCore::TileCache::updateTilingMode):
        (WebCore::TileCache::dumpTiles):
        * platform/iphone/TileGrid.h:
        (WebCore::TileGrid::dropsTilesBasedOnVisibleRect):
        (WebCore::TileGrid::setDropsTilesBasedOnVisibleRect):
        * platform/iphone/TileGrid.mm:
        (WebCore::canTileAggressively):
        (WebCore::TileGrid::TileGrid):
        (WebCore::TileGrid::visibleRect):
        (WebCore::TileGrid::dropDistantTilesExceedingCapacity):
        (WebCore::TileGrid::adjustForPageBounds):
        (WebCore::TileGrid::calculateCoverAndKeepRectForMemoryLevel):
        (WebCore::TileGrid::tileDistance2):
        (WebCore::TileGrid::createTiles):
        (WebCore::TileGrid::dumpTiles):

2011-06-24  Adele Peterson  <adele@apple.com>

        Reviewed by Scott Grant.

        WebCore part of fix for <rdar://problem/6706307>
        Setting "-webkit-user-select: none" does not always prevent cut-and-paste UI from appearing

        * bindings/objc/DOMUIKitExtensions.h:
        * bindings/objc/DOMUIKitExtensions.mm: (-[DOMRange firstNode]): Expose this Range method.

2011-06-24  Dean Jackson  <dino@apple.com>

        Reviewed by Jer Noble.

        <rdar://problem/7648874> Relax the gesture event origin restriction on video.webkitEnterFullScreen()

        The merge from ToT regressed this setting, because the default value
        of m_restrictions changed from NoRestrictions to
        RequireUserGestureForFullScreenRestriction. Simply set NoRestrictions
        as the else clause in the iOS specific code.

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::HTMLMediaElement):

2011-06-24  Antti Koivisto  <antti@apple.com>

        Reviewed by Ian Henderson.

        <rdar://problem/9651791> Wrong tile grid is active while zooming

        Keep current scale in TileCache, get rid of the m_activeTileGrid field.
        Instead activeTileGrid() function returns the currently active grid,
        based on current scale and other factors (if we are zooming or not).

        * platform/iphone/TileCache.h:
        * platform/iphone/TileCache.mm:
        (WebCore::TileCache::TileCache):
        (WebCore::TileCache::activeTileGrid):
        (WebCore::TileCache::adjustForPageBounds):
        (WebCore::TileCache::doLayoutTiles):
        (WebCore::TileCache::commitScaleChange):
        (WebCore::TileCache::bringActiveTileGridToFront):
        (WebCore::TileCache::keepingTilesInActiveGrid):
        (WebCore::TileCache::layoutTilesNow):
        (WebCore::TileCache::layoutTilesNowForRect):
        (WebCore::TileCache::removeAllNonVisibleTiles):
        (WebCore::TileCache::createTiles): Don't drop zoomed in tiles during zooming.
        (WebCore::TileCache::invalidateTiles):
        (WebCore::TileCache::setTilingMode): Bring active tile grid to front after zooming is done.
        (WebCore::TileCache::currentScale):
        (WebCore::TileCache::dumpTilesForGrid):

2011-06-24  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Antti Koivisto.

        <rdar://problem/9630006> Odd fixed position scrolling on http://livingsocial.com page

        When a fixed-position layer has a compositing ancestor that is not the RenderView,
        the offset used to position the layer during scrolling was incorrect.
        
        Fix by simply using the layer's position as the offset we store for updating
        the layer positions during scrolling.
        
        Not LayoutTestable because the issue is only apparent during interactive scrolling.

        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::getFixedPositionLayerSizing):

2011-06-24  Eric Carlson  <eric.carlson@apple.com>

        <rdar://problem/9519092> Media files don't work with application cache

        Merged ToT WebKit r88958.

    2011-06-15  Eric Carlson  <eric.carlson@apple.com>

            Reviewed by Alexey Proskuryakov.

            MediaPlayerPrivate should not know about application cache
            https://bugs.webkit.org/show_bug.cgi?id=62648

            Test: http/tests/appcache/video.html

            * html/HTMLMediaElement.cpp:
            (WebCore::createFileURLForApplicationCacheResource): Create a url for a file
                in the application cache folder.
            (WebCore::HTMLMediaElement::loadResource): Change url to point to file in the application
                cache if necessary.
            (WebCore::HTMLMediaElement::mediaLoadingFailed): Split failure logic out of setNetworkState
                so it can be called when asked to load a file that is not in the application cache.
            (WebCore::HTMLMediaElement::setNetworkState): Move failure logic out to mediaLoadingFailed.
            * html/HTMLMediaElement.h:

            * platform/graphics/avfoundation/MediaPlayerPrivateAVFoundation.cpp:
            (WebCore::MediaPlayerPrivateAVFoundation::setPreload): Remove app cache logic.
            * platform/graphics/avfoundation/MediaPlayerPrivateAVFoundation.h:

            * platform/graphics/avfoundation/MediaPlayerPrivateAVFoundationObjC.h:
            * platform/graphics/avfoundation/MediaPlayerPrivateAVFoundationObjC.mm: Ditto.

            * platform/graphics/mac/MediaPlayerPrivateQTKit.h:
            * platform/graphics/mac/MediaPlayerPrivateQTKit.mm:
            (WebCore::MediaPlayerPrivateQTKit::loadInternal): Ditto.

            * platform/graphics/win/MediaPlayerPrivateQuickTimeVisualContext.cpp:
            (WebCore::MediaPlayerPrivateQuickTimeVisualContext::loadInternal): Ditto.

2011-06-24  Simon Fraser  <simon.fraser@apple.com>

    <rdar://problem/9668671> Changing WebkitTransformOriginZ is animated on Mac and iOS (63159)
    
    Merge WebKit ToT r89651.
    
    2011-06-23  Simon Fraser  <simon.fraser@apple.com>
    
            Reviewed by Dan Bernstein.
    
            Need to turn off default animations for anchorPointZ in PlatformCALayer
            https://bugs.webkit.org/show_bug.cgi?id=63159
            
            When the z-component of transform-origin changed, we ran an implicit
            animation of anchorPointZ on the CALayer. Turn this off.
    
            Test: transforms/3d/general/transform-origin-z-change.html
    
            * platform/graphics/ca/mac/PlatformCALayerMac.mm:
            (nullActionsDictionary):
    
2011-06-22  Ian Henderson  <ianh@apple.com>

        <rdar://problem/9657451> Zoomed out tiles aren't dropped unless you're zoomed in

        Reviewed by David Carson and Antti Koivisto.

        Since we don't drop zoomed out tiles using dropTilesOutsideRect, we
        need to call dropDistantTilesExceedingCapacity on the zoomed out tiles
        no matter what the active tile grid is.

        * platform/iphone/TileCache.mm:
        (WebCore::TileCache::createTiles):

2011-06-23  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Carson.

        <rdar://problem/9665451> ASSERT isMainThread in WebCore::LineBreakIteratorPool::sharedPool

        The new, stronger, ASSERT was firing because text drawing
        functions were taking this path. Text drawing is meant to
        be thread safe, so remove the assumption we are on a
        particular thread and keep the initialization thread safe.

        * platform/text/TextBreakIteratorICU.cpp:
        (WebCore::LineBreakIteratorPool::sharedPool): initialize
        inside a dispatch_once block.

2011-06-23  Eric Carlson  <eric.carlson@apple.com>

        Reviewed by Simon Fraser.

        <rdar://problem/9582090> REGRESSION: Can't play embedded audio content at http://5by5.tv/talkshow/46

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::getPluginProxyParams): Don't send a url to the plug-in as
            part of the initial arguments, it screws up the processing of <source> elements
            and we always send the correct url after the plug-in has been instantiated.

2011-06-23  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by NOBODY (OOPS!).

        <rdar://problem/9640905> "-webkit-overflow-scroll: touch" with overflow:hidden descendent incorrectly positions child content
        
        When an accelerated-scrolling element has a child with overflow:hidden which is
        not a stacking context, the position of that child's "ancestor clipping layer" was
        incorrect; it was computed relative to the scrolling element's outer layer,
        rather than the layer that encloses the scrolled content.
        
        Fix by moving the code that computes graphicsLayerParentLocation for
        scrolling above the code that positions the ancestor clipping layer.

        Test: platform/iphone-simulator/iphone/scrolling/overflow-scrolling-ancestor-clip.html

        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::updateGraphicsLayerGeometry):

2011-06-23  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by David Carson.

        <rdar://problem/9663843> "-webkit-overflow-scroll: touch" incorrectly masks child content
        
        If the child of an accelerated-scrolling element has overflow:hidden and is not
        a stacking context, its "ancestor clip" layer should not use the computed parent
        clip rect, since that's only the exposed portion. Instead, use the bounds of the layer;
        the clipping layer will move with the scrolled contents.

        Test: platform/iphone-simulator/iphone/scrolling/overflow-scrolling-ancestor-clip-size.html

        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::updateGraphicsLayerGeometry):
        (WebCore::RenderLayerBacking::paintIntoLayer):

2011-06-23  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Dan Bernstein.

        <rdar://problem/9640905> "-webkit-overflow-scroll: touch" with overflow:hidden descendent incorrectly positions child content
        
        When an accelerated-scrolling element has a child with overflow:hidden which is
        not a stacking context, the position of that child's "ancestor clipping layer" was
        incorrect; it was computed relative to the scrolling element's outer layer,
        rather than the layer that encloses the scrolled content.
        
        Fix by moving the code that computes graphicsLayerParentLocation for
        scrolling above the code that positions the ancestor clipping layer.

        Test: platform/iphone-simulator/iphone/scrolling/overflow-scrolling-ancestor-clip.html

        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::updateGraphicsLayerGeometry):

2011-06-23  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by Ian Henderson.

        <rdar://problem/9665451> ASSERT isMainThread in WebCore::LineBreakIteratorPool::sharedPool

        * platform/text/TextBreakIteratorICU.cpp:
        (WebCore::LineBreakIteratorPool::sharedPool): This function may
        be called after a delegate message has been sent to the Main Thread.
        Doing the normal iOS procedure of assuring that the WebThread
        is locked or disabled and we are on the WebThread or the Main
        Thread fixes the problem.

2011-06-23  Andy Estes  <aestes@apple.com>

        Reviewed by Simon Fraser.

        <rdar://problem/9617150> OKCupid App displays totally incorrectly (add
        app specific workaround now that transforms affect scrollHeight)

        * WebCore.exp.in: Export __ZN7WebCore20applicationIsOkCupidEv.
        * page/Settings.cpp:
        (WebCore::Settings::Settings): Default
        m_shouldTransformsAffectOverflow to true.
        * page/Settings.h:
        (WebCore::Settings::setShouldTransformsAffectOverflow):
        (WebCore::Settings::shouldTransformsAffectOverflow):
        * platform/RuntimeApplicationChecksIPhone.h:
        * platform/RuntimeApplicationChecksIPhone.mm:
        (WebCore::applicationIsOkCupid): Check if the embedding app is OkCupid.
        * rendering/RenderBox.cpp:
        (WebCore::RenderBox::layoutOverflowRectForPropagation): Do not take
        transformed elements into account when laying out an overflow rect if
        Settings::shouldTransformsAffectOverflow is false. This yields the
        behavior of pre-Telluride WebKit, which the OkCupid app expects for
        proper layout.

2011-06-22  Joseph Pecoraro  <joepeck@webkit.org>

        <rdar://problem/8749818> Improve PageCache "instant back" by caching pages with Geolocation

        Merged ToT WebKit r89316.

    2011-06-20  Joseph Pecoraro  <joepeck@webkit.org>

            Reviewed by Simon Fraser.

            Minimize memory due to layer backing stores for pages in the Page Cache
            https://bugs.webkit.org/show_bug.cgi?id=62675

            When a page enters the page cache there is now an option on
            the PageCache singleton to clear the backing stores and layers
            of the cached page. This can be useful to minimize the amount
            of memory the stored page consumes.

            This only affects memory usage and is disabled by default, so no test.

            * history/CachedFrame.h:
            * history/CachedFrame.cpp:
            (WebCore::CachedFrameBase::CachedFrameBase):
            Save whether or not the page had composited content or not
            in a new instance variable, m_isComposited.

            (WebCore::CachedFrameBase::restore):
            When restoring, rebuild the compositing tree if it may have
            been destroyed.

            (WebCore::CachedFrame::CachedFrame):
            When saving, clear the backing stores if the page is in
            compositing mode, and the PageCache setting is enabled.
        
            * history/PageCache.cpp:
            (WebCore::PageCache::PageCache):
            * history/PageCache.h:
            (WebCore::PageCache::shouldClearBackingStores):
            (WebCore::PageCache::setShouldClearBackingStores):
            A setting to opt-in to the new behavior of clearing
            the backing stores.

            * page/FrameView.h:
            * page/FrameView.cpp:
            (WebCore::FrameView::clearBackingStores):
            (WebCore::FrameView::restoreBackingStores):
            To clear all backing stores we disable compositing
            for the frame, to detach the root platform layer,
            and recursively clear backing stores from the root
            layer of the FrameView.

            * rendering/RenderLayer.h:
            * rendering/RenderLayer.cpp:
            (WebCore::RenderLayer::clearBackingIncludingDescendants):
            Recursively call clearBacking.

2011-06-22  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by Ian Henderson.

        <rdar://problem/8749818> Improve PageCache "instant back" by caching pages with Geolocation

        Test: platform/iphone-simulator/iphone/fast/history/page-cache-geolocation.html

        Allow caching a page that is using geolocation. This is sufficient
        for pages that have access navigator.geolocation and used
        getCurrentPosition. Pages which have an active watchPosition object
        are not cached because that is an Active DOM Object that reports
        it cannot be suspended. That can be investigated separately.

        * history/PageCache.cpp:
        (WebCore::logCanCacheFrameDecision):
        (WebCore::PageCache::canCachePageContainingThisFrame):
        Log and cache pages using geolocation on iOS.

2011-06-23  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/8948904> Have sensible default line-break behavior for CJK scripts

        Merged ToT WebKit r89592.

    2011-06-23  Dan Bernstein  <mitz@apple.com>

        Reviewed by Alexey Proskuryakov.

        Make line breaking obey the -webkit-locale property
        https://bugs.webkit.org/show_bug.cgi?id=63209

        Test: platform/mac/fast/text/line-break-locale.html

        * platform/text/TextBreakIterator.h:
        (WebCore::LazyLineBreakIterator::LazyLineBreakIterator): Take an optional locale identifier and
        initialize the m_locale member.
        (WebCore::LazyLineBreakIterator::get): Pass the locale to acquireLineBreakIterator().
        (WebCore::LazyLineBreakIterator::reset): Pass the locale to releaseLineBreakIterator() and update
        the m_locale member.
        * platform/text/TextBreakIteratorICU.cpp:
        (WebCore::LineBreakIteratorPool::sharedPool): Return a shared instance.
        (WebCore::LineBreakIteratorPool::take): Returns a text iterator for the given locale, either a newly-
        created one, or an existing one from the pool.
        (WebCore::LineBreakIteratorPool::put): Puts an iterator back into the pool, removing the least-recently used
        one if needed.
        (WebCore::LineBreakIteratorPool::LineBreakIteratorPool):
        (WebCore::acquireLineBreakIterator): Changed to take an optional local identifier, and to use the pool.
        (WebCore::releaseLineBreakIterator): Changed to use the pool.
        * platform/text/brew/TextBreakIteratorBrew.cpp:
        (WebCore::acquireLineBreakIterator): Updated for new parameter.
        * platform/text/gtk/TextBreakIteratorGtk.cpp:
        (WebCore::acquireLineBreakIterator): Ditto.
        * platform/text/qt/TextBreakIteratorQt.cpp:
        (WebCore::acquireLineBreakIterator): Ditto.
        * platform/text/wince/TextBreakIteratorWinCE.cpp:
        (WebCore::acquireLineBreakIterator): Ditto.
        * rendering/RenderBlockLineLayout.cpp:
        (WebCore::RenderBlock::LineBreaker::nextLineBreak): Use the locale from the style for the line break
        iterator.
        * rendering/RenderText.cpp:
        (WebCore::RenderText::computePreferredLogicalWidths): Ditto.

2011-06-23  Alexey Proskuryakov  <ap@apple.com>

        <rdar://problem/9471531> Can't select single unicode character

        Address a post-landing review comment.

        * platform/text/mac/TextBoundaries.mm: (WebCore::isWordDelimitingCharacter): I meant to say
        "ampersand", not "apostrophe".

2011-06-22  Sam Weinig  <sam@webkit.org>

        Final part of:
        <rdar://problem/9558704> Telluride9A236: Mail crashes whenever I open a specific message

        Merge WebKit ToT r89522.

        2011-06-22  Sam Weinig  <sam@webkit.org>
            
            Reviewed by Adam Barth.
            
            Lower HTML parser DOM depth limit to 2048
            https://bugs.webkit.org/show_bug.cgi?id=63219
            
            Lower the default depth limit from 4096 to 2048. There isn't a good
            reason to have such pathologically nested content, and by-and-large,
            the rendering code is not setup to support it that well. Adding this
            aggressive limit now will allow us to see if anything breaks in the
            nightlies.
            
            * page/Settings.h:

2011-06-22  Sam Weinig  <sam@webkit.org>

        Part of:
        <rdar://problem/9558704> Telluride9A236: Mail crashes whenever I open a specific message

        Merge WebKit ToT r89453.

        2011-06-22  Sam Weinig  <sam@webkit.org>
            
            Reviewed by Adam Barth.
            
            HTML parser should limit element depth of produced tree
            https://bugs.webkit.org/show_bug.cgi?id=63082
            
            Test by:
                fast/parser/block-nesting-cap.html
                fast/parser/element-nesting-cap.html
            
            * html/parser/HTMLConstructionSite.cpp:
            (WebCore::HTMLConstructionSite::attach):
            (WebCore::HTMLConstructionSite::HTMLConstructionSite):
            * html/parser/HTMLConstructionSite.h:
            Limit the DOM tree depth by turning attempts to add a child passed a certain
            threshold (configurable by Settings::maximumDOMTreeDepth) into a sibling.
            
            * html/parser/HTMLDocumentParser.cpp:
            (WebCore::HTMLDocumentParser::HTMLDocumentParser):
            (WebCore::HTMLDocumentParser::maximumDOMTreeDepth):
            * html/parser/HTMLDocumentParser.h:
            Pass the maximumDOMTreeDepth to the TreeBuilder.
            
            * html/parser/HTMLElementStack.cpp:
            (WebCore::HTMLElementStack::HTMLElementStack):
            (WebCore::HTMLElementStack::popAll):
            (WebCore::HTMLElementStack::insertAbove):
            (WebCore::HTMLElementStack::pushCommon):
            (WebCore::HTMLElementStack::popCommon):
            (WebCore::HTMLElementStack::removeNonTopCommon):
            * html/parser/HTMLElementStack.h:
            (WebCore::HTMLElementStack::size):
            Keep track of the size of the element stack.
            
            * html/parser/HTMLTreeBuilder.cpp:
            (WebCore::HTMLTreeBuilder::HTMLTreeBuilder):
            * html/parser/HTMLTreeBuilder.h:
            (WebCore::HTMLTreeBuilder::create):
            Pass the maximumDOMTreeDepth to the construction site.
            
            * page/Settings.cpp:
            (WebCore::Settings::Settings):
            * page/Settings.h:
            (WebCore::Settings::setMaximumHTMLParserDOMTreeDepth):
            (WebCore::Settings::maximumHTMLParserDOMTreeDepth):
            Add a setting to control the maximum DOM tree depth that the parser will produce.

2011-06-22  Ian Henderson  <ianh@apple.com>

        <rdar://problem/9431258> N90/9A213 When emailing a photo from camera app the photo flashes

        Reviewed by David Carson.

        With Whippet, CG drawing is performed on a background thread.  This
        means that drawing may not be finished by the end of our drawLayer
        method.

        CA will, however, block the web thread from finishing its commit until
        all the drawing commands in the commit have completed.  Use a
        zero-delay performSelector: to send the callback on the next turn of
        the run loop, after the commit has finished.

        * platform/iphone/TileCache.mm:
        (WebCore::TileCache::drawLayer):

2011-06-22  Ian Henderson  <ianh@apple.com>

        <rdar://problem/9655965> Tile cache dump should include IOSurfaceIDs

        Reviewed by David Carson.

        Harper's adding the surface ID (as well as some other information) to
        the CABackingStore description string.  Print the description string
        of each tile's contents.

        * platform/iphone/TileGrid.mm:
        (WebCore::TileGrid::dumpTiles):

2011-06-22  Anders Carlsson  <andersca@apple.com>

        Reviewed by Sam Weinig.

        <rdar://problem/9357642> ASSERT(m_suspended) in WebCore::SuspendableTimer::resume on wsj.com

        * dom/Document.cpp:
        (WebCore::Document::Document):
        If the frame of this document has its timers suspended, we need to suspend the event queue timer.

        * dom/EventQueue.cpp:
        (WebCore::EventQueue::suspendPendingEventTimer):
        * dom/EventQueue.h:
        Add new helper function for suspending the pending event timer.

2011-06-22  Eric Carlson  <eric.carlson@apple.com>

        Reviewed by David Carson.

        <rdar://problem/9386359> <video> tag starts playback on Back-Forward in Safari

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::load): Call prepareToPlay() instead of m_player->prepareToPlay().
        (WebCore::HTMLMediaElement::prepareForLoad): Ditto.
        (WebCore::HTMLMediaElement::resume): Pass false to load() instead of processingUserGesture()
            because we don't care if the page was reloaded as a result of a user gesture.

2011-06-22  Beth Dakin  <bdakin@apple.com>

    <rdar://problem/9457997> Label's border-radius doesn't blend correctly
    with background in App Store's account info sheet

    Merge WebKit ToT r89475.

    2011-06-22  Beth Dakin  <bdakin@apple.com>

        Reviewed by Simon Fraser.

        https://bugs.webkit.org/show_bug.cgi?id=63174
        Don't draw the borders as one path unless there really are 4 borders
        -and corresponding-
        <rdar://problem/9457997>

        If any of the border edges have no width, then allEdgesVisible should 
        be set to false since borders without width will not be visible.
        * rendering/RenderBoxModelObject.cpp:
        (WebCore::RenderBoxModelObject::paintBorder):

2011-06-22  Matthew Delaney  <mdelaney@apple.com>

        <rdar://problem/9616851> REGRESSION: GUIMark3 FPS/start spans don't display

        Merge WebKit ToT 89474.

    2011-06-22  Matthew Delaney  <mdelaney@apple.com>

        Reviewed by Oliver Hunt.

        Canvas in layer obscures overlapping span
        https://bugs.webkit.org/show_bug.cgi?id=63161

        Test: compositing/layer-creation/spanOverlapsCanvas.html

        * rendering/RenderLayer.cpp: Added checks for canvas to be layered properly.
        (WebCore::RenderLayer::shouldBeNormalFlowOnly):
        (WebCore::RenderLayer::isSelfPaintingLayer):

2011-06-22  Alexey Proskuryakov  <ap@apple.com>

        Reviewed by Dan Bernstein.

        <rdar://problem/9471531> Can't select single unicode character

        This fixes selection inside sequences of delimiter characters (a sequence of emoji or just
        "+++++++++++++"). On Durango and Telluride, trying to select inside such just brings back
        a callout bar repeatedly.

        * platform/text/mac/TextBoundaries.mm:
        (WebCore::isWordDelimitingCharacter): Added a comment explaining why '&' is an exception.
        (WebCore::findSimpleWordBoundary): Made simple case a little more reasonable by not allowing
        it to return empty ranges.

2011-06-22  Simon Fraser  <simon.fraser@apple.com>

        Prep work for:
        <rdar://problem/9223956> REGRESSION (Durango-Telluride): "Inside nytimes.com" layer is blurrier than other content (9A177)
        
        Merge WebKit ToT r89441.

    2011-06-22  Simon Fraser  <simon.fraser@apple.com>
    
            Reviewed by Dan Bernstein.
    
            Update position, bounds and anchor point in GraphicsLayerCA all at once
            https://bugs.webkit.org/show_bug.cgi?id=63148
    
            Since position, bounds and anchor point are inter-dependent, avoid
            redundant work by simply updating them all at the same time.
            
            No behavior changes, so no new tests.
    
            * platform/graphics/ca/GraphicsLayerCA.cpp:
            (WebCore::GraphicsLayerCA::setPosition):
            (WebCore::GraphicsLayerCA::setAnchorPoint):
            (WebCore::GraphicsLayerCA::setSize):
            (WebCore::GraphicsLayerCA::setBoundsOrigin):
            (WebCore::GraphicsLayerCA::setAllowTiledLayer):
            (WebCore::GraphicsLayerCA::commitLayerChangesBeforeSublayers):
            (WebCore::GraphicsLayerCA::updateGeometry):
            (WebCore::GraphicsLayerCA::ensureStructuralLayer):
            (WebCore::GraphicsLayerCA::swapFromOrToTiledLayer):
            * platform/graphics/ca/GraphicsLayerCA.h:
    

2011-06-21  Anders Carlsson  <andersca@apple.com>

        Reviewed by Joe Pecoraro.

        <rdar://problem/9560444> Web archive resource loads are scheduled together with network loads, slowing down loading

        When scheduling the load of a resource, check if that resource is a web archive subresource and load it directly,
        bypassing the per-host queue, since we'll never touch the network when loading it.

        * loader/ResourceLoadScheduler.cpp:
        (WebCore::ResourceLoadScheduler::scheduleLoad):
        Merge ToT WebKit r89303, and use the iOS specific request + startLoading member function.

        * loader/ResourceLoader.h:
        (WebCore::ResourceLoader::originalRequest):
        Add a getter for the original request, defaults to returning the "normal" request.

        * loader/SubresourceLoader.h:
        (WebCore::SubresourceLoader::originalRequest):
        Return the original request.

    2011-06-20  Anders Carlsson  <andersca@apple.com>

            Reviewed by Sam Weinig.

            Web archive resource loads are scheduled together with network loads
            https://bugs.webkit.org/show_bug.cgi?id=63024
            <rdar://problem/9508564>

            If the resource being loaded is loaded from a web archive we don't need to schedule the load
            since it won't touch the network.

            * loader/ResourceLoadScheduler.cpp:
            (WebCore::ResourceLoadScheduler::scheduleLoad):

2011-06-21  Ian Henderson  <ianh@apple.com>

        <rdar://problem/9582832> Web content does not draw

        Reviewed by David Carson.

        In order to help track down this bug, add some logging to TileCache.
        We output each tile with its index and frame, marking the currently
        visible tiles (from the tile cache's perspective) with a '*'.

        We also note whether there is a cached visible rect, and output the
        "real" visible rect in this case by setting the cached rect to
        CGRectNull temporarily.

        Here is some example output:

        =================
        visibleRect = [ 318.0 1003.0  768.0  928.0]
        =================
        ZOOMED OUT
        transformed visibleRect = [   183    578    444    536]
        #1   (  1   1) - [   512    512    255    512] *
        #2   (  1   8) - [   512   4096    255    512]
        #3   (  0   1) - [     0    512    512    512] *
        #4   (  0   4) - [     0   2048    512    512]
        #5   (  0   6) - [     0   3072    512    512]
        #6   (  1   3) - [   512   1536    255    512]
        #7   (  1   7) - [   512   3584    255    512]
        #8   (  0   0) - [     0      0    512    512]
        #9   (  0   7) - [     0   3584    512    512]
        #10  (  1   6) - [   512   3072    255    512]
        #11  (  0   8) - [     0   4096    512    512]
        #12  (  1   4) - [   512   2048    255    512]
        #13  (  1   2) - [   512   1024    255    512] *
        #14  (  1   5) - [   512   2560    255    512]
        #15  (  0   5) - [     0   2560    512    512]
        #16  (  0   3) - [     0   1536    512    512]
        #17  (  1   0) - [   512      0    255    512]
        =================
        ZOOMED IN
        <ACTIVE>
        transformed visibleRect = [   318   1003    768    928]
        #1   (  1   3) - [   190   1467    512    512] *
        #2   (  2   3) - [   702   1467    512    512] *
        #3   (  2   2) - [   702    955    512    512] *
        #4   (  1   2) - [   190    955    512    512] *
        =================

        * platform/iphone/TileCache.h:
        * platform/iphone/TileCache.mm:
        (WebCore::TileCache::dumpTiles):
        (WebCore::TileCache::dumpTilesForGrid):
        * platform/iphone/TileGrid.h:
        * platform/iphone/TileGrid.mm:
        (WebCore::TileGrid::dumpTiles):
        * wak/WAKWindow.h:
        * wak/WAKWindow.mm:
        (-[WAKWindow dumpTiles]):

2011-06-22  Eric Carlson  <eric.carlson@apple.com>

        Reviewed by Antti Koivisto.

        <rdar://problem/8730500> HTML video elements don't loop in AdSheet

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::deliverNotification): Pause playback when we get the "ended" 
            notification and looping is not enabled.

        * platform/graphics/iphone/MediaPlayerPrivateIPhone.mm:
        (WebCore::MediaPlayerPrivateiPhone::deliverNotification): Add some logging.

2011-06-21  Matthew Delaney  <mdelaney@apple.com>

        <rdar://problem/9568805> REGRESSION: Tile paints with lighter text in App Store updates tab (9A238)

        Merged ToT WebKit r89397.

    2011-06-21  Matthew Delaney  <mdelaney@apple.com>

        Reviewed by Simon Fraser.

        beginTransparencyLayer leaves context color out of sync, bleeds color into text
        https://bugs.webkit.org/show_bug.cgi?id=63093

        Test: fast/css/color-leakage.html

        * platform/graphics/cg/GraphicsContextCG.cpp: Swap out CGContextSave/Restore with
        GraphicsContext::save/restore to keep the context in sync with its CG context
        (WebCore::GraphicsContext::beginTransparencyLayer): Added save(), removed redundant calls.
        (WebCore::GraphicsContext::endTransparencyLayer): Added restore(), removed redundant calls.

2011-06-21  Dan Bernstein  <mitz@apple.com>

        Reviewed by Simon Fraser.

        <rdar://problem/7024375> Pelephone:Password input in webpages for Hebrew incorrect alignment

        * rendering/RenderTextControl.cpp:
        (WebCore::RenderTextControl::adjustInnerTextStyle): Force the direction of password text fields
        to LTR, but preserve their intended text alignment. Since password input is restricted to LTR
        (and neutral) characters, this ensures that the characters appear to be typed from left to right,
        with the unmasked (last-typed) character always appearing rightmost.

2011-06-21  Alexey Proskuryakov  <ap@apple.com>

        A step towards <rdar://problem/9471531> Can't select single unicode character

        Merged ToT WebKit r89322.

    2011-06-20  Alexey Proskuryakov  <ap@apple.com>

        Reviewed by Darin Adler.

        startWordBoundary() in visible_units.cpp assumes that all characters are 16 bit
        https://bugs.webkit.org/show_bug.cgi?id=63027

        No new tests, because I don't see this affect any webkit.org ports.

        * editing/visible_units.cpp: (WebCore::startWordBoundary): Previous offset is not just minus
        one - we need to use a proper macro to iterate.

2011-06-21  Justin Garcia  <justin.garcia@apple.com>

        Reviewed by David Carson.

        <rdar://problem/9619891> Tapping Done after dictating into web form removes the caret but doesn't dismiss the keyboard. Tapping Done again crashes Safari.

        Dictating into web forms was mostly broken because the helper function that DictateCommand
        uses to insert phrases, CompositeCommand::inputText, does not set ending selections correctly.
        It incorrectly assumes that the scope for selection indices is the entire document. This is 
        not the case for web form fields because they use a shadow DOM.

        I've fixed the helper function inputText was using to create selection indices, indexForVisiblePosition, 
        and filed:

        https://bugs.webkit.org/show_bug.cgi?id=62922

        to merge the changes to OpenSource. No regression test is possible for this change because at this
        time there are no commands that use indexForVisiblePosition that can be performed inside web forms
        in Open Source. Dictation regression tests are coming though:

        <rdar://problem/9600517> Add dictation webkit editing tests

        I've put inputText in PLATFORM(IOS) guards, since it is unused in the Open Source repository. I filed:

        https://bugs.webkit.org/show_bug.cgi?id=62921

        for me to remove it.

        * editing/CompositeEditCommand.cpp:
        (WebCore::CompositeEditCommand::inputText):
        * editing/CompositeEditCommand.h:
        * editing/htmlediting.cpp:
        (WebCore::indexForVisiblePosition):
        * editing/htmlediting.h:

2011-06-20  Andy Estes  <aestes@apple.com>

        <rdar://problem/9510987> CrashTracer: [USER] 1 crash in MobileSafari at WebCore: WebCore::isLetterMatchIgnoringCase + 134 (61572)

        Merged ToT WebKit r89336.
        
    2011-06-20  Andy Estes  <aestes@apple.com> 

     	Reviewed by Darin Adler. 

     	KURL::protocolIs(const char* protocol) asserts in Debug builds with 
     	valid protocols 
     	https://bugs.webkit.org/show_bug.cgi?id=61572 

     	No new tests. No code currently calls protocolIs() with a protocol that 
     	contains a non-letter character. 

     	* platform/KURL.cpp: 
     	(WebCore::isSchemeCharacterMatchIgnoringCase): A helper function that 
     	compares two characters ignoring case. It assumes (and asserts) that 
     	both characters are valid scheme characters, and that if the second 
     	argument is a letter that it is lowercase. 
     	(WebCore::KURL::protocolIs): Call isSchemeCharacterMatchIgnoringCase() 
     	instead of isLetterMatchIgnoringCase().

2011-06-20  Enrica Casucci  <enrica@apple.com>

        Reviewed by David Carson.

        <rdar://problem/9363944> Misspelled word not marked as misspelled when I insert a space after it.

        The iOS specific code of typingAddedToOpenCommand was calling markMisspellingsAfterTyping before calling
        appliedEditing. The first one creates the mispelling markers and the second one removes them before
        the painting takes place.

        * editing/TypingCommand.cpp:
        (WebCore::TypingCommand::typingAddedToOpenCommand): Removed && !PLATFORM(IOS).

2011-06-20  Pratik Solanki  <psolanki@apple.com>

        Merged ToT WebKit r89300.

        * platform/iphone/WebCoreSystemInterfaceIPhone.mm: Update function pointer definitions.

    2011-06-20  Pratik Solanki  <psolanki@apple.com>

        Reviewed by David Kilzer.

        HTTP pipelining functions on mac should match windows
        https://bugs.webkit.org/show_bug.cgi?id=63012

        Use a CFURLRequestRef instead of NSURLRequest for the HTTP pipelining functions.

        * platform/mac/WebCoreSystemInterface.h:
        * platform/mac/WebCoreSystemInterface.mm:
        * platform/network/mac/ResourceRequestMac.mm:
        (WebCore::ResourceRequest::doUpdateResourceRequest):
        (WebCore::ResourceRequest::doUpdatePlatformRequest):

2011-06-20  Alexey Proskuryakov  <ap@apple.com>

        <rdar://problem/8468873> [MobileSafari]:AB:8C100: Safari search doesn't strip Hamza
        <rdar://problem/8822927> [MobileSafari] CZ 8F147: Search on a webpage in Safari disregards some Czech special characters
    
        Merge ToT WebKit r89181.

    2011-06-17  Alexey Proskuryakov  <ap@apple.com>

        Reviewed by Dan Bernstein. 
 
        https://bugs.webkit.org/show_bug.cgi?id=62913 
        Use ICU search collator when available 
 
        <rdar://problem/8830218> Search on a webpage in Safari conflates some Czech characters 
        <rdar://problem/8468873> Safari search doesn't strip Hamza 
 
        This changes behaviors that depend on system language, and isn't practically testable. 
 
        * editing/TextIterator.cpp: (WebCore::createSearcher): Ask ICU for search collator, if available. 

2011-06-20  Paul Knight  <pknight@apple.com>

        Reviewed by Joseph Pecoraro.

        <rdar://problem/9637279> LegacyNumberInputType needs to override supportsPlaceholder

        * html/LegacyNumberInputType.cpp:
        (WebCore::LegacyNumberInputType::isTextType): Update comment.
        (WebCore::LegacyNumberInputType::supportsPlaceholder): Override and
            return true so the legacy fields will allow placeholders.
        * html/LegacyNumberInputType.h:

2011-06-20  Sam Weinig  <sam@webkit.org>

        <rdar://problem/9464120> REGRESSION (5.0.x-> Jazz): Placeholder not shown for <input type="number"> fields (61095)

        Merge ToT WebKit r89194.

    2011-06-18  Sam Weinig  <sam@webkit.org>
        
        Reviewed by Darin Adler.
        
        REGRESSION (r63854-63958): placeholder not shown for number inputs
        https://bugs.webkit.org/show_bug.cgi?id=61095
        
        Refactor HTMLInputElement supportsPlaceholder support to delegate to the
        InputType. Make BaseTextInputType and NumberInputType return true, matching
        the current HTML5 spec.
        
        * html/BaseTextInputType.cpp:
        (WebCore::BaseTextInputType::supportsPlaceholder):
        * html/BaseTextInputType.h:
        Add override implementation of supportsPlaceholder that returns true.
        
        * html/HTMLInputElement.cpp:
        (WebCore::HTMLInputElement::supportsPlaceholder):
        Delegate to the InputType.
        
        * html/InputType.cpp:
        (WebCore::InputType::supportsPlaceholder):
        * html/InputType.h:
        Add base implementation of supportsPlaceholder that returns false.
        
        * html/NumberInputType.cpp:
        (WebCore::NumberInputType::supportsPlaceholder):
        * html/NumberInputType.h:
        Add override implementation of supportsPlaceholder that returns true.

2011-06-20  Matthew Delaney  <mdelaney@apple.com>

        Reviewed by David Carson.

        <rdar://problem/9540334> LayoutTests/fast/table/border-collapsing/003-vertical.html issue drawing link underline in vertical text

        No new tests. This change fixes fast/table/border-collapsing/003-vertical.html

        * platform/graphics/cg/GraphicsContextCG.cpp:
        (WebCore::GraphicsContext::drawLineForText): The thickness and transparency of the line drawn
        in this method are a function of the scale factor of the text being drawn. When the scale is 
        small, we want to make the line thinner and more transparent so that it doesn't overpower the
        small text it's underlining. Previously, this code calculated the scale by just looking at the
        'a' unit of the transformation matrix which returns the scale in the x direction IF there's no
        rotation/skewing. Since drawing vertical text has a rotation, this fails and thus it's more robust
        to calculate the scale by taking the length of the whole x vector of the matrix - but we only have
        to do this when t.b is non-zero. This however still assumes that the scale is equal in both the x
        and y directions as it did before.

2011-06-17  Enrica Casucci  <enrica@apple.com>

        Reviewed by Justin Garcia and David Carson.

        <rdar://problem/9505785> cut, copy and paste JavaScript event handlers aren't called on iOS when I cut/copy/paste
        <rdar://problem/9622948> Telluride9A244: can't paste into text fields

        Firing of events from Javascript was disabled for iOS because we didn't
        have an implementation for the classes needed to support this feature.
        This patch removes the #!PLATFORM(IOS) around the portions of the Editor code to enable this
        and adds the implementation of the ClipboardIPhone class. The implementation
        provides empty stubs for the methods used to support drag-n-drop, not needed
        on iOS.
        The patch also implements the plainText() method of the PasteboardIPhone that was
        left as empty stub by mistake.

        No new tests. When the editing tests will be enabled this code will be tested adequately.

        * WebCore.xcodeproj/project.pbxproj: Added references to 2 new files.
        * editing/Editor.cpp:
        (WebCore::Editor::canDHTMLPaste):
        (WebCore::Editor::tryDHTMLPaste):
        (WebCore::Editor::dispatchCPPEvent):
        (WebCore::Editor::cut):
        (WebCore::Editor::copy):
        (WebCore::Editor::paste):
        (WebCore::Editor::pasteAsPlainText):
        * editing/Editor.h:
        All these files were modified to remove the #!PLATFORM(IOS)
        * editing/iphone/EditorIPhone.mm:
        (WebCore::Editor::newGeneralClipboard): Added.
        * loader/EmptyClients.h:
        (WebCore::EmptyEditorClient::pasteboardChangeCount): Added editor client
        method to retrieve the pasteboard change count.
        * page/EditorClient.h: Removed supportedPasteboardTypesForCurrentSelection().
        We don't need to ask the client which set is supported based on the selection
        because WebKit has that information already and calls the appropriate methods
        in the Pasteboard class.
        * platform/Pasteboard.h: Added static member to retrieve the list of
        supported pasteboard types.
        * platform/iphone/ClipboardIPhone.h: Added.
        (WebCore::ClipboardIPhone::create):
        * platform/iphone/ClipboardIPhone.mm: Added.
        These are the two new files with the Clipboard implementation for iPhone.
        (WebCore::Clipboard::create):
        (WebCore::ClipboardIPhone::ClipboardIPhone):
        (WebCore::ClipboardIPhone::~ClipboardIPhone):
        (WebCore::ClipboardIPhone::hasData):
        (WebCore::utiTypeFromCocoaType):
        (WebCore::cocoaTypeFromHTMLClipboardType):
        (WebCore::addHTMLClipboardTypesForCocoaType):
        (WebCore::ClipboardIPhone::clearData):
        (WebCore::ClipboardIPhone::clearAllData):
        (WebCore::ClipboardIPhone::getData):
        (WebCore::ClipboardIPhone::setData):
        (WebCore::ClipboardIPhone::types):
        (WebCore::ClipboardIPhone::files):
        (WebCore::ClipboardIPhone::writeRange):
        (WebCore::ClipboardIPhone::writePlainText):
        (WebCore::ClipboardIPhone::writeURL):
        (WebCore::ClipboardIPhone::declareAndWriteDragImage):
        (WebCore::ClipboardIPhone::createDragImage):
        (WebCore::ClipboardIPhone::setDragImage):
        (WebCore::ClipboardIPhone::setDragImageElement):
        * platform/iphone/PasteboardIPhone.mm:
        (WebCore::Pasteboard::plainText): Added missing implementation.
        (WebCore::Pasteboard::supportedPasteboardTypes): Added.
        (WebCore::Pasteboard::documentFragmentForPasteboardItemAtIndex): Modified to use supportedPasteboardTypes
        instead of the editor client callback.

2011-06-17  Paul Knight  <pknight@apple.com>

        Reviewed by Joseph Pecoraro.

        <rdar://problem/9402623> [K94_Telluride203]: Cant enter credit card number beyond 4 digits

        Add a new boolean setting that uses LegacyNumberInputType instead of
        NumberInputType.

        * html/InputType.cpp:
        (WebCore::InputType::create): Use the LegacyNumberInputType in place of
            NumberInputType if settings says we should.
        * page/Settings.cpp: Add a new boolean setting
            useLegacyNumberInputFieldFormatting, which defaults to false.
        (WebCore::Settings::Settings):
        * page/Settings.h:
        (WebCore::Settings::setUseLegacyNumberInputFieldFormatting):
        (WebCore::Settings::useLegacyNumberInputFieldFormatting):

2011-06-17  Paul Knight  <pknight@apple.com>

        Reviewed by Joseph Pecoraro.

        <rdar://problem/9402623> [K94_Telluride203]: Cant enter credit card number beyond 4 digits

        Add a new InputType called LegacyNumberInputType that emulates the
        behavior of Durango <input type="number"> fields. It behaves as a text
        field but also allows stepUp() and stepDown() to work, while also
        reporting itself as a "number" type field.

        * WebCore.xcodeproj/project.pbxproj:
        * html/LegacyNumberInputType.cpp: Added. A new InputType that mostly
        behaves like a text control but also allows stepUp() and stepDown()
        to work.
        (WebCore::LegacyNumberInputType::create):
        (WebCore::LegacyNumberInputType::formControlType):
        (WebCore::LegacyNumberInputType::shouldRespectSpeechAttribute):
        (WebCore::LegacyNumberInputType::valueAsNumber):
        (WebCore::LegacyNumberInputType::setValueAsNumber):
        (WebCore::LegacyNumberInputType::rangeUnderflow):
        (WebCore::LegacyNumberInputType::rangeOverflow):
        (WebCore::LegacyNumberInputType::supportsRangeLimitation):
        (WebCore::LegacyNumberInputType::minimum):
        (WebCore::LegacyNumberInputType::maximum):
        (WebCore::LegacyNumberInputType::isSteppable):
        (WebCore::LegacyNumberInputType::stepMismatch):
        (WebCore::LegacyNumberInputType::stepBase):
        (WebCore::LegacyNumberInputType::stepBaseWithDecimalPlaces):
        (WebCore::LegacyNumberInputType::defaultStep):
        (WebCore::LegacyNumberInputType::stepScaleFactor):
        (WebCore::LegacyNumberInputType::handleKeydownEvent):
        (WebCore::LegacyNumberInputType::handleWheelEvent):
        (WebCore::LegacyNumberInputType::parseToDouble):
        (WebCore::LegacyNumberInputType::parseToDoubleWithDecimalPlaces):
        (WebCore::LegacyNumberInputType::serialize):
        (WebCore::LegacyNumberInputType::acceptableError):
        (WebCore::LegacyNumberInputType::handleBlurEvent):
        (WebCore::LegacyNumberInputType::isNumberField):
        (WebCore::LegacyNumberInputType::isTextType):
        * html/LegacyNumberInputType.h: Added.
        (WebCore::LegacyNumberInputType::LegacyNumberInputType):

2011-06-17  Shuchen Li  <shuchen_li@apple.com>

        Reviewed by Justin Garcia.

        <rdar://problem/9225595> Shake to Undo lists Bold and Italics as "Undo Change Attribute" rather than "Undo Bold" or "Undo Italics"

        * English.lproj/Localizable.strings: Add undo action name "Bold" and "Italics".
        * editing/EditAction.h: Add enum EditActionBold and EditActionItalics.
        * editing/EditorCommand.cpp: Use EditActionBold and EditActionItalics rather than EditActionChangeAttributes for iOS.
        (WebCore::executeToggleBold):
        (WebCore::executeToggleItalic):

2011-06-16  David Kilzer  <ddkilzer@apple.com>
 
        <rdar://problem/8651381> QuickLook: Safari "Open In" uses random names for PDF documents.

        Reviewed by Joseph Pecoraro.

        This method needs to be exported so we may expose it through
        WebKit in WebNSFileManagerExtras.h.

        * WebCore.exp.in: Export WebCore::createTemporaryDirectory().

2011-06-16  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Antti Koivisto.

        Some work towards:
        <rdar://problem/9438297> "Inside nytimes.com" layer is blurrier than other content (9A177) when under memory pressure

        When zoomed all the way out, never drop the layer contentsScale to try to save memory,
        otherwise we'll get blurry content as soon as the page loads. This requires
        giving access to minimumDocumentScale from GraphicsLayer, which we do via
        the GraphicsLayerClient.
        
        Clean up "scale" terminology on various zoom-related methods,
        to disambiguate the document zoom level and screen resolution.
        
        Remove Frame::contentsScale(), which returned the product of
        zoom level and device screen resolution, and instead do the
        multiplication in each place we set layer contentsScale, since
        this is clearer.

        * page/Frame.h:
        * page/iphone/FrameIPhone.mm:
        (WebCore::Frame::imageFromRect):
        (WebCore::Frame::documentScale):
        (WebCore::Frame::minimumDocumentScale):
        (WebCore::Frame::deviceScaleFactor):
        (WebCore::Frame::documentScaleChanged):
        * platform/graphics/GraphicsLayerClient.h:
        * platform/graphics/ca/GraphicsLayerCA.cpp:
        (WebCore::constrainedContentsScale):
        (WebCore::GraphicsLayerCA::updateContentsScale):
        (WebCore::GraphicsLayerCA::tiledLayerTileSize):
        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::createGraphicsLayer):
        (WebCore::RenderLayerBacking::updateForegroundLayer):
        (WebCore::RenderLayerBacking::updateMaskLayer):
        (WebCore::RenderLayerBacking::updateScrollingLayers):
        (WebCore::RenderLayerBacking::deviceScaleFactor):
        (WebCore::RenderLayerBacking::documentScale):
        (WebCore::RenderLayerBacking::minimumDocumentScale):
        * rendering/RenderLayerBacking.h:
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::deviceScaleFactor):
        (WebCore::RenderLayerCompositor::documentScale):
        (WebCore::RenderLayerCompositor::minimumDocumentScale):
        * rendering/RenderLayerCompositor.h:

2011-06-16  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Antti Koivisto.

        Some work towards:
        <rdar://problem/9438297> "Inside nytimes.com" layer is blurrier than other content (9A177) when under memory pressure

        When zoomed all the way out, never drop the layer contentsScale to try to save memory,
        otherwise we'll get blurry content as soon as the page loads. This requires
        giving access to minimumDocumentScale from GraphicsLayer, which we do via
        the GraphicsLayerClient.
        
        Clean up "scale" terminology on various zoom-related methods,
        to disambiguate the document zoom level and screen resolution.
        
        Remove Frame::contentsScale(), which returned the product of
        zoom level and device screen resolution, and instead do the
        multiplication in each place we set layer contentsScale, since
        this is clearer.

        * page/Frame.h:
        * page/iphone/FrameIPhone.mm:
        (WebCore::Frame::imageFromRect):
        (WebCore::Frame::documentScale):
        (WebCore::Frame::minimumDocumentScale):
        (WebCore::Frame::deviceScaleFactor):
        (WebCore::Frame::documentScaleChanged):
        * platform/graphics/GraphicsLayerClient.h:
        * platform/graphics/ca/GraphicsLayerCA.cpp:
        (WebCore::constrainedContentsScale):
        (WebCore::GraphicsLayerCA::updateContentsScale):
        (WebCore::GraphicsLayerCA::tiledLayerTileSize):
        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::createGraphicsLayer):
        (WebCore::RenderLayerBacking::updateForegroundLayer):
        (WebCore::RenderLayerBacking::updateMaskLayer):
        (WebCore::RenderLayerBacking::updateScrollingLayers):
        (WebCore::RenderLayerBacking::deviceScaleFactor):
        (WebCore::RenderLayerBacking::documentScale):
        (WebCore::RenderLayerBacking::minimumDocumentScale):
        * rendering/RenderLayerBacking.h:
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::deviceScaleFactor):
        (WebCore::RenderLayerCompositor::documentScale):
        (WebCore::RenderLayerCompositor::minimumDocumentScale):
        * rendering/RenderLayerCompositor.h:

2011-06-16  David Kilzer  <ddkilzer@apple.com>

        Extract createTemporaryFileForQuickLook() to implement better error handling

        Reviewed by Joseph Pecoraro.

        * platform/network/mac/ResourceHandleMac.mm:
        (createTemporaryFileForQuickLook): Extracted from
        -[WebCoreResourceHandleAsDelegate connection:didReceiveResponse:]
        with additional error checking and improved variable names.
        Returns nil when an error occurs.
        (-[WebCoreResourceHandleAsDelegate connection:didReceiveResponse:]):
        Added assertions that m_converter and m_quicklookFileHandle are
        nil in this method.  (If they aren't, that means they weren't
        cleaned up properly.)  Use createTemporaryFileForQuickLook(),
        renamed quicklookContentFilename to quicklookContentPath, and
        restructured the remaining code.

2011-06-15  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Carson.

        <rdar://problem/8944032> Switch from WebFrameLoaderClient::reportCustomViewportArguments() to using ChromeClient::didReceiveViewportArguments()

        * dom/ViewportArguments.h: Remove now unused code.

2011-06-16  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/9544044> Prevent heap allocation of path for QuickLook documents

        Reviewed by Joseph Pecoraro.

        * platform/network/mac/ResourceHandleMac.mm:
        (-[WebCoreResourceHandleAsDelegate connection:didReceiveResponse:]):
        Switch to using createTemporaryDirectory().

2011-06-16  David Kilzer  <ddkilzer@apple.com>

        Make createTemporaryDirectory() return NSTemporaryDirectory() if a custom directory can't be created

        Reviewed by Joseph Pecoraro.

        * platform/iphone/FileSystemIOS.mm:
        (WebCore::createTemporaryDirectory): Only return nil if
        NSTemporaryDirectory() returns nil or an empty string.
        Otherwise, return NSTemporaryDirectory() when any subsequent
        error condition is hit.  Added error-checking for the return
        value of NSTemporaryDirectory() and the directoryPrefix
        argument.
        (WebCore::createTemporaryFile): Add argument error checking.

2011-06-16  David Kilzer  <ddkilzer@apple.com>

        Fix path length calculations in FileSystemIOS.mm

        Reviewed by Joseph Pecoraro.

        * platform/iphone/FileSystemIOS.mm:
        (WebCore::createTemporaryDirectory): Fix off-by-one comparisons
        to MAXPATHLEN and remove comments by creating a separate
        variable named lengthPlusNullTerminator to hold "length + 1".
        (WebCore::createTemporaryFile): Ditto.

2011-06-16  David Kilzer  <ddkilzer@apple.com>

        Move createTemporaryDirectory() and createTemporaryFile() to FileSystemIOS.mm

        Reviewed by Joseph Pecoraro.

        * WebCore.xcodeproj/project.pbxproj: Added FileSystemIOS.mm.
        * loader/mac/DiskImageCacheMac.mm:
        (WebCore::createTemporaryDirectory): Removed.
        (WebCore::createTemporaryFile): Removed.
        * platform/FileSystem.h:
        (WebCore::createTemporaryDirectory): Added declaration.
        (WebCore::createTemporaryFile): Added declaration.
        * platform/iphone/FileSystemIOS.mm: Copied from Source/WebCore/loader/mac/DiskImageCacheMac.mm.
        (WebCore::createTemporaryDirectory): Added.
        (WebCore::createTemporaryFile): Added.

2011-06-14  Antti Koivisto  <antti@apple.com>

        Reviewed by Justin Garcia.

        <rdar://problem/9120042> Better fix for handling zoomed out scale changes during page loading

        A bunch of TileCache refactoring:

        - pass the maximimum zoomed-out scale and the current scale to tile cache separately, calculate transformations etc. in tile cache
        - make scale a property of the TileGrid
        - do all tile grid juggling in a single place, TileCache::commitScaleChange()
        - drop unnecessary zoomed-in tiles when the view is fully coved by active zoomed out tiles
        - in UIKit side, use new APIs, disable tile cache changes over [UIWebDocumentView viewportConfigurationsDidChange:]
        - some code cleanups

        * platform/iphone/TileCache.h:
        (WebCore::TileCache::tilingMode):
        * platform/iphone/TileCache.mm:
        (WebCore::TileCache::TileCache):
        (WebCore::TileCache::setCurrentScale):
        (WebCore::TileCache::setZoomedOutScale):
        (WebCore::TileCache::commitScaleChange):
        (WebCore::TileCache::bringActiveTileGridToFront):
        (WebCore::TileCache::adjustTileGridTransforms):
        (WebCore::TileCache::createTiles):
        (WebCore::TileCache::invalidateTiles):
        (WebCore::TileCache::setTilingMode):
        (WebCore::TileCache::zoomedOutScale):
        (WebCore::TileCache::currentScale):
        * platform/iphone/TileGrid.h:
        (WebCore::TileGrid::scale):
        (WebCore::TileGrid::setScale):
        (WebCore::TileGrid::hasTiles):
        * platform/iphone/TileGrid.mm:
        (WebCore::TileGrid::TileGrid):
        * wak/WAKWindow.h:
        * wak/WAKWindow.mm:
        (-[WAKWindow setZoomedOutTileScale:]):
        (-[WAKWindow zoomedOutTileScale]):
        (-[WAKWindow setCurrentTileScale:]):
        (-[WAKWindow currentTileScale]):

2011-06-14  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Antti Koivisto.

        <rdar://problem/9608817> Sometimes scrolling an overflow:scroll divs scrolls the page

        Add some more smarts to the touch-event handling code for non-accelerated
        overflow:scroll areas to be more forgiving in the fact of small touch moves
        that should not commit you to a scroll direction prematurely.
        
        Wait until the touch has moved at least 10 pixels before committing to a direction
        (as UIKit does), and only run the latching logic when the area is scrollable
        on both axes.
        
        Also don't claim to have handled the event until we've managed to scroll
        at all, and thereafter, always claim to have handled the event. This prevents
        unwanted page scrolling.
        
        * platform/iphone/ScrollAnimatorIPhone.h:
        * platform/iphone/ScrollAnimatorIPhone.mm:
        (WebCore::ScrollAnimatorIPhone::ScrollAnimatorIPhone):
        (WebCore::ScrollAnimatorIPhone::handleTouchEvent):

2011-06-15  Justin Garcia  <justin.garcia@apple.com>

        Reviewed by Enrica Casucci.

        <rdar://problem/9616491> Correct alternatives chosen count logging

        * WebCore.exp.in:

2011-06-15  Eric Carlson  <eric.carlson@apple.com>

        Reviewed by Simon Fraser.

        <rdar://problem/9615466> REGRESSION (r8993084): 'webkit-playsinline' handled incorrectly

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::attributeChanged): 'webkit-playsinline' is a boolean attribute.

2011-06-15  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/7569141> Javascript scrollTo fails to work under certain circumstances
        
        window.scrollTo() failed to work from a pageShow event in a page coming out of the
        page cache, because the pageShow event was fired before we'd told UIKit that we
        had scroll event listeners.
        
        Fix by moving the code that calls setNeedsScrollNotifications() from documentDidBecomeActive()
        to CachedFrameBase::restore().

        Test: platform/iphone-simulator/iphone/scrolling/scrollTo-at-page-load.html

        * dom/Document.cpp:
        (WebCore::Document::documentDidBecomeActive):
        * history/CachedFrame.cpp:
        (WebCore::CachedFrameBase::restore):

2011-06-15  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/9328333> MobileSafari, WebSheet, WebApp, and MobileMail all share the cache in ~/Library/Caches/com.apple.WebAppCache

        Reviewed by David Kilzer.

        * WebCore.exp.in:
        * platform/RuntimeApplicationChecksIPhone.h:
        * platform/RuntimeApplicationChecksIPhone.mm:
        (WebCore::applicationIsWebApp): Added. Returns true if we're running in WebApp.

2011-06-14  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Joseph Pecoraro.

        <rdar://problem/5643296> REGRESSION (r81105): Event Listeners lost after Browser Back tap

        Fix merge error that was introduced in r81105, where the code added in r52862
        was inadvertently moved to unregisterForDocumentActivationCallbacks(). It belongs
        in documentDidBecomeActive().
        
        Test: platform/iphone-simulator/iphone/scrolling/scroll-events-back-forward.html

        * dom/Document.cpp:
        (WebCore::Document::documentDidBecomeActive):
        (WebCore::Document::registerForDocumentActivationCallbacks):
        (WebCore::Document::unregisterForDocumentActivationCallbacks):

2011-06-11  Justin Garcia  <justin.garcia@apple.com>

        Reviewed by Antti Koivisto.

        <rdar://problem/8855669> Log dictation correction statistics
        
        Add a new DocumentMarker for dictation results.
        
        Grow markers when a shiftMarker occurs inside them. This way, they grow when text is added 
        to them, just as they shrink when text is deleted from them. Filed:
        
        https://bugs.webkit.org/show_bug.cgi?id=62504
        
        to make this change in Open Source.

        * WebCore.exp.in:
        * dom/DocumentMarker.h:
        (WebCore::DocumentMarker::AllMarkers::AllMarkers):
        * dom/DocumentMarkerController.cpp:
        (WebCore::DocumentMarkerController::addMarker):
        (WebCore::DocumentMarkerController::addMarsVoltaWithAlternativesMarker):
        (WebCore::DocumentMarkerController::addMarsVoltasMarker):
        (WebCore::DocumentMarkerController::shiftMarkers): 
        * dom/DocumentMarkerController.h:
        * editing/CompositeEditCommand.cpp:
        (WebCore::CompositeEditCommand::replaceTextInNodePreservingMarkers):
        * editing/Editor.cpp:
        (WebCore::Editor::insertMarsVoltas):
        (WebCore::Editor::setMarsVoltasAsChildOfElement):
        * editing/Editor.h:
        * editing/iphone/InsertMarsVoltasCommand.cpp:
        (WebCore::InsertMarsVoltasCommand::InsertMarsVoltasCommand):
        (WebCore::InsertMarsVoltasCommand::doApply):
        * editing/iphone/InsertMarsVoltasCommand.h:
        (WebCore::InsertMarsVoltasCommand::create):
        
2011-06-14  Dan Bernstein  <mitz@apple.com>

        Reviewed by Simon Fraser.

        <rdar://problem/9577187> Incorrect rendering of Arabic letter E (U+06D0)

        * platform/graphics/FontFastPath.cpp:
        (WebCore::Font::glyphDataForCharacter): The iOS-only forceFallback flag was not checked in one of
        the code paths, which allowed for fonts other than Geeza Pro to be used for Arabic (such fonts cannot
        be used on iOS because its version of Core Text does not support the required OpenType features. See
        <rdar://problem/7200193>).

2011-06-14  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/9568246> "ASSERTION FAILED: documentLoader" loading http://apps.ft.com in the simulator (r87756)

        Merge ToT WebKit r87756 and r87959.

        ToT WebKit r87566 landed on trunk and was merged into the Safari
        Jazz branch.  This was picked up in iOS WebKit as puzzlebox svn
        r1027622.  Meanwhile r87566 was backed out on trunk in r87635,
        then re-landed as r87756 with a follow-up fix in r87959.  Pain.

    2011-06-02  Brady Eidson  <beidson@apple.com>

        Reviewed by Oliver Hunt.

        <rdar://problem/9539920> and https://bugs.webkit.org/show_bug.cgi?id=61950
        Repro crash loading certain webarchives after r87566.

        Test: webarchive/loading/javascript-url-iframe-crash.html

        * bindings/ScriptControllerBase.cpp:
        (WebCore::ScriptController::executeIfJavaScriptURL): DocumentWriter::replaceDocument can
          cause the DocumentLoader to be destroyed, so protect it with a Ref here.

    2011-05-31  Brady Eidson  <beidson@apple.com>

        Reviewed by Darin Adler.

        Another swipe at resolving <rdar://problem/9125145> and https://bugs.webkit.org/show_bug.cgi?id=61494
        
        Re-land http://trac.webkit.org/changeset/87566 with invalid ASSERTs removed.

        No new tests. No change in behavior.

        Instead of storing the DocumentLoader at construction and never changing it,
        always calculate it based on the FrameLoader's current DocumentLoader:
        * dom/Document.cpp:
        (WebCore::Document::Document):
        (WebCore::Document::suggestedMIMEType):
        (WebCore::Document::lastModified):
        (WebCore::Document::initSecurityContext):
        (WebCore::Document::updateURLForPushOrReplaceState):
        (WebCore::Document::loader):
        * dom/Document.h:

        Null-check or ASSERT that the DocumentLoader exists (or both) depending on the scenario:
        * bindings/ScriptControllerBase.cpp:
        (WebCore::ScriptController::executeIfJavaScriptURL):
        * html/MediaDocument.cpp:
        (WebCore::MediaDocument::replaceMediaElementTimerFired):
        * html/PluginDocument.cpp:
        (WebCore::PluginDocumentParser::createDocumentStructure):
        * platform/mac/HTMLConverter.mm:
        (fileWrapperForElement):

        * WebCore.exp.in:

2011-06-14  Chris Fleizach  <cfleizach@apple.com>

        <rdar://problem/8811806> VoiceOver cannot navigate the itunes album view table
        
        Merged ToT WebKit r88830.

        * accessibility/AccessibilityARIAGrid.cpp:
        (WebCore::AccessibilityARIAGrid::addChild):
        (WebCore::AccessibilityARIAGrid::addChildren):
        * accessibility/AccessibilityARIAGrid.h:

2011-06-14  Chris Fleizach  <cfleizach@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/9013642> WEBAX: VOT ignores web math

        Test: platform/iphone-simulator/accessibility/math.html

        * accessibility/iphone/AccessibilityObjectWrapperIPhone.mm:
        (-[AccessibilityObjectWrapper determineIsAccessibilityElement]):

2011-06-13   Morgan Winer  <mwiner@apple.com>

        <rdar://problem/9313885> REGRESSION: MobileMail crashed on double-tap-and-hold gesture on linked image (9A189a)

        Merged ToT WebKit r88718

2011-06-13  Enrica Casucci  <enrica@apple.com>

        Build fix. Unreviewed.

        * platform/iphone/PasteboardIPhone.mm: Adding SOFT_LINK for UTTypeCopyPreferredTagWithClass

2011-06-10  Enrica Casucci  <enrica@apple.com>

        Reviewed by David Carson.

        <rdar://problem/9530900> execCommand for cut, copy and paste is disabled for iOS.
        
        This is the second and final patch to fix this bug. This completes the implementation
        of the Pasteboard class for iOS adding support to read data from UIPasteboard
        and supporting two-step paste, as well as fragments created by the editing delegate.

        * editing/Editor.cpp:
        (WebCore::Editor::handleTextEvent): Added editor client call to support two-step paste.
        * loader/EmptyClients.h:
        Added stub implementations to the EditorClient new methods.
        (WebCore::EmptyEditorClient::supportedPasteboardTypesForCurrentSelection):
        (WebCore::EmptyEditorClient::readDataFromPasteboard):
        (WebCore::EmptyEditorClient::hasRichlyEditableSelection):
        (WebCore::EmptyEditorClient::getPasteboardItemsCount):
        (WebCore::EmptyEditorClient::documentFragmentFromDelegate):
        (WebCore::EmptyEditorClient::performsTwoStepPaste):
        * page/EditorClient.h:
        Added few methods to the EditorClient interface to support interaction with UIPasteboard.
        * platform/Pasteboard.h:
        Added private methods for IOS platform.
        * platform/iphone/PasteboardIPhone.mm:
        (WebCore::supportedImageTypes): Returns the list of supported image types. This list
        should match the equivalent one in UIKit.
        (WebCore::uniqueURLWithRelativePart): Helper function to deal with URLs.
        (WebCore::Pasteboard::documentFragmentWithImageResource): Creates a document fragment from an
        image resource.
        (WebCore::Pasteboard::documentFragmentForPasteboardItemAtIndex): Creates a document fragment
        from the pasteboard content at the given index.
        (WebCore::Pasteboard::documentFragment): Creates the document fragment handling, the creation
        from the editing delegate and the case of the composite fragment from multiple pasteboard entries.

2011-06-13  Simon Fraser  <simon.fraser@apple.com>

        Prerequistite for:
        <rdar://problem/9552895> Accelerated overflow:scroll can affect body element

        Merge WebKit ToT r88664.

    2011-06-13  Simon Fraser  <simon.fraser@apple.com>
    
            Reviewed by Adele Peterson.
    
            Print out bounds origin in layer dump
            https://bugs.webkit.org/show_bug.cgi?id=62583
    
            Include m_boundsOrigin in the layer dump, which is used by layerTreeAsText().
    
            * platform/graphics/GraphicsLayer.cpp:
            (WebCore::GraphicsLayer::dumpProperties):
    
2011-06-13  Simon Fraser  <simon.fraser@apple.com>

        Prerequistite for:
        <rdar://problem/9552895> Accelerated overflow:scroll can affect body element
        
        Merge WebKit ToT r88657.

    2011-06-13  Simon Fraser  <simon.fraser@apple.com>
    
            Reviewed by Adele Peterson.
    
            Add utility method to report whether a RenderLayer has any scrollbars
            https://bugs.webkit.org/show_bug.cgi?id=62579
            
            New method that returns true with either scrollbar is present.
    
            * rendering/RenderLayer.h:
            (WebCore::RenderLayer::hasScrollbars):

2011-06-10  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/9587704> Merge iOS WebKit to Safari Jazz FCS: Part Deaux

        Merged ToT WebKit r88283-r88494 on safari-534-branch branch.

    2011-06-02  Lucas Forschler  <lforschler@apple.com>

    Merged 88468.

    2011-06-02  Jer Noble  <jer.noble@apple.com>

        Reviewed by Maciej Stachowiak.

        REGRESSION: Page layout messed up after exiting full screen after video ends at jerryseinfeld.com
        https://bugs.webkit.org/show_bug.cgi?id=61911
        <rdar://problem/9523017>

        Test: fullscreen/full-screen-video-offset.html

        When the video element is taken full-screen in the new element full-screen API, return the
        offset width and height of the placeholder renderer which is filling in for the full-screen
        element.  To do so, override offsetWidth, Height, Left, and Top from Element.  These are
        non-virtual functions, so make them virtual.

        * dom/Element.cpp:
        (WebCore::Element::adjustForLocalZoom): Made into a class-static function.
        * dom/Element.h: Made offset functions virtual.
        * html/HTMLMediaElement.cpp:
        (WebCore::elementPlaceholder): Added; utility function.
        (WebCore::HTMLMediaElement::offsetLeft): Added; virtual override of the 
            Element function. Will be called directly via javascript.
        (WebCore::HTMLMediaElement::offsetTop): Ditto.
        (WebCore::HTMLMediaElement::offsetWidth): Ditto.
        (WebCore::HTMLMediaElement::offsetHeight): Ditto.
        * html/HTMLMediaElement.h:

    2011-06-02  Lucas Forschler  <lforschler@apple.com>

    Merged 88475.

    2011-06-09  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Darin Adler.

        Crashes in RenderLayerBacking::paintingGoesToWindow
        https://bugs.webkit.org/show_bug.cgi?id=61159

        Speculative fix for unreproducible crash that can occur when RenderObject::repaintUsingContainer()
        finds a repaintContainer that is not the RenderView, but that is also not
        composited (for unknown reasons), by checking to see if the layer is
        compositing before using backing(). An assertion remains to try to catch
        this in debug builds.

        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::setBackingNeedsRepaintInRect):

    2011-06-02  Lucas Forschler  <lforschler@apple.com>

    Merged 88279.

    2011-06-07  Jer Noble  <jer.noble@apple.com>

        Reviewed by Eric Carlson.

        Video with poster attribute will not display new frames when scrubbing.
        https://bugs.webkit.org/show_bug.cgi?id=62036

        Remove our "detection" about the end of a scrub now that there is an explicit seek completion
        handler available in AVFoundation.  Move what we used to do upon detection in timeChanged()
        into seekCompleted().

        * platform/graphics/avfoundation/MediaPlayerPrivateAVFoundation.cpp:
        (WebCore::MediaPlayerPrivateAVFoundation::timeChanged): 
        (WebCore::MediaPlayerPrivateAVFoundation::seekCompleted):

    2011-06-07  Lucas Forschler  <lforschler@apple.com>

    Merged 88261.

    2011-06-07  Michael Saboff  <msaboff@apple.com>

        Reviewed by Geoffrey Garen.

        Need to enable font cache purging in MemoryPressureHandler
        https://bugs.webkit.org/show_bug.cgi?id=62060

        Improve memory usage under pressure.
        Added call to fontCache()->purgeInactiveFontData() in 
        MemoryPressureHandler::respondToMemoryPressure().  Added protection to 
        MemoryPressureHandler::install() being called multiple times.

        No new tests as funtionality wasn't changed.

        * platform/MemoryPressureHandler.cpp:
        (WebCore::MemoryPressureHandler::MemoryPressureHandler):
        * platform/MemoryPressureHandler.h:
        * platform/mac/MemoryPressureHandlerMac.mm:
        (WebCore::MemoryPressureHandler::install):
        (WebCore::MemoryPressureHandler::respondToMemoryPressure):

    2011-06-07  Lucas Forschler  <lforschler@apple.com>

    Merged 88269.

    2011-06-07  Brian Weinstein  <bweinstein@apple.com>

        Build fix after r88260.

        * platform/graphics/win/FontCacheWin.cpp:
        (WebCore::FontCache::getFontDataForCharacters): Update to use enum instead of bool.
        * platform/graphics/wince/FontCacheWinCE.cpp:

    2011-06-07  Lucas Forschler  <lforschler@apple.com>

    Merged 88260.

    2011-06-07  Michael Saboff  <msaboff@apple.com>

        Reviewed by Geoffrey Garen.

        Need to enable font cache purging in MemoryPressureHandler
        https://bugs.webkit.org/show_bug.cgi?id=62060

        Improve memory usage under pressure.
        Added call to fontCache()->purgeInactiveFontData() in 
        MemoryPressureHandler::respondToMemoryPressure().  Added protection to 
        MemoryPressureHandler::install() being called multiple times.

        No new tests as funtionality wasn't changed.

        * platform/MemoryPressureHandler.cpp:
        (WebCore::MemoryPressureHandler::MemoryPressureHandler):
        * platform/MemoryPressureHandler.h:
        * platform/mac/MemoryPressureHandlerMac.mm:
        (WebCore::MemoryPressureHandler::install):
        (WebCore::MemoryPressureHandler::respondToMemoryPressure):

    2011-06-07  Michael Saboff  <msaboff@apple.com>

        Reviewed by Geoffrey Garen.

        Fonts returned by FontCache::getFontDataForCharacters() are never released
        https://bugs.webkit.org/show_bug.cgi?id=61875

        This change allows fonts allocated as system fallback fonts to be 
        released.  Previously, the reference counts for these fonts grew 
        without bound.  This is implemented as an auto release class that wraps
        accesses to the cache for system fallback fonts. All such accesses are
        via the method FontCache::getFontDataForCharacters. The new class is
        called FontCachePurgePreventer. When such an object exists, it protects
        these fonts from deletion.

        Most accesses to the font cache still use the reference counting
        implemented by FontCache::getCacheFontData() and 
        FontCache::releaseFontData() and that operation is not affected by
        this change.

        Added local scoped instance of FontCachePurgePreventer to wrap code
        that directly or indirectly accesses fonts via getFontDataForCharacters.
        Did a few other miscellaneous bug fixes and changes to allow system
        fallback fonts to be pruned from the GlyphPageTree. Changed the
        calls to getFontData in the platform specific versions of
        Fontcache::getFontDataForCharacters to not increment the reference
        count.  Moved the purge font check
        outside of FontCache::getCachedFontData() into a separate method, 
        purgeInactiveFontDataIfNeeded() since almost all calls to 
        getCachedFontData() now happen when purging is not allowed.
        purgeInactiveFontDataIfNeeded is invoked in enablePurging() when
        m_purgePreventCount is 0.

        No new test as the functionality has not changed. Improved font life
        cycle management.

        * WebCore.exp.in: Added FontCache::purgeInactiveFontDataIfNeeded().
        * html/canvas/CanvasRenderingContext2D.cpp:
        (WebCore::CanvasRenderingContext2D::measureText):
        (WebCore::CanvasRenderingContext2D::drawTextInternal):
        Wrapped code accessing fallback fonts with local 
        FontCachePurgePreventer in these methods.

        * page/FrameView.cpp:
        (WebCore::FrameView::layout):
        (WebCore::FrameView::paintContents):
        Wrapped code accessing fallback fonts with local 
        FontCachePurgePreventer in these methods.

        * platform/graphics/FontCache.cpp:
        (WebCore::FontCache::FontCache):
        (WebCore::FontCache::getCachedFontData):
        Moved purge check to new method since it likely can't happen here.
        (WebCore::FontCache::releaseFontData):
        (WebCore::FontCache::purgeInactiveFontDataIfNeeded):
        (WebCore::FontCache::purgeInactiveFontData):
        Made purging conditional on m_purgePreventCount.  Now some fonts
        in the cache are reference counted while other can be purged 
        outside of code wrapped by in scope FontCachePurgePreventer objects.

        * platform/graphics/FontCache.h:
        (WebCore::FontCache::disablePurging):
        (WebCore::FontCache::enablePurging):
        (WebCore::FontCachePurgePreventer::FontCachePurgePreventer):
        (WebCore::FontCachePurgePreventer::~FontCachePurgePreventer):
        Added new simple purge prevention wrapper class and methods
        that it calls in FontCache actually prevent purging.  The
        simple methods inlined to reduce overhead.

        * platform/graphics/FontFastPath.cpp:
        (WebCore::Font::glyphDataForCharacter): Update level in 
        glyph page tree for system fallback fonts so pruning works.

        * platform/graphics/GlyphPage.h:
        (WebCore::GlyphPage::clearForFontData): New method used for pruning
        * platform/graphics/GlyphPageTreeNode.cpp:
        (WebCore::GlyphPageTreeNode::pruneFontData):
        Now we prune system fallback fonts.

        * platform/graphics/chromium/FontCacheChromiumWin.cpp:
        (WebCore::FontCache::getFontDataForCharacters):
        * platform/graphics/freetype/FontCacheFreeType.cpp:
        (WebCore::FontCache::getFontDataForCharacters):
        * platform/graphics/haiku/FontCacheHaiku.cpp:
        (WebCore::FontCache::getFontDataForCharacters):
        * platform/graphics/mac/FontCacheMac.mm:
        (WebCore::FontCache::getFontDataForCharacters):
        * platform/graphics/qt/FontCacheQt.cpp:
        (WebCore::FontCache::getFontDataForCharacters):
        * platform/graphics/win/FontCacheWin.cpp:
        (WebCore::FontCache::getFontDataForCharacters):
        * platform/graphics/wince/FontCacheWinCE.cpp:
        * platform/graphics/wx/FontCacheWx.cpp:
        (WebCore::FontCache::getFontDataForCharacters):
        Changed the calls to getFontData() to not increment the reference
        count. The caller of this getFontDataForCharacters() (currently only
        Font::glyphDataForCharacter() in fontFastPath.cpp) and it's callers
        don't attempt to release the returned fonts so we use the purge
        protection described above.

        * rendering/InlineTextBox.cpp:
        (WebCore::InlineTextBox::selectionRect):
        (WebCore::InlineTextBox::offsetForPosition):
        (WebCore::InlineTextBox::positionForOffset):
        Wrapped code accessing fallback fonts with local
        FontCachePurgePreventer in these methods.

        * rendering/RenderImage.cpp:
        (WebCore::RenderImage::setImageSizeForAltText):
        Wrapped code accessing fallback fonts with local
        FontCachePurgePreventer in this method.

        * rendering/RenderListBox.cpp:
        (WebCore::RenderListBox::updateFromElement):
        (WebCore::RenderListBox::paintItemForeground):
        Wrapped code accessing fallback fonts with local
        FontCachePurgePreventer in these methods

        * rendering/svg/SVGInlineTextBox.cpp:
        (WebCore::SVGInlineTextBox::selectionRectForTextFragment):
        Wrapped code accessing fallback fonts with local
        FontCachePurgePreventer in this method.

    2011-06-07  Lucas Forschler  <lforschler@apple.com>

    Merged 88123.

    2011-06-04  Darin Adler  <darin@apple.com>

        Reviewed by Anders Carlsson.

        [Mac WebKit2] REGRESSION (r86692): Synchronous XMLHttpRequest hangs in credential shim (affects Netgear ReadyNAS admin page)
        https://bugs.webkit.org/show_bug.cgi?id=62094
        rdar://problem/9539204

        * WebCore.exp.in: Export ResourceHandle::synchronousLoadRunLoopMode.
        * platform/network/ResourceHandle.h: Add synchronousLoadRunLoopMode.
        * platform/network/cf/ResourceHandleCFNet.cpp:
        (WebCore::ResourceHandle::synchronousLoadRunLoopMode): Added.
        (WebCore::ResourceHandle::loadResourceSynchronously): Call synchronousLoadRunLoopMode.
        * platform/network/mac/ResourceHandleMac.mm:
        (WebCore::ResourceHandle::synchronousLoadRunLoopMode): Added.
        (WebCore::ResourceHandle::loadResourceSynchronously): Call synchronousLoadRunLoopMode.

    2011-06-07  Lucas Forschler  <lforschler@apple.com>

    Merged 88121.

    2011-06-04  Sam Weinig  <sam@webkit.org>

        Reviewed by Anders Carlsson.

        WebKit2 needs to know when a scroll is happening due to the ScrollAnimator
        https://bugs.webkit.org/show_bug.cgi?id=62093

        Add additional ChromeClient functions to indicate the beginning and end of
        the various ScrollAnimator animations. Change existing notification that a
        rubber-band has completed for the main frame to be triggered for all frames.

        * page/ChromeClient.h:
        (WebCore::ChromeClient::didStartRubberBandForFrame):
        (WebCore::ChromeClient::didCompleteRubberBandForFrame):
        (WebCore::ChromeClient::didStartAnimatedScroll):
        (WebCore::ChromeClient::didCompleteAnimatedScroll):
        * page/FrameView.cpp:
        (WebCore::FrameView::didStartRubberBand):
        (WebCore::FrameView::didCompleteRubberBand):
        (WebCore::FrameView::didStartAnimatedScroll):
        (WebCore::FrameView::didCompleteAnimatedScroll):
        * page/FrameView.h:
        * platform/ScrollableArea.h:
        (WebCore::ScrollableArea::didStartRubberBand):
        (WebCore::ScrollableArea::didStartAnimatedScroll):
        (WebCore::ScrollableArea::didCompleteAnimatedScroll):
        * platform/mac/ScrollAnimatorMac.h:
        * platform/mac/ScrollAnimatorMac.mm:
        (-[ScrollAnimationHelperDelegate _immediateScrollToPoint:]):
        (WebCore::ScrollAnimatorMac::scroll):
        (WebCore::ScrollAnimatorMac::immediateScrollToPointForScrollAnimation):
        (WebCore::ScrollAnimatorMac::snapRubberBandTimerFired):

    2011-06-07  Lucas Forschler  <lforschler@apple.com>

    Merged 88104.

    2011-06-04  Jeffrey Pfau  <jpfau@apple.com>

        Reviewed by Beth Dakin.

        Crash in WebCore::RenderMathMLSubSup::baselinePosition()
        https://bugs.webkit.org/show_bug.cgi?id=57897

        Simple patch adding NULL checks in each function.
        Test: mathml/msubsup-remove-children.xhtml

        * rendering/mathml/RenderMathMLSubSup.cpp:
        (WebCore::RenderMathMLSubSup::stretchToHeight):
        (WebCore::RenderMathMLSubSup::baselinePosition):

    2011-06-07  Lucas Forschler  <lforschler@apple.com>

    Merged 88080.

    2011-06-03  Steve Falkenburg  <sfalken@apple.com>

        Reviewed by Brian Weinstein.

        HistoryItem children persist across page loads
        https://bugs.webkit.org/show_bug.cgi?id=62071
        <rdar://problem/9552129>
        
        Not testable since there's no way to check for the presence/absence
        of children for a HistoryItem.

        * history/HistoryItem.cpp:
        (WebCore::HistoryItem::reset): Call clearChildren when we're reusing a HistoryItem.

    2011-06-07  Lucas Forschler  <lforschler@apple.com>

    Merged 88034.
    Note: The original change applied to trunk was refactored from Node.cpp into NodeRenderingContext.cpp.
    The branch was taken before refactoring, thus this patch was manually applied to Node.cpp.

    2011-06-01  Jer Noble  <jer.noble@apple.com>

        Reviewed by Simon Fraser.

        Flash of broken page when exiting full screen at jerryseinfeld.com
        https://bugs.webkit.org/show_bug.cgi?id=61897
        <rdar://problem/9522985>

        Test: fullscreen/full-screen-placeholder.html

        Entering full-screen mode is causing the page layout to change because the full-screen
        element is taken out of the normal flow.  To counteract this effect, insert a placeholder
        block as a parent of the full-screen renderer with the same size and style as the full-screen
        element pre-full-screen.

        Only create a placeholder for block-level elements; the technique required for inline elements
        would be vastly more complicated.

        * dom/Document.cpp:
        (WebCore::Document::webkitWillEnterFullScreenForElement): Create a placeholder
            based on the size and style of the full-screen element.
        (WebCore::Document::setFullScreenRenderer): Persist the placeholder size and 
            style across new renderers.
        * rendering/RenderFullScreen.cpp:
        (RenderFullScreen::RenderFullScreen): Added ivar.
        (RenderFullScreen::destroy): Make sure to safely destroy our placeholder.
        (RenderFullScreen::createPlaceholder): Added.
        * rendering/RenderFullScreen.h:
        (WebCore::RenderFullScreen::placeholder): Ivar accessor.

    2011-06-07  Lucas Forschler  <lforschler@apple.com>

    Merged 87959. 

    2011-06-02  Brady Eidson  <beidson@apple.com>

        Reviewed by Oliver Hunt.

        <rdar://problem/9539920> and https://bugs.webkit.org/show_bug.cgi?id=61950
        Repro crash loading certain webarchives after r87566.

        Test: webarchive/loading/javascript-url-iframe-crash.html

        * bindings/ScriptControllerBase.cpp:
        (WebCore::ScriptController::executeIfJavaScriptURL): DocumentWriter::replaceDocument can
          cause the DocumentLoader to be destroyed, so protect it with a Ref here.

2011-06-10  Simon Fraser  <simon.fraser@apple.com>

        Prerequistite for:
        <rdar://problem/9552895> Accelerated overflow:scroll can affect body element
        
        Merge WebKit ToT r88570.

    2011-06-10  Simon Fraser  <simon.fraser@apple.com>
    
            Reviewed by Dave Hyatt.
    
            Add a scheduleSetNeedsStyleRecalc() method to ContainerNode for use by RenderLayerCompositor
            https://bugs.webkit.org/show_bug.cgi?id=62471
    
            RenderLayerCompositor had some code that did a setNeedsStyleRecalc(), but
            in a way that was safe to call during existing style recalc or layout.
            
            Move this code to ContainerElement so it can be called elsewhere.
            Also add a param to the node callback so we can pass the style change type.
    
            * dom/ContainerNode.cpp:
            (WebCore::ContainerNode::queuePostAttachCallback):
            (WebCore::ContainerNode::dispatchPostAttachCallbacks):
            (WebCore::needsStyleRecalcCallback):
            (WebCore::ContainerNode::scheduleSetNeedsStyleRecalc):
            * dom/ContainerNode.h:
            * dom/Node.h:
            (WebCore::Node::scheduleSetNeedsStyleRecalc):
            * html/HTMLFormControlElement.cpp:
            (WebCore::focusPostAttach):
            (WebCore::updateFromElementCallback):
            * html/HTMLPlugInImageElement.cpp:
            (WebCore::HTMLPlugInImageElement::updateWidgetCallback):
            * html/HTMLPlugInImageElement.h:
            * rendering/RenderLayerCompositor.cpp:
            (WebCore::RenderLayerCompositor::attachRootPlatformLayer):
            (WebCore::RenderLayerCompositor::detachRootPlatformLayer):
            (WebCore::RenderLayerCompositor::notifyIFramesOfCompositingChange):
            * rendering/RenderLayerCompositor.h:
            * svg/SVGUseElement.cpp:
            (WebCore::updateFromElementCallback):
    
2011-06-10  Simon Fraser  <simon.fraser@apple.com>

        Prerequistite for:
        <rdar://problem/9552895> Accelerated overflow:scroll can affect body element
        
        Merge WebKit ToT r88552.

    2011-06-10  Simon Fraser  <simon.fraser@apple.com>
    
            Reviewed by Beth Dakin.
    
            Add utility to RenderLayer to determine if the layer is scrollable
            https://bugs.webkit.org/show_bug.cgi?id=62467
    
            New method that returns true if either scrollbar is present and enabled.
            Not called anywhere yet.
    
            * rendering/RenderLayer.cpp:
            (WebCore::RenderLayer::allowsScrolling):
            * rendering/RenderLayer.h:
    
2011-06-10  David Kilzer  <ddkilzer@apple.com>

        Fix merge issues in RenderText.cpp

        Reviewed by Simon Fraser.

        This fix brings RenderText.cpp in line with ToT WebKit.

        * rendering/RenderText.cpp:
        (WebCore::RenderText::absoluteRectsForRange): Changed r.height()
        test to !r.isEmpty() to match ToT WebKit.  This was originally
        merged as part of r242248 (Safari Gemini merge).
        (WebCore::RenderText::absoluteQuadsForRange): Changed
        !r.isEmpty() to r.height() to match ToT WebKit.  This was
        originally merged as part of r81105 (Safari Hurricane merge).

2011-06-10  Dan Bernstein  <mitz@apple.com>

        Reviewed by Dave Kilzer.

        <rdar://problem/9215351> REGRESSION: Wide right-to-left pages scroll to the right, revealing garbage

        This adds support for non-zero scroll origins to WAKScrollView, which gets the content painting and
        hit-testing correctly. It still does not scroll (in fact, maintain scroll position) correctly when
        the scroll origin is non-zero. That is left to <rdar://problem/8994242>.

        * wak/WAKScrollView.mm:
        (-[WAKScrollView setScrollOrigin:updatePositionAtAll:immediately:]): Set the document view's bounds
        origin.
        * wak/WAKView.h:
        * wak/WAKView.mm:
        (-[WAKView setBoundsOrigin:]): Added.
        * wak/WKView.h:
        * wak/WKView.mm:
        (WKViewSetBoundsOrigin): Added.
        (_WKViewGetTransform): Account for non-zero bounds origin.

2011-06-07  Ian Henderson  <ianh@apple.com>

        <rdar://problem/9567167> In BitmapImage::draw, don't clip when destRect is the same as adjustedDestRect

        Merge ToT r88321.

    2011-06-07  Ian Henderson  <ianh@apple.com>

            Reviewed by Dan Bernstein.

            (CG) Sub-image drawing clips unnecessarily
            https://bugs.webkit.org/show_bug.cgi?id=62258

            If destRect completely encompasses the adjustedDestRect into which we
            draw, clipping to destRect will do nothing.  Skip the call to
            CGContextClipToRect in this case.

            * platform/graphics/cg/ImageCG.cpp:
            (WebCore::BitmapImage::draw):

2011-06-06  Enrica Casucci  <enrica@apple.com>

        Reviewed by Justin Garcia.

        <rdar://problem/9530900> execCommand for cut, copy and paste is disabled for iOS.

        This is the first patch to fully enable support for cut, copy and paste via execCommand.
        Most of the changes in Editor.cpp and EditorCommand.cpp consist in removing #if PLATFORM(IOS).
        The changes to EditorClient.h consists in adding another method to the interface to support
        calling back into UIKit to access UIPasteboard.
        The data to be placed in the pasteboard is prepared now in WebCore, like all the other
        platforms and sent over to UIKit to be stored in the UIPasteboard object.
        PasteboardIPhone.mm implements only methods to support copy and cut at the moment.
        I will add support for Paste in a separate patch.

        * editing/Editor.cpp:
        (WebCore::Editor::canCut):
        (WebCore::imageElementFromImageDocument):
        (WebCore::Editor::canCopy):
        (WebCore::Editor::canPaste):
        (WebCore::Editor::cut):
        (WebCore::Editor::copy):
        * editing/EditorCommand.cpp:
        (WebCore::executeCopy):
        (WebCore::executePaste):
        (WebCore::enabledCopy):
        (WebCore::enabledCut):
        * loader/EmptyClients.h:
        (WebCore::EmptyEditorClient::writeDataToPasteboard):
        * page/EditorClient.h:
        * platform/Pasteboard.h:
        * platform/iphone/PasteboardIPhone.mm:
        (WebCore::Pasteboard::writeSelection):
        (WebCore::Pasteboard::writePlainText):

2011-06-07  Alexey Proskuryakov  <ap@apple.com>

        <rdar://problem/9229863> Telluride9A177a: Hard to select text to end-of-line

        Merged ToT WebKit r87936.

    2011-06-01  Ryosuke Niwa  <rniwa@webkit.org>

        Reviewed by Simon Fraser.

        REGRESSION: Text selection broken for text with line-height applied
        https://bugs.webkit.org/show_bug.cgi?id=54929

        The bug was caused by RenderText::positionForPoint's not considering the case where a point is
        above selectionTop and below lineTop of the first root inline box. Fixed the bug by considering
        any point between selectionTop and lineTop to be inside a root inline box. This condition is
        consistent with the condition we use to determine the bottom of a line.

        Test: editing/selection/hit-test-on-text-with-line-height.html

        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::positionForPointWithInlineChildren): Fixed a condition to determine whether
        or not a point is above the first root line box. We need to check both selectionTop and logicalTop
        for the same reason explained above.
        * rendering/RenderText.cpp:
        (WebCore::RenderText::positionForPoint): See above.

2011-06-07  Chris Fleizach  <cfleizach@apple.com>

        Reviewed by Joseph Pecoraro.

        <rdar://problem/7869554> WEBAX: support aria live regions

        Support ARIA Live regions by exposing the appropriate WebCore methods to the iOS 
        Accessibility API.

        * accessibility/iphone/AXObjectCacheIPhone.mm:
        (WebCore::AXObjectCache::postPlatformNotification):
        * accessibility/iphone/AccessibilityObjectWrapperIPhone.h:
        * accessibility/iphone/AccessibilityObjectWrapperIPhone.mm:
        (-[AccessibilityObjectWrapper postLiveRegionChangeNotification]):
        (-[AccessibilityObjectWrapper postLoadCompleteNotification]):
        (-[AccessibilityObjectWrapper accessibilitySpeechHint]):
        (-[AccessibilityObjectWrapper accessibilityARIAIsBusy]):
        (-[AccessibilityObjectWrapper accessibilityARIALiveRegionStatus]):
        (-[AccessibilityObjectWrapper accessibilityARIARelevantStatus]):
        (-[AccessibilityObjectWrapper accessibilityARIALiveRegionIsAtomic]):

2011-06-06  Scott Grant  <scott.grant@apple.com>

        <rdar://problem/9544769> PDFs do not work with back/forward history for intra-document links.  

        Reviewed by Joe Pecoraro.

        Part 1: In the HTML case, the document URL is set when the first response comes back. Because this content is not HTML, the document URL is set by webkit immediately, but before it is non-empty. For fragment navigation to work, we need to have a document URL against which we can compare new navigations. Thus, we set the document URL if there is non when receiving data.

        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::checkCompleted):

2011-06-06  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Paul Knight.

        <rdar://problem/9561362> Crash when removing -webkit-overflow-scrolling: touch style
        
        Call scrollingLayerRemoved() before nulling out m_scrollingLayer, not after.

        Test: platform/iphone-simulator/iphone/scrolling/remove-overflow-crash.html

        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::updateScrollingLayers):

2011-06-06  Alexey Proskuryakov  <ap@apple.com>

        <rdar://problem/9553273> A newline in text input field default value is handled incorrectly

        Merged ToT WebKit r88110.

    2011-06-04  Alexey Proskuryakov  <ap@apple.com>

        Reviewed by Darin Adler.

        Input value sanitization for text fields is incorrect
        https://bugs.webkit.org/show_bug.cgi?id=62061
        <rdar://problem/9553273>

        Newline characters should be removed according to HTML5, not replaced with spaces.
        This also matches Safari 5 behavior.

        * html/TextFieldInputType.cpp:
        (WebCore::isASCIILineBreak): A functor for removeCharacters().
        (WebCore::limitLength): Do one thing at once.
        (WebCore::TextFieldInputType::sanitizeValue): Sanitization removes newlines.
        (WebCore::TextFieldInputType::handleBeforeTextInsertedEvent): Moved (somewhat surprising)
        code that replaces newlines with spaces here.

2011-06-05  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/9495270> Merge iOS WebKit to Safari Jazz FCS

        Merged ToT WebKit r86871-r88061 on safari-534-branch branch.

    2011-06-02  Lucas Forschler  <lforschler@apple.com>

    Merged 87856.

    2011-06-01  Chris Fleizach  <cfleizach@apple.com>

        Reviewed by Darin Adler.

        Safari always crashes on http://bbc.co.uk when VoiceOver enabled
        https://bugs.webkit.org/show_bug.cgi?id=61886

        This crash can happen on webpages that remove an element from the DOM when the element receives focus.
        When AppKit goes to post a notification to inform VoiceOver the focus has changed, it asks for the AXFocusedUIElement.
        However by posting that notification, a render tree update is performed. This causes the element to disappear, but
        AppKit still has a handle to it and continues to try to reference it. When the autorelease pool pops, the reference goes bad.

        To fix, the root element, the AccessibilityScrollView, needs to implement updateBackingStore(), otherwise this method 
        will not be called in time.

        No test could be created because to cause it depends on an internal AppKit mechanism
        that is only triggered remotely through the accessibility runtime.

        * accessibility/AccessibilityObject.cpp:
        (WebCore::AccessibilityObject::updateBackingStore):
        * accessibility/AccessibilityObject.h:
        * accessibility/AccessibilityRenderObject.cpp:
        * accessibility/AccessibilityRenderObject.h:

    2011-06-02  Lucas Forschler  <lforschler@apple.com>

    Merged 87844.

    2011-06-01  Jer Noble  <jer.noble@apple.com>

        Reviewed by Darin Adler.

        Page layout messed up after exiting full screen at Apple trailers page
        https://bugs.webkit.org/show_bug.cgi?id=61755
        <rdar://problem/9525277>

        Test: fullscreen/full-screen-zIndex-after.html

        Fix the incomplete implementation of r87660. Make parameters to
        setContainsFullScreenElementRecursively() in webkitWillExitFullScreenForElement() match those
        in webkitWillEnterFullScreenForElement(), so the ancestors' flags do not become
        inconsistent..

        * dom/Document.cpp:
        (WebCore::Document::webkitWillExitFullScreenForElement):

    2011-06-02  Lucas Forschler  <lforschler@apple.com>

    Merged 87768.

    2011-05-31  Jer Noble  <jer.noble@apple.com>

        Reviewed by Darin Adler.

        Flash of black at the end of full screen transition at apple.com product videos
        https://bugs.webkit.org/show_bug.cgi?id=61756

        Added two new entries to the WebCore exports list.

        * WebCore.exp.in:

    2011-06-02  Lucas Forschler  <lforschler@apple.com>

    Merged 87704.

    2011-05-30  Eric Carlson  <eric.carlson@apple.com>

        Reviewed by Alexey Proskuryakov.

        Audio and video files saved to the Application Cache should preserve the original file extension
        https://bugs.webkit.org/show_bug.cgi?id=61750
        <rdar://9524922>

        No new tests, it isn't possible to check the name of the file in the cache from within
        DRT. Changes verified manually.

        * loader/appcache/ApplicationCacheStorage.cpp:
        (WebCore::ApplicationCacheStorage::store): Append the original file extension to the cache
            file name.
        (WebCore::ApplicationCacheStorage::writeDataToUniqueFileInDirectory): Add extension parameter.
        * loader/appcache/ApplicationCacheStorage.h:

    2011-06-02  Lucas Forschler  <lforschler@apple.com>

    Merged 87703.

    2011-05-30  Jer Noble  <jer.noble@apple.com>

        Reviewed by Dan Bernstein.

        Play/Pause button in wrong state when entering full screen on Vimeo
        https://bugs.webkit.org/show_bug.cgi?id=61754

        Update the play/pause button inside reset().  This ensures the button is in
        the correct state when the controls are created after playback has already
        started.

        * html/shadow/MediaControlRootElement.cpp:
        (WebCore::MediaControlRootElement::reset):

    2011-05-30  Mark Rowe  <mrowe@apple.com>

        Merge r87692.

    2011-05-30  Jer Noble  <jer.noble@apple.com>

        Reviewed by Darin Adler and Simon Fraser.

        REGRESSION (r87622): Scrubbing a Vimeo movie when in fullscreen stops playback; no way to make it start again
        https://bugs.webkit.org/show_bug.cgi?id=61717
        rdar://problem/9522272

        May be some good way to test this later. No immediate idea about the best way.

        When a media element is taken into full-screen mode, stop events from propagating
        outside the media element's shadow DOM, EventDispatcher::determineDispatchBehavior()
        has been changed to take a shadow root node. In our full screen media element check,
        we check to see if the passed shadow root is the shadow root of the full screen media
        element, and if so, specify events should StayInsideShadowDOM. The end result is that
        inside EventDispatcher::ensureEventAncestors, an ancestor chain is built up all the
        way from the SliderThumb to the video element's shadow root, but no further.

        * dom/EventDispatcher.cpp:
        (WebCore::EventDispatcher::determineDispatchBehavior): Restrict events to the
        shadow DOM when showing a full screen video.

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::HTMLMediaElement): Removed code to manage full screen controls.
        The events telling us about activity in the shadow DOM no longer bubble out so we need to
        handle this inside the shadow DOM on the root element.
        (WebCore::HTMLMediaElement::play): Ditto.
        (WebCore::HTMLMediaElement::playbackProgressTimerFired): Ditto.
        (WebCore::HTMLMediaElement::defaultEventHandler): Ditto.
        (WebCore::HTMLMediaElement::enterFullscreen): Ditto.
        (WebCore::HTMLMediaElement::exitFullscreen): Ditto.
        * html/HTMLMediaElement.h: Added isPlaying function, removed things moved to the root element.

        * html/shadow/MediaControlElements.cpp:
        (WebCore::MediaControlVolumeSliderContainerElement::defaultEventHandler): Rolled out
        changes that tried to make special rules for events using preDispatchEventHandler and such.
        This rolls out both r87622 and r87655.
        (WebCore::MediaControlMuteButtonElement::defaultEventHandler): Ditto.
        (WebCore::MediaControlPanelMuteButtonElement::defaultEventHandler): Ditto.
        (WebCore::MediaControlPlayButtonElement::defaultEventHandler): Ditto.
        (WebCore::MediaControlSeekButtonElement::defaultEventHandler): Ditto.
        (WebCore::MediaControlRewindButtonElement::defaultEventHandler): Ditto.
        (WebCore::MediaControlReturnToRealtimeButtonElement::defaultEventHandler): Ditto.
        (WebCore::MediaControlToggleClosedCaptionsButtonElement::defaultEventHandler): Ditto.
        (WebCore::MediaControlTimelineElement::defaultEventHandler): Ditto.
        (WebCore::MediaControlVolumeSliderElement::defaultEventHandler): Ditto.
        (WebCore::MediaControlFullscreenButtonElement::defaultEventHandler): Ditto.
        (WebCore::MediaControlFullscreenVolumeMinButtonElement::defaultEventHandler): Ditto.
        (WebCore::MediaControlFullscreenVolumeMaxButtonElement::defaultEventHandler): Ditto.
        * html/shadow/MediaControlElements.h: Ditto.

        * html/shadow/MediaControlRootElement.cpp:
        (WebCore::MediaControlRootElement::MediaControlRootElement): Initialize new data members.
        (WebCore::MediaControlRootElement::playbackStarted): Start the timer so we will consider
        hiding the controls later.
        (WebCore::MediaControlRootElement::playbackProgressed): Hide the controls if the mouse
        is no longer over the controls.
        (WebCore::MediaControlRootElement::playbackStopped): Stop the timer since we only hide
        automatically if we're playing.
        (WebCore::MediaControlRootElement::enteredFullscreen): Start the timer.
        (WebCore::MediaControlRootElement::exitedFullscreen): Stop the timer since we only care
        if we are full screen.
        (WebCore::MediaControlRootElement::containsRelatedTarget): Added. Helper for next function.
        (WebCore::MediaControlRootElement::defaultEventHandler): Do the hide/show and timer functions
        as the mouse is moved in and out.
        (WebCore::MediaControlRootElement::startHideFullscreenControlsTimer): Start the timer if
        needed.
        (WebCore::MediaControlRootElement::hideFullscreenControlsTimerFired): Hide if the conditions
        are met.
        (WebCore::MediaControlRootElement::stopHideFullscreenControlsTimer): Stop the timer.

        * html/shadow/MediaControlRootElement.h: Added new functions and data members.


    2011-05-29  Mark Rowe  <mrowe@apple.com>

        Merge r87657.

    2011-05-29  Dan Bernstein  <mitz@apple.com>

        Reviewed by Darin Adler.

        <rdar://problem/9515650> 30 second rewind button obscured in fullscreen controller when video uses custom inline controls
        https://bugs.webkit.org/show_bug.cgi?id=61714

        * dom/Document.cpp:
        (WebCore::Document::webkitDidEnterFullScreenForElement): Call didBecomeFullscreenElement() on the
        new full screen element.
        (WebCore::Document::webkitWillExitFullScreenForElement): Call willStopBeingFullscreenElement() on
        the full screen element.
        * dom/Element.h:
        (WebCore::Element::didBecomeFullscreenElement): Added with a default implementation that does nothing.
        (WebCore::Element::willStopBeingFullscreenElement): Ditto.
        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::didBecomeFullscreenElement): Added this override, which calls
        MediaControls::enteredFullscreen().
        (WebCore::HTMLMediaElement::willStopBeingFullscreenElement): Added this override, which calls
        MediaControls::exitedFullscreen().
        * html/HTMLMediaElement.h:
        * html/shadow/MediaControlElements.cpp:
        (WebCore::MediaControlFullscreenButtonElement::preDispatchEventHandler): Removed calls to
        enteredFullscreen() and exitedFullscreen() from here, since they are now called in response to
        changes to the fullscreen-ness of the element.

    2011-05-29  Mark Rowe  <mrowe@apple.com>

        Merge r87643.

    2011-05-29  Darin Adler  <darin@apple.com>

        Reviewed by Dan Bernstein.

        Fix assertion seen when entering full screen mode for standalone video
        https://bugs.webkit.org/show_bug.cgi?id=61708

        We don't currently have a way to make a regression test for this.

        * dom/Document.cpp:
        (WebCore::Document::setAnimatingFullScreen): Call scheduleForcedStyleRecalc,
        because scheduleStyleRecalc is intended to only be called when the style
        system itself detects recalc is needed.

    2011-05-29  Mark Rowe  <mrowe@apple.com>

        Merge r87660.

    2011-05-29  Jer Noble  <jer.noble@apple.com>

        Reviewed by Simon Fraser.

        Embedded Vimeo video, when taken fullscreen, is overlapped by content from the enclosing page
        https://bugs.webkit.org/show_bug.cgi?id=61712

        Tests: fullscreen/full-screen-iframe-zIndex.html

        Walk up the ancestor chain for the full-screen element, marking them as full-screen
        ancestors. Then, we apply a pseudo-class to those elements, which disable all their
        stacking-context-creating styles.  Set the z-index of all full-screen elements (and
        the iframes which contain them) to a large value, ensuring they appear above other
        sibling elements.

        This new behavior replaces the previous "-webkit-full-screen-media-document" behavior
        and pesudo-class, so remove it and replace it with the new pseudo-class.

        * css/CSSSelector.cpp:
        (WebCore::nameToPseudoTypeMap): Add -webkit-full-screen-ancestor and remove
            -webkit-full-screen-media-document.
        (WebCore::CSSSelector::pseudoId): Add PseudoFullScreenAncestor and remove
            PseudoFullScreenMediaDocument
        (WebCore::CSSSelector::extractPseudoType): Ditto.
        * css/CSSSelector.h: Ditto.
        * css/CSSStyleSelector.cpp:
        (WebCore::CSSStyleSelector::SelectorChecker::checkOneSelector): Remove the
            PseudoFullScreenMediaDocument implementation and replace it with
            PseudoFullScreenAncestor.
        * css/fullscreen.css:
        (:-webkit-full-screen): Add a z-index property.
        (:-webkit-full-screen-ancestor:not(iframe)): Added.  Reset the z-index to
            auto, and reset other stacking-context creating properties.
        * dom/Document.cpp:
        (WebCore::Document::setContainsFullScreenElementRecursively): Recurse up every element
            instead of just the iframe elements.
        (WebCore::Document::webkitWillEnterFullScreenForElement): Ditto.
        * dom/Element.cpp:
        (WebCore::Element::willRemove): Reset our parent's containsFullScreenElement property.
        (WebCore::Element::insertedIntoTree): Ditto.
        (WebCore::Element::containsFullScreenElement): Moved here from HTMLElementBase.
        (WebCore::Element::setContainsFullScreenElement): Ditto.
        * dom/Element.h:
        * dom/ElementRareData.h:
        (WebCore::ElementRareData::ElementRareData): Added ivar and initializer for 
            m_containsFullScreenElement.
        * html/HTMLFrameElementBase.cpp:
        (WebCore::HTMLFrameElementBase::HTMLFrameElementBase): Removed ivar and initializer.
        (WebCore::HTMLFrameElementBase::setContainsFullScreenElement): Moved into Element.
        * html/HTMLFrameElementBase.h:
        * rendering/style/RenderStyleConstants.h:

    2011-05-29  Mark Rowe  <mrowe@apple.com>

        Merge r87655.

    2011-05-29  Darin Adler  <darin@apple.com>

        Reviewed by Kevin Decker.

        REGRESSION (r87622): In media documents, clicking the full screen button and the play button pauses the video
        https://bugs.webkit.org/show_bug.cgi?id=61713

        We need to come up with a way to regression-test these changes. Nothing at the moment.

        The bug is that we removed calls to preventDefault, but we still do need to prevent
        default handling of this event.

        * html/shadow/MediaControlElements.cpp:
        (WebCore::MediaControlElement::preDispatchEventHandler): Add back the preventDefault
        that was in here before r87622 as well as the stopPropagation that was added in r87622.
        (WebCore::MediaControlMuteButtonElement::preDispatchEventHandler): Ditto.
        (WebCore::MediaControlPlayButtonElement::preDispatchEventHandler): Ditto.
        (WebCore::MediaControlSeekButtonElement::preDispatchEventHandler): Ditto.
        (WebCore::MediaControlRewindButtonElement::preDispatchEventHandler): Ditto.
        (WebCore::MediaControlReturnToRealtimeButtonElement::preDispatchEventHandler): Ditto.
        (WebCore::MediaControlToggleClosedCaptionsButtonElement::preDispatchEventHandler): Ditto.
        (WebCore::MediaControlFullscreenButtonElement::preDispatchEventHandler): Ditto.
        (WebCore::MediaControlFullscreenVolumeMinButtonElement::preDispatchEventHandler): Ditto.
        (WebCore::MediaControlFullscreenVolumeMaxButtonElement::preDispatchEventHandler): Ditto.

    2011-05-29  Mark Rowe  <mrowe@apple.com>

        Merge r87661.

    2011-05-29  Brian Weinstein  <bweinstein@apple.com>

        Reviewed by Darin Adler.

        Controls never hide in full screen after user stops moving mouse
        https://bugs.webkit.org/show_bug.cgi?id=61715
        <rdar://problem/9522182>
        
        When we get a mouse move event in HTMLMediaElement::defaultEventHandler, and we are in full screen,
        show the media controls, and then start a timer.
        
        The timer fires 3 seconds after the user's last mouse movement (timer is restarted on every mouse
        move), and hides the controls.

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::HTMLMediaElement): Initialize our new timer.
        (WebCore::HTMLMediaElement::play): If we are in full screen mode, start our timer to hide the full screen
            controls. We don't want the user to have to move the mouse to hide them when they use the spacebar
            to play.
        (WebCore::HTMLMediaElement::startHideFullscreenControlsTimer): Starts a oneshot timer 3 seconds in the future
            if we are in full screen.
        (WebCore::HTMLMediaElement::hideFullscreenControlsTimerFired): Make sure that we are currently playing, and
            we are in full screen, and hide the controls. We don't want to hide the controls if we are paused.
        (WebCore::HTMLMediaElement::stopHideFullscreenControlsTimer): Stops the timer.
        (WebCore::HTMLMediaElement::defaultEventHandler): If we get a mouse move event and are in full screen, show the
            controls and start a timer to hide them.
        (WebCore::HTMLMediaElement::enterFullscreen): Start a timer to hide the full screen controls. The user shouldn't
            have the move the mouse once they enter full screen to hide the controls.
        (WebCore::HTMLMediaElement::exitFullscreen): Stop the timer to hide the full screen controls.
        * html/HTMLMediaElement.h:
        * html/shadow/MediaControls.h: Added pure virtual shouldHideControls() method.
        * html/shadow/MediaControlRootElement.cpp:
        (WebCore::MediaControlRootElement::playbackStopped): Stop the timer to hide the full screen controls.
        (WebCore::MediaControlRootElement::shouldHideControls): Added, only report that
            the caller should hide the controls if the panel is not hovered.
        * html/shadow/MediaControlRootElement.h:

    2011-05-29  Mark Rowe  <mrowe@apple.com>

        Merge r87633.

    2011-05-28  Alexey Proskuryakov  <ap@apple.com>

        Suggested by Simon Fraser.

        REGRESSION (r85375): Load event is sometimes lost when multiple image elements use the same URL
        https://bugs.webkit.org/show_bug.cgi?id=61692
        <rdar://problem/9488628>

        * loader/ImageLoader.cpp: (WebCore::ImageLoader::notifyFinished): There was no need to use
        ASSERT_UNUSED here.

    2011-05-29  Mark Rowe  <mrowe@apple.com>

        Merge r87628.

    2011-05-28  Alexey Proskuryakov  <ap@apple.com>

        Reviewed by Geoff Garen.

        REGRESSION (r85375): Load event is sometimes lost when multiple image elements use the same URL
        https://bugs.webkit.org/show_bug.cgi?id=61692
        <rdar://problem/9488628>

        Test: fast/dom/gc-image-element-2.html

        Manually verified that tests from bug 59604 and from bug 40926 still pass.

        The problem here was that HTMLImageElement::hasPendingActivity() could return false when
        a load (or error) event was still expected to fire.

        * loader/cache/CachedResource.cpp:
        (WebCore::CachedResource::setRequest):
        * loader/cache/CachedResource.h:
        (WebCore::CachedResource::wasCanceled):
        (WebCore::CachedResource::errorOccurred):
        Track whether the load was canceled. We want to always notify clients of load outcome,
        as that's the only way they could make intelligent decisions.

        * dom/ScriptElement.cpp: (WebCore::ScriptElement::execute): Cached resource clients now
        get a notifyFinished call on cancellation. Handle this case, where we don't need the
        execute the script, but also don't need to fire an error event.

        * html/HTMLImageElement.cpp: Moved hasPendingActivity() to header, since it's just a single
        function call now.

        * html/HTMLImageElement.h: (WebCore::HTMLImageElement::hasPendingActivity): There is a large
        window between when CachedResource::isLoading() becomes false and events are queued.
        ImageLoader::haveFiredLoadEvent() is a much better indication of whether we are expecting
        an event to fire.

        * html/HTMLLinkElement.cpp: (WebCore::HTMLLinkElement::onloadTimerFired): Again, don't do
        anything on cancellation.

        * loader/ImageLoader.cpp:
        (WebCore::ImageEventSender::hasPendingEvents): Made it debug-only again, and fixed to
        give an accurate result while looping over the list of events to dispatch.
        (WebCore::ImageLoader::notifyFinished): Don't do anything when cancelled. We don't want to
        switch to a broken image icon, or to dispatch events.
        (WebCore::ImageEventSender::dispatchPendingEvents): Clear the current loader from dispatching
        list, as the event is no longer pending when it's being dispatched.

        * loader/ImageLoader.h: Removed unnecessary hasPendingLoadEvent(). We don't care whether one
        is already pending, we only care if one is expected at some time in the future, and
        !haveFiredLoadEvent() is our best idea of that.

        * dom/XMLDocumentParser.cpp: (WebCore::XMLDocumentParser::notifyFinished): Another place to
        handle cancellation.

    2011-05-29  Mark Rowe  <mrowe@apple.com>

        Merge r87634.

    2011-05-28  Steve Falkenburg  <sfalken@apple.com>

        Reviewed by Dan Bernstein.

        Don't add sub-frames to global history when navigating via back/forward
        https://bugs.webkit.org/show_bug.cgi?id=61701
        <rdar://problem/9521222>

        Instead of just checking whether the load is the first in the frame, we also need to
        check to make sure we're loading in the main frame.

        Not testable due to lack of global history infrastructure in DRT.

        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::transitionToCommitted):

    2011-05-29  Mark Rowe  <mrowe@apple.com>

        Merge r87639.

    2011-05-29  Beth Dakin  <bdakin@apple.com>

        Reviewed by Darin Adler.

        https://bugs.webkit.org/show_bug.cgi?id=61700
        Need WebKit2 API to get the size of the render tree
        -and corresponding-
        <rdar://problem/9512733>

        New member variable on RenderArena keeps track of the current amount of memory 
        allocated in the arena. The new client function sends this piece of data to 
        WebKit.
        * page/ChromeClient.h:
        (WebCore::ChromeClient::setRenderTreeSize):
        * page/FrameView.cpp:
        (WebCore::FrameView::performPostLayoutTasks):
        * rendering/RenderArena.cpp:
        (WebCore::RenderArena::RenderArena):
        (WebCore::RenderArena::allocate):
        (WebCore::RenderArena::free):
        * rendering/RenderArena.h:
        (WebCore::RenderArena::totalRenderArenaSize):

    2011-05-28  Mark Rowe  <mrowe@apple.com>

        Merge r87622.

    2011-05-28  Jer Noble  <jer.noble@apple.com>

        Reviewed by Maciej Stachowiak.

        Mouse clicks propagate outside full-screen media controls.
        https://bugs.webkit.org/show_bug.cgi?id=61689

        Mouse click events are propagating out of the media controls, so mouse click
        listeners registered on the video element are getting fired when the user
        clicks on media controller buttons.  By default, block propagation of click 
        events from MediaControlElements by overriding preDispatchEventHandler, and
        convert all instances of defaultEventHandler -> preDispatchEventHandler.  Change
        all calls of event->setDefaultHandled() to event->stopPropagation().

        * html/shadow/MediaControlElements.cpp:
        (WebCore::MediaControlElement::preDispatchEventHandler): Added.  Block 
            propagation of all mouse click events.
        (WebCore::MediaControlVolumeSliderContainerElement::preDispatchEventHandler):
            Renamed from setDefaultHandled.
        (WebCore::MediaControlMuteButtonElement::preDispatchEventHandler): Ditto.
        (WebCore::MediaControlPanelMuteButtonElement::preDispatchEventHandler): Ditto.
        (WebCore::MediaControlPlayButtonElement::preDispatchEventHandler): Ditto.
        (WebCore::MediaControlSeekButtonElement::preDispatchEventHandler): Ditto.
        (WebCore::MediaControlRewindButtonElement::preDispatchEventHandler): Ditto.
        (WebCore::MediaControlReturnToRealtimeButtonElement::preDispatchEventHandler): Ditto.
        (WebCore::MediaControlToggleClosedCaptionsButtonElement::preDispatchEventHandler): Ditto.
        (WebCore::MediaControlTimelineElement::preDispatchEventHandler): Ditto.
        (WebCore::MediaControlVolumeSliderElement::preDispatchEventHandler): Ditto.
        (WebCore::MediaControlFullscreenButtonElement::preDispatchEventHandler): Ditto.
        (WebCore::MediaControlFullscreenVolumeMinButtonElement::preDispatchEventHandler): Ditto.
        (WebCore::MediaControlFullscreenVolumeMaxButtonElement::preDispatchEventHandler): Ditto.
        * html/shadow/MediaControlElements.h:

    2011-05-28  Mark Rowe  <mrowe@apple.com>

        Merge r87598.

    2011-05-27  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Dan Bernstein.

        CG BitmapImage needs to check for valid CGImage in a couple of places
        https://bugs.webkit.org/show_bug.cgi?id=61684
        <rdar://problem/9519348>

        BitmapImage::getCGImageArray() can throw an exception if frameAtIndex()
        returns null, which it may do if the image is corrupted or still
        loading. Protect against that here and in getFirstCGImageRefOfSize().

        * platform/graphics/cg/ImageCG.cpp:
        (WebCore::BitmapImage::getFirstCGImageRefOfSize):
        (WebCore::BitmapImage::getCGImageArray):

    2011-05-28  Mark Rowe  <mrowe@apple.com>

        Merge r87331.

    2011-05-25  Jer Noble  <jer.noble@apple.com>

        Ureviewed; Build fix for Leopard and Snow Leopard.

        Move _wkQTMovieResolvedURL outside of a #if check for Leopard and SL.

        * WebCore.exp.in:

    2011-05-27  Mark Rowe  <mrowe@apple.com>

        Merge r87578.

    2011-05-27  Anders Carlsson  <andersca@apple.com>

        Reviewed by Sam Weinig.

        Always use the default localization strategy
        https://bugs.webkit.org/show_bug.cgi?id=61670
        <rdar://problem/9516130>

        Always use the default localization strategy when there's no platform strategy.

        * platform/DefaultLocalizationStrategy.cpp:
        (WebCore::DefaultLocalizationStrategy::shared):
        * platform/DefaultLocalizationStrategy.h:
        * platform/LocalizedStrings.cpp:
        (WebCore::inputElementAltText):
        (WebCore::resetButtonDefaultLabel):
        (WebCore::searchableIndexIntroduction):
        (WebCore::submitButtonDefaultLabel):
        (WebCore::fileButtonChooseFileLabel):
        (WebCore::fileButtonNoFileSelectedLabel):
        (WebCore::defaultDetailsSummaryText):
        (WebCore::copyImageUnknownFileLabel):
        (WebCore::contextMenuItemTagOpenLinkInNewWindow):
        (WebCore::contextMenuItemTagDownloadLinkToDisk):
        (WebCore::contextMenuItemTagCopyLinkToClipboard):
        (WebCore::contextMenuItemTagOpenImageInNewWindow):
        (WebCore::contextMenuItemTagDownloadImageToDisk):
        (WebCore::contextMenuItemTagCopyImageToClipboard):
        (WebCore::contextMenuItemTagCopyImageUrlToClipboard):
        (WebCore::contextMenuItemTagOpenFrameInNewWindow):
        (WebCore::contextMenuItemTagCopy):
        (WebCore::contextMenuItemTagGoBack):
        (WebCore::contextMenuItemTagGoForward):
        (WebCore::contextMenuItemTagStop):
        (WebCore::contextMenuItemTagReload):
        (WebCore::contextMenuItemTagCut):
        (WebCore::contextMenuItemTagPaste):
        (WebCore::contextMenuItemTagSelectAll):
        (WebCore::contextMenuItemTagNoGuessesFound):
        (WebCore::contextMenuItemTagIgnoreSpelling):
        (WebCore::contextMenuItemTagLearnSpelling):
        (WebCore::contextMenuItemTagSearchInSpotlight):
        (WebCore::contextMenuItemTagSearchWeb):
        (WebCore::contextMenuItemTagLookUpInDictionary):
        (WebCore::contextMenuItemTagOpenLink):
        (WebCore::contextMenuItemTagIgnoreGrammar):
        (WebCore::contextMenuItemTagSpellingMenu):
        (WebCore::contextMenuItemTagShowSpellingPanel):
        (WebCore::contextMenuItemTagCheckSpelling):
        (WebCore::contextMenuItemTagCheckSpellingWhileTyping):
        (WebCore::contextMenuItemTagCheckGrammarWithSpelling):
        (WebCore::contextMenuItemTagFontMenu):
        (WebCore::contextMenuItemTagShowFonts):
        (WebCore::contextMenuItemTagBold):
        (WebCore::contextMenuItemTagItalic):
        (WebCore::contextMenuItemTagUnderline):
        (WebCore::contextMenuItemTagOutline):
        (WebCore::contextMenuItemTagStyles):
        (WebCore::contextMenuItemTagShowColors):
        (WebCore::contextMenuItemTagSpeechMenu):
        (WebCore::contextMenuItemTagStartSpeaking):
        (WebCore::contextMenuItemTagStopSpeaking):
        (WebCore::contextMenuItemTagWritingDirectionMenu):
        (WebCore::contextMenuItemTagTextDirectionMenu):
        (WebCore::contextMenuItemTagDefaultDirection):
        (WebCore::contextMenuItemTagLeftToRight):
        (WebCore::contextMenuItemTagRightToLeft):
        (WebCore::contextMenuItemTagCorrectSpellingAutomatically):
        (WebCore::contextMenuItemTagSubstitutionsMenu):
        (WebCore::contextMenuItemTagShowSubstitutions):
        (WebCore::contextMenuItemTagSmartCopyPaste):
        (WebCore::contextMenuItemTagSmartQuotes):
        (WebCore::contextMenuItemTagSmartDashes):
        (WebCore::contextMenuItemTagSmartLinks):
        (WebCore::contextMenuItemTagTextReplacement):
        (WebCore::contextMenuItemTagTransformationsMenu):
        (WebCore::contextMenuItemTagMakeUpperCase):
        (WebCore::contextMenuItemTagMakeLowerCase):
        (WebCore::contextMenuItemTagCapitalize):
        (WebCore::contextMenuItemTagChangeBack):
        (WebCore::contextMenuItemTagOpenVideoInNewWindow):
        (WebCore::contextMenuItemTagOpenAudioInNewWindow):
        (WebCore::contextMenuItemTagCopyVideoLinkToClipboard):
        (WebCore::contextMenuItemTagCopyAudioLinkToClipboard):
        (WebCore::contextMenuItemTagToggleMediaControls):
        (WebCore::contextMenuItemTagToggleMediaLoop):
        (WebCore::contextMenuItemTagEnterVideoFullscreen):
        (WebCore::contextMenuItemTagMediaPlay):
        (WebCore::contextMenuItemTagMediaPause):
        (WebCore::contextMenuItemTagMediaMute):
        (WebCore::contextMenuItemTagInspectElement):
        (WebCore::searchMenuNoRecentSearchesText):
        (WebCore::searchMenuRecentSearchesText):
        (WebCore::searchMenuClearRecentSearchesText):
        (WebCore::AXWebAreaText):
        (WebCore::AXLinkText):
        (WebCore::AXListMarkerText):
        (WebCore::AXImageMapText):
        (WebCore::AXHeadingText):
        (WebCore::AXDefinitionListTermText):
        (WebCore::AXDefinitionListDefinitionText):
        (WebCore::AXARIAContentGroupText):
        (WebCore::AXButtonActionVerb):
        (WebCore::AXRadioButtonActionVerb):
        (WebCore::AXTextFieldActionVerb):
        (WebCore::AXCheckedCheckBoxActionVerb):
        (WebCore::AXUncheckedCheckBoxActionVerb):
        (WebCore::AXLinkActionVerb):
        (WebCore::AXMenuListPopupActionVerb):
        (WebCore::AXMenuListActionVerb):
        (WebCore::missingPluginText):
        (WebCore::crashedPluginText):
        (WebCore::multipleFileUploadText):
        (WebCore::unknownFileSizeText):
        (WebCore::uploadFileText):
        (WebCore::allFilesText):
        (WebCore::keygenMenuItem512):
        (WebCore::keygenMenuItem1024):
        (WebCore::keygenMenuItem2048):
        (WebCore::keygenKeychainItemName):
        (WebCore::imageTitle):
        (WebCore::mediaElementLoadingStateText):
        (WebCore::mediaElementLiveBroadcastStateText):
        (WebCore::localizedMediaControlElementString):
        (WebCore::localizedMediaControlElementHelpText):
        (WebCore::localizedMediaTimeDescription):
        (WebCore::validationMessageValueMissingText):
        (WebCore::validationMessageValueMissingForCheckboxText):
        (WebCore::validationMessageValueMissingForFileText):
        (WebCore::validationMessageValueMissingForMultipleFileText):
        (WebCore::validationMessageValueMissingForRadioText):
        (WebCore::validationMessageValueMissingForSelectText):
        (WebCore::validationMessageTypeMismatchText):
        (WebCore::validationMessageTypeMismatchForEmailText):
        (WebCore::validationMessageTypeMismatchForMultipleEmailText):
        (WebCore::validationMessageTypeMismatchForURLText):
        (WebCore::validationMessagePatternMismatchText):
        (WebCore::validationMessageTooLongText):
        (WebCore::validationMessageRangeUnderflowText):
        (WebCore::validationMessageRangeOverflowText):
        (WebCore::validationMessageStepMismatchText):

    2011-05-27  Mark Rowe  <mrowe@apple.com>

        Merge r87580.

    2011-05-27  Stephanie Lewis  <slewis@apple.com>

        Unreviewed.

        Fix a typo in the order_file flag.

        * Configurations/Base.xcconfig:

    2011-05-27  Mark Rowe  <mrowe@apple.com>

        Merge r87520.

    2011-05-27  Stephanie Lewis  <slewis@apple.com>

        Rubber Stamped by Adam Roben.

        Update Order Files.  Use -order_file flag since it can order more of the binary.

        * Configurations/Base.xcconfig:
        * WebCore.order:

    2011-05-27  Mark Rowe  <mrowe@apple.com>

        Merge r87566.

    2011-05-27  Brady Eidson  <beidson@apple.com>

        Reviewed by Darin Adler.

        First swipe at resolving <rdar://problem/9125145> and https://bugs.webkit.org/show_bug.cgi?id=61494
        
        Make the Document be intelligent about returning its DocumentLoader, including the possibility that
        the DocumentLoader will be null.

        No new tests. No change in behavior.

        Instead of storing the DocumentLoader at construction and never changing it,
        always calculate it based on the FrameLoader's current DocumentLoader:
        * dom/Document.cpp:
        (WebCore::Document::Document):
        (WebCore::Document::suggestedMIMEType):
        (WebCore::Document::lastModified):
        (WebCore::Document::initSecurityContext):
        (WebCore::Document::updateURLForPushOrReplaceState):
        (WebCore::Document::loader):
        * dom/Document.h:

        Null-check or ASSERT that the DocumentLoader exists (or both) depending on the scenario:
        * bindings/ScriptControllerBase.cpp:
        (WebCore::ScriptController::executeIfJavaScriptURL):
        * html/MediaDocument.cpp:
        (WebCore::MediaDocument::replaceMediaElementTimerFired):
        * html/PluginDocument.cpp:
        (WebCore::PluginDocumentParser::createDocumentStructure):
        * platform/mac/HTMLConverter.mm:
        (fileWrapperForElement):

        * WebCore.exp.in:

    2011-05-27  Mark Rowe  <mrowe@apple.com>

        Merge r87330.

    2011-05-25  Michael Saboff  <msaboff@apple.com>

        Reviewed by Sam Weinig.

        Cleanup of commented items from https://bugs.webkit.org/show_bug.cgi?id=61222
        https://bugs.webkit.org/show_bug.cgi?id=61478

        Cleanup of further comments after patch was landed.  Changes include
        using /2 instead of >>1, adding a blank line after class include,
        making method names start with lower case and adding clarifying
        comments.

        No new tests as the changes are stylistic and not functional.

        * loader/cache/MemoryCache.cpp:
        (WebCore::MemoryCache::pruneLiveResourcesToPercentage):
        (WebCore::MemoryCache::pruneDeadResourcesToPercentage):
        * loader/cache/MemoryCache.h:
        (WebCore::MemoryCache::pruneToPercentage):
        * platform/mac/MemoryPressureHandlerMac.mm:
        (WebCore::MemoryPressureHandler::respondToMemoryPressure):

    2011-05-27  Mark Rowe  <mrowe@apple.com>

        Merge r87228.

    2011-05-24  Michael Saboff  <msaboff@apple.com>

        Reviewed by Geoffrey Garen.

        Improve handling in WebCore of low memory situations
        https://bugs.webkit.org/show_bug.cgi?id=61222

        Added new class, MemoryPressureHandler, to platform to respond to low
        system memory events. Added Mac specific implementation that reduces the
        page cache, NSURL cache, WebCore cache by half their current usage
        and then garbage collects.  This can allow Safari to continue operating
        in a low memory situation with minimal paging.
        Split up prune operations in MemoryCache to allow for pruning to a
        specific actual size to support this change.

        No tests added as the functionality of WebKit wasn't changed.

        * GNUmakefile.list.am:
        * WebCore.exp.in:
        * WebCore.gypi:
        * WebCore.pro:
        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.xcodeproj/project.pbxproj:
        * loader/cache/MemoryCache.cpp:
        (WebCore::MemoryCache::pruneLiveResources):
        (WebCore::MemoryCache::forcePruneLiveResources):
        (WebCore::MemoryCache::pruneLiveResourcesToTarget):
        (WebCore::MemoryCache::pruneDeadResources):
        (WebCore::MemoryCache::forcePruneDeadResources):
        (WebCore::MemoryCache::pruneDeadResourcesToTarget):
        * loader/cache/MemoryCache.h:
        (WebCore::MemoryCache::forcePrune):
        * platform/MemoryPressureHandler.cpp: Added.
        (WebCore::memoryPressureHandler):
        (WebCore::MemoryPressureHandler::MemoryPressureHandler):
        (WebCore::MemoryPressureHandler::install):
        (WebCore::MemoryPressureHandler::respondToMemoryPressure):
        * platform/MemoryPressureHandler.h: Added.
        * platform/mac/MemoryPressureHandler.mm: Added.
        (WebCore::MemoryPressureHandler::install):
        (WebCore::MemoryPressureHandler::respondToMemoryPressure):

    2011-05-27  Mark Rowe  <mrowe@apple.com>

        Merge r87460.

    2011-05-26  Stephanie Lewis  <slewis@apple.com>

        Reviewed by Geoff Garen.

        https://bugs.webkit.org/show_bug.cgi?id=61345
        part of <rdar://problem/8675177>
        Roll back in now that the Crashes are fixed.  ResourceResponseBase and ResourceResponse had two different definitions
        for m_isNull.  ResourceResponse treats m_isNull as meaning there isn't any platform ResourceResponse. 
        ResourceResponseBase treats m_isNull as meaning no fields have been initialized.  Consolidate calls into ResourceResponseBase meaning. 

        Don't initialize ResourceResponse.m_suggestedFilename until we want to use it.  Initializing it requires reading in and parsing a plist.  
        Add new initialization state CommonAndUncommonFields to ResourceResponse.  This will be for all the header fields.
        Move suggestedFilename initialization to AllFields so it is never initialized unless we ask for it. 
        Add "Content-Type" to common headers since it is looked for by every CSS sheet load.

        No new functionality so no new tests.

        * platform/network/ResourceResponseBase.cpp:
        (WebCore::ResourceResponseBase::adopt):
        (WebCore::ResourceResponseBase::suggestedFilename):
        (WebCore::ResourceResponseBase::setSuggestedFilename):
        (WebCore::ResourceResponseBase::httpStatusText):
        (WebCore::ResourceResponseBase::setHTTPStatusText):
        (WebCore::ResourceResponseBase::httpHeaderField):
        (WebCore::ResourceResponseBase::setHTTPHeaderField):
        (WebCore::ResourceResponseBase::httpHeaderFields):
        (WebCore::ResourceResponseBase::isAttachment):
        (WebCore::ResourceResponseBase::setLastModifiedDate):
        (WebCore::ResourceResponseBase::lastModifiedDate):
        (WebCore::ResourceResponseBase::wasCached):
        (WebCore::ResourceResponseBase::connectionReused):
        (WebCore::ResourceResponseBase::setConnectionReused):
        (WebCore::ResourceResponseBase::connectionID):
        (WebCore::ResourceResponseBase::setConnectionID):
        (WebCore::ResourceResponseBase::resourceLoadTiming):
        (WebCore::ResourceResponseBase::setResourceLoadTiming):
        (WebCore::ResourceResponseBase::resourceLoadInfo):
        (WebCore::ResourceResponseBase::setResourceLoadInfo):
        * platform/network/ResourceResponseBase.h:
        * platform/network/cf/ResourceResponse.h:
        (WebCore::ResourceResponse::ResourceResponse):
        * platform/network/cf/ResourceResponseCFNet.cpp:
        (WebCore::ResourceResponse::platformLazyInit):
        * platform/network/mac/ResourceResponseMac.mm:

    2011-05-27  Mark Rowe  <mrowe@apple.com>

        Merge r87329.

    2011-05-25  Stephanie Lewis  <slewis@apple.com>

        Reviewed by Brady Eidson.

        https://bugs.webkit.org/show_bug.cgi?id=61407
        part of <rdar://problem/8675177>
        Move Quicklook quirk down into WebCore so it can be caculated when the user
        starts a reload.  Restructure the conditions so it only called when absolutely 
        necessary.
  
        No change in functionality so no new tests.

        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::subresourceCachePolicy):
        * page/Settings.cpp:
        (WebCore::Settings::Settings):
        * page/Settings.h:
        * platform/network/cf/ResourceRequest.h:
        * platform/network/mac/ResourceRequestMac.mm:
        (WebCore::initQuickLookResourceCachingQuirks):
        (WebCore::ResourceRequest::useQuickLookResourceCachingQuirks):

    2011-05-27  Mark Rowe  <mrowe@apple.com>

        Merge r87557.

    2011-05-27  Jer Noble  <jer.noble@apple.com>

        Reviewed by Maciej Stachowiak.

        30 second rewind button obscured in fullscreen controller
        https://bugs.webkit.org/show_bug.cgi?id=61663

        If reset() is called while in full-screen mode, make sure to show and hide
        the correct controls for that mode.

        * html/shadow/MediaControlRootElement.cpp:
        (WebCore::MediaControlRootElement::reset):

    2011-05-27  Mark Rowe  <mrowe@apple.com>

        Merge r87414.

    2011-05-25  Jer Noble  <jer.noble@apple.com>

        Reviewed by Maciej Stachowiak.

        Safari Web Content crashes while entering/exiting the full screen mode of the video content
        https://bugs.webkit.org/show_bug.cgi?id=61498

        No new tests, as DRT does not currently animate the full screen transition.

        To guard against m_fullScreenRenderer being called after it has been deleted, add
        code in RenderFullScreen which notifies the document when its full-screen renderer
        will be destroyed.

        Also, add some sanity checks when accessing the full-screen renderer's layer backing.

        * dom/Document.cpp:
        (WebCore::Document::webkitWillEnterFullScreenForElement): Guard against a missing
            full-screen renderer layer.
        (WebCore::Document::webkitWillExitFullScreenForElement): Ditto.
        (WebCore::Document::setFullScreenRenderer): Added ASSERT.
        (WebCore::Document::fullScreenRendererDestroyed): Added.
        (WebCore::Document::setAnimatingFullScreen): Guard against the full-screen
            element having been removed from the document.
        * dom/Document.h:
        * rendering/RenderFullScreen.cpp:
        (RenderFullScreen::destroy): Added.  Tell the Document that it's full-screen
            renderer is about to be destroyed.
        * rendering/RenderFullScreen.h:

    2011-05-27  Mark Rowe  <mrowe@apple.com>

        Merge r87322.

    2011-05-25  Jer Noble  <jer.noble@apple.com>

        Reviewed by Darin Adler.

        REGRESSION: Fullscreen button on embedded Vimeo videos does nothing
        https://bugs.webkit.org/show_bug.cgi?id=61461

        Tests: fullscreen/full-screen-iframe-legacy.html

        Allow calls from the legacy full-screen API to bypass the iframe
        "webkitallowfullscreen" requirement by adding a parameter to 
        Document::webkitRequestFullScreenForElement specifying the strictness
        of that check.  Specify this new parameter everywhere that function is 
        called, including in the default controls' full-screen button handler.

        * dom/Document.cpp:
        (WebCore::Document::webkitRequestFullScreenForElement):
        * dom/Document.h:
        * dom/Element.cpp:
        (WebCore::Element::requestFullScreen): Renamed from webkitRequestFullScreen.
        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::enterFullscreen):
        * html/shadow/MediaControlElements.cpp:
        (WebCore::MediaControlFullscreenButtonElement::defaultEventHandler):

    2011-05-27  Mark Rowe  <mrowe@apple.com>

        Merge r87363.

    2011-05-25  Jer Noble  <jer.noble@apple.com>

        Reviewed by Dan Bernstein.

        30 second rewind button dysfunctional viewing trailers fullscreen.
        https://bugs.webkit.org/show_bug.cgi?id=61505

        Add support for painting MediaReturnToRealtimeButton, as well as hide and show
        the correct default video control buttons when entering full-screen mode.

        * css/fullscreenQuickTime.css:
        (video:-webkit-full-screen::-webkit-media-controls-return-to-realtime-button):
        * html/shadow/MediaControlRootElement.cpp:
        (WebCore::MediaControlRootElement::enteredFullscreen): Show the "Back 30s" and
            "Return to Realtime" buttons for Live Streams in full-screen mode.
        (WebCore::MediaControlRootElement::exitedFullscreen): Reset the styles of 
            all the buttons affected by enteredFullscreen().
        * rendering/RenderMediaControls.cpp:
        (WebCore::RenderMediaControls::paintMediaControlsPart): Add support for 
            MediaReturnToRealtimeButton.

    2011-05-27  Mark Rowe  <mrowe@apple.com>

        Merge r87328.

    2011-05-24  Jer Noble  <jer.noble@apple.com>

        Reviewed by Darin Adler.

        Video fails to play on Vimeo
        https://bugs.webkit.org/show_bug.cgi?id=61403

        No new tests; Covered by media/video-canvas-source.html.

        Vimeo redirects their assets from player.vimeo.com to av.vimeo.com, which is rejected
        by AVFoundation and QTKit due to our setting a ForbidCrossSiteReference option when
        creating an AVAsset or QTMovie. Instead, we should just reject local->remote and
        remote->local and make our answer to hasSingleSecurityOrigin dynamic.

        When checking whether a given request has a single security origin, use a 
        SecurityOrigin to check the host, port, and scheme.

        * WebCore.exp.in:
        * platform/graphics/avfoundation/MediaPlayerPrivateAVFoundation.h:
        (WebCore::MediaPlayerPrivateAVFoundation::assetURL): Added.
        * platform/graphics/avfoundation/MediaPlayerPrivateAVFoundationObjC.h:
        * platform/graphics/avfoundation/MediaPlayerPrivateAVFoundationObjC.mm:
        (WebCore::MediaPlayerPrivateAVFoundationObjC::createAVAssetForURL): Exchange ForbidCrossSiteReference
            for ForbidRemoteReferenceToLocal and ForbidLocalReferenceToRemote
        (WebCore::MediaPlayerPrivateAVFoundationObjC::hasSingleSecurityOrigin): Check to see that the
            requested and resolved URLs have the same host and port.
        * platform/graphics/mac/MediaPlayerPrivateQTKit.mm:
        (WebCore::MediaPlayerPrivateQTKit::commonMovieAttributes): Exchange NoCrossSiteAttribute for 
            NoRemoteToLocalSiteAttribute and NoLocalToRemoteSiteAttribute.
        (WebCore::MediaPlayerPrivateQTKit::hasSingleSecurityOrigin):     Check to see that the
                requested and resolved URLs have the same host and port.
        * platform/mac/WebCoreSystemInterface.h: Added wkAVAssetResolvedURL.
        * platform/mac/WebCoreSystemInterface.mm: Ditto.

    2011-05-27  Mark Rowe  <mrowe@apple.com>

        Merge r87442.

    2011-05-26  Jeff Miller  <jeffm@apple.com>

        Reviewed by Steve Falkenburg.

        Fullscreen content is sometimes obscured by taskbar (which even covers up the "exit fullscreen" button)
        https://bugs.webkit.org/show_bug.cgi?id=61569
        <rdar://problem/9454315>

        Normally, when the background fullscreen window is animated in, the Windows taskbar will be hidden, but this doesn't always work for some reason.
        Workaround this issue by setting the real fullscreen window to be a topmost window.

        * platform/graphics/win/FullScreenController.cpp:
        (FullScreenController::Private::fullscreenClientWndProc): Exit fullscreen when m_fullScreenWindow is deactivated.
        (FullScreenController::enterFullScreenRepaintCompleted): Make m_fullScreenWindow a topmost window before animating it in to ensure the taskbar is hidden.

    2011-05-27  Mark Rowe  <mrowe@apple.com>

        Merge r87335.

    2011-05-25  Mark Rowe  <mrowe@apple.com>

        Reviewed by Sam Weinig.

        <rdar://problem/9504058> Need some way to query user gesture state from injected bundle

        * WebCore.exp.in: Add an export that WebKit2 needs.

    2011-05-27  Mark Rowe  <mrowe@apple.com>

        Merge r87387.

    2011-05-25  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Dan Bernstein.

        Always antialias borders, outlines and rules when scaling
        https://bugs.webkit.org/show_bug.cgi?id=61502
        
        r84273 changed the behavior of drawLineForBoxSide() to never antialias by default.
        This actually disabled antialiasing in some circumstances where it used to be enabled,
        for example collapsed table border drawing.
        
        Fix by allowing antialiasing for collapsed table borders, column rules and span
        outlines when the context is scaled.

        Test: fast/borders/border-antialiasing.html

        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::paintColumnRules):
        * rendering/RenderInline.cpp:
        (WebCore::RenderInline::paintOutline):
        (WebCore::RenderInline::paintOutlineForLine):
        * rendering/RenderTableCell.cpp:
        (WebCore::RenderTableCell::paintCollapsedBorder):

    2011-05-27  Mark Rowe  <mrowe@apple.com>

        Merge r87524.

    2011-05-27  Michael Saboff  <msaboff@apple.com>

        Reviewed by David Hyatt.

        https://bugs.webkit.org/show_bug.cgi?id=61646
        Duplicate Fonts Put in Font Cache on Mac Due to Duplicate CGFontRefs for Same Font

        Change the platformIsEqual to just compare the m_font members if
        either is not null.

        No tests added - functionality unchanged, fixing memory abandonment.

        * platform/graphics/cocoa/FontPlatformDataCocoa.mm:
        (WebCore::FontPlatformData::platformIsEqual):

    2011-05-27  Mark Rowe  <mrowe@apple.com>

        Merge r87361.

    2011-05-25  James Simonsen  <simonjam@chromium.org>

        Reviewed by Adam Barth.

        Add site-specific hack for zipcar.com with old versions of requirejs.
        https://bugs.webkit.org/show_bug.cgi?id=61321

        Old versions of requirejs (< 0.15.0) try to load scripts in parallel but execute them in
        order. This used to work in webkit by setting a bogus script type (script/cache), then
        changing the type to a valid one when they wanted to execute it. This hack translates the
        behavior into the new API (by disabling forceAsync).

        * html/HTMLScriptElement.cpp:
        (WebCore::needsOldRequirejsQuirk): Added.
        (WebCore::HTMLScriptElement::insertedIntoDocument):
        If hack is needed, set a proper script type so script loads.
        If script isn't async, disable forceAsync so script executes in order.

    2011-05-27  Mark Rowe  <mrowe@apple.com>

        Merge r87244.

    2011-05-24  Andy Estes  <aestes@apple.com>

        Reviewed by Geoffrey Garen.

        REGRESSION (r70748): WebKit cannot play QuickTime movies on Mac OS X Wiki Server pages
        https://bugs.webkit.org/show_bug.cgi?id=61229

        This site-specific hack maintains compatibility with Mac OS X Wiki Server,
        which embeds QuickTime movies using an object tag containing QuickTime's
        ActiveX classid. Treat this classid as valid only if OS X Server's unique
        'generator' meta tag is present. Only apply this quirk if there is no
        fallback content, which ensures the quirk will disable itself if Wiki
        Server is updated to generate an alternate embed tag as fallback content.

        * html/HTMLObjectElement.cpp:
        (WebCore::HTMLObjectElement::shouldAllowQuickTimeClassIdQuirk): Return
        true if site-specific quirks are enabled, the object element has no
        fallback content, the classid attribute matches QuickTime's classid and
        the document has a 'generator' meta tag matching Mac OS X Web Services
        Server's unique generator string.
        (WebCore::HTMLObjectElement::hasValidClassId): Call
        shouldAllowQuickTimeClassIdQuirk()
        * html/HTMLObjectElement.h:

    2011-05-24  Sam Weinig  <sam@webkit.org>

        Reviewed by Beth Dakin.

        Can't scroll scaled page that has overflow:hidden on its root
        <rdar://problem/9029189>
        https://bugs.webkit.org/show_bug.cgi?id=61339

        Test: fast/events/scroll-in-scaled-page-with-overflow-hidden.html

        * page/FrameView.cpp:
        (WebCore::FrameView::applyOverflowToViewport):
        Scrollbars should be enabled for the viewport when scaled, even if overflow:hidden
        is specified.

    2011-05-24  Adam Roben  <aroben@apple.com>

        Leopard build fix

        * bridge/runtime_root.cpp: Added a missing #include.

    2011-05-24  Jian Li  <jianli@chromium.org>

    Merged r87179.

    2011-05-24  Adam Roben  <aroben@apple.com>

        Invalidate RuntimeObjects when they are finalized

        This will cause the underlying NPObject to be released at finalization time, rather than at
        destruction time (which is unpredictable and could occur after the plugin has been
        unloaded).

        Test: plugins/npobject-js-wrapper-destroyed-after-plugin-unload.html

        Fixes <http://webkit.org/b/61317> <rdar://problem/9489829> Crash in _NPN_DeallocateObject
        when reloading yahoo.com webarchive in WebKit1

        Reviewed by Oliver Hunt.

        * bridge/runtime_object.cpp:
        (JSC::Bindings::RuntimeObject::~RuntimeObject): Assert that we've already been invalidated.

        * bridge/runtime_root.cpp:
        (JSC::Bindings::RootObject::invalidate):
        (JSC::Bindings::RootObject::addRuntimeObject):
        Updated for m_runtimeObjects type change.

        (JSC::Bindings::RootObject::finalize): Added. Invalidates the RuntimeObject and removes it
        from the map.

        * bridge/runtime_root.h: Now inherits from WeakHandleOwner.
        Changed m_runtimeObjects from a WeakGCMap to a HashMap of JSC::Weak objects so that we will
        be notified when the RuntimeObjects are finalized.

    2011-05-24  Lucas Forschler  <lforschler@apple.com>

    Merged r87102.

    2011-05-20  Jeremy Noble  <jer.noble@apple.com>

        Reviewed by Darin Adler.

        Video looks squished when animating to full screen.
        https://bugs.webkit.org/show_bug.cgi?id=61220

        No new tests, because DumpRenderTree does not currently "animate" the full-screen transition.

        There are three issues animating video content to full screen which this patch is meant to
        address:
        1) The animation scales between the client sizes of the element before and after full-screen.
        Because these sizes have different aspect ratios, the video appears "squished" for part of
        the animation. Instead, we will animate between the content box sizes before and after full
        screen which, in the case of video now and object-fit content in the future, will have the
        same aspect ratio before and after full screen.
        2) Now that we are animating the full-screen video element's content box, the black letterbox
        bars appear above and below the video (depending on the video's aspect ratio) as soon as the
        animation begins. This is extremely jarring, so set the background color to clear. The
        full-screen renderer's background color will serve the same purpose (providing the letterbox
        background) once the animation completes.
        3) Now that the letterbox color is gone, the full screen controls can appear to float in thin
        air beneath the video (again, depending on aspect ratio) during the animation, so to avoid
        that effect and to make the animation consistent with the old webkitenterfullscreen()
        animation, we will hide the controls during the animation by adding a new CSS pseudo class
        -webkit-animating-full-screen-transition.

        Added a new css pseudo-class: -webkit-animating-full-screen.  During the transition animation, this
        pseudo-class will be applied to the current full-screen element.  Styles have been added to 
        fullscreenQuickTime.css to hide the video element's built-in controller during the full-screen
        animation.

        To accomplish this, the ivar tracking whether the full-screen animation is taking place has been moved
        from the RenderFullScreen renderer, to the current full-screen Document.  Because changing 
        isAnimatingFullScreen causes style changes, make sure to call recalcStyle on the full-screen element
        after changing.

        This extra transition caused assertions in HTMLFormControlElement::updateFromElementCallback. A
        full-screen media control's renderer is disabled during the style recalculation when exiting full
        screen. This assertion was exposed by the extra recalcStyle() issued during the exit transition, and
        has been removed.

        * WebCore.exp.in:
        * css/CSSSelector.cpp:
        (WebCore::CSSSelector::pseudoId): Add support for new pseudo class -webkit-animate-full-screen-transition.
        (WebCore::nameToPseudoTypeMap): Ditto.
        (WebCore::CSSSelector::extractPseudoType): Ditto.
        * css/CSSSelector.h:
        * css/CSSStyleSelector.cpp:
        (WebCore::CSSStyleSelector::SelectorChecker::checkOneSelector): Ditto.
        * css/fullscreen.css: 
        (video:-webkit-full-screen): Set full screen video background color to clear.
        * css/fullscreenQuickTime.css: 
        (video:-webkit-full-screen::-webkit-media-controls-panel): Set a default opacity transition.
        (video:-webkit-animating-full-screen::-webkit-media-controls-panel): Set the opacity to 0 and 
            disable the transition.
        * dom/Document.cpp:
        (WebCore::Document::Document):
        (WebCore::Document::webkitWillEnterFullScreenForElement): Call our new setAnimatingFullScreen function.
        (WebCore::Document::webkitDidEnterFullScreenForElement): Ditto.
        (WebCore::Document::webkitWillExitFullScreenForElement): Ditto.
        (WebCore::Document::webkitDidExitFullScreenForElement): Ditto.
        (WebCore::Document::isAnimatingFullScreen): Moved here from RenderFullScreen.
        (WebCore::Document::setAnimatingFullScreen): Ditto.
        * dom/Document.h:
        * html/HTMLFormControlElement.cpp: 
        (WebCore::updateFromElementCallback): Use the Document's isAnimatingFullScreen function.
        * page/FrameView.cpp:
        (WebCore::isDocumentRunningFullScreenAnimation): Ditto.
        * rendering/RenderFullScreen.cpp:
        * rendering/RenderFullScreen.h:
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::rebuildCompositingLayerTree): Ditto.
        (WebCore::RenderLayerCompositor::requiresCompositingForFullScreen): Ditto.
        * rendering/style/RenderStyleConstants.h:

    2011-05-24  Lucas Forschler  <lforschler@apple.com>

    Merged r87083.

    2011-05-23  Abhishek Arya  <inferno@chromium.org>

        Reviewed by Simon Fraser.

        Terminate css color parsing on integers which are not followed
        by a terminator.
        https://bugs.webkit.org/show_bug.cgi?id=61293

        Test: fast/css/parse-color-int-or-percent-crash.html

        * css/CSSParser.cpp:
        (WebCore::parseColorIntOrPercentage):

    2011-05-24  Lucas Forschler  <lforschler@apple.com>

    Merged r87026.

    2011-05-21  Dan Bernstein  <mitz@apple.com>

        Reviewed by Darin Adler.

        <rdar://problem/9479926> REGRESSION (r82144): Icon overlaps text in Twitter message dialog
        https://bugs.webkit.org/show_bug.cgi?id=61241

        Test: fast/block/positioning/start-ignoring-before.html

        * rendering/RenderBlockLineLayout.cpp:
        (WebCore::TrailingObjects::updateMidpointsForTrailingBoxes): Added a boolean parameter saying
        whether to merge the first trailing space with the line break.
        (WebCore::RenderBlock::LineBreaker::nextLineBreak): When adding a midpoint behind the current
        character, account for trailing positioned objects that occurred after the midpoint by calling
        updateMidpointsForTrailingBoxes(), which adds midpoints for them.

    2011-05-24  Lucas Forschler  <lforschler@apple.com>

    Merged r87009.

    2011-05-20  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Dan Bernstein.

        Allow ShadowBlur to do tiling when the context is scaled
        https://bugs.webkit.org/show_bug.cgi?id=61232

        If the GraphicsContext is scaled or rotated by a multiple of 90deg, have ShadowBlur
        use the tiling code path, to avoid blurring large areas on pages like cracked.com
        when the context is scaled.

        * platform/graphics/ShadowBlur.cpp:
        (WebCore::ShadowBlur::drawRectShadow): Call preservesAxisAlignment()
        to decide when to not use tiling.
        (WebCore::ShadowBlur::drawInsetShadow): Ditto.
        (WebCore::ShadowBlur::drawLayerPieces): Round to device pixels when drawing tiles
        to avoid pixel cracks in scaled contexts.
        * platform/graphics/transforms/AffineTransform.h:
        (WebCore::AffineTransform::preservesAxisAlignment): Return true if there is the matrix
        contains a transform that results in axis alignment (no rotation or skew, or rotations
        which are multiples of 90deg).

    2011-05-24  Steve Falkenburg  <sfalken@apple.com>

        Reviewed by Adam Roben.

        Disable features on safari-534-branch.
        <rdar://problem/9261347> 

        * Configurations/FeatureDefines.xcconfig:

    2011-05-24  Lucas Forschler  <lforschler@apple.com>

    Merged r86995.

    2011-05-20  Andy Estes  <aestes@apple.com>

        Reviewed by Darin Adler.

        WebView loses firstResponder status when entering full-screen mode.
        https://bugs.webkit.org/show_bug.cgi?id=61153

        No test possible via DRT. Add a manual test instead.

        * manual-tests/full-screen-keypress.html: Added.

    2011-05-24  Lucas Forschler  <lforschler@apple.com>

    Merged r86992.

    2011-05-20  Jeremy Noble  <jer.noble@apple.com>

        Reviewed by Maciej Stachowiak.

        WebKit2: Exit full screen mode if the WebProcess crashes.
        https://bugs.webkit.org/show_bug.cgi?id=61151

        * platform/graphics/win/FullScreenController.h:
        * platform/graphics/win/FullScreenController.cpp:
        (FullScreenController::close): Added.  Close the full-screen window without animation
            if called.

    2011-05-24  Lucas Forschler  <lforschler@apple.com>

    Merged r87022.

    2011-05-21  Jeremy Noble  <jer.noble@apple.com>

        Reviewed by Eric Carlson.

        WebKit2: fix failing fullscreen/full-screen-remove* tests.
        https://bugs.webkit.org/show_bug.cgi?id=61027

        * dom/Document.cpp:
        (WebCore::Document::fullScreenChangeDelayTimerFired): dispatchEvent can be
            synchronous, so make sure to check whether the current element is
            in the DOM before dispatching.

    2011-05-22  Lucas Forschler  <lforschler@apple.com>

    Merge r86956.
    
    2011-05-20  Jer Noble  <jer.noble@apple.com>

        Reviewed by Maciej Stachowiak.

        Win: non-full-screen content is briefly seen when entering full-screen mode (and vice versa)
        https://bugs.webkit.org/show_bug.cgi?id=61108

        Instead of repainting the full- and non-full-screen windows in WebCore, delegate that
        responsibility to the FullScreenControllerClient.  Because the repaint operation may 
        be asynchronous, add a new method for clients to use to indicate repainting has completed.

        * platform/graphics/win/FullScreenController.cpp:
        (FullScreenController::Private::Private): Added new ivars.
        (FullScreenController::enterFullScreen): Split into two functions (pre-and post repaint)
        (FullScreenController::enterFullScreenRepaintCompleted): Ditto.
        (FullScreenController::exitFullScreen): Ditto.
        (FullScreenController::exitFullScreenRepaintCompleted): Ditto.
        (FullScreenController::repaintCompleted): Call the appropriated repaint completed function.
        * platform/graphics/win/FullScreenController.h:
        * platform/graphics/win/FullScreenControllerClient.h:

    2011-05-22  Lucas Forschler  <lforschler@apple.com>

    Merge r86924.
    
    2011-05-19  Jer Noble  <jer.noble@apple.com>

        Reviewed by Maciej Stachowiak.

        WebKit2: Flashing when entering and exiting full screen mode
        https://bugs.webkit.org/show_bug.cgi?id=56957

        Guard against the parameter of setAnimating() matching the ivar value it's 
        setting, thus avoiding tearing down the renderer's layer backing.

        * rendering/RenderFullScreen.cpp:
        (RenderFullScreen::setAnimating):

    2011-05-22  Lucas Forschler  <lforschler@apple.com>

    Merge r86904.
    
    2011-05-18  Jeremy Noble  <jer.noble@apple.com>

        Reviewed by Darin Adler.

        Poster is not shown in Safari for video element with no playable source elements.
        https://bugs.webkit.org/show_bug.cgi?id=61109

        Test: media/video-src-invalid-poster.html

        In the case where no video sources are playable, update the display state and 
        renderer, allowing the poster image to display.

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::waitForSourceChange): 

    2011-05-19  Lucas Forschler  <lforschler@apple.com

    Merged r86852.
    
    2011-05-19  Ryosuke Niwa  <rniwa@webkit.org>

        Reviewed by Darin Adler.

        REGRESSION (r83322): Many crashes in Mail.app in WebCore::Node::nodeIndex
        https://bugs.webkit.org/show_bug.cgi?id=61012

        The crash was caused by ReplaceSelectionCommand's inserting content into a middle of the paragraph
        being moved when the insertion position's container node is the node to split to. Fixed the crash
        by not changing the insertion position in such a case.

        Unfortunately, this fix caused markup to bloat in some tests but we'll take this regression since
        it's much better than crashing.

        Test: editing/pasteboard/paste-after-inline-style-element.html

        * editing/ReplaceSelectionCommand.cpp:
        (WebCore::ReplaceSelectionCommand::doApply):

    2011-05-19  Lucas Forschler  <lforschler@apple.com

    Merged r86827.
        
    2011-05-19  Emil A Eklund  <eae@chromium.org>

        Reviewed by Alexey Proskuryakov.

        REGRESSION (r80808): Multiple <select> - Selection reset to first element from multiple selected ones
        https://bugs.webkit.org/show_bug.cgi?id=60986

        * html/HTMLSelectElement.cpp:
        (WebCore::HTMLSelectElement::setMultiple):
        Don't restore selection if the multiple attribute hasn't changed.

    2011-05-19  Lucas Forschler  <lforschler@apple.com

    Merged r86785.
    
    2011-05-18  Oliver Hunt  <oliver@apple.com>

        Reviewed by Sam Weinig.

        JSGlobalObject and some others do GC allocation during initialization, which can cause heap corruption
        https://bugs.webkit.org/show_bug.cgi?id=61090

        Rather than having Constructor objects create their structure
        as part of initialisation, we now pass their expected structure
        in as an argument.  This required fixing the few custom Constructors
        and the code generator.

        * bindings/js/JSAudioConstructor.cpp:
        (WebCore::JSAudioConstructor::JSAudioConstructor):
        * bindings/js/JSAudioConstructor.h:
        * bindings/js/JSDOMGlobalObject.h:
        (WebCore::getDOMConstructor):
          Pass the Constructor objects structure in as an argument
        * bindings/js/JSImageConstructor.cpp:
        (WebCore::JSImageConstructor::JSImageConstructor):
        * bindings/js/JSImageConstructor.h:
        * bindings/js/JSOptionConstructor.cpp:
        (WebCore::JSOptionConstructor::JSOptionConstructor):
        * bindings/js/JSOptionConstructor.h:
        * bindings/scripts/CodeGeneratorJS.pm:

    2011-05-19  Lucas Forschler  <lforschler@apple.com

    Merged r86748.
    
    2011-05-18  Abhishek Arya  <inferno@chromium.org>

        Reviewed by Dirk Schulze.

        When SMIL element is getting removed, make sure to remove it
        from target's animation elements list.
        https://bugs.webkit.org/show_bug.cgi?id=60980

        Test: svg/animations/smil-element-not-removed-crash.html

        * svg/animation/SVGSMILElement.cpp:
        (WebCore::SVGSMILElement::~SVGSMILElement):

    2011-05-19  Lucas Forschler  <lforschler@apple.com

    Merged r86806.

    2011-05-18  Chris Fleizach  <cfleizach@apple.com>

        Reviewed by Maciej Stachowiak.

        WK2: VoiceOver cannot move focus into a web area programmatically
        https://bugs.webkit.org/show_bug.cgi?id=60661

        Accessibility code relies on the ability to bring focus to the containing widget view.
        In WK2, that message needs to be propagated to the UI process.

        * page/ChromeClient.h:
        (WebCore::ChromeClient::makeFirstResponder):
        * page/mac/ChromeMac.mm:
        (WebCore::Chrome::focusNSView):
        * platform/mac/WidgetMac.mm:
        (WebCore::Widget::setFocus):

    2011-05-19  Lucas Forschler  <lforschler@apple.com

    Merged r86793.

    2011-05-17  Timothy Hatcher  <timothy@apple.com>

        Update the the context menu to reflect the system search provider on Mac.

        <rdar://problem/9198419>

        Reviewed by Sam Weinig.

        * English.lproj/Localizable.strings: Updated.
        * Source/WebCore/WebCore.exp.in: Added _wkCopyDefaultSearchProviderDisplayName.
        * platform/DefaultLocalizationStrategy.cpp:
        (WebCore::DefaultLocalizationStrategy::contextMenuItemTagSearchWeb): Use wkCopyDefaultSearchProviderDisplayName to
        create the string.
        * platform/mac/WebCoreSystemInterface.h: Added wkCopyDefaultSearchProviderDisplayName.
        * platform/mac/WebCoreSystemInterface.mm: Ditto.

    2011-05-19  Lucas Forschler  <lforschler@apple.com

    Merged r86781.
    
    2011-05-18  Abhishek Arya  <inferno@chromium.org>

        Reviewed by Beth Dakin.

        Remove removeChild on table caption since destroy call
        already does that.
        https://bugs.webkit.org/show_bug.cgi?id=61083

        Test: fast/table/table-captions-child-visible-crash.html

        * rendering/RenderTable.cpp:
        (WebCore::RenderTable::recalcCaption):

    2011-05-19  Lucas Forschler  <lforschler@apple.com

    Merged r86741.

    2011-05-16  Jeremy Noble  <jer.noble@apple.com>

        Reviewed by Darin Adler.

        Disable keyboard input (with exceptions) in full-screen mode.
        https://bugs.webkit.org/show_bug.cgi?id=60943

        Tests: fullscreen/full-screen-keyboard-disabled.html
               fullscreen/full-screen-keyboard-enabled.html

        * page/EventHandler.cpp:
        (WebCore::EventHandler::isKeyEventAllowedInFullScreen): Added.  Implements the 
            list of allowed keyboard events in the proposed API.
        (WebCore::EventHandler::keyEvent): Discard events which are not allowed in
            full-screen mode.
        * page/EventHandler.h:

    2011-05-19  Lucas Forschler  <lforschler@apple.com

    Merged r86737.

    2011-05-17  Jeremy Noble  <jer.noble@apple.com>

        Reviewed by Darin Adler.

        Removing a full-screen element or ancestor from the DOM should trigger exiting full-screen mode.
        https://bugs.webkit.org/show_bug.cgi?id=60997

        Tests: fullscreen/full-screen-remove-ancestor.html
               fullscreen/full-screen-remove-children.html
               fullscreen/full-screen-remove.html

        * dom/Document.cpp:
        (WebCore::Document::fullScreenChangeDelayTimerFired): If the target node was removed from the document
            make sure to message the documentElement() as well.
        (WebCore::Document::fullScreenElementRemoved): Cancel full screen mode.

    2011-05-17  Cris Neckar  <cdn@chromium.org>

        Reviewed by Adam Barth.

        Clear the image from ImageLoader rather than clearing the ImageLoader in HTMLObjectElement::renderFallbackContent.
        https://bugs.webkit.org/show_bug.cgi?id=61005

        Test: http/tests/loading/nested_bad_objects.php

        * html/HTMLObjectElement.cpp:
        (WebCore::HTMLObjectElement::renderFallbackContent):

2011-06-05  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/9556885> iOS: Disable C++ exceptions when building with clang

        Reviewed by Anders Carlsson.

        Set GCC_ENABLE_CPP_EXCEPTIONS_LLVM_COMPILER to NO.

        * Configurations/Base.xcconfig:

2011-06-02 David Carson <dacarson@apple.com>

        <rdar://problem/8786539> iframe at the bottom of Bing results page is visible

        Merged ToT WebKit r87853.

    2011-06-01  David Carson  <dacarson@apple.com>

            Reviewed by Antti Koivisto.

            https://bugs.webkit.org/show_bug.cgi?id=61831
            If width and height of an iframe is fixed and should not be visible, then
            it shouldn't be flattened.

            Test: fast/frames/flattening/iframe-flattening-fixed-width-and-height-zero-size.html

            * rendering/RenderIFrame.cpp:
            (WebCore::RenderIFrame::flattenFrame): add a check for a zero width or height

2011-06-03  Dan Bernstein  <mitz@apple.com>

        Reviewed by Simon Fraser.

        <rdar://problem/9512502> GlyphPage::fill() vertical path needs tuning

        The vertical glyph code path of fill() was implemented by asking Core Text to lay out a line consisting
        of all the characters in the buffer, and then examining the resulting runs, mapping glyphs back to characters. 
 	This had at least two disadvantages: Core Text performed font fallback for characters that were not covered 
 	by the font, and it could potentially create required ligatures out of adjacent characters. It was 
 	also very cumbersome.

        * platform/graphics/mac/GlyphPageTreeNodeMac.cpp:
        (WebCore::GlyphPage::fill): Use the CTFontGetVerticalGlyphsForCharacters() SPI, which is currently
        only available in iOS.

2011-06-03  Justin Garcia  <justin.garcia@apple.com>

        Reviewed by Pratik Solanki.
        
        <rdar://problem/9280318> Dictation always inserts a newline after results (and automatically submits single line text fields)

        * editing/iphone/InsertMarsVoltasCommand.cpp:
        (WebCore::InsertMarsVoltasCommand::doApply): Use smart replace rules to insert a space before and after the result.

2011-06-03  Chris Fleizach  <cfleizach@apple.com>

        Reviewed by Scott Grant.

        <rdar://problem/9367644> AX: aria-disabled and disabled form controls are not exposed to iOS accessibility correctly

        Make sure the disabled state is exposed to iOS Accessibility.

        Test: platform/iphone-simulator/accessibility/disabled-states.html

        * accessibility/iphone/AccessibilityObjectWrapperIPhone.mm:
        (-[AccessibilityObjectWrapper accessibilityTraits]):

2011-06-03  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Ian Henderson.

        <rdar://problem/9530767> Internal setting to turn on native overflow: scroll everywhere

        Add a setting to enable accelerated overflow: scroll behavior for all overflow: scroll
        divs (including <textarea>), and consult this setting in RenderLayer.

        * page/Settings.cpp:
        (WebCore::Settings::Settings):
        * page/Settings.h:
        (WebCore::Settings::setAlwaysUseAcceleratedOverflowScroll):
        (WebCore::Settings::alwaysUseAcceleratedOverflowScroll):
        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::hasAcceleratedTouchScrolling):

2011-06-02  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Ian Henderson.

        <rdar://problem/9382276> iOS: Make use of CG rounded-rect primitives

        Implement a CG-specific verison of Path::addBeziersForRoundedRect(),
        and on iOS call CGPathAddRoundedRect() when the radii all have
        equal width and height.
        
        There is no measurable pef gain using the testcase attached
        to the Radar, but this will allow CG to test for optimizations.

        * platform/graphics/Path.cpp:
        * platform/graphics/cg/PathCG.cpp:
        (WebCore::Path::addBeziersForRoundedRect):

2011-06-02  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by Scott Grant.

        <rdar://problem/9083142> Telluride: Search bar in Netflix takes many taps (or never) to come up

        Preserve old behavior, for pre-Telluride applications, of not
        walking up past shadow elements to find an element to send 
        touch events to. Some input elements have shadow trees, and due
        to a bug touch events on the inputs were not sent to containing
        elements. Now that the events are sent above, this causes bad
        behavior if the event has its default prevented; however, this
        is expected behavior which we will support moving forward.

        * page/iphone/EventHandlerIPhoneTouch.cpp:
        (WebCore::shouldSendTouchEventAboveShadowRoot):
        (WebCore::EventHandler::handleTouchEvent):

2011-06-02  Simon Fraser  <simon.fraser@apple.com>

        Groundwork for:
        <rdar://problem/9382276> iOS: Make use of CG rounded-rect primitives

        Merge WebKit ToT r87955.

    2011-06-02  Simon Fraser  <simon.fraser@apple.com>
    
            Reviewed by Andreas Kling.
    
            Share Path code that uses beziers to construct a rounded rect
            https://bugs.webkit.org/show_bug.cgi?id=61960
    
            Have two methods in Path that construct beziers for rounded
            rects to share the same code.
            
            Make gCircleControlPoint a little more precise, and add
            a comment describing its derivation.
            
            Make use of FloatRect::maxX() and maxY().
    
            * platform/graphics/Path.cpp:
            (WebCore::Path::addRoundedRect):
            (WebCore::Path::addBeziersForRoundedRect):
            * platform/graphics/Path.h:
    
2011-06-02  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Kilzer.

        Follow-up to r1026678.

        Include the regular from the internal to prevent requiring
        multiple includes by those who need the internal.

        * bindings/js/ScriptDebugServer.cpp:
        * wak/WebCoreThreadInternal.h:

2011-06-02  Antti Koivisto  <antti@apple.com>

        <rdar://problem/9536025> use after free of m_pushedStyleSelector due to svg font face (61737)

        Merge http://trac.webkit.org/changeset/87827

    2011-06-01  Abhishek Arya  <inferno@chromium.org>

            Reviewed by Antti Koivisto.

            Do not use the pushed style selector if it is not equal to the
            parent document's style selector. It usually means that it is
            in a bad state, e.g. already cleared.
            https://bugs.webkit.org/show_bug.cgi?id=61737

        * dom/Element.cpp:
        (WebCore::StyleSelectorParentPusher::~StyleSelectorParentPusher):

2011-06-01  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/8629031> Newlines aren't honored in UISimpleTextPrintFormatter as they would be when displaying the same text in a UITextView

        Merged ToT WebKit r87882.

    2011-06-01  Dan Bernstein  <mitz@apple.com>

        Reviewed by Anders Carlsson.

        Incorrect UA style when printing a simple document
        https://bugs.webkit.org/show_bug.cgi?id=61900

        This is not testable in run-webkit-tests because unless the test is the first to run in an instance
        of DumpRenderTree, it is not guaranteed that the full default style sheet has not been initialized.

        * css/CSSStyleSelector.cpp:
        (WebCore::loadFullDefaultStyle): Replace the simple default print style, which is now equal to the
        simple default style, with a new RuleSet before adding the style rules from the full default sheet.
        (WebCore::loadSimpleDefaultStyle): Set defaultPrintStyle to point to the default style. They are
        equal in the simple case.

2011-06-01  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Carson.

        <rdar://problem/8252962> Web Inspector: Breakpoints Not Working
        <rdar://problem/6351964> Implement WebCore::EventLoop::cycle() in EventLoopIPhone.mm

        Web Inspector pausing causes an EventLoop to be run on
        top of the current run loop iteration. iOS needs some
        special considerations because there are run loop observers
        at the end of WebRunLoop iterations.

        The approach taken here is that before creating the nested,
        internal, run loop we unlock the WebThread and stash its
        autorelease pool. It cycles through run loop iterations as
        expected. Then, when resuming, we restore the original
        autorelease pool and grab the lock.

        * bindings/js/ScriptDebugServer.cpp:
        (WebCore::ScriptDebugServer::pauseIfNeeded):
        Handle the before/after EventLoop operations.

        * platform/iphone/EventLoopIPhone.mm:
        (WebCore::EventLoop::cycle):
        Implementation is to just run the current run loop for
        a short period of time. 0.05s matches platform/mac.

        * wak/WebCoreThreadInternal.h: Added.
        Hold the new methods, and keep them internal to just WebCore.

        * wak/WebCoreThread.mm:
        (WebRunLoopLockInternal):
        (WebRunLoopUnlockInternal):
        Extract the actual autorelease pool push/pop and WebThreadLock
        lock/unlock operations into helper internal methods.

        (WebRunLoopLock):
        (WebRunLoopUnlock):
        No change in behavior for the RunLoop observers.

        (WebRunLoopEnableNested):
        (WebRunLoopDisableNested):
        Handle stashing the original autorelease pool and
        releasing/restoring the lock.

        * WebCore.xcodeproj/project.pbxproj:
        Add the new files to the project.

2011-06-01  Eric Carlson  <eric.carlson@apple.com>

        <rdar://problem/9519092> Media files don't work with application cache
    
        Merge WebKit ToT r87704.

    2011-05-30  Eric Carlson  <eric.carlson@apple.com>
    
        Reviewed by Alexey Proskuryakov.
    
        Audio and video files saved to the Application Cache should preserve the original file extension
        https://bugs.webkit.org/show_bug.cgi?id=61750
        <rdar://9524922>
    
        No new tests, it isn't possible to check the name of the file in the cache from within
        DRT. Changes verified manually.
    
        * loader/appcache/ApplicationCacheStorage.cpp:
        (WebCore::ApplicationCacheStorage::store): Append the original file extension to the cache
            file name.
        (WebCore::ApplicationCacheStorage::writeDataToUniqueFileInDirectory): Add extension parameter.
        * loader/appcache/ApplicationCacheStorage.h:

2011-05-31  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/9202950> [Regression] MobileSafari fails to display web page for webcam (61491)
    
        Merge WebKit ToT r87726.
    
    2011-05-31  Yael Aharon  <yael.aharon@nokia.com>
    
        Reviewed by Kenneth Rohde Christiansen.
    
        Frame flattening is broken with nested frames
        https://bugs.webkit.org/show_bug.cgi?id=61491
    
        After r77988, when frame flattening is enabled, performPostLayoutTasks() is called on a timer for iframes.
        This causes layout of nested iframes to sometimes happen asynchronously, but WebCore expects layout to always finish synchronously.
        Added a call to updateWidgetPosition() for cases that performPostLayoutTasks() is now happening asynchronously.
    
        Test: fast/frames/flattening/iframe-flattening-nested.html
    
        * page/FrameView.cpp:
        (WebCore::FrameView::layout):
    
2011-05-31  Enrica Casucci  <enrica@apple.com>

        Reviewed by Joseph Pecoraro.

        <rdar://problem/8931711> Implement Editor::pasteWithPasteboard() for iOS WebKit

        There is no need for iOS specific code in EditorIPhone.mm.
        The paste command for TextField, TextView and UIWebView does not use the Editor class,
        since the implementation differs from the desktop one and uses directly ReplaceSelectionCommand.
        The implementation in EditorMac.mm of pasteWithPasteboard is there to deal with a
        special case for desktop Mail that is not needed here.
        execCommand('paste') will therefore go through the general code path in Editor.cpp.

        * editing/Editor.cpp: Added PLATFORM(IOS)
        * editing/iphone/EditorIPhone.mm: Removed pasteWithPasteboard empty method.

2011-05-31  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Ian Henderson.

        <rdar://problem/8120278> Allow native scrolling to be used in overflow: scroll divs

        * WebCore.exp.in:
        Export WebCore::Frame::overflowScrollPositionChangedForNode(WebCore::IntPoint const&, WebCore::Node*)
        * loader/EmptyClients.h: Stub new ChromeClient methods.
        * page/ChromeClient.h: New ChromeClient methods to inform the client when overflow:scroll layers
        are created, changed or destroyed.

        * page/Frame.h: Add overflowScrollPositionChangedForNode(const IntPoint&, Node*)
        * page/iphone/FrameIPhone.mm:
        (WebCore::Frame::overflowScrollPositionChangedForNode): Tell the layer that the scroll
        position changed.

        * platform/ScrollableArea.h: Make handleTouchEvent() virtual so that RenderLayer can
        override it.

        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::hasAcceleratedTouchScrolling): Check scrollsOverflow() rather
        than hasOverflowClip(), otherwise overflow:hidden things are considered scrollable too.
        (WebCore::RenderLayer::handleTouchEvent): If this layer has accelerated scrolling, don't
        do the default touch event handling, because the UIScrollView will handle the events for us.
        (WebCore::RenderLayer::styleChanged): Only add a touch event listener to the document if we
        have software touch-scrolling.

        * rendering/RenderLayer.h:
        (WebCore::RenderLayer::isTouchScrollable): Should be marked virtual since this overrides ScrollableArea's method.
        (WebCore::RenderLayer::isOverflowScroll): Ditto.

        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::updateGraphicsLayerGeometry): Change from setting the scrolling contents layer's
        postion to using the bounds origin, since this matches what UIScrollView does. Add call to the ChromeClient
        (via the compositor) to tell UIKit that we updated a scrolling layer.
        (WebCore::RenderLayerBacking::updateScrollingLayers): Add call to the ChromeClient
        (via the compositor) to tell UIKit that we added a scrolling layer.
        (WebCore::RenderLayerBacking::platformLayerChanged): Renamed compositor method to be more general.

        * rendering/RenderLayerCompositor.h:
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::didMoveOnscreen): Register all scrolling layers like we do for fixed position layers.
        (WebCore::RenderLayerCompositor::willMoveOffscreen): Unregister all scrolling layers like we do for fixed position layers.
        (WebCore::RenderLayerCompositor::platformLayerChanged): Now called for both fixed position layers and scrolling layers.
        (WebCore::RenderLayerCompositor::registerAllScrollingLayers): Tell UIKit about all our layers for overflow:scroll
        (WebCore::RenderLayerCompositor::unregisterAllScrollingLayers): Tell UIKit that it should remove views for the overflow:scroll layers
        (WebCore::RenderLayerCompositor::scrollingLayerAddedOrUpdated): Call through to ChromeClient.
        (WebCore::RenderLayerCompositor::scrollingLayerRemoved): Ditto.

2011-05-31  Joseph Pecoraro  <joepeck@webkit.org>

        Merge ToT WebKit r87744.

        Error seen in the Remote Inspector preventing Scripts Panel use.

    2011-05-31  Joseph Pecoraro  <joepeck@webkit.org>

            Reviewed by Pavel Feldman.

            Web Inspector: Missing InspectorFrontendHost.saveSessionSetting function
            https://bugs.webkit.org/show_bug.cgi?id=61751

            Add missing stub function causing an error on load.

            * inspector/front-end/InspectorFrontendHostStub.js:
            (.WebInspector.InspectorFrontendHostStub.prototype.saveSessionSetting):

2011-05-31  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Kilzer.

        <rdar://problem/9293406> Remote Inspector: Sanitize strings for Listing Page
        <rdar://problem/9293721> Remote Inspector: Order Items on Listing Page

        Switch from a JavaScript file to a JSON array of listing
        objects. Allow the listing page to provide its own view
        of the pages that can be remotely inspected.

        * WebCore.exp.in: Export InspectorObject functions for WebKit.
        * inspector/front-end/listing.html: Instead of requesting a
        JavaScript file generated from the backend, request JSON data,
        and handle displaying on its own. This includes sorting the
        entries, and more gracefully handling error conditions.

2011-05-28  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by Simon Fraser.

        <rdar://problem/6645694> LayoutTests/fast/events/offsetX-offsetY.html broken

        This is another "viewport" and "porthole" difference. Using touch terminology
        document.elementFromPoint(x,y) expects clientX/Y values, not pageX/Y values.

        Test: platform/iphone-simulator/iphone/fast/coordinates/element-elementFromPoint.html

        * dom/Document.cpp:
        (WebCore::nodeFromPoint):

2011-05-28  Eric Carlson  <eric.carlson@apple.com>

        Reviewed by Simon Fraser.

        <rdar://problem/8646397> Implement webkitHasClosedCaptions and webkitClosedCaptionsVisible

        * platform/graphics/iphone/MediaPlayerPrivateIPhone.h:
        * platform/graphics/iphone/MediaPlayerPrivateIPhone.mm:
        (WebCore::MediaPlayerPrivateiPhone::hasClosedCaptions): New.
        (WebCore::MediaPlayerPrivateiPhone::setClosedCaptionsVisible): Ditto.

        * platform/graphics/mac/MediaPlayerProxy.h: Declare helper methods.

2011-05-27  Eric Carlson  <eric.carlson@apple.com>

        Reviewed by Simon Fraser.

        <rdar://problem/8993084> Vimeo videos play only audio with AirPlay on the AppleTV

        Pass changes to data-youtube-id, x-webkit-airplay, and webkit-playsinline 
        attributes through to the media engine (plug-in). These attributes are iOS only,
        so instead of plumbing separate functions through MediaPlayer and 
        MediaPlayerPrivateInterface for each attribute as we normally do, add a single
        attributeChanged function and use it for all private attribute changes.

        No new tests, this has to be tested on hardware. Checked the fixes with the
        tests attached to the Radar.

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::attributeChanged): Pass changes to data-youtube-id,
            x-webkit-airplay, and webkit-playsinline attributes through to the media engine.

        * platform/graphics/MediaPlayer.cpp:
        (WebCore::MediaPlayer::attributeChanged): New.
        * platform/graphics/MediaPlayer.h:

        * platform/graphics/MediaPlayerPrivate.h:
        (WebCore::MediaPlayerPrivateInterface::attributeChanged): Ditto

        * platform/graphics/iphone/MediaPlayerPrivateIPhone.h:
        * platform/graphics/iphone/MediaPlayerPrivateIPhone.mm:
        (WebCore::MediaPlayerPrivateiPhone::setDeferredProperties): Deal with deferred
            attributes.
        (WebCore::MediaPlayerPrivateiPhone::prepareToPlay): Remove unneeded selector checks.
        (WebCore::MediaPlayerPrivateiPhone::enterFullScreen): Ditto.
        (WebCore::MediaPlayerPrivateiPhone::exitFullScreen): Ditto.
        (WebCore::MediaPlayerPrivateiPhone::attributeChanged): New, pass attribute changes
            through to the helper.

2011-05-27  Oliver Hunt  <oliver@apple.com>

        Reviewed by Geoff Garen.

        <rdar://problem/9468511> JSTouch[List]Constructor.[cpp|h] are missing some changes

        Switch to using DOMConstructorWithDocument as the baseclass
        of these types.

        * bindings/js/JSTouchConstructor.cpp:
        (WebCore::JSTouchConstructor::JSTouchConstructor):
        * bindings/js/JSTouchConstructor.h:
        * bindings/js/JSTouchListConstructor.cpp:
        (WebCore::JSTouchListConstructor::JSTouchListConstructor):
        * bindings/js/JSTouchListConstructor.h:

2011-05-27  Oliver Hunt  <oliver@apple.com>

    <rdar://problem/8943166> Crash after running out of executable memory @ palmbrasil.com.br (requires 22.2MB)

    Merging r87327, r87436, r87445, and r87527

    2011-05-25  Oliver Hunt  <oliver@apple.com>

            Reviewed by Geoffrey Garen.

            Make RegExp GC allocated
            https://bugs.webkit.org/show_bug.cgi?id=61490

            RegExp is GC'd so we don't need the RefPtr shenanigans anymore.

            * bindings/js/SerializedScriptValue.cpp:
            (WebCore::CloneDeserializer::readTerminal):

2011-05-27  Alexey Proskuryakov  <ap@apple.com>

        Fix by David Carson, reviewed by me.

        <rdar://problem/9449561> REGRESSION: My Netgear NAS homepage doesn't load

        * platform/network/mac/ResourceHandleMac.mm:
        (WebCoreSynchronousLoaderClient::shouldUseCredentialStorage): Fix bad merge.

2011-05-27  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Dan Bernstein.

        <rdar://problem/9289712> Fixed position content with a z-index doesn't behave correctly
        
        When fixed position elements were nested, the inner elements would move
        in the wrong direction on panning, because we failed to take into
        account the fact that their ancestor layer is adjusting for the fixed
        offset already.
        
        Fix by adding code that checks to see whether a layer has
        a fixed position ancestor before registering it as a layer that
        we need to move around on panning.

        Test: platform/iphone-simulator/iphone/fixed/nested-fixed.html

        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::updateGraphicsLayerGeometry):
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::updateBacking):
        (WebCore::isRootmostFixedLayer):
        (WebCore::RenderLayerCompositor::updateFixedPositionStatus):
        (WebCore::RenderLayerCompositor::addFixedPositionLayer):
        (WebCore::RenderLayerCompositor::registerOrUpdateFixedPositionLayer):
        (WebCore::RenderLayerCompositor::registerAllFixedPositionLayers):
        * rendering/RenderLayerCompositor.h:

2011-05-26  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by Simon Fraser.

        <rdar://problem/8361532> TouchEvent clientX/Y fails when page scrolled
        <rdar://problem/8524945> MouseEvent clientX/Y wsj.com login box disappears when focusing form field

        On iOS, we don't scroll, we zoom and pan the over the viewport.
        However, that would make our scroll position always (0, 0) and
        make typical "viewport relative" coordinates like clientX/Y be
        quite useless.

        iOS has been moving more and more of these viewport relative
        coordinates to instead mean coordinates relative to iOS's actual
        visible viewport ("porthole"). This changes over TouchEvent and
        MouseEvent clientX/clientY coordinates to mean that as well.
        For more details on related changes, see:
        <rdar://problem/8333304> iOS Viewport Relative Coordinate Differences

        Tests: platform/iphone-simulator/iphone/fast/coordinates/mouse-event-coordinates-zoomed.html
               platform/iphone-simulator/iphone/fast/coordinates/mouse-event-coordinates.html
               platform/iphone-simulator/iphone/fast/coordinates/touch-event-coordinates-zoomed.html
               platform/iphone-simulator/iphone/fast/coordinates/touch-event-coordinates.html

        * platform/ScrollView.h:
        (WebCore::ScrollView::actualScrollX):
        (WebCore::ScrollView::actualScrollY):
        The "porthole" is the ScrollView's actualVisibleContentRect, unlike
        Desktop's "viewport" which is the ScrollView's visibleContentRect.
        Expose similarly accessors for what would be the scrollX and scrollY.

        * dom/MouseRelatedEvent.cpp:
        (WebCore::contentsX):
        (WebCore::contentsY):
        (WebCore::MouseRelatedEvent::MouseRelatedEvent):
        * dom/Touch.cpp:
        (WebCore::contentsX):
        (WebCore::contentsY):
        On iOS use the "porthole" scrollX/YY offsets when necessary
        so that clientX/Y are consistently offset from the pageX/Y.

2011-05-26  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/9347895> <ruby> line-wrapping incorrectly in first load

        Merge ToT WebKit r87215.

    2011-05-24  James Simonsen  <simonjam@chromium.org>

        Reviewed by Eric Seidel.

        ASSERT_NOT_REACHED reached with broken ideograph and system fallback
        https://bugs.webkit.org/show_bug.cgi?id=53528

        Test: fast/text/justify-ideograph-vertical.html (on chromium linux)

        * platform/graphics/FontFastPath.cpp:
        (WebCore::Font::glyphDataForCharacter): Identify and handle broken ideographs as any other variant.
        * platform/graphics/SimpleFontData.h:
        (WebCore::SimpleFontData::variantFontData): Added BrokenIdeographVariant.

2011-05-26  Antti Koivisto  <antti@apple.com>

        Reviewed by Simon Fraser.

        <rdar://problem/9212802> Repeated layout on main thread due to layerSyncRunLoopObserverCallBack

        The problem was that the page has a frame that would never have clean layout. The layerSyncRunLoopObserver
        is not deleted until all frames have clean layout.

        Frame flattening code always tries to layout subframes starting from the root frame. If the root frame
        does not actually have unclean layout then then layout never reaches the subframe and its unclean state is
        never cleared.

        * page/FrameView.cpp:
        (WebCore::FrameView::layout):

2011-05-25  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by Ian Henderson.

        <rdar://problem/9489016> <input type="range"> touch events assume thumb was target

        Touch events on the range input are forwarded to the shadow
        slider thumb element. They were just assumed to be touch
        events for the thumb but they could actually be touch events
        for other elements that happen to be on top of the input.
        Here the thumb ignores touch events on the input that were
        not in the thumb itself. 

        Test: platform/iphone-simulator/iphone/fast/forms/range-input-container-touches.html

        * html/shadow/SliderThumbElement.cpp:
        (WebCore::SliderThumbElement::handleTouchStart): Ignore the
        touch event if it did not start in the thumb.

        * rendering/RenderThemeIPhone.cpp:
        (WebCore::RenderThemeIPhone::paintSliderThumbDecorations):
        Drive-by fix the "pressed" state should only happen when
        the thumb is active, not when the entire input is active.

2011-05-25  Yongjun Zhang  <yongjun_zhang@apple.com>

        Reviewed by Joseph Pecoraro.

        <rdar://problem/9486983> Crash in WebCore::Document::eventRectRelativeToRoot on iForgot page

        Set removeTouchEventListener's removeAll argument to true, to ensure the node is really removed
        in Document::removeTouchEventListenersInDocument.

        * dom/Document.cpp:
        (WebCore::Document::nodeWillBeRemoved): remove the node from touch listeners map, if it will be removed from document.
        * dom/DocumentIPhone.cpp:
        (WebCore::Document::removeTouchEventListener):
        (WebCore::Document::removeTouchEventListenersInDocument):

2011-05-25  Antti Koivisto  <antti@apple.com>

        <rdar://problem/9467379> Performance regression with setting .textContent on a <div>, triggered by Reader

        Merge open source http://trac.webkit.org/changeset/87147.

    2011-05-24  Antti Koivisto  <antti@apple.com>

            Reviewed by Oliver Hunt.

            REGRESSION (r45620): Node list caches never deleted
            https://bugs.webkit.org/show_bug.cgi?id=61268
            <rdar://problem/9467379>

            NodeListsNodeData::isEmpty() tests if RefCounted objects have refcount of zero which is impossible.
            As a results NodeList caches are never deleted, causing bad performance in DOM mutating operations as
            they repeatedly invalidate caches.

            * dom/Node.cpp:
            (WebCore::Node::childNodes):
                Construct m_childNodeListCaches lazily.

            (WebCore::Node::unregisterDynamicNodeList):
            (WebCore::Node::notifyLocalNodeListsAttributeChanged):
            (WebCore::Node::notifyLocalNodeListsChildrenChanged):
            (WebCore::Node::removeNodeListCacheIfPossible): 
                Add a helper.

            (WebCore::NodeListsNodeData::invalidateCaches):
                Invalidate m_childNodeListCaches by clearing it if there are no additional clients

            (WebCore::NodeListsNodeData::isEmpty):
                Test emptiness of various NodeListCaches simply by testing hash emptiness instead of testing for non-zero ref count of items.
                m_childNodeListCaches is empty if it is null.

            * dom/Node.h: 
            * dom/NodeRareData.h:
            (WebCore::NodeListsNodeData::NodeListsNodeData):
                Construct m_childNodeListCaches lazily.

2011-05-24  Ian Henderson  <ianh@apple.com>

        <rdar://problem/9436285> REGRESSION: Call platformCALayerLayerDidDisplay when displaying tiled layers

        Reviewed by Simon Fraser.

        CATiledLayer calls only -drawInContext: on its background thread.  We
        can assume -display will happen only on the main or web threads.  Make
        sure we have the web thread lock if we're displaying on the main
        thread.

        * platform/graphics/mac/WebTiledLayer.mm:
        (-[WebTiledLayer display]):

2011-05-24  Enrica Casucci  <enrica@apple.com>

        Reviewed by Joseph Pecoraro.

        <rdar://problem/9242351> keyboard stays up after editing DIV and then proceeding to new page.

        The bulk of this bug was fixed by r1024629. This patch refines the hit testing for contenteditable,
        looking for the focusable node and using approximation when appropriate.

        * page/iphone/FrameIPhone.mm:
        (WebCore::Frame::qualifyingNodeAtViewportLocation):

2011-05-24  Oliver Hunt  <oliver@apple.com>

    <rdar://problem/9118418> +[WebScriptObject throwException:] does not appear to actually be throwing an exception in the script's execution context

    Merge WebKit ToT r86810

    2011-05-18  Oliver Hunt  <oliver@apple.com>

            Reviewed by Geoffrey Garen.

            +[WebScriptObject throwException:] doesn't work when invoked from obj-c field access
            https://bugs.webkit.org/show_bug.cgi?id=61100

            The objc bindings were written to assume exceptions would
            come from obj-c style exceptions, rather than throwException:
            This code simply calls the global ObjcInstance mechanism for
            transferring the reported exception.

            * bridge/objc/objc_instance.h:
            * bridge/objc/objc_runtime.mm:
            (JSC::Bindings::ObjcField::valueFromInstance):
            (JSC::Bindings::ObjcField::setValueToInstance):

2011-05-24  Simon Fraser  <simon.fraser@apple.com>

        Preparatory work for
        <rdar://problem/8120278> Allow native scrolling to be used in overflow: scroll divs
        
        Merge WebKit ToT r87196.

    2011-05-24  Simon Fraser  <simon.fraser@apple.com>
    
            Reviewed by Chris Marrin.
    
            Add ability to set compositing layer bounds origin
            https://bugs.webkit.org/show_bug.cgi?id=61381
    
            On Core Animation layers, the origin of the bounds
            rectangle affects where layer content is rendered, as well
            as the offset of sublayers. Currently we always set the
            bounds offset to a zero point, but may need to make use
            of the bounds offset in future, so expose it via GraphicsLayer.
    
            * platform/graphics/GraphicsLayer.h:
            (WebCore::GraphicsLayer::boundsOrigin):
            (WebCore::GraphicsLayer::setBoundsOrigin):
            * platform/graphics/ca/GraphicsLayerCA.cpp:
            (WebCore::GraphicsLayerCA::setSize):
            (WebCore::GraphicsLayerCA::setBoundsOrigin):
            (WebCore::GraphicsLayerCA::setAllowTiledLayer):
            (WebCore::GraphicsLayerCA::commitLayerChangesBeforeSublayers):
            (WebCore::GraphicsLayerCA::updateBounds):
            (WebCore::GraphicsLayerCA::ensureStructuralLayer):
            (WebCore::GraphicsLayerCA::swapFromOrToTiledLayer):
            * platform/graphics/ca/GraphicsLayerCA.h:

2011-05-24  Dan Bernstein  <mitz@apple.com>

        Reviewed by Dave Kilzer.

        WebCore part of <rdar://problem/9480665> Vertical glyphs are not used with vertical text on iOS

        Merged ToT WebKit r87201, then added code in iOS SimpleFontData::platformInit() to initialize
        m_hasVerticalGlyph, matching the Mac OS X version.

        * platform/graphics/mac/SimpleFontDataMac.mm:
        (WebCore::fontHasVerticalGlyphs):
        (WebCore::SimpleFontData::platformInit):

2011-05-24  Ian Henderson  <ianh@apple.com>

        <rdar://problem/9378690> ASSERT below GeolocationManager checking Geolocation Position

        Reviewed by Joseph Pecoraro.

        Make a copy of the linked services set before iterating over it, in
        case the error or position changed callbacks end up modifying the set.

        * platform/iphone/GeolocationManager.mm:
        (GeolocationManager::positionChanged):
        (GeolocationManager::errorOccurred):

2011-05-24  Yongjun Zhang  <yongjun_zhang@apple.com>

        Reviewed by Scott Grant and Simon Fraser.

        <rdar://problem/9307446> Remove no longer needed method Document::setShouldPaintUnstyledContent.

        setShouldPaintUnstyledContent is no longer needed since https://svn.apple.com/trac/puzzlebox/changeset/1014379
        rolled out WebCore::Document::mayCauseFlashOfUnstyledContent.

        * WebCore.exp.in:
        * dom/Document.cpp:
        (WebCore::Document::Document):
        (WebCore::Document::formElementsCharacterCount):
        * dom/Document.h:

2011-05-24  Chris Fleizach  <cfleizach@apple.com>
 
        Reviewed by David Kilzer.
 
        <rdar://problem/8585587> WEBAX: aria listboxes not accessibile

        Make ListBoxes work just like Lists on iOS for Accessibility.

        * accessibility/iphone/AccessibilityObjectWrapperIPhone.mm:
         (-[AccessibilityObjectWrapper _accessibilityListAncestor]):
         (-[AccessibilityObjectWrapper _accessibilityTraitsFromAncestors]):
         (-[AccessibilityObjectWrapper determineIsAccessibilityElement]):

2011-05-23  Chris Fleizach  <cfleizach@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/8621510> WEBAX: need to support CSS speech through AX API

        Expose the CSS 'speech' property to upper accessibility level, so that it can be communicated to VoiceOver.

        * ChangeLog-PEP:
        * accessibility/iphone/AccessibilityObjectWrapperIPhone.mm:
        (-[AccessibilityObjectWrapper accessibilitySpeechHint]):

2011-05-20  Enrica Casucci  <enrica@apple.com>

        Reviewed by Joseph Pecoraro.

        Crash when I tap Done after editing a contentEditable="true".
        <rdar://problem/9299509>
        Keyboard doesn't dismiss when tapping the Done button in a contentEditable area
        <rdar://problem/9365073>

        This patch fixes the two bugs above. Most of the fix has been done in OpenSource
        and merged here, but it also required changes in iphone platform specific files.

        * page/iphone/FrameIPhone.mm:
        (WebCore::Frame::qualifyingNodeAtViewportLocation):

        Merged ToT WebKit r86988.

    2011-05-20  Enrica Casucci  <enrica@apple.com>

            Reviewed by David Kilzer.

            Add delegate methods about focus and blur to all elements.
            https://bugs.webkit.org/show_bug.cgi?id=61218

            We want to have delegates for these events for all the elements, not only the form elements.
            The patch moves the call to the delegate in the Node class and changes the name
            of the methods not to be form element specific.

            * dom/Node.cpp:
            (WebCore::Node::dispatchFocusEvent): Added call to delegate with the new name.
            (WebCore::Node::dispatchBlurEvent): Added call to delegate with the new name.
            * html/HTMLFormControlElement.cpp:
            (WebCore::HTMLFormControlElement::dispatchBlurEvent): Removed code that calls the delegate since
            it has been moved into Node.
            * html/HTMLFormControlElement.h: Removed dispatchFocusEvent, since we are using the default inplementation in Node.
            * loader/EmptyClients.h:
            (WebCore::EmptyChromeClient::elementDidFocus): Name changed.
            (WebCore::EmptyChromeClient::elementDidBlur): Name changed.
            * page/ChromeClient.h:
            (WebCore::ChromeClient::elementDidFocus): Name changed.
            (WebCore::ChromeClient::elementDidBlur): Name changed.

2011-05-23  Chris Fleizach  <cfleizach@apple.com>

        <rdar://problem/9484437> VO doesn't work with HTML5 range (slider) input @step attribute

        Merged ToT WebKit r87111

        2011-05-23  Chris Fleizach  <cfleizach@apple.com>
          
            Reviewed by David Kilzer.
          
            VO doesn't work with HTML5 range (slider) input @step attribute
            https://bugs.webkit.org/show_bug.cgi?id=61298
          
            Test: platform/mac/accessibility/range-alter-by-step.html

            * accessibility/AccessibilityObject.h:
            (WebCore::AccessibilityObject::stepValueForRange):
            * accessibility/AccessibilityRenderObject.cpp:
            (WebCore::AccessibilityRenderObject::alterSliderValue):
            (WebCore::AccessibilityRenderObject::increment):                                           
            (WebCore::AccessibilityRenderObject::decrement):
            (WebCore::AccessibilityRenderObject::stepValueForRange):
            (WebCore::AccessibilityRenderObject::changeValueByStep):
            * accessibility/AccessibilityRenderObject.h:

2011-05-23  Alexey Proskuryakov  <ap@apple.com>

        <rdar://problem/7828739> [Wildcat7B367][SB_Cambio]: Need to enable numerical restrictions
        for double byte keyboard numbers

        Merged ToT WebKit r87008.

    2011-05-20  Alexey Proskuryakov  <ap@apple.com>
    
            Reviewed by Kent Tamura.
    
            Special characters can be inserted in text field having reached maxlength
            https://bugs.webkit.org/show_bug.cgi?id=19479
            <rdar://problem/7828739>
    
            Test: platform/mac/editing/input/maxlength.html
    
            * editing/CompositeEditCommand.cpp:
            (WebCore::CompositeEditCommand::insertTextIntoNode):
            (WebCore::CompositeEditCommand::replaceTextInNode):
            Avoid hitting an assertion below, now that we can get here with empty text.
    
            * editing/TypingCommand.cpp: (WebCore::TypingCommand::insertText): There is still work to do
            even if beforetextinput removed all text from the event. At the very least, we should delete
            the current selection.

2011-05-20  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by Scott Grant.

        <rdar://problem/9416779> Interacting with <input type="range"> then Tapping on <select> sometimes fails.

        We were incorrectly bailing out of stopDragging because
        the touch was not in the targetTouches list. In fact,
        that is expected if the exclusive touch we are handling
        was the touch that ended. We should actually only stop
        dragging if the exclusive touch we are following was
        the one that ended, and is no longer in our target
        touches list.

        Test: platform/iphone-simulator/iphone/fast/forms/range-input-touches.html

        * html/shadow/SliderThumbElement.cpp:
        (WebCore::SliderThumbElement::handleTouchEndAndCancel):
        Only stop dragging when the exclusive touch we are
        tracking has ended.

2011-05-19  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by Scott Grant.

        <rdar://problem/9416737> <input type="range">: Behavior for Touches on Track

        To be consistent system wide for sliders, do not allows
        touches on the track. Just remove all normal mouse event
        handling for the slider and thumb.

        * html/RangeInputType.cpp:
        * html/RangeInputType.h:
        * html/shadow/SliderThumbElement.cpp:
        (WebCore::SliderThumbElement::defaultEventHandler):
        * html/shadow/SliderThumbElement.h:

2011-05-17  Justin Garcia  <justin.garcia@apple.com>

        Reviewed by David Kilzer.
        
        <rdar://problem/9312702> Obscure/master out dictation for WWDC seed for non-N94/JX, non-internal install

        * English.lproj/Localizable.strings:

2011-05-17  Enrica Casucci  <enrica@apple.com>

        <rdar://problem/9295096> 9A187a + TOT: Can't enter space on line wrap

        Merged ToT WebKit r85535.

    11-05-02  Enrica Casucci  <enrica@apple.com> 

            Reviewed by Dan Bernstein. 

            Text does not split on white space when typing to the edge of window. 
            https://bugs.webkit.org/show_bug.cgi?id=59968 
            <rdar://problem/9112683> 

            Test: editing/inserting/typing-at-end-of-line.html 

            This is a regression introduced when we converted the line box tree to 
            floating point in r78846. In findNextLineBreak, there was still one place where 
            the character width was treated as int and truncated and we were inconsistent 
            in the way we treated a character that did not fit entirely in the line. 

            * rendering/RenderBlockLineLayout.cpp: 
            (WebCore::RenderBlock::findNextLineBreak

2011-05-16  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Antti Koivisto.

        <rdar://problem/8120278> Allow native scrolling to be used in overflow: scroll divs
        
        Part 2: Hook up compositing of scrolling areas, so that we can
        accelerate scrolling. This will improve scrolling performance right away,
        but bouncing etc. will be added in a later patch.

        * platform/graphics/GraphicsLayerClient.h:
        Add a "fake" paint phase so that we know when we're painting the layer for the
        scrolled contents.

        * rendering/RenderLayer.h:
        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::hasAcceleratedTouchScrolling): Returns true if
        we have accelerated scrolling for this layer.
        (WebCore::RenderLayer::scrollTo): Don't repaint if scrolling is
        accelerated.
        (WebCore::RenderLayer::calculateRects): When painting the scrolled contents,
        we want to paint the entire layer, not just the visible area, so pass
        a paramter to control this.
        (WebCore::RenderLayer::shouldBeNormalFlowOnly): Accelerated scrolling
        layers create stacking context, so they shouldn't be normal-flow layers.

        * rendering/RenderLayerBacking.h:
        (WebCore::RenderLayerBacking::scrollingLayer):
        (WebCore::RenderLayerBacking::scrollingContentsLayer):
        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::~RenderLayerBacking): Clean up scrolling layers.
        (WebCore::RenderLayerBacking::destroyGraphicsLayer): Ditto.
        (WebCore::RenderLayerBacking::updateGraphicsLayerConfiguration): No need for a
        descendents clipping layer if we're doing accelerated scrolling, because our
        scrolling layer will clip. Update the scrolling layers here.
        (WebCore::RenderLayerBacking::updateGraphicsLayerGeometry): Take scrolling layers
        into account when positioning sublayers.
        (WebCore::RenderLayerBacking::updateInternalHierarchy): Add scrolling layers into
        the hierarchy.
        (WebCore::RenderLayerBacking::updateScrollingLayers): Create or destroy scrolling
        layers as necessary.
        (WebCore::RenderLayerBacking::paintingPhaseForPrimaryLayer): The primary layer is
        the non-scrolled one, so it should never paint the foreground if we have a
        scrolling layer.
        (WebCore::RenderLayerBacking::parentForSublayers): Child layers get parented in
        m_scrollingContentsLayer if there is one.
        (WebCore::RenderLayerBacking::setContentsNeedDisplay): Dirty the scrolled contents layer
        as appropriate.
        (WebCore::RenderLayerBacking::setContentsNeedDisplayInRect): Ditto.
        (WebCore::RenderLayerBacking::paintIntoLayer): Tell calculateRects() to not clip to
        the layer bounds.
        (WebCore::RenderLayerBacking::paintContents): Handle painting into the m_scrollingContentsLayer,
        and don't intersect with the composited bounds because we need to paint the entire thing.
        (WebCore::RenderLayerBacking::updateContentsScale): Update the contentsScale of the
        m_scrollingContentsLayer too.

        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::requiresCompositingLayer): Create composited layers
        for RenderLayers with accelerated touch scrolling.
        (WebCore::RenderLayerCompositor::requiresCompositingForScrolling): Ditto.

2011-05-16  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Antti Koivisto.

        <rdar://problem/8120278> Allow native scrolling to be used in overflow: scroll divs
        
        Part 1: add parsing of new CSS property, -webkit-overflow-scrolling: touch.
        
        Parse the new property, and store it in RenderStyle. The property is 
        inherited, and has 'auto' and 'touch' values.

        Test: platform/iphone-simulator/iphone/fast/css/webkit-overflow-scrolling-parsing.html

        * css/CSSComputedStyleDeclaration.cpp:
        (WebCore::CSSComputedStyleDeclaration::getPropertyCSSValue):
        * css/CSSParser.cpp:
        (WebCore::CSSParser::parseValue):
        * css/CSSPropertyNames.in:
        * css/CSSStyleSelector.cpp:
        (WebCore::CSSStyleSelector::adjustRenderStyle):
        (WebCore::CSSStyleSelector::SelectorChecker::checkOneSelector):
        * css/CSSValueKeywords.in:
        * rendering/RenderLayerCompositor.h:
        * rendering/style/RenderStyle.cpp:
        (WebCore::RenderStyle::diff):
        * rendering/style/RenderStyle.h:
        (WebCore::InheritedFlags::useTouchOverflowScrolling):
        (WebCore::InheritedFlags::setUseTouchOverflowScrolling):
        (WebCore::InheritedFlags::initialUseTouchOverflowScrolling):
        * rendering/style/StyleRareInheritedData.cpp:
        (WebCore::StyleRareInheritedData::StyleRareInheritedData):
        (WebCore::StyleRareInheritedData::operator==):
        * rendering/style/StyleRareInheritedData.h:

2011-05-17  Anton D'Auria  <adauria@apple.com>

        <rdar://problem/9454313> Assertion failure in StorageTracker::syncDeleteOrigin when deleting origin with no local storage

        Merged ToT WebKit r86371.

    2011-05-12  Jessie Berlin  <jberlin@apple.com> 

            Reviewed by Darin Adler. 

            Assertion failure when requesting that storage be deleted for an origin without storage. 
            https://bugs.webkit.org/show_bug.cgi?id=60709 

            * storage/StorageTracker.cpp: 
            (WebCore::StorageTracker::syncDeleteOrigin): 
            If the path to the storage location for the givin origin is empty, return early instead of 
            asserting. 

2011-05-17  Anton D'Auria  <adauria@apple.com>

        <rdar://problem/9037644> Report per-origin disk usage across all storage types

        Merged ToT WebKit r86204.

    2011-05-10  Anton D'Auria  <adauria@apple.com>

            Reviewed by Alexey Proskuryakov.

            Add ApplicationCache API to get disk usage per origin
            https://bugs.webkit.org/show_bug.cgi?id=57127

            ApplicationCacheStorage already provides an API to get per-origin
            disk usage. This should be exposed through WebCore::ApplicationCache
            to not be dependent on storage implementation.

            Test: http/tests/appcache/origin-usage.html

            * WebCore.exp.in:
            * loader/appcache/ApplicationCache.cpp:
            (WebCore::ApplicationCache::diskUsageForOrigin):
            * loader/appcache/ApplicationCache.h:

2011-05-17  Anton D'Auria  <adauria@apple.com>

         <rdar://problem/9037644> Report per-origin disk usage across all storage types

         Merged ToT WebKit r86205.

     2011-05-10  Anton D'Auria  <adauria@apple.com>

            Reviewed by David Levin.
     
            StorageTracker should report actual local storage usage on disk
            https://bugs.webkit.org/show_bug.cgi?id=60558

            Tests: storage/domstorage/localstorage/storagetracker/storage-tracker-6-create.html
                   storage/domstorage/localstorage/storagetracker/storage-tracker-7-usage.html

            Use SQLiteFileSystem::getDatabaseFileSize to get actual usage by
            an origin's local storage db. Factored out code that retrieves
            path of local storage db.

            * WebCore.exp.in: Sorted alphabetically StorageTracker's mangled
            function names.
            * storage/StorageTracker.cpp:
            (WebCore::StorageTracker::syncDeleteOrigin): Uses helper function
            to get path of origin's db
            (WebCore::StorageTracker::databasePathForOrigin): New helper function.
            that gets the path of an origin's local storage db from StorageTracker.
            (WebCore::StorageTracker::diskUsageForOrigin): New API.
            * storage/StorageTracker.h:

2011-05-16  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/9449255> No need to explicitly cleanup JIT code when handling memory warning

        Reviewed by Geoffrey Garen.

        Revert changes made for <rdar://problem/9392975> since we now clean up JIT code on
        JavaScript garbage collection. This behavior was added in the merge of opensource r86510.

        * WebCore.exp.in:
        * bindings/js/GCController.cpp:
        * bindings/js/GCController.h:

2011-05-16  Ian Henderson  <ianh@apple.com>

    <rdar://problem/9369450> Scrolling Before Tapping Back or Forward Button Prevents Page from Loading

    Merge ToT r86644.

    2011-05-16  Ian Henderson  <ianh@apple.com>

            Reviewed by Joseph Pecoraro.

            Page::goToItem doesn't work while loading is deferred
            https://bugs.webkit.org/show_bug.cgi?id=60412

            If goToItem is called while loading is deferred, save the arguments
            and try again later instead of doing nothing.

            Test: loader/navigation-while-deferring-loads.html

            * loader/FrameLoader.cpp:
            (WebCore::FrameLoader::setDefersLoading):
            Pipe the "defersLoading" state into HistoryController.
            * loader/HistoryController.cpp:
            (WebCore::HistoryController::HistoryController):
            (WebCore::HistoryController::goToItem):
            Save the HistoryItem and FrameLoadType if loading is deferred.
            (WebCore::HistoryController::setDefersLoading):
            If we have a saved HistoryItem after resuming, try going to it.
            * loader/HistoryController.h:
            * page/Page.cpp:
            (WebCore::Page::goToItem):
            No longer bail early if loading is deferred, since HistoryController
            now handles this case.

2011-05-16  Dan Bernstein  <mitz@apple.com>

        Reviewed by Simon Fraser.

        <rdar://problem/7733099> Word-based selection treats apostrophe as word separator

        Test: platform/iphone-simulator/fast/dom/Range/expand-word-with-apostrophe.html

        In the simple code path for finding word boundaries, try to account for ambiguous characters,
        which are characters than can be word delimiters, but can also occur within a word.

        * platform/text/mac/TextBoundaries.mm:
        (WebCore::isWordDelimitingCharacter): Removed the ' character from the set of non-word-delimiting characters. It is ambiguous.
        (WebCore::isAmbiguousBoundaryCharacter): Added. Checks if the character is one for ', right single quotation mark, and the
        Hebrew puntuation Geresh.
        (WebCore::findSimpleWordBoundary): Consider an ambiguous character as part of the word if it is next to a non-word-delimiting
        character.

2011-05-16  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Yongjun Zhang.

        <rdar://problem/9441817> When zooming in under memory pressure, tiled layers can become non-tiled
        
        Rework the fix for <rdar://problem/8132654> in a couple of ways. This also helps with <rdar://problem/9438297>.
        
        First, constrain the contentsScale just before we set it on the layer, rather than
        affecting the value stored in the GraphicsLayerCA. This avoids us switching back
        from a tiled to a non-tiled layer when memory pressure caused us to reduce the contentsScale.
        
        Second, change the algorithm from attempting to compute contents scale based on
        dimensions to just dividing it by constants, with some quite aggressive reductions
        for low memory situations. This makes more sense when large layers will be tiled anyway.

        * platform/graphics/ca/GraphicsLayerCA.cpp:
        (WebCore::GraphicsLayerCA::clampedContentsScaleForScale):
        (WebCore::constrainedContentsScale):
        (WebCore::GraphicsLayerCA::updateContentsScale):

2011-05-16  Pratik Solanki  <psolanki@apple.com>

        Part of <rdar://problem/9449162> REGRESSION: SunSpider ~7% slower in browser than on command line (was 17%)

        Merged ToT WebKit r86523.

    2011-05-15  Geoffrey Garen  <ggaren@apple.com>

        Reviewed by Gavin Barraclough.

        https://bugs.webkit.org/show_bug.cgi?id=59699
        Global object is recreated on teardown, for no good reason
        
        (Another partial fix for <rdar://problem/9417875> REGRESSION: SunSpider
        ~7% slower in browser than on command line (was 17%))
        
        I'm basically rolling out http://trac.webkit.org/changeset/49786 because

        (a) it created this performance problem
        
        and
        
        (b) a more complete fix, which obsoletes http://trac.webkit.org/changeset/49786,
        was committed in http://trac.webkit.org/changeset/53439.
        
        Tested with the file attached to https://bugs.webkit.org/show_bug.cgi?id=29832.

        * page/Frame.cpp:
        (WebCore::Frame::~Frame): Don't create a new window every time we destroy
        a frame.

2011-05-16  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Pratik Solanki.

        <rdar://problem/9447396> LayoutTest fast/dom/constructed-objects-prototypes.html crashes

        Check for null m_document before calling removeTouchEventListener().

        * dom/Node.cpp:
        (WebCore::Node::~Node):

2011-05-16  Antti Koivisto  <antti@apple.com>

        Merge ToT WebKit r86635.

        <rdar://problem/9443884> WebCore::fastCheckSingleSelector not inlining on ARM

    2011-05-16  Antti Koivisto  <antti@apple.com>

        Reviewed by Dave Kilzer.

        https://bugs.webkit.org/show_bug.cgi?id=60927
        fastCheckSelector() does not inline correctly in all cases

        Use anonymous namespace instead of static qualifier to get internal linkage.
        Use functions as template arguments instead of classes.

        * css/CSSStyleSelector.cpp:
        (WebCore::CSSStyleSelector::SelectorChecker::fastCheckSelector):

2011-05-16  Nicholas Jong  <njong@apple.com>

        Reviewed by Justin Garcia and Joseph Pecoraro.

        <rdar://problem/9319497> Autocorrection wants to replace apostrophe with comma

        Remove WebEvent initializer made obsolete by committing UIKit phase of this bug fix.

        * platform/iphone/WebEvent.h:
        * platform/iphone/WebEvent.mm:

2011-05-16  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/9446250> Exceptions not disabled in ARM builds

        Merged ToT WebKit r86598.

    2011-05-16  David Kilzer  <ddkilzer@apple.com>

        <http://webkit.org/b/60913> C++ exceptions should not be enabled when building with llvm-gcc-4.2
        <rdar://problem/9446430>

        Reviewed by Mark Rowe.

        * Configurations/Base.xcconfig: Fixed typo.

2011-05-14  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by Simon Fraser.

        <rdar://problem/9438741> Touch Event ASSERT unexpected create touch with Stationary value
        <rdar://problem/9440517> Touch Event ASSERT unexpected Stationary touch changed location

        When UIKit receives a gesture recognizer event of two finger
        beginning touching at the same time, it is possible that one
        of those fingers is in a touch event area, and one is not.
        If that is the case we should still create and track the
        touch that was not in a touch rect since we would do so even
        if that touch moved later on.

        Also, a Stationary touch from a gesture recognizer may have
        moved its location in the viewport if the browser view was
        scaled, for example with a pinch gesture moving just one
        finger. Update the ASSERT to allow this case.

        Test: platform/iphone-simulator/iphone/fast/events/touch/multi-touch-some-without-handlers.html

        * page/iphone/EventHandlerIPhoneTouch.cpp:
        (WebCore::EventHandler::handleTouchEvent):

2011-05-15  Justin Garcia  <justin.garcia@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/9312702> Obscure/master out dictation for WWDC seed
        
        A "dictation phrase" is now referred to as a "mars volta". I've changed all of the dictation-related C++ code 
        in addition to Objective-C method signatures and ivars in the event that there is an iOS webkit source code 
        drop pre-Telluride.

        * Resources/DictationDot.png: Removed.
        * Resources/DictationDot@2x.png: Removed.
        * Resources/MarsVoltaWithAlternativesDot.png: Added.
        * Resources/MarsVoltaWithAlternativesDot@2x.png: Added.
        * WebCore.exp.in:
        * WebCore.xcodeproj/project.pbxproj:
        * dom/DocumentMarker.h:
        (WebCore::DocumentMarker::AllMarkers::AllMarkers):
        * dom/DocumentMarkerController.cpp:
        (WebCore::DocumentMarkerController::addMarker):
        (WebCore::DocumentMarkerController::addMarsVoltaWithAlternativesMarker):
        (WebCore::DocumentMarkerController::addMarsVoltasMarker):
        * dom/DocumentMarkerController.h:
        * editing/EditAction.h:
        * editing/EditCommand.cpp:
        (WebCore::EditCommand::apply):
        * editing/Editor.cpp:
        (WebCore::Editor::insertMarsVoltas):
        (WebCore::Editor::setMarsVoltasAsChildOfElement):
        * editing/Editor.h:
        * editing/iphone/DictateCommand.cpp: Removed.
        * editing/iphone/DictateCommand.h: Removed.
        * editing/iphone/InsertMarsVoltasCommand.cpp: Added.
        (WebCore::InsertMarsVoltasCommand::InsertMarsVoltasCommand):
        (WebCore::InsertMarsVoltasCommand::~InsertMarsVoltasCommand):
        (WebCore::InsertMarsVoltasCommand::doApply):
        * editing/iphone/InsertMarsVoltasCommand.h: Added.
        (WebCore::InsertMarsVoltasCommand::create):
        (WebCore::InsertMarsVoltasCommand::editingAction):
        * platform/graphics/GraphicsContext.h:
        * platform/graphics/mac/GraphicsContextMac.mm:
        (WebCore::GraphicsContext::drawLineForTextChecking):
        * rendering/InlineTextBox.cpp:
        (WebCore::textCheckingLineStyleForMarkerType):
        (WebCore::InlineTextBox::paintDocumentMarkers):

2011-05-13  Morgan Winer  <mwiner@apple.com>

        <rdar://problem/9411464> Messages chat bubble missing the last word in certain situations (2x only)

        Reviewed by David Kilzer.

        StringTrucator's stringWidth() method could accumulate some stray millionths in tallying string widths,
        and in the case of "Test received" claim its width was 96.0000076 and truncate for being over 96.
        Absorbing up to 0.0001 of error handles these mismatches nicely.

        * platform/graphics/StringTruncator.cpp:
        (WebCore::truncateString):

2011-05-12  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Pratik Solanki.

        <rdar://problem/9158123> Need to take contentsScale into account when deciding when to used tiled layers
        <rdar://problem/9412108> REGRESSION (Telluride9A206-9A207): Web page content disappears when scrolling at fortune.com page
        <rdar://problem/9429685> ASSERTION FAILED: oldLayer->superlayer() followed by crash when zooming on nytimes.com

        Clean up the way that we manage tiled layers and their contents size,
        in preparation for fixing <rdar://problem/9223956>:
        
        1. Turn off mipmapping in tiled layers, since it often ends up rendering
           between levels, so looking blurry.

        2. Manage contentsScale on tiled layers exactly as we do for other layers.
           Avoid regressing <rdar://problem/9268177> by adjusting the tile size
           based on the screen resolution.
           
        3. Take contentsScale into account in deciding when to use tiled
           layers to avoid accelerated backing store that falls over the
           max IOSurface-size limit, thus fixing <rdar://problem/9412108>.
           
        4. Set the default tiled layer tile size to 512, to match TileCache.

        * platform/graphics/GraphicsLayerClient.h:
        Add a method for the client to return screen scale (aka scaleFactor).

        * platform/graphics/ca/GraphicsLayerCA.cpp:
        (WebCore::GraphicsLayerCA::clampedContentsScaleForScale): Uncomment
        some fprintfs, but wrap them for debug builds only.
        (WebCore::GraphicsLayerCA::updateContentsScale): Remove #ifdef that
        avoided setting contentsScale on tiled layers.
        (WebCore::GraphicsLayerCA::constrainedSize): Use tiledLayerTileSize()
        rather than hardcoded tile size.
        (WebCore::GraphicsLayerCA::tiledLayerTileSize): New method to return
        tile size, scaling based on screen resolution.
        (WebCore::GraphicsLayerCA::requiresTiledLayer): Take contentsScale
        into account when deciding to use tiled layers.
        (WebCore::GraphicsLayerCA::swapFromOrToTiledLayer): Always set contentsScale,
        and set tile size for tiled layers. #ifdef out an assertion that
        fires if we try to change contentsScale on a layer that hasn't been parented yet.
        * platform/graphics/ca/GraphicsLayerCA.h: Set kTiledLayerTileSize to 512 now to match TileCache.
        * platform/graphics/ca/PlatformCALayer.h:
        * platform/graphics/ca/mac/PlatformCALayerMac.mm:
        (PlatformCALayer::PlatformCALayer): Don't enable mipmapping on iOS
        (PlatformCALayer::setTileSize): New method to set tile size for tiled layers.
        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::scaleFactor): GraphicsLayerClient implementation.
        * rendering/RenderLayerBacking.h:
        * rendering/RenderLayerCompositor.cpp: Get the scaleFactor from chrome().
        (WebCore::RenderLayerCompositor::scaleFactor):
        * rendering/RenderLayerCompositor.h:

2011-05-12  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Kilzer.

        Remove remaining Local Web Inspector pieces in WebCore.

        * WebCore.exp.in:
        * inspector/InspectorAgent.cpp:
        * inspector/InspectorAgent.h:
        * inspector/InspectorClient.h:
        * inspector/InspectorController.cpp:
        * inspector/InspectorController.h:

2011-05-11  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by Ian Henderson.

        <rdar://problem/9425098> CRASH: <input type="range"> attempting to draw border with too large of a corner radius

        Test: platform/iphone-simulator/iphone/fast/forms/short-slider.html

        When a slider had specified a small size, we need to verify
        that we don't pass in a corner radius that is more than half of
        the height or width. We now handle that case.

        Also, drawing a track with a height of 0 or 1 was not actually
        clipping the gradient corners. Be more explicit about how
        we inset the the track's clip rect, and make the rounded clip
        rect ourselves for the gradient's clip.

        * rendering/RenderThemeIPhone.cpp:
        (WebCore::RenderThemeIPhone::paintSliderTrack):

2011-05-11  Matthew Delaney  <mdelaney@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/9360907> Regression: iOS: Canvas returns pixels in BGRA format (should be RGBA)

        No new tests. Current canvas layout tests exercise this.

        * platform/graphics/cg/ImageBufferDataCG.cpp:
        (WebCore::ImageBufferData::getData):
        (WebCore::ImageBufferData::putData):

2011-05-10  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Joe Pecoraro.

        <rdar://problem/9325674> Allow one-finger scrolling of overflow:scroll divs

        Add touch handling code that allows basic single-finger scrolling of
        overflow: scroll divs. The scrolling is non-accelerated, and does not
        have any bounce behavior.
        
        We add a default event handler for touch events that forwards them
        to scrollable RenderLayers. The layer's ScrollableArea then has an
        iOS-specific ScrollAnimator to handle the scrolling.

        * WebCore.xcodeproj/project.pbxproj: Add ScrollAnimatorIPhone.*

        * dom/Node.cpp:
        (WebCore::Node::defaultEventHandler): Forward touch events to scrollable
        areas.

        * dom/TouchEvent.h:
        (WebCore::TouchEvent::platformTouchEvent): Add getter and setter for
        the platform event on TouchEvent.
        * dom/TouchEvent.cpp:
        (WebCore::TouchEvent::setPlatformTouchEvent): Ditto.

        * page/EventHandler.h: Add defaultTouchEventHandler().
        * page/iphone/EventHandlerIPhoneTouch.cpp:
        (WebCore::EventHandler::dispatchTouchEvent): Set the platform event
        on the DOM event.
        (WebCore::layerForNode): Utility function copied from EventHandler.cpp
        (WebCore::EventHandler::defaultTouchEventHandler): Forward the event
        to the node's scrollableArea, which is a RenderLayer.
        
        * platform/PlatformTouchEvent.h:
        (WebCore::PlatformTouchEvent::PlatformTouchEvent): New copy ctor.

        * platform/ScrollAnimator.h:
        * platform/ScrollAnimator.cpp: Turn off the default create() method for iOS.
        (WebCore::ScrollAnimator::handleTouchEvent): Stub.

        * platform/ScrollableArea.h:
        (WebCore::ScrollableArea::isTouchScrollable): New method for iOS scrolling.
        (WebCore::ScrollableArea::isOverflowScroll): Ditto.
        (WebCore::ScrollableArea::visibleContentRect):
        Name the param.
        * platform/ScrollableArea.cpp:
        (WebCore::ScrollableArea::handleTouchEvent): Forward to the ScrollAnimator.

        * platform/iphone/ScrollAnimatorIPhone.h: Added.
        * platform/iphone/ScrollAnimatorIPhone.mm: Added.
        (WebCore::ScrollAnimator::create):
        (WebCore::ScrollAnimatorIPhone::ScrollAnimatorIPhone):
        (WebCore::ScrollAnimatorIPhone::~ScrollAnimatorIPhone):
        (WebCore::ScrollAnimatorIPhone::handleTouchEvent): New iOS-specific
        scroll animator looks at the touches, computes latching, and scrolls
        the ScrollableArea appropriately.
        
        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::~RenderLayer):
        (WebCore::RenderLayer::scrollPosition):
        (WebCore::RenderLayer::minimumScrollPosition):
        (WebCore::RenderLayer::maximumScrollPosition):
        (WebCore::RenderLayer::visibleContentRect):
        (WebCore::RenderLayer::overhangAmount):
        (WebCore::RenderLayer::didCompleteRubberBand):
        (WebCore::RenderLayer::styleChanged):
        Flesh out some ScrollableArea methods that ScrollAnimator needs.
        
        * rendering/RenderLayer.h:
        (WebCore::RenderLayer::isTouchScrollable):
        (WebCore::RenderLayer::isOverflowScroll): Override ScrollableArea
        methods.

2011-05-10  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Kilzer.

        <rdar://problem/9293383> Remote Inspector: Extract Listing Page to a separate HTML file

        Add the static Remote Inspector listing html
        page alongside the other front-end resources.

        * inspector/front-end/listing.html: Added.

2011-05-10  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by Antti Koivisto.

        <rdar://problem/5459762> Missing UI: No slider UI rendered for <input type=range> in MobileSafari

        Switch from adjustSliderThumbStyle to adjustSliderThumbSize
        which is called only for the SliderThumbElement shadow element.
        This allows us to not adjust the style for random elements
        with "-webkit-appearance: slider-horizontal", which was
        covered by tests.

        * rendering/RenderTheme.cpp:
        (WebCore::RenderTheme::paintDecorations):
        Don't paint decorations if our parent isn't a slider.

        * rendering/RenderThemeIPhone.h:
        * rendering/RenderThemeIPhone.cpp:
        (WebCore::RenderThemeIPhone::adjustSliderThumbSize):
        Only adjust styles for the shadow thumb element.

2011-05-10  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/9203259> Crashes in WebCore::ResourceHandle::client on J2 and when using AirPlay

        Merged ToT WebKit r86200.

    2011-05-10  Pratik Solanki  <psolanki@apple.com>

        Reviewed by Alexey Proskuryakov.

        Protect self in [WebCoreResourceHandleAsDelegate connection:didReceiveDataArray:]
        https://bugs.webkit.org/show_bug.cgi?id=60594
        <rdar://problem/9203259>

        No tests since we don't have any bots testing CFNETWORK_DATA_ARRAY_CALLBACK.

        * platform/network/mac/ResourceHandleMac.mm:
        (-[WebCoreResourceHandleAsDelegate connection:didReceiveDataArray:]): The didReceiveData()
        callback on client can result in the load being cancelled. This results in the delegate
        (self) being freed.  Protect self during the loop so we can check for m_handle and safely
        return without crashing.

2011-05-10  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by Simon Fraser.

        Cleanup RenderTheme drawing code a bit to use
        GraphicsContextStateSaver to save and restore
        the graphics context state. And RetainPtr.

        * rendering/RenderThemeIPhone.cpp:
        (WebCore::RenderThemeIPhone::paintCheckboxDecorations):
        (WebCore::RenderThemeIPhone::paintRadioDecorations):
        (WebCore::RenderThemeIPhone::paintTextFieldDecorations):
        (WebCore::RenderThemeIPhone::paintMenuListButtonDecorations):
        (WebCore::RenderThemeIPhone::paintSliderTrack):
        (WebCore::RenderThemeIPhone::paintSliderThumbDecorations):
        (WebCore::RenderThemeIPhone::paintPushButtonDecorations):

2011-05-09  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by Simon Fraser.

        <rdar://problem/5459762> Missing UI: No slider UI rendered for <input type=range> in MobileSafari

        Make the slider respond to touches, and be usable
        with a single, exclusive touch.

        * page/iphone/EventHandlerIPhoneTouch.cpp:
        (WebCore::EventHandler::dispatchTouchEvent):
        Allow an event's default handled property to also notify
        WebCore clients that the touch event was handled and
        prevent default behavior like scrolling.

        * html/HTMLInputElement.cpp:
        (WebCore::HTMLInputElement::defaultEventHandler):
        * html/InputType.cpp:
        (WebCore::InputType::handleTouchEvent):
        * html/InputType.h:
        * html/RangeInputType.cpp:
        (WebCore::RangeInputType::handleTouchEvent):
        * html/RangeInputType.h:
        Like other events, pass a touch event down through
        the input element to its input type to see if the
        type can respond to the event.

        * html/shadow/SliderThumbElement.h:
        (WebCore::SliderThumbElement::SliderThumbElement):
        Add Touch related methods and instance members.

        * html/shadow/SliderThumbElement.cpp:
        (WebCore::SliderThumbElement::attach):
        (WebCore::SliderThumbElement::detach):
        Add and remove a touch region in the Document's
        touch rects list in order to immediately respond
        to touches.

        (WebCore::SliderThumbElement::dragFrom):
        (WebCore::SliderThumbElement::defaultEventHandler):
        Do not start dragging when mouse events were the cause.
        Likewise, mouse moves happen when we move away from
        the range input and aren't a normal case when there
        are touch events.

        (WebCore::SliderThumbElement::exclusiveTouchIdentifier):
        (WebCore::SliderThumbElement::setExclusiveTouchIdentifier):
        (WebCore::SliderThumbElement::clearExclusiveTouchIdentifier):
        Save the identifier of the first touch that started
        interacting with the slider. Only respond to that
        touch's subsequent events such as moved, end, and cancel.
        This way other touches do not change affect the slider.
        
        (WebCore::findTouchWithIdentifier):
        (WebCore::SliderThumbElement::handleTouchStart):
        (WebCore::SliderThumbElement::handleTouchMove):
        (WebCore::SliderThumbElement::handleTouchEndAndCancel):
        (WebCore::SliderThumbElement::handleTouchEvent):
        Handle touch events by identifying the starting touch,
        and listening exclusively to that touch during its lifetime.

2011-05-09  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by Simon Fraser.

        <rdar://problem/5459762> Missing UI: No slider UI rendered for <input type=range> in MobileSafari

        Implement the slider RenderTheme parts for iOS to
        match the original <input type="range"> slider design.

        * css/html.css:
        (input[type="range"]):
        (input[type="range"]::-webkit-slider-thumb):
        (input[type="range"]::-webkit-slider-thumb:active):
        Style the thumb similarly to a checkbox.

        * rendering/RenderTheme.h:
        * rendering/RenderTheme.cpp:
        (WebCore::RenderTheme::paintDecorations):
        (WebCore::RenderTheme::paintSliderThumbDecorations):
        Add another decorations method for the slider thumb.

        * rendering/RenderThemeIPhone.h:
        * rendering/RenderThemeIPhone.cpp:
        (WebCore::getSliderTrackGradient):
        (WebCore::getSliderThumbOpaquePressedGradient):
        (WebCore::gradientWithName):
        Add a few new gradients for the slider track and thumb,
        when it is pressed, to get the desired look.

        (WebCore::RenderThemeIPhone::adjustSliderTrackStyle):
        (WebCore::RenderThemeIPhone::paintSliderTrack):
        The slider is a ~6px tall line with rounded edges,
        a border, and dark gradient.

        (WebCore::RenderThemeIPhone::adjustSliderThumbStyle):
        (WebCore::RenderThemeIPhone::paintSliderThumbDecorations):
        The thumb looks like a radio button in its normal and
        active (pressed) states. A minor difference is that
        the thumb is opaque and not slightly transparent.

2011-05-05  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by Simon Fraser.

        Remove ENABLE(RANGETYPE_AS_TEXT).

        * WebCore.xcodeproj/project.pbxproj:
        * html/InputType.cpp:
        (WebCore::createInputTypeFactoryMap):
        * html/InputType.h:
        * html/RangeTextInputType.cpp: Removed.
        * html/RangeTextInputType.h: Removed.

2011-05-10  Dean Jackson  <dino@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/9191698> α, β and γ retuned from "deviceorientation" event do not follow the same range as W3C spec

        Normalize alpha values in [0, 360]. Unfortunately CoreMotion doesn't
        return beta and gamma values in the range requested by the W3C specification,
        but it should not matter for most practical purposes. See followup
        bug <rdar://problem/9414459> Normalize our DeviceOrientation beta/gamma per spec.

        * platform/iphone/CoreMotionManager.mm:
        (-[CoreMotionManager sendMotionData:withHeading:]):

2011-05-09  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by Simon Fraser.

        <rdar://problem/9407725> TouchEvent's pageX/pageY are incorrect values when document scale != 1

        The TouchEvent's constructor generates pageX and pageY
        coordinates, though its super-constructor, the same way
        that these functions do when passing the values in. This
        resulted in a duplicate transformation of the centroid.

        * page/iphone/EventHandlerIPhoneTouch.cpp:
        (WebCore::EventHandler::dispatchTouchEvent):
        (WebCore::EventHandler::dispatchGestureEvent):
        Let the TouchEvent constructor perform the translation
        from window to page coordinates.

2011-05-09  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/9392975> Should clean up JIT code when we get a memory warning

        Reviewed by Oliver Hunt and David Kilzer.

        * WebCore.exp.in:
        * bindings/js/GCController.cpp:
        (WebCore::GCController::recompileAllJSFunctions): Added. Called by WebKit when we receive a
        memory warning. This calls into JSGlobalData to free up JIT code.
        * bindings/js/GCController.h:

2011-05-09  Simon Fraser  <simon.fraser@apple.com>

        Merge WebKit ToT r85890 for work on <rdar://problem/9325674>.

    2011-05-05  Simon Fraser  <simon.fraser@apple.com>
    
            Reviewed by Beth Dakin.
    
            Every RenderLayer registers itself as a ScrollableArea
            https://bugs.webkit.org/show_bug.cgi?id=59650
    
            Rather than registering every RenderLayer as a ScrollableArea
            on layer creation, only register RenderLayers which are overflow-
            scrollable. Use the m_scrollableAreaPage pointer to keep track
            of whether we've registered to avoid excess work.
    
            * rendering/RenderLayer.cpp:
            (WebCore::RenderLayer::RenderLayer):
            (WebCore::RenderLayer::scrollsOverflow):
            (WebCore::RenderLayer::styleChanged):
            * rendering/RenderLayer.h:

2011-05-09  Antti Koivisto  <antti@apple.com>

        Not reviewed.

        Add an assert requested by Simon.

        * editing/SelectionController.h:
        (WebCore::SelectionController::restoreScrolling):

2011-05-09  Antti Koivisto  <antti@apple.com>

        Reviewed by Pratik Solanki.

        <rdar://problem/9119980> Zoomed out tiles can flash to a new scale when loading a new page

        Fix another case of jumpiness when restoring from page cache. When navigating to a cached page that focuses
        a form element (for example google.com), we would end up visually updating the scroll position on the old page
        as this happens very early during the restore and position changes are not suppressed yet in UIKit side.

        Fix by suppressing selection initiated position changes when restoring from the page cache.

        This would probably be ok no-effect patch for desktop as well.

        * editing/SelectionController.cpp:
        (WebCore::SelectionController::SelectionController):
        (WebCore::SelectionController::revealSelection):
        * editing/SelectionController.h:
        (WebCore::SelectionController::suppressScrolling):
        (WebCore::SelectionController::restoreScrolling):
        * history/CachedPage.cpp:
        (WebCore::CachedPage::restore):

2011-05-09  Nicholas Jong  <njong@apple.com>

        Reviewed by Justin Garcia and Joseph Pecoraro.

        <rdar://problem/9319497> Autocorrection wants to replace apostrophe with comma

        Add new property keyVariant to WebEvent so that iOS key
        events from popup variants that go through WebKit trigger the
        correct autocorrection behavior.

        * platform/iphone/WebEvent.h:
        * platform/iphone/WebEvent.mm:
        (-[WebEvent initWithKeyEventType:timeStamp:characters:charactersIgnoringModifiers:modifiers:isRepeating:keyCode:isTabKey:characterSet:]):
        (-[WebEvent initWithKeyEventType:timeStamp:characters:charactersIgnoringModifiers:modifiers:isRepeating:isVariant:keyCode:isTabKey:characterSet:]):
        (-[WebEvent _eventDescription]):
        (-[WebEvent isPopupVariant]):

2011-05-06  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by Dean Jackson.

        Fix a FIXME now that code has been merged in.

        * page/iphone/EventHandlerIPhoneTouch.cpp:
        (WebCore::EventHandler::handleTouchEvent):

2011-05-06  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by Pratik Solanki.

        Remove unused or duplicate includes.

        * dom/DocumentIPhone.cpp:
        * page/iphone/WebEventRegion.mm:

2011-05-05  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Carson.

        Remove unused variable.

        * rendering/RenderThemeIPhone.cpp:
        (WebCore::RenderThemeIPhone::paintPushButtonDecorations):

2011-05-06  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/9398209> Merge r85375: REGRESSION: r83938 abandons GC memory (59604)

        Merged ToT WebKit r85375.

    2011-04-29  Geoffrey Garen  <ggaren@apple.com>

        Reviewed by Alexey Proskuryakov.

        REGRESSION: r83938 abandons GC memory
        https://bugs.webkit.org/show_bug.cgi?id=59604

        This bug was caused by script and image elements waiting indefinitely
        for their loads to finish.

        * bindings/js/JSNodeCustom.cpp:
        (WebCore::isReachableFromDOM): Don't test for the load event firing,
        since the load event doesn't fire in cases of canceled or errored loads.
        Instead, test hasPendingActivity().
        
        Don't do this test at all for script elements because script elements
        can't load while outside the document. (fast/dom/script-element-gc.html
        verifies that this is correct.)

        * html/HTMLImageElement.cpp:
        (WebCore::HTMLImageElement::hasPendingActivity):
        * html/HTMLImageElement.h:
        * loader/ImageLoader.cpp:
        (WebCore::ImageEventSender::hasPendingEvents):
        (WebCore::ImageLoader::hasPendingLoadEvent):
        * loader/ImageLoader.h: Added API for finding out if an image element
        has pending activity.

        * loader/cache/CachedResource.cpp:
        (WebCore::CachedResource::setRequest): All loads are supposed to end in
        data(allDataReceived = true) or error(), but in the edge case of a
        canceled load, all we get is a call to setRequest(0). Be sure to
        record that we're no longer loading in that case, otherwise our element
        will leak forever, waiting for its load to complete.

2011-05-06  Antti Koivisto  <antti@apple.com>

        Reviewed by Yongjun Zhang.

        <rdar://problem/9151383> ASSERT(m_thread == currentThread()) in WebCore::JSCallbackData::~JSCallbackData on iPad Gmail

        This is a bad assert on iOS WebKit. It is safe to delete from both main and web thread as they protected by the web lock.
        Didn't bother with a replacement assert as we don't have compatible thread ids easily available.

        * bindings/js/JSCallbackData.h:
        (WebCore::JSCallbackData::~JSCallbackData):

2011-05-05  Antti Koivisto  <antti@apple.com>

        Reviewed by Ian Henderson.

        <rdar://problem/9337766> Graphic from one web page shows up in another web page

        The problem is that when transitioning betweeen pages, setNeedsDisplay may get clipped to the current view bounds
        which may be out of sync and small. View expands back to the large size and nothing informs the tile cache that some
        of the tiles are now invalid.

        Fix by calling TileCache::setNeedsDisplay() from UIKit side when the load commits. This becomes a pending
        full view invalidation (using m_savedDisplayRects) until the tile updates are re-enabled and then gets executed at that point
        in the web thread (from updateTilingMode()).

        For this, make TileCache::setNeedsDisplay() actually work. It invalidates all existing tiles, without clipping
        to view or document bounds.

        * platform/iphone/TileCache.mm:
        (WebCore::TileCache::setNeedsDisplay):
        * platform/iphone/TileGrid.mm: 
        (WebCore::TileGrid::dropTilesOutsideRect): Use dropTilesBetweenRects().
        (WebCore::TileGrid::dropTilesBetweenRects): Iterate over live tiles instead of the grid as the area tends to be large.
        (WebCore::TileGrid::invalidateTiles): Add efficient path for invalidating large rectangles.

2011-05-05  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Carson.

        <rdar://problem/9390592> Remove On-Device Web Inspector - Remote Inspector is Better

        Remove the iOS Specific tweaks to the inspector front-end
        resources that existed make it slightly better for a touch
        interface. Removes the associated build phase and scripts.

        * WebCore.xcodeproj/project.pbxproj:
        * inspector/front-end/iphone/iphone.css: Removed.
        * inspector/front-end/iphone/iphone.js: Removed.
        * inspector/generate-inspector-html-with-extras: Removed.

2011-05-05  Enrica Casucci  <enrica@apple.com>

    Reviewed by Joseph Pecoraro.

    <rdar://problem/9104865> iTunes Store crashes in WebCore::RenderReplaced::positionForPoint when attempting to play an embedded PING video

    The positionForPoint method had some code, that was iOS specific, that did not account
    correctly for the case where we don't have an InlineBox.
    There is no reason to keep the #ifdef anymore, therefore I've removed it
    and kept the same implementation as OpenSource WebKit.

    * rendering/RenderReplaced.cpp:
    (WebCore::RenderReplaced::positionForPoint):

2011-05-05  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/9382852> Enable CFNetwork disk caching for images

        Reviewed by David Kilzer.

        * loader/mac/ResourceLoaderMac.mm:
        (WebCore::ResourceLoader::willCacheResponse): Remove the code added to disable images in
        CFURL cache. Performance measurements in <rdar://8710786> indicate that having images in
        disk cache is a perf win for cold launches.

2011-05-05  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by Ian Henderson.

        <rdar://problem/9377336> "month" Format String Should Be Tested For Other Languages

        There is a way to get a localized date format string
        for a particular locale with a particular set of
        date components. This is perfect for Month + Year.

        * platform/text/iphone/LocalizedDateCache.mm:
        (WebCore::LocalizedDateCache::createFormatterForType):

2011-05-04  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Kilzer.

        <rdar://problem/9293648> Remote Inspector: Streamline Inspector Resources

        Restore the ToT Streamline build phase. This removes
        the iOS specific quick break and allows the resources
        to be streamlined.

        * WebCore.xcodeproj/project.pbxproj: restore build phase.

2011-05-04  Joseph Pecoraro  <joepeck@webkit.org>

        <rdar://problem/9068091> Can't paste into textfield with multiple inherited -webkit-user-select values (affects GameCenter signup)

        Merged ToT WebKit r85818.

    2011-05-04  Joseph Pecoraro  <joepeck@webkit.org>

            Reviewed by Darin Adler.

            Unable to Paste After Deleting Text from Input due to -webkit-user-select
            https://bugs.webkit.org/show_bug.cgi?id=60219

            When deleting all the text inside the input a placeholder <br>
            element was inserted for the selection point. However, when
            pasting, the test run computes the -webkit-user-select for the
            <br> element, instead of what would be the text inside the
            <input> and incorrectly disallows selection and prevented
            the paste.

            Test: editing/pasteboard/paste-placeholder-input.html

            * editing/ReplaceSelectionCommand.cpp:
            (WebCore::ReplacementFragment::insertFragmentForTestRendering): skip
            <br> elements above us as those are likely placeholder elements.

2011-05-03  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Kilzer.

        <rdar://problem/8671242> WebKit shouldn't cache geolocation response (affects iAds)

        When a geolocation permission request is returned, WebCore's
        Geolocation saves that value in an instance variable. If we
        want to always request permission we can clear the instance
        variable when no more callbacks are queued. This can be done
        at the end of setIsAllowed, since all pending callbacks
        will be made in the body of the function.

        No test yet because there is no support for the Geolocation
        tests in DumpRenderTree yet. They are currently skipped.

        * page/Geolocation.cpp:
        (WebCore::Geolocation::setIsAllowed):
        (WebCore::GeolocationClearPermissionGuard::GeolocationClearPermissionGuard):
        (WebCore::GeolocationClearPermissionGuard::~GeolocationClearPermissionGuard):
        When the Setting is enabled to always request permission
        the stack allocated guard will clear the permission at
        the end of the function.

        * page/Geolocation.h:
        (WebCore::Geolocation::clearPermission): set the permission
        to Unknown, so that it will be requested again later.

        * page/Settings.cpp:
        (WebCore::Settings::Settings):
        * page/Settings.h:
        (WebCore::Settings::setAlwaysRequestGeolocationPermission):
        (WebCore::Settings::alwaysRequestGeolocationPermission):
        Boilerplate for a page setting.

2011-05-03  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/9359515> Implement HTTP pipelining for CoreFoundation-based networking in WebCore

        Merged ToT WebKit r85684.

    2011-05-03  David Kilzer  <ddkilzer@apple.com>

        <http://webkit.org/b/59838> Implement HTTP pipelining for CoreFoundation-based networking

        Reviewed by Antti Koivisto.

        * platform/network/cf/ResourceRequestCFNet.cpp:
        (WebCore::ResourceRequest::doUpdatePlatformRequest): Set the
        priority on the request if HTTP pipelining is enabled.
        (WebCore::ResourceRequest::doUpdateResourceRequest): Read the
        priority from the request if HTTP pipelining is enabled.
        (readBooleanPreference): Enable code when compiling with
        USE(CFNETWORK).
        (WebCore::initializeMaximumHTTPConnectionCountPerHost): Ditto.
        Comment out setting the minimum fast lane priority on Windows
        since it's not currently available.

2011-05-03  Andy Estes  <aestes@apple.com>

        Reviewed by David Kilzer.
        
        <rdar://problem/9378117> MobileSafari claims to have 32 bits per color
        component when asked by a CSS media query.

        screenDepthPerComponent() should return a sane value. If we hard-code a
        screen depth of 32 bits in screenDepth(), then screenDepthPerComponent()
        should return 8 bits per component, not 32 bits per component.

        No new tests. This fix causes a progression in
        fast/css/media-rule-screenDepthPerComponent.html.

        * platform/iphone/PlatformScreenIPhone.mm:
        (WebCore::screenDepthPerComponent): Assume that the screen depth is
        evenly divided into four color components.

2011-05-03  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by Ian Henderson.

        <rdar://problem/9006919> Provide better UI for on page <input type="date">

        Update formatters if the locale changes. The cached
        formatters would all have the old locale.

        * platform/text/iphone/LocalizedDateCache.h:
        * platform/text/iphone/LocalizedDateCache.mm:
        (WebCore::_localeChanged):
        (WebCore::LocalizedDateCache::LocalizedDateCache):
        register for locale changed notifications.
        (WebCore::LocalizedDateCache::~LocalizedDateCache):
        unregister for the locale changed notifications.
        (WebCore::LocalizedDateCache::localeChanged):
        update the formatters to the new locale.

2011-05-03  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by Ian Henderson.

        <rdar://problem/9006919> Provide better UI for on page <input type="date">

        This adds a localized date implementation for iOS
        to provide localized date strings as the visual value
        in date inputs.

        This also adds RenderTheme styling for the date inputs.
        They use the menulist-button appearance, like <select>
        lists, and automatically adjust their width to fit the
        maximum date size for the given style. This forces the
        width when the element does not have a set width.

        Add a cache for a single Font and the maximum widths for
        formatted input strings to prevent recalculating the
        maximum width, which may require formatting a string for
        each different months and may be expensive.

        Test: platform/iphone-simulator/iphone/fast/forms/date-input-decorations.html

        * WebCore.xcodeproj/project.pbxproj: add LocalizedDateIPhone.mm
        and LocalizedDateCache files. Make DateComponents.h private
        for WebKit files that need to include HTMLInputElement.h.

        * html/BaseDateAndTimeInputType.h:
        * html/HTMLInputElement.cpp:
        (WebCore::HTMLInputElement::dateType):
        * html/HTMLInputElement.h:
        * html/InputType.cpp:
        (WebCore::InputType::dateType):
        * html/InputType.h: expose the DateComponents::Type for an
        InputType. Non-date-and-time types return Invalid.

        * css/html.css:
        (input[type="time"]): give supported date inputs the
        menulist-button appearances.

        * platform/text/LocalizedDateNone.cpp: ignore on iOS.

        * platform/text/iphone/LocalizedDateIPhone.mm: Added.
        (WebCore::formatLocalizedDate): returns the formatted string for
        a particular date and a desired date type format.
        (WebCore::maximumWidthForDateType): returns the maximum width a
        string would be for a given date type and font.

        * rendering/RenderThemeIPhone.cpp:
        (WebCore::applyCommonButtonPaddingToStyle):
        (WebCore::adjustSelectListButtonStyle):
        (WebCore::adjustInputElementButtonStyle):
        Factor out smaller methods for style adjusts.
        (WebCore::RenderThemeIPhone::adjustMenuListButtonStyle): for
        a date input type using the menulist-button style, we enforce
        the padding and width of the input.

        * platform/text/iphone/LocalizedDateCache.h: Added.
        * platform/text/iphone/LocalizedDateCache.mm: Added.
        (WebCore::localizedDateCache): Singleton accessor. Lazily created.
        (WebCore::LocalizedDateCache::LocalizedDateCache):
        (WebCore::LocalizedDateCache::~LocalizedDateCache):
        (WebCore::LocalizedDateCache::formatterForDateType):
        (WebCore::LocalizedDateCache::maximumWidthForDateType):
        (WebCore::LocalizedDateCache::createFormatterForType):
        (WebCore::LocalizedDateCache::calculateMaximumWidth):
        Font copy and comparison exists, so cache the most recently
        used Font and for that font cache a map of maximum widths
        and formatters for the different date types.

2011-05-01  Joseph Pecoraro  <joepeck@webkit.org>

        <rdar://problem/9006919> Provide better UI for on page <input type="date">

        Merged ToT WebKit r85382.

    2011-04-29  Joseph Pecoraro  <joepeck@webkit.org>

            Reviewed by Kent Tamura.

            Allow Localized Date Strings for Date Input Fields
            https://bugs.webkit.org/show_bug.cgi?id=59752

            Test: fast/forms/date-input-visible-strings.html

            * CMakeLists.txt:
            * WebCore.gypi:
            * WebCore.pro:
            * WebCore.vcproj/WebCore.vcproj:
            * WebCore.xcodeproj/project.pbxproj: update build files for
            moving DateComponents from WebCore/html to WebCore/platform
            and adding the LocalizedDate files.

            * html/BaseDateAndTimeInputType.cpp:
            (WebCore::BaseDateAndTimeInputType::serialize):
            (WebCore::BaseDateAndTimeInputType::serializeWithComponents):
            (WebCore::BaseDateAndTimeInputType::serializeWithMilliseconds):
            InputType::serialize for a double value with date types is
            different for the month type because it assumes the incoming
            value is months instead of msecs (matching valueAsNumber in
            HTML5).  So provide a more general serialization function,
            serializeWithComponents, that will always serialize a string
            correctly for the current type but taking in a DateComponents
            object. The default serialize, and new serializeWithMilliseconds,
            can fall back to this and allows an override point for
            the month type.

            * html/MonthInputType.cpp:
            (WebCore::MonthInputType::serializeWithMilliseconds): the month
            type is a case where the default serialize does not take msec,
            so provide an implementation for month which handles msec input.

            * html/BaseDateAndTimeInputType.cpp:
            (WebCore::BaseDateAndTimeInputType::setValueAsDate): switch
            to serializeWithMilliseconds as the incoming date value is msec.
            * html/MonthInputType.cpp:
            (WebCore::MonthInputType::setValueAsDate): removed.

            * html/BaseDateAndTimeInputType.cpp:
            (WebCore::BaseDateAndTimeInputType::visibleValue): allow
            localized formatting of a date value.
            (WebCore::BaseDateAndTimeInputType::convertFromVisibleValue):
            allow parsing for a formatted date value.

            * html/BaseDateAndTimeInputType.h:
            * platform/DateComponents.cpp: Renamed from Source/WebCore/html/DateComponents.cpp.
            Expose the Type enum so it can be used outside of the DateComponents class.
            * platform/text/LocalizedDate.h: Added.
            * platform/text/LocalizedDateNone.cpp: Added.
            (WebCore::formatLocalizedDate): Default implementation falls back to
            existing HTML5 date input value formatting.

            * html/BaseDateAndTimeInputType.h:
            * html/DateInputType.cpp:
            (WebCore::DateInputType::dateType):
            * html/DateInputType.h:
            * html/DateTimeInputType.cpp:
            (WebCore::DateTimeInputType::dateType):
            * html/DateTimeInputType.h:
            * html/DateTimeLocalInputType.cpp:
            (WebCore::DateTimeLocalInputType::dateType):
            * html/DateTimeLocalInputType.h:
            * html/MonthInputType.cpp:
            (WebCore::MonthInputType::dateType):
            * html/MonthInputType.h:
            * html/TimeInputType.cpp:
            (WebCore::TimeInputType::dateType):
            * html/TimeInputType.h:
            * html/WeekInputType.cpp:
            (WebCore::WeekInputType::dateType):
            * html/WeekInputType.h: Accessors for the desired date
            type of a date input type. This allows the base class
            to write a generic algorithm.

2011-05-03  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/9173203> Enable Whippet everywhere (except text views)

        Reviewed by Simon Fraser.

        Instead of using an iOS only defaults pref, we now use the same pref as desktop (in
        WebPreferences) for enabling/disabling accelerated drawing.

        * WebCore.exp.in:
        * platform/graphics/Image.cpp:
        (WebCore::Image::drawTiled):
        * platform/graphics/cg/ImageBufferCG.cpp:
        (WebCore::ImageBuffer::ImageBuffer):
        * platform/iphone/TileCache.h:
        (WebCore::TileCache::setAcceleratedDrawingEnabled):
        (WebCore::TileCache::acceleratedDrawingEnabled):
        * platform/iphone/TileCache.mm:
        (WebCore::TileCache::TileCache):
        (WebCore::TileCache::drawLayer):
        * platform/iphone/TileGridTile.mm:
        (WebCore::TileGridTile::TileGridTile):
        * wak/WAKWindow.h:
        * wak/WAKWindow.mm:
        (-[WAKWindow setAcceleratedDrawingEnabled:]):
        * wak/WKGraphics.h:
        * wak/WKGraphics.mm:

2011-04-27  Thomas Deniau  <deniau@apple.com>

        Reviewed by Simon Fraser.

        <rdar://problem/8125925> UIWebView: format-detection meta tag is ignored
        Expose the phone number parser state as a two-level boolean: explicitly
        enabled/disabled and allowed/forbidden by the meta tags to let Data
        Detectors UI decide if it should enable the full phone number parser
        in UIWebViews.

        * WebCore.exp.in:
        * dom/Document.cpp:
        (WebCore::Document::Document):
        (WebCore::setParserFeature):
        (WebCore::Document::isTelephoneNumberParsingEnabled): take into account the settings' bit and the allowed bit
        (WebCore::Document::setIsTelephoneNumberParsingAllowed): new bit we need to expose
        (WebCore::Document::isTelephoneNumberParsingAllowed):
        * dom/Document.h:
        * html/parser/HTMLTreeBuilder.cpp:
        (WebCore::HTMLTreeBuilder::processCharacterBuffer):

2011-05-02  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Kilzer.

        <rdar://problem/9292845> html5test.com: Support value sanitization for HTML5 input types

        Sanitize non-parsable incoming strings to the empty string.

        Tests: platform/iphone-simulator/iphone/fast/forms/ValidityState-typeMismatch-date.html
               platform/iphone-simulator/iphone/fast/forms/ValidityState-typeMismatch-datetime.html
               platform/iphone-simulator/iphone/fast/forms/ValidityState-typeMismatch-datetimelocal.html
               platform/iphone-simulator/iphone/fast/forms/ValidityState-typeMismatch-month.html
               platform/iphone-simulator/iphone/fast/forms/ValidityState-typeMismatch-time.html
               platform/iphone-simulator/iphone/fast/forms/ValidityState-typeMismatch-week.html

        * html/BaseDateAndTimeInputType.cpp:
        (WebCore::BaseDateAndTimeInputType::sanitizeValue): check if the
        incoming string is valid. If not just return the empty string.
        * html/BaseDateAndTimeInputType.h:

2011-04-29  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Kilzer.

        <rdar://problem/9359050> Cursor overlaps placeholder text in HTML search fields (unlike native search fields)

        Slightly indent placeholder text matching UITextField's
        kUITextFieldPlaceholderInset of 2px.

        * css/html.css:
        (input::-webkit-input-placeholder, isindex::-webkit-input-placeholder, textarea::-webkit-input-placeholder):

2011-05-02  Joseph Pecoraro  <joepeck@webkit.org>

        <rdar://problem/9359050> Cursor overlaps placeholder text in HTML search fields (unlike native search fields)

        Merged ToT WebKit r85560.

    2011-05-02  Joseph Pecoraro  <joepeck@webkit.org>

            Reviewed by David Kilzer.

            Respect fixed text-indent on ::-webkit-input-placeholder
            https://bugs.webkit.org/show_bug.cgi?id=59825

            Test: fast/forms/input-placeholder-text-indent.html

            * rendering/RenderTextControl.cpp:
            (WebCore::RenderTextControl::paintPlaceholder): indent by
            a fixed text-indent size specified on the placeholder style.

2011-05-02  Antti Koivisto  <antti@apple.com>

        Reviewed by Ian Henderson.

        <rdar://problem/9119980> Zoomed out tiles can flash to a new scale when loading a new page
        
        If the zoomed out scale changes while tiling mode is Disabled, save the new scale to a variable and apply it
        only when tiling is re-enabled.

        Also moved switching the active tile grid on zoom from TileCache::updateTilingMode() to setTilingMode(). This
        avoids situation where the active tile grid is briefly out of sync with the scale and/or tiling mode. 

        * platform/iphone/TileCache.h:
        * platform/iphone/TileCache.mm:
        (WebCore::TileCache::TileCache):
        (WebCore::TileCache::setZoomedOutScale):
        (WebCore::TileCache::setZoomedOutScaleInternal):
        (WebCore::TileCache::updateTilingMode):

2011-04-29  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Carson.

        <rdar://problem/9359116> Don't draw shadow for text field when border:none

        If we don't have any decorations, we should try to limit
        our border adjustment to keep the tap selection highlight
        more like users would expect.

        * rendering/RenderThemeIPhone.cpp:
        (WebCore::RenderThemeIPhone::adjustSearchFieldStyle):

2011-04-29  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Carson.

        <rdar://problem/9359116> Don't draw shadow for text field when border:none

        Test: platform/iphone-simulator/iphone/fast/forms/borderless-input-gradient.html

        * rendering/RenderThemeIPhone.cpp:
        (WebCore::RenderThemeIPhone::paintTextFieldDecorations): do
        not paint the gradient if there is no border. Otherwise the
        gradient could look out of place / floating.

        (WebCore::RenderThemeIPhone::paintSearchFieldDecorations): this
        is the same as painting text field decorations.

2011-04-29  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Kilzer.

        <rdar://problem/9327641> ASSERT seen while working with <input type="number">

        Allow either the main thread or the Web Thread to create
        and access the number formatter.

        * platform/text/mac/LocalizedNumberMac.mm:
        (WebCore::numberFormatter):

2011-04-29  David Kilzer  <ddkilzer@apple.com>

        AXObjectCache::attachWrapper() over-retains an AccessibilityObjectWrapper

        Reviewed by Geoffrey Garen.

        Previously, AXObjectCache::attachWrapper over-retained each
        AccessibilityObjectWrapper it created, which is why
        AXObjectCache::detachWrapper() contained an extra -release.

        Fixes the following static analyzer warning:

            WebCore/accessibility/iphone/AXObjectCacheIPhone.mm:48:21: warning: Potential leak of an object allocated on line 48
                 obj->setWrapper([[AccessibilityObjectWrapper alloc] initWithAccessibilityObject:obj]);
                                 ^

        * accessibility/iphone/AXObjectCacheIPhone.mm:
        (WebCore::AXObjectCache::detachWrapper): Removed extra -release.
        (WebCore::AXObjectCache::attachWrapper): Because setWrapper()
        assigns to a RetainPtr<> instance variable, it doesn't need a +1
        retained object passed in.  Fix the leak by using a RetainPtr<>
        for the AccessibilityObjectWrapper.

2011-04-28  Andy Estes  <aestes@apple.com>

        Reviewed by Joseph Pecoraro.

        ClassInfo objects should contain pointers to their parent objects. When
        WebKit merge 4 lands, JavaScriptCore will ASSERT that this is the case.

        * bindings/js/JSTouchConstructor.cpp: Store a pointer to DOMConstructorObject's ClassInfo.
        * bindings/js/JSTouchListConstructor.cpp: Ditto.

2011-04-28  David Kilzer  <ddkilzer@apple.com>

        Fix missing assignment to self in -[AccessibilityObjectWrapper initWithAccessibilityObject:]

        Reviewed by Anders Carlsson and Chris Fleizach.

        Fixes the following static analyzer waring:

            WebCore/accessibility/iphone/AccessibilityObjectWrapperIPhone.mm:156:5: warning: Instance variable used while 'self' is not set to the result of '[(super or self) init...]'
                 m_object = axObject;
                 ^

        * accessibility/iphone/AccessibilityObjectWrapperIPhone.mm:
        (-[AccessibilityObjectWrapper initWithAccessibilityObject:]):

2011-04-26  David Kilzer  <ddkilzer@apple.com>

        Follow-up fix: <rdar://problem/9327232> Should have a pref to turn HTTP pipelining on/off

        * platform/network/cf/ResourceRequestCFNet.cpp:
        (WebCore::initializeMaximumHTTPConnectionCountPerHost): Added
        "|| PLATFORM(IOS)" to the macros from ToT WebKit r84932.
        * platform/network/mac/ResourceRequestMac.mm:
        (WebCore::ResourceRequest::doUpdateResourceRequest): Ditto for
        stabilization merge #3 in 1004911.

2011-04-26  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/9327232> Should have a pref to turn HTTP pipelining on/off

        Merged ToT WebKit r84932.

    2011-04-26  David Kilzer  <ddkilzer@apple.com>

        <http://webkit.org/b/59372> Restore user default for enabling HTTP pipelining

        Reviewed by Antti Koivisto.

        To enable HTTP pipelining post-SnowLeopard, use this command:

            defaults write BUNDLE.ID WebKitEnableHTTPPipelining -bool YES

        * platform/network/cf/ResourceRequestCFNet.cpp:
        (WebCore::readBooleanPreference): Re-added.  Originally added in
        r76756 and removed in r84120.
        (WebCore::initializeMaximumHTTPConnectionCountPerHost): Enable
        HTTP pipelining if use default is set to true.  Added macro
        guards to match those in ResourceRequestMac.mm.

2011-04-22  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by Simon Fraser.

        <rdar://problem/8984007> Investigate if we need to support step button or spin button in number type input box.

        Opt for no spin button on iOS right now.

        * rendering/RenderTheme.h:
        * rendering/RenderThemeIPhone.cpp:
        (WebCore::RenderThemeIPhone::shouldHaveSpinButton):
        * rendering/RenderThemeIPhone.h:

2011-04-22  Joseph Pecoraro  <joepeck@webkit.org>

        Prep work for: <rdar://problem/8984007> Investigate if we need to support step button or spin button in number type input box.

        Merge ToT WebKit r84683 and r84695.

    2011-04-22  Joseph Pecoraro  <joepeck@webkit.org>

            Reviewed by Kent Tamura.

            Let the RenderTheme decide if an input type should have a spinner
            https://bugs.webkit.org/show_bug.cgi?id=59246

            Whether an input should have a spinner or not should
            be a UI decision made by the RenderTheme. Remove
            WebCore's default hasSpinButton values and defer
            to the RenderTheme.

            No change in functionality, covered by existing tests.

            * html/HTMLInputElement.cpp:
            (WebCore::HTMLInputElement::isRangeControl): expose isRangeControl
            for possible RenderTheme queries.
            * html/HTMLInputElement.h:

            * rendering/RenderTextControlSingleLine.cpp:
            (WebCore::RenderTextControlSingleLine::createSubtreeIfNeeded):
            (WebCore::RenderTextControlSingleLine::createInnerTextStyle):
            For both of these ask the render theme if the input should
            have a spinner.

            * rendering/RenderTheme.cpp:
            (WebCore::RenderTheme::shouldHaveSpinButtonForInputElement):
            Steppable inputs (number, date, and range) but not range
            should have spinners. This does not change existing behavior.
            * rendering/RenderTheme.h:

            * dom/InputElement.h:
            * html/BaseDateAndTimeInputType.cpp: remove hasSpinButton.
            * html/BaseDateAndTimeInputType.h: remove hasSpinButton.
            * html/InputType.cpp: remove hasSpinButton.
            * html/InputType.h: remove hasSpinButton.
            * html/NumberInputType.cpp: remove hasSpinButton.
            * html/NumberInputType.h: remove hasSpinButton.

    2011-04-22  Joseph Pecoraro  <joepeck@webkit.org>

            Reviewed by Kent Tamura.

            Don't rely on hasSpinButton to check if an input type can be stepped
            https://bugs.webkit.org/show_bug.cgi?id=59224

            Add isSteppable to know for certain if an input type can
            be stepped or not. Previously we were checking if the input
            has a spin control or is the range input type. These are UI
            details, but the step functionality does not require there
            to be a UI.

            No change in behavior, covered by existing tests.

            * html/BaseDateAndTimeInputType.cpp:
            (WebCore::BaseDateAndTimeInputType::isSteppable):
            * html/BaseDateAndTimeInputType.h:
            * html/HTMLInputElement.cpp:
            (WebCore::HTMLInputElement::isSteppable):
            (WebCore::HTMLInputElement::stepUpFromRenderer): remove the
            check for a spinner and range control and instead ASSERT
            that the type is steppable.
            * html/HTMLInputElement.h:
            * html/InputType.cpp:
            (WebCore::InputType::isSteppable):
            * html/InputType.h:
            * html/NumberInputType.cpp:
            (WebCore::NumberInputType::isSteppable):
            * html/NumberInputType.h:
            * html/RangeInputType.cpp:
            (WebCore::RangeInputType::isSteppable):
            * html/RangeInputType.h:

2011-04-22  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Kilzer.

        <rdar://problem/8961522> iOS RenderTheme should implement the new RenderTheme::shouldShowPlaceholderWhenFocused to get the right iOS placeholder behavior

        Covered by existing tests, but the existing tests
        but rely on input focus.

        * rendering/RenderThemeIPhone.cpp:
        (WebCore::RenderThemeIPhone::shouldShowPlaceholderWhenFocused):
        default to true on iOS to match Desktop Safari in Jazz on Lion.
        * rendering/RenderThemeIPhone.h:

2011-04-22  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Kilzer.

        <rdar://problem/5459633> input type=search doesn't work on the phone

        This adds the rounded UI for <input type="search">.
        Unlike Desktop Safari, we allow styling search inputs
        like regular text inputs.

        Like RenderButton, we adjust the style of search inputs
        during layout. This is because we rely on the border
        radius for drawn border, and its calculation requires
        a width and height, unavailable at the time the original
        RenderStyle is created and adjustable.

        * rendering/RenderButton.cpp:
        (WebCore::RenderButton::layout): use renamed adjust function.

        * rendering/RenderTextControlSingleLine.cpp:
        (WebCore::RenderTextControlSingleLine::layout): adjust
        the style to calculate the proper border radii.

        * rendering/RenderTheme.cpp:
        (WebCore::RenderTheme::adjustStyle): allow adjusting
        search field style on iOS.
        (WebCore::RenderTheme::paintDecorations): add a paint
        search field decorations option for iOS.
        * rendering/RenderTheme.h:
        (WebCore::RenderTheme::paintSearchFieldDecorations):

        * rendering/RenderThemeIPhone.cpp:
        (WebCore::RenderThemeIPhone::adjustRoundBorderRadius): renamed and
        shared between button and search field for calculating the
        border radius.
        (WebCore::RenderThemeIPhone::adjustSearchFieldStyle): attempt
        to set the border radius if we can determine the width and height.
        (WebCore::RenderThemeIPhone::paintSearchFieldDecorations): clip
        to match the rounded borders.
        (WebCore::RenderThemeIPhone::adjustButtonStyle): use renamed
        adjust function.
        * rendering/RenderThemeIPhone.h:

2011-04-22  Chris Fleizach  <cfleizach@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/8910247> aria-selected on role="tab" does not work in iOS

        Need to expose tab items as their own type to VoiceOver.

        * accessibility/iphone/AccessibilityObjectWrapperIPhone.mm:
        (-[AccessibilityObjectWrapper accessibilityTraits]):

2011-04-22  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/9320191> Enable HTTP pipelining and aggressive preloading by default for all apps loading content using WebKit

        Reviewed by Joseph Pecoraro.

        * platform/network/cf/ResourceRequestCFNet.cpp:
        (WebCore::ResourceRequest::s_httpPipeliningEnabled): Default to
        true on iOS.

2011-04-22  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/9323915> Remove iPhone gradient drawing code from GraphicsContextCG

        GraphicsContextCG contained some iOS-only gradient drawing code that is
        only used by RenderThemeIPhone, so this changes moves it into that file,
        and makes it adhere more closely to WebKit coding style.
        
        This patch does not change behavior, so no new tests.

        * platform/graphics/GraphicsContext.h:
        * platform/graphics/cg/GraphicsContextCG.cpp:
        (WebCore::GraphicsContext::platformInit):
        Remove IPhoneGradient-related code.
        
        * rendering/RenderThemeIPhone.h:
        Change addRoundedBorderClip() signature to pass the RenderStyle.
        * rendering/RenderThemeIPhone.cpp:
        (WebCore::IPhoneGradient::IPhoneGradient):
        (WebCore::interpolateLinearGradient):
        (WebCore::interpolateExponentialGradient):
        (WebCore::getSharedFunctionRef):
        (WebCore::drawAxialGradient):
        (WebCore::drawRadialGradient):
        (WebCore::getInsetGradient):
        (WebCore::getShineGradient):
        (WebCore::getShadeGradient):
        (WebCore::getConvexGradient):
        (WebCore::getConcaveGradient):
        (WebCore::gradientWithName):
        Moved from GraphicsContextCG and cleaned up.
        (WebCore::RenderTheme::themeForPage):
        (WebCore::RenderThemeIPhone::create):
        Moved.
        (WebCore::RenderThemeIPhone::addRoundedBorderClip):
        Use getRoundedInnerBorderFor(), and add FIXME about potential pixel cracks.
        (WebCore::RenderThemeIPhone::adjustCheckboxStyle):
        Style fix.
        (WebCore::shortened):
        Style fix.
        (WebCore::RenderThemeIPhone::paintCheckboxDecorations):
        (WebCore::RenderThemeIPhone::paintRadioDecorations):
        (WebCore::RenderThemeIPhone::paintTextFieldDecorations):
        (WebCore::RenderThemeIPhone::paintTextAreaDecorations):
        (WebCore::RenderThemeIPhone::paintMenuListButtonDecorations):
        (WebCore::RenderThemeIPhone::paintButtonDecorations):
        (WebCore::RenderThemeIPhone::paintPushButtonDecorations):
        Pass style to addRoundedBorderClip(), and style fixes.

2011-04-22  Chris Fleizach  <cfleizach@apple.com>

        Reviewed by David Carson.

        <rdar://problem/9229553> support aria-flowto

        Return the aria flow-to elements so they can be used by VoiceOver. I copied
        convertToNSArray from the Mac accessibility wrapper.

        * accessibility/iphone/AccessibilityObjectWrapperIPhone.mm:
        (-[AccessibilityObjectWrapper accessibilityFlowToElements]):

2011-04-22  Chris Fleizach  <cfleizach@apple.com>

        Reviewed by David Carson.

        <rdar://problem/9014606> VoiceOver thinks role="math" is a landmark?

        Be more strict about what is considered a landmark, specifically, only limiting
        to landmark roles.

        * accessibility/iphone/AccessibilityObjectWrapperIPhone.mm:
        (-[AccessibilityObjectWrapper _accessibilityIsLandmarkRole:]):

2011-04-21  Chris Fleizach  <cfleizach@apple.com>

        Reviewed by David Carson.

        <rdar://problem/9318547> AccessibilityIdentifier should use "id" for web

        The accessibilityIdentifier attribute should use the id attribute. I have a layout test for this
        but the simulator keeps crashing. I will add it in a later commit.        

        * accessibility/iphone/AccessibilityObjectWrapperIPhone.mm:
        (-[AccessibilityObjectWrapper accessibilityIdentifier]):

2011-04-21  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by Ian Henderson.

        <rdar://problem/5459633> input type=search doesn't work on the phone

        Allow "onSearch" for iOS on containing elements, document, and window.
        Removing the iOS specific ENABLE_ON_SEARCH.

        * dom/Document.idl:
        * dom/Element.idl:
        * page/DOMWindow.idl:
        * svg/SVGElementInstance.idl:

2011-04-21  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/9316877> Remove workaround for 4947188 and 6670378

        Remove border-radius hack originally added for:
            <rdar://problem/4947188> chunky white edges around text field on black page
        and tweaked for:
            <rdar://problem/6670378> Border-radius changes element size (drawing glitch with scroll indicators)

        now that border/background drawing has been improved.
        
        Tests: platform/iphone-simulator/iphone/fast/borders/thin-lozenge.html
               platform/iphone-simulator/iphone/fast/forms/form-controls-on-backgrounds.html

        * rendering/RenderBoxModelObject.cpp:
        (WebCore::RenderBoxModelObject::paintFillLayerExtended):

2011-04-21  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/9098304> Optimize rendering of simple rounded borders, for Whippet        
        and prep work for:
        <rdar://problem/7187376> -webkit-border-radius anti-aliases poorly

        Merge WebKit ToT r84341 and r84343.

    2011-04-19  Simon Fraser  <simon.fraser@apple.com>
    
            Fix 32-bit builds.
    
            * rendering/RenderBox.cpp:
            (WebCore::RenderBox::determineBackgroundBleedAvoidance):
            * rendering/RenderBoxModelObject.cpp:
            (WebCore::RenderBoxModelObject::paintFillLayerExtended):
    
    2011-04-19  Simon Fraser  <simon.fraser@apple.com>
    
            Reviewed by Dan Bernstein.
    
            background color of elements with border-radius shows around outer edge of border at corners
            https://bugs.webkit.org/show_bug.cgi?id=21819
            
            When drawing a background followed by a border with the same rounded
            clip, some border color leaks out because of antialiasing.
            
            Fix this by using two different strategies depending on the colors.
            If the border is opaque on all sides, we can inset the background by
            a device pixel. If not, then we have to draw the unclipped background
            and border into a transparency layer, and then clip that.
            
            A futher possible solution is mentioned in a comment in
            determineBackgroundBleedAvoidance() but not yet implemented.
            
            Also don't try to paint shadows with zero offset, spread and blur.
    
            Test: fast/backgrounds/background-leakage.html,
                  fast/backgrounds/background-leakage-transforms.html
    
            * rendering/RenderBoxModelObject.h:
            Add a BackgroundBleedAvoidance enum with a value for each
            strategy.
            * rendering/RenderBoxModelObject.cpp:
            (WebCore::RenderBoxModelObject::paintFillLayerExtended):
            Pass BackgroundBleedAvoidance, bail early if the border rect is empty.
            If using the transparency layer solution, don't bother to clip
            to the rounded rect for the background. If the strategy is to
            shrink the background, do that.
            (WebCore::BorderEdge::BorderEdge):
            (WebCore::BorderEdge::obscuresBackgroundEdge):
            Helper method to determine if this border side will totally
            obscured by the border edge, allowing us to inset it.
            (WebCore::RenderBoxModelObject::paintOneBorderSide):
            Pass BackgroundBleedAvoidance through.
            (WebCore::RenderBoxModelObject::paintBorderSides):
            Ditto.
            (WebCore::RenderBoxModelObject::paintTranslucentBorderSides):
            Ditto.
            (WebCore::RenderBoxModelObject::paintBorder):
            Fill BorderEdges using getBorderEdgeInfo now.
            Don't clip to the rounded border if we are using the
            transparency layer solution.
            (WebCore::RenderBoxModelObject::drawBoxSideFromPath):
            Pass bleedAvoidance through, and use it for double borders.
            (WebCore::RenderBoxModelObject::getBorderEdgeInfo):
            Helper to fill in the BorderEdge array.
            (WebCore::RenderBoxModelObject::borderObscuresBackgroundEdge):
            Used to determine if we can use the background shrinkage solution.
            (WebCore::RenderBoxModelObject::paintBoxShadow):
            Don't paint shadows that should not be visible.
    
            * rendering/RenderBox.h:
            * rendering/RenderBox.cpp:
            (WebCore::RenderBox::paintRootBoxFillLayers):
            Pass BackgroundBleedNone for the root box.
            
            (WebCore::RenderBox::determineBackgroundBleedAvoidance):
            Determine which bleed strategy we can use.
            
            (WebCore::RenderBox::paintBoxDecorationsWithSize):
            Based on the bleedAvoidance, make a transparency layer
            which will be clipped to the rounded border outside edge,
            and pass bleedAvoidance to the background and border-painting
            methods.        
            (WebCore::RenderBox::paintMaskImages):
            Use BackgroundBleedNone.
            (WebCore::RenderBox::paintFillLayers):
            (WebCore::RenderBox::paintFillLayer):
            Pass bleedAvoidance through.
    
            * rendering/InlineFlowBox.cpp:
            (WebCore::InlineFlowBox::paintFillLayer):
            (WebCore::InlineFlowBox::paintBoxDecorations):
            Pass BackgroundBleedNone. At some point we may want to do the right
            thing for split inlines.
    
            * rendering/RenderFieldset.cpp:
            (WebCore::RenderFieldset::paintBoxDecorations):
            * rendering/RenderTableCell.cpp:
            (WebCore::RenderTableCell::paintBackgroundsBehindCell):
            Pass BackgroundBleedNone.

2011-04-21  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/9098304> Optimize rendering of simple rounded borders, for Whippet        
        and prep work for:
        <rdar://problem/7187376> -webkit-border-radius anti-aliases poorly

        Merge WebKit ToT r84283

    2011-04-19  Simon Fraser  <simon.fraser@apple.com>
    
            Reviewed by David Hyatt.
    
            Background radius is wrong for split inline
            https://bugs.webkit.org/show_bug.cgi?id=58843
            
            When computing the radii for a segment of a split inline, we have to
            constrain those radii for the current segment, while still drawing
            using the entire logical width.
    
            Tests: fast/backgrounds/border-radius-split-background-image.html
                   fast/backgrounds/border-radius-split-background.html
    
            * rendering/InlineFlowBox.cpp:
            (WebCore::InlineFlowBox::paintFillLayer):
            Pass height and width for this box only to paintFillLayer()
            
            * rendering/RenderBox.cpp:
            (WebCore::RenderBox::paintFillLayer):
            Pass 0 for unused inlineBox height and width.
    
            * rendering/RenderBoxModelObject.h:
            * rendering/RenderBoxModelObject.cpp:
            (WebCore::RenderBoxModelObject::getBackgroundRoundedRect):
            When computing the rounded background rect, we have to take the size of
            this segment of the inline box into account for radius constraining.
            (WebCore::RenderBoxModelObject::paintFillLayerExtended):
            Call getBackgroundRoundedRect() in two places.

2011-04-21  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/9098304> Optimize rendering of simple rounded borders, for Whippet        
        and prep work for:
        <rdar://problem/7187376> -webkit-border-radius anti-aliases poorly

        Merge WebKit ToT r84273 and r84278.

    2011-04-19  Simon Fraser  <simon.fraser@apple.com>
    
            Build fix. For some reason RenderBoxModelObject.cpp
            was missing from my last commit.

    2011-04-19  Simon Fraser  <simon.fraser@apple.com>
    
            Reviewed by Dave Hyatt.
    
            Fix multiple border rendering issues
            https://bugs.webkit.org/show_bug.cgi?id=58761
            
            Fix various border-drawing bugs, and optimize some common cases.
            Also refactors a lot of the border-drawing code to be more maintainable.
            
                Rounded border rendering with different border widths looks strange
                https://bugs.webkit.org/show_bug.cgi?id=17468
                
                paintBorder in RenderObject paint two times the corners
                https://bugs.webkit.org/show_bug.cgi?id=20495
                
                Overdraw at box corners when using RGBA colors with alpha
                https://bugs.webkit.org/show_bug.cgi?id=21835
                
                Enable antialiasing for border drawing, when transformed
                https://bugs.webkit.org/show_bug.cgi?id=22746
                
                Drawing border-radius from path sometimes fails to round outer border in the double style when it should
                https://bugs.webkit.org/show_bug.cgi?id=41301
                
                Drawing border-radius from path doesn't appear to always match up border edges correctly
                https://bugs.webkit.org/show_bug.cgi?id=41302
                
            Also fixes
                Should be able to create Path from RoundedIntRect
                https://bugs.webkit.org/show_bug.cgi?id=58809
    
            Tests: fast/borders/border-radius-different-width-001.html
                   fast/borders/border-radius-inset-outset.html
                   fast/borders/table-borders.html
    
            * platform/graphics/FloatPoint.h:
            * platform/graphics/FloatPoint.cpp:
            (WebCore::findSlope):
            (WebCore::findIntersection):
            New geometry helper functions (should eventually move into a new
            GeometryUtilities file).
            
            * platform/graphics/Path.h:
            * platform/graphics/Path.cpp:
            (WebCore::Path::addRoundedRect):
            Add an overload of addRoundedRect() that takes a RoundedIntRect.
    
            * platform/graphics/GraphicsContext.cpp:
            (WebCore::GraphicsContext::addRoundedRectClip):
            (WebCore::GraphicsContext::clipOutRoundedRect):
            (WebCore::GraphicsContext::fillRectWithRoundedHole):
            Can now add a RoundedIntRect to a Path directly.
            
            * platform/graphics/IntRect.h:
            (WebCore::IntRect::minXMinYCorner):
            (WebCore::IntRect::maxXMinYCorner):
            (WebCore::IntRect::minXMaxYCorner):
            (WebCore::IntRect::maxXMaxYCorner):
            Convenience functions to get the rect corners, in a writing-mode-
            friendly way.
    
            * platform/graphics/RoundedIntRect.h:
            * platform/graphics/RoundedIntRect.cpp:
            (WebCore::RoundedIntRect::isRenderable):
            We need to know when Path::addRoundedRect() will fail because
            the sum of the radii exceed the height or width. This method tells
            us that.
            
            * platform/graphics/cg/GraphicsContextCG.cpp:
            (WebCore::GraphicsContext::fillRectWithRoundedHole):
            Can now add a RoundedIntRect to a Path directly.
    
            * rendering/RenderBoxModelObject.h:
            * rendering/RenderBoxModelObject.cpp:
            (WebCore::borderWillArcInnerEdge):
            This can just to see if there are inner radii now.
            
            (WebCore::edgeFlagForSide):
            (WebCore::includesEdge):
            Convenience functions for the BorderEdgeFlags bitmask.
            
            (WebCore::BorderEdge::BorderEdge):
            (WebCore::BorderEdge::hasVisibleColorAndStyle):
            (WebCore::BorderEdge::shouldRender):
            (WebCore::BorderEdge::presentButInvisible):
            (WebCore::BorderEdge::usedWidth):
            (WebCore::BorderEdge::getDoubleBorderStripeWidths):
            Convenience class to hold data about how a single edge
            is drawn, and to contain some commonly used width-related methods.
            
            (WebCore::edgesShareColor):
            (WebCore::styleRequiresClipPolygon):
            (WebCore::borderStyleFillsBorderArea):
            (WebCore::borderStyleHasInnerDetail):
            (WebCore::borderStyleIsDottedOrDashed):
            (WebCore::borderStyleHasUnmatchedColorsAtCorner):
            (WebCore::colorsMatchAtCorner):
            (WebCore::willBeOverdrawn):
            (WebCore::borderStylesRequireMitre):
            (WebCore::joinRequiresMitre):
            Functions used to make the border drawing code more readable,
            which are used to determine when corners need a mitre, and
            need antialiasing.
            
            (WebCore::RenderBoxModelObject::paintOneBorderSide):
            Code to paint one side of a border, either via the path, or
            using rects/polygons, the appropriate mitres and antialiasing
            at the corners. includeLogicalLeftEdge and includeLogicalRightEdge need
            to be passed all the way down here so that when we recompute the
            path for double and ridge/groove borders, we correctly handle split box
            borders.
            
            (WebCore::RenderBoxModelObject::paintBorderSides):
            Paints the 4 border sides (if present).
            
            (WebCore::RenderBoxModelObject::paintTranslucentBorderSides):
            Called when one or more of the borders has a non-opaque color,
            and uses a transparency layer for each set of same-colored
            sides to avoid overdraw at the corners.
            
            (WebCore::RenderBoxModelObject::paintBorder):
            Builds an array of BorderEdge so we can iterate over them to 
            detect different border compbinations, and optimizations. Has
            a fast path for all-solid borders.
            
            (WebCore::RenderBoxModelObject::drawBoxSideFromPath):
            Moved from RenderObject, since all callers are in RenderBoxModelObject.
            Has the following changes:
              * Don't attempt to draw dashes if there is only space for a few,
                since it looks bad.
              * Handle double and groove borders on split inlines correctly,
                making use of includeLogicalLeftEdge, includeLogicalRightEdge
    
            (WebCore::findInnerVertex):
            For borders with a radiused inner edge, the per-side clip polygon
            has to project inside the padding box to avoid clipping the inner edge.
            This function computes a reasonable inner corner for the clipping
            polygon.
            (WebCore::RenderBoxModelObject::clipBorderSidePolygon):
            Have the corner joins pass through the corners of the inner and outer
            border rectangles, ensure we don't clip the inside if necessary,
            and handle antialiasing on the two mitres.
            
            (WebCore::RenderBoxModelObject::paintBoxShadow):
            Use RenderStyle::getRoundedInnerBorderFor() rather than computeBorderInnerRect()
            etc.
    
            * rendering/RenderObject.h:
            * rendering/RenderObject.cpp:
            (WebCore::RenderObject::drawLineForBoxSide):
            Moved to RenderBoxModelObject.
            
            * rendering/style/RenderStyle.h:
            * rendering/style/RenderStyle.cpp:
            (WebCore::RenderStyle::getRoundedBorderFor):
            (WebCore::RenderStyle::getRoundedInnerBorderFor):
            There was some very clumsy code that computed a rounded rect
            given the border rect and side widths. Cleaned this up by moving
            some code into RenderStyle. The overloaded getRoundedInnerBorderFor()
            which takes the border widths is used by the double and groove drawing
            code.

2011-04-20  Simon Fraser  <simon.fraser@apple.com>

        Prep work for:
        <rdar://problem/7187376> -webkit-border-radius anti-aliases poorly
        
        Merge WebKit ToT r82995.

    2011-04-05  Simon Fraser  <simon.fraser@apple.com>
    
            Reviewed by Darin Adler.
    
            Rename variables in border drawing code for readability
            https://bugs.webkit.org/show_bug.cgi?id=57894
    
            * rendering/RenderObject.cpp:
            (WebCore::RenderObject::drawLineForBoxSide):
            (WebCore::RenderObject::drawBoxSideFromPath):
            (WebCore::RenderObject::drawArcForBoxSide):
    
2011-04-20  Simon Fraser  <simon.fraser@apple.com>

        Prep work for:
        <rdar://problem/7187376> -webkit-border-radius anti-aliases poorly
        
        Merge WebKit ToT r83998.

    2011-04-15  Simon Fraser  <simon.fraser@apple.com>
    
            Reviewed by Beth Dakin.
    
            Some borders with border-radius do not have rounded inner edges
            https://bugs.webkit.org/show_bug.cgi?id=58457
            
            Improve the logic used to compute the inner radii on curved
            borders, to maintain borders of even thickness around the curve.
            
            Tests: fast/borders/mixed-border-styles-radius.html
                   fast/borders/mixed-border-styles.html
    
            * rendering/RenderBoxModelObject.h:
            * rendering/RenderBoxModelObject.cpp:
            (WebCore::RenderBoxModelObject::computeBorderOuterRect):
            (WebCore::RenderBoxModelObject::computeBorderInnerRect):
            Two new utility functions to share some code that was in both paintBorder()
            and paintBoxShaadow().
            getRoundedInnerBorderWithBorderWidths() now takes the outer border box
            as well as the inner box.
            
            (WebCore::RenderBoxModelObject::paintBorder): Call new methods.
            (WebCore::RenderBoxModelObject::paintBoxShadow): Ditto.
    
            * rendering/RenderObject.cpp:
            (WebCore::RenderObject::drawBoxSideFromPath):
            getRoundedInnerBorderWithBorderWidths() now takes the outer border box
            as well as the inner box.
    
            * rendering/style/RenderStyle.cpp:
            (WebCore::RenderStyle::getRoundedInnerBorderWithBorderWidths):
            * rendering/style/RenderStyle.h:
            Compute the inner radii by starting with teh radii used for the
            outer box, and then shrinking them down based on the border thickness.
    
2011-04-20  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by Ian Henderson.

        <rdar://problem/5459633> input type=search doesn't work on the phone

        Allow "onSearch" for iOS. Keep ignoring addSearchResult
        for now because there is still no UI for accessing
        previous search results.

        * html/HTMLInputElement.cpp:
        (WebCore::HTMLInputElement::onSearch): enable on iOS.

2011-04-20  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Paul Knight.

        <rdar://problem/7204479> WebEvent initializers have multiple uses of 'with'

        Remove deprecated "initWith:with:with" WebEvent methods, now that UIKit is
        not using them any more.

        * platform/iphone/WebEvent.h:
        * platform/iphone/WebEvent.mm:

2011-04-20  Cameron Zwarich  <zwarich@apple.com>

        <rdar://problem/9295712> Objective-C++ type error with new Clang instancetype support

        Reviewed by Eric Carlson.

        * platform/graphics/iphone/MediaPlayerPrivateIPhone.mm:
        (WebCore::MediaPlayerPrivateiPhone::setMediaPlayerProxy): Add a cast to NSObject* now
        that retain of a forward-declared class no longer returns id.

2011-04-20  Pratik Solanki  <psolanki@apple.com>

        Reviewed by Joseph Pecoraro.

        <rdar://problem/9140052> ASSERT in WebCore::BitmapImage::assertNotSolidColor scrolling on Engadget.com

        * platform/graphics/cg/ImageCG.cpp:
        (WebCore::BitmapImage::checkForSolidColor): Update logic so that we call frameAtIndex() in
        case the image in m_frames[0] is 0 which can happen when we destroy decoded data.

2011-04-20  Pratik Solanki  <psolanki@apple.com>

        Part of fix for <rdar://problem/9140052> ASSERT in WebCore::BitmapImage::assertNotSolidColor scrolling on Engadget.com

        Merged ToT WebKit r84321, r84344.

    2011-04-19  Pratik Solanki  <psolanki@apple.com>

        Reviewed by Simon Fraser.

        Follow on fix for https://bugs.webkit.org/show_bug.cgi?id=58926

        Move the assert from Image::drawPattern() to Image::drawTiled() so we don't hit it when
        trying to paint GeneratedImages.

        * platform/graphics/Image.cpp:
        (WebCore::Image::drawTiled):
        * platform/graphics/cg/ImageCG.cpp:
        (WebCore::Image::drawPattern):

    2011-04-19  Pratik Solanki  <psolanki@apple.com>

        Reviewed by Simon Fraser.

        BitmapImage::destroyMetadataAndNotify should clear m_checkedForSolidColor
        https://bugs.webkit.org/show_bug.cgi?id=58926

        * platform/graphics/BitmapImage.cpp:
        (WebCore::BitmapImage::destroyMetadataAndNotify): Set m_checkedForSolidColor to false.
        * platform/graphics/BitmapImage.h:
        (WebCore::BitmapImage::assertNotSolidColor):
        * platform/graphics/cg/ImageCG.cpp:
        (WebCore::Image::drawPattern): Add assert to make sure this is not called for a 1x1 image.

2011-04-19  Ian Henderson  <ianh@apple.com>

        <rdar://problem/9306128> Safari hangs creating snapshot of various webpages

        Reviewed by David Kilzer.

        WebTiledLayer can still be drawn on the main thread in response to
        drawInContext:.  Ensure we have the web thread lock and draw the
        content directly in this case.

        Just stop overriding -[WebTiledLayer display] on iOS, since we don't
        do anything in response to platformCALayerLayerDidDisplay.

        * platform/graphics/mac/WebTiledLayer.mm:
        (-[WebTiledLayer display]):
        (-[WebTiledLayer drawInContext:]):

2011-04-19  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7387208> Enable http pipelining in WebKit for MobileSafari

        Merged ToT WebKit r84120.

        * loader/ResourceLoadScheduler.cpp:
        (WebCore::ResourceLoadScheduler::scheduleLoad): Switched to use
        ResourceRequest::httpPipeliningEnabled().

    2011-04-17  David Kilzer  <ddkilzer@apple.com>

        <http://webkit.org/b/58463> Switch HTTP pipelining from user default to private setting
        <rdar://problem/9268729>

        Reviewed by Dan Bernstein.

        This replaces support for the WebKitEnableHTTPPipelining user
        default with methods on the WebCore::ResourceRequest class in
        WebCore, the WebView class in WebKit1, and the WebContext class
        in WebKit2.  It also removes support for the
        WebKitForceHTTPPipeliningPriorityHigh user default which was not
        needed.

        Run these commands if you set the user defaults previously,
        replacing "BUNDLE.ID" with your application's bundle ID:

            defaults delete BUNDLE.ID WebKitEnableHTTPPipelining
            defaults delete BUNDLE.ID WebKitForceHTTPPipeliningPriorityHigh

        * WebCore.exp.in: Export ResourceRequest::httpPipeliningEnabled()
        and ResourceRequest::setHTTPPipeliningEnabled().

        * platform/network/ResourceRequestBase.h:
        (WebCore::isHTTPPipeliningEnabled): Removed declaration.
        (WebCore::shouldForceHTTPPipeliningPriorityHigh): Removed declaration.

        * platform/network/cf/ResourceRequest.h:
        (WebCore::ResourceRequest::httpPipeliningEnabled): Added declaration.
        (WebCore::ResourceRequest::setHTTPPipeliningEnabled): Added declaration.
        (WebCore::ResourceRequest::s_httpPipeliningEnabled): Added declaration.

        * platform/network/cf/ResourceRequestCFNet.cpp:
        (WebCore::ResourceRequest::s_httpPipeliningEnabled): Added.
        (WebCore::ResourceRequest::httpPipeliningEnabled): Added.
        (WebCore::ResourceRequest::setHTTPPipeliningEnabled): Added.
        (WebCore::initializeMaximumHTTPConnectionCountPerHost): Switched
        to use ResourceRequest::httpPipeliningEnabled().
        (WebCore::readBooleanPreference): Removed.
        (WebCore::isHTTPPipeliningEnabled): Removed.
        (WebCore::shouldForceHTTPPipeliningPriorityHigh): Removed.

        * platform/network/mac/ResourceRequestMac.mm:
        (WebCore::ResourceRequest::doUpdateResourceRequest): Switched to
        use ResourceRequest::httpPipeliningEnabled().  Removed check for
        shouldForceHTTPPipeliningPriorityHigh().
        (WebCore::ResourceRequest::doUpdatePlatformRequest): Ditto.

2011-04-18  Ian Henderson  <ianh@apple.com>

        <rdar://problem/7398907> iTunes Store content causes main thread drawing to occur, even in Safari, because of tiled layers

        Reviewed by Simon Fraser.

        CATiledLayer can either draw on the main thread or on a background
        queue.  We want to draw on the web thread.  Instead of getting draw
        callbacks on the main thread, ask for them to be delivered on a
        background thread.  In order to draw synchronously on the web thread,
        add a new WebThreadRunSync function.

        WebThreadRunSync will block execution of the current thread until the
        block finishes running on the web thread.  Add an auxiliary class to
        keep track of the block's execution state, so the calling thread can
        wait on it.

        * platform/graphics/mac/WebTiledLayer.mm:
        (+[WebTiledLayer shouldDrawOnMainThread]):
        (-[WebTiledLayer display]):
        (-[WebTiledLayer drawInContext:]):
        * wak/WebCoreThreadRun.cpp:
        (WebThreadBlock::WebThreadBlock):
        (WebThreadBlock::operator=):
        (WebThreadBlock::operator()):
        * wak/WebCoreThreadRun.h:

2011-04-18  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Carson.

        <rdar://problem/7529024> Remove per-document image resource limits in favor of using the WebCore::Cache

        Follow-up fix to remove even more dead code.

        * loader/cache/CachedImage.cpp:
        (WebCore::CachedImage::data): remove checkOutOfMemory which will always be false.
        * loader/cache/CachedImage.h:
        * loader/cache/CachedResourceClient.h: remove memoryLimitReached which was never overridden.

2011-04-15  Ian Henderson  <ianh@apple.com>

    <rdar://problem/9281018> 9.1% of time scrolling reddit comments page spent in WebCore::Document::mayCauseFlashOfUnstyledContent

    Merge Tot WebKit r84066.

   2011-04-15  MORITA Hajime  <morrita@google.com>
   
           Reviewed by Simon Fraser.
   
           Calls to WebCore::Document::mayCauseFlashOfUnstyledContent make frequently-run drawing methods slower
           https://bugs.webkit.org/show_bug.cgi?id=58512
           
           Manually rolled out r72367 at which mayCauseFlashOfUnstyledContent() was introduced.
           This change keeps an small refactoring on
           FrameView::shouldUpdate(), which doesn't affect on the behavior.
   
           * dom/Document.cpp:
           * dom/Document.h:
           * page/FrameView.cpp:
           (WebCore::FrameView::invalidateRect):
           (WebCore::FrameView::shouldUpdate):
           * rendering/RenderBlock.cpp:
           (WebCore::RenderBlock::paintContents):
           * rendering/RenderLayer.cpp:
           (WebCore::RenderLayer::paintLayer):

2011-04-15  Ian Henderson  <ianh@apple.com>

        <rdar://problem/9284873> Tab switching is slow on J1 compared to K9x

        Reviewed by Cameron Zwarich.

        Go back to setting the WAKWindow's screen scale correctly.  The tile
        cache will remove and redraw all its tiles when it moves to a screen
        of a different scale -- our code to mask the existence of the J2 was
        causing it to recreate its tiles every time the view appeared onscreen.

        * wak/WAKWindow.mm:
        (-[WAKWindow setScreenScale:]):

2011-04-15  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Kilzer.

        <rdar://problem/5688892> Support Desktop Web Inspector connecting to MobileSafari/WebKit on hardware device

        Turn off streamlining the inspector files for all builds,
        as it causes problems when a very large file is served
        over a tcp connection. That needs investigation, but
        keeping the files separate works as expected.

        * WebCore.xcodeproj/project.pbxproj: early break in the streamline build phase.

2011-04-15  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Kilzer.

        <rdar://problem/6591720> Support Web Inspector on iPhone Simulator using MobileSafari/Web.app

        * Configurations/FeatureDefines.xcconfig: Add REMOTE_INSPECTOR Feature.
        * WebCore.exp.in: Export a few more Inspector Controller symbols.

2011-04-15  Joseph Pecoraro  <joepeck@webkit.org>

        <rdar://problem/6591720> Support Web Inspector on iPhone Simulator using MobileSafari/Web.app

        Merged ToT WebKit r84023.

    2011-04-15  Joseph Pecoraro  <joepeck@webkit.org>

            Reviewed by Yury Semikhatsky.

            Frontend Part of Web Inspector: Remote Web Inspector - Cross Platform InspectorServer
            https://bugs.webkit.org/show_bug.cgi?id=51364

            The front end should not use a transparent background when
            loaded as a web page (remote debugging) but should when loaded
            regularly in a custom window. This adds a "remote" style class
            onto the document body when the page is loaded remotely.

            * inspector/front-end/inspector.css:
            (body.detached.platform-mac-snowleopard:not(.remote) #toolbar): respect the "remote" class.
            * inspector/front-end/inspector.js: add a "remote" class on the body when loaded remotely.

2011-04-15  Joseph Pecoraro  <joepeck@webkit.org>

        <rdar://problem/6591720> Support Web Inspector on iPhone Simulator using MobileSafari/Web.app

        Merged ToT WebKit r84022.

    2011-04-15  Joseph Pecoraro  <joepeck@webkit.org>
    
            Reviewed by David Kilzer.
    
            JSLock ASSERT seen often when using the inspector for long
            periods of time. We should take the JSLock whenever we
            might allocate memory in the JavaScript Heap.
    
            JSC InjectedScriptHost::nodeAsScriptValue should take JSLock before possible JavaScript Allocations
            https://bugs.webkit.org/show_bug.cgi?id=58674
    
            * bindings/js/JSInjectedScriptHostCustom.cpp:
            (WebCore::InjectedScriptHost::nodeAsScriptValue): take the JSLock.

2011-04-15  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/9232446> WebCore needs to opt in to the CFURLConnection Fast Track functionality

        Reviewed by David Carson.

        Enable CFURLConnection fast track through SPI. This was the default behavior of CFNetwork
        since 9A138, however they had to make the behavior be opt-in (in 9A185) due to bugs
        discovered on desktop Mac OSX. See all the dupes of <rdar://9223460>. The issue was with
        downloads on desktop Safari. Pausing and resuming a download would create a second item in
        the download window. Safari would prompt twice for authenticated downloads. I verified that
        we weren't running into the issue in 9A183 - MobileSafari only downloaded one copy of the
        file e.g. when downloading an epub file. Additionally, we don't have the ability to pause
        and resume downloads like desktop so this shouldn't affect us. But just to be safe, I am
        adding the ability to turn this behavior off using a pref so we have an easy way to test if
        this breaks anything.

        * platform/network/mac/ResourceHandleMac.mm:
        (WebCore::synchronousWillSendRequestEnabled):
        (WebCore::ResourceHandle::createNSURLConnection):

2011-04-14  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by Ian Henderson.

        <rdar://problem/9245913> Image balloons are invisible in Messages

        On the iOS specific path FrameLoaders for simple documents
        were not initializing a networking context. This meant we
        were immediately bailing out of all resource loads. This
        was added in ToT WebKit r66794, which would have regressed
        with merge1.

        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::initForSynthesizedDocument): initialize the
        networking context like the normal FrameLoader::init.

2011-04-14  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/9262949> Top two priorities should go to 'fast-lane'

        Merged ToT WebKit r83882.

        * platform/iphone/WebCoreSystemInterfaceIPhone.mm:
        (wkSetHTTPPipeliningMinimumFastLanePriority): Add function pointer.

    2011-04-14  Pratik Solanki  <psolanki@apple.com>

        Reviewed by David Kilzer.

        Set minimum priority for fast lane connections
        https://bugs.webkit.org/show_bug.cgi?id=58353

        * WebCore.exp.in:
        * platform/mac/WebCoreSystemInterface.h:
        * platform/mac/WebCoreSystemInterface.mm:
        * platform/network/cf/ResourceRequestCFNet.cpp:
        (WebCore::initializeMaximumHTTPConnectionCountPerHost): Call
        wkSetHTTPPipeliningMinimumFastLanePriority to allow javascript resources to use the fast
        lane connections.

2011-04-13  Chris Marrin  <cmarrin@apple.com>

        <rdar://problem/7977609> iframe/compositing propagation should also work for <object> and framesets (39037)

        Merged ToT WebKit r83518

    2011-04-11  Chris Marrin  <cmarrin@apple.com>

            Reviewed by Simon Fraser.

            iframe/compositing propagation should also work for <object> and framesets
            https://bugs.webkit.org/show_bug.cgi?id=39037

            Generalized the code that handles the parenting of composited <iframe> elements
            to include <frame> and <object> elements. This includes forcing the parent
            element to be composited and constructing the layer tree in the child document
            and properly parenting it. Much of the change is giving the function calls more
            generic names (from ...IFrame... to ...Frame...)

            Compositing tests that were done in RenderIFrame have been moved to RenderPart
            since this is the highest base class common to all 3 elements.

            I also renamed several ...IFrame... functions to
            ...Frame... and changed them so they work on a RenderPart for determining
            if the renderer is composited. One other detail is that <iframe> and 
            <object> never share style since they might be composited. I had to add
            <frame> to that list.

            Tests: compositing/framesets/composited-frame-alignment.html
                   compositing/objects/composited-object-alignment.html

            * css/CSSStyleSelector.cpp: Add <frame> to list of element types that should never share style since it might be composited.
            (WebCore::CSSStyleSelector::canShareStyleWithElement):
            * page/FrameView.cpp:
            (WebCore::FrameView::hasCompositedContentIncludingDescendants):
            (WebCore::FrameView::setIsOverlapped):
            * rendering/RenderIFrame.cpp: Moved methods to RenderPart
            * rendering/RenderIFrame.h:
            * rendering/RenderLayerBacking.cpp:
            (WebCore::RenderLayerBacking::updateAfterWidgetResize):
            (WebCore::RenderLayerBacking::updateGraphicsLayerConfiguration):
            (WebCore::RenderLayerBacking::paintingGoesToWindow):
            * rendering/RenderLayerCompositor.cpp:
            (WebCore::RenderLayerCompositor::updateBacking):
            (WebCore::RenderLayerCompositor::rebuildCompositingLayerTree):
            (WebCore::RenderLayerCompositor::frameContentsCompositor):
            (WebCore::RenderLayerCompositor::parentFrameContentLayers):
            (WebCore::RenderLayerCompositor::didMoveOnscreen):
            (WebCore::RenderLayerCompositor::allowsIndependentlyCompositedFrames):
            (WebCore::RenderLayerCompositor::shouldPropagateCompositingToEnclosingFrame):
            (WebCore::RenderLayerCompositor::enclosingFrameElement):
            (WebCore::RenderLayerCompositor::requiresCompositingLayer):
            (WebCore::RenderLayerCompositor::requiresCompositingForFrame):
            (WebCore::RenderLayerCompositor::requiresScrollLayer):
            (WebCore::RenderLayerCompositor::ensureRootPlatformLayer):
            (WebCore::RenderLayerCompositor::attachRootPlatformLayer):
            (WebCore::RenderLayerCompositor::detachRootPlatformLayer):
            * rendering/RenderLayerCompositor.h:
            * rendering/RenderPart.cpp: Functions moved from RenderIFrame
            (WebCore::RenderPart::requiresLayer):
            (WebCore::RenderPart::requiresAcceleratedCompositing):
            * rendering/RenderPart.h:

2011-04-14  Antti Koivisto  <antti@apple.com>

        Reviewed by Dave Carson.

        <rdar://problem/8904900> Review iOS-specific parser changes

        Remove unnecessary export of defaultParserTimeLimit

        Value -1 gets mapped to defaultParserTimeLimit.

        * html/parser/HTMLParserScheduler.cpp:
        * html/parser/HTMLParserScheduler.h:
        * page/Settings.cpp:
        (WebCore::Settings::Settings):

2011-04-14  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6591636> Remove legacy telephone parsing code from the WebCore HTML parser

        Reviewed by Simon Fraser.

        * WebCore.exp.in: Removed WebCoreFindTelephoneNumber() export.
        * WebCore.xcodeproj/project.pbxproj: Removed references to
        WebCoreTelephoneParser.{h|cpp}.
        * wak/WebCoreTelephoneParser.cpp: Removed.
        * wak/WebCoreTelephoneParser.h: Removed.

2011-04-13  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/9234085> PLT2 regressed between 9A171 and 9A177a on N90

        Reviewed by David Kilzer.

        Patch by Simon Fraser. Revert back to Durango behavior by not setting a contentsScale for
        WebTiledLayer. It doesn't cause any regressions and improves page load times for
        engadget.com by around 10% on N81.

        This is a temporary change and more investigations on contentsScale vs. mipmapping on tiled
        layers is happening in radar 9268177 and 9223956.

        * platform/graphics/ca/GraphicsLayerCA.cpp:
        (WebCore::GraphicsLayerCA::swapFromOrToTiledLayer):

2011-04-12  Chris Fleizach  <cfleizach@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/9130386> AX: scrolling in safari no longer works

        OpenSource ToT modified the AX hierarchy so that a ScrollView object is the parent of the web area.
        The iPhone AX wrapper needs to be cognizant of this. Right now it thinks the web area is the top most item.

        * accessibility/iphone/AccessibilityObjectWrapperIPhone.mm:
        (-[AccessibilityObjectWrapper accessibilityContainer]):

2011-04-12  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/9199076> Use -[QLPreviewConverter appendDataArray:] in ResourceHandleMac.mm

        Reviewed by Scott Grant.

        * platform/network/mac/ResourceHandleMac.mm:
        (-[WebCoreResourceHandleAsDelegate connection:didReceiveDataArray:]):
        Switched to use -[QLPreviewConverter appendDataArray:].  Moved
        if statement out of for loop that now only writes bytes to disk.

2011-04-11  Antti Koivisto  <antti@apple.com>

        <rdar://problem/9264296> Improve preload scanner effectiveness

        Merge from open source ToT:

        http://trac.webkit.org/changeset/83321
        http://trac.webkit.org/changeset/83456

    2011-04-11  Antti Koivisto  <antti@apple.com>

            Reviewed by Tony Gentilcore.

            Document source preload scanned repeatedly
            https://bugs.webkit.org/show_bug.cgi?id=58123
            
            Don't clear the preload scanner after execution resumes. This would lose the current
            scanning point and lead to rescanning when the preload scanner would get reconstructed
            due to main parser blocking again.

            Instead clear the scanner only in the specific case of receiving new data while the main
            parser has already reached the end of the current input.

            Also switched to using isWaitingForScripts() instead of m_treeBuilder->isPaused() for consistency.

            The case the clearing in resumeParsingAfterScriptExecution() was added for is covered by 
            http/tests/loading/preload-slow-loading.php.

            * html/parser/HTMLDocumentParser.cpp:
            (WebCore::HTMLDocumentParser::insert):
            (WebCore::HTMLDocumentParser::append):
            (WebCore::HTMLDocumentParser::resumeParsingAfterScriptExecution):

    2011-04-08  Antti Koivisto  <antti@apple.com>

            Reviewed by Tony Gentilcore.

            Incoming source should be preload scanned when the parser is blocked 
            https://bugs.webkit.org/show_bug.cgi?id=58117

            Scan the appended source if parser is blocked.

            Test: http/tests/loading/preload-append-scan.php

            * html/parser/HTMLDocumentParser.cpp:
            (WebCore::HTMLDocumentParser::append):

2011-04-11  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/8658955> WebCore/wak/WAKStringDrawing.{h|mm} should move to WebKit/iphone/Misc/WebNSStringDrawing.{h|mm}

        Reviewed by Dan Bernstein.

        Move WAKStringDrawing.{h|mm} to WebNSStringDrawing.{h|mm} in
        WebKit so clients don't have to link to WebCore and we don't
        have to copy and rename the header file.

        * WebCore.exp.in: Export methods used by WebNSStringDrawing.mm.
        * WebCore.xcodeproj/project.pbxproj: Made break_lines.h a
        private header.  Removed references to WAKStringDrawing.{h|mm}.

2011-04-10  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/9263304> Add back WebThreadCallAPI() for iBooks

        Reviewed by Simon Fraser.

        Neglected to re-export WebThreadCallAPI in r1012541.

        * WebCore.exp.in: Export WebThreadCallAPI().

2011-04-08  David Kilzer  <ddkilzer@apple.com>

        Follow-up for: <rdar://problem/9252504> Remove WebThreadCallAPI() since it has been replaced by WebThreadRun()

        Reviewed by Scott Grant.

        Since iBooks still uses WebCallThreadAPI(), we still need to
        support it.

        * wak/WebCoreThread.mm:
        (WebThreadCallAPI): Added.  Reimplemented using WebThreadRun().
        * wak/WebCoreThreadMessage.h:
        (WebThreadCallAPI): Added declaration.

2011-04-08  Justin Garcia  <justin.garcia@apple.com>

        <rdar://problem/8966638> [Telluride9A123]: Hitting Delete on Emoji characters delete all Emoji
    
        Merging http://trac.webkit.org/changeset/80791 from Open Source.

    2011-03-08  Alexey Proskuryakov  <ap@apple.com>

        Reviewed by Dan Bernstein.

        Backspace deletes all non-BMP symbols at once, and then some
        https://bugs.webkit.org/show_bug.cgi?id=55971
        <rdar://problem/8725312>

        Test: platform/mac/editing/input/insert-delete-smp-symbol.html

        * rendering/RenderText.cpp:
        (WebCore::isMark): This matches what Core Foundation does for all characters that I tested.
        (WebCore::RenderText::previousOffsetForBackwardDeletion): Changed to use isMark().

2011-04-08  Ian Henderson  <ianh@apple.com>

        <rdar://problem/9258831> Implement MainThreadAdoptAndRelease using dispatch_async

        Reviewed by David Kilzer.

        Instead of managing a CFRunLoopSource and maintaining an explicit list
        of objects to be released, just release the objects using
        dispatch_async.  This brings us up to 25 loads per second on my
        contrived microbenchmark.

        * wak/WebCoreThread.mm:
        (MainThreadAdoptAndRelease):
        (StartWebThread):

2011-04-08  Ian Henderson  <ianh@apple.com>

        <rdar://problem/9258748> WebCore::ApplicationCacheStorage::cacheGroupForURL takes an unnecessary process assertion

        Reviewed by Joseph Pecoraro.

        Every time we load a page, we call
        WebCore::ApplicationCacheStorage::cacheGroupForURL.  The majority of
        pages don't use the application cache, hence don't touch the app cache
        database at all.  We still increment a transaction counter, however,
        which ends up taking a SpringBoard process assertion.

        Only take increment the transaction counter if we're actually touching
        the database.

        * loader/appcache/ApplicationCacheStorage.cpp:
        (WebCore::ApplicationCacheStorage::loadManifestHostHashes):
        This ASSERT is no longer true.  Actually increment the auto
        transaction counter instead of assuming it has been incremented
        already.
        (WebCore::ApplicationCacheStorage::cacheGroupForURL):

2011-04-08  Ian Henderson  <ianh@apple.com>

        Merge WebKit ToT r83253.

    2011-04-07  Ian Henderson  <ianh@apple.com>
    
            Reviewed by Simon Fraser.
    
            Optimize filling rounded rects that are actually ellipses
            https://bugs.webkit.org/show_bug.cgi?id=58098
    
            In CG, drawing an ellipse directly is faster than constructing and
            filling a rounded rect path.  Detect when the given rounded rect is
            actually an ellipse and draw it directly in this case.
    
            * platform/graphics/cg/GraphicsContextCG.cpp:
            (WebCore::GraphicsContext::fillRoundedRect):

2011-04-07  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/9252504> Remove WebThreadCallAPI() since it has been replaced by WebThreadRun()

        Reviewed by Ian Henderson and Joseph Pecoraro.

        * WebCore.exp.in: Removed _WebThreadCallAPI symbol.
        * wak/WebCoreThread.mm:
        (HandleAPISource): Removed.
        (SendAPIMessage): Removed.
        (WebThreadCallAPI): Removed.
        (RunWebThread): Removed support for HandleAPISource().
        * wak/WebCoreThreadMessage.h:
        (WebThreadCallAPI): Removed declaration.

2011-04-07  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Kilzer.

        <rdar://problem/9197757> Move Global Subsampling Settings to WebView class methods

        * WebCore.exp.in: export the accessor to the global value.

2011-04-06  Ian Henderson  <ianh@apple.com>

        <rdar://problem/9247735> +[WAKView _wrapperForViewRef:] is taking 1% of BrowserMark samples

        Reviewed by David Kilzer.

        Store the WAKView wrapping a WKViewRef directly in the struct instead
        of in an auxiliary CFDictionaryRef.  Change all callers of
        _wrapperForViewRef: to call a static inline function,
        WAKViewForWKViewRef, which checks for the easy case (where the
        wrapper is already set) and returns early.  Repurpose
        _wrapperForViewRef: to actually construct the wrapper if necessary.

        * wak/WAKClipView.m:
        (-[WAKClipView documentView]):
        Replace _wrapperForViewRef: with WAKViewForWKViewRef.
        * wak/WAKScrollView.mm:
        (WAKScrollViewScrollWheel):
        Ditto.
        (-[WAKScrollView initWithFrame:]):
        Call _initWithViewRef: instead of initializing manually.
        (-[WAKScrollView documentView]):
        Replace _wrapperForViewRef: with WAKViewForWKViewRef.
        (-[WAKScrollView contentView]):
        Ditto.
        * wak/WAKView.h:
        * wak/WAKView.mm:
        (willRemoveSubviewCallback):
        Ditto.
        (invalidateGStateCallback):
        Ditto.
        (+[WAKView _wrapperForViewRef:]):
        (-[WAKView _initWithViewRef:]):
        (-[WAKView initWithFrame:]):
        Call _initWithViewRef: so we have just one init codepath.
        (-[WAKView dealloc]):
        (_WAKCopyWrapper):
        Replace _wrapperForViewRef: with WAKViewForWKViewRef.
        (-[WAKView superview]):
        Ditto.
        (-[WAKView lastScrollableAncestor]):
        Ditto.
        (+[WAKView focusView]):
        Ditto.
        (-[WAKView hitTest:]):
        Ditto.
        * wak/WAKViewPrivate.h:
        Add _initWithViewRef: to the header so WAKScrollView can see it.
        (WAKViewForWKViewRef):
        * wak/WAKWindow.mm:
        (-[WAKWindow contentView]):
        Replace _wrapperForViewRef: with WAKViewForWKViewRef.
        (-[WAKWindow firstResponder]):
        Ditto.
        (-[WAKWindow _newFirstResponderAfterResigning]):
        Ditto.
        * wak/WKView.h:

2011-04-06  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/9230333> Fast path for parsing simple px CSS values

        Merge WebKit ToT r83122.

    2011-04-06  Ian Henderson  <ianh@apple.com>
    
            Reviewed by Simon Fraser, Antti Koivisto.
    
            Fast path for parsing simple CSS values
            https://bugs.webkit.org/show_bug.cgi?id=57964
    
            Add functions to parse simple color or dimension values, skipping the
            overhead of full CSS parsing.
    
            Change parseValue to a static method to avoid unnecessary allocation
            of a CSSParser in the fast case.
    
            * css/CSSMutableStyleDeclaration.cpp:
            (WebCore::CSSMutableStyleDeclaration::setProperty):
            Changed to use the new, static parseValue method.
            * css/CSSParser.cpp:
            (WebCore::isColorPropertyID):
            (WebCore::parseColorValue):
            Parses any color accepted by the existing parseColor() static method.
            We must handle color identifiers separately, since parseColor() will
            change 'red' into 'rgb(255, 0, 0)'.
            (WebCore::isSimpleLengthPropertyID):
            (WebCore::parseSimpleLengthValue):
            Parses a value of the form 'NNpx', 'NN%', or 'NN' (when strict is
            false, or 'NN' is '0').  Returns false to fall back to the slow path.
            (WebCore::CSSParser::parseValue):
            * css/CSSParser.h:
            * css/WebKitCSSMatrix.cpp:
            (WebCore::WebKitCSSMatrix::setMatrixValue):
            Changed to use the new, static parseValue method.

2011-04-06  Simon Fraser  <simon.fraser@apple.com>

        Merge WebKit ToT r83119.
    
    2011-04-06  Simon Fraser  <simon.fraser@apple.com>
    
            Reviewed by Antti Koivisto.
    
            Some minor style resolution optimizations
            https://bugs.webkit.org/show_bug.cgi?id=57996
    
            A couple of minor optimizations to style-related code.
    
            * bindings/js/JSCSSStyleDeclarationCustom.cpp:
            (WebCore::isCSSPropertyName):
            (WebCore::JSCSSStyleDeclaration::putDelegate):
            Avoid calling cssPropertyName() twice when setting style on an element.
            
            * css/CSSStyleSelector.cpp:
            (WebCore::useSVGZoomRules):
            (WebCore::CSSStyleSelector::applyProperty):
            Avoid calling isSVGElement() for every property, since only a two properties
            care about it.

2011-04-06  Simon Fraser  <simon.fraser@apple.com>

        Merge WebKit ToT r83118.

    2011-04-06  Ian Henderson  <ianh@apple.com>
    
            Reviewed by Antti Koivisto.
    
            Unnecessary string allocation in CSSStyleDeclaration::setProperty
            https://bugs.webkit.org/show_bug.cgi?id=57995
    
            Pass the bool representing the property's importance directly instead
            of constructing a string.
    
            * css/CSSStyleDeclaration.cpp:
            (WebCore::CSSStyleDeclaration::setProperty):
    
2011-04-05  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/9098304> Optimize rendering of simple rounded borders, for Whippet

        Merge WebKit ToT r82969.

    2011-04-05  Simon Fraser  <simon.fraser@apple.com>
    
            Reviewed by Adele Peterson.
    
            Add a fast path for simple color backgrounds
            https://bugs.webkit.org/show_bug.cgi?id=57773
    
            Add a fast path for drawing simple color backgrounds. It's
            faster to fill a path or rect than it is to set up a clip,
            and then paint the rect.
            
            No visible behavior change so no new tests.
    
            * rendering/RenderBoxModelObject.cpp:
            (WebCore::RenderBoxModelObject::paintFillLayerExtended):
    
2011-04-06  Joseph Pecoraro  <joepeck@webkit.org>

        <rdar://problem/9240816> Add <head> to the simpleUserAgentStyleSheet

        Merged ToT WebKit r83032.

    2011-04-06  Joseph Pecoraro  <joepeck@webkit.org>

            Reviewed by Antti Koivisto.

            Add <head> to the simpleUserAgentStyleSheet
            https://bugs.webkit.org/show_bug.cgi?id=57915

            * css/CSSStyleSelector.cpp:
            (WebCore::elementCanUseSimpleDefaultStyle): add head to the
            simple stylesheet, display:none.

2011-04-05  Antti Koivisto  <antti@apple.com>

        <rdar://problem/9192489> Improve tile invalidation performance

        Merge open source r83022

    2011-04-05  Antti Koivisto  <antti@apple.com>

            Reviewed by Cameron Zwarich.

            Avoid calling currentTime() from FrameView::adjustedDeferredRepaintDelay() when repaints are deferred
            https://bugs.webkit.org/show_bug.cgi?id=57914

            Don't call adjustedDeferredRepaintDelay unnecessarily.

            * page/FrameView.cpp:
            (WebCore::FrameView::repaintContentRectangle):
            (WebCore::FrameView::adjustedDeferredRepaintDelay):

2011-04-05  Antti Koivisto  <antti@apple.com>

        <rdar://problem/9192489> Improve tile invalidation performance

        Merge open source r82992.

    2011-04-05  Antti Koivisto  <antti@apple.com>

            Reviewed by Darin Adler.

            Defer repaints during style recalc
            https://bugs.webkit.org/show_bug.cgi?id=57886

            This reduces the need to do (often expensive) platform surface invalidation.
            We already do this during layout but style recalculation may trigger
            invalidation as well.
        
            * dom/Document.cpp:
            (WebCore::Document::recalcStyle):

2011-04-05  Antti Koivisto  <antti@apple.com>

        Reviewed by Ian Henderson.

        <rdar://problem/9192489> Improve tile invalidation performance

        Cache the memory level.

        * platform/iphone/SystemMemoryIPhone.cpp:
        (WebCore::systemMemoryLevel):

2011-04-05  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/9111610> Use _CFNetworkHTTPConnectionCacheSetLimit() to set the number of priority levels

        Merged ToT WebKit r82900.

        * platform/iphone/WebCoreSystemInterfaceIPhone.mm:
        (wkSetHTTPPipeliningMaximumPriority): Added function pointer.

    2011-04-04  David Kilzer  <ddkilzer@apple.com>

        <http://webkit.org/b/57384> CFNetwork and WebCore load priorities should match

        Reviewed by Alexey Proskuryakov.

        * WebCore.exp.in: Export wkSetHTTPPipeliningMaximumPriority().
        * platform/mac/WebCoreSystemInterface.h:
        (wkSetHTTPPipeliningMaximumPriority): Added function pointer
        declaration.
        * platform/mac/WebCoreSystemInterface.mm:
        (wkSetHTTPPipeliningMaximumPriority): Added function pointer.
        * platform/network/cf/ResourceRequestCFNet.cpp:
        (WebCore::initializeMaximumHTTPConnectionCountPerHost): Call
        wkSetHTTPPipeliningMaximumPriority() to set the maximum HTTP
        pipelining priority.
        * platform/network/cf/ResourceRequestCFNet.h:
        (WebCore::toResourceLoadPriority): Renamed from
        mapHTTPPipeliningPriorityToResourceLoadPriority().  Updated to
        to handle Unresolved case.
        (WebCore::toHTTPPipeliningPriority): Renamed from
        mapResourceLoadPriorityToHTTPPipeliningPriority().  Updated to
        handle Unresolved case.
        * platform/network/mac/ResourceRequestMac.mm:
        (WebCore::ResourceRequest::doUpdateResourceRequest): Switched to
        use toResourceLoadPriority().
        (WebCore::ResourceRequest::doUpdatePlatformRequest): Switched to
        use toHTTPPipeliningPriority().  Moved
        shouldForceHTTPPipeliningPriorityHigh() check into the argument
        of toHTTPPipeliningPriority() instead of hard-coding a
        now-incorrect value.

2011-04-05  Antti Koivisto  <antti@apple.com>

        <rdar://problem/8722094> Defer loading of print media CSS resources

        Merged r82951 from open source.

    2011-04-04  Antti Koivisto  <antti@apple.com>

            Reviewed by Sam Weinig.

            Print stylesheet on nytimes.com loads too early
            https://bugs.webkit.org/show_bug.cgi?id=57814

            Don't load resources with Very Low priority until there are no other resources to 
            load for the host (or until document is complete enough that we stop limiting requests).

            No tests, this is  difficult to observe reliably with our current testing infrastructure.
            Verified working with Wireshark.

            * loader/ResourceLoadScheduler.cpp:
            (WebCore::ResourceLoadScheduler::servePendingRequests):
            (WebCore::ResourceLoadScheduler::HostInformation::limitRequests):
            * loader/ResourceLoadScheduler.h:

2011-04-04  Ian Henderson  <ianh@apple.com>

        <rdar://problem/9211809> AppStore is using 100% CPU all the time, because a TileCache timer is thrashing

        Reviewed by Antti Koivisto.

        During the merge, we replaced rect.topLeft() with rect.location() and
        rect.bottomRight() with IntPoint(rect.maxX(), rect.maxY()), since the
        older methods were removed.  Unfortunately, while the topLeft is the
        same as the location, the bottomRight is actually equal to
        IntPoint(rect.maxX() - 1, rect.maxY() - 1).

        When tiles abut the edge of the screen (as they do on K48 and K9x),
        this extra pixel turns into a whole extra column of tiles.  Since the
        extra column doesn't actually intersect the keepRect, we drop any
        tiles in the newly-created column immediately.  This cycle of creating
        and dropping tiles continues forever, using 100% of the CPU.

        We never noticed this in Safari because the "keep around zoomed out
        tiles" patch landed in the same build as the merge.  Zoomed out tiles
        are removed based on memory usage, not the keepRect, and the zoomed in
        tile grid rarely aligns with the edge of the visible rect closely
        enough to trigger this issue.

        Add new static functions, topLeft and bottomRight, to replace the old
        methods on IntRect.

        * platform/iphone/TileCache.mm:
        (WebCore::TileCache::createTiles):
        * platform/iphone/TileGrid.h:
        (WebCore::topLeft):
        (WebCore::bottomRight):
        * platform/iphone/TileGrid.mm:
        (WebCore::TileGrid::dropTilesBetweenRects):
        (WebCore::TileGrid::addTilesCoveringRect):
        (WebCore::TileGrid::centerTileGridOrigin):
        (WebCore::TileGrid::tilesCover):
        (WebCore::TileGrid::invalidateTiles):

2011-04-04  Antti Koivisto  <antti@apple.com>

        Reviewed by Dave Carson and Pratik Solanki.

        <rdar://problem/8841275> Tune tile sizes based to better match device dimensions and rendering strategy

        As a first step, go back to the 512x512 tile size (1024x1024 on double resolution devices).

        * platform/iphone/TileCache.h:
        * platform/iphone/TileCache.mm:
        (WebCore::TileCache::TileCache):
        (WebCore::TileCache::setScreenScale):

2011-04-04  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/9226634> Disguise screen scale on J1/J2 until devices are announced

        Reviewed by Antti Koivisto.

        * wak/WAKWindow.mm:
        (-[WAKWindow setScreenScale:]): If we're running on an iPad and
        UIKit tries to set the screen scale to 2.0, force it to 1.0.

2011-04-04  Justin Garcia  <justin.garcia@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/9223304> setDictationPhrases: shouldn't require that the UITextView be editable/first responder/contain a selection
        <rdar://problem/9112689> Insert whitespace between phrases in UIKit instead of WebKit

        * WebCore.exp.in:
        * editing/Editor.cpp:
        (WebCore::Editor::setDictationPhrasesAsChildOfElement): Added. Modeled after setTextAsChildOfElement. Does not
        require that the user is editing, but does some things in the event that they are, like clearing the current
        composition and Undo operations.
        * editing/Editor.h:
        * editing/iphone/DictateCommand.cpp:
        (WebCore::DictateCommand::doApply): Moved whitespace handling to UIKit.

2011-04-01  Karl Hong  <khong@apple.com>

        Reviewed by Justin Garcia.

        <rdar://problem/9093484> The selection rect for a fully selected vertical line is too wide

        Extend SelectionRect to support vertical text.
        Move SelectionRect.cpp and SelectionRect.h to platform/iphone, they are iPhone-only implementation.

        * WebCore.xcodeproj/project.pbxproj:
        * dom/Range.cpp:
        (WebCore::Range::collectSelectionRects):
        * platform/SelectionRect.cpp: Removed.
        * platform/SelectionRect.h: Removed.
        * platform/iphone/SelectionRect.cpp: Copied from platform/SelectionRect.cpp.
        (WebCore::SelectionRect::SelectionRect):
        * platform/iphone/SelectionRect.h: Copied from platform/SelectionRect.h.
        (WebCore::SelectionRect::maxY):
        (WebCore::SelectionRect::isHorizontal):
        (WebCore::SelectionRect::setMaxY):
        (WebCore::SelectionRect::setIsHorizontal):
        * rendering/RenderImage.cpp:
        (WebCore::RenderImage::collectSelectionRects):
        * rendering/RenderText.cpp:
        (WebCore::RenderText::collectSelectionRects):

2011-03-31  Antti Koivisto  <antti@apple.com>

        <rdar://problem/9219111> Preload scanner fails to pick up resources from document.write() output

        Merge ToT WebKit: r80695 r82628 r82631 r82637

    2011-03-09  Antti Koivisto  <antti@apple.com>

            Not reviewed.

            Reverting crash catching code, the bug being hunted was fixed by
            http://trac.webkit.org/changeset/80686

            * loader/cache/CachedResourceLoader.cpp:
            (WebCore::CachedResourceLoader::CachedResourceLoader):
            (WebCore::CachedResourceLoader::~CachedResourceLoader):
            (WebCore::CachedResourceLoader::requestImage):
            (WebCore::CachedResourceLoader::requestUserCSSStyleSheet):
            (WebCore::CachedResourceLoader::requestResource):
            (WebCore::CachedResourceLoader::setAutoLoadImages):
            (WebCore::CachedResourceLoader::load):
            (WebCore::CachedResourceLoader::loadDone):
            (WebCore::CachedResourceLoader::preload):
            (WebCore::CachedResourceLoader::requestPreload):
            * loader/cache/CachedResourceLoader.h:

    2011-03-31  Antti Koivisto  <antti@apple.com>

            Reviewed by Oliver Hunt.

            https://bugs.webkit.org/show_bug.cgi?id=57574
            Preload scanner fails to pick up resources from document.write() output

            - Scan script inserted source using a separate preload scanner.
            - Make the main preload scanner correctly process the remaining source if script execution blocked the parser.

            Tests: fast/preloader/document-write-2.html
                   fast/preloader/document-write.html

            * html/parser/HTMLDocumentParser.cpp:
            (WebCore::HTMLDocumentParser::insert):
            (WebCore::HTMLDocumentParser::appendCurrentInputStreamToPreloadScannerAndScan):
            * html/parser/HTMLDocumentParser.h:
            (WebCore::HTMLDocumentParser::hasPreloadScanner):
            * html/parser/HTMLScriptRunner.cpp:
            (WebCore::HTMLScriptRunner::execute):
            * html/parser/HTMLScriptRunnerHost.h:

    2011-03-31  Tony Gentilcore  <tonyg@chromium.org>

            Reviewed by Antti Koivisto.

            PreloadScanner doesn&apos;t find image while executing script in head
            https://bugs.webkit.org/show_bug.cgi?id=45072

            Previously, while parsing the head, no resources in the body would be
            preloaded. After this patch, we will preload scripts and styles in the
            body, although we continue to hold off on all images until the page is 
            first rendered.

            To evaluate this change, I've recorded a sampling of 45 of alexa's top
            sites and replayed them under simulated bandwidth conditions, loading
            each 5-15 times until stddev is small enough.

            Time to the load event improved at the overall average by 3%.
            Most sites are unchanged, but sites with certain blocking patterns had
            big wins -- ebay 19% (331ms), microsoft 15% (226ms), conduit 15% (277ms)
            nytimes 7% (182ms).

            Time to DOM content loaded event improved by 6% with some even bigger
            individual wins.

            First paint time held steady.

            Note that I originally wanted to allow preloading of images while in the
            head, but that regressed first paint time (even though it was better for
            overall load time).

            Test: fast/preloader/scan-body-from-head.html

            * loader/cache/CachedResourceLoader.cpp:
            (WebCore::CachedResourceLoader::preload):

2011-03-30  Anton D'Auria  <adauria@apple.com>

        <rdar://problem/9037775> Remove all storage and cache types for an origin

        Merged ToT WebKit: r81733, r81564, and r81557.

    2011-03-22  Anton D'Auria  <adauria@apple.com>

            Reviewed by Alexey Proskuryakov.

            Add +[WebApplicationCache getOriginsWithCache]
            https://bugs.webkit.org/show_bug.cgi?id=56722

            Added test that exercises WebCore API to get origins with application cache.

            Test: http/tests/appcache/origins-with-appcache.html

            * loader/appcache/ApplicationCacheStorage.cpp: 
            (WebCore::ApplicationCacheStorage::getOriginsWithCache):
            * loader/appcache/ApplicationCacheStorage.h:

    2011-03-19  Anton D'Auria  <adauria@apple.com>

            Reviewed by Alexey Proskuryakov.

            ApplicationCacheGroup is not obsolete after being deleted via ApplicationCacheStorage::deleteEntriesForOrigin
            https://bugs.webkit.org/show_bug.cgi?id=56415

            To delete all Application Cache for an origin, we must obsolete all
            in-memory cache groups for that origin. If a cache group isn't in memory,
            then it must be deleted from disk. The previous implementation correctly
            removed on-disk cache groups, but did not mark in-memory cache groups as obsolete.
            This caused an assertion failure in ApplicationCacheStorage::cacheGroupDestroyed()
            when the DocumentLoader was destroyed.

            Test: http/tests/appcache/origin-delete.html

            * WebCore.exp.in:
            * WebCore.xcodeproj/project.pbxproj:
            * loader/appcache/ApplicationCache.cpp:
            (WebCore::ApplicationCache::clearStorageID):
            (WebCore::ApplicationCache::deleteCacheForOrigin):
            * loader/appcache/ApplicationCache.h:
            * loader/appcache/ApplicationCacheStorage.cpp:
            (WebCore::ApplicationCacheStorage::findInMemoryCacheGroup):
            * loader/appcache/ApplicationCacheStorage.h:

2011-03-30  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/6302281> 5G57: message takes 60 seconds to show up on wifi

        Reviewed by Simon Fraser.

        Add an SPI to expose Document::updateLayoutIgnorePendingStylesheets(), so that Mail
        can use it to force a layout and repaint if an external CSS takes very long to load.

        ToT WebKit r72367 introduces Document::mayCauseFlashOfUnstyledContent() method which
        stops painting content if we do a layout for unstyled content.  For Mail to show
        unstyled content, we need to add a flag m_shouldPaintUnstyledContent to enable painting.

        * WebCore.exp.in: export Document::setShouldPaintUnstyledContent.
        * dom/Document.cpp:
        (WebCore::Document::Document):
        (WebCore::Document::setShouldPaintUnstyledContent):
        (WebCore::Document::mayCauseFlashOfUnstyledContent): paint unstyled content if m_shouldPaintUnstyledContent is true.
        * dom/Document.h:

2011-03-29  Anton D'Auria  <adauria@apple.com>

        <rdar://problem/9037775> Remove all storage and cache types for an origin

        Merged ToT WebKit: r80892, r80927, r80964, r81002, r81003, r81005, r81150, and r82050.

    2011-03-26  Patrick Gansterer  <paroga@webkit.org>

           Unreviewed build fix for !ENABLE(DOM_STORAGE).

           * storage/StorageTracker.cpp:
               Added #if ENABLE(DOM_STORAGE) like in the other storage files.

    2011-03-14  Brady Eidson  <beidson@apple.com>

           Reviewed by Dan Bernstein.

           <rdar://problem/8762095> and https://bugs.webkit.org/show_bug.cgi?id=55172
           Need WK2 API to view/manage origins with LocalStorage

           * storage/StorageTracker.cpp:
           (WebCore::StorageTracker::initializeTracker): Make sure the TextEncoding map is initialized on the main thread
             before the StorageTracker thread can do it on the background thread.

    2011-03-13  Anton D'Auria  <adauria@apple.com>

           Reviewed by Brady Eidson and David Levin, landed by Brady Eidson.

           Fixed lock-taking order to prevent deadlock, added lock for m_client,
           removed premature return in syncImportOriginIdentifiers when tracker
           db does not exist because that prevented syncFileSystemAndTrackerDatabase()
           from running until next LocalStorage db creation, cleaned up
           StorageTracker::scheduleTask() code for readability.

           https://bugs.webkit.org/show_bug.cgi?id=56285

           * storage/StorageTracker.cpp:
           (WebCore::StorageTracker::trackerDatabasePath):
           (WebCore::StorageTracker::syncImportOriginIdentifiers): If tracker db isn't
           optionally opened (as in the case when it doesn't exist on disk), don't
           exit early and call syncFileSystemAndTrackerDatabase(), which will create
           a tracker db if localstorage db files are found on disk by calling setOriginDetails.
           (WebCore::StorageTracker::syncFileSystemAndTrackerDatabase):
           (WebCore::StorageTracker::setOriginDetails):
           (WebCore::StorageTracker::scheduleTask): readability changes.
           (WebCore::StorageTracker::syncSetOriginDetails):
           (WebCore::StorageTracker::syncDeleteAllOrigins):
           (WebCore::StorageTracker::syncDeleteOrigin):
           (WebCore::StorageTracker::cancelDeletingOrigin): order lock-taking consistently to avoid deadlock.
           (WebCore::StorageTracker::setClient):
           * storage/StorageTracker.h:

    2011-03-13  Anton D'Auria  <adauria@apple.com>

           Reviewed and landed by Brady Eidson.

           Invalid assertion in StorageTracker - PageGroup::numberOfPageGroups() == 1
           https://bugs.webkit.org/show_bug.cgi?id=56240

           This assertion is invalid until LocalStorage is either global or is isolated by PageGroup.

           * storage/StorageTracker.cpp:
           (WebCore::StorageTracker::origins):
           (WebCore::StorageTracker::deleteAllOrigins):
           (WebCore::StorageTracker::deleteOrigin):

    2011-03-13  Anton D'Auria  <adauria@apple.com>

           Reviewed by Alice Liu.

           StorageTracker constructor shouldn't have initialization code and isMainThread() assertion
           https://bugs.webkit.org/show_bug.cgi?id=56259

           Move all StorageTracker initialization to
           StorageTracker::initializeTracker. This also removes the
           requirement that the StorageTracker constructor isn't run
           on the main thread.

           * storage/StorageTracker.cpp:
           (WebCore::StorageTracker::initializeTracker):
           (WebCore::StorageTracker::tracker):
           (WebCore::StorageTracker::StorageTracker):

    2011-03-11  Anton D'Auria  <adauria@apple.com>

           Reviewed and landed by Brady Eidson.

           Add WebKit1 API to view and delete local storage
           https://bugs.webkit.org/show_bug.cgi?id=51878

           Created StorageTracker as a central point for tracking and deleting LocalStorage per origin.
           StorageTracker maintains its own database of origin identifiers and backing db paths,
           and this allows it to contain more relational data in the future, like variable quotas per origin.

           On initialization, StorageTracker syncs its database with LocalStorage files on disk. It adds
           an origin entry when StorageAreaSync performs a first sync for an origin.

           All StorageTracker file operations are performed on one background thread with a task queue.

           Tests: storage/domstorage/localstorage/storagetracker/storage-tracker-1-prepare.html
                  storage/domstorage/localstorage/storagetracker/storage-tracker-2-create.html
                  storage/domstorage/localstorage/storagetracker/storage-tracker-3-delete-all.html
                  storage/domstorage/localstorage/storagetracker/storage-tracker-4-create.html
                  storage/domstorage/localstorage/storagetracker/storage-tracker-5-delete-one.html

           * GNUmakefile.am:
           * WebCore.exp.in:
           * WebCore.gypi:
           * WebCore.pro:
           * WebCore.vcproj/WebCore.vcproj:
           * WebCore.xcodeproj/project.pbxproj:
           * page/PageGroup.cpp:
           (WebCore::PageGroup::clearLocalStorageForAllOrigins):
           (WebCore::PageGroup::clearLocalStorageForOrigin):
           (WebCore::PageGroup::syncLocalStorage):
           (WebCore::PageGroup::numberOfPageGroups):
           * page/PageGroup.h:
           * platform/chromium/FileSystemChromium.cpp:
           (WebCore::listDirectory):
           * platform/posix/FileSystemPOSIX.cpp:
           (WebCore::listDirectory):
           * storage/LocalStorageTask.cpp:
           (WebCore::LocalStorageTask::LocalStorageTask):
           (WebCore::LocalStorageTask::performTask):
           * storage/LocalStorageTask.h:
           (WebCore::LocalStorageTask::createOriginIdentifiersImport):
           (WebCore::LocalStorageTask::createSetOriginDetails):
           (WebCore::LocalStorageTask::createDeleteOrigin):
           (WebCore::LocalStorageTask::createDeleteAllOrigins):
           * storage/StorageAreaImpl.cpp:
           (WebCore::StorageAreaImpl::clearForOriginDeletion):
           (WebCore::StorageAreaImpl::sync):
           * storage/StorageAreaImpl.h:
           * storage/StorageAreaSync.cpp:
           (WebCore::StorageAreaSync::scheduleCloseDatabase):
           (WebCore::StorageAreaSync::openDatabase):
           (WebCore::StorageAreaSync::sync):
           (WebCore::StorageAreaSync::deleteEmptyDatabase):
           (WebCore::StorageAreaSync::scheduleSync):
           * storage/StorageAreaSync.h:
           * storage/StorageNamespace.h:
           * storage/StorageNamespaceImpl.cpp:
           (WebCore::StorageNamespaceImpl::clearOriginForDeletion):
           (WebCore::StorageNamespaceImpl::clearAllOriginsForDeletion):
           (WebCore::StorageNamespaceImpl::sync):
           * storage/StorageNamespaceImpl.h:
           * storage/StorageTracker.cpp: Added.
           (WebCore::StorageTracker::initializeTracker):
           (WebCore::StorageTracker::tracker):
           (WebCore::StorageTracker::StorageTracker):
           (WebCore::StorageTracker::setStorageDirectoryPath):
           (WebCore::StorageTracker::trackerDatabasePath):
           (WebCore::StorageTracker::openTrackerDatabase):
           (WebCore::StorageTracker::importOriginIdentifiers):
           (WebCore::StorageTracker::syncImportOriginIdentifiers):
           (WebCore::StorageTracker::syncFileSystemAndTrackerDatabase):
           (WebCore::StorageTracker::setOriginDetails):
           (WebCore::StorageTracker::scheduleTask):
           (WebCore::StorageTracker::syncSetOriginDetails):
           (WebCore::StorageTracker::origins):
           (WebCore::StorageTracker::deleteAllOrigins):
           (WebCore::StorageTracker::syncDeleteAllOrigins):
           (WebCore::StorageTracker::deleteOrigin):
           (WebCore::StorageTracker::syncDeleteOrigin):
           (WebCore::StorageTracker::willDeleteAllOrigins):
           (WebCore::StorageTracker::willDeleteOrigin):
           (WebCore::StorageTracker::canDeleteOrigin):
           (WebCore::StorageTracker::cancelDeletingOrigin):
           (WebCore::StorageTracker::setClient):
           (WebCore::StorageTracker::syncLocalStorage):
           * storage/StorageTracker.h: Added.
           * storage/StorageTrackerClient.h: Added.
           (WebCore::StorageTrackerClient::~StorageTrackerClient):

2011-03-29  Simon Fraser  <simon.fraser@apple.com>

        Merge WebKit ToT r81715, which I need for scrolling work.
        
    2011-03-22  Simon Fraser  <simon.fraser@apple.com>
    
            Reviewed by Beth Dakin.
    
            Incorrect rendering of composited element with negative z-index child
            https://bugs.webkit.org/show_bug.cgi?id=56846
            
            When a composited element has a child with negative z-index, we make
            a separate layer for that element's foreground content. This layer
            was positioned incorrectly (but the content happened to paint at
            the right location), resulting in right/bottom clipping.
            
            Fix this, remove the little-used graphicsLayerToContentsCoordinates()
            contentsToGraphicsLayerCoordinates() methods, and optimize incremental
            repaints in the foreground and mask layers.
    
            Tests: compositing/geometry/foreground-layer.html
                   compositing/geometry/repaint-foreground-layer.html
    
            * platform/graphics/ca/GraphicsLayerCA.cpp:
            (WebCore::GraphicsLayerCA::setNeedsDisplayInRect): Cull repaints
            which fall outside the layer bounds, so callers don't have to,
            and to avoid unnecessary layer commits.
    
            * rendering/RenderLayerBacking.cpp:
            (WebCore::RenderLayerBacking::updateGraphicsLayerGeometry): If
            we have a foreground layer inside a clipping layer, the foreground
            layer's offset is zero, since the clipping layer is its parent.
            
            (WebCore::RenderLayerBacking::setContentsNeedDisplayInRect): Use
            offsetFromRenderer() directly instead of contentsToGraphicsLayerCoordinates().
            Also do incremental repaints of the foreground and mask layers.
            
            (WebCore::RenderLayerBacking::paintContents): It was incorrect to always
            use compositedBounds() to compute the painting offset, since that's
            per-RenderLayerBacking, but a single RenderLayerBacking can have different
            GraphicsLayers with different offsets (e.g. the foreground layer).
            Instead, use offsetFromRenderer(), which gives has the correct offset.
    
            * rendering/RenderLayerBacking.h: Remove unused methods.
    
2011-03-29  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by David Carson.

        <rdar://problem/9202063> Regression: <canvas> drawn on a 3d-transformed element draws in a low resolution

        On iOS, set the layer contentsScale using Frame::contentsScale(), rather than pageScaleFactor()
        which is only used on desktop. This ensures that on retina displays, layers get 2x resolution
        when created.
        
        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::createGraphicsLayer):

2011-03-28  Justin Garcia  <justin.garcia@apple.com>

        Reviewed by Dan Bernstein.

        <rdar://problem/9196772> Can't dictate into plaintext regions

        * editing/EditCommand.cpp:
        (WebCore::EditCommand::apply): Allow EditActionDictate in plaintext-only regions.

2011-03-25  Ian Henderson  <ianh@apple.com>

        <rdar://problem/9182396> PEP Web: random crashes on WebCore HandleRunSource.

        Reviewed by Cameron Zwarich.

        Move the call to connection() out of the block.  By the time the block
        runs, the ResourceHandle may be dead, and the call to connection()
        will return garbage.  The NSURLConnection we pass in will be retained
        by the block.

        * platform/network/mac/ResourceHandleMac.mm:
        (WebCore::ResourceHandle::start):

2011-03-25  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Kilzer.

        <rdar://problem/8715493> Provide SPI to allow WebKit clients to modify 2Mpx limit on images (iBooks)

        Add a static value to ImageSource denoting the maximum image
        size, in pixels, before we increase the subsampling size.
        Switch the hardcoded 2MP value to this global setting.

        * WebCore.exp.in: export the setter to WebKit.
        * platform/graphics/ImageSource.h: add static global, and a getter/setter for the setting.
        * platform/graphics/cg/ImageSourceCG.cpp: implement and provide a default value.
        (WebCore::ImageSource::frameSizeAtIndex): compare to the setting instead of a hardcoded value.
        (WebCore::ImageSource::maximumImageSizeBeforeSubsampling):
        (WebCore::ImageSource::setMaximumImageSizeBeforeSubsampling):

2011-03-22  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/9171080> Remove desktop-specific code from iOS WebKit

        Reviewed by David Kilzer.

        * platform/network/ResourceHandle.h: NSURLConnection no longer supports _bufferedData. It
        was removed in SnowLeopard. We don't need it on iOS.
        (WebCore::ResourceHandle::supportsBufferedData):
        (WebCore::ResourceHandle::bufferedData):
        * platform/network/cf/ResourceRequest.h:
        (WebCore::ResourceRequest::applyWebArchiveHackForMail): Mail on iOS does not check for
        WebDataRequest property.
        * platform/network/mac/ResourceHandleMac.mm:
        (-[WebCoreResourceHandleAsDelegate connection:didReceiveResponse:]): Remove check for
        ForceHTMLMIMEType property. It is only set by Safari on desktop.
        * platform/network/mac/ResourceRequestMac.mm:

2011-03-24  Justin Garcia  <justin.garcia@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/9083255> Sub-TLF: can't create multi-line vertical text selections

        * rendering/RenderText.cpp:
        (WebCore::RenderText::collectSelectionRects): logicalWidth() and logicalHeight() do not account for vertical text.

2011-03-24  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by Pratik Solanki.

        <rdar://problem/9184240> Cleanup Default Maximum Decoded Image Size Settings

        Remove calculation here since it will be set when a WebView is
        constructed, and subsequent preferences changed calls.

        * page/Settings.cpp:
        (WebCore::Settings::Settings): remove calculation.

2011-03-24  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Kilzer.

        <rdar://problem/7529024> Remove per-document image resource limits in favor of using the WebCore::Cache

        Remove "per-document" image resource limits. We were already
        ignoring the image limits by accident, unless the disk image
        cache was filling up. Now, just explicitly remove the limit.

        * dom/Document.cpp:
        (WebCore::Document::Document):
        (WebCore::Document::removedLastRef):
        (WebCore::Document::detach):
        * dom/Document.h:
        * html/HTMLFrameOwnerElement.cpp:
        (WebCore::HTMLFrameOwnerElement::willRemove):
        * loader/ImageLoader.cpp:
        (WebCore::ImageLoader::~ImageLoader):
        (WebCore::ImageLoader::setImage):
        (WebCore::ImageLoader::updateFromElement):
        (WebCore::ImageLoader::notifyFinished):
        * loader/ImageLoader.h:

2011-03-23  Paul Knight  <pknight@apple.com>

        Reviewed by NOBODY (OOPS!).

        <rdar://problem/8622657> TLF: Support for Reading List in Mobile Safari

        Export FrameLoader's iconURL method. Because we don't use the icon database in iOS,
        expose the URL for a page's site icon so Safari can fetch icons itself for
        Reading List.

        * WebCore.exp.in:

2011-03-24  Geoffrey Garen  <ggaren@apple.com>

        Reviewed by Oliver Hunt.

        <rdar://problem/9083011> REGRESSION (Telluride): CRASH beneath JSC::call @ yahoo.com, redfin.com, and others
        
        Merged ToT WebKit r81904.

2011-03-24  Karl Hong  <khong@apple.com>

        Reviewed by NOBODY (OOPS!).

        <rdar://problem/9025581> swN92/9A135 Insertion point goes to the wrong place

        When changing variable name and logic from useWindowsBehavior to moveCaretToBoundary in
        RenderBlock::positionForPointWithInlineChildren, the value is not reversed, it causes
        singleLine and non-singleLine behavior switched. 

        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::positionForPointWithInlineChildren):

2011-03-23  Joseph Pecoraro  <joepeck@webkit.org>

        <rdar://problem/9064519> REGRESSION: MobileStore and iTunesStore should not be user-scalable

        Merged ToT WebKit r81309.

    2011-03-16  Joseph Pecoraro  <joepeck@webkit.org>

            Reviewed by Kenneth Rohde Christiansen.

            Viewport no longer allows an auto value for "user-scalable"
            https://bugs.webkit.org/show_bug.cgi?id=55416

            This restores our behavior before r67376 the default "user-scalable"
            behavior can be defined by a WebKit client if a value was not
            explicitly provided in web content (via the viewport <meta> tag).
            Here, all WebKit ports default to "yes" after computing
            viewport arguments. However, in the future they may consider
            changing the default user-scalable value based on the type
            of the document being viewed, a user preference, or other reasons.

            Covered by existing tests. Should be no changes.

            * dom/ViewportArguments.cpp:
            (WebCore::computeViewportAttributes): be explicit about 0.
            (WebCore::findUserScalableValue): convert to return a float, the instance variable type.
            * dom/ViewportArguments.h:
            (WebCore::ViewportArguments::ViewportArguments): convert the boolean back to a float to
            allow for 3 states. Explicit no, explicit yes, and ValueAuto to be defined by the
            WebKit client.

2011-03-23  Justin Garcia  <justin.garcia@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/9118483> Correct and simplify editability
        <rdar://problem/9135825> HTMLElement::isContentRichlyEditable() should return true for UITextContentView
        
        Remove the "editable" parameter from -[WebView initSimpleHTMLDocumentWithStyle:withFrame:withPreferences:] and friends. 
        Each text widget needs to set up editability in the document differently, and does so on its own. For example, UITextView 
        places contentEditable on the body, whereas UITextField needs to use contentEditable="plaintext-only" on a div inside the body.
        
        Also, rename embeddedEditingMode to selectionChangeCallbacksDisabled, to be more descriptive. It was originally used
        as a fast editability check in HTMLElement::isContentEditable(), but that is no longer necessary now that:
        
        http://trac.webkit.org/changeset/65681
        HTMLElement::isContentEditable() can cause an updateStyleIfNeeded() to happen in the middle of layout
        
        has been fixed.

        * WebCore.exp.in:
        * editing/EditCommand.cpp:
        (WebCore::EditCommand::apply): Allow EditActionDelete as a contentEditable="plaintext-only" command.
        * editing/Editor.cpp:
        (WebCore::Editor::shouldChangeSelection):
        * editing/SelectionController.cpp:
        (WebCore::SelectionController::shouldDeleteSelection):
        (WebCore::SelectionController::shouldChangeSelection):
        * html/HTMLElement.cpp:
        (WebCore::HTMLElement::isContentEditable):
        * page/Frame.cpp:
        (WebCore::Frame::Frame):
        (WebCore::Frame::setSelectionChangeCallbacksDisabled):
        (WebCore::Frame::selectionChangeCallbacksDisabled):
        * page/Frame.h:
        * page/iphone/FrameIPhone.mm:
        (WebCore::Frame::initWithSimpleHTMLDocument):
        (WebCore::Frame::createDefaultFieldEditorDocumentStructure): Use contentEditable="plaintext-only" for to create a field editor,
        UITextField will not support rich text editing.

2011-03-23  David Kilzer  <ddkilzer@apple.com>

        Fix UUIDs for SubresourceLoaderCF.cpp in WebCore Xcode project

        Reviewed by Scott Grant.

        * WebCore.xcodeproj/project.pbxproj: Fix UUID for
        SubresourceLoaderCF.cpp to match open source WebKit.

2011-03-23  Oliver Hunt  <oliver@apple.com>

        Reviewed by Geoff Garen.

        <rdar://problem/9123439> Crash in JSC::JSParser::Scope::declareParameter loading google.com

        The PLATFORM(iOS) codepath was simply disabling the thread safety assertions
        for JSC, rather than ensuring that the commonJSGlobalData was set up to work
        with multiple threads.  This had the effect of making JSC believe it only ever
        needed to mark the current thread, and so would fail to collect live roots on
        the WebThread or Main thread when GC was triggered on the other.
        A crash is more likely now that Reader exists as we're more likely to interact
        with JSC from the main thread, and so more likely to end up with an incorrect
        GC sweep.

        * bindings/js/JSDOMWindowBase.cpp:
        (WebCore::JSDOMWindowBase::commonJSGlobalData):

2011-03-23  Ian Henderson  <ianh@apple.com>

        <rdar://problem/9173975> Safari continuously deletes and recreates tiles

        Reviewed by David Kilzer.

        On K48, the zoomed out tile capacity is slightly too low to hold all
        the tiles it creates.  Increase the capacity so we stop thrashing.

        * platform/iphone/TileCache.mm:
        (WebCore::TileCache::zoomedOutTileCapacity):

2011-03-22  Joseph Pecoraro  <joepeck@webkit.org>

        Rubber-stamped by David Kilzer.

        <rdar://problem/9171645> Add some advanced touch tests to help debug and test events

        Add some manual, interactive tests, which are useful in testing
        and visualizing touches and gestures.

        * manual-tests/iphone/touch/circles-following-touches.html: Added.
        * manual-tests/iphone/touch/resources/script.js: Added.
        * manual-tests/iphone/touch/resources/styles.css: Added.
        * manual-tests/iphone/touch/touch-and-gesture-events.html: Added.

2011-03-22  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Kilzer.

        <rdar://problem/9169823> Switch to HashCountedSet for TouchListenerMap

        Using a HashMap directly required multiple hash lookups to
        both get / remove an entry if one existed, and set a new count
        on the entry. HashCountedSet does the same under the hood and
        always returns a flag for the interesting cases, when a new
        entry has been created or an entry is removed when the count
        becomes zero.

        * dom/DocumentIPhone.cpp:
        (WebCore::Document::addTouchEventListener): simply due to working with a HashCountedSet.
        (WebCore::Document::removeTouchEventListener): simply due to working with a HashCountedSet.
        * dom/DocumentIPhone.h: change TouchMap to a HashCountedSet.

2011-03-22  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Kilzer.

        <rdar://problem/8486543> GC fails when a touch event listener callback closure creates a cycle

        On iOS, when a node gets a touch event listener it is added to a
        TouchListenerMap on the top document. That map was holding a
        reference to the EventTarget node, and would maintain that reference
        even if the JavaScript node (JSNode) was garbage collected.
        Here we store just a weak reference in the map, and remove
        our Node, when its deconstructed.

        * dom/DocumentIPhone.cpp:
        (WebCore::Document::touchEventsChangedTimerFired):
        (WebCore::Document::removeTouchEventListenersInDocument):
        * dom/DocumentIPhone.h: change TouchMap type to hold a weak pointer.
        * dom/Node.cpp:
        (WebCore::Node::~Node): remove the node from the touch map.

2011-03-22  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/8772865> Webkit should use no-copy-cache CFNetwork SPI

        Reviewed by David Kilzer.

        This adds iOS specific changes to use the new didReceiveDataArray callback SPI on
        NSURLConnection. The support for that was added in the merge of r81710 from open ToT WebKit.
        This helps us reduce data copying in two places

        1. CFNetwork doesn't need to coalesce its CFData objects into one before calling the
           didReceiveData callback.
        2. WebCore can now just keep the CFData's in SharedBuffer instead of copying the data we
           received into segments which later get copied into the final buffer location.

        This helps us reduce the total memory allocated on a load of boston.com/bigpicture from
        ~89MB to ~66MB.

        * platform/SharedBuffer.cpp:
        (WebCore::SharedBuffer::createPurgeableBuffer):
        * platform/network/mac/ResourceHandleMac.mm:
        (-[WebCoreResourceHandleAsDelegate connection:didReceiveDataArray:]):

2011-03-22  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/8772865> Webkit should use no-copy-cache CFNetwork SPI

        Merge ToT WebKit r81710.

    2011-03-22  Pratik Solanki  <psolanki@apple.com>

        Reviewed by David Kilzer.

        Implement -connection:didReceiveDataArray: NSURLConnection delegate method
        https://bugs.webkit.org/show_bug.cgi?id=56838

        Add experimental support for the didReceiveDataArray callback on
        NSURLConnection. A RessourceHandleClient indicates its ability to
        handle this callback by returning true from supportsDataArray() method.
        Currently only SubresourceLoader uses this so we get the benefit for
        CSS, JS and image loads. For other clients we call didReceiveData with
        the CFData contents as before.

        * WebCore.xcodeproj/project.pbxproj:
        * loader/ResourceLoader.h:
        * loader/SubresourceLoader.h:
        (WebCore::SubresourceLoader::supportsDataArray):
        * loader/cf/SubresourceLoaderCF.cpp: Added.
        (WebCore::SubresourceLoader::didReceiveDataArray):
        * loader/mac/ResourceLoaderMac.mm:
        (WebCore::ResourceLoader::didReceiveDataArray):
        * platform/SharedBuffer.cpp:
        (WebCore::SharedBuffer::clear):
        (WebCore::SharedBuffer::buffer):
        * platform/SharedBuffer.h:
        * platform/cf/SharedBufferCF.cpp:
        (WebCore::SharedBuffer::append):
        (WebCore::SharedBuffer::copyDataArrayAndClear):
        * platform/network/ResourceHandleClient.h:
        (WebCore::ResourceHandleClient::supportsDataArray):
        (WebCore::ResourceHandleClient::didReceiveDataArray):
        * platform/network/mac/ResourceHandleMac.mm:
        (-[WebCoreResourceHandleAsDelegate connection:didReceiveDataArray:]):

2011-03-22  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/9154356> WebCore/WebKit: Please replace WebThreadCallAPI() with WebThreadRun()

        Reviewed by Scott Grant.

        Replaced WebThreadCallAPI() with WebThreadRun().  Interesting
        changes are commented below.

        * loader/DiskImageCache.cpp: Removed unused header.
        * platform/iphone/CoreMotionManager.mm:
        (-[CoreMotionManager sendAccelerometerData:]):
        (-[CoreMotionManager sendMotionData:withHeading:]):
        * platform/iphone/GeolocationManager.mm:
        (-[GeolocationCoreLocationDelegate sendLocation:]):
        (-[GeolocationCoreLocationDelegate sendError:withString:]):
        * platform/iphone/SharedTimerIPhone.mm:
        (-[WebCorePowerNotifierIPhone didWake]):
        * platform/network/mac/ResourceHandleMac.mm:
        (WebCore::ResourceHandle::start):
        * wak/WAKWindow.mm:
        (-[WAKWindow sendEvent:]):
        (-[WAKWindow sendEvent:contentChange:]):

2011-03-22  Antti Koivisto  <antti@apple.com>

        Reviewed by Dave Carson.

        Retry <rdar://problem/9121719> Crash beneath WebCore::styleForRenderer(), often in loadPendingImages() on nytimes.com

        Speculative fix since I can't repro though I'm pretty sure this is it.

        Make suspending resource loads work in all cases.

        * loader/ResourceLoadScheduler.cpp:
        (WebCore::ResourceLoadScheduler::scheduleLoad):
        (WebCore::ResourceLoadScheduler::servePendingRequests):

2011-03-21  Chris Marrin  <cmarrin@apple.com>

        Reviewed by Dean Jackson.

        <rdar://problem/9090455> WebGL is crashing
        
        There were two problems: First, shader validator was trying to
        translate the shader to OpenGL, which was failing. For iOS
        we just need to validate and use the original shader if
        valid.
        
        Second, WebGL Layer was not having its bounds set on a size
        change. Unlike desktop, where the WebGL Layer and rendering
        context are decoupled, iOS requires the layer to be the
        correct size. 

        * platform/graphics/ANGLEWebKitBridge.cpp: Just validate, don't translate, on iOS
        (WebCore::ANGLEWebKitBridge::validateShaderSource):
        * platform/graphics/GraphicsContext3D.h: Changed iOS specific function to pass width and height
        * platform/graphics/mac/GraphicsContext3DMac.mm:Set bounds of WebGL Layer before renderBufferStorage call
        (WebCore::GraphicsContext3D::setRenderbufferStorageFromDrawable):
        * platform/graphics/opengl/GraphicsContext3DOpenGL.cpp: Use new iOS specific call to pass layer size
        (WebCore::GraphicsContext3D::reshape):

2011-03-21  Scott Grant  <scott.grant@apple.com>

		<rdar://problem/7477464> Sub-TLF: Integrate UIPDFView classes with WebKit

        Reviewed by David Kilzer.

        Ignore client specific files.

        * WebCore.xcodeproj: Added property svn:ignore.

2011-03-18  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by David Carson.

        <rdar://problem/9056749> Raise the CATiledLayer limit to avoid putting canvases in tiled layers

        Bump the tiled layer threshold on iOS from 1024 to 1280,
        so that the canvas tests avoid using tiled layers.

        * platform/graphics/ca/GraphicsLayerCA.cpp:

2011-03-18  Joseph Pecoraro  <joepeck@webkit.org>

        Merged ToT WebKit r81104.

        <rdar://problem/9071398> REGRESSION (Merge1): onload event not triggering properly

    2011-03-14  Joseph Pecoraro  <joepeck@webkit.org>

            Reviewed by Eric Carlson.

            Stalled media elements don't stop delaying the load event
            https://bugs.webkit.org/show_bug.cgi?id=56316

            We should stop delaying the load event when the load has
            stalled naturally, or if we require a user gesture to
            continue the load.

            Test: http/tests/media/video-play-stall-before-meta-data.html

            * html/HTMLMediaElement.cpp:
            (WebCore::HTMLMediaElement::setNetworkState): when suspending, stop delaying.
            (WebCore::HTMLMediaElement::progressEventTimerFired): when stalling, stop delaying.

2011-03-18  Matt Lilek  <mlilek@apple.com>

        Build fix - export __ZN7WebCore6Editor24removeUnchangeableStylesEv.

        * WebCore.exp.in:

2011-03-16  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Kilzer.

        <rdar://problem/8974079> WebDeviceOrientationClient leaks

        * svg/graphics/SVGImage.cpp:
        (WebCore::SVGImage::dataChanged): do not allocate Dummy clients since
        the ownership is not taken in Page's constructor on iOS.

2011-03-14  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Kilzer.

        <rdar://problem/8382049> Extend "autocapitalize" Attribute Values (words, characters, sentences)

        Extend autocapitalize to more values than just "on" and "off". This
        now allows for "words", "characters", and "sentences".

        Test: fast/forms/autocapitalize-attribute.html

          New file encapsulating the small autocapitalize logic
          and strings to share code.

        * WebCore.xcodeproj/project.pbxproj:
        * html/Autocapitalize.cpp: Added.
        (WebCore::valueDefault): use the null string for default.
        (WebCore::valueOn): static string.
        (WebCore::valueOff): static string.
        (WebCore::valueNone): static string.
        (WebCore::valueWords): static string.
        (WebCore::valueSentences): static string.
        (WebCore::valueAllCharacters): static string.
        (WebCore::autocapitalizeTypeForAttributeValue): parse an input string to an autocapitalize type.
        (WebCore::stringForAutocapitalizeType): convert an autocapitalize type to clean string.
        * html/Autocapitalize.h: Added.
        * html/WebAutocapitalize.h: Added. Contains the enum of types.

          Private SPI to access the autocapitalize type directly
          from certain form elements, instead of having to reparse
          the autocapitalize string value.

        * bindings/objc/DOMHTML.mm:
        (-[DOMHTMLInputElement _autocapitalizeType]):
        (-[DOMHTMLTextAreaElement _autocapitalizeType]):
        * bindings/objc/DOMPrivate.h:

          Convert previously boolean "autocapitalize" and
          "setAutocapitalize" functions to AtomicStrings. Also add
          an autocapitalizeType getter.

        * html/HTMLFormControlElement.cpp:
        (WebCore::HTMLFormControlElement::autocapitalizeType):
        (WebCore::HTMLFormControlElement::autocapitalize):
        (WebCore::HTMLFormControlElement::setAutocapitalize):
        * html/HTMLFormControlElement.h:
        * html/HTMLFormElement.cpp:
        (WebCore::HTMLFormElement::autocapitalizeType):
        (WebCore::HTMLFormElement::autocapitalize):
        (WebCore::HTMLFormElement::setAutocapitalize):
        * html/HTMLFormElement.h:
        * html/HTMLFormElement.idl:
        * html/HTMLInputElement.idl:
        * html/HTMLTextAreaElement.idl:

2011-03-17  Antti Koivisto  <antti@apple.com>

        Reviewed by Dave Kilzer.

        <rdar://problem/9121719> Crash beneath WebCore::styleForRenderer(), often in loadPendingImages() on nytimes.com

        Don't invoke synchronous resource load delegates while resource load scheduling is disabled to avoid re-entering style selection
        from a different thread.

        Currently SubresourceLoader constructor (from init()) ends up invoking the delegates. Delay this until
        the load actually starts.

        iOS only fix for now to fix crash in performance test site. ToT fix is along these lines too but
        will require layout tests and stuff.

        Filed https://bugs.webkit.org/show_bug.cgi?id=56647 for that.

        * loader/ResourceLoadScheduler.cpp:
        (WebCore::ResourceLoadScheduler::crossOriginRedirectReceived):
        (WebCore::ResourceLoadScheduler::servePendingRequests):
        * loader/ResourceLoader.cpp:
        (WebCore::ResourceLoader::init):
        * loader/ResourceLoader.h:
        (WebCore::ResourceLoader::startLoading):
        * loader/SubresourceLoader.cpp:
        (WebCore::SubresourceLoader::create):
        (WebCore::SubresourceLoader::startLoading):
        * loader/SubresourceLoader.h:

2011-03-17  Ian Henderson  <ianh@apple.com>

        <rdar://problem/9120042> Sometimes content appears from previous pages

        Reviewed by Joseph Pecoraro.

        This is a workaround, since we have a demo tomorrow.  Whenever we
        switch to zoomed out tiles, move the zoomed in tile host layer behind
        the (newly active) zoomed out tile host layer.  When we zoom in again,
        switch the order so the zoomed in tiles are in front.

        Since we never remove any tiles, there's no flashing.  Instead, the
        newly-created, zoomed out tiles cover the stale zoomed in tiles.  When
        the user pinches to zoom, the stale tiles are removed in
        redrawScaledDocument.

        * platform/iphone/TileCache.mm:
        (WebCore::TileCache::setZoomedOutScale):

2011-03-16  Antti Koivisto  <antti@apple.com>

        Reviewed by Ian Henderson.

        <rdar://problem/9141580> Split various tile cache classes into separate files

        - Moved and renamed the following classes to separate files:
            TileCache -> TileCache.h/.mm
            TileCache::TileGrid -> TileGrid.h/.mm
            TileCache::Tile -> TileGridTile.h/.mm
            @TileLayer -> TileLayer.h/.mm
            TileCache::LayerPool -> TileLayerPool.h/.mm

        - TileIndex class is eliminated and replaced with "typedef IntPoint TileIndex". IntPointHash provides hashing. It also moves:
            TileCache::TileIndex -> TileGrid::TileIndex

        - tileDistance2() moves:
            TileCache::tileDistance2 -> TileGrid::tileDistance2

        - Made TileGridTile hold pointer to owning TileGrid instead of TileCache.

        - Added some functions to TileCache so other classes don't need to be exposed outside the subsystem:
            TileCache::drainLayerPool
            TileCache::setLayerPoolCapacity

        * WebCore.exp.in:
        * WebCore.xcodeproj/project.pbxproj:
        * platform/iphone/TileCache.h:
        (WebCore::TileCache::screenScale):
        (WebCore::TileCache::tileBordersVisible):
        (WebCore::TileCache::tilePaintCountersVisible):
        (WebCore::TileCache::keepsZoomedOutTiles):
        (WebCore::TileCache::zoomedOutScale):
        * platform/iphone/TileCache.mm:
        (WebCore::TileCache::createTiles):
        (WebCore::TileCache::setLayerPoolCapacity):
        (WebCore::TileCache::drainLayerPool):
        * platform/iphone/TileGrid.h: Added.
        (WebCore::TileGrid::create):
        (WebCore::TileGrid::tileCache):
        * platform/iphone/TileGrid.mm: Added.
        (WebCore::TileGrid::TileGrid):
        (WebCore::TileGrid::~TileGrid):
        (WebCore::TileGrid::dropAllTiles):
        (WebCore::TileGrid::dropTilesIntersectingRect):
        (WebCore::TileGrid::dropTilesBetweenRects):
        (WebCore::TileGrid::tileDistance2):
        (WebCore::isFartherAway):
        (WebCore::TileGrid::dropDistantTilesExceedingCapacity):
        (WebCore::TileGrid::addTilesCoveringRect):
        (WebCore::TileGrid::addTileForIndex):
        (WebCore::TileGrid::tileHostLayer):
        (WebCore::TileGrid::bounds):
        (WebCore::TileGrid::tileForIndex):
        (WebCore::TileGrid::tileRectForIndex):
        (WebCore::TileGrid::tileIndexForPoint):
        (WebCore::TileGrid::centerTileGridOrigin):
        (WebCore::TileGrid::tileForPoint):
        (WebCore::TileGrid::tilesCover):
        (WebCore::TileGrid::updateTileOpacity):
        (WebCore::TileGrid::updateTileBorderVisibility):
        (WebCore::TileGrid::tileCount):
        (WebCore::TileGrid::checkDoSingleTileLayout):
        (WebCore::TileGrid::updateHostLayerSize):
        (WebCore::TileGrid::dropInvalidTiles):
        (WebCore::TileGrid::dropTilesOutsideRect):
        (WebCore::TileGrid::invalidateTiles):
        * platform/iphone/TileGridTile.h: Added.
        (WebCore::TileGridTile::create):
        (WebCore::TileGridTile::tileLayer):
        (WebCore::TileGridTile::rect):
        * platform/iphone/TileGridTile.mm: Added.
        (WebCore::TileGridTile::TileGridTile):
        (WebCore::TileGridTile::~TileGridTile):
        (WebCore::TileGridTile::invalidateRect):
        (WebCore::TileGridTile::setRect):
        (WebCore::TileGridTile::showBorder):
        * platform/iphone/TileLayer.h: Added.
        * platform/iphone/TileLayer.mm: Added.
        (-[TileHostLayer initWithTileGrid:WebCore::]):
        (-[TileHostLayer actionForKey:]):
        (-[TileHostLayer renderInContext:]):
        (-[TileLayer display]):
        (-[TileLayer drawInContext:]):
        (-[TileLayer actionForKey:]):
        (-[TileLayer setTileGrid:WebCore::]):
        * platform/iphone/TileLayerPool.h: Added.
        (WebCore::TileLayerPool::capacity):
        (WebCore::TileLayerPool::canReuseLayerWithSize):
        * platform/iphone/TileLayerPool.mm: Added.
        (WebCore::TileLayerPool::TileLayerPool):
        (WebCore::TileLayerPool::sharedPool):
        (WebCore::TileLayerPool::bytesBackingLayerWithPixelSize):
        (WebCore::TileLayerPool::listOfLayersWithSize):
        (WebCore::TileLayerPool::addLayer):
        (WebCore::TileLayerPool::removeLayerWithSize):
        (WebCore::TileLayerPool::setCapacity):
        (WebCore::TileLayerPool::prune):
        (WebCore::TileLayerPool::drain):

2011-03-16  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Pratik Solanki.

        <rdar://problem/8861470> Scrolling stalls for seconds at a time on MacBook Air technical specs page

        Avoid taking the WebThreadLock on the main thread after scrolling
        in order to update fixed position layers. Instead, we call
        setCustomFixedPositionLayoutRect() on the web thread.
        
        This causes a slight behavior change in WebCore, where the first
        layout of a page will happen before m_useCustomFixedPositionLayoutRect
        gets set. This means that fixed elements won't get compositing layers,
        and we won't even enter compositing mode (since we do so usually via
        style changes).
        
        Fix this by eagerly entering compositing mode if setCustomFixedPositionedObjectsNeedLayout()
        tells us that we have any fixed elements.
        
        Removed the call to setCustomFixedPositionedObjectsNeedLayout() in
        setCustomFixedPositionLayoutRect(), because visibleContentsResized()
        calls it anyway.

        * page/FrameView.cpp:
        (WebCore::FrameView::visibleContentsResized):
        * rendering/RenderView.cpp:
        (WebCore::RenderView::setCustomFixedPositionedObjectsNeedLayout):
        * rendering/RenderView.h:

2011-03-16  Antti Koivisto  <antti@apple.com>

        Merge r80686 from the open source ToT.

    2011-03-09  Mihai Parparita  <mihaip@chromium.org>

            Reviewed by Tony Gentilcore.

            REGRESSION (r74807): memory corruption after CachedResourceLoader refactoring
            https://bugs.webkit.org/show_bug.cgi?id=53045

            Copy the URL out of the CachedResource that is being revalidated, so
            that we can still use it (in m_validatedURLs) after removing the
            resource from the memory cache, which may delete it.

            No new tests, since I was not able to trigger this locally (in a layout
            test or otherwise).

            * loader/cache/CachedResourceLoader.cpp:
            (WebCore::CachedResourceLoader::revalidateResource):

        * loader/cache/CachedResourceLoader.cpp:
        (WebCore::CachedResourceLoader::revalidateResource):

2011-03-15  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/9125404> PlatformLayer typedefs have several issues

        Reviewed by Simon Fraser.

        Merged ToT WebKit r81156, r81172, r81242.

        * loader/EmptyClients.h:
        (WebCore::EmptyChromeClient::addOrUpdateFixedPositionLayer):
        Changed void* argument type to PlatformLayer*.
        (WebCore::EmptyChromeClient::removeFixedPositionLayer): Ditto.
        * page/ChromeClient.h: Include GraphicsLayer.h.
        (WebCore::ChromeClient::addOrUpdateFixedPositionLayer):
        Changed void* argument type to PlatformLayer*.
        (WebCore::ChromeClient::removeFixedPositionLayer): Ditto.
        * platform/graphics/GraphicsLayer.h: Moved PlatformLayer typedef
        and class declarations from here...
        * platform/graphics/GraphicsLayerClient.h: ...to here for iOS.
        Needed because of the platformLayerChanged() method defined only
        for iOS.
        (WebCore::GraphicsLayerClient::platformLayerChanged): Changed
        argument types from void* to PlatformLayer*.
        * platform/mac/WebCoreSystemInterface.h: Replaced typedef void*
        CALayer with class CALayer for C++.
        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::platformLayerChanged): Changed
        argument types from void* to PlatformLayer*.
        * rendering/RenderLayerBacking.h:
        (WebCore::RenderLayerBacking::platformLayerChanged): Ditto.
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::fixedPositionPlatformLayerChanged): Ditto.
        * rendering/RenderLayerCompositor.h:
        (WebCore::RenderLayerCompositor::fixedPositionPlatformLayerChanged): Ditto.
        (WebCore::RenderLayerCompositor::platformLayerChanged): Ditto.

    2011-03-16  David Kilzer  <ddkilzer@apple.com>

        Minor clean-up after r81156, r81172

        Follow-up for:
        <http://webkit.org/b/56381> Objective-C classes should be typedef-ed as structs (not void*) in C++

        * platform/graphics/GraphicsLayer.h: Removed unused @class
        WebLayer declaration.
        * platform/graphics/ca/PlatformCAAnimation.h: Changed typedef
        struct CAPropertyAnimation to class declaration.

    2011-03-15  Anders Carlsson  <andersca@apple.com>

        Fix clang build.

        * platform/graphics/GraphicsContext3D.h:
        * platform/graphics/GraphicsLayer.h:

    2011-03-15  David Kilzer  <ddkilzer@apple.com>

        <http://webkit.org/b/56381> Objective-C classes should be typedef-ed as structs (not void*) in C++

        Reviewed by Simon Fraser.

        Typedef-ing Objective-C classes as void* for pure C++ makes it
        easier for bugs to creep in because compilers can't do any type
        checking for void pointers.

        * platform/graphics/GraphicsContext3D.h: Changed typedef
        declarations for CALayer and WebGLLayer from void* to structs.
        (WebCore::GraphicsContext3D::platformLayer): Changed
        static_cast<CALayer*> to reinterpret_cast<CALayer*> now that
        CALayer and WebGLLayer are not void pointers.
        * platform/graphics/GraphicsLayer.h: Changed typedef declaration
        for PlatformLayer from void* to struct CALayer.
        * platform/graphics/ca/PlatformCAAnimation.h: Changed typedef
        declaration for CAPropertyAnimation from void* to a struct.
        Extracted typdef for PlatformAnimationRef.

2011-03-15  Joseph Pecoraro  <joepeck@webkit.org>

        Merge ToT WebKit r80718.

    2011-03-10  Pavel Feldman  <pfeldman@chromium.org>

            Not reviewed: rolling out r80478 and its follow ups for breaking
            inspector and engadget.com.
            https://bugs.webkit.org/show_bug.cgi?id=49401

            * dom/Document.cpp:
            (WebCore::Document::Document):
            (WebCore::performTask):
            (WebCore::Document::postTask):
            * dom/Document.h:
            * loader/FrameLoader.cpp:
            (WebCore::FrameLoader::setDefersLoading):
            * manual-tests/database-callback-deferred.html: Removed.
            * page/PageGroupLoadDeferrer.cpp:
            (WebCore::PageGroupLoadDeferrer::PageGroupLoadDeferrer):
            (WebCore::PageGroupLoadDeferrer::~PageGroupLoadDeferrer):

2011-03-15  Justin Garcia  <justin.garcia@apple.com>

        Reviewed by David Carson.

        <rdar://problem/9138034> Touching an empty text field twice makes the cursor disappear and deselects the field in Telluride9A161

        Merge fix. Bring back the iOS-only "return VisiblePosition(lastCandidate)" to endOfDocument.
        Added a FIXME to bring this code to Open Source:
        
        https://bugs.webkit.org/show_bug.cgi?id=56437

        * editing/visible_units.cpp:
        (WebCore::startOfDocument):
        (WebCore::endOfDocument):

2011-03-15  Simon Fraser  <simon.fraser@apple.com>

    Rubber-stamped by David Kilzer.

    <rdar://problem/9122954> REGRESSION (r76474): ASSERTION FAILED: !(size % 2) saving history

    Merged TOT WebKit r80952. This fixes an assertion when saving history in MobileSafari.
    
    2011-03-12  Darin Adler  <darin@apple.com>
    
            Reviewed by Dan Bernstein.
    
            REGRESSION (r76474): IntegerArray hash hashes only 1/4 of the array
            https://bugs.webkit.org/show_bug.cgi?id=56258
    
            No tests because the wrong hashing is mostly harmless. The only symptom
            we have seen is an occasional assertion in debug builds about the size
            not being a multiple of two. But a worse hash is worse for performance too.
    
            * platform/cf/BinaryPropertyList.cpp:
            (WebCore::IntegerArrayHash::hash): Pass in the size in bytes rather
            than the number of array entries.

2011-03-15  Simon Fraser  <simon.fraser@apple.com>

        Let Xcode have its way with the project file.

        * WebCore.xcodeproj/project.pbxproj:

2011-03-15  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Ian Henderson.

        <rdar://problem/9098318> When Whippet is on, turn off ShadowBlur shadows

        Export WKShouldAccelerateDrawing and GraphicsContext::setIsAcceleratedContext(bool).

        * WebCore.exp.in:

2011-03-15  Simon Fraser  <simon.fraser@apple.com>

    Rubber-stamped by David Kilzer.

    <rdar://problem/9098318> When Whippet is on, turn off ShadowBlur shadows

    Merged TOT WebKit r81171. Some additional work will be required to
    finish the fix on iOS.

    2011-03-15  Simon Fraser  <simon.fraser@apple.com>
    
            Fix Lion build after r81161.
            
            Pass the PlatformCALayer down into drawLayerContents()
            so we can use its acceleratesDrawing() method.
    
            * platform/graphics/mac/WebLayer.h:
            * platform/graphics/mac/WebLayer.mm:
            (drawLayerContents):
            (-[WebLayer drawInContext:]):
            * platform/graphics/mac/WebTiledLayer.mm:
            (-[WebTiledLayer drawInContext:]):
    
2011-03-15  Simon Fraser  <simon.fraser@apple.com>

    Rubber-stamped by David Kilzer.

    <rdar://problem/9098318> When Whippet is on, turn off ShadowBlur shadows

    Merged TOT WebKit r81161. Some additional work will be required to
    finish the fix on iOS.

    2011-03-15  Simon Fraser  <simon.fraser@apple.com>
    
            Reviewed by Dan Bernstein.
    
            Disable ShadowBlur shadow drawing in accelerated contexts
            https://bugs.webkit.org/show_bug.cgi?id=56392
    
            When drawing into a graphics context that is accelerated, don't use
            ShadowBlur, because it may be slower.
            
            * platform/graphics/GraphicsContext.h:
            * platform/graphics/cg/GraphicsContextCG.cpp:
            (WebCore::GraphicsContext::fillRect):
            (WebCore::GraphicsContext::fillRoundedRect):
            (WebCore::GraphicsContext::fillRectWithRoundedHole):
            (WebCore::GraphicsContext::setIsCALayerContext):
            (WebCore::GraphicsContext::isCALayerContext):
            (WebCore::GraphicsContext::setIsAcceleratedContext):
            (WebCore::GraphicsContext::isAcceleratedContext):
            * platform/graphics/cg/GraphicsContextPlatformPrivateCG.h:
            (WebCore::GraphicsContextPlatformPrivate::GraphicsContextPlatformPrivate):
            * platform/graphics/mac/WebLayer.mm:
            (drawLayerContents):
    

2011-03-14  Karl Hong  <khong@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/8939104> Mismatch selected and highlighted regions

        The problem of this bug is that if a selection spans multiple columns of text, as it does in iBooks,
        if you triple tap to select a paragraph that spans multiple pages, the second rect, which is a union 
        of all of the interior lines, is too large. It makes it look like both pages are selected.

        The patch breaks interior rect by column, so UIKit will draw multiple rects for each column.

        * dom/Range.cpp:
        (WebCore::Range::collectSelectionRects):

2011-03-14  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by Eric Carlson.

        <rdar://problem/9071398> REGRESSION (Merge1): onload event not triggering properly

        Media elements, such as <audio> and <video>, can delay the load event
        from firing. Normally media elements start delaying the the load event
        when the neworkState -> NETWORK_LOADING, and stop delaying the load event
        in an error case or when some data has been loaded (readyState ->
        HAVE_CURRENT_DATA). This is never reached on iOS, because we don't start
        downloading data unless there is user-interaction. We do however get
        notifications of the MediaPlayer advancing its state to Loading and
        Idle. We use this as an indicator on iOS to stop delaying the load event.

        An open source patch later on stops delaying in the suspend and stalled
        states, but this handles the iOS specific autoplay case.

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::setNetworkState): stop delaying the load event when autoplaying.

2011-03-14  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/9125982> REGRESSION (9A158): Random crashes in WebCore: WebCore::HTMLTreeBuilder::processCharacterBuffer

        Test: platform/iphone-simulator/fast/text/data-detectors/phone-number-parse-setInnerHTMLHierarchy.html

        * html/parser/HTMLTreeBuilder.cpp:
        (WebCore::disallowTelephoneNumberParsing): group the conditions an element
        has to pass to enable phone number parsing in this function
        (WebCore::shouldParseTelephoneNumbersInNode): correctly handle non-nodes
        in an element's parents (this happens when inserting document fragments
        using innerHTML)
        (WebCore::HTMLTreeBuilder::processCharacterBuffer):

2011-03-13  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Dacvid Carson.

        <rdar://problem/9124248> CrashTracer: [USER] 1 crash in DumpRenderTree at WebCore: WebCore::toElement + 110
        
        The phone number parsing code interacted poorly with recent parser changes, which
        trigger when setting innerHTML. In that situation, HTMLTreeBuilder's currentNode()
        is a document fragment, not an element, so currentElement() would assert.
        
        Fix by allowing telephone parsing for document fragments specifically.

        Tests: platform/iphone-simulator/fast/text/data-detectors/phone-number-parse-setInnerHTML.html
               platform/iphone-simulator/fast/text/data-detectors/phone-number-parse-setInnerText.html

        * html/parser/HTMLTreeBuilder.cpp:
        (WebCore::shouldParseTelephoneNumbersInElement):
        (WebCore::HTMLTreeBuilder::processCharacterBuffer):

2011-03-11  Simon Fraser  <simon.fraser@apple.com>

    Rubber-stamped by Joe Pecoraro.

    <rdar://problem/9124248> CrashTracer: [USER] 1 crash in DumpRenderTree at WebCore: WebCore::toElement + 110

    Merged TOT WebKit r80672.

    2011-03-09  Andy Estes  <aestes@apple.com>
    
            Reviewed by Adam Barth.
    
            Bad cast in HTMLTreeBuilder::processStartTag
            https://bugs.webkit.org/show_bug.cgi?id=55955
    
            Test: fast/parser/self-closing-foreign-content.html
    
            When the parser encounters an svg or mathml root element, it places the
            insertion mode into InForeignContentMode. However, if the root element
            is self-closing (e.g. <svg />) then the element is never placed on the
            open elements stack. This leaves the parser in an inconsistent state
            where it is in InForeignContentMode but no foreign content is in the
            open element stack.
    
            * html/parser/HTMLTreeBuilder.cpp:
            (WebCore::HTMLTreeBuilder::processStartTagForInBody): If a self-closing
            foreign element is inserted into the tree, do not set the insertion
            mode to InForeignContentMode.
    
2011-03-11  Simon Fraser  <simon.fraser@apple.com>

    Rubber-stamped by Joe Pecoraro.

    <rdar://problem/9124248> CrashTracer: [USER] 1 crash in DumpRenderTree at WebCore: WebCore::toElement + 110

    Merged TOT WebKit r80668.

    2011-03-09  Andy Estes  <aestes@apple.com>
    
            Reviewed by Adam Barth.
    
            REGRESSION (r80320): Assertion failure when processing mis-nested foreign content.
            https://bugs.webkit.org/show_bug.cgi?id=55982
    
            Test: fast/parser/fragment-foreign-content-misnested.html
            
            It is a parse error to encounter certain start tags while the parser's
            insertion mode is InForeignContentMode (e.g. <br>). In these cases, we
            are to pop open elements off the HTMLElementStack until a foreign
            content scope marker is encountered. Before the change in r80320 to not
            insert a fake HTML element during fragment parsing, said fake HTML
            element counted as a foreign content scope marker.
            
            With r80320, no fake HTML element is inserted and the stack is popped
            until empty in cases where no other element claims to be a foreign
            content scope marker. Fix this by treating the DocumentFragment as a
            foreign content scope marker.
    
            * html/parser/HTMLElementStack.cpp:
            (WebCore::HTMLNames::isForeignContentScopeMarker): Take a
            ContainerNode* instead of a Element*.
            (WebCore::HTMLElementStack::popUntilForeignContentScopeMarker): Pass
            topNode() to isForeignContentScopeMarker() instead of top().
    
2011-03-12  Cameron Zwarich  <zwarich@apple.com>

        <rdar://problem/9125707> SerializedScriptValue code has a lot of problems on ARM

        Reviewed by Oliver Hunt.

        Merge 80948 from Open Source:

    2011-03-12  Cameron Zwarich  <zwarich@apple.com>

            Reviewed by Oliver Hunt.

            WebCore fails to build with Clang on ARM
            https://bugs.webkit.org/show_bug.cgi?id=56257

            Add an explicit instantiation of writeLittleEndian for uint8_t and move it to
            namespace scope, since explicit specializations are not allowed at class scope.

            * bindings/js/SerializedScriptValue.cpp:
            (WebCore::writeLittleEndian):

        * bindings/js/SerializedScriptValue.cpp:
        (WebCore::writeLittleEndian):

2011-03-11  Cameron Zwarich  <zwarich@apple.com>

        <rdar://problem/8622141> iOS WebKit should build with Clang

        Rubber-stamped by David Carson.

        * generate-export-file: For whatever reason, Clang doesn't like using /dev/stdin,
        but only when running this script from xcodebuild. Changing it to the plain '-'
        option (the GCC / Clang option for using stdin) fixes this problem.

2011-03-11  Cameron Zwarich  <zwarich@apple.com>

        <rdar://problem/8622141> iOS WebKit should build with Clang

        Reviewed by Joe Pecoraro.

        Fix some warnings about missing parens around logical operators with confusing
        precedence.

        * css/CSSParser.cpp:
        (WebCore::CSSParser::parseValue):
        * dom/Element.cpp:
        (WebCore::Element::implicitVisibility):
        (WebCore::CheckForVisibilityChangeOnRecalcStyle::~CheckForVisibilityChangeOnRecalcStyle):
        * editing/ReplaceSelectionCommand.cpp:
        (WebCore::ReplaceSelectionCommand::doApply):

2011-03-11  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/9122804> Add a pref to allow images in CFURL disk cache

        Reviewed by David Carson.

        We excluded images from the CFURL cache in <rdar://8611803> (and related bugs). CFNetwork is
        adding desktop disk caching behavior in Telluride and would want a way to add images back
        into the cache for performance measurements - <rdar://problem/8710786>.

        * loader/mac/ResourceLoaderMac.mm:
        (WebCore::allowImagesInCFURLDiskCache):
        (WebCore::ResourceLoader::willCacheResponse):

2011-03-11  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by David Kilzer, Joe Pecoraro.

        <rdar://problem/9070390> ASSERT when loading http://ie.microsoft.com/testdrive/Performance/SpeedReading/Default.html
        
        The merge fumbled the parameters to platformLayerChanged(), passing
        a pointer to a PlatformCALayer, rather than a pointer to a CALayer,
        which confused the fixed-position code.

        Test: platform/iphone-simulator/iphone/fixed/fixpos-canvas-assertion.html

        * platform/graphics/ca/GraphicsLayerCA.cpp:
        (WebCore::GraphicsLayerCA::ensureStructuralLayer):
        (WebCore::GraphicsLayerCA::swapFromOrToTiledLayer):

2011-03-11  Dean Jackson  <dino@apple.com>

        Reviewed by David Carson.

        <rdar://problem/7648874> Relax the gesture event origin restriction on video.webkitEnterFullScreen()

        Merge ToT r80873, then use the public setting for
        user gestures to set restrictions.

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::HTMLMediaElement):

    2011-03-11  Dean Jackson  <dino@apple.com>

            Reviewed by Simon Fraser.

            https://bugs.webkit.org/show_bug.cgi?id=56205
            m_restrictions needs to allow multiple values (a bitfield)

            HTMLMediaElement::m_restrictions needs to hold multiple values, so
            change BehaviorRestrictions to an unsigned typedef and rename the
            existing enum BehaviorRestrictionFlags.

            * html/HTMLMediaElement.h:
            (WebCore::HTMLMediaElement::setBehaviorRestrictions):

2011-03-11  Dean Jackson  <dino@apple.com>

        Reverting previous commit. Has a build error that will require
        a fix on TOT.

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::HTMLMediaElement):

2011-03-11  Dean Jackson  <dino@apple.com>

        Reviewed by David Carson.

        <rdar://problem/7648874> Relax the gesture event origin restriction on video.webkitEnterFullScreen()

        Implement the PEP side of this. The only change is that we now
        examine the public setting for user gestures and apply that to
        the fullscreen restriction.

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::HTMLMediaElement):

2011-02-28  Thomas Deniau  <deniau@apple.com>

        Reviewed by David Kilzer and Simon Fraser.

        <rdar://problem/8909578> Reintegrate iOS telephone parsing with new HTML5 parser

        Tests: platform/iphone-simulator/fast/text/data-detectors/phone-disabled.html
               platform/iphone-simulator/fast/text/data-detectors/phone.html

        * html/parser/HTMLTreeBuilder.cpp:
        (WebCore::HTMLTreeBuilder::insertPhoneNumberLink): added
        (WebCore::HTMLTreeBuilder::linkifyPhoneNumbers): added
        (WebCore::HTMLTreeBuilder::processCharacterBuffer): linkify phone numbers in new
        text nodes if appropriate.
        * html/parser/HTMLTreeBuilder.h:

2011-03-10  Justin Garcia  <justin.garcia@apple.com>

        <rdar://problem/8909413> Sub-TLF: add low-confidence phrase alternatives to callout
        <rdar://problem/9013239> Sub-TLF: extend UITextInput protocol to support setting dictation alternatives
        <rdar://problem/9007855> Sub-TLF: Create an internal representation for low-confidence phrases and their alternatives
        <rdar://problem/8246003> Sub-TLF: Integrate dictation API with text input
        <rdar://problem/9056539> Use -didRecognizeSpeechPhrases: instead of the deprecated -didRecognizespeech:
        
        Reviewed by Joseph Pecoraro, David Kilzer, and Enrica Cassuci.
        
        DictateCommand now accepts a set of phrases, where a phrase is one or more interpretations. Phrases with multiple
        interpretations get a DocumentMarker that stores their alternatives, which can be retrieved later by UIKit.

        * WebCore.exp.in:
        * dom/DocumentMarker.h:
        * dom/DocumentMarkerController.cpp:
        (WebCore::DocumentMarkerController::addMarker):
        (WebCore::DocumentMarkerController::addDictationMarker):
        * dom/DocumentMarkerController.h:
        * editing/Editor.cpp:
        (WebCore::Editor::dictate):
        * editing/Editor.h:
        * editing/iphone/DictateCommand.cpp:
        (WebCore::DictateCommand::DictateCommand):
        (WebCore::DictateCommand::doApply):
        * editing/iphone/DictateCommand.h:
        (WebCore::DictateCommand::create):

2011-03-10  Justin Garcia  <justin.garcia@apple.com>

        <rdar://problem/9115338> UITextView editable (default) does not allow editing
        
        Reviewed by David Kilzer.
        
        This Open Source change:
        
        http://trac.webkit.org/changeset/79953
        
        eliminated Frame::isContentEditable(). Editability has been simplified to be configurable only through 
        designMode and the contentEditable attribute.
        
        But iOS was relying on the Frame::isContentEditable() check because UITextView and friends actually 
        initialize their Document incorrectly with regard to editability. They add contentEditable="true" to 
        the document, but then remove it in -updateWebViewObjects:. They correctly change contentEditable on the body
        element in -setEditable:, but they do not call setEditable: at initialization time.
        
        This is a simple workaround until the following changes can be made:
        
        Implement editability changes using only -[WebView setEditable:] (which uses designMode)
        Eliminate the places where text widgets modify the contentEditable attribute, it's unnecessary if 
        they correctly use -[WebView setEditable:].
        embeddedEditingMode() can live on, but only as a way to optionally disable editing callbacks on iOS. 
        It can afterwords be re-named for clarity.
        
        This tracks those changes: <rdar://problem/9118483> Correct and simplify UITextView's handling of editability

        * html/HTMLElement.cpp:
        (WebCore::HTMLElement::isContentEditable):

2011-03-10  Ian Henderson  <ianh@apple.com>

        <rdar://problem/9116832> Page stays fuzzy after first zoom

        Reviewed by David Kilzer.

        Update the zoomed in tile host layer's frame immediately after its
        creation.

        * platform/iphone/TileCache.mm:
        (WebCore::TileCache::setZoomedOutScale):

2011-03-10  Ian Henderson  <ianh@apple.com>

        <rdar://problem/9115229> While panning, main thread spends 25% of its time blocked while collecting backing stores

        Reviewed by Joseph Pecoraro.

        CA will destroy IOSurface backing stores for layers unassociated with
        a window after a short delay to avoid excessive memory usage (since
        IOSurfaces aren't purgeable).  This patch reuses layers in LIFO rather
        than FIFO order, so we have a better chance of getting a layer with an
        intact backing IOSurface.  In practice, we create about a third of the
        IOSurfaces as before while scrolling down a large page.

        Also, change the name of LayerQueue to LayerList to reflect its more
        general purpose.

        * platform/iphone/TileCache.h:
        * platform/iphone/TileCache.mm:
        (WebCore::TileCache::LayerPool::listOfLayersWithSize):
        (WebCore::TileCache::LayerPool::addLayer):
        (WebCore::TileCache::LayerPool::removeLayerWithSize):
        (WebCore::TileCache::LayerPool::prune):
        (WebCore::TileCache::LayerPool::drain):

2011-03-10  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/9116368> REGRESSION (Telluride9A156): Vertical text broken (glyphs offsets are wrong)

        Merged TOT WebKit r80740.

    2011-03-10  David Hyatt  <hyatt@apple.com>

        Reviewed by Dan Bernstein.

        https://bugs.webkit.org/show_bug.cgi?id=56129, vertical text broken on Lion and Leopard.

        Add Snow Leopard ifdefs for the scaling by point size and then the division by unitsPerEm to the
        translationsTransform applied to the results from CTFontGetVerticalTranslationsForGlyphs, since
        this is done already on Lion and Leopard.

        * platform/graphics/mac/FontMac.mm:
        (WebCore::showGlyphsWithAdvances):

2011-03-10  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/9111390> ASSERT_NOT_REACHED() in WebCore::mapHTTPPipeliningPriorityToResourceLoadPriority (priority=3) at ResourceRequestCFNet.h:54

        Merged ToT WebKit r80734.

    2011-03-10  Pratik Solanki  <psolanki@apple.com>

        Reviewed by Alexey Proskuryakov.

        ASSERT_NOT_REACHED triggered in WebCore::mapHTTPPipeliningPriorityToResourceLoadPriority
        https://bugs.webkit.org/show_bug.cgi?id=56075

        Map priority value 3, which means no priority, to ResourceLoadPriorityUnresolved.

        * platform/network/cf/ResourceRequestCFNet.h:
        (WebCore::mapHTTPPipeliningPriorityToResourceLoadPriority):
        (WebCore::mapResourceLoadPriorityToHTTPPipeliningPriority):

2011-03-09  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by Ian Henderson.

        <rdar://problem/9110600> Simulator Fails to Launch after Symlinking Development WebKit

        Follow-up fix. Move all iOS specific Localizable.strings from
        WebKit to WebCore as that is the preferred place for strings.
        This moves 3 strings: "Delete (Undo action name)",
        "Dictate (Undo action name)", and "%d Items".

        * English.lproj/Localizable.strings: add strings that previously only existed in WebKit.

2011-03-09  Ian Henderson  <ianh@apple.com>

        <rdar://problem/9111592> New WebCore ASSERTion failure when I create a new note

        Reviewed by David Carson.

        TileGrid is managed using an OwnPtr, so it shouldn't be ref counted.

        * platform/iphone/TileCache.h:

2011-03-09  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Kilzer.

        <rdar://problem/9110600> Simulator Fails to Launch after Symlinking Development WebKit

        Comment out an ASSERT that is not valid on iOS due to
        pre-initialization of strings on a dispatch queue.

        * platform/mac/LocalizedStringsMac.mm:
        (WebCore::localizedString):

2011-03-09  Ian Henderson  <ianh@apple.com>

        <rdar://problem/9056744> We need an internal setting to turn accelerated <canvas> on and off

        Reviewed by David Carson.

        If accelerated drawing is turned off, disable accelerated <canvas> as
        well.

        * platform/graphics/cg/ImageBufferCG.cpp:
        (WebCore::ImageBuffer::ImageBuffer):

2011-03-07  Ian Henderson  <ianh@apple.com>

        <rdar://problem/9044835> Keep zoomed out tiles around

        Reviewed by Joseph Pecoraro.

        Move all the TileGrid methods before the TileCache methods in
        TileCache.mm.

        * platform/iphone/TileCache.mm:
        (WebCore::TileCache::TileGrid::tileCount):
        (WebCore::TileCache::TileGrid::updateHostLayerSize):
        (WebCore::TileCache::TileGrid::dropInvalidTiles):
        (WebCore::TileCache::TileGrid::dropTilesOutsideRect):
        (WebCore::TileCache::TileGrid::invalidateTiles):
        (WebCore::TileCache::TileCache):
        (WebCore::TileCache::~TileCache):
        (WebCore::TileCache::visibleRectInGrid):
        (WebCore::TileCache::setScreenScale):
        (WebCore::TileCache::tilesOpaque):
        (WebCore::TileCache::setTilesOpaque):
        (WebCore::TileCache::adjustForPageBounds):
        (WebCore::TileCache::invalidateTiles):

2011-03-07  Ian Henderson  <ianh@apple.com>

        <rdar://problem/9044835> Keep zoomed out tiles around

        Reviewed by Antti Koivisto.

        After zooming in, we just throw out tiles from the old zoom scale.
        This patch adds a new "TileGrid" class so we can have two tile grids:
        one for the zoomed out tiles and one for any tiles created while
        zoomed in.

        The tile grid provides an interface for a uniform grid of tiles.  It
        supports simple add, drop and lookup operations -- the more complex
        logic remains in tile cache, as some operations must touch both tile
        grids.

        Once Safari calls "setKeepsZoomedOutTiles" (through UIWebTiledView),
        we start keeping separate grids for zoomed out and zoomed in tiles.
        The "zoomed out" tile grid is active whenever its scale is 1 or if we
        are in a pinch gesture.
        - While zoomed in, tiles are created and destroyed normally, according
          to the computed keepRect and coverRect.  To redraw at a new zoom
          level, UIKit calls removeForegroundTiles to clear just tiles in the
          zoomed in layer.
        - While zoomed out, tiles are created normally, but persist longer
          than zoomed in tiles.  We limit the maximum number of zoomed out
          tiles by their size in memory, dropping tiles with greater distance
          from the visible rect first.  Requests to drop zoomed out tiles
          outside any particular rectangle are ignored, but tiles invalidated
          outside the keep rect are dropped instead of being redrawn.

        This patch modifies TileCache.mm in a diff-friendly way.  The next
        patch will put the TileGrid method implementations above the TileCache
        methods in the .mm file.

        * platform/iphone/TileCache.h:
        Rearrange TileCache.h so TileGrid can use the TileMap typedef.
        (WebCore::TileCache::keepsZoomedOutTiles):
        (WebCore::TileCache::zoomedOutScale):
        (WebCore::TileCache::Tile::create):
        (WebCore::TileCache::TileIndexHash::hash):
        (WebCore::TileCache::TileIndexHash::equal):
        (WebCore::TileCache::TileIndexHashTraits::emptyValue):
        (WebCore::TileCache::TileIndexHashTraits::constructDeletedValue):
        (WebCore::TileCache::TileIndexHashTraits::isDeletedValue):
        (WebCore::TileCache::TileGrid::create):
        * platform/iphone/TileCache.mm:
        (WebCore::TileCache::Tile::Tile):
        (WebCore::TileCache::TileGrid::TileGrid):
        (WebCore::TileCache::TileGrid::dropAllTiles):
        (WebCore::TileCache::TileGrid::dropTilesIntersectingRect):
        (WebCore::TileCache::TileGrid::dropTilesBetweenRects):
        This method is included so we can drop dirty tiles outside of a
        specific "keep" rectangle.  It drops all tiles that intersect the
        first rect but not the second.
        (WebCore::isFartherAway):
        Helper function for sorting zoomed out tiles by distance from the
        visible rect.
        (WebCore::TileCache::TileGrid::dropDistantTilesExceedingCapacity):
        Remove tiles from the grid until the combined memory use is within the
        given capacity.  Tiles are removed in order of distance from the given
        visible rect.
        (WebCore::TileCache::TileGrid::addTilesCoveringRect):
        (WebCore::TileCache::TileGrid::addTileForIndex):
        (WebCore::TileCache::TileCache):
        Only create the zoomed out tile grid at the start.  The zoomed in grid
        will only be created if keepsZoomedOutTiles is true and we zoom in.
        (WebCore::TileCache::TileGrid::tileHostLayer):
        (WebCore::TileCache::TileGrid::bounds):
        (WebCore::TileCache::visibleRectInGrid):
        This method lives in TileCache instead of TileGrid because it depends
        on m_window's visible rect, which a TileGrid shouldn't know about.
        (WebCore::TileCache::TileGrid::tileCount):
        (WebCore::TileCache::setTilesOpaque):
        (WebCore::TileCache::TileGrid::tileForIndex):
        (WebCore::TileCache::TileGrid::tileRectForIndex):
        (WebCore::TileCache::TileGrid::tileIndexForPoint):
        (WebCore::TileCache::TileGrid::centerTileGridOrigin):
        (WebCore::TileCache::TileGrid::tileForPoint):
        (WebCore::TileCache::TileGrid::tilesCover):
        (WebCore::TileCache::TileGrid::updateTileOpacity):
        (WebCore::TileCache::TileGrid::updateTileBorderVisibility):
        When tile opacity or border visibility changes, we need to update our
        tiles with the new values.
        (WebCore::TileCache::adjustForPageBounds):
        (WebCore::TileCache::TileGrid::checkDoSingleTileLayout):
        (WebCore::TileCache::doLayoutTiles):
        (WebCore::TileCache::hostLayerSizeChanged):
        (WebCore::TileCache::TileGrid::updateHostLayerSize):
        (WebCore::TileCache::setKeepsZoomedOutTiles):
        (WebCore::TileCache::setZoomedOutScale):
        Called by UIKit when rescaling after updating the scroll view zoom
        scale.  Adds a new hosting layer for zoomed-in tiles if necessary.
        (WebCore::TileCache::keepingTilesInActiveGrid):
        Answers the question, should the active grid hold on to its tiles?
        (WebCore::TileCache::layoutTilesNow):
        (WebCore::TileCache::layoutTilesNowForRect):
        (WebCore::TileCache::removeAllNonVisibleTiles):
        This method is called relatively often.  We can't allow it to clear
        our precious zoomed out tiles, even if they're not visible.
        (WebCore::TileCache::removeAllTiles):
        (WebCore::TileCache::removeForegroundTiles):
        After zooming, we want to remove the zoomed in tiles and recreate
        them.  This method removes any zoomed in tiles we may have.
        (WebCore::TileCache::setTileBordersVisible):
        (WebCore::TileCache::createTiles):
        (WebCore::TileCache::TileGrid::dropInvalidTiles):
        (WebCore::TileCache::TileGrid::dropTilesOutsideRect):
        (WebCore::TileCache::zoomedOutTileCapacity):
        Determine the maximum memory usage of zoomed out tiles based on system
        memory.
        (WebCore::TileCache::drawLayer):
        Since we may be drawing into a transformed layer, we need to transform
        our CTM and document rects to match.
        (WebCore::TileCache::invalidateTiles):
        If we're zoomed out, only invalidate tiles within the keep rect,
        dropping the rest.  If we're zoomed in, drop any invalid tiles in the
        zoomed out grid, but invalidate zoomed in tiles as usual.
        Occasionally we'll be asked to repaint the entire view, which can be
        expensive if we actually update each zoomed out tile we're holding on
        to.
        (WebCore::TileCache::TileGrid::invalidateTiles):
        (WebCore::TileCache::isTileCreationSuspended):
        We can keep creating zoomed out tiles while pinching.
        (WebCore::TileCache::updateTilingMode):
        While pinching, the zoomed out grid should be active.
        * wak/WAKWindow.h:
        Expose TileCache methods on WAKWindow.
        * wak/WAKWindow.mm:
        (-[WAKWindow removeForegroundTiles]):
        (-[WAKWindow setZoomedOutScale:]):
        (-[WAKWindow zoomedOutScale]):
        (-[WAKWindow setKeepsZoomedOutTiles:]):
        (-[WAKWindow keepsZoomedOutTiles]):

2011-03-08  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/8903097> Telluride: REGRESSION: JS garbage collection never occurs as the result of a memory notification

        Merge r994835 from Durango branch.

    2011-01-21  Cameron Zwarich  <zwarich@apple.com>

        <rdar://problem/8902881> REGRESSION: JS garbage collection never occurs as the result of a memory notification

        Reviewed by Geoffrey Garen.

        The shared instance of JSGlobalData is for clients of the JSC API, but clients
        of the WebKit API use a different JSGlobalData instance shared between JSDOMWindow
        instances. We should check that instead when deciding whether to GC.

        This is a regression caused by <rdar://problem/6264399> Connect WebKit to memory notifications for all apps.

        * bindings/js/GCController.cpp:
        (WebCore::GCController::garbageCollectNow):
        * bindings/js/JSDOMWindowBase.cpp:
        (WebCore::JSDOMWindowBase::commonJSGlobalData):
        (WebCore::JSDOMWindowBase::commonJSGlobalDataExists):
        (WebCore::JSDOMWindowBase::commonJSGlobalDataInternal):
        * bindings/js/JSDOMWindowBase.h:

2011-03-04  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/9037009> Remove fix for 7163012 now that CFNetwork is fixing the underlying bug

        Reviewed by David Carson.

        Back out open source change r55672 made for <rdar://7163012> on iOS. The bug has now been
        fixed at CFNetwork layer resource. This helps us avoid calling [NSURLConnection cookiesForURL:]
        on every resource load. cookiesForURL can be expensive if a user has a lot of cookies. There
        is a corresponding bug to fix it on desktop as well - <rdar://problem/9037094>.

        Layout test http/tests/cookies/third-party-cookie-relaxing.html added in r55672 continues to
        pass after this change.

        * platform/network/cf/ResourceHandleCFNet.cpp:
        (WebCore::makeFinalRequest):
        * platform/network/mac/ResourceHandleMac.mm:
        (WebCore::ResourceHandle::createNSURLConnection):
        (WebCore::ResourceHandle::loadResourceSynchronously):

2011-03-03  Ian Henderson  <ianh@apple.com>

        <rdar://problem/9083557> WebCore systemTotalMemory should round its return value to a power of 2

        Reviewed by Pratik Solanki.

        Round total memory level to a power of 2.

        * platform/iphone/SystemMemoryIPhone.cpp:
        (WebCore::systemTotalMemory):

2011-03-02  Ian Henderson  <ianh@apple.com>

        <rdar://problem/9056742> Allocate <canvas> backing stores from PurpleGfxMem

        Reviewed by Pratik Solanki.

        Allocate IOSurfaces from the PurpleGfxMem region.  Original patch by
        Charles Srisuwananukorn.

        * platform/graphics/cg/ImageBufferCG.cpp:
        (WebCore::createIOSurface):

2011-03-02  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/9071079> Add a pref to enable aggressive preloading

        Reviewed by Joseph Pecoraro.

        We currently queue up resource preloads if we haven't yet created a renderer for the
        document. That behavior was added in <http://trac.webkit.org/changeset/35801> to improve
        first paint times on low bandwidth connections. This change adds a pref to control that
        behavior for performance measurements under various network conditions.

        * loader/cache/CachedResourceLoader.cpp:
        (WebCore::CachedResourceLoader::preload):
        * loader/cache/MemoryCache.h:

2011-03-01  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/9022444> Some 1x1 images aren't being drawn using a color fill

        Reviewed by Simon Fraser.

        Update logic in checkForSolidColor() so that it works for cases when we are called from
        mayFillWithSolidColor() and haven't yet decoded a frame.

        * platform/graphics/BitmapImage.h:
        (WebCore::BitmapImage::assertNotSolidColor):
        * platform/graphics/cg/ImageCG.cpp:
        (WebCore::BitmapImage::checkForSolidColor):
        (WebCore::Image::drawPattern):

2011-02-28  Dean Jackson  <dino@apple.com>

        Reviewed by Simon Fraser.

        <rdar://problem/6973962> TLF: Provide a compass API (access to magnetometer)

        Implement webkitCompassHeading and webkitCompassAccuracy in
        the DeviceOrientationEvent. The actual implementation doesn't
        use the prefixes in the hope that they will be accepted by
        the W3C. Use the CoreLocation framework to provide the data.
        This will not trigger the GeoLocation permission dialog.

        * WebCore.exp.in:
        - new parameters to DeviceOrientation constructor
        * bindings/js/JSDeviceOrientationEventCustom.cpp:
        (WebCore::JSDeviceOrientationEvent::webkitCompassHeading):
        (WebCore::JSDeviceOrientationEvent::webkitCompassAccuracy):
        (WebCore::JSDeviceOrientationEvent::initDeviceOrientationEvent):
        * dom/DeviceOrientation.cpp:
        (WebCore::DeviceOrientation::create):
        (WebCore::DeviceOrientation::DeviceOrientation):
        (WebCore::DeviceOrientation::compassHeading):
        (WebCore::DeviceOrientation::compassAccuracy):
        (WebCore::DeviceOrientation::canProvideCompassHeading):
        (WebCore::DeviceOrientation::canProvideCompassAccuracy):
        * dom/DeviceOrientation.h:
        - new members and access methods
        * dom/DeviceOrientationEvent.idl:
        - two new attributes, prefixed with "webkit"
        * platform/iphone/CoreMotionManager.h:
        * platform/iphone/CoreMotionManager.mm:
        (-[CoreMotionManager dealloc]):
        (-[CoreMotionManager headingAvailable]):
        (-[CoreMotionManager initializeOnMainThread]):
        (-[CoreMotionManager checkClientStatus]):
        (-[CoreMotionManager update]):
        (-[CoreMotionManager sendMotionData:withHeading:]):
        - initialize the CLManager and track headings
        * platform/iphone/DeviceOrientationClientIPhone.h:
        * platform/iphone/DeviceOrientationClientIPhone.mm:
        (WebCore::DeviceOrientationClientIPhone::orientationChanged):
        - send heading data

2011-02-25  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by Yongjun Zhang.

        WebKit Merge Stabilization

        Convert another isMainThread ASSERT on iOS to allow
        the MainThread or the WebThread.

        * page/History.cpp:
        (WebCore::History::go):

2011-02-25  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by Yongjun Zhang.

        WebKit Merge Stabilization

        On iOS, <input type="file"> should always be disabled.
        Revert the IDL to old behavior, of checking the disabled
        and setDisabled functions instead of using [Reflect] and
        looking at the attribute values and existence.

        Test: platform/iphone-simulator/fast/forms/ios-input-file-disabled.html

        * html/HTMLInputElement.cpp:
        (WebCore::HTMLInputElement::updateType): disabled based on the new type.
        * html/HTMLInputElement.h:
        (WebCore::HTMLInputElement::disabled): file inputs are always disabled, otherwise do normal checking.
        * html/HTMLInputElement.idl: do not use [Reflect] on iOS.

2011-02-24  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by NOBODY (OOPS!).

        WebKit Merge Stabilization

        While inserting/deleting/undoing/redoing text in text fields
        we were encountering a crash due to a null renderer. While
        merging ToT WebKit r74444 iOS's code was refactored but
        forgot to check for a null renderer, which was handled
        previously. Now, we only hit an ASSERT in VisibleSelection
        which is later removed in r77995.

        * dom/CharacterData.cpp:
        (WebCore::CharacterData::insertData): handle a null renderer.
        (WebCore::CharacterData::deleteData): handle a null renderer.

2011-02-23  Yongjun Zhang  <yongjun_zhang@apple.com>

        Reviewed by Joseph Pecoraro.

        WebKit Merge Stabilization

        Update some isMainThread() ASSERTs for iOS to
        allow either the MainThread or the WebThread.

        * dom/Document.cpp:
        (WebCore::Document::updateStyleIfNeeded):
        (WebCore::Document::updateStyleForAllDocuments):
        (WebCore::Document::updateLayout):
        (WebCore::performTask):
        * loader/ResourceLoadScheduler.cpp:
        (WebCore::resourceLoadScheduler):
        * platform/mac/Language.mm:
        (+[LanguageChangeObserver _webkit_languagePreferencesDidChange]):
        (WebCore::createHTTPStyleLanguageCode):
        (WebCore::platformDefaultLanguage):

2011-02-23  Yongjun Zhang  <yongjun_zhang@apple.com>

        Reviewed by Joseph Pecoraro.

        WebKit Merge Stabilization.

        Override DefaultGCActivityCallback's synchronize method to make sure the GC activity
        timer only fires inside Web thread's run loop. Also, we need to kick off the GC activity
        timer when we replace the default activity callback in JSC Heap.

        * bindings/js/JSDOMWindowBase.cpp:
        (WebCore::JSDOMWindowBase::commonJSGlobalData):
        * platform/WebSafeGCActivityCallback.cpp:
        (WebCore::WebSafeGCActivityCallback::synchronize):
        * platform/WebSafeGCActivityCallback.h:

2011-02-23  Yongjun Zhang  <yongjun_zhang@apple.com>

        Reviewed by NOBODY (OOPS!).

        WebKit Stabilization Merge

        In Tot WebKit r72141 a FontPlatformData constructor gained
        an extra size (float) parameter. In the iOS code path, there
        was a usage of this constructor that needed to be updated.
        This was not caught by the compiler, because the constructor
        has numerous default arguments which and implicit casts
        allowed the existing values to fill in for the other
        parameters. This restores the GSFontGetSize call we used to
        have in the constructor, out to the iOS call site.

        * wak/WAKStringDrawing.mm:
        (rendererForFont): pass the font size in as the new "size" parameter.

2011-02-25  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/9057435> Remove #import <wtf/Platform.h> from WebEventRegion.h

        Reviewed by Paul Knight.

        * page/iphone/WebEventRegion.h: Remove import statement. Note
        that Platform.h is already included in WebCorePrefix.h.

2011-02-25  Justin Garcia  <justin.garcia@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/8909414> Sub-TLF: add a blue underline for low-confidence phrases from dictation

        Use the new HI approved dictation dot for underlines. 

        * Resources/DictationDot.png:
        * Resources/DictationDot@2x.png:
        * rendering/InlineTextBox.cpp:
        (WebCore::textCheckingLineStyleForMarkerType): Return the correct TextCheckingLineStyle for Dictation markers.

2011-02-24  Justin Garcia  <justin.garcia@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/8972052> Sub-TLF: Add custom Undo menu item text for dictation

        * WebCore.exp.in:
        * WebCore.xcodeproj/project.pbxproj:
        * editing/EditAction.h:
        * editing/Editor.cpp:
        (WebCore::Editor::dictate):
        * editing/Editor.h:
        * editing/iphone/DictateCommand.cpp: Added.
        (WebCore::DictateCommand::DictateCommand):
        (WebCore::DictateCommand::~DictateCommand):
        (WebCore::DictateCommand::doApply):
        * editing/iphone/DictateCommand.h: Added.
        (WebCore::DictateCommand::create):
        (WebCore::DictateCommand::editingAction):

2011-02-24  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/9043398> Connections per host limited to 4 when HTTP pipelining is enabled

        Merged part of ToT WebKit r76756.

        * loader/loader.cpp:
        (WebCore::Loader::Loader): Remove HTTP pipelining check and
        simply call initializeMaximumHTTPConnectionCountPerHost().
        * platform/network/mac/ResourceRequestMac.mm:
        (WebCore::initializeMaximumHTTPConnectionCountPerHost): Always
        call wkInitializeMaximumHTTPConnectionCountPerHost(), but return
        unlimitedConnectionCount if HTTP pipelining is enabled.

2011-02-23  Ian Henderson  <ianh@apple.com>

        <rdar://problem/9022036> WebCore should stretch Nx1 backgrounds instead of tiling them

        Reviewed by David Kilzer.

        Stretch Nx1 backgrounds, but only if accelerated drawing is enabled.
        Normal CG contexts will try to resample a stretched image in a very
        inefficient way, so this change would actually hurt performance in the
        current drawing model.

        Move the accelerated drawing preference out of TileCache and into a
        global WKShouldAccelerateDrawing function.

        * platform/graphics/Image.cpp:
        (WebCore::Image::drawTiled):
        If an image is Nx1 or 1xN and accelerated drawing is enabled, used
        stretched drawing instead of creating a pattern color.
        * platform/iphone/TileCache.h:
        * platform/iphone/TileCache.mm:
        (WebCore::TileCache::Tile::Tile):
        (WebCore::TileCache::TileCache):
        Use WKShouldAccelerateDrawing rather than an instance variable in
        TileCache.
        * wak/WKGraphics.h:
        * wak/WKGraphics.mm:
        (WKShouldAccelerateDrawing):

2011-02-23  Chris Fleizach  <cfleizach@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/9039875> MobileSafari crash when accessing iPad user guide with VO

        Accessibility code was relying on AXTextMarker to have an initWithData: method.
        Since that changed to make use of the axObjectCache, there needs to be a way
        to make an AXTextMarker if you only have the NSData and the AXObject.

        * accessibility/iphone/AccessibilityObjectWrapperIPhone.mm:
        (-[AccessibilityTextMarker initWithData:accessibilityObject:]):

2011-02-22  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Kilzer.

        <rdar://problem/9040355> CRASH in -[DOMNode(UIKitExtensions) borderRadii] with Long Press on Link on amazon.com

        In the first stabilization merge, merging ToT WebKit r66615
        added support for percentage values in border-radius and
        switched a number of border radius accessors from IntSize
        to LengthSize. Like parts of that patch, we also check if
        the renderer is a box renderer when dealing with border
        calculations. However, we didn't check for a null renderer.

        * bindings/objc/DOMUIKitExtensions.mm:
        (-[DOMNode borderRadii]): handle a null renderer.

2011-02-21  Ian Henderson  <ianh@apple.com>

        <rdar://problem/9005584> Disabling timers is ineffective at preventing checkers while scrolling

        Reviewed by Joseph Pecoraro.

        While scrolling, the main run loop enters tracking mode.  We only
        deliver delegate messages to the main thread during the default run
        loop mode -- if the web thread tries to send a delegate message while
        the user is scrolling, the web thread will block until the scroll
        finishes.

        If we disable timers and defer loading while scrolling, no delegate
        callbacks (at least in my small amount of testing) are sent to the
        main thread.  But the message to disable timers is asynchronous.  The
        web thread could already be sending a delegate message when we disable
        timers.

        Since very few delegate callbacks actually occur while scrolling, we
        can change the observer to run on all common modes, which includes the
        run loop's tracking mode.  This allows any delegate callbacks to
        finish that were pending as scrolling began, so the web thread is free
        to render tiles.

        * wak/WebCoreThread.mm:
        (StartWebThread):
        Add the delegate observer to all common run loop modes, not just the
        default mode.

2011-02-21  Chris Fleizach  <cfleizach@apple.com>

        Reviewed by Pratik Solanki.

        <rdar://problem/9030869> AX: WK needs to use accessibilityActivationPoint instead of accessibilityCenterPoint

        * accessibility/iphone/AccessibilityObjectWrapperIPhone.mm:
        (-[AccessibilityObjectWrapper accessibilityActivationPoint]):

2011-02-18  Joseph Pecoraro  <joepeck@webkit.org>

        Merged ToT WebKit r69596.

        We were seeing an ASSERT happen when interacting with plugins in
        a beforeload event in fast/replaced/object-with-embed-url-param.html.
        This handles this exact scenario.

    2010-10-12  Alexey Proskuryakov  <ap@apple.com>

            Reviewed by Simon Fraser.

            https://bugs.webkit.org/show_bug.cgi?id=47550
            <rdar://problem/8353386> For WebKit plug-ins, beforeload can be called recursively
            (esp. with AdBlock style extensions)

            No test - we don't have a WebKit-style plugin in DRT, and don't care enough to add one.

            The fix is to block plug-in scripting while in beforeload event - the plug-in is obviously
            not available yet, so scripting could only attempt to load it recursively.

            This didn't affect NPAPI plug-ins, because of a completely different code path taken in
            updateWidget(), see <https://bugs.webkit.org/show_bug.cgi?id=44575#c8>.

            * html/HTMLEmbedElement.cpp: (WebCore::HTMLEmbedElement::updateWidget):
            * html/HTMLObjectElement.cpp: (WebCore::HTMLObjectElement::updateWidget):
            * html/HTMLPlugInElement.cpp:
            (WebCore::HTMLPlugInElement::HTMLPlugInElement):
            (WebCore::HTMLPlugInElement::pluginWidget):
            * html/HTMLPlugInElement.h:

2011-02-16  Ian Henderson  <ianh@apple.com>

        <rdar://problem/8832733> Sub-TLF: TileCache should recycle tile layers

        Reviewed by Antti Koivisto.

        Enqueue tile layers in a shared LayerPool after they're removed from
        the layer tree.  The LayerPool is actually a collection of queues --
        one for each layer size in pixels.  An LRU order is maintained by the
        m_sizesInPruneOrder vector.  When we hit the capacity of the pool,
        start removing layers in the size class from which a layer was
        requested least recently.

        * WebCore.exp.in:
        Export LayerReuseQueue methods so we can control capacity from WebKit
        and clear the queue on a memory warning.
        * platform/iphone/TileCache.h:
        (WebCore::TileCache::LayerPool::capacity):
        (WebCore::TileCache::LayerPool::canReuseLayerWithSize):
        Exclude empty layers from the queue.  Disable reuse entirely when the
        capacity is 0.
        * platform/iphone/TileCache.mm:
        (-[TileLayer setTileCache:WebCore::]):
        (WebCore::bytesBackingLayerWithPixelSize):
        (WebCore::TileCache::LayerPool::LayerPool):
        (WebCore::TileCache::LayerPool::sharedPool):
        (WebCore::TileCache::LayerPool::queueForLayersWithSize):
        Find the proper queue for a particular layer size.  If MarkAsUsed is
        passed as the second parameter, mark the size class as used in the LRU
        order vector by moving it to the end.
        (WebCore::TileCache::LayerPool::addLayer):
        Add a layer to the pool, then prune ourselves down to our capacity.
        (WebCore::TileCache::LayerPool::removeLayerWithSize):
        Attempt to remove a layer.  Mark the appropriate size class as used,
        even if we were unsuccessful.
        (WebCore::TileCache::LayerPool::setCapacity):
        (WebCore::TileCache::LayerPool::prune):
        Remove layers in LRU size order until we're under capacity.
        (WebCore::TileCache::LayerPool::drain):
        Remove all layers from the pool.
        (WebCore::TileCache::Tile::Tile):
        Before creating a new layer, attempt to dequeue one of the proper size
        from the reuse queue.
        (WebCore::TileCache::Tile::~Tile):
        After removing a tile layer, enqueue it in the reuse queue.

2011-02-17  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/8969982> Enable 3D_CANVAS once ANGLE is in the builds

        Reviewed by Joseph Pecoraro.

        Backed out puzzlebox svn r998105 plus fixes.

        * Configurations/WebCore.xcconfig: Moved -lANGLE from
        OTHER_LDFLAGS_macosx back to OTHER_LDFLAGS_BASE. Extracted
        USR_LOCAL_INCLUDE_HEADER_SEARCH_PATH from HEADER_SEARCH_PATH
        since it differs for the iphonesimulator platform.
        * rendering/RenderLayerBacking.cpp: Fixed conditional
        headers. Removed unused header. This is ToT WebKit r78636.

2011-02-16  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by Pratik Solanki.

        <rdar://problem/9012100> Airplay: Attribute value (allow/deny) should be case insensitive

        Append a lowercase string into the plugin parameters list
        for "_media_element_airplay_" because the QuickTime plugin
        does a case-sensitive check for "allow" or "deny".

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::getPluginProxyParams):

2011-02-16  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by NOBODY (OOPS!).

        <rdar://problem/8962642> Merge: document.implementation.createHTMLDocument() broken

        Remove iOS diffs from HTMLDocumentParser, as they are no longer needed.

        We no longer need to check if the client is stopping. In the case where
        the client is stopping, it will call FrameLoader::stopLoading, which
        calls parser()->stopParsing(). This HTMLDocumentParser tokenizing
        function ASSERTs we are not stopped when it starts, and checks
        if it is stopped inside the loop to break early.

        Checking if the document does not have a frame is incorrect for
        documents created with document.implementation.createHTMLDocument,
        which do not have a frame.

        Covered by existing tests.

        * html/parser/HTMLDocumentParser.cpp:
        (WebCore::HTMLDocumentParser::pumpTokenizer):

2011-02-16  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Kilzer.

        <rdar://problem/9004273> REGRESSION(Merge1): MobileNotes crashed in WebCore: isScopeMarker

        Allow SVGNames::init() by default, because the HTMLTreeBuilder,
        being part of an HTML5 parser, allows SVG elements, and freely
        checks parsed tag names against SVG tag names. AtomicString
        comparisons crash when either string is null. This loads the
        SVGNames strings at the same time as the HTMLNames strings.
        We do the same for MathMLNames for the same reasons.

        * page/Frame.cpp:
        (WebCore::Frame::Frame): always perform SVGNames and MathMLNames initialization.
        * page/Frame.h:
        (WebCore::Frame::init): SVGNames and MathMLNames initialization no longer needed here.

2011-02-15  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/9005073> INSTALL_PATH set incorrectly for Development_Hardware and other configurations

        Reviewed by David Kilzer.

        Do not set INSTALL_PATH to $(BUILT_PRODUCTS_DIR) - it sets the wrong install_name on
        frameworks and breaks loading.

        * WebCore.xcodeproj/project.pbxproj:

2011-02-14  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/9000068> Define INSTALL_PATH_ACTUAL for all iOS Simulator targets

        Reviewed by Joseph Pecoraro.

        INSTALL_PATH_ACTUAL must be defined for all iOS Simulator
        targets since it's used in more than just INSTALL_PATH.

        * Configurations/WebCore.xcconfig: Changed
        INSTALL_PATH_iphonesimulator to be defined as it is in
        IndigoSDK.xcconfig. Added INSTALL_PATH_ACTUAL and
        INSTALL_PATH_ACTUAL_iphonesimulator definitions to cover
        Development, Deployment and Production_Deployment configurations
        of the WebCore target.
        * WebCore.xcodeproj/project.pbxproj: Removed INSTALL_PATH_ACTUAL
        for the Production_Deployment configuration of the WebCore
        project and the WebCore target. Added/updated INSTALL_PATH and
        INSTALL_PATH_ACTUAL definitions for the Development, Deployment
        and Production_Deployment configurations of the
        WebCoreExportFileGenerator target since Desktop overrides
        INSTALL_PATH for all of its configurations. Added INSTALL_PATH
        and INSTALL_PATH_ACTUAL definitions for Production_Deployment
        configuration of the "Derived Sources" target to match the
        Production configuration.

2011-02-14  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/8995444> Project file changes for Xcode 4

        Rubber-stamped by David Kilzer.

        Add SUPPORTED_PLATFORMS to indicate the platforms supported for each
        configuration. Also set the Base SDK to internal iPhoneOS for all iOS
        targets.

        * WebCore.xcodeproj/project.pbxproj:

2011-02-13  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/8992712> AuthenticationMac.mm:81: warning: class 'WebCoreAuthenticationClientAsChallengeSender' does not fully implement the 'NSURLAuthenticationChallengeSender' protocol

        Merged ToT WebKit r78450.

    2011-02-13  Mark Rowe  <mrowe@apple.com>

        Reviewed by Maciej Stachowiak.

        <rdar://problem/8995490> WebCoreAuthenticationClientAsChallengeSender doesn't implement some necessary methods.

        * platform/network/mac/AuthenticationMac.mm:
        (-[WebCoreAuthenticationClientAsChallengeSender performDefaultHandlingForAuthenticationChallenge:]):
        (-[WebCoreAuthenticationClientAsChallengeSender rejectProtectionSpaceAndContinueWithChallenge:]):

2011-02-11  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Kilzer.

        <rdar://problem/8992976> r999053 causes WebCore to have the wrong install_name

        Restore INSTALL_PATH_ACTUAL to prevent breaking
        LD_DYLIB_INSTALL_NAME_mh_dylib for Production_Deployment
        simulator builds.

        * WebCore.xcodeproj/project.pbxproj:

2011-02-11  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/8992850> ResourceHandle::receivedCredential() has duplicate code

        Reviewed by Adele Peterson!

        * platform/network/mac/ResourceHandleMac.mm:
        (WebCore::ResourceHandle::receivedCredential): Remove duplicate
        code added in r242248.  Originally added in r221608.

2011-02-11  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/8984033> Clean up INSTALL_PATH and INSTALL_PATH_ACUTAL in JavaScriptCore/WebCore/WebKit

        Reviewed by Joseph Pecoraro.

        There are two main fixes here:

        1. Define INSTALL_PATH in ProjectName.xcconfig for all
        platforms (iphoneos, iphonesimulator, macosx).

        2. Clean up the Xcode project file to define INSTALL_PATH only
        when the Mac OS X configurations (Debug, Release, Production)
        define it, or when a target doesn't use ProjectName.xcconfig to
        define INSTALL_PATH.

        In all cases we eschew INSTALL_PATH_ACTUAL in favor of using
        INDIGO_INSTALL_PATH_PREFIX for iOS Simulator configurations. The
        only exceptions are Development and Deployment configurations
        which always build into BUILT_PRODUCTS_DIR.

        * Configurations/WebCore.xcconfig: Define INSTALL_PATH for all
        platforms.
        * WebCore.xcodeproj/project.pbxproj: Clean up use of
        INSTALL_PATH and INSTALL_PATH_ACTUAL to match Mac OS X
        configurations.

2011-02-10  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by Geoffrey Garen.

        <rdar://problem/8978376> REGRESSION(9A126): Crash in JSC::DefaultGCActivityCallback::DefaultGCActivityCallback running jsc and scripter

        Covered by existing tests. Running tests for a long period of time, and
        fast/workers/worker-cloneport.html to tests Workers.

        * WebCore.xcodeproj/project.pbxproj: add WebSafeGCActivityCallback files.
        * bindings/js/JSDOMWindowBase.cpp:
        (WebCore::JSDOMWindowBase::commonJSGlobalData): use a custom WebSafeGCActivityCallback
        on the shared JSGlobalData which ensures Garbage Collection on the WebThread.
        * platform/WebSafeGCActivityCallback.cpp: Added.
        (WebCore::WebSafeGCActivityCallback::WebSafeGCActivityCallback): specify the WebThreadRunLoop.
        * platform/WebSafeGCActivityCallback.h: Added.
        (WebCore::WebSafeGCActivityCallback::~WebSafeGCActivityCallback):
        (WebCore::WebSafeGCActivityCallback::create):
        * wak/WebCoreThreadSystemInterface.cpp:
        (InitWebCoreThreadSystemInterface): revert exposing WebThreadRunLoop to JavaScriptCore.

2011-02-10  Eric Carlson  <eric.carlson@apple.com>

        <rdar://problem/8713155> 8F128: HTTP streaming movie embedded on web page via video tag fails to start playing

        Merged ToT Durango r988205.

    2010-12-13  Eric Carlson  <eric.carlson@apple.com>
    
            <rdar://problem/8713155> 8F128: HTTP streaming movie embedded on web page via video tag fails to start playing
    
            Merged ToT WebKit r73957.
    
        2010-12-13  Eric Carlson  <eric.carlson@apple.com>
        
                Reviewed by Antti Koivisto.
        
                HTMLMediaElement::endedPlayback should not return true if duration is zero
                https://bugs.webkit.org/show_bug.cgi?id=50962
        
                (WebCore::HTMLMediaElement::endedPlayback): Don't return true when duration is zero because a 
                media file can't play if it has no duration, therefore it can't have ended playback.
        
2011-02-10  Eric Carlson  <eric.carlson@apple.com>

        <rdar://problem/8549147> load() on media element does not start loading

        Merged Durango WebKit r987583.
    
    2010-12-08  Eric Carlson  <eric.carlson@apple.com>
    
            Reviewed by David Kilzer.
    
            <rdar://problem/8549147> load() on media element does not start loading
    
            * html/HTMLMediaElement.cpp:
            (WebCore::HTMLMediaElement::load): Call prepareToPlay if called from a user gesture OR
            if playback is allowed to begin automatically.

2011-02-10  Eric Carlson  <eric.carlson@apple.com>

        <rdar://problem/8616776> 
        WEB - Define new HTML attribute to enable AirPlay video

        Merged Durango WebKit r83143.

    2010-11-16  Eric Carlson  <eric.carlson@apple.com>
    
            Reviewed by David Carson.
    
            <rdar://problem/8616776> 
            WEB - Define new HTML attribute to enable AirPlay video
    
            * ChangeLog-PEP:
            * html/HTMLAttributeNames.in: Add x-webkit-airplay.
            * html/HTMLMediaElement.cpp:
            (WebCore::HTMLMediaElement::getPluginProxyParams): Pass a new attribute to the
            plug-in when "x-webkit-airplay" attribute is set to "allow" or "deny".
    
2011-02-09  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Paul Knight.

        <rdar://problem/8975753> pageX/Y are 0 for touch and gesture events
        
        Make pageX/pageY on touch events return something other than 0; they
        track the centroid of the touches.

        Test: platform/iphone-simulator/iphone/fast/events/touch/touch-event-pageXY.html

        * page/iphone/EventHandlerIPhoneTouch.cpp:
        (WebCore::EventHandler::dispatchTouchEvent): Pass screen and content coords to in the touch event.
        (WebCore::EventHandler::dispatchGestureEvent):  Pass screen and content coords to in the touch event.

        * platform/PlatformTouchEvent.h: Add coordinates, just like PlatformMouseEvent.
        (WebCore::PlatformTouchEvent::pos):
        (WebCore::PlatformTouchEvent::x):
        (WebCore::PlatformTouchEvent::y):
        (WebCore::PlatformTouchEvent::globalX):
        (WebCore::PlatformTouchEvent::globalY):
        * platform/iphone/PlatformTouchEventIPhone.mm:
        (WebCore::PlatformTouchEvent::PlatformTouchEvent): Initialize the m_position
        and m_globalPosition memebers.

2011-02-09  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Dean Jackson.

        <rdar://problem/8968857> Implement touch tests for 6757734 and 8967737
        
        Remove a commment about needing a testcase for <rdar://problem/6757734>.

        Tests: platform/iphone-simulator/iphone/fast/events/touch/input-touch-target.html
               platform/iphone-simulator/iphone/fast/events/touch/text-node-touch-target.html

        * page/iphone/EventHandlerIPhoneTouch.cpp:
        (WebCore::EventHandler::handleTouchEvent):

2011-02-09  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Joe Pecoraro.

        <rdar://problem/8969151> Order of touches in changedTouches and targetTouches is not preserved

        Store Touches vectors, rather than HashSets, so that order is preserved. Since there will only
        ever be < 10 touches, performance should not be an issue.
        
        * dom/TouchList.h: there's no point having a const PassRefPtr<> in append().

        * page/EventHandler.cpp:
        (WebCore::EventHandler::clear): m_touchesByID.clear renamed to m_touches.
        * page/EventHandler.h: Ditto.

        * page/iphone/EventHandlerIPhoneTouch.cpp: Switch from HashSets to Vectors for touches,
        and use simple array iteration.
        (WebCore::EventHandler::dispatchTouchEvent):
        (WebCore::getTargetTouches):
        (WebCore::touchWithIdentifier):
        (WebCore::EventHandler::handleTouchEvent):

2011-02-08  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/8974195> Allow key modifiers to be set on touch events, for compatibility with Open Source tests.

        Pipe the modifier key flags through from WebEvent to TouchEvent.
        These modifiers will always be 0 except in DRT tests.

        Will be tested by fast/events/touch when those are enabled.

        * dom/TouchEvent.h:
        (WebCore::TouchEvent::TouchEvent): Make sure to initialize scale
        and rotation in the default constructor.
        * dom/TouchEvent.cpp:
        (WebCore::TouchEvent::TouchEvent): Remove blank line.
        * page/EventHandler.h: Pass PlatformTouchEvent to the dispatch methods.
        * page/iphone/EventHandlerIPhoneTouch.cpp:
        (WebCore::EventHandler::dispatchTouchEvent): Use the PlatformTouchEvent
        to set modifiers on the WebCore event. Use const_iterator when possible.
        Comment the huge number of parameters to TouchEvent::create().
        (WebCore::EventHandler::dispatchGestureEvent): Ditto.
        (WebCore::EventHandler::handleTouchEvent): Pass the platform event
        to the dispatch methods.
        * platform/PlatformTouchEvent.h: Add modifier flags.
        (WebCore::PlatformTouchEvent::shiftKey):
        (WebCore::PlatformTouchEvent::ctrlKey):
        (WebCore::PlatformTouchEvent::altKey):
        (WebCore::PlatformTouchEvent::metaKey):
        * platform/iphone/PlatformTouchEventIPhone.mm:
        (WebCore::PlatformTouchEvent::PlatformTouchEvent):
        Use initializers in the constructor, and init the modifiers.
        * platform/iphone/WebEvent.mm:
        (-[WebEvent modifierFlags]): Remove assertion that this was only
        called for key events.

2011-02-08  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Paul Knight.

        <rdar://problem/8304597> DumpRenderTree: Implement touch event support in EventSendingController

        First part: allow 0 as a valid touch identifier, and clean up EventHandlerIPhoneTouch
        a little.

        * page/EventHandler.h:
        (WebCore::EventHandler::TouchHashTraits::emptyValue):
        (WebCore::EventHandler::TouchHashTraits::constructDeletedValue):
        (WebCore::EventHandler::TouchHashTraits::isDeletedValue):
        Use TouchHashTraits to allow 0 as a valid touch identifier.
        Also typedef the HashMap, for ease of use.
        
        * page/iphone/EventHandlerIPhoneTouch.cpp:
        (WebCore::EventHandler::dispatchTouchEvent):
        (WebCore::EventHandler::handleTouchEvent):
        Use the typedef and const_iterator.

2011-02-08  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Kilzer.

        Fix more warnings and errors found on armv6 Production_Hardware
        builds which has ENABLE_INSPECTOR and ENABLE_PURGEABLE_MEMORY
        disabled. Minor changes, mostly superseded by changes in Open
        Source. I will upstream the export change needed in Open Source.

        * WebCore.exp.in: move inspector symbol to ENABLE(INSPECTOR) block.
        * bindings/js/ScriptHeapSnapshot.h: wrap inspector functions in guards.
        * bindings/js/ScriptProfile.cpp: wrap inspector functions in guards.
        * bindings/js/ScriptProfile.h: wrap inspector functions in guards.
        * inspector/InspectorDebuggerAgent.cpp: wrap file in guard like open source.
        * inspector/InspectorProfilerAgent.cpp: wrap file in guard like open source.
        * loader/ResourceLoadNotifier.cpp:
        (WebCore::ResourceLoadNotifier::dispatchDidFinishLoading): handle unused params.
        * loader/appcache/ApplicationCacheGroup.cpp:
        (WebCore::ApplicationCacheGroup::didFinishLoading): handle unused params.
        * page/Console.cpp:
        (WebCore::Console::addMessage): handle unused params.
        * platform/PurgeableBuffer.h:
        (WebCore::PurgeableBuffer::create): fix typo of PassOwnPtr.
        * platform/text/cf/HyphenationCF.cpp: add missing include.

2011-02-08  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/7204479> WebEvent initializers have multiple uses of 'with'
        
        Add new, cleaner init methods to WebEvent. The old ones will be left in place for
        a few days to avoid rev-lock with UIKit, then removed.
        
        Other than the renaming, the only difference is the inclusion of a 'modifiers'
        field for touch events, which is required to be closer to Open Source touch
        events so that we can pass more tests.
        
        Also typedef'ed WebEventFlags to unsigned and renamed the enum to WebEventFlagValues,
        so that making a union of the values is type-safe.

        * platform/iphone/WebEvent.h:
        * platform/iphone/WebEvent.mm:
        (-[WebEvent initWithMouseEventType:withTimeStamp:withLocation:]):
        (-[WebEvent initWithScrollWheelEventWithTimeStamp:withLocation:withDeltaX:withDeltaY:]):
        (-[WebEvent initWithTouchEventType:withTimeStamp:withLocation:withTouchCount:withTouchLocations:withTouchGlobalLocations:withTouchIdentifiers:withTouchPhases:isGesture:withGestureScale:withGestureRotation:]):
        (-[WebEvent initWithKeyEventType:withTimeStamp:withCharacters:withCharactersIgnoringModifiers:withModifiers:isRepeating:withKeyCode:isTabKey:withCharacterSet:]):
        (-[WebEvent initWithMouseEventType:timeStamp:location:]):
        (-[WebEvent initWithScrollWheelEventWithTimeStamp:location:deltaX:deltaY:]):
        (-[WebEvent initWithTouchEventType:timeStamp:location:modifiers:touchCount:touchLocations:touchGlobalLocations:touchIdentifiers:touchPhases:isGesture:gestureScale:gestureRotation:]):
        (-[WebEvent initWithKeyEventType:timeStamp:characters:charactersIgnoringModifiers:modifiers:isRepeating:keyCode:isTabKey:characterSet:]):

2011-02-07  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by Cameron Zwarich.

        Fix Unused Parameter warnings on Production_Hardware builds
        which do not have ENABLE_INSPECTOR enabled.

        * inspector/InspectorController.h:
        (WebCore::InspectorController::willInsertDOMNode):
        (WebCore::InspectorController::didInsertDOMNode):
        (WebCore::InspectorController::willRemoveDOMNode):
        (WebCore::InspectorController::willModifyDOMAttr):
        (WebCore::InspectorController::didModifyDOMAttr):
        (WebCore::InspectorController::characterDataModified):
        (WebCore::InspectorController::instrumentWillSendXMLHttpRequest):

2011-02-07  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Carson.

        <rdar://problem/8969648> Disable 3D_CANVAS until ANGLE is in the builds

        * Configurations/WebCore.xcconfig: temporarily move the -lANGLE flag to non-iOS platforms.
        * rendering/RenderLayerBacking.cpp: move 3D canvas related includes properly into a guard.

2011-02-07  Dean Jackson  <dino@apple.com>

        Reviewed by Paul Knight and Simon Fraser.

        <rdar://problem/8967737> Touch events are dispatched to the wrong target

        If a touch event happens on a text node, make sure it is dispatched
        with the text's parent as the target. Also, do hit testing from
        the RenderView's layer.

        * page/iphone/EventHandlerIPhoneTouch.cpp:
        (WebCore::EventHandler::handleTouchEvent):

2011-02-07  Dean Jackson  <dino@apple.com>

        Reviewed by Simon Fraser.

        <rdar://problem/6757734> Text <input> and <textarea> do not receive touch events

        Make sure touch event handling jumps from a shadow tree into
        the real tree when examining the target node. This was causing
        <input> elements to never call event listeners, because they use
        a shadow tree to render, and those shadow elements were never
        registered.

        * page/iphone/EventHandlerIPhoneTouch.cpp:
        (WebCore::EventHandler::handleTouchEvent):

2011-02-04  Yongjun Zhang  <yongjun_zhang@apple.com>

        Reviewed by Joseph Pecoraro.

        WebKit Merge Stabilization

        Add an iOS specific document pause state.  The default DocumentWillBecomeInactive from ToT WebKit is
        for suspending active DOM objects before document goes into page cache.  For iOS, when user interacts
        with the page (like zooming and scaling), we want to pause the DOM timers but don't want to pause resource
        loading or media playing, therefore DocumentWillBecomeInactive is not suitable.

        * dom/ActiveDOMObject.h:
        (WebCore::ActiveDOMObject::):
        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::suspend):
        * page/DOMTimer.cpp:
        (WebCore::DOMTimer::install):
        * page/iphone/FrameIPhone.mm:
        (WebCore::Frame::setTimersPausedInternal):
        * platform/graphics/Image.cpp:
        (WebCore::Image::nullImage): fix assertion failure when nullImage is requested by painting WebTiledLayer in main thread.

2011-02-04  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by Yongjun Zhang.

        WebKit Merge Stabilization

        Access to Databases can happen from multiple threads. After the merge,
        this is most obvious with Workers because Workers can access Databases.
        Remove WebThreadLock checks, and instead guarantee exclusivity via locks.

        These ASSERTs are no longer appropriate and can be removed. They were
        originally alternatives to Desktop's (ASSERT(currentThread() == m_thread)),
        and iOS's ASSERTs were added in iOS WebKit (r43143). However, these
        checks have since been replaced with mutex locks, and ASSERTs that the
        mutexs are taken. There is a healthy description in ToT WebKit r56604,
        we are doing the exact same thing for iOS.

        * storage/DatabaseTracker.cpp:
        (WebCore::DatabaseTracker::openTrackerDatabase):
        (WebCore::DatabaseTracker::hasEntryForDatabase):
        (WebCore::DatabaseTracker::fullPathForDatabaseNoLock):
        (WebCore::DatabaseTracker::databaseNamesForOriginNoLock):
        (WebCore::DatabaseTracker::usageForOriginNoLock):
        (WebCore::DatabaseTracker::addDatabase):
        (WebCore::DatabaseTracker::originsDidChange):
        (WebCore::DatabaseTracker::removeDeletedOpenedDatabases):
        (WebCore::DatabaseTracker::setDatabasesPaused):

2011-02-04  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by Yongjun Zhang.

        WebKit Merge Stabilization

        Expose an accessor to the WebThreadRunLoop to JavaScriptCore.

        * wak/WebCoreThreadSystemInterface.cpp:
        (InitWebCoreThreadSystemInterface): fill in JSC's WebCoreWebThreadRunLoop function pointer.

2011-02-03  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by Yongjun Zhang.

        WebKit Merge Stabilization

        The ToT WebKit Merge of r67376 (176dbdaeae7bc8) refactored
        the viewport argument parsing. It introduced some minor
        regressions in iOS's handling of viewports. This reverts
        iOS handling to the behavior it had before. I've filed
        bugs and radars to handle outstanding issues.

        * dom/Document.cpp:
        (WebCore::Document::processViewport): re-add missing updates to the viewport width/height sizes.
        (WebCore::Document::setInPageCache): no need to reset the viewport.
        * dom/ViewportArguments.cpp:
        (WebCore::findSizeValue): fallback to old numerical parsing.
        (WebCore::findScaleValue): fallback to old numerical parsing.
        (WebCore::findUserScalableValue): fallback to old numerical parsing.
        (WebCore::setViewportFeature):
        (WebCore::finializeViewportArguments): set device-width/height constants.
        * dom/ViewportArguments.h:

2011-02-02  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by Yongjun Zhang.

        WebKit Merge Stabilization

        The ToT WebKit Merge of r61568 (75237629d35d24) starts using
        FrameLoaderStateMachine::advanceTo instead of of boolean state
        values on FrameLoader. FrameLoaderStateMachine::advanceTo ASSERTs
        that advances happen sequentially. Here we just quickly move
        through the different states. This affected Simple HTML documents
        only (textfields).

        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::initForSynthesizedDocument):

2011-02-02  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by Yongjun Zhang.

        WebKit Merge Stabilization

        The ToT WebKit Merge of r66615 (63bb79a5684e54) switched from
        IntSize and individually setting the border radius corners, to
        two Fixed Length values and a single call to set the border
        radius. The Length constructor that takes a double as an argument
        expects a Percent type, not fixed. Here we mean fixed, but we
        didn't intend to use the Percent constructor, so we can cast
        to an int and get the same behavior we had before.

        * rendering/RenderThemeIPhone.cpp:
        (WebCore::RenderThemeIPhone::adjustButtonBorderRadius): cast Length constructor argument to an int.

2011-02-02  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by Yongjun Zhang.

        WebKit Merge Stabilization

        Convert isMainThread ASSERTs in JSMainThreadExecState to allow for
        pthread_main_np() on iOS, but also go further and check that the
        WebThread is locked or disabled.

        * bindings/js/JSMainThreadExecState.h:
        (WebCore::JSMainThreadExecState::currentState):
        (WebCore::JSMainThreadExecState::JSMainThreadExecState):
        (WebCore::JSMainThreadExecState::~JSMainThreadExecState):

2011-02-02  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by Yongjun Zhang.

        WebKit Merge Stabilization

        Setter was not setting! This was a minor merge conflict that
        happened while merging ToT WebKit r68054 (7112e0b659).

        * platform/iphone/WidgetIPhone.mm:
        (WebCore::Widget::setPlatformWidget):

2011-02-07  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/8966625> Replace deviceRGBColorSpace with deviceRGBColorSpaceRef

        Reviewed by David Kilzer.

        Replace iOS specific function deviceRGBColorSpace with the open source
        version - deviceRGBColorSpaceRef.

        * platform/graphics/Color.h:
        * platform/graphics/cg/ColorCG.cpp:
        (WebCore::createCGColorWithDeviceRGBA):
        * platform/graphics/cg/GraphicsContextCG.cpp:
        (WebCore::GraphicsContext::GraphicsContext):

2011-02-07  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Dan Bernstein.

        <rdar://problem/8962422> Show borders and repaint counters for tiles

        Add the ability for TileCache tiles to show a thin outline around
        each tile, and to draw a counter in the top-left of each tile that
        shows how many times that tile has been painted.

        * platform/iphone/TileCache.h:
        (WebCore::TileCache::tileBordersVisible):
        (WebCore::TileCache::tilePaintCountersVisible):
        * platform/iphone/TileCache.mm:
        (WebCore::TileCache::Tile::Tile): Initialize the border, if any.
        (WebCore::TileCache::Tile::invalidateRect): We need to invalidate the area
        covered by the paint counter as well.
        (WebCore::TileCache::Tile::showBorder): Set a translucent dark blue border
        on the layer.
        (WebCore::TileCache::TileCache):
        (WebCore::TileCache::setTileBordersVisible):
        (WebCore::TileCache::setTilePaintCountersVisible):
        (WebCore::TileCache::drawLayer): Increment the paint counter, and
        draw the count in the top left corner of the layer.

        * wak/WAKWindow.h: Plumb methods through to toggle the debug
        settings on the TileCache.
        * wak/WAKWindow.mm:
        (-[WAKWindow setTileBordersVisible:]):
        (-[WAKWindow setTilePaintCountsVisible:]):
        * wak/WKWindow.h:
        * wak/WKWindow.mm:
        (WKWindowSetTileBordersVisible):
        (WKWindowSetTilePaintCountsVisible):

2011-02-04  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Dan Bernstein.

        <rdar://problem/8933243> Crash in -[WebFixedPositionContent scrollOrZoomChanged:]
        
        Clean up the way that fixed position layers are registered, to ensure
        that they are all unregistered/reregistered when moving between pages,
        and to avoid trying to remove every compositing layer from the fixed
        layers cache.
        
        Fixes a crash on scrolling after navigating away to an uncacheable page
        with a fixed position element.

        Tests: platform/iphone-simulator/iphone/fixed/fixpos-remove.html
               platform/iphone-simulator/iphone/fixed/fixpos-toggle.html
               platform/iphone-simulator/iphone/fixed/fixpos-unload-cached.html
               platform/iphone-simulator/iphone/fixed/fixpos-unload-uncached-crash.html
               platform/iphone-simulator/iphone/fixed/four-bars.html

        * page/ChromeClient.h: Renamed addFixedPositionLayer() to
        addOrUpdateFixedPositionLayer(), and now pass void* (CALayers)
        rather than GraphicsLayers.
        
        * platform/graphics/GraphicsLayerClient.h: Change the will/didChange callbacks
        to a single platformLayerChanged() callback to avoid two calls through to WebKit,
        and to simplify things by passing the CALayers as void* directly.

        * platform/graphics/mac/GraphicsLayerCA.mm:
        (WebCore::GraphicsLayerCA::ensureStructuralLayer): Changes to call platformLayerChanged()
        (WebCore::GraphicsLayerCA::swapFromOrToTiledLayer): Ditto.

        * loader/EmptyClients.h:
        (WebCore::EmptyChromeClient::addOrUpdateFixedPositionLayer): Updated ChromeClient
        implementation.
        (WebCore::EmptyChromeClient::removeFixedPositionLayer): Ditto.

        * rendering/RenderLayerBacking.h: Updated GraphicsLayerClient overrides.
        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::updateGraphicsLayerGeometry): Call the new updateFixedPositionLayer(),
        rather than registerFixedPositionLayer(), since here we're only adjusting to the layer's
        new geometry.
        (WebCore::RenderLayerBacking::platformLayerChanged): override of GraphicsLayerClient
        method.

        * rendering/RenderLayerCompositor.h: Add HashSet to store fixed postion layers,
        so we can efficiently bulk register/unregister them when the page goes in and out
        of the page cache.

        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::updateBacking):

        (WebCore::RenderLayerCompositor::didMoveOnscreen): Register all the fixedpos layers.
        (WebCore::RenderLayerCompositor::willMoveOffscreen): Unregister all the fixed pos layers.

        (WebCore::RenderLayerCompositor::layerWillBeRemoved): This is called when a single layer is
        going away, so remove the layer from the fixed position cache if necessary.

        (WebCore::RenderLayerCompositor::addFixedPositionLayer): Store the layer in our set, and
        register it with WebKit.
        (WebCore::RenderLayerCompositor::updateFixedPositionLayer): Update the layer geometry
        with WebKit.
        (WebCore::RenderLayerCompositor::removeFixedPositionLayer): unregister the layer, if
        it's fixed.

        (WebCore::RenderLayerCompositor::fixedPositionPlatformLayerChanged): Unregister the
        old and register the new platform layers.
        (WebCore::RenderLayerCompositor::getFixedPositionLayerSizing): Factored so we can call
        it from two places.
        (WebCore::RenderLayerCompositor::registerFixedPositionLayer): Tell WebKit about this layers.
        (WebCore::RenderLayerCompositor::unregisterFixedPositionLayer): Tell WebKit this layer is going away.
        (WebCore::RenderLayerCompositor::registerAllFixedPositionLayers): Register all layers.
        (WebCore::RenderLayerCompositor::unregisterAllFixedPositionLayers): Unregister all layers.

2011-02-04  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/6646141> Some LayoutTests spew WKViewDisplayRect(WKView*, CGRect): unable to get context for view

        Avoid trying to draw the contentView of a WKWindow when that contentView is null,
        which can happen in the tile draw callbacks when running through many tests.

        * wak/WKWindow.mm:
        (WKWindowSetContentView):
        (WKWindowDrawRect):

2011-02-02  Drew Wilson  <amw@apple.com>

         Reviewed by Dan Bernstein and David Kilzer.

         <rdar://problem/8892916> default to Emoji font for all Emoji code points

         Test emoji character set for membership instead of testing Unicode code ranges.

         * WebCore/platform/graphics/mac/FontCacheMac.mm

2011-02-03  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/6646141> Some LayoutTests spew WKViewDisplayRect(WKView*, CGRect): unable to get context for view

        Add assertions when trying to use a null CGContextRef in
        these methods.

        * wak/WKView.mm:
        (_WKViewLockFocus):
        (_WKViewDraw):

2011-02-02  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by David Carson.

        <rdar://problem/8952233> fast/dom/Window/window-resize.html test fails
        
        This test tried to resize windows using screen.availWidth etc.
        Windows aren't resizable on iOS, but the DumpRenderTree UIDelegate
        lies, and stores a frame size that should allow the test to pass.
        
        It failed because of two places where we short-circuited window resize
        logic. First, WebChromeClientIPhone stubbed out setWindowRect(),
        rather than passing it onto the UIDelegate.
        
        Secondly, DOMWindow::adjustWindowRect() was stubbed out for iOS.
        All it does is some math on the rects passed it; it doesn't change
        any window state, so it's safe to run on iOS.

        * page/DOMWindow.cpp:
        (WebCore::DOMWindow::adjustWindowRect):

2011-02-02  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Pratik Solanki.

        <rdar://problem/8907838> CrashTracer: [USER] 12 crashes in DumpRenderTree at WebCore: WebCore::Node::document const + 82
        
        Fix the crash of LayoutTests/fast/forms/input-number-crash.html by
        taking the change in r59856, which ensures that layout is up-to-date
        before calling selection methods that can force layout after we've
        got a pointer to a Renderer.

        * page/Frame.cpp:
        (WebCore::Frame::notifyRendererOfSelectionChange):

2011-02-01  David Carson  <dacarson@apple.com>

        Reviewed by Ian Henderson

        <rdar://problem/6835888> Full-size images from Google's image search (image documents) aren't scaled ideally for the device

        The existing code can not be used on iOS as it scales the image's width/height attributes
        to fit the view width. Views have a fixed default viewport of 980, so images would always
        be scaled to that width. Pinch-zooming does not alter the viewport width, so the image
        scale is never changed when zooming and the user would not be able to zoom to 1:1 pixels.
        A different approach is needed for iOS.

        If the image is larger than the view's width in pixels, then set the viewport to the
        image width. If the image is taller than the view's width, adjust the width so that
        the full image is scaled to fit in the height.
        This can change how images are rendered when loaded as top level loads. A check was
        added to UIKit when the WebView is constructed to set the WebCore setting to true
        using a LinkedOnOrAfter call.

        * loader/ImageDocument.cpp:
        (WebCore::ImageDocument::createDocumentStructure): Set the viewport to be 1:1 pixel
        (WebCore::ImageDocument::imageFitsInWindow): Do checks based on actual pixel size of window
        (WebCore::ImageDocument::windowSizeChanged): Scale viewport to match image dimensions
        (WebCore::ImageDocument::shouldShrinkToFit): Use the WebCore setting to determine if the image should be scaled.

2011-02-01  Karl Hong  <khong@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/8944866> Spelling checker underline becomes blue dots.
        WKGraphicsCreateImageFromBundleWithName() was only called by SpellingDot, now we have DictationDot, 
        the function should be able to handle multiple image files.

        * wak/WKGraphics.mm:
        (WKGraphicsCreateImageFromBundleWithName):

2011-01-30  Dan Bernstein  <mitz@apple.com>

        Reviewed by Simon Fraser.

        <rdar://problem/6512133> <select> button and UIPickerView do not respect <option>s’ direction property

        * platform/PopupMenu.h:
        * platform/iphone/PopupMenuIPhone.mm:
        (WebCore::PopupMenu::itemWritingDirectionIsNatural): Changed to return false,
        indicating that items in the picker/popover respect the direction and unicode-bidi
        properties of the corresponding <option> and <optgroup> elements. The UIKit
        changes for <rdar://problem/8935929> implement this behavior.
        (WebCore::PopupMenu::itemAlignmentFollowsMenuWritingDirection): Added. Returns
        true to indicate that the text alignment of all items in the picker/popover
        follows the writing direction of the <select> element. The UIKit changes for
        <rdar://problem/8935929> implement this behavior.
        * rendering/RenderMenuList.cpp:
        (WebCore::RenderMenuList::adjustInnerStyle): Like in TOT WebKit r76983, changed
        to check itemAlignmentFollowsMenuWritingDirection() and set the alignment and
        writing direction of the button text accordingly. Added iOS-specific handling of
        the case where zero or more than one options are selected, in which the button
        text is generated from a localizable string, and it is given natural writing
        direction.
        (WebCore::RenderMenuList::setTextFromOption): Like in TOT WebKit r73983, save
        the style of the selected option. Also moved some iOS-specific code from here...
        (WebCore::RenderMenuList::selectedOptionCount): ...to this new function.
        * rendering/RenderMenuList.h:

2011-01-29  Cameron Zwarich  <zwarich@apple.com>

        <rdar://problem/8744629> REGRESSION (r987068): LayoutTests/platform/iphone-simulator/iphone/fast/canvas/image_subSampling_scale.html fails

        Reviewed by David Carson.

        Restore the disabling of antialiasing when drawing images. This seems to only
        affect edge antialiasing upon clipping. Resampling is determined separately.

        * platform/graphics/cg/ImageCG.cpp:
        (WebCore::BitmapImage::draw):

2011-01-28  Karl Hong  <khong@apple.com>

        Reviewed by Justin Garcia.

        <rdar:/problem/8909414>Sub-TLF: add a blue underline for low-confidence phrases from dictation

        Add new DocumentMarker type Dictation. Borrow drawLineForMisspellingOrBadGrammar() to draw Dictation marker.

        * Resources/DictationDot.png: Added.
        * Resources/DictationDot@2x.png: Added.
        * WebCore.xcodeproj/project.pbxproj:
        * dom/DocumentMarker.h:
        (WebCore::DocumentMarker::):
        * platform/graphics/mac/GraphicsContextMac.mm:
        (WebCore::createSpellingOrDictationPattern):
        (WebCore::GraphicsContext::drawLineForMisspellingOrBadGrammar):
        * rendering/InlineTextBox.cpp:
        (WebCore::InlineTextBox::paintDocumentMarkers):

2011-01-28  Eric Carlson  <eric.carlson@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/8930913>
        WebKit should parse "data-youtube-id" from <video> and pass it to the QT Plugin

        No new tests, it is only possible to test this manually with an attached AppleTV.

        * html/HTMLAttributeNames.in: add data-youtube-id
        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::getPluginProxyParams): When the "data-youtube-id" attribute is
        present, pass the attribute to the plug-in so it can pass it along to AppleTV.

2011-01-27  Cameron Zwarich  <zwarich@apple.com>

        Remove a category now that Whippet is in the QuartzCore build.

        Reviewed by Ian Henderson.

        * platform/iphone/TileCache.mm:

2011-01-27  Cameron Zwarich  <zwarich@apple.com>

        Change the name of a defaults write.

        Reviewed by Ian Henderson.

        * platform/iphone/TileCache.mm:
        (WebCore::TileCache::TileCache):

2011-01-24  Anton D'Auria  <adauria@apple.com>

        Reviewed by David Carson.

        <rdar://problem/8884669> REGRESSION(8F130) Double tapping video area on nyt.com jumps to different part of page

        Patch by Simon Fraser. Double-tap to zoom uses the target node's
        RenderObject::absoluteBoundingBoxRect(). This rect's origin, however, is in
        the coordinate space of the containing frame. This was not a problem until fix
        for <rdar://problem/8686565>, which descended FrameViews on double-tap to zoom.
        This caused us to zoom in on a rect with a relative origin (hence jump to top
        left). In this fix, the caller of absoluteBoundingBoxRect walks up FrameViews
        and does point coversion to parent frames, taking transforms into account.

        * page/iphone/FrameIPhone.mm:
        (WebCore::Frame::renderRectForPoint):

2011-01-21  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/8098953> Use PLATFORM(IOS) instead of PLATFORM(IPHONE) in WebKit

        Reviewed by Joseph Pecoraro.

        The following macros have been renamed:

        ENABLE(IPHONE_PPT) => ENABLE(IOS_PPT)
        OS(IPHONE_OS) => OS(IOS)
        PLATFORM(IPHONE) => PLATFORM(IOS)
        PLATFORM(IPHONE_SIMULATOR) => PLATFORM(IOS_SIMULATOR)

        The following Xcode variable (in FeatureDefines.xcconfig and
        elsewhere) has been renamed:

        ENABLE_IOS_PPT => ENABLE_IOS_PPT
        WTF_PLATFORM_IPHONE => WTF_PLATFORM_IOS

        [File list elided.]

2011-01-21  Ian Henderson  <ianh@apple.com>

        <rdar://problem/8900686> Open in Background: support snapshotting content behind transparent link elements

        Reviewed by Simon Fraser.

        Add a parameter to nodeImage to turn on support for drawing content
        behind the given node.  If the flag is true, we check if the resulting
        image is clear -- if it is, then snapshot all frame content within the
        node's bounds.

        * WebCore.iPhone.exp:
        * page/Frame.h:
        * page/iphone/FrameIPhone.mm:
        (WebCore::Frame::nodeImage):

2011-01-21  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/8900660> Clean up stylistic issues in FrameIPhone.mm

        Fix a lot of style issues in FrameIPhone, and make a couple of
        methods const. No behavioral changes.
        
        * WebCore.iPhone.exp:
        * page/Frame.h:
        * page/iphone/FrameIPhone.mm:
        (WebCore::Frame::indexCountOfWordPrecedingSelection):
        (WebCore::Frame::wordsInCurrentParagraph):
        (WebCore::Frame::renderRectForPoint):
        (WebCore::ancestorRespondingToScrollWheelEvents):
        (WebCore::ancestorRespondingToClickEvents):
        (WebCore::Frame::qualifyingNodeAtViewportLocation):
        (WebCore::Frame::nodeRespondingToClickEvents):
        (WebCore::Frame::nodeRespondingToScrollWheelEvents):

2011-01-20  Ian Henderson  <ianh@apple.com>

        <rdar://problem/7441107> TLF: Context menu for links should include "Open in Background"

        Reviewed by David Carson.

        * WebCore.iPhone.exp:
        * page/Frame.h:
        * page/iphone/FrameIPhone.mm:
        (WebCore::Frame::imageFromRect): Add an "allowDownsampling" parameter
        that, when enabled, will clamp the image dimensions such that the
        image contains fewer pixels than some arbitrary cutoff (currently the
        number of pixels on an iPhone 4 screen).
        (WebCore::Frame::nodeImage): Create an image by drawing the contents
        of a given node.

2011-01-20  Ian Henderson  <ianh@apple.com>

        <rdar://problem/7441107> TLF: Context menu for links should include "Open in Background"

        Reviewed by David Carson.

        * bindings/objc/DOM.mm:
        (-[DOMNode boundingBoxUsingTransforms]): Add a version of boundingBox
        that accounts for accelerated layer transforms.
        * bindings/objc/DOMExtensions.h:

2011-01-20  Dean Jackson  <dino@apple.com>

        Reviewed by Pratik Solanki.

        <rdar://problem/8890193> Drawing image with custom URL from WebCache into canvas crashes AdSheet

        The special magic that WebKit-PEP provides to quickly put an
        existing CGImageRef into the Cache was producing a CachedImage
        that wasn't complete - it particular the response member was
        empty. This was causing the origin checking code of canvas
        image rendering to crash. We now create a response member that
        has the correct URL.

        * loader/CachedImage.cpp:
        (WebCore::CachedImageManual::CachedImageManual):

2011-01-20  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Kilzer.

        <rdar://problem/8893335> +[WebCache removeImageFromCacheForURL] crashes if the resource was not one added by Cache::addImageToCache

        Don't assume that when addImageToCache is called that we are
        replacing a manually cached image. If it isn't, just evict the
        resource, but if it is do the usual path and remove its fake
        client to cause it to be evicted later on.

        * loader/Cache.cpp:
        (WebCore::Cache::removeImageFromCache): properly handle non-manual-image cached resources
        * loader/CachedImage.h:
        (WebCore::CachedImage::isManual): false
        (WebCore::CachedImageManual::isManual): true

2011-01-20  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by Yongjun Zhang.

        <rdar://problem/8890172> +[WebCache removeImageFromCacheForURL] crashes if the image has not been used

        Removing the last client from an image triggers a prune, and may
        cause the resource to be evicted and deleted. Here we don't risk
        touching the possibly deleted resource; it is a dead resource and
        will get deleted with normal Cache pruning operations.

        * loader/Cache.cpp:
        (WebCore::Cache::removeImageFromCache):

2011-01-20  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Cameron Zwarich.

        <rdar://problem/8894697> Fixed position elements with 'auto' top/left jump on scrolling        

        The code that stored the offsets for fixed position elements failed to consider
        elements whose left and right, or bottom and top where 'auto' values, so these
        would jump on scrolling.
        
        Fix by using left or top offsets in these situations.

        Test: platform/iphone-simulator/iphone/fast/fixed/auto-position-fixed.html

        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::registerFixedPositionLayer):

2011-01-20  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/8892379> REGRESSION: 3 layout tests crash after fix for 8792795

        Need to null-check m_frameView in RenderView::hasCustomFixedPosition().

        * rendering/RenderView.cpp:
        (WebCore::RenderView::hasCustomFixedPosition):

2011-01-19  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Sam Weinig.

        <rdar://problem/8889132> (9A110) Safari hanging while trying to acquire
        fixed position content mutex on nytimes.com

        Merge r76196 from WebKit TOT, which renames FrameView::syncCompositingStateRecursive()
        to syncCompositingStateIncludingSubframes().
        
        This change also allows us to identify the rootmost RenderLayerCompositor
        which is having its layer flushed, which we must consult in order to
        determine whether we shoud take the lock that protects the cache
        of fixed position layers.
        
        This fixes a hang when plugin content in an iframe initialiates
        a layer sync for that iframe only, as happened on nytimes.com.

        * WebCore.base.exp:
        * page/FrameView.cpp:
        (WebCore::FrameView::syncCompositingStateForThisFrame):
        (WebCore::FrameView::syncCompositingStateIncludingSubframes):
        * page/FrameView.h:
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::RenderLayerCompositor):
        (WebCore::RenderLayerCompositor::cacheAcceleratedCompositingFlags):
        (WebCore::RenderLayerCompositor::flushPendingLayerChanges):
        (WebCore::RenderLayerCompositor::enclosingCompositorFlushingLayers):
        (WebCore::RenderLayerCompositor::updateContentsScale):
        (WebCore::RenderLayerCompositor::registerFixedPositionLayer):
        (WebCore::RenderLayerCompositor::unregisterFixedPositionLayer):
        * rendering/RenderLayerCompositor.h:
        (WebCore::RenderLayerCompositor::isFlushingLayers):

2011-01-19  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Antti Koivisto.

        <rdar://problem/5356083> Handle CSS fixed positioning (position: fixed)

        Make fixed position objects layout using a custom rect that gets
        pushed down from UIKit.

        * WebCore.iPhone.exp: Export methods related to the custom fixed position
        rect.
        * page/FrameView.h:
        (WebCore::FrameView::useCustomFixedPositionLayoutRect):
        (WebCore::FrameView::customFixedPositionLayoutRect): New getters and
        setters for the fixed position layout rect, and a flag to say if it's used
        or not.
        * page/FrameView.cpp:
        (WebCore::FrameView::FrameView): Initialize m_useCustomFixedPositionLayoutRect
        (WebCore::FrameView::visibleContentsResized): Because the custom fixed
        position layout rect may have changed, we have to mark the fixed position
        objects as needing layout.

        * rendering/RenderBox.cpp:
        (WebCore::maybeCustomContainingBlockSize):
        (WebCore::RenderBox::containingBlockWidthForPositioned):
        (WebCore::RenderBox::containingBlockHeightForPositioned): When laying
        out fixed position objects, use the custom fixed position layout 
        rect when appropriate.
        
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::requiresCompositingForPosition): This
        gets called before the renderer is parented, so we can't rely on
        hasCustomFixedPosition() checking the containership. This will cause
        all position:fixed elements to be composited, but we don't expect this
        to cause many extra layers.
        (WebCore::RenderLayerCompositor::registerFixedPositionLayer): Use
        the custom layout rect now that it's plumbed through.
        
        * rendering/RenderView.h:
        * rendering/RenderView.cpp:
        (WebCore::fixedPositionOffset):
        (WebCore::RenderView::mapLocalToContainer):
        (WebCore::RenderView::mapAbsoluteToLocalPoint): Use the custom layout
        rect for point mapping for fixed objects, which ensure that top/left
        relative objects are positioned correctly.
        
        (WebCore::RenderView::hasCustomFixedPosition): Utility method that
        returns true if a renderer should be laid out using the custom
        fixed position code.
        (WebCore::RenderView::setCustomFixedPositionedObjectsNeedLayout):
        Mark the custom fixed position elements as needing layout.

2011-01-19  Cameron Zwarich  <zwarich@apple.com>

        Not reviewed.

        Remove a codename from a variable name.

        * platform/iphone/TileCache.h:
        * platform/iphone/TileCache.mm:
        (WebCore::TileCache::Tile::Tile):
        (WebCore::TileCache::TileCache):

2011-01-18  Cameron Zwarich  <zwarich@apple.com>

        <rdar://problem/8868848> Add a setting to enable Whippet

        Reviewed by David Carson.

        Add an NSUserDefaults setting for enabling Whippet. Note that this requires
        manually disabling sandboxing for the time being:

        <rdar://problem/8882241> Allow Safari to use OpenGL

        * platform/iphone/TileCache.h:
        * platform/iphone/TileCache.mm:
        (WebCore::TileCache::Tile::Tile):
        (WebCore::TileCache::TileCache):

2011-01-17  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/8873978> Copy DOMDocumentPrivate.h to WebKit.framework/PrivateHeaders for MobileMail

        Merged ToT WebKit r75974.

    2011-01-17  David Kilzer  <ddkilzer@apple.com>

        <http://webkit.org/b/52596> Add missing DOMDocument/DOMDocumentFragment headers to Xcode project

        Reviewed by Dan Bernstein.

        This fixes two issues:

        Add missing DOMDocumentFragmentPrivate.h and
        DOMDocumentPrivate.h files to the project.  These files were
        never added to the the project although their *Internal.h
        counterparts were added in r16548 and r17390.

        Add missing DOMDocumentFragmentInternal.h to the Headers
        section.  It was moved from Headers to "Copy Generated Headers"
        in r31045, but it should have an entry in both sections.

        * WebCore.xcodeproj/project.pbxproj:

2011-01-17  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Antti Koivisto.

        <rdar://problem/5356083> Handle CSS fixed positioning (position: fixed)

        Part 4: Push information to WebKit, via ChromeClient, about compositing layers that are
        associated with fixed-position elements, and where they are relative to
        the viewport rectanagle.
        
        We have to register and unregister GraphicsLayers for fixed position objects
        as they come and go. We also have to unregister/re-register them when
        their underlying CALayer changes (e.g. flip to/from tiled layer), because
        the fixed position layer cache deals with CALayers directly.
        
        RenderLayerCompositor also notifies WebKit before and after flushing
        pending CALayer changes, so that WebFixedPositionContent's lock is taken,
        since the WebThread is modifying the CALayers at that point.
        
        RenderView::hasCustomFixedPosition() decides when an element is considered
        to be a special fixed-position layer, which both creates a compositing layer,
        and ensures that the layer is registered with WebKit.
        
        * WebCore.iPhone.exp: A couple of new exports required by WebKit.
        * loader/EmptyClients.h:
        (WebCore::EmptyChromeClient::willSyncCompositingLayers):
        (WebCore::EmptyChromeClient::didSyncCompositingLayers):
        (WebCore::EmptyChromeClient::addFixedPositionLayer):
        (WebCore::EmptyChromeClient::removeFixedPositionLayer):
        (WebCore::EmptyChromeClient::removeAllFixedPositionLayers):
        * page/ChromeClient.h:
        (WebCore::):
        * page/Frame.h:
        * page/iphone/FrameIPhone.mm:
        (WebCore::Frame::viewportOffsetChanged):
        * platform/graphics/GraphicsLayerClient.h:
        * platform/graphics/mac/GraphicsLayerCA.mm:
        (WebCore::GraphicsLayerCA::ensureStructuralLayer):
        (WebCore::GraphicsLayerCA::swapFromOrToTiledLayer):
        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::updateGraphicsLayerGeometry):
        (WebCore::RenderLayerBacking::willChangePlatformLayerForLayer):
        (WebCore::RenderLayerBacking::didChangePlatformLayerForLayer):
        * rendering/RenderLayerBacking.h:
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::RenderLayerCompositor):
        (WebCore::RenderLayerCompositor::chromeClient):
        (WebCore::RenderLayerCompositor::flushPendingLayerChanges):
        (WebCore::RenderLayerCompositor::updateCompositingLayers):
        (WebCore::RenderLayerCompositor::updateBacking):
        (WebCore::RenderLayerCompositor::requiresCompositingLayer):
        (WebCore::RenderLayerCompositor::requiresCompositingForPosition):
        (WebCore::RenderLayerCompositor::registerFixedPositionLayer):
        (WebCore::RenderLayerCompositor::unregisterFixedPositionLayer):
        * rendering/RenderLayerCompositor.h:
        * rendering/RenderView.cpp:
        (WebCore::isFixedPositionInViewport):
        (WebCore::RenderView::hasCustomFixedPosition):
        * rendering/RenderView.h:

2011-01-14  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by David Carson

        <rdar://problem/5356083> Handle CSS fixed positioning (position: fixed)
        
        Prep work: merge TOT r75832 so that layer sycning goes through the
        compositor. This allows me to add assertions to catch thread safety
        issues.

        * page/FrameView.cpp:
        (WebCore::FrameView::syncCompositingStateForThisFrame):
        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::notifySyncRequired):
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::scheduleLayerFlush):
        (WebCore::RenderLayerCompositor::flushPendingLayerChanges):
        * rendering/RenderLayerCompositor.h:

2011-01-14  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by David Carson

        <rdar://problem/5356083> Handle CSS fixed positioning (position: fixed)

        Prep work: sync up updateContentsScale() with WebKit TOT r75639, which is
        necessary because we are only allowed to touch the CALayers from
        within a syncCompositingLayers call now.

        * platform/graphics/mac/GraphicsLayerCA.h:
        (WebCore::GraphicsLayerCA::):
        * platform/graphics/mac/GraphicsLayerCA.mm:
        (WebCore::GraphicsLayerCA::commitLayerChangesBeforeSublayers):
        (WebCore::GraphicsLayerCA::setContentsScale):
        (WebCore::GraphicsLayerCA::clampedContentsScaleForScale):
        (WebCore::GraphicsLayerCA::updateContentsScale):

2011-01-14  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by David Carson

        <rdar://problem/5356083> Handle CSS fixed positioning (position: fixed)

        Prep work: factor code into syncCompositingStateForThisFrame() so
        it can be called from two places. Equivalent changes were done
        in r75803 on TOT>

        * ChangeLog-PEP:
        * page/FrameView.cpp:
        (WebCore::FrameView::syncCompositingStateForThisFrame):
        (WebCore::FrameView::syncCompositingStateRecursive):
        (WebCore::FrameView::paintContents):
        * page/FrameView.h:

2011-01-14  Morgan Winer  <mwiner@apple.com>

        Reviewed by David Carson

        <rdar://problem/8802666> [Calendar]: AB: 8F144: RTL: More... located at the start of the last line.

        The code that places the truncationRect now checks the bidi layout contents so that left-aligned arabic text 
        puts the truncationRect on the left-hand side. Previously it would put the truncationRect on the right all the time,
        and still does for Left-to-Right text.

        * wak/WAKStringDrawing.mm:
        (-[NSString __web_drawInRect:withFont:ellipsis:alignment:letterSpacing:lineSpacing:includeEmoji:truncationRect:measureOnly:renderedStringOut:]):

2011-01-14  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Carson.

        <rdar://problem/8865898> Link Does Not Display As Visited on iPhone but does on iPad

        Copy over cached pseudo element styles for cloned RenderStyles as
        VISITED_LINK pseudo element styles get lost in this clone because
        cached styles were not copied over before. This RenderStyle clone
        path is part of Text Autosizing, which was why the problem exhibited
        on the iPhone but not on the iPad.

        * dom/Document.cpp:
        (WebCore::cloneRenderStyleWithState): copy cached pseudo element styles.

2011-01-14  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Carson.

        <rdar://problem/8860219> ASSERTION FAILED: cachedResource in WebCore::areAllLoadersPageCacheAcceptable() - DocumentLoader.cpp:90

        Remove incorrect ASSERT that could happen in common scenarios
        like reloading a page or stopping a page in the middle of a load.
        There is already code to handle this case if it were to happen.

        * loader/DocumentLoader.cpp:
        (WebCore::areAllLoadersPageCacheAcceptable):

2011-01-12  Alice Neels  <aneels@apple.com>

        Reviewed by Justin Garcia

        <rdar://problem/8748773> Regression: Chinese keyboard: No prompt for auto-correction when typing Chinese and English

        The code to determine how to find word boundaries now checks the first and last characters of the current 
        string.  Previously it only checked the final character.  

        * platform/text/mac/TextBoundaries.mm:
        (WebCore::findWordBoundary):

2011-01-12  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/8182273> iOS: forbid sandboxed frames to call top.close() when allow-same-origin is not setted (38340)

        Merged ToT WebKit r74854.

        * bindings/scripts/CodeGeneratorJS.pm: Merged change from ToT
        WebKit r60776.

    2011-01-01  Adam Barth  <abarth@webkit.org>

        Reviewed by Eric Seidel.

        forbid sandboxed frames to call top.close() when allow-same-origin is not setted
        https://bugs.webkit.org/show_bug.cgi?id=38340

        We now pass the ScriptExecutionContext to window.close so it can find
        the Frame and check whether navigation is allowed.  This check will
        almost always pass because you can only close top-level frames, but the
        check will fail when the calling script is sandboxed.

        Tests: fast/frames/sandboxed-iframe-close-top-noclose.html
               fast/frames/sandboxed-iframe-close-top.html

        * page/DOMWindow.cpp:
        (WebCore::DOMWindow::close):
        * page/DOMWindow.h:
        * page/DOMWindow.idl:

2011-01-11  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/8837651> iOS: Stale pointers in CSSOM(1) - CSSRuleList::deleteRule and CSSStyleSheet::deleteRule (51993)

        Merged ToT WebKit r75168.

    2011-01-06  Abhishek Arya  <inferno@chromium.org>

            Reviewed by Simon Fraser.

            Null out the parent stylesheet pointer when a css rule is removed.
            https://bugs.webkit.org/show_bug.cgi?id=51993

            Tests: fast/dom/StyleSheet/removed-media-rule-deleted-parent-crash.html
                   fast/dom/StyleSheet/removed-stylesheet-rule-deleted-parent-crash.html

            * css/CSSRuleList.cpp:
            (WebCore::CSSRuleList::deleteRule):
            * css/CSSStyleSheet.cpp:
            (WebCore::CSSStyleSheet::deleteRule):

2011-01-11  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/8837668> iOS: ZDI-CAN-968: Apple Webkit Font Glyph Layout Remote Code Execution Vulnerability (50932)

        Merged ToT WebKit r74364, r74954.

    2011-01-01  Abhishek Arya  <inferno@chromium.org>

        Reviewed by Darin Adler.

        Fixes before child calculation when adding anonymous childs to table parts.
        https://bugs.webkit.org/show_bug.cgi?id=50932

        Fix in r74364 was incomplete. When before child is equal to the table part(to
        which the new child is getting added), it confuses the table part to add it
        incorrectly as an after child. The patch fixes by passing the before child as
        the table part's first child.

        Tests: fast/css-generated-content/table-before-after-child-add.html
               fast/css-generated-content/table-cell-before-after-child-add.html
               fast/css-generated-content/table-row-before-after-child-add.html
               fast/css-generated-content/table-row-before-after-child-add.html

        * rendering/RenderTable.cpp:
        (WebCore::RenderTable::addChild):
        * rendering/RenderTableRow.cpp:
        (WebCore::RenderTableRow::addChild):
        * rendering/RenderTableSection.cpp:
        (WebCore::RenderTableSection::addChild):

    2010-12-20  Abhishek Arya  <inferno@chromium.org>

        Reviewed by James Robinson.

        Pass the correct beforeChild value when adding a child to an anonymous table part.
        https://bugs.webkit.org/show_bug.cgi?id=50932

        When a "before" content child was added to an anonymous table part, it was added
        after the last child. This patch fixes the behavior by adding it properly before
        the first child.

        Test: fast/css-generated-content/table-before-child-add.html

        * rendering/RenderTableRow.cpp:
        (WebCore::RenderTableRow::addChild):

2011-01-11  Dean Jackson  <dino@apple.com>

        <rdar://problem/8844750> WebKitCSSMatrix should accept "none" in constructor

        Merged ToT WebKit r75542.

    2011-01-11  Dean Jackson  <dino@apple.com>

            Reviewed by Simon Fraser.

            https://bugs.webkit.org/show_bug.cgi?id=52233

            WebKitCSSMatrix constructor should accept 'none'
            as a valid string parameter.

            * css/WebKitCSSMatrix.cpp:
            (WebCore::WebKitCSSMatrix::setMatrixValue):

2011-01-10  Cameron Zwarich  <zwarich@apple.com>

        <rdar://problem/8832733> TileCache should recycle tile layers

        Reviewed by Antti Koivisto.

        Roll out the changes for

        <rdar://problem/8581802> Investigate using purgeable memory for tiles that would otherwise be removed entirely

        Most of our devices don't have enough memory to take advantage of this change, and
        even for the devices that do have enough memory loading a large enough page and
        scrolling will automatically cause all of your purgeable memory to be purged, which
        seems like a bad idea.

        Both David Chan and Charles Srisuwananukorn agree that it is better to reuse layers
        to draw new tiles and avoid the VM overhead of allocating a new CA backing store. In
        the case of Whippet rendering, we also avoid thrashing IOSurfaces, which is more
        significant. For this we can use a much smaller number of layers.

        * platform/iphone/TileCache.mm:
        (-[TileLayer removeFromSuperlayer]):
        (WebCore::TileCache::createTiles):
        (WebCore::TileCache::dropTilesOutsideRect):

2011-01-08  Cameron Zwarich  <zwarich@apple.com>

        <rdar://problem/8832568> Do not use 2x sized tiles on 2x devices

        Reviewed by Antti Koivisto.

        Pipe around the screen scale so that we don't use 2x sized tiles on 2x devices.

        * platform/iphone/TileCache.h:
        (WebCore::TileCache::screenScale):
        * platform/iphone/TileCache.mm:
        (WebCore::TileCache::TileCache):
        (WebCore::TileCache::setScreenScale):
        * wak/WAKWindow.mm:
        (-[WAKWindow setScreenScale:]):

2011-01-06  Cameron Zwarich  <zwarich@apple.com>

        <rdar://problem/8805130> Sub-TLF: Investigate using a smaller tile size (256 x 256?)

        Reviewed by Yongzun Zhang.

        * platform/iphone/TileCache.mm:
        (WebCore::TileCache::TileCache): Switch to a 256 x 256 tile size. My measurements show
        that there is no significant reduction in rendering pixel throughput, and there is a
        noticeable decrease in the amount of time with checkers visible when scrolling.

2011-01-05  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/8825352> Move the image exclusion check to WebCore from MobileSafari

        Reviewed by David Kilzer.

        Instead of making a delegate callback from the web thread to the main thread, we do the MIME
        type check in WebCore but only if we're running in MobileSafari.

        * loader/mac/ResourceLoaderMac.mm:
        (WebCore::ResourceLoader::willCacheResponse):

2010-12-22  Chris Fleizach  <cfleizach@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/8798960> iBooks crashes in WebCore::AccessibilityRenderObject::frameViewIfRenderView() on Durango8F142

        It's possible for someone to incorrectly ask for parent objects when an element is being detached.
        To prevent this, we should clear out m_object before accessibilityUnregister is called

        * accessibility/iphone/AccessibilityObjectWrapperIPhone.mm:
        (-[AccessibilityObjectWrapper detach]):

2010-12-20  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/8576495> iOS: Cache CGColor as we do NSColor

        Reviewed by Darin Adler.

        Update iOS specific code to work with the new cachedCGColor() method.

        * WebCore.iPhone.exp:
        * bindings/scripts/CodeGeneratorObjC.pm:
        * platform/graphics/cg/ColorCG.cpp:

2010-12-20  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/8576495> iOS: Cache CGColor as we do NSColor

        Merged ToT WebKit r69259.

    2010-10-06  Darin Adler  <darin@apple.com>

        Reviewed by Alexey Proskuryakov.

        Cache CGColor as we do NSColor
        https://bugs.webkit.org/show_bug.cgi?id=47226

        This fixes performance problems on certain web pages that use
        multiple colors. Once in the past we were using NSColor. Now that
        we are using CGColor, we need the same sort of caching that we have
        for NSColor.

        One example: <http://results.active.com/uploads/html/100759.html>.

        * WebCore.xcodeproj/project.pbxproj: Add GraphicsContextCG.h.

        * platform/graphics/Color.h: Replace createCGColor with cachedCGColor.

        * platform/graphics/cg/ColorCG.cpp:
        (WebCore::cachedCGColorSpace): Added.
        (WebCore::leakCGColor): Added. 
        (WebCore::cachedCGColor): Added.

        * platform/graphics/cg/GraphicsContextCG.cpp:
        (WebCore::setCGFillColor): Use cachedCGColor.
        (WebCore::setCGStrokeColor): Ditto.
        (WebCore::GraphicsContext::fillRect): Ditto.
        (WebCore::GraphicsContext::setPlatformShadow): Ditto.

        * platform/graphics/cg/GraphicsContextCG.h: Added.
        * platform/graphics/cg/GraphicsContextPlatformPrivateCG.h:
        Moved the color space functions here.

        * platform/graphics/cg/ImageCG.cpp: Tweaked headers and formatting.

        * platform/graphics/mac/ColorMac.mm: Removed the createCGColor
        function.

        * platform/graphics/mac/GraphicsContextMac.mm:
        (WebCore::drawFocusRingToContext): Removed innappropriate use of
        RetainPtr for the arguments to this function.
        (WebCore::GraphicsContext::drawFocusRing): Use cachedCGColor.

        * platform/graphics/mac/GraphicsLayerCA.mm:
        (WebCore::setLayerBorderColor): Use cachedCGColor.
        (WebCore::setLayerBackgroundColor): Ditto.
        * platform/graphics/win/GraphicsContextCGWin.cpp:
        (WebCore::GraphicsContext::drawFocusRing): Ditto.
        * platform/graphics/win/GraphicsLayerCACF.cpp:
        (WebCore::setLayerBorderColor): Ditto.
        (WebCore::setLayerBackgroundColor): Ditto.

        * platform/graphics/win/WKCACFLayerRenderer.cpp:
        (WebCore::WKCACFLayerRenderer::WKCACFLayerRenderer): Use
        CGColorCreateGenericRGB for color used only for debugging.
        * platform/graphics/win/WebTiledLayer.cpp:
        (WebCore::WebTiledLayer::addTile): Ditto.

2010-12-16  Justin Garcia  <justin.garcia@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/8639942> Text selection handle doubled back on itself (8C134)

        WebKit's position for an empty span after a BR is incorrect (see https://bugs.webkit.org/show_bug.cgi?id=49358),
        so we can't trust selection rects for them.  We don't need selection rects for those anyway though, since 
        they are just empty containers.

        * rendering/RenderObject.cpp:
        (WebCore::RenderObject::collectSelectionRects):

2010-12-15  Ben Weintraub  <weintraub@apple.com>

        Reviewed by Joseph Pecoraro.

        <rdar://problem/8633255> Remove notification on disk image cache write completion

        * loader/Cache.cpp:
        (WebCore::Cache::flushCachedImagesToDisk):
        * loader/DiskImageCache.h:
        * loader/DiskImageCache.mm:
        (WebCore::DiskImageCache::DiskImageCache):
        (WebCore::DiskImageCache::writeItem):
        (WebCore::DiskImageCache::updateSize):
        (WebCore::DiskImageCache::removeItem):
        * loader/DiskImageCacheClient.h:
        (WebCore::DiskImageCacheClient::didCompleteWrites):

2010-12-14  Cameron Zwarich  <zwarich@apple.com>

        <rdar://problem/8622141> WebCore project fails to build with LLVM compiler 2.0 in Telluride9A54-RedGarnet10M2423-clang-118.1-03

        Reviewed by Simon Fraser.

        * dom/DocumentIPhone.cpp:
        (WebCore::Document::eventRectRelativeToRoot): Don't cast to a const pointer when the
        const is immediately removed.
        * platform/graphics/iphone/MediaPlayerPrivateIPhone.mm: Use const properly.

2010-12-14  Cameron Zwarich  <zwarich@apple.com>

        <rdar://problem/8622141> WebCore project fails to build with LLVM compiler 2.0 in Telluride9A54-RedGarnet10M2423-clang-118.1-03

        Not reviewed.

        Merge Clang build fixes r61453 and 61460 from Open Source.

          2010-06-18  Anders Carlsson  <andersca@apple.com>

                  Reviewed by Sam Weinig.

                  Make WebCoreSystemInterface.h a C++ only header
                  https://bugs.webkit.org/show_bug.cgi?id=40867

                  * platform/mac/WebCoreSystemInterface.h:

          2010-06-18  Anders Carlsson  <andersca@apple.com>

                  Reviewed by Oliver Hunt.

                  More clang++ warning fixes.

                  * inspector/InspectorFrontendClientLocal.cpp:
                  (WebCore::InspectorFrontendClientLocal::restoreAttachedWindowHeight):
                  * platform/graphics/mac/FontPlatformData.h:
                  * platform/graphics/mac/WebLayer.mm:
                  (-[CALayer _descriptionWithPrefix:]):

        * inspector/InspectorFrontendClientLocal.cpp:
        (WebCore::InspectorFrontendClientLocal::restoreAttachedWindowHeight):
        * platform/graphics/mac/FontPlatformData.h:
        * platform/mac/WebCoreSystemInterface.h:

2010-12-14  Cameron Zwarich  <zwarich@apple.com>

        <rdar://problem/8622141> WebCore project fails to build with LLVM compiler 2.0 in Telluride9A54-RedGarnet10M2423-clang-118.1-03

        Not reviewed.

        Merge Clang build fixes r61436 and r67915 from Open Source.

          2010-06-18  Anders Carlsson  <andersca@apple.com>

                  Reviewed by Darin Adler.

                  Fix build errors when building with clang++.

                  * loader/archive/cf/LegacyWebArchiveMac.mm:
                  Move the const qualifier to the right place.

                  * page/EditorClient.h:
                  * platform/Pasteboard.h:
                  Use @class when forward declaring Objective-C classes in Objective-C.

          2010-09-20  Nico Weber  <thakis@chromium.org>

                  Reviewed by Adam Barth.

                  Fix "operands of ? are integers of different signs" clang warnings
                  https://bugs.webkit.org/show_bug.cgi?id=46157

                  * platform/graphics/mac/ComplexTextController.cpp:
                  (WebCore::ComplexTextController::advance):
                  * rendering/RenderBox.cpp:
                  (WebCore::RenderBox::calcHeight):

        * loader/archive/cf/LegacyWebArchiveMac.mm:
        * page/EditorClient.h:
        * platform/Pasteboard.h:
        * platform/graphics/mac/ComplexTextController.cpp:
        (WebCore::ComplexTextController::advance):

2010-12-14  Cameron Zwarich  <zwarich@apple.com>

        <rdar://problem/8622141> WebCore project fails to build with LLVM compiler 2.0 in Telluride9A54-RedGarnet10M2423-clang-118.1-03

        Reviewed by Ian Henderson.

        Remove unused code from TileCache and WAKWindow. No one is calling this, so there
        is no point in fixing the Clang errors.

        * platform/iphone/TileCache.h:
        * platform/iphone/TileCache.mm:
        (WebCore::TileCache::Tile::Tile):
        (WebCore::TileCache::TileCache):
        (WebCore::TileCache::setTilesOpaque):
        * wak/WAKWindow.h:
        * wak/WAKWindow.mm:

2010-12-14  Cameron Zwarich  <zwarich@apple.com>

        <rdar://problem/8622141> WebCore project fails to build with LLVM compiler 2.0 in Telluride9A54-RedGarnet10M2423-clang-118.1-03

        Reviewed by David Kilzer.

        Remove unused variables in Objective-C++ code.

        * platform/graphics/mac/WebLayer.mm:
        (-[CALayer _descriptionWithPrefix:]):
        * wak/WAKScrollView.mm:
        (-[WAKScrollView setActualScrollPosition:]):

2010-12-14  Cameron Zwarich  <zwarich@apple.com>

        Reviewed by NOBODY (OOPS!).

        Merge Clang build fix r61360 from Open Source.

          2010-06-17  Nicolas Weber  <thakis@chromium.org>

                  Reviewed by Eric Seidel.

                  Fix various warnings that are reported when building with clang
                  https://bugs.webkit.org/show_bug.cgi?id=40503

                  * accessibility/AccessibilityRenderObject.cpp:
                  (WebCore::AccessibilityRenderObject::labelElementContainer):
                  * accessibility/AccessibilityTableCell.cpp:
                  (WebCore::AccessibilityTableCell::parentTable):
                  * bindings/v8/NPV8Object.cpp:
                  (WebCore::npObjectTypeInfo):
                  * bindings/v8/custom/V8HTMLAudioElementConstructor.cpp:
                  (WebCore::):
                  * bindings/v8/custom/V8HTMLImageElementConstructor.cpp:
                  (WebCore::):
                  * bindings/v8/custom/V8HTMLOptionElementConstructor.cpp:
                  (WebCore::):
                  * css/CSSStyleSheet.h:
                  * html/HTMLFormElement.cpp:
                  (WebCore::HTMLFormElement::getNamedElements):
                  * inspector/InspectorValues.cpp:
                  (WebCore::InspectorObject::getObject):
                  (WebCore::InspectorObject::getArray):
                  * page/animation/AnimationBase.h:
                  * platform/graphics/BitmapImage.h:
                  (WTF::):
                  * platform/graphics/mac/FontPlatformData.h:
                  * rendering/RenderBlock.h:
                  * rendering/RootInlineBox.cpp:
                  (WebCore::RootInlineBox::ellipsisBox):
                  * storage/StorageNamespaceImpl.cpp:
                  (WebCore::StorageNamespaceImpl::storageArea):

        * accessibility/AccessibilityRenderObject.cpp:
        (WebCore::AccessibilityRenderObject::labelElementContainer):
        * accessibility/AccessibilityTableCell.cpp:
        (WebCore::AccessibilityTableCell::parentTable):
        * bindings/v8/NPV8Object.cpp:
        (WebCore::npObjectTypeInfo):
        * bindings/v8/custom/V8HTMLAudioElementConstructor.cpp:
        (WebCore::):
        * bindings/v8/custom/V8HTMLImageElementConstructor.cpp:
        (WebCore::):
        * bindings/v8/custom/V8HTMLOptionElementConstructor.cpp:
        (WebCore::):
        * css/CSSStyleSheet.h:
        * html/HTMLFormElement.cpp:
        (WebCore::HTMLFormElement::getNamedElements):
        * page/FrameView.h:
        * platform/graphics/mac/FontPlatformData.h:
        * platform/graphics/mac/FontPlatformDataMac.mm:
        (WebCore::FontPlatformData::FontPlatformData):
        * rendering/RenderBlock.h:
        * rendering/RootInlineBox.cpp:
        (WebCore::RootInlineBox::ellipsisBox):
        * storage/StorageNamespaceImpl.cpp:
        (WebCore::StorageNamespaceImpl::storageArea):

2010-12-14  Cameron Zwarich  <zwarich@apple.com>

        Not reviewed.

        Merge Clang build fix r60451 from Open Source.

          2010-05-31  Olivier Goffart <olivier.goffart@nokia.com>

                  Reviewed by Oliver Hunt.

                  [PATCH] compilation error with clang in JSDOMBinding.h
                  https://bugs.webkit.org/show_bug.cgi?id=39945

                  JSNode is only forward declared at this point. And since neither
                  "wrapper" nor JSValue are type-dependent. Compilers should report errors
                  at the first compilation pass.

                  The fix is to move the conversion the line above, as the call to the
                  function getCachedDOMNodeWrapper is type-dependent, the conversion will
                  happen at template-instantiation time.

                  See also http://llvm.org/bugs/show_bug.cgi?id=7244

                  * bindings/js/JSDOMBinding.h:
                  (WebCore::getDOMNodeWrapper):

        * bindings/js/JSDOMBinding.h:
        (WebCore::getDOMNodeWrapper):

2010-12-14  Cameron Zwarich  <zwarich@apple.com>

        <rdar://problem/8622141> WebCore project fails to build with LLVM compiler 2.0 in Telluride9A54-RedGarnet10M2423-clang-118.1-03

        Reviewed by Pratik Solanki.

        Remove semicolons from Objective-C method implementations.

        * bindings/objc/DOMUIKitExtensions.mm:
        (-[DOMNode textHeight]):
        * page/iphone/WebEventRegion.mm:
        (-[WebEventRegion initWithPoints:inP1:inP2:inP3:]):
        * platform/graphics/mac/GraphicsLayerCA.mm:
        (-[CALayer setBoundsWithValue:]):
        * platform/iphone/GeolocationManager.mm:
        (-[GeolocationCoreLocationDelegate sendError:withString:]):
        * wak/WAKStringDrawing.mm:
        (-[NSString __web_drawAtPoint:forWidth:withFont:ellipsis:letterSpacing:includeEmoji:measureOnly:renderedStringOut:]):
        (-[NSString _web_drawInRect:withFont:ellipsis:alignment:lineSpacing:includeEmoji:truncationRect:measureOnly:]):
        (-[NSString _web_drawInRect:withFont:ellipsis:alignment:lineSpacing:includeEmoji:truncationRect:]):
        * wak/WAKWindow.mm:
        (-[WAKWindow setUseOrientationDependentFontAntialiasing:]):
        (-[WAKWindow hostLayerSizeChanged]):
        (-[WAKWindow recursiveDescription]):

2010-12-14  Cameron Zwarich  <zwarich@apple.com>

        <rdar://problem/8622141> WebCore project fails to build with LLVM compiler 2.0 in Telluride9A54-RedGarnet10M2423-clang-118.1-03

        Reviewed by David Kilzer.

        * platform/graphics/BitmapImage.h: Change the declarations of a VectorTraits specialization
        to a struct to match its definition. This matches Open Source.
        * platform/graphics/GraphicsContext.h: Change the forward declaration of BidiStatus
        to a struct to match its definition.

2010-12-14  Cameron Zwarich  <zwarich@apple.com>

        <rdar://problem/8622141> WebCore project fails to build with LLVM compiler 2.0 in Telluride9A54-RedGarnet10M2423-clang-118.1-03

        Reviewed by Pratik Solanki.

        Fix struct / class mismatch. The code has changed in Open Source, so there is no
        patch to merge.

        * platform/animation/TimingFunction.h:
        * platform/graphics/GraphicsLayer.h:

2010-12-14  Cameron Zwarich  <zwarich@apple.com>

        <rdar://problem/8622141> WebCore project fails to build with LLVM compiler 2.0 in Telluride9A54-RedGarnet10M2423-clang-118.1-03

        Not reviewed.

        Merge Clang build fix r63578 from Open Source.

          2010-07-16  Anders Carlsson  <andersca@apple.com>

                  Reviewed by Sam Weinig.

                  clang++ build fixes for JavaScriptCore and WebCore
                  https://bugs.webkit.org/show_bug.cgi?id=42478

                  * platform/network/Credential.cpp:
                  (WebCore::Credential::type):
                  * platform/network/Credential.h:
                  Remove const qualifier on Credential::type since it doesn't have an effect on the type.

        * platform/network/Credential.cpp:
        (WebCore::Credential::type):
        * platform/network/Credential.h:

2010-12-14  Cameron Zwarich  <zwarich@apple.com>

        <rdar://problem/8622141> WebCore project fails to build with LLVM compiler 2.0 in Telluride9A54-RedGarnet10M2423-clang-118.1-03

        Not reviewed.

        Merge Clang build fix r61441 from Open Source.

          2010-06-18  Anders Carlsson  <andersca@apple.com>

                  Reviewed by Dan Bernstein.

                  Fix some (not all) clang++ warnings.

                  * dom/Position.h:
                  (WebCore::lastOffsetInNode):
                  * editing/CompositeEditCommand.cpp:
                  (WebCore::CompositeEditCommand::deleteInsignificantText):
                  * loader/appcache/ApplicationCache.cpp:
                  (WebCore::ApplicationCache::resourceForRequest):
                  * platform/graphics/mac/ComplexTextController.cpp:
                  (WebCore::ComplexTextController::offsetForPosition):
                  (WebCore::ComplexTextController::collectComplexTextRuns):
                  * platform/network/CredentialStorage.cpp:
                  (WebCore::protectionSpaceMapKeyFromURL):
                  * rendering/style/StyleRareNonInheritedData.h:

        * dom/Position.h:
        (WebCore::lastOffsetInNode):
        * editing/CompositeEditCommand.cpp:
        (WebCore::CompositeEditCommand::deleteInsignificantText):
        * loader/appcache/ApplicationCache.cpp:
        (WebCore::ApplicationCache::resourceForRequest):
        * platform/graphics/mac/ComplexTextController.cpp:
        (WebCore::ComplexTextController::offsetForPosition):
        (WebCore::ComplexTextController::collectComplexTextRuns):
        * platform/network/CredentialStorage.cpp:
        (WebCore::protectionSpaceMapKeyFromURL):
        * rendering/style/StyleRareNonInheritedData.h:

2010-12-14  Cameron Zwarich  <zwarich@apple.com>

        <rdar://problem/8622141> WebCore project fails to build with LLVM compiler 2.0 in Telluride9A54-RedGarnet10M2423-clang-118.1-03

        Reviewed by David Kilzer.

        * platform/graphics/mac/FontPlatformData.h: Remove a class/struct mismatch. All other
        uses of FontPlatformData use 'class' rather than 'struct'. The code in Open Source was
        fixed as part of a refactoring, so there is no patch to merge.

2010-12-09  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Kilzer.

        <rdar://problem/8748555> N90(8F132) - Crash in WebCore::SharedBuffer::hasPlatformData()

        A CachedImage can have a null m_data and still be in the cache if
        the CachedImage had an error. Null check m_data early on, it is later
        used to check the size.

        * loader/CachedImage.cpp:
        (WebCore::CachedImage::canUseDiskImageCache): null check m_data.

2010-12-08  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Carson.

        Part of: <rdar://problem/8175496> TLF: Implement "instant back" in Mobile Safari

        Previously when committing to a navigation from page A to page B if page A
        had any subresource loaders its main document would be marked as cancelled
        and it would not be added to the PageCache. This change allows page A to
        enter the PageCache if the subresource loaders at the time of navigation
        were just loading images.

        A common scenario this improves is clicking on an image link, such as a
        "tab" in a navigation menu, triggers a new image to load right before the
        navigation. Also pages with site metrics that attempt to load an image
        based on what links you clicked on the page.

        * loader/DocumentLoader.cpp:
        (WebCore::areAllLoadersPageCacheAcceptable): returns true only if all loaders are page cache acceptable. Currently if all are loading images.
        (WebCore::DocumentLoader::DocumentLoader):
        (WebCore::DocumentLoader::stopLoading): when the page is committed and there were subresource loaders, audit the loaders for page cachability.
        * loader/DocumentLoader.h:
        (WebCore::DocumentLoader::subresourceLoadersArePageCacheAcceptable):
        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::canCachePageContainingThisFrame): allow a "main document with errors" to be cached under the above circumstances.
        (WebCore::FrameLoader::logCanCacheFrameDecision): update logging to explain why a "main document with errors" may still be cached.

2010-12-08  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/8728126> Make WebThreadPostNotification do an async post instead of synchronous post

        Reviewed by Ian Henderson.

        * wak/WAKView.mm:
        (invocationForPostNotification):
        (notificationCallback): Use WebThreadCallDelegateAsync instead of
        WebThreadPostNotificationAsync. WebThreadPostNotificationAsync has been removed.
        * wak/WebCoreThread.mm:
        (WebThreadPostNotification): This now calls [NSNotificationCenter postNotification]
        asynchronously on the main thread. Also removed WebCorePostNotificationAsync.
        * wak/WebCoreThreadMessage.h:

2010-12-08  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by Ian Henderson.

        Switch DiskImageCache NSInvocation to WebThreadRun in trunk.

        * WebCore.xcodeproj/project.pbxproj: handle rename.
        * loader/DiskImageCache.cpp: Renamed from WebCore/loader/DiskImageCache.mm.
        Use WebThreadRun instead of a temporary Dispatcher class.

2010-12-08  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Kilzer.

        <rdar://problem/8626339> Disk image cache can block the main thread for several seconds on first memory warning

        Follow-up fix. Correctly pass the RefPtr into the dispatcher.

        * loader/DiskImageCache.mm:
        (WebCore::DiskImageCache::Entry::map): release the SharedBuffer from the Entry, into the dispatcher.

2010-12-06  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Carson.

        <rdar://problem/8626339> Disk image cache can block the main thread for several seconds on first memory warning

        The goal here is to do the I/O processing off of the WebThread. Here
        we put the work onto dispatch_queues. There are two operations that
        must be synchronized between the asynchronous mapping operations:
        
          (1) Marking the SharedBuffer as Memory Mapped. This must be done
              safely on the WebThread, and is done by queuing a task on
              the WebThread.

          (2) Updating the size state of the DiskImageCache. The size is
              stored in the global state of the DiskImageCache singleton,
              and could be updated simultaneously. This wasn't necessary
              to do on the WebThread, so I just used a Mutex to protect
              access to updating m_size.

        To use the WebThreadCallAPI, which uses NSInvocations, I renamed the
        file to .mm to include a simple Obj-C dispatching class.

        * WebCore.xcodeproj/project.pbxproj: handle filename change.
        * loader/DiskImageCache.cpp: Removed.
        * loader/DiskImageCache.h:
        * loader/DiskImageCache.mm: Added.
        (-[UpdateBufferOnWebThreadDispatcher initWithBuffer:WebCore::]): data required for the operation to be performed on the WebThread.
        (-[UpdateBufferOnWebThreadDispatcher runAndDispose]): perform the operation and cleanup.
        (WebCore::diskImageCache):
        (WebCore::DiskImageCache::Entry::map): queue a task on the web thread when complete, to update the SharedBuffer.
        (WebCore::DiskImageCache::writeItem): put the mapping operation onto a dispatch queue.
        (WebCore::DiskImageCache::updateSize): thread safe update of the DiskImageCache's size.
        (WebCore::DiskImageCache::removeItem): use the thread safe updateSize.
        (WebCore::DiskImageCache::dataForItem): now that the write is asynchronous, ensure callers don't ask for mapped data until it has been mapped.

2010-12-07  Cameron Zwarich  <zwarich@apple.com>

        <rdar://problem/6766768> Does AntiAliasing need to be on by default

        Reviewed by David Kilzer.

        Remove some confusing code that toggles antialiasing settings of graphics
        contexts. Currently, antialiasing is enabled by default, and we turn it off
        before drawing. When a WebCore GraphicsContext is made from the CGContext,
        it gets turned back on, and then back off when drawing images.

        The image change was made for

        <rdar://problem/6743722> Image display in Mail/Safari is blurry on 3.0

        and didn't actually fix the issue. The other changes were made for

        <rdar://problem/6575237> Regression: Hairline cracks between tiles

        but the issue does not reappear if I roll it out.

        * platform/graphics/cg/GraphicsContextCG.cpp:
        (WebCore::GraphicsContext::GraphicsContext):
        * platform/graphics/cg/ImageCG.cpp:
        (WebCore::BitmapImage::draw):
        * platform/graphics/mac/WebLayer.mm:
        (+[WebLayer drawContents:WebCore::ofLayer:intoContext:]):
        * platform/iphone/TileCache.mm:
        (WebCore::TileCache::drawLayer):

2010-12-04  Cameron Zwarich  <zwarich@apple.com>

        <rdar://problem/8605662> SpringBoard watchdog timer killed Pandora while trying to take the WebThread lock

        Reviewed by David Kilzer.

        * platform/graphics/mac/WebLayer.mm:
        (-[WebLayer display]): Lock the WebKit thread before we call [super display],
        avoiding a deadlock between the WebKit lock and CA's backing store drawing
        synchronization. This now matches the normal tiled layer drawing code, which
        explains why we haven't seen this problem that often.

2010-12-02  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by Eric Carlson.

        <rdar://problem/8721453> <video> should not lose state when restoring from PageCache

        HTMLMediaElement::userCancelledLoad triggers the "media data fetching process is
        aborted by the user" algorithm which resets the video's state if "loading is
        interrupted". In iOS, this will always happen because iOS can't tell if a file
        loads completely, and thus always appear to be loading. Here we relax the rules
        slightly for iOS and don't abort if we have gotten enough data.

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::userCancelledLoad):

2010-12-02  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by Eric Carlson.

        Part of: <rdar://problem/8175496> TLF: Implement "instant back" in Mobile Safari

        All pages with plugins on iOS to be put into the PageCache. The plugins get
        torn down on navigation when the old document is detached and the frame tree
        hierarchy is taken apart, but their core view (YouTubePlugInView or FigPlugInView)
        still remains. The approach taken in this patch is to restore the plugins by
        reattaching them to a webview (UIWebDocumentView) and create a new media layer
        when restored from the cache. This must be done after the FrameTree is
        reconnected, so there is a new delegate didRestoreFrameHeirarchyForCachedFrame.

        * history/CachedFrame.cpp:
        (WebCore::CachedFrameBase::restore): call the new delegate method after restoring the frame tree.
        * loader/EmptyClients.h:
        (WebCore::EmptyFrameLoaderClient::didRestoreFrameHierarchyForCachedFrame): default implementation.
        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::canCachePageContainingThisFrame): allow pages with plugins to use the page cache.
        (WebCore::FrameLoader::logCanCacheFrameDecision): update description of pagecache algorithm.
        * loader/FrameLoaderClient.h: add didRestoreFrameHierarchyForCachedFrame delegate method.
        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::paintIntoLayer): comment out an ASSERT to be looked at later.

2010-12-02  Joseph Pecoraro  <joepeck@webkit.org>

        Part of: <rdar://problem/8175496> TLF: Implement "instant back" in Mobile Safari

        Merged ToT WebKit r70321.

    2010-10-21  Chris Marrin  <cmarrin@apple.com>

            Reviewed by Adam Roben.

            Content in <iframe> doesn't appear when going back to http://webkit.org/blog/386/3d-transforms/
            https://bugs.webkit.org/show_bug.cgi?id=32447

            Added documentDidBecomeActive() when document comes back from cache to cause compositing
            layers in iframes to be reattached.

            There is no layout test, but I added a manual test. This test is ready to be a layout test
            but currently DRT disables the WebCore page cache, so the back/forward essentially do a 
            page load which does not exhibit the bug.

            * history/CachedFrame.cpp:
            (WebCore::CachedFrameBase::restore):
            * manual-tests/compositing/show-composited-iframe-on-back-button.html: Added.

2010-11-30  Anton D'Auria  <adauria@apple.com>

        Reviewed by Cameron Zwarich.

        <rdar://problem/8686565> REGRESSION (8C72-8C101): Double Tab To Zoom Broken in Frames

		Descend FrameViews when hit testing for double taps. Now calling the same
		hit-testing method used during single tap.

        * page/iphone/FrameIPhone.mm:
        (WebCore::Frame::renderRectForPoint):

2010-11-19  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Kilzer.

        <rdar://problem/8690966> Allow Pages with "unload" Event Listeners to use the PageCache

        Allow pages with unload event listeners to enter the page cache.

        Web developers are encouraged to use the "pageshow" and "pagehide" events
        instead. These provide information about whether or not the page will enter
        a cache or be destroyed.

        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::canCachePageContainingThisFrame):
        (WebCore::FrameLoader::logCanCacheFrameDecision):

2010-11-18  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Carson.

        <rdar://problem/8684009> Image cache shouldn't store some content

        Do not allow disk caching resources with "Cache-Control: no-store",
        as they may contain sensitive information.

        * loader/Cache.cpp:
        (WebCore::Cache::requestResource):
        * loader/CachedImage.cpp:
        (WebCore::CachedImage::canUseDiskImageCache): return false if the response was a no-store.

2010-11-18  Ian Henderson  <ianh@apple.com>

        <rdar://problem/8680061> TileCache code should use WebThreadRun instead of WebThreadCallAPI

        Reviewed by David Kilzer.

        Adopt WebThreadRun in TileCache.

        * platform/iphone/TileCache.h: Since the web thread caller is gone, we
        move its state into the tile cache.
        * platform/iphone/TileCache.mm: Remove the web thread caller, using
        WebThreadRun to run code directly on the web thread.
        (WebCore::TileCache::TileCache):
        (WebCore::TileCache::~TileCache):
        Mark the tile cache as dead, so any outstanding blocks don't try to
        access a dead object.
        (WebCore::TileCache::layoutTiles):
        (WebCore::TileCache::setTilingMode):

2010-11-18  Joseph Pecoraro  <joepeck@webkit.org>

        <rdar://problem/8175496> TLF: Implement "instant back" in Mobile Safari

        Merged ToT WebKit r72303.

    2010-11-18  Joseph Pecoraro  <joepeck@webkit.org>

            Reviewed by Darin Adler.

            Allow no-store resources to be used for back navigation
            https://bugs.webkit.org/show_bug.cgi?id=49672

            Test: http/tests/cache/history-only-cached-subresource-loads.html

            HTTP allows "Cache-Control: no-store" resources to "cached" for the
            purposes of history, such as back/forward navigation. Previously
            WebCore just immediately evicted these resources, now we leave them in
            the cache as long as they are not "https". This allows us to use them
            if they are used in a back navigation, or lazily evict and replace
            them on other load types expecting non-stale resources.

            (WebCore::CachedResource::CachedResource):
            (WebCore::CachedResource::removeClient): instead of immediately removing the resource from the cache, leave it in the cache.
            * loader/cache/CachedResourceLoader.cpp:
            (WebCore::CachedResourceLoader::checkForReload):
            (WebCore::CachedResourceLoader::requestResource): allow history only resources if the CachePolicy is CachePolicyHistoryBuffer (back/forward navigation).
            * loader/cache/MemoryCache.cpp:
            (WebCore::MemoryCache::requestResource): lazily remove history only resources if it is requested for a load type expecting non-stale resources.
            * loader/cache/MemoryCache.h: default the forHistory parameter to false.

              Rename cache policy CachePolicyAllowStale to CachePolicyHistoryBuffer.

            * loader/FrameLoader.cpp:
            (WebCore::FrameLoader::subresourceCachePolicy):
            * loader/cache/CachePolicy.h:
            * loader/cache/CachedResource.cpp:

2010-11-18  Joseph Pecoraro  <joepeck@webkit.org>

        <rdar://problem/8175496> TLF: Implement "instant back" in Mobile Safari

        Merged ToT WebKit r69886 and r69898.

    2010-10-15  Alexey Proskuryakov  <ap@apple.com>

            Reviewed by Darin Adler in <https://bugs.webkit.org/show_bug.cgi?id=47736>.

            Add a logging channel for WebCore cache and resource loading.

            Test: http/tests/cache/stopped-revalidation.html

            * platform/Logging.cpp:
            * platform/Logging.h:
            Added a logging channel for Cache and Loader.

            * loader/Cache.cpp:
            (WebCore::Cache::requestResource):
            (WebCore::Cache::revalidateResource):
            (WebCore::Cache::revalidationFailed):
            (WebCore::Cache::evict):
            * loader/CachedResource.cpp:
            (WebCore::CachedResource::setResourceToRevalidate):
            (WebCore::CachedResource::switchClientsToRevalidatedResource):
            (WebCore::CachedResource::mustRevalidate):
            Added logging.

            * loader/loader.cpp:
            (WebCore::Loader::load): Added logging.
            (WebCore::Loader::scheduleServePendingRequests): Ditto.
            (WebCore::Loader::requestTimerFired): Ditto.
            (WebCore::Loader::servePendingRequests): Ditto.
            (WebCore::Loader::Host::servePendingRequests):  Changed logging to use the new channel.
            (WebCore::Loader::Host::didFinishLoading): Changed logging to use the new channel.
            (WebCore::Loader::Host::didFail): Added logging.

    2010-10-15  Alexey Proskuryakov  <ap@apple.com>

            Trying to fix crashes on Leopard buildbot.

            * loader/loader.cpp:
            (WebCore::Loader::Host::didFinishLoading):
            (WebCore::Loader::Host::didFail):
            Moved logging higher in the function - it seems that CachedResource can be already destroyed.

            * platform/Logging.cpp: (WebCore::getChannelFromName):
            * platform/mac/LoggingMac.mm: (WebCore::InitializeLoggingChannelsIfNecessary):
            Initialize the new channel (oops).

2010-11-18  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/8684486> Assertion in JSGlobalData when suspending and resuming MobileSafari

        Reviewed by Oliver Hunt.

        * bindings/js/GCController.cpp:
        (WebCore::GCController::garbageCollectNow): Don't garbage collect if we have never
        run JavaScript in this process.

2010-11-18  Aaron Golden  <agolden@apple.com>

        Reviewed by David Carson.

        <rdar://problem/8581802> Investigate using purgeable memory for tiles that would otherwise be removed entirely

        Instead of completely removing some tiles just remove their layers from the layer hierarchy so their backing
        store memory becomes purgeable.  Don't clear _tileCache in -[TileLayer removeFromSuperlayer].  That was part
        of a fix for an ancient bug (<rdar://problem/6574914> "More coverage" links on mobile news.google.com don't always work)
        which no longer occurs anyway.  By not clearing _tileCache in removeFromSuperlayer we avoid the need to reset _tileCache
        whenever we bring a tile *back* into the layer hierarchy.

        I'm setting a limit of 128 tiles before we fall back on the old behavior (and as soon as we fall back on the old
        behavior we'll drop all but a few tiles for the visible region and its immediate surroundings).  128 is small
        enough in that we could easily have 128 purgeable tiles without worrying about the memory footprint, but 128
        is large enough that we'll almost never hit the limit.

        * platform/iphone/TileCache.h:
        * platform/iphone/TileCache.mm:
        (WebCore::TileCache::removeAllNonVisibleTiles):
        (WebCore::TileCache::createTiles):
        (WebCore::TileCache::makePurgeableTilesOutsideRect):

2010-11-18  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by Dan Bernstein.

        <rdar://problem/8683747> Remove Logging Code Added for <rdar://problem/7963319>

        Removed the logging added to help diagnose a problem in an earlier
        release. This reverts r236131.

        * platform/graphics/FontCache.cpp:
        (WebCore::FontCache::getCachedFontData):
        * platform/graphics/FontFallbackList.cpp:
        (WebCore::FontFallbackList::setPlatformFont):

2010-11-18  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Kilzer.

        Remove no longer used PLATFORM(IPHONE) difference in CachedFrame.

        Access to isMainFrame was added for iOS in r209631 and removed soon
        after in r223840. When removing, the iOS diff enabling access to the
        method was forgotten about.

        * history/CachedFrame.h: remove diff.

2010-11-12  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/8655073> Default to armv7 for JavaScriptCore, WebCore, WebKitSystemInterface, WebKit hardware builds

        Reviewed by David Carson.

        * Configurations/DebugRelease.xcconfig: Make armv7 the default
        for hardware builds.

2010-11-05  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/8560000> iOS: Stop using __COCOA_FORMAL_PROTOCOLS_2__

        Merged ToT WebKit r59913.

    2010-05-20  Mark Rowe  <mrowe@apple.com>

        Rubber-stamped by Dan Bernstein.

        <rdar://problem/7848154> Remove the dependency on Foundation's private __COCOA_FORMAL_PROTOCOLS_2__ define.

        * platform/mac/EmptyProtocolDefinitions.h:

2010-11-12  Dean Jackson  <dino@apple.com>

        <rdar://problem/8662304> WebGL overrides DEPTH_COMPONENT16 with incorrect value on iOS

        Reviewed by David Kilzer.

        GraphicsContext3D::renderbufferStorage had some code brought over from the
        desktop that explicitly reset some incoming parameter values, such as
        DEPTH_COMPONENT16 to DEPTH_COMPONENT. This was causing Render Buffers with
        depth attachments to not initialise properly on iOS's OpenGLES. The fix was
        to remove the resets.

        * platform/graphics/mac/GraphicsContext3DMac.mm:
        (WebCore::GraphicsContext3D::renderbufferStorage):

2010-11-08  Chris Fleizach  <cfleizach@apple.com>

        Reviewed by David Carson.

        <rdar://problem/8603886> aria menu does not work with VoiceOver

        Expose menu items to the iPhone accessibility API.

        * accessibility/iphone/AccessibilityObjectWrapperIPhone.mm:
        (-[AccessibilityObjectWrapper accessibilityCanFuzzyHitTest]):
        (-[AccessibilityObjectWrapper accessibilityTraits]):

2010-11-08  Dean Jackson  <dino@apple.com>

        <rdar://problem/8606046> iOS: WebGL stencil buffers not correctly initialized (48351)

        Merge ToT WebKit r70793.

    2010-10-28  Benoit Jacob  <bjacob@mozilla.com>

            Reviewed by Kenneth Russell.

            Ensure that WebGL stencil buffers are correctly initialized
            https://bugs.webkit.org/show_bug.cgi?id=48351

            * html/canvas/WebGLFramebuffer.cpp:
            (WebCore::WebGLFramebuffer::initializeRenderbuffers):

2010-11-05  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/5731622> Stop using scrub-ifdefs.pl in WebCore

        Reviewed by Joseph Pecoraro.

        With the removal of scrub-ifdefs.pl in WebCore, iOS WebKit no
        longer supports inclusion of its headers in any first-party
        app or framework other than WebKit itself.  This is because the
        headers are no longer scrubbed to remove compile-time macros
        (like ENABLE() or PLATFORM()), which are only defined when
        building JavaScriptCore, WebCore, WebKitSystemInterface and
        WebKit.

        Any WebCore headers needed by first-party frameworks at Apple
        should be including the WebKit "version" of the header, which is
        copied and processed to remove compile-time macros when
        WebKit.framework is built.  Note that these first-party apps or
        frameworks will still need to link to WebCore.framework since
        WebKit.framework is not an umbrella framework on iOS.

        Note that a better version of scrub-ifdefs.pl still exists in
        WebKit/mac to post-process the WebKit headers.

        * WebCore.xcodeproj/project.pbxproj: Removed references to
        scrub-ifdefs.pl including the accursed "Scrub Installed Headers"
        build phase script which caused parts of WebKit to be rebuilt,
        even when no source files were touched.
        * scrub-ifdefs.pl: Removed.

2010-11-04  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/8623992> Assert with Workers enabled

        Reviewed by David Carson.

        Fix the asserts to check for the correct threads. On iOS, JavaScript can be run on
        the main UI thread and the WebThread.

        * dom/ActiveDOMObject.cpp:
        (WebCore::ActiveDOMObject::ActiveDOMObject):
        (WebCore::ActiveDOMObject::~ActiveDOMObject):
        * dom/ScriptExecutionContext.cpp:
        (WebCore::ScriptExecutionContext::createdMessagePort):
        (WebCore::ScriptExecutionContext::destroyedMessagePort):
        * workers/WorkerMessagingProxy.cpp:
        (WebCore::WorkerMessagingProxy::WorkerMessagingProxy):
        (WebCore::WorkerMessagingProxy::~WorkerMessagingProxy):

2010-11-04  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/8611802> We should use different purge priorities for different resource types

        Reviewed by David Kilzer.

        * loader/CachedResource.cpp:
        (WebCore::CachedResource::makePurgeable): Set the purge priority on the PurgeableBuffer.

2010-11-04  Pratik Solanki  <psolanki@apple.com>

        Part of <rdar://problem/8611802> We should use different purge priorities for different resource types

        Merged ToT WebKit r71318.

    2010-11-04  Pratik Solanki  <psolanki@apple.com>

        Reviewed by Darin Adler.

        Should make use of purge priorities for different resource types
        https://bugs.webkit.org/show_bug.cgi?id=48684

        Assign purge priorities to CachedResource objects. JavaScript and CSS stylesheets are more
        important than images so hint to the kernel to purge them last. We do this by repurposing
        the previously unused function, PurgeableBuffer::setPurgePriority(). It now just sets the
        priority field and does not have side-effects like calling makePurgeable(true).

        Also, remove unusued PurgeableBuffer::create(const Vector<char>&) function and move the
        purgeable memory size threshold from CachedResource to PurgeableBuffer.

        * WebCore.xcodeproj/project.pbxproj: Add new PurgePriority.h header and mark it as private
        header.
        * loader/CachedCSSStyleSheet.h:
        (WebCore::CachedCSSStyleSheet::purgePriority):
        * loader/CachedImage.h:
        (WebCore::CachedImage::purgePriority):
        * loader/CachedResource.cpp:
        (WebCore::CachedResource::makePurgeable): Set the purge priority on the PurgeableBffer.
        Also, move the check for purgeable size threshold to PurgeableBuffer.
        * loader/CachedResource.h:
        (WebCore::CachedResource::purgePriority): Added. New virtual method that lets the class
        specify its purge priority.
        * loader/CachedScript.h:
        (WebCore::CachedScript::purgePriority):
        * platform/PurgePriority.h: Added. Move the PurgePriority enum from PurgeableBuffer class to
        its own header file.
        (WebCore::):
        * platform/PurgeableBuffer.h:
        (WebCore::PurgeableBuffer::setPurgePriority): Update this previously unused function to just
        set the priority and not call makePurgeable(true).
        * platform/mac/PurgeableBufferMac.cpp: Update size threshold to 16KB which is what
        CachedResource was using.

2010-11-04  Chris Fleizach  <cfleizach@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/8577260> AX: comboboxes aren't recognized by VoiceOver

        Expose which elements are combo boxes.

        * accessibility/iphone/AccessibilityObjectWrapperIPhone.mm:
        (-[AccessibilityObjectWrapper accessibilityIsComboBox]):

2010-11-03  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by Pratik Solanki.

        <rdar://problem/8625830> Update Cache Statistics to include DiskImageCache's Memory Mapped Information

        Include "Memory Mapped" information in Cache statistics
        functions. Used only for debugging and logging.

        * loader/Cache.cpp:
        (WebCore::Cache::TypeStatistic::addResource): increment the mapped size, ensure only the size of the data that was mapped.
        (WebCore::Cache::dumpStats): include new columns for memory mapped size and "real" in memory size.
        (WebCore::Cache::dumpLRULists): include a flag for whether or not the resource is memory mapped or not.
        * loader/Cache.h:
        (WebCore::Cache::TypeStatistic::TypeStatistic):
        * loader/DiskImageCache.cpp:
        (WebCore::DiskImageCache::createDirectoryIfNeeded): add a missing "DiskImageCache:" prefix to a LOG message.

2010-11-03  Joseph Pecoraro  <joepeck@webkit.org>

        Merged ToT WebKit r70545.

        <rdar://problem/8625830> Update Cache Statistics to include DiskImageCache's Memory Mapped Information

    2010-10-25  Joseph Pecoraro  <joepeck@webkit.org>

            Reviewed by NOBODY (OOPS!).

            Fix Cache::dumpStats formatting
            https://bugs.webkit.org/show_bug.cgi?id=48286

            This updates the column width in the dumpStats output to be wide enough
            for all the titles. Previously one of the titles was too wide and crept
            into later column space.

            * loader/Cache.cpp:
            (WebCore::Cache::dumpStats): make columns 13 characters wide.

2010-10-28  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by Pratik Solanki, David Kilzer, Ian Henderson, and Yongjun Zhang.

        <rdar://problem/5900435> Image limiting in WebKit is too aggressive

        Flushed encoded image data to disk in low memory situations by memory
        mapping the SharedBuffer's containing the encoded data. The files
        on disk are saved in temporary directories.

            The DiskImageCache:

              - synchronously writes items to disk
              - asynchronous removes items using a global dispatch queue
              - uses temporary directories and files for the memory mapped files
              - notifies a DiskImageCacheClient when it creates a new directory
                so the client can remember to remove that directory in case of a crash.
              - has preferences for a loose maximum size (only checked once passed),
                and a minimum resource size to be cached.

        * loader/DiskImageCache.cpp: Added.
        (WebCore::diskImageCache):
        (WebCore::DiskImageCache::Entry::create):
        (WebCore::DiskImageCache::Entry::map):
        (WebCore::DiskImageCache::Entry::unmap):
        (WebCore::DiskImageCache::Entry::removeFile):
        (WebCore::DiskImageCache::DiskImageCache):
        (WebCore::DiskImageCache::writeItem): immediately, synchronously, maps the data.
        (WebCore::DiskImageCache::removeItem): adds a removal task to a serial GCD queue.
        (WebCore::DiskImageCache::dataForItem):
        (WebCore::DiskImageCache::createDirectoryIfNeeded): creates a temporary directory if there was no cache directory.
        (WebCore::DiskImageCache::nextAvailableId):
        * loader/DiskImageCache.h: Added.
        (WebCore::DiskImageCache::Entry::Entry):
        (WebCore::DiskImageCache::Entry::id):
        (WebCore::DiskImageCache::Entry::size):
        (WebCore::DiskImageCache::Entry::data):
        (WebCore::DiskImageCache::Entry::isMapped):
        (WebCore::DiskImageCache::setClient):
        (WebCore::DiskImageCache::isEnabled):
        (WebCore::DiskImageCache::setEnabled):
        (WebCore::DiskImageCache::maximumCacheSize):
        (WebCore::DiskImageCache::setMaximumCacheSize):
        (WebCore::DiskImageCache::minimumImageSize):
        (WebCore::DiskImageCache::setMinimumImageSize):
        (WebCore::DiskImageCache::cacheDirectory):
        (WebCore::DiskImageCache::size):
        (WebCore::DiskImageCache::isFull):
        (WebCore::DiskImageCache::~DiskImageCache):
        * loader/DiskImageCacheClient.h: Added. Optional interface for a client to be notified of directory changes.
        (WebCore::DiskImageCacheClient::~DiskImageCacheClient):
        * loader/mac/DiskImageCacheMac.mm: Added.
        (WebCore::createTemporaryDirectory):
        (WebCore::createTemporaryFile):
        (WebCore::DiskImageCache::temporaryDirectory):
        (WebCore::DiskImageCache::temporaryFile):

            Fallback to old behavior, stop loading images, when the disk image
            cache is full (current limit is 100MB). Otherwise, if the disk image
            cache is enabled and not full, then do not limit loading.

        * loader/ImageLoader.cpp:
        (WebCore::ImageLoader::memoryLimitReached):

            Loop through all the resources and disk cache applicable cached
            image resources.

        * loader/Cache.cpp:
        (WebCore::Cache::flushCachedImagesToDisk):
        * loader/Cache.h:

            Currently we only allow CachedImages to have their data be memory
            mapped. And all image types except PDF images. Other CachedResources
            may be investigated in the future.

        * loader/CachedImage.cpp:
        (WebCore::CachedImage::canUseDiskImageCache):
        (WebCore::CachedImage::useDiskImageCache):
        * loader/CachedImage.h:
        * loader/CachedResource.cpp:
        (WebCore::CachedResource::isSafeToMakePurgeable):
        * loader/CachedResource.h:
        (WebCore::CachedResource::isUsingDiskImageCache):
        (WebCore::CachedResource::canUseDiskImageCache):
        (WebCore::CachedResource::useDiskImageCache):

            Allow a SharedBuffer to be memory mapped. The Buffer then has two
            states, "normal" and "mapped". The mapped state is more restrictive.

        * platform/SharedBuffer.cpp:
        (WebCore::SharedBuffer::SharedBuffer):
        (WebCore::SharedBuffer::~SharedBuffer):
        (WebCore::SharedBuffer::allowToBeMemoryMapped):
        (WebCore::SharedBuffer::markAsMemoryMapped):
        (WebCore::SharedBuffer::data):
        (WebCore::SharedBuffer::append):
        (WebCore::SharedBuffer::buffer):
        (WebCore::SharedBuffer::getSomeData):
        * platform/SharedBuffer.h:
        (WebCore::SharedBuffer::isAllowedToBeMemoryMapped):
        (WebCore::SharedBuffer::isMemoryMapped):
        * platform/cf/SharedBufferCF.cpp:
        (WebCore::SharedBuffer::SharedBuffer): initialize member variables in a constructor.

            Adds a "IOSWebCoreLogLevel" default to not conflict with Open Source
            log levels, of which only a few bits remain. "DiskImageCache" Logging
            is at 0x10, so you can enable this by setting it on a debug build:

            defaults write com.apple.mobilesafari IOSWebCoreLogLevel 0x00000010

        * platform/Logging.cpp:
        (WebCore::):
        (WebCore::getChannelFromName):
        * platform/Logging.h:
        * platform/mac/LoggingMac.mm:
        (WebCore::InitializeLoggingChannelsIfNecessary):

            Misc. changes: exports, add new files.

        * WebCore.iPhone.exp: Export some DiskImageCache symbols, and Cache's pruneDeadResources.
        * WebCore.xcodeproj/project.pbxproj:

2010-11-02  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/8620879> contenteditable support should only be enabled for Telluride or later

        Reviewed by Ian Henderson.

        Renamed ENABLE_CONTENTEDITABLE to ENABLE_IOS_CONTENTEDITABLE
        since this macro is only used on iOS WebKit.

        * editing/SelectionController.cpp:
        (WebCore::SelectionController::focusedOrActiveStateChanged):
        * page/iphone/FrameIPhone.mm:
        (WebCore::ancestorRespondingToClickEvents):
        (WebCore::Frame::qualifyingNodeAtViewportLocation):

2010-10-29  Ian Henderson  <ianh@apple.com>

        <rdar://problem/8362345> Block-based version of WebThreadCallAPI

        Reviewed by David Carson.

        Add a WebThreadRun method that takes a single block argument.  If run
        on the web thread, the block argument is immediately executed.  If run
        on the main thread, the block argument is asynchronously queued to run
        on the web thread.

        * WebCore.iPhone.exp:
        * WebCore.xcodeproj/project.pbxproj:
        * wak/WebCoreThreadRun.cpp: Added.
        * wak/WebCoreThreadRun.h: Added.

2010-10-28  Chris Fleizach  <cfleizach@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/8603861> ARIA sliders do not work with VoiceOver

        Test: platform/iphone-simulator/accessibility/sliders.html

        * accessibility/iphone/AccessibilityObjectWrapperIPhone.mm:
        (-[AccessibilityObjectWrapper accessibilityTraits]):
        (-[AccessibilityObjectWrapper accessibilityValue]):
        (-[AccessibilityObjectWrapper accessibilityIncrement]):
        (-[AccessibilityObjectWrapper accessibilityDecrement]):

2010-10-27  Chris Fleizach  <cfleizach@apple.com>

        Reviewed by David Carson.

        <rdar://problem/8561066> AX: title elements are not being returned on the web for controls
        Need to expose titleUIElements for the iphone AX API.

        * accessibility/iphone/AccessibilityObjectWrapperIPhone.mm:
        (-[AccessibilityObjectWrapper accessibilityTitleElement]):

2010-10-27  Chris Fleizach  <cfleizach@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/8547291> aria-required does not indicate required state to user
        Need to expose the isRequired() method to the iphone API.
 
        * accessibility/iphone/AccessibilityObjectWrapperIPhone.mm:
        (-[AccessibilityObjectWrapper accessibilityRequired]): 

2010-10-26  Ian Henderson  <ianh@apple.com>

        <rdar://problem/8387679> Investigate different loading bar completion algorithm for embedded

        Reviewed by NOBODY (OOPS!)

        Add a method to FrameView that counts the number of characters of text
        in the render tree.  We need this method to avoid stalling a page that
        doesn't have enough content.

        * WebCore.iPhone.exp:
        * page/FrameView.cpp:
        (WebCore::countRenderedCharactersInRenderObjectWithThreshold):
        (WebCore::FrameView::renderedCharactersExceed):
        * page/FrameView.h:

2010-10-26  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/8573668> UILabel Does Not Render Emoji Correctly (synthetic oblique should be disabled)

        * platform/graphics/mac/FontCacheMac.mm:
        (WebCore::FontCache::createFontPlatformData): Never use synthetic
        oblique and synthetic bold for Apple Color Emoji.

2010-10-25  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/8589990> Add an SPI for adding/removing a CGImageRef to the WebCore cache

        Reviewed by David Carson.

        We add new SPI to the Cache class that adds a CachedImageManual object to the
        WebCore cache. CachedImageManual is a simple subclass of CachedImage that allows
        us to to add a CGImageRef for a particular URL. Since the lifetime of this object
        is dictated by the SPI and not by any webpage usage, we have a fake
        CachedResourceClient that keeps the object alive until the removeImageFromCache()
        SPI is called.

        * WebCore.iPhone.exp:
        * loader/Cache.cpp:
        (WebCore::Cache::addImageToCache):
        (WebCore::Cache::removeImageFromCache):
        * loader/Cache.h:
        * loader/CachedImage.cpp:
        (WebCore::CachedImageManual::CachedImageManual):
        (WebCore::CachedImageManual::~CachedImageManual):
        * loader/CachedImage.h:
        (WebCore::CachedImageManual::addFakeClient):
        (WebCore::CachedImageManual::removeFakeClient):

2010-10-23  David Kilzer  <ddkilzer@apple.com>

        Add missing include of MacErrors.h

        Merged ToT WebKit r70399.

    2010-10-23  David Kilzer  <ddkilzer@apple.com>

        <http://webkit.org/b/48181> Add missing include of MacErrors.h

        Reviewed by Alexey Proskuryakov.

        * platform/network/mac/FormDataStreamMac.mm: Added #import of
        <MacErrors.h> for iOS since the formOpen() method uses "fnfErr",
        which was added in r55670.  The same header is included through
        <CoreServices/CoreServices.h> on Mac OS X.

2010-10-20  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/8020939> Pixel Cracks: render artifacts in logo image in google China main page.

        Merged ToT WebKit r70118.

    2010-10-19  Yongjun Zhang  <yongjun_zhang@apple.com>

            Reviewed by Dan Bernstein.

            Pixel cracks when using background image sprite on transformed element at certain scales.
            https://bugs.webkit.org/show_bug.cgi?id=47868

            The pixel bleeding happens when the current context has scale and interpolation is kCGInterpolationHigh
            or kCGInterpolationDefault.  If the source rect size is smaller than the intrinsic image size,  some
            pixels outside of the clip rect will also be used to interpolate the color value for clip edges, which
            results in unwanted thin lines around the painted area.  We need to use sub-image patch to get rid of
            the artifacts in this case.

            Test: fast/images/pixel-crack-image-background-webkit-transform-scale.html

            * platform/graphics/cg/ImageCG.cpp:
            (WebCore::BitmapImage::draw):

2010-10-20  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/7458132> document.createEvent should accept "OrientationEvent" as a parameter

        Merged ToT WebKit r69984.

    2010-10-18  Yongjun Zhang  <yongjun_zhang@apple.com>

            Reviewed by Darin Adler.

            Missing support for document.createEvent("OrientationEvent")
            https://bugs.webkit.org/show_bug.cgi?id=32492

            Add support for document.createEvent("OrientationEvent") to help unit testing of
            onOrientationChange event.

            Test: fast/dom/DeviceOrientation/create-event-onorientationchange.html

            * dom/Document.cpp:
            (WebCore::Document::createEvent):

2010-10-19  Joseph Pecoraro  <joepeck@webkit.org>

        <rdar://problem/8470328> ASSERTION FAILED: delta >= 0 || ((int)m_deadSize + delta >= 0) in WebCore/loader/Cache.cpp:686 void WebCore::Cache::adjustSize(bool, int)

        Merged ToT WebKit r70077.

    2010-10-19  Joseph Pecoraro  <joepeck@webkit.org>

            Reviewed by David Kilzer.

            iOS: ASSERT in Cache::adjustSize running layout tests
            https://bugs.webkit.org/show_bug.cgi?id=47873

            Inside Cache::pruneDeadResources we loop over the LRU lists and make resources purgeable
            with Cache::makeResourcePurgeable(). This wasn't taking into account whether the resource
            was already purgeable or not, and the makeResourcePurgeable call was always calling
            adjustSize(). Now we make sure makeResourcePurgable only adjusts the size of the Cache's
            dead sizes when it first marks the resource purgeable. Likewise, if a resource is marked
            as purgeable and then evicted, we should not adjust the size again.

            The balancing call is when we have a resource that has been marked as purgeable and we
            successfully mark it as no longer purgeable in Cache::resourceForURL.

            No test added because this requires testing purgeable memory.

            * loader/Cache.cpp:
            (WebCore::Cache::makeResourcePurgeable):
            (WebCore::Cache::evict):

2010-10-19  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by Pratik Solanki.

        <rdar://problem/8470328> ASSERTION FAILED: delta >= 0 || ((int)m_deadSize + delta >= 0) in WebCore/loader/Cache.cpp:686 void WebCore::Cache::adjustSize(bool, int)

        Uninitialized boolean was sometimes showing up as true and could cause
        issues later on. This is the only remaining SharedBuffer constructor.

        * platform/cf/SharedBufferCF.cpp:
        (WebCore::SharedBuffer::SharedBuffer): initialize m_shouldUsePurgeableMemory.

2010-10-19  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/6592830> Enable HTML5 Worker threads

        Reviewed by David Kilzer.

        Enable web workers in iOS. When flipping the switch some global data structures
        become thread-specific. On iOS we need to ensure that the main UI thread and the
        WebThread share the same "thread-specific" data structure.

        * Configurations/FeatureDefines.xcconfig: Enable WORKERS, SHARED_WORKERS and
        CHANNEL_MESSAGING.
        * WebCore.base.exp:
        * WebCore.iPhone.exp:
        * bindings/js/JSDebugWrapperSet.cpp:
        (WebCore::JSDebugWrapperSet::shared): Save the JSDebugWrapperSet object for the
        main thread in a static so that the WebThread can use it.
        (WebCore::JSDebugWrapperSet::setWebCoreThreadData): Called from the WebThread to
        set its own thread-specific JSDebugWrapperSet object to be the same as the main UI
        thread.
        * bindings/js/JSDebugWrapperSet.h:
        * bindings/js/WorkerScriptController.cpp:
        (WebCore::WorkerScriptController::evaluate): Fix compiler warning.
        * page/DOMTimer.cpp:
        (WebCore::DOMTimer::fired):
        * platform/ThreadGlobalData.cpp: Similar code to JSDebugWrapperSet
        so that the main UI thread and WebThread can share the same ThreadGlobalData.
        (WebCore::ThreadGlobalData::ThreadGlobalData):
        (WebCore::ThreadGlobalData::setWebCoreThreadData):
        * platform/ThreadGlobalData.h:
        (WebCore::threadGlobalData):
        * platform/ThreadTimers.cpp:
        (WebCore::ThreadTimers::ThreadTimers):
        (WebCore::ThreadTimers::sharedTimerFiredInternal):
        * platform/Timer.h:
        (WebCore::TimerBase::isActive):
        * wak/WebCoreThread.mm:
        (RunWebThread): Initialize shared data on the WebThread.
        (StartWebThread): Make sure shared data is created on the main thread before we
        start the WebThread.

 2010-10-14  Enrica Casucci  <enrica@apple.com>
 
        Reviewed by Dave Carson.

        <rdar://problem/8547866> REGRESSION: Delete key on keyboard returns no value for keyCode,charCode or which (affects iTunes Store)

        Since iOS has no key code values in the events, we need to add back some of the
        character code mappings that are no longer needed on Mac OS X.
        
        * platform/cocoa/KeyEventCocoa.mm:
        (WebCore::windowsKeyCodeForCharCode): Extended list of mapped character codes.

2010-10-13  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/8011688> iOS WebKit: source image rect is wrong when the image is sub-sampled.
        Reviewed by David Kilzer.

        iOS WebKit sub-samples an image when it sees the image will be painted with scale.  In
        addition, when only partial of the image needs to be painted, WebKit generates a intermedia bitmap out
        of the portion to be painted, and paints the generated bitmap to the target.  The issue is, if the
        original image is sub-sampled first, and we forget to apply the same sampling scale factor to the
        subarea, we will end up generating a bigger image than we need.  To fix that, the patch adds the right
        scale factor for subimage rect.

        Test: platform/iphone-simulator/iphone/fast/canvas/image_subSampling_scale.html

        * platform/graphics/cg/ImageCG.cpp:
        (WebCore::BitmapImage::draw):

2010-10-12  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by Ian Henderson.

        Removed exclude references to files that no longer exist.

        iOS no longer excludes: FontMacATSUI.mm and ScriptObjectQuarantine.cpp
        Mac OSX no longer excludes: GeolocationServiceCoreLocation.mm, TiledSurface.mm, and WKScreen.c

        Note that GeolocationServiceCoreLocation has changed to a .cpp and .h file.

        * Configurations/WebCore.xcconfig:

2010-10-12  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by Pratik Solanki.

        Compiler warning about .objc_class_name_WAKScroller.

        * WebCore.iPhone.exp: WAKScroller no longer exists.

2010-10-12  Chris Fleizach  <cfleizach@apple.com>

        Reviewed by Pratik Solanki.

        <rdar://problem/8541438> User:navigation in the songs list of an album is not correct

        ARIA tables need to ignore column headers on iOS, because the iOS AX API expects
        only rows to be the children of a table.

        Test: platform/iphone-simulator/accessibility/accessibility-aria-table-children.html

        * accessibility/AccessibilityARIAGrid.cpp:
        (WebCore::AccessibilityARIAGrid::addChildren):

2010-10-12  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Carson.

        Remove NSURLConnectionIPhone. It was a thin wrapper around NSURLConnection
        and doesn't appear to be necessary anymore.

        * Configurations/WebCore.xcconfig:
        * WebCore.xcodeproj/project.pbxproj:
        * platform/network/iphone/NSURLConnectionIPhone.h: Removed.
        * platform/network/iphone/NSURLConnectionIPhone.m: Removed.
        * platform/network/mac/ResourceHandleMac.mm:
        (WebCore::ResourceHandle::start):

2010-10-12  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Carson.

        <rdar://problem/8540792> Remove Unused WebKitFoundationCachingEnabledPreferenceKey

        Remove an unused "enable foundation caching" setting. The setting
        was not being respected.

        * page/Settings.cpp:
        (WebCore::Settings::Settings):
        * page/Settings.h:
        * platform/network/iphone/NSURLConnectionIPhone.h:
        * platform/network/iphone/NSURLConnectionIPhone.m:
        (-[NSURLConnectionIPhone _initWithRequest:delegate:startImmediately:connectionProperties:]):
        (-[NSURLConnectionIPhone start]):
        * platform/network/mac/ResourceHandleMac.mm:
        (WebCore::ResourceHandle::start):

2010-10-11  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Carson.

        <rdar://problem/8538194> Remove Unused WebKitMaximumResourceDataLengthPreferenceKey

        Remove an unused "maximum resource data length" setting. The setting
        was not being respected and the desired behavior is to download the entire
        resource, no matter the length.

        * WebCore.iPhone.exp:
        * page/Settings.cpp:
        (WebCore::Settings::Settings):
        * page/Settings.h:
        * platform/network/iphone/NSURLConnectionIPhone.h:
        * platform/network/iphone/NSURLConnectionIPhone.m:
        (-[NSURLConnectionIPhone _initWithRequest:delegate:usesCache:startImmediately:connectionProperties:]):
        (-[NSURLConnectionIPhone start]):
        * platform/network/mac/ResourceHandleMac.mm:
        (WebCore::ResourceHandle::start):

2010-10-12  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/7963761> Animated image limits code in ImageLoader::notifyFinished() doesn't do anything

        Reviewed by David Kilzer.

        We got rid of animated image limits in iOS 3.0 as part of <rdar://problem/6646657>
        so we can get rid of the supporting code as well.

        * dom/Document.cpp:
        (WebCore::Document::Document):
        * dom/Document.h:
        * loader/CachedImage.cpp:
        (WebCore::CachedImage::animatedImageSize):
        (WebCore::CachedImage::checkOutOfMemory):
        * loader/CachedImage.h:
        * loader/ImageLoader.cpp:
        (WebCore::ImageLoader::notifyFinished):
        * platform/graphics/BitmapImage.cpp:
        (WebCore::BitmapImage::BitmapImage):
        (WebCore::BitmapImage::animatedImageSize):
        * platform/graphics/BitmapImage.h:
        * platform/graphics/Image.h:

2010-10-11  Joseph Pecoraro  <joepeck@webkit.org>

        <rdar://problem/8477980> Today's nytimes.com page crashes MobileSafari in WebCore::HTMLSourceElement::scheduleErrorEvent

        Merged ToT WebKit r69514.

    2010-10-11  Joseph Pecoraro  <joepeck@webkit.org>

            Reviewed by Eric Carlson.

            CRASH at WebCore::HTMLSourceElement::scheduleErrorEvent
            https://bugs.webkit.org/show_bug.cgi?id=46777

            Another case that could lead to an improper set of states between
            m_currentNode and m_loadingState. Also added an ASSERT and early
            return to prevent crashes if this case can still happen in other ways.

            * html/HTMLMediaElement.cpp:
            (WebCore::HTMLMediaElement::prepareForLoad):

2010-10-11  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/8536123> MobileSafari being terminated for holding lock on HTML5 database

        Reviewed by David Kilzer.

        * storage/Database.cpp:
        (WebCore::Database::incrementalVacuumIfNeeded): Take background task assertion so
        we don't get killed if user suspends MobileSafari while we are executing this
        method.

2010-10-10  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/8502487> Seed: Safari consistently crashes when using .pac file for proxy

        Reviewed by Geoff Garen and Alexey Proskuryakov.

        Call WTF::initializeMainThread() before JSC::initializeThreading()
        since the latter needs to check if it is running on the web thread. And
        the setup for that happens in initializeMainThread().

        * wak/WebCoreThread.mm:
        (RunWebThread):

2010-10-09  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/8532492> CrashTracer: [USER] 1 crash in DumpRenderTree at WebCore: WebCore::SocketStreamHandle::chooseProxyFromArray + 41

        Merged ToT WebKit r69442.

    2010-10-09  Pratik Solanki  <psolanki@apple.com>

        Reviewed by Dan Bernstein.

        https://bugs.webkit.org/show_bug.cgi?id=47450
        Crash in WebCore::SocketStreamHandle::chooseProxyFromArray because proxyArray passed is nil
        <rdar://problem/8244376>

        * platform/network/cf/SocketStreamHandleCFNet.cpp:
        (WebCore::SocketStreamHandle::chooseProxyFromArray): If proxyArray is
        NULL, return early to avoid crash.

2010-10-08  David Kilzer  <ddkilzer@apple.com>

        Move *.order files into the SDKROOT for iOS

        Reviewed by David Carson.

        Fixes: <rdar://problem/8454842> WebCore: Move order files to AppleInternal/OrderFiles

        * Configurations/Base.xcconfig: Updated SECTORDER_FLAGS_iphoneos
        to point to WebCore.order in the SDKROOT.  Removed
        SECTORDER_FLAGS_iphonesimulator since the *.order files are only
        installed in the iPhoneOS.Internal SDK and we don't care about
        Simluator performace.
        * WebCore.iPhone.order: Removed.

2010-10-07  Chris Fleizach  <cfleizach@apple.com>

        Reviewed by David Carson.

        <rdar://problem/8440211> aria-selected on role="tab" does not work in iOS

        Test: platform/iphone-simulator/accessibility/selected-buttons.html

        * accessibility/iphone/AccessibilityObjectWrapperIPhone.mm:
        (-[AccessibilityObjectWrapper accessibilityTraits]):

2010-10-07  Chris Fleizach  <cfleizach@apple.com>

        Reviewed by David Carson.

        <rdar://problem/8252597> UIAccessibility/WebCore crash when an AXObject outlives its parent
 
        An AXObject caches its ancestor UIWebView for performance, but this can crash if the AXObject
        outlives its UIWebView. This removes the caching. Very minor slowdown. 

        * accessibility/iphone/AccessibilityObjectWrapperIPhone.h:
        * accessibility/iphone/AccessibilityObjectWrapperIPhone.mm:
        (-[AccessibilityObjectWrapper _accessibilityWebDocumentView]):

2010-10-04  Anton D'Auria  <adauria@apple.com>

        Reviewed by David Carson.

        <rdar://problem/8524276> K48 App Store: Can't scroll app images unless viewing more - Jasper8C116

        Reverting the clean-up part of change for
        https://svn.apple.com/trac/puzzlebox/changeset/257939
        [<rdar://problem/8492937> Jasper: Can not sign back into iWork.com after
        signing out]. WKWindowMakeFirstResponder always fails on
        WebEventMouseDown in MobileSafari, but not in other apps like App Store
        and iBooks on WebEventTouchBegin.

        * wak/WKWindow.mm:
        (WKWindowSendEvent): Adding back call to WKWindowMakeFirstResponder.

2010-10-06  Ian Henderson  <ianh@apple.com>

        Reviewed by David Carson.

        This patch fixes the root cause of <rdar://problem/8348558> (REGRESSION
        (3.2.2-Jasper8C81): Video plays without user interaction on
        money.cnn.com).  The load method cleared all restrictions on the media
        element, as if it were invoked by a user action, even if no user action
        was involved.  The fix is to check explicitly whether the load
        originated from a user action.

        This patch also reverts the original fix for that bug, as well as the
        fixes for the regressions it caused.  In particular,

        rdar://problem/8348558, fixed by
        https://svn.apple.com/trac/puzzlebox/changeset/249480

        caused:
        rdar://problem/8500006, fixed by the current patch, as well as

        rdar://problem/8382826, fixed by
        https://svn.apple.com/trac/puzzlebox/changeset/251127.

        This latter patch caused
        rdar://problem/8405758, fixed by
        https://svn.apple.com/trac/puzzlebox/changeset/253742.

        All of these other patches are reverted and replaced by this one. I have
        verified that none of the above bugs manifest after applying this patch.


        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::load):
        (WebCore::HTMLMediaElement::updatePlayState):

2010-10-05  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/8512080> REGRESSION: K48 > Production> > Main Recommendation panel has redraw/animation issues when scrolling in new pages from left and right.
        Reviewed by Simon Fraser.

        Back out the erroneous change in https://svn.apple.com/trac/puzzlebox/changeset/257469 which
        makes it too aggressive to switch layers to tiled layers and caused regression in App Store.

        Add free memory level 45 to get finer control on contentsScale property of layers bigger than
        (512x512). The change makes sure we don't regress on <rdar://problem/8132654> MobileSafari jetsam'd
        when zooming-in www.apple.com/appletv.

        * platform/graphics/mac/GraphicsLayerCA.mm:
        (WebCore::GraphicsLayerCA::requiresTiledLayer):
        (WebCore::GraphicsLayerCA::clampedContentsScaleForScale):

2010-10-04  Anton D'Auria  <adauria@apple.com>

        Reviewed by David Carson.

        <rdar://problem/8492937> Jasper: Can not sign back into iWork.com after signing out

        We attempted to set the first responder three times on a tap:
        in -[UIWebDocumentView(Interaction) attemptClick:], if UIWebDocumentView
        isn't one; when we generate a WebEventMouseDown, in [WKWindow WKWindowSendEvent];
        and in WebCore if the mousedown event wasn't swallowed.

        -[UIWebDocumentView(Interaction) attemptClick:] fails to set itself as a
        first responder on reload/back/forward. We create a new WebHTMLView and
        UIWebDocumentView isn't notified of this. The second always fails after the
        fix for <rdar://problem/8159628> "Can't input data to authorize for Bank of
        Ireland on-line banking", so it is removed in this patch. The third does not
        set a first responder if the mousedown event is swallowed.

        This fix updates the first responder when we create a new WebHTMLView, as is
        done on the Desktop, in -[WebFrameView(WebInternal) _setDocumentView:].

        * wak/WKWindow.mm:
        (WKWindowSendEvent): Removing unnecessary WKWindowMakeFirstResponder call because it
        always fails after fix for <rdar://problem/8159628>.

2010-10-04  Dan Bernstein  <mitz@apple.com>

        Reviewed by Brad Moore.

        <rdar://problem/8492836> REGRESSION (Jasper8C107): Incorrect vertical alignment of Emoji in Safari title bar

        * platform/graphics/mac/FontMac.mm: Start out by ceil()ing the y coordinate, to simulate Core Graphics�s
        lack of subpixel positioning.

2010-10-04  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by Pratik Solanki.

        <rdar://problem/8510784> Application Cache Background Transaction ASSERT should be Promoted

        It is possible to execute SQL outside of a transaction in ApplicationCacheStorage::loadCacheGroup.
        The ASSERT should be upgraded to increment the transaction count to guarantee it is
        protected in a background task. This is currently the only case of a private function
        called from a public function without a transaction.

        * loader/appcache/ApplicationCacheStorage.cpp:
        (WebCore::ApplicationCacheStorage::loadCacheGroup):

2010-10-02  Yongjun Zhang  <yongjun_zhang@apple.com>

       <rdar://problem/8132654> MobileSafari jetsam'd when zooming-in www.apple.com/appletv.

       Reviewed by Simon Fraser.

       Clamping the contentScale property of layer if its scaled size is big (>1024x1024).  This way
       we can prevent layers generating big backing stores which consumes too much memory.  In addition,
       we also clamp contentScale if layer is bigger than (512x512) AND system free memory level is
       lower than 30 to avoid MobileSafari being jettisoned.

        * platform/graphics/GraphicsLayer.cpp:
        (WebCore::GraphicsLayer::GraphicsLayer):
        * platform/graphics/GraphicsLayer.h:
        * platform/graphics/mac/GraphicsLayerCA.h:
        (WebCore::GraphicsLayerCA::contentsScale):
        * platform/graphics/mac/GraphicsLayerCA.mm:
        (WebCore::GraphicsLayerCA::GraphicsLayerCA):
        (WebCore::GraphicsLayerCA::setContentsScale):
        (WebCore::GraphicsLayerCA::requiresTiledLayer):
        (WebCore::GraphicsLayerCA::clampedContentsScaleForScale):

2010-10-02  Paul Knight  <pknight@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/8463725> Jasper: Touchscreen Becomes Inactive while Displaying Ads

        Fix static caching of linked-on-or-after check.

        * page/iphone/EventHandlerIPhoneTouch.cpp:
        (WebCore::shouldPassTouchEventsToSubframes):

2010-10-01  Paul Knight  <pknight@apple.com>

        Reviewed by David Carson.

        <rdar://problem/8463725> Jasper: Touchscreen Becomes Inactive while Displaying Ads

        A third party application is relying on receiving touch events in an iframe behind an overlaid div.
        Place the changes made for <rdar://problem/7992472> iPad: iframe steals events from overlaid DOM behind a linked-on-or-after check.

        * page/iphone/EventHandlerIPhoneTouch.cpp:
        (WebCore::shouldPassTouchEventsToSubframes):
        (WebCore::EventHandler::handleTouchEvent):

2010-10-01  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Dan Bernstein.

        <rdar://problem/8505133> iframes with composited content fail to display, or content shows in the wrong place

        Fix display of composited content in frames and iframes by adopting
        code that came with that Havoc merge that allows composited iframe
        content to be hosted via compositing layers up to the root.
        
        Now that we do this, we can remove old iPhone code that special-cases the positioning
        of the root layer.

        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::updateRootLayerPosition):
        (WebCore::RenderLayerCompositor::shouldPropagateCompositingToEnclosingIFrame):

2010-10-01  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/8467133> iOS: Stale pointer in SVGResourceFilter (Chromium Bug 45659)

        Merged ToT WebKit r59081, r60541.

    2010-06-01  Dirk Schulze  <krit@webkit.org>

        Reviewed by Nikolas Zimmermann.

        SVG repaintRect should be empty if content got clipped away
        https://bugs.webkit.org/show_bug.cgi?id=39965
        
        The SVG repaintRect of the renderer was not empty, if the content got clipped away.
        The MaskerData/ClipperData <-> RenderObject mapping is set up during the layout phase now, to be able to
        relayout a RenderObject, if it's repaintRect is empty. This has the following reason:
        We apply the object to the resource on painting at the moment.
        With an empty repaintRect, paint() quits earlier and therefore the object doesn't get applied to the resource.
        This can cause problems, if the resource get changed by animations or scripts.
        On a change, the resource tells all it's callers to relayout.
        If the reference to the caller (our RenderObject) is missing, the object won't ever update
        and therefore won't get drawn.
        We already have LayoutTests that cover this problem. The complete repaintRect calculation
        (including the smallest clipping area and shadow size calculation) moved from the renderers to SVGRenderSupport.
        This eliminates redundant code.

        * rendering/RenderPath.cpp:
        (WebCore::RenderPath::updateCachedBoundaries):
        * rendering/RenderSVGContainer.cpp:
        (WebCore::RenderSVGContainer::repaintRectInLocalCoordinates):
        * rendering/RenderSVGImage.cpp:
        (WebCore::RenderSVGImage::repaintRectInLocalCoordinates):
        * rendering/RenderSVGResource.h:
        * rendering/RenderSVGResourceClipper.cpp:
        (WebCore::RenderSVGResourceClipper::resourceBoundingBox):
        * rendering/RenderSVGResourceClipper.h:
        * rendering/RenderSVGResourceFilter.cpp:
        (WebCore::RenderSVGResourceFilter::resourceBoundingBox):
        * rendering/RenderSVGResourceFilter.h:
        * rendering/RenderSVGResourceGradient.h:
        (WebCore::RenderSVGResourceGradient::resourceBoundingBox):
        * rendering/RenderSVGResourceMarker.h:
        (WebCore::RenderSVGResourceMarker::resourceBoundingBox):
        * rendering/RenderSVGResourceMasker.cpp:
        (WebCore::RenderSVGResourceMasker::resourceBoundingBox):
        * rendering/RenderSVGResourceMasker.h:
        * rendering/RenderSVGResourcePattern.h:
        (WebCore::RenderSVGResourcePattern::resourceBoundingBox):
        * rendering/RenderSVGResourceSolidColor.h:
        (WebCore::RenderSVGResourceSolidColor::resourceBoundingBox):
        * rendering/RenderSVGText.cpp:
        (WebCore::RenderSVGText::strokeBoundingBox):
        (WebCore::RenderSVGText::repaintRectInLocalCoordinates):
        * rendering/SVGRenderSupport.cpp:
        (WebCore::SVGRenderBase::intersectRepaintRectWithResources):
        * rendering/SVGRenderSupport.h:
        * rendering/SVGRenderTreeAsText.cpp:
        (WebCore::writeResources):
        * rendering/style/SVGRenderStyle.h:
        (WebCore::SVGRenderStyle::hasClipper):
        (WebCore::SVGRenderStyle::hasMasker):
        (WebCore::SVGRenderStyle::hasFilter):

    2010-05-10  Dirk Schulze  <krit@webkit.org>

        Reviewed by Nikolas Zimmermann.

        Further optimization for SVG's repaintRect calculation
        https://bugs.webkit.org/show_bug.cgi?id=38820
        
        This is a further optimization to get smaller repaintRects on SVG objects
        in combination with masker or clipper resources.
        Masker takes the unite of all stroke boundaries of it's childs.
        Both, clipper and masker, store this union to avoid multiple calls of the childs
        and the unite calculations now.
        The unite rect can be transformed to any targets objectBoundingBox, if the content
        unit of the resource is set to objectBoundingBoxMode.
        This speeds up the use of resources with multiple target objects.
        
        No behavior changes, the smaller repaintRects cause updates for DRT results.

        * rendering/RenderSVGResource.h:
        * rendering/RenderSVGResourceClipper.cpp:
        (WebCore::RenderSVGResourceClipper::invalidateClients):
        (WebCore::RenderSVGResourceClipper::calculateClipContentRepaintRect):
        (WebCore::RenderSVGResourceClipper::resourceBoundingBox):
        * rendering/RenderSVGResourceClipper.h:
        * rendering/RenderSVGResourceFilter.cpp:
        (WebCore::RenderSVGResourceFilter::resourceBoundingBox):
        * rendering/RenderSVGResourceFilter.h:
        * rendering/RenderSVGResourceGradient.h:
        (WebCore::RenderSVGResourceGradient::resourceBoundingBox):
        * rendering/RenderSVGResourceMarker.h:
        (WebCore::RenderSVGResourceMarker::resourceBoundingBox):
        * rendering/RenderSVGResourceMasker.cpp:
        (WebCore::RenderSVGResourceMasker::invalidateClients):
        (WebCore::RenderSVGResourceMasker::createMaskImage):
        (WebCore::RenderSVGResourceMasker::calculateMaskContentRepaintRect):
        (WebCore::RenderSVGResourceMasker::resourceBoundingBox):
        * rendering/RenderSVGResourceMasker.h:
        * rendering/RenderSVGResourcePattern.h:
        (WebCore::RenderSVGResourcePattern::resourceBoundingBox):
        * rendering/RenderSVGResourceSolidColor.h:
        (WebCore::RenderSVGResourceSolidColor::resourceBoundingBox):

2010-10-01  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/8305167> iOS: ZDI-CAN-874: Apple Webkit WholeText Integer Overflow Remote Code Execution Vulnerability (46848)

        Merged ToT WebKit r68705.

    2010-09-29  Anders Carlsson  <andersca@apple.com>

        Reviewed by Darin Adler.

        Add additional check to Text::wholeText.
        <rdar://problem/8304795>

        * dom/Text.cpp:
        (WebCore::Text::wholeText):

2010-10-01  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/8498709> ALWAYS_INLINE should be specified on the function declaration

        Merge in r68899.

    2010-10-01  Pratik Solanki  <psolanki@apple.com>

        Reviewed by Geoffrey Garen.
        Specify ALWAYS_INLINE at function declaration not function definition
        https://bugs.webkit.org/show_bug.cgi?id=46960

        For functions defined with ALWAYS_INLINE, add the attribute to the declaration as well.

        * css/CSSStyleSelector.h:
        * rendering/InlineIterator.h:
        * rendering/style/RenderStyle.h:

2010-09-30  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/8498304> Merge r62771 - WebCore/benchmarks/parser/html-parser.html spends a lot of time in deprecatedParseURL

        Merge in r62771 for small boost (0.5%) in PLT power-pages.

    2010-07-08  Eric Seidel  <eric@webkit.org>

        Reviewed by Adam Barth.

        WebCore/benchmarks/parser/html-parser.html spends a lot of time in deprecatedParseURL
        https://bugs.webkit.org/show_bug.cgi?id=41807

        Wow.  This was an awful bug.  We were always taking the slow case
        every time we parsed a URL.  This is about a 10% speedup on our
        parsing benchmark, and might cause as much as a 1% speedup for Apple's
        PLT (even though I can't run that).

        We still spend a lot of time in deprecatedParseURL.  We might consider
        inlining it if its being kept around much longer.

        No behavioral change, just fixing a broken optimization.

        * css/CSSHelper.cpp:
        (WebCore::deprecatedParseURL):
         - We only need to strip characters <= '\r', not >.

2010-09-29  Joseph Pecoraro  <joepeck@webkit.org>

        <rdar://problem/8477980> Today's nytimes.com page crashes MobileSafari in WebCore::HTMLSourceElement::scheduleErrorEvent

        Merged ToT WebKit r68682.

    2010-09-29  Joseph Pecoraro  <joepeck@webkit.org>

            Reviewed by Simon Fraser.

            CRASH at WebCore::HTMLSourceElement::scheduleErrorEvent
            https://bugs.webkit.org/show_bug.cgi?id=46777

            It should not be possible to get to be in the LoadingFromSourceElement
            state with a null current source node. This was a possible scenario
            where the current source node was cleared but the load state was not
            cleared as well. Tried and could not create a test case for this.

            * html/HTMLMediaElement.cpp:
            (WebCore::HTMLMediaElement::userCancelledLoad): clear the load state because we also clear the current source node.

2010-09-29  Aaron Golden  <agolden@apple.com>

        Reviewed by Cameron Zwarich.

        <rdar://problem/8464078> Rotating a webpage caused large black regions to be drawn (8C5091e)

        Reversing this change: https://svn.apple.com/trac/puzzlebox/changeset/250192, which caused the
        regression.  The bug it fixed was not a P1, or even a regression in Jasper:

        <rdar://problem/8064938> REGRESSION: MobileSafari hangs when editing search field on netflix.com (8A293)

        * page/FrameView.cpp:
        (WebCore::FrameView::FrameView):
        (WebCore::FrameView::~FrameView):
        (WebCore::FrameView::reset):
        (WebCore::FrameView::layout):
        (WebCore::FrameView::unscheduleRelayout):
        * page/FrameView.h:

2010-09-29  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Carson and David Kilzer.

        <rdar://problem/8342011> Regression: (Havoc Merge) Left column in some Mediawiki pages below, instead of next to, right column

        Enable the Mediawiki site specific quirk to ignore KHTMLFixes.css rules.
        Investigate other site specific quirks later in <rdar://problem/8493309>.

        * css/CSSImportRule.cpp:
        (WebCore::CSSImportRule::setCSSStyleSheet):
        * html/HTMLLinkElement.cpp:
        (WebCore::HTMLLinkElement::setCSSStyleSheet):

2010-09-29  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/8482520> iOS: Use after free in InlineBox::dirtyLineBoxes() (46376)

        Merged ToT WebKit r68485.

    2010-09-27  Abhishek Arya  <inferno@chromium.org>

        Reviewed by Dan Bernstein.

        When the block RunIn is destroyed, its line box tree is not deleted. As a result, it
        gets later used during dirtying of inline text boxes step where this deleted parent is
        accessed. The fix is to delete the line box tree before destroying the runin block.

        https://bugs.webkit.org/show_bug.cgi?id=46376

        Test: fast/text/dirty-inline-textbox-crash.html

        * rendering/RenderText.cpp:
        (WebCore::RenderText::dirtyLineBoxes):

2010-09-29  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/8469284> iOS: Deleted elements lingering in Document::m_elementsById (46222)

        Merged and modified ToT WebKit r68096.

        * dom/Attr.cpp:
        (WebCore::Attr::setValue): use HTMLNames::idAttr since Document::idAttributeName() is not yet merged in PEP WebKit.

    2010-09-22  Alexey Proskuryakov  <ap@apple.com>

            Reviewed by Adam Barth.

            https://bugs.webkit.org/show_bug.cgi?id=46222
            <rdar://problem/8461701> Document.getElementById() malfunctions if ID was changed via Attr node modification.

            Test: fast/dom/Attr/change-id-via-attr-node-value.html

            * dom/Attr.h:
            * dom/Attr.cpp:
            (WebCore::Attr::setValue): Separated a version callable from WebCore from one avaiable to JS.
            Attr::setValue() can be called from Element::setAttribute(), and we don't want to update
            m_elementsById (or to call attributeChanged()) twice in that case.
            (WebCore::Attr::childrenChanged): If Attr's node children change, id changes.

            * dom/Document.cpp: (WebCore::Document::removeElementById): Added an assertion that we are
            not trying to remove something that isn't there. If we are, we probably failed to update
            m_elementsById earlier.

            * dom/Element.cpp: (WebCore::Element::setAttribute): If the attribute has an Attr node, its
            children should be updated to match attribute value.

2010-09-27  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/8482550> iOS: Bad cast from RenderInline to RenderBox in positionListMarker (46384)

        Merged ToT WebKit r68408.

    2010-09-27  Abhishek Arya  <inferno@chromium.org>

        Reviewed by Dave Hyatt.

        Fix memory safety issue during positioning list marker as a result of assuming 
        that list item's parent can always be casted to a RenderBox. The display of the parent
        can be manipluated using css as Inline which causes a bad cast.

        https://bugs.webkit.org/show_bug.cgi?id=46384

        Test: fast/lists/parent-box-not-box-crash.html

        * rendering/RenderListItem.cpp:
        (WebCore::RenderListItem::positionListMarker):
        * rendering/RenderListMarker.cpp:
        (WebCore::RenderListMarker::layout):

2010-09-27  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/8467163> iOS: Bad cast on RenderSVGTransformableContainer in RenderView::docHeight() (45562)

        Merged ToT WebKit r67236.

    2010-09-10  Justin Schuh  <jschuh@chromium.org>

        Reviewed by Darin Adler.

        SVGGElement::rendererIsNeeded should return false when parent isn't SVG
        https://bugs.webkit.org/show_bug.cgi?id=45562

        Test: svg/custom/g-outside-svg.html

        * svg/SVGGElement.cpp:
        (WebCore::SVGGElement::rendererIsNeeded):
        * svg/SVGGElement.h:

2010-09-27  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/8477634> iOS: Bad cast to SVGColor in colorFromSVGColorCSSColor (46471)

        Merged ToT WebKit r68340.

    2010-09-25  Abhishek Arya  <inferno@chromium.org>

        Reviewed by Nikolas Zimmermann.

        Fix the macro to bail out after setting the SVG style to 'initial'. Check that color is
        SVGColor before calling colorFromSVGColorCSSValue which makes sure we don't set invalid
        color. Also, doing the static cast in the caller and keeping the function
        colorFromSVGColorCSSValue clean to accept only take SVGColor objects.
        
        https://bugs.webkit.org/show_bug.cgi?id=46471

        Test: svg/css/invalid-color-crash.svg

        * css/SVGCSSStyleSelector.cpp:
        (WebCore::colorFromSVGColorCSSValue):
        (WebCore::CSSStyleSelector::applySVGProperty):

2010-09-27  Justin Garcia  <justin.garcia@apple.com>

        Reviewed by Brad Moore.

        <rdar://problem/8463727> Crash pasting into a Mail blockquote
        
        iPhone only code that prevents the nesting of block elements on paste needs to bail out if we are 
        breaking up a Mail blockquote, since the block that we would otherwise displace is either
        inside that Mail blockquote or the blockquote itself.  This code will be removed once:
        
        https://bugs.webkit.org/show_bug.cgi?id=24009
        
        is landed in open source and merged.

        * editing/ReplaceSelectionCommand.cpp:
        (WebCore::ReplaceSelectionCommand::doApply):

2010-09-27  David Kilzer  <ddkilzer@apple.com>

        Follow-up fix: <rdar://problem/8472308> iOS: Bad cast in 3d rendering in RenderObject::getTransformFromContainer (46365)

        Merge ToT WebKit r68278.

    2010-09-24  Abhishek Arya  <inferno@chromium.org>

        Reviewed by Simon Fraser.

        Comply with spec by generalizing container on which transforms can be applied.
        https://bugs.webkit.org/show_bug.cgi?id=46485

        Already covered by existing tests.

        * rendering/RenderObject.cpp:
        (WebCore::RenderObject::getTransformFromContainer):

2010-09-26  Dan Bernstein  <mitz@apple.com>

        Reviewed by Brad Moore.

        <rdar://problem/7614661> Use CoreText bitmap support to render Emoji

        * Resources/images/emoji-*.png: Removed.
        * WebCore.xcodeproj/project.pbxproj: Removed emoji-*.png.
        (WebCore::SimpleFontData::SimpleFontData): Removed code that adjusts vertical metrics
        and other member variables for the Emoji font. Moved some of it to platformInit().
        * platform/graphics/SimpleFontData.h:
        (WebCore::SimpleFontData::isImageFont): Removed.
        * platform/graphics/mac/ComplexTextController.cpp:
        (WebCore::ComplexTextController::adjustGlyphsAndAdvances): Renamed local variable and
        changed to use FontPlatformData::m_isEmoji instead of SimpleFontData::isImageFont().
        * platform/graphics/mac/FontCacheMac.mm:
        (WebCore::FontCache::getFontDataForCharacters): Renamed useImageFont to useEmojiFont.
        (WebCore::FontCache::createFontPlatformData): Removed most of the special-case code for
        Emoji, except for setting the m_isEmoji (previously m_isImageFont) member of the
        FontPlatformData to true.
        * platform/graphics/mac/FontMac.mm:
        (WebCore::smileImage): Removed.
        (WebCore::Font::drawGlyphs): Removed image-based rendering code. Adjust the anchor point
        for Emoji and suppress synthetic bold for Emoji.
        * platform/graphics/mac/FontPlatformData.h:
        (WebCore::FontPlatformData::FontPlatformData): Updated for the renaming of m_isImageFont
        to m_isEmoji.
        (WebCore::FontPlatformData::hash): Ditto.
        (WebCore::FontPlatformData::operator==): Ditto.
        * platform/graphics/mac/FontPlatformDataMac.mm:
        (WebCore::FontPlatformData::FontPlatformData): Ditto.
        (WebCore::FontPlatformData::operator=): Ditto.
        (WebCore::FontPlatformData::ctFont): Special-case Emoji to constrain the glyph size.
        * platform/graphics/mac/SimpleFontDataMac.mm:
        (WebCore::SimpleFontData::platformInit): Moved adjusted vertical metrics for Emoji from
        the SimpleFontData constructor to here.
        (WebCore::SimpleFontData::platformWidthForGlyph): Updated for the renaming of m_isImageFont
        to m_isEmoji.

2010-09-25  Dean Jackson  <dino@apple.com>

        Reviewed by Simon Fraser and David Kilzer.

        <rdar://problem/8310463> clean up and implement DeviceOrientation

        Implement the DeviceOrientationEvent, including the iOS client that
        talks to the Core Motion framework. Since there already was a DeviceMotionEvent
        implementation, we now share the hardware client between the two event
        controllers.

        * WebCore.xcodeproj/project.pbxproj: new files
        * dom/DeviceMotionClient.h: use a shared CoreMotionManager
        * dom/DeviceOrientationClient.h:
        * dom/DeviceOrientationController.cpp:
        (WebCore::DeviceOrientationController::suspendUpdates):
        (WebCore::DeviceOrientationController::resumeUpdates):
        * dom/DeviceOrientationController.h:
        (WebCore::DeviceOrientationController::DeviceOrientationController::create):
        * dom/Document.cpp:
        (WebCore::Document::Document):
        (WebCore::Document::~Document):
        (WebCore::Document::suspendActiveDOMObjects):
        (WebCore::Document::resumeActiveDOMObjects):
        (WebCore::Document::stopActiveDOMObjects):
        (WebCore::Document::deviceOrientationController): We now have a new
        controller implementation on Document
        * dom/Document.h:
        * page/DOMWindow.cpp:
        (WebCore::DOMWindow::addEventListener):
        (WebCore::DOMWindow::removeEventListener):
        (WebCore::DOMWindow::removeAllEventListeners): Suspend the
        orientation controller when necessary
        * page/Page.cpp:
        (WebCore::Page::Page):
        * page/Page.h: The ToT implementation has the clients on Page, which
        makes it annoying to control. iOS implements the feature as part of Document.
        We'll try to merge this back to ToT soon, but it involves coordination
        with the Google engineers.
        * platform/iphone/CoreMotionManager.h: Added.
        * platform/iphone/CoreMotionManager.mm: Added.
        (+[CoreMotionManager sharedManager]):
        (-[CoreMotionManager init]):
        (-[CoreMotionManager dealloc]):
        (-[CoreMotionManager addMotionClient:WebCore::]):
        (-[CoreMotionManager removeMotionClient:WebCore::]):
        (-[CoreMotionManager addOrientationClient:WebCore::]):
        (-[CoreMotionManager removeOrientationClient:WebCore::]):
        (-[CoreMotionManager gyroAvailable]):
        (-[CoreMotionManager initializeOnMainThread]):
        (-[CoreMotionManager checkClientStatus]):
        (-[CoreMotionManager update]):
        (-[CoreMotionManager sendAccelerometerData:]):
        (-[CoreMotionManager sendMotionData:]):
        * platform/iphone/DeviceMotionClientIPhone.h:
        * platform/iphone/DeviceMotionClientIPhone.mm: The actual client
        implementation for iOS
        (WebCore::DeviceMotionClientIPhone::~DeviceMotionClientIPhone):
        (WebCore::DeviceMotionClientIPhone::startUpdating):
        (WebCore::DeviceMotionClientIPhone::stopUpdating):
        (WebCore::DeviceMotionClientIPhone::deviceMotionControllerDestroyed):
        (WebCore::DeviceMotionClientIPhone::motionChanged):
        * platform/iphone/DeviceOrientationClientIPhone.h: Added.
        (WebCore::DeviceOrientationClientIPhone::create):
        * platform/iphone/DeviceOrientationClientIPhone.mm: Added.
        (WebCore::DeviceOrientationClientIPhone::DeviceOrientationClientIPhone):
        (WebCore::DeviceOrientationClientIPhone::~DeviceOrientationClientIPhone):
        (WebCore::DeviceOrientationClientIPhone::setController):
        (WebCore::DeviceOrientationClientIPhone::startUpdating):
        (WebCore::DeviceOrientationClientIPhone::stopUpdating):
        (WebCore::DeviceOrientationClientIPhone::lastOrientation):
        (WebCore::DeviceOrientationClientIPhone::deviceOrientationControllerDestroyed):
        (WebCore::DeviceOrientationClientIPhone::orientationChanged):

2010-09-25  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/8466972> iOS: crash when trying to access a stale Node pointer in FocusController::setFocusedNode (44226)

        Merged ToT WebKit r65748.

    2010-08-20  Tony Chang  <tony@chromium.org>

            Reviewed by Adam Barth.

            crash when trying to access a stale Node pointer in FocusController::setFocusedNode
            https://bugs.webkit.org/show_bug.cgi?id=44226

            Test: fast/events/focus-change-crash2.html

            * page/FocusController.cpp:
            (WebCore::FocusController::setFocusedNode): add a ref to prevent the focused node from being deleted

2010-09-24  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/8469249> iOS: Bad cast in ApplyStyleCommand::applyInline (46194)

        Merged ToT WebKit r67967.

        Only took the first part of the patch to ApplyStyleCommand.cpp
        since the other changes depend on ToT WebKit r65208, which has
        not been merged yet.

    2010-09-21  Abhishek Arya  <inferno@chromium.org>

        Reviewed by Dave Hyatt.

        Take isValueList() checks out of the asserts for memory safety.
        https://bugs.webkit.org/show_bug.cgi?id=46194

        Test: editing/execCommand/apply-style-text-decoration-crash.html

        * editing/ApplyStyleCommand.cpp:
        (WebCore::StyleChange::extractTextStyles):
        (WebCore::ApplyStyleCommand::applyInlineStyleToPushDown):

2010-09-24  David Kilzer  <ddkilzer@apple.com>

        Let Xcode have its way with the project files

        * WebCore.xcodeproj/project.pbxproj: Updated.

2010-09-24  Pratik Solanki  <psolanki@apple.com>

        Reviewed by David Carson and Joe Pecoraro.

        <rdar://problem/8153147> MobileSafari is being terminated for holding a lock on local storage databases

        Take a background task assertion on all database accesses so that we
        don't get suspended while we still have a lock on the database file.
        WebKit registers a client with SQLiteDatabaseTracker at database
        initialization time. SQLiteDatabaseTracker calls the client APIs to
        start and stop background tasks. The code was moved from DatabaseTracker
        to this file so that it could be used for more than just the HTML5
        databases.

        * WebCore.iPhone.exp:
        * WebCore.xcodeproj/project.pbxproj:
        * loader/appcache/ApplicationCacheStorage.cpp: Protect code that uses SQLiteStatements directly.
        (WebCore::ApplicationCacheStorage::loadCacheGroup):
        (WebCore::ApplicationCacheStorage::loadManifestHostHashes):
        (WebCore::ApplicationCacheStorage::cacheGroupForURL):
        (WebCore::ApplicationCacheStorage::fallbackCacheGroupForURL):
        (WebCore::ApplicationCacheStorage::quotaForOrigin):
        (WebCore::ApplicationCacheStorage::usageForOrigin):
        (WebCore::ApplicationCacheStorage::remainingSizeForOriginExcludingCache):
        (WebCore::ApplicationCacheStorage::storeUpdatedQuotaForOrigin):
        (WebCore::ApplicationCacheStorage::executeSQLCommand):
        (WebCore::ApplicationCacheStorage::verifySchemaVersion):
        (WebCore::ApplicationCacheStorage::openDatabase):
        (WebCore::ApplicationCacheStorage::executeStatement):
        (WebCore::ApplicationCacheStorage::store):
        (WebCore::ApplicationCacheStorage::storeUpdatedType):
        (WebCore::ApplicationCacheStorage::ensureOriginRecord):
        (WebCore::ApplicationCacheStorage::loadCache):
        (WebCore::ApplicationCacheStorage::remove):
        (WebCore::ApplicationCacheStorage::empty):
        (WebCore::ApplicationCacheStorage::storeCopyOfCache):
        (WebCore::ApplicationCacheStorage::manifestURLs):
        (WebCore::ApplicationCacheStorage::cacheGroupSize):
        (WebCore::ApplicationCacheStorage::vacuumDatabaseFile):
        * platform/sql/SQLiteTransaction.cpp: increment/decrement database
        access counter when transaction begins/ends.
        (WebCore::SQLiteTransaction::begin):
        (WebCore::SQLiteTransaction::commit):
        (WebCore::SQLiteTransaction::rollback):
        (WebCore::SQLiteTransaction::stop):
        * platform/sql/iphone/SQLiteDatabaseTracker.cpp: Added. Utility class
        whose function is to track database access and call delegate methods
        that start/end background task assertions.
        (WebCore::SQLiteDatabaseTracker::SQLiteDatabaseTracker):
        (WebCore::SQLiteDatabaseTracker::tracker):
        (WebCore::SQLiteDatabaseTracker::setClient):
        (WebCore::transactionInProgressMutex):
        (WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount):
        (WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount):
        (WebCore::SQLiteDatabaseTracker::transactionInProgressCount):
        * platform/sql/iphone/SQLiteDatabaseTracker.h: Added.
        (WebCore::SQLiteTransactionInProgressAutoCounter::SQLiteTransactionInProgressAutoCounter):
        (WebCore::SQLiteTransactionInProgressAutoCounter::~SQLiteTransactionInProgressAutoCounter):
        * platform/sql/iphone/SQLiteDatabaseTrackerClient.h: Added.
        (WebCore::SQLiteDatabaseTrackerClient::~SQLiteDatabaseTrackerClient):
        * storage/Database.cpp:
        (WebCore::Database::performOpenAndVerify):
        * storage/DatabaseTracker.cpp:
        * storage/DatabaseTracker.h:
        * storage/DatabaseTrackerClient.h:
        * storage/SQLTransaction.cpp:
        (WebCore::SQLTransaction::checkAndHandleClosedDatabase):
        (WebCore::SQLTransaction::openTransactionAndPreflight):
        (WebCore::SQLTransaction::postflightAndCommit):
        (WebCore::SQLTransaction::cleanupAfterTransactionErrorCallback):
        * storage/StorageAreaSync.cpp:
        (WebCore::StorageAreaSync::performImport):
        (WebCore::StorageAreaSync::sync):

2010-09-24  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/8472308> iOS: Bad cast in 3d rendering in RenderObject::getTransformFromContainer (46365)

        Merge ToT WebKit r68158.

    2010-09-23  Abhishek Arya  <inferno@chromium.org>

        Reviewed by Dave Hyatt.

        Fix the memory safety issue by checking containerObject is a RenderBox
        before doing the transforms.
        https://bugs.webkit.org/show_bug.cgi?id=46365

        Test: compositing/overflow/get-transform-from-non-box-container.html

        * rendering/RenderObject.cpp:
        (WebCore::RenderObject::getTransformFromContainer):

2010-09-24  David Kilzer  <ddkilzer@apple.com>

        BUILD FIX: <rdar://problem/8310463> clean up and implement DeviceOrientation

        Reviewed by Cameron Zwarich.

        * platform/iphone/DeviceMotionClientIPhone.mm:
        (WebCore::DeviceMotionClientIPhone::motionChanged): Updated the
        Simulator code path to match the hardware code path when
        building the WebCore::DeviceMotionData object.

2010-09-24  Dean Jackson  <dino@apple.com>

        <rdar://problem/8310463> clean up and implement DeviceOrientation

        Merge ToT r68236 in preparation for DeviceOrientationEvent completion. This
        required some changes in DeviceMotionClientIPhone. The patch breaks
        the V8 build in Open Source, but the JSC side is fine.

    2010-09-23  Hans Wennborg  <hans@chromium.org>

            Reviewed by Simon Fraser.

            Update DeviceMotionEvent to spec
            https://bugs.webkit.org/show_bug.cgi?id=46344

            The spec has changed: the DeviceMotionEvent attributes accelerationX,
            accelerationY, etc. have been baked into an 'acceleration' attribute
            which returns an object with x, y, and z values. Likewise for the
            rotation rate. The 'accelerationIncludingGravity' attribute is new.

            * WebCore.exp.in:
            The DeviceMotionData::create member function has changed. Also export
            create functions for DeviceMotionData::Acceleration and RotationRate.

            * bindings/js/JSDeviceMotionEventCustom.cpp:
            (WebCore::JSDeviceMotionEvent::acceleration):
            (WebCore::JSDeviceMotionEvent::accelerationIncludingGravity):
            (WebCore::JSDeviceMotionEvent::rotationRate):
            (WebCore::JSDeviceMotionEvent::initDeviceMotionEvent):
            Manually create and return objects with the right attributes for
            acceleration, accelerationIncludingGravity, and rotationRate.
            When creating the DeviceMotionData object in initDeviceMotionEvent,
            accept any input objects that have the right attributes.

            * bindings/v8/custom/V8DeviceMotionEventCustom.cpp:
            (WebCore::V8DeviceMotionEvent::accelerationAccessorGetter):
            (WebCore::V8DeviceMotionEvent::accelerationIncludingGravityAccessorGetter):
            (WebCore::V8DeviceMotionEvent::rotationRateAccessorGetter):
            (WebCore::V8DeviceMotionEvent::initDeviceMotionEventCallback):
            V8 counterpart to the JSC code above.

            * dom/DeviceMotionData.cpp:
            (WebCore::DeviceMotionData::Acceleration::create):
            (WebCore::DeviceMotionData::Acceleration::Acceleration):
            (WebCore::DeviceMotionData::RotationRate::create):
            (WebCore::DeviceMotionData::RotationRate::RotationRate):
            (WebCore::DeviceMotionData::create):
            (WebCore::DeviceMotionData::DeviceMotionData):
            * dom/DeviceMotionData.h:
            (WebCore::DeviceMotionData::Acceleration::canProvideX):
            (WebCore::DeviceMotionData::Acceleration::canProvideY):
            (WebCore::DeviceMotionData::Acceleration::canProvideZ):
            (WebCore::DeviceMotionData::Acceleration::x):
            (WebCore::DeviceMotionData::Acceleration::y):
            (WebCore::DeviceMotionData::Acceleration::z):
            (WebCore::DeviceMotionData::RotationRate::canProvideAlpha):
            (WebCore::DeviceMotionData::RotationRate::canProvideBeta):
            (WebCore::DeviceMotionData::RotationRate::canProvideGamma):
            (WebCore::DeviceMotionData::RotationRate::alpha):
            (WebCore::DeviceMotionData::RotationRate::beta):
            (WebCore::DeviceMotionData::RotationRate::gamma):
            (WebCore::DeviceMotionData::acceleration):
            (WebCore::DeviceMotionData::accelerationIncludingGravity):
            (WebCore::DeviceMotionData::rotationRate):
            Add member classes Acceleration and RotationRate to DeviceMotionData.

            * dom/DeviceMotionEvent.idl:
            Update according to the spec. Acceleration and RotationRate need not
            be backed by native classes.

2010-09-23  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/8466987> iOS: Cross origin image bypass using toDataURL,getImageData via createPattern (44399)

        Merged ToT WebKit r65826.

    2010-08-23  Abhishek Arya  <inferno@chromium.org>

            Reviewed by Dimitri Glazkov.

            Fix security origin calculation in createPattern. Need to use
            cachedImage->response().url() instead of cachedImage->url().
            https://bugs.webkit.org/show_bug.cgi?id=44399.

            Test: http/tests/security/canvas-remote-read-remote-image-redirect.html

            * html/canvas/CanvasRenderingContext2D.cpp:
            (WebCore::CanvasRenderingContext2D::createPattern):

2010-09-23  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/8467124> iOS: OOB read in text fragment (45303)

        Merged ToT WebKit r66911.

    2010-09-07  Abhishek Arya  <inferno@chromium.org>

            Reviewed by Darin Adler.

            Remove redundant bounds check in originalText(). Add bounds check
            to previousCharacter(). No need of start() > 0 check since m_start
            is unsigned and we already do start() null check inside function.
            https://bugs.webkit.org/show_bug.cgi?id=45303

            Test: fast/text/one-letter-transform-crash.html

            * rendering/RenderTextFragment.cpp:
            (WebCore::RenderTextFragment::originalText):
            (WebCore::RenderTextFragment::previousCharacter):

2010-09-23  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/8242861> iOS: GC more promptly when navigating to a new inner window, but not at all when it went in the page cache (39254)

        Merge ToT WebKit r59659.

    2010-05-17  Maciej Stachowiak  <mjs@apple.com>

        Reviewed by Oliver Hunt.

        GC more promptly when navigating to a new inner window, but not at all when it went in the page cache
        https://bugs.webkit.org/show_bug.cgi?id=39254
        <rdar://problem/7996370>

        ~1% PLT speedup
        ~4% iBench HTML speedup

        * bindings/js/GCController.cpp:
        (WebCore::GCController::garbageCollectSoon): Change back to a 0 delay timer instead of
        0.5 second.
        * bindings/js/ScriptController.cpp:
        (WebCore::ScriptController::clearWindowShell): Add a new boolean parameter. Don't
        garbageColectSoon if the page is going into the page cache.
        * bindings/js/ScriptController.h: Prototype change for above.
        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::clear): Indicate when the page is going into the page cache.

2010-09-22  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/8464189> iOS: Memory corruption in incorrect text node casts in editing commands (42655)

        Merge ToT WebKit r63773.

    2010-07-20  Abhishek Arya  <inferno@chromium.org>

        Reviewed by David Hyatt.

        Check the node is a text node before doing the static cast
        for editing commands.
        https://bugs.webkit.org/show_bug.cgi?id=42655

        Test: editing/execCommand/editing-nontext-node-crash.xhtml

        * editing/DeleteSelectionCommand.cpp:
        (WebCore::DeleteSelectionCommand::fixupWhitespace):
        * editing/InsertLineBreakCommand.cpp:
        (WebCore::InsertLineBreakCommand::doApply):
        * editing/InsertParagraphSeparatorCommand.cpp:
        (WebCore::InsertParagraphSeparatorCommand::doApply):

2010-09-22  Dean Jackson  <dino@apple.com>

        Reviewed (reluctantly) by Simon Fraser.

        <rdar://problem/8462033> fix WebGL texturing

        The texImage2D and texSubImage2D API signatures changed in the WebGL
        specification a few months ago. The updates to the core implementation
        were merged in <rdar://problem/8460313>, but the JS bindings were left
        out because there was a significant change to all generated and custom
        code that will not be merged until later. This updates the custom
        methods in the WebGLRenderingContext binding to be compliant with the
        spec. Once PEP syncs with Jazz/ToT this code should be no longer
        necessary.

        * bindings/js/JSWebGLRenderingContextCustom.cpp:
        (WebCore::JSWebGLRenderingContext::texImage2D):
        (WebCore::JSWebGLRenderingContext::texSubImage2D):

2010-09-22  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/8350901> Only mark resources volatile when they are evicted from the subresource cache

        Merged ToT r67994, r67996.

    2010-09-21  Geoffrey Garen  <ggaren@apple.com>

        Try to fix the Windows build.

        * loader/Cache.cpp:
        (WebCore::Cache::makeResourcePurgeable):
        (WebCore::Cache::evict): Cast to int before using unary '-', to avoid an
        MSVC warning.

    2010-09-21  Pratik Solanki  <psolanki@apple.com>

        Reviewed by Geoffrey Garen and Darin Adler.

        Use purgeable memory to keep more dead resources in cache
        https://bugs.webkit.org/show_bug.cgi?id=44806
        <rdar://problem/8350901>

        This changes the behavior of dead resources in the WebCore cache to be the following if
        shouldMakeResourcePurgeableOnEviction() returns true.

        1. Dead resources in the cache are kept in non-purgeable memory.
        2. When we prune dead resources, instead of freeing them, we mark their memory as purgeable
        and keep the resources until the kernel reclaims the purgeable memory.

        By leaving the in-cache dead resources in dirty resident memory, we decrease the likelihood
        of the kernel claiming that memory and forcing us to refetch the resource (for example when
        a user presses back).

        And by having an unbounded number of resource objects using purgeable memory, we can use
        as much memory as is available on the machine. The trade-off is that the CachedResource
        object (and its member variables) are allocated in non-purgeable TC-malloc'd memory so
        we would see slightly more memory use due to this.

        * loader/Cache.cpp:
        (WebCore::Cache::resourceForURL): Adjust sizes appropriately if we made resource memory
        non-purgeable.
        (WebCore::Cache::pruneDeadResources): When removing dead resources, try first to mark their
        memory as purgeable. If not, evict the resource.
        (WebCore::Cache::makeResourcePurgeable): Added. Try to mark resource
        memory as purgeable. If successful, adjust the sizes so that we don't
        factor this resources size in the Cache size calculation.
        (WebCore::Cache::evict): Don't decrement size if we already did it in makeResourcePurgeable.
        (WebCore::Cache::dumpLRULists): Extra debug logging.
        * loader/Cache.h:
        (WebCore::Cache::shouldMakeResourcePurgeableOnEviction): Added. Indicates if the new
        behaviour is enabled.
        * loader/CachedCSSStyleSheet.cpp:
        (WebCore::CachedCSSStyleSheet::allClientsRemoved): Do not mark memory as purgeable. The
        Cache class takes care of this.
        * loader/CachedImage.cpp:
        (WebCore::CachedImage::destroyDecodedData): Ditto.
        * loader/CachedScript.cpp:
        (WebCore::CachedScript::destroyDecodedData): Ditto.

2010-09-22  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by Simon Fraser.

        <rdar://problem/8442931> Mint.com incorrect rendering in Safari on iPad 4.2b1 (and iPhone 4.1)

        Convert document.body.scrollTop and document.body.scrollLeft to use the
        actual visible content rect like other similar values (window.scrollY,
        window.pageYOffset, element.getBoundingClientRect(), etc).

        * html/HTMLBodyElement.cpp:
        (WebCore::HTMLBodyElement::scrollLeft):
        (WebCore::HTMLBodyElement::scrollTop):

2010-09-21  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/8403395> rendererForFont is taking a large amount of time in [NSString drawAtPoint:withFont]
        Reviewed by Cameron Zwarich.

        Initialize m_atsuFontID to 0.  Otherwise it will be assigned a random value which makes the equality test
        for FontPlatformData fail, and FontCache search will fail as well.  As a result, WebCore will create a lot
        of unnecessary SimpleFontData objects.

        * platform/graphics/mac/FontPlatformDataMac.mm:
        (WebCore::FontPlatformData::FontPlatformData):

2010-09-17  Dean Jackson  <dino@apple.com>

        <rdar://problem/8460313> Merge essential WebGL features into PEP WebKit

        Merged r59470, r60290, r60874, r61017, r61039, r61046, r61185,
        r61333, r61406, r61432, r61715, r61910, r61934, r61938, r61939,
        r61949, r62018, r62145

    2010-06-29  Kenneth Russell  <kbr@google.com>

            Reviewed by Dimitri Glazkov.

            Support UNPACK_FLIP_Y_WEBGL and UNPACK_PREMULTIPLY_ALPHA_WEBGL for texImage2D taking ArrayBufferView
            https://bugs.webkit.org/show_bug.cgi?id=40398

            Added support for UNPACK_FLIP_Y_WEBGL and UNPACK_PREMULTIPLY_ALPHA_WEBGL pixel store
            parameters to texImage2D and texSubImage2D entry points taking ArrayBufferView.
            More cleanly separated the unpacking and packing phases of user-supplied pixel data
            in GraphicsContext3D, and added support for unpack alignment. Fixed bug in handling
            of unpackAlignment in GraphicsContext3D::flipVertically. Necessarily added
            validation of the amount of data passed to texImage2D and texSubImage2D. Modified
            fast/canvas/webgl/tex-image-with-format-and-type.html to include premultiplied alpha
            tests for relevant source formats; added new test which exercises all combinations
            of UNPACK_FLIP_Y_WEBGL, UNPACK_PREMULTIPLY_ALPHA_WEBGL, and UNPACK_ALIGNMENT pixel
            store parameters.

            Test: fast/canvas/webgl/tex-image-and-sub-image-2d-with-array-buffer-view.html

            * html/canvas/WebGLRenderingContext.cpp:
            (WebCore::WebGLRenderingContext::texImage2D):
            (WebCore::WebGLRenderingContext::texSubImage2D):
            (WebCore::WebGLRenderingContext::validateTexFuncData):
            * html/canvas/WebGLRenderingContext.h:
            * platform/graphics/GraphicsContext3D.cpp:
            (WebCore::GraphicsContext3D::extractImageData):
            (WebCore::GraphicsContext3D::extractTextureData):
            (WebCore::GraphicsContext3D::flipVertically):
            (WebCore::doUnpackingAndPacking):
            (WebCore::computeIncrementParameters):
            (WebCore::doPacking):
            (WebCore::GraphicsContext3D::packPixels):
            * platform/graphics/GraphicsContext3D.h:
            (WebCore::GraphicsContext3D::):
            * platform/graphics/cg/GraphicsContext3DCG.cpp:
            (WebCore::GraphicsContext3D::getImageData):
            * platform/graphics/qt/GraphicsContext3DQt.cpp:
            (WebCore::GraphicsContext3D::getImageData):
            * platform/graphics/skia/GraphicsContext3DSkia.cpp:
            (WebCore::GraphicsContext3D::getImageData):

    2010-06-28  Kenneth Russell  <kbr@google.com>

            Reviewed by Dimitri Glazkov.

            Index validation caches buffer size information too aggressively
            https://bugs.webkit.org/show_bug.cgi?id=41092

            Test: fast/canvas/webgl/index-validation-with-resized-buffer.html

            * html/canvas/WebGLRenderingContext.cpp:
            (WebCore::WebGLRenderingContext::validateRenderingState):
             - Compute the number of valid elements each time based on the latched buffer.
            (WebCore::WebGLRenderingContext::vertexAttribPointer):
             - Do not cache the buffer size, only the attributes used to
               compute the number of required elements.
            * html/canvas/WebGLRenderingContext.h:
            (WebCore::WebGLRenderingContext::VertexAttribState::VertexAttribState):
             - Ditto.

    2010-06-25  Zhenyao Mo  <zmo@google.com>

            Reviewed by Dimitri Glazkov.

            activeTexture wrongly generates error with legal input.
            https://bugs.webkit.org/show_bug.cgi?id=41227

            Test: fast/canvas/webgl/texture-active-bind.html

            * html/canvas/WebGLRenderingContext.cpp:
            (WebCore::WebGLRenderingContext::activeTexture): Fix the upper limit test for test units.

    2010-06-25  Zhenyao Mo  <zmo@google.com>

            Reviewed by Dimitri Glazkov.

            getUniform will not work for fetching uniform array elements
            https://bugs.webkit.org/show_bug.cgi?id=34508

            Test: fast/canvas/webgl/gl-uniform-arrays.html

            * html/canvas/WebGLRenderingContext.cpp:
            (WebCore::WebGLRenderingContext::attachShader): Generate correct errors.
            (WebCore::WebGLRenderingContext::getUniform): Dealing with array elements.
            (WebCore::WebGLRenderingContext::useProgram): Deal with program==null.
            (WebCore::WebGLRenderingContext::validateProgram): Generate correct errors.
            * platform/graphics/mac/GraphicsContext3DMac.mm:
            (WebCore::GraphicsContext3D::useProgram): Deal with program==null.

    2010-06-25  Zhenyao Mo  <zmo@google.com>

            Reviewed by Dimitri Glazkov.

            Bring set/get state functions to GLES2 conformance
            https://bugs.webkit.org/show_bug.cgi?id=41095

            Tests: fast/canvas/webgl/gl-enable-enum-test.html
                   fast/canvas/webgl/gl-enum-tests.html

            * html/canvas/WebGLRenderingContext.cpp: Check input parameters according to GLES2 spec.
            (WebCore::WebGLRenderingContext::blendEquation):
            (WebCore::WebGLRenderingContext::blendEquationSeparate):
            (WebCore::WebGLRenderingContext::disable):
            (WebCore::WebGLRenderingContext::enable):
            (WebCore::WebGLRenderingContext::hint):
            (WebCore::WebGLRenderingContext::isEnabled):
            (WebCore::WebGLRenderingContext::pixelStorei):
            (WebCore::WebGLRenderingContext::validateBlendEquation):
            (WebCore::WebGLRenderingContext::validateCapability):
            * html/canvas/WebGLRenderingContext.h: Add helper function declaration.

    2010-06-25  Zhenyao Mo  <zmo@google.com>

            Reviewed by Dimitri Glazkov.

            A buffer should be bound to one target in its lifetime
            https://bugs.webkit.org/show_bug.cgi?id=41108

            Test: fast/canvas/webgl/buffer-bind-test.html

            * html/canvas/WebGLBuffer.cpp:
            (WebCore::WebGLBuffer::WebGLBuffer): Init target to 0. 
            (WebCore::WebGLBuffer::associateBufferData): Remove target parameter, use one byteLength member.
            (WebCore::WebGLBuffer::associateBufferSubData): Ditto.
            (WebCore::WebGLBuffer::byteLength): Ditto.
            (WebCore::WebGLBuffer::setTarget): Set target.
            * html/canvas/WebGLBuffer.h: Cache target in the WebGLBuffer object, use one byteLength member.
            (WebCore::WebGLBuffer::getTarget):
            * html/canvas/WebGLRenderingContext.cpp:
            (WebCore::WebGLRenderingContext::bindBuffer): Check if a buffer is bound to another target; set buffer object internal target.
            (WebCore::WebGLRenderingContext::bufferData): Remove target parameter and use the WebGLBuffer cached target instead.
            (WebCore::WebGLRenderingContext::bufferSubData): Ditto.
            (WebCore::WebGLRenderingContext::validateElementArraySize): Ditto.
            (WebCore::WebGLRenderingContext::validateIndexArrayConservative): Ditto.
            (WebCore::WebGLRenderingContext::vertexAttribPointer): Ditto.

    2010-06-25  Zhenyao Mo  <zmo@google.com>

            Reviewed by Dimitri Glazkov.

            getParameter(COLOR_WRITEMASK) needs to return Array
            https://bugs.webkit.org/show_bug.cgi?id=40437

            * bindings/js/JSWebGLRenderingContextCustom.cpp: Handling bool array.
            (WebCore::toJS):
            * bindings/v8/custom/V8WebGLRenderingContextCustom.cpp: Handling bool array.
            (WebCore::toV8Object):
            * html/canvas/WebGLGetInfo.cpp: Handling bool array.
            (WebCore::WebGLGetInfo::WebGLGetInfo):
            (WebCore::WebGLGetInfo::getBoolArray):
            * html/canvas/WebGLGetInfo.h: Handling bool array.
            (WebCore::WebGLGetInfo::):
            * html/canvas/WebGLRenderingContext.cpp: Handling bool array.
            (WebCore::WebGLRenderingContext::getParameter):
            (WebCore::WebGLRenderingContext::getBooleanArrayParameter):
            * html/canvas/WebGLRenderingContext.h: Handling bool array.

    2010-06-23  Kenneth Russell  <kbr@google.com>

            Reviewed by Dimitri Glazkov.

            Implement format conversions in texImage2D and texSubImage2D taking HTML data
            https://bugs.webkit.org/show_bug.cgi?id=40319

            Generalized code supporting premultiplication of alpha and
            vertical flip to pack texture data into requested format and type.
            Handled incoming image data of various formats, RGBA and BGRA in
            particular, both to reduce the number of temporary copies during
            texture upload and to support premultiplying alpha for the
            texImage2D and texSubImage2D entry points taking ArrayBufferView
            in a subsequent bug. Added test case exercising all combinations
            of format/type combinations, premultiplication of alpha, and
            Image/ImageData upload. (Incorporated pnglib.js under
            fast/canvas/webgl/resources/ to be able to generate Image elements
            programmatically.) Tested in Safari on Mac OS X and in Chromium on
            Mac OS X, Windows and Linux.

            Test: fast/canvas/webgl/tex-image-with-format-and-type.html

            * html/canvas/WebGLRenderingContext.cpp:
            (WebCore::WebGLRenderingContext::readPixels):
            (WebCore::WebGLRenderingContext::texImage2DImpl):
            (WebCore::WebGLRenderingContext::texImage2D):
            (WebCore::WebGLRenderingContext::texSubImage2DImpl):
            (WebCore::WebGLRenderingContext::texSubImage2D):
            (WebCore::WebGLRenderingContext::validateTexFuncFormatAndType):
            (WebCore::WebGLRenderingContext::validateTexFuncParameters):
            * platform/graphics/GraphicsContext3D.cpp:
            (WebCore::GraphicsContext3D::computeFormatAndTypeParameters):
            (WebCore::GraphicsContext3D::extractImageData):
            (WebCore::GraphicsContext3D::flipVertically):
            (WebCore::doUnpackingAndPacking):
            (WebCore::doPacking):
            (WebCore::GraphicsContext3D::packPixels):
            * platform/graphics/GraphicsContext3D.h:
            (WebCore::GraphicsContext3D::):
            * platform/graphics/cg/GraphicsContext3DCG.cpp:
            (WebCore::GraphicsContext3D::getImageData):
            * platform/graphics/mac/GraphicsContext3DMac.mm:
            (WebCore::narrowInternalFormat):
            (WebCore::GraphicsContext3D::texImage2D):
            * platform/graphics/qt/GraphicsContext3DQt.cpp:
            (WebCore::GraphicsContext3D::getImageData):
            * platform/graphics/skia/GraphicsContext3DSkia.cpp:
            (WebCore::GraphicsContext3D::getImageData):

    2010-06-18  Zhenyao Mo  <zmo@google.com>

            Reviewed by Simon Fraser.

            WebGL demos show bad flicker
            https://bugs.webkit.org/show_bug.cgi?id=38560

            * platform/graphics/mac/GraphicsContext3DMac.mm:
            (WebCore::GraphicsContext3D::prepareTexture): Move ensureContext() out of if-block so it's always executed.

    2010-06-18  Zhenyao Mo  <zmo@google.com>

            Reviewed by Dimitri Glazkov.

            Fix WebGLRenderingContext helper functions find{Texture/Renderbuffer/Buffer}
            https://bugs.webkit.org/show_bug.cgi?id=40176

            * html/canvas/WebGLBuffer.cpp: Remove constructor with existing name.
            * html/canvas/WebGLBuffer.h: Ditto.
            * html/canvas/WebGLRenderingContext.cpp:
            (WebCore::WebGLRenderingContext::getVertexAttrib): Use findBuffer instead of creating a new WebGLBuffer.
            (WebCore::WebGLRenderingContext::findTexture): Deal with name == 0 case and return raw pointer.
            (WebCore::WebGLRenderingContext::findRenderbuffer): Ditto.
            (WebCore::WebGLRenderingContext::findBuffer): Find WebGLBuffer object using given name.
            * html/canvas/WebGLRenderingContext.h: Add findBuffer function declaration, change return type to raw pointer.

    2010-06-17  Zhenyao Mo  <zmo@google.com>

            Reviewed by David Levin.

            Rename internalformat to internalFormat
            https://bugs.webkit.org/show_bug.cgi?id=40149

            * html/canvas/WebGLFramebuffer.cpp: Rename internalformat to internalFormat.
            (WebCore::WebGLFramebuffer::getColorBufferFormat):
            * html/canvas/WebGLRenderbuffer.cpp: Ditto.
            (WebCore::WebGLRenderbuffer::WebGLRenderbuffer):
            * html/canvas/WebGLRenderbuffer.h: Ditto.
            (WebCore::WebGLRenderbuffer::setInternalFormat):
            (WebCore::WebGLRenderbuffer::getInternalFormat):
            * html/canvas/WebGLRenderingContext.cpp: Ditto.
            (WebCore::WebGLRenderingContext::copyTexImage2D):
            (WebCore::WebGLRenderingContext::copyTexSubImage2D):
            (WebCore::WebGLRenderingContext::framebufferRenderbuffer):
            (WebCore::WebGLRenderingContext::getRenderbufferParameter):
            (WebCore::WebGLRenderingContext::renderbufferStorage):
            (WebCore::WebGLRenderingContext::texImage2DBase):
            (WebCore::WebGLRenderingContext::isTexInternalFormatColorBufferCombinationValid):
            * html/canvas/WebGLRenderingContext.h: Ditto.
            * html/canvas/WebGLTexture.cpp: Ditto.
            (WebCore::WebGLTexture::WebGLTexture):
            * html/canvas/WebGLTexture.h: Ditto.
            (WebCore::WebGLTexture::setInternalFormat):
            (WebCore::WebGLTexture::getInternalFormat):

    2010-06-15  Zhenyao Mo  <zmo@google.com>

            Reviewed by Dimitri Glazkov.

            Bring framebuffer functions to GLES2 conformance
            https://bugs.webkit.org/show_bug.cgi?id=40175

            Test: fast/canvas/webgl/framebuffer-test.html

            * html/canvas/WebGLRenderingContext.cpp:
            (WebCore::WebGLRenderingContext::checkFramebufferStatus): Check input parameters and deal with default framebuffer situation.
            (WebCore::WebGLRenderingContext::framebufferRenderbuffer): Check input parameters.
            (WebCore::WebGLRenderingContext::framebufferTexture2D): Ditto.
            (WebCore::WebGLRenderingContext::getFramebufferAttachmentParameter): Ditto.
            (WebCore::WebGLRenderingContext::validateFramebufferFuncParameters): Check input parameters.
            * html/canvas/WebGLRenderingContext.h: Add validateFramebufferFuncParameters.

    2010-06-11  Kenneth Russell  <kbr@google.com>

            Reviewed by Dimitri Glazkov.

            getParameter with UNPACK_FLIP_Y_WEBGL and UNPACK_PREMULTIPLY_ALPHA_WEBGL is buggy
            https://bugs.webkit.org/show_bug.cgi?id=40506

            Return the data members of WebGLRenderingContext for these
            parameter queries rather than asking OpenGL, which knows nothing
            about them.

            * html/canvas/WebGLRenderingContext.cpp:
            (WebCore::WebGLRenderingContext::getParameter):

    2010-06-11  Kenneth Russell  <kbr@google.com>

            Reviewed by Dimitri Glazkov.

            Add texImage2D and texSubImage2D signatures with internal format, etc.
            https://bugs.webkit.org/show_bug.cgi?id=40318

            Added new texImage2D and texSubImage2D entry points following
            WebGL specification changes. Added UNPACK_FLIP_Y_WEBGL and
            UNPACK_PREMULTIPLY_ALPHA_WEBGL pixelStorei parameters, honored
            them for the new entry points taking HTML elements, and added
            support to getParameter. Added warnings to the console for calls
            to the obsolete entry points, which will be removed in a few
            weeks.  Updated all layout tests to use the new entry points and
            pixelStorei parameters, and associated expectations. No other new
            tests.

            * html/canvas/WebGLRenderingContext.cpp:
            (WebCore::WebGLRenderingContext::WebGLRenderingContext):
            (WebCore::WebGLRenderingContext::getParameter):
            (WebCore::WebGLRenderingContext::pixelStorei):
            (WebCore::WebGLRenderingContext::texImage2DImpl):
            (WebCore::WebGLRenderingContext::texImage2D):
            (WebCore::WebGLRenderingContext::texSubImage2DImpl):
            (WebCore::WebGLRenderingContext::texSubImage2D):
            (WebCore::WebGLRenderingContext::printWarningToConsole):
            * html/canvas/WebGLRenderingContext.h:
            * html/canvas/WebGLRenderingContext.idl:
            * platform/graphics/GraphicsContext3D.h:
            (WebCore::GraphicsContext3D::):

    2010-06-11  Zhenyao Mo  <zmo@google.com>

            Reviewed by Dimitri Glazkov.

            drawElements/drawArrays should validate input parameters according to GLES2 spec
            https://bugs.webkit.org/show_bug.cgi?id=38700

            Tests: fast/canvas/webgl/draw-arrays-out-of-bounds.html
                   fast/canvas/webgl/draw-elements-out-of-bounds.html

            * html/canvas/WebGLRenderingContext.cpp:
            (WebCore::WebGLRenderingContext::drawArrays): Validate input parameters.
            (WebCore::WebGLRenderingContext::drawElements): Ditto.
            (WebCore::WebGLRenderingContext::validateDrawMode): Validate mode for draw{Arrays/Elements}.
            * html/canvas/WebGLRenderingContext.h: Add validateDrawMode, fix incorrect parameter types.
            * html/canvas/WebGLRenderingContext.idl: Fix incorrect parameter types.

    2010-06-08  Zhenyao Mo  <zmo@google.com>

            Reviewed by Dimitri Glazkov.

            Validate *tex* functions input parameters according to ES2 conformance
            https://bugs.webkit.org/show_bug.cgi?id=38145

            Test: fast/canvas/webgl/tex-input-validation.html

            * html/canvas/WebGLFramebuffer.cpp:
            (WebCore::WebGLFramebuffer::getColorBufferFormat): Get color buffer internalformat.
            * html/canvas/WebGLFramebuffer.h: Ditto.
            * html/canvas/WebGLRenderingContext.cpp:
            (WebCore::WebGLRenderingContext::WebGLRenderingContext): Deal with max tex units and max texture size.
            (WebCore::WebGLRenderingContext::copyTexImage2D): Validate input parameters.
            (WebCore::WebGLRenderingContext::copyTexSubImage2D): Ditto.
            (WebCore::WebGLRenderingContext::texImage2DBase): Ditto.
            (WebCore::WebGLRenderingContext::texParameterf): Ditto.
            (WebCore::WebGLRenderingContext::texParameteri): Ditto.
            (WebCore::WebGLRenderingContext::texSubImage2DBase): Ditto.
            (WebCore::WebGLRenderingContext::handleNPOTTextures): Deal with max tex units.
            (WebCore::WebGLRenderingContext::isTexInternalformatColorBufferCombinationValid): Check whether the texture format and framebuffer color buffer internalformat combination is valid.
            (WebCore::WebGLRenderingContext::getTextureBinding): get the current bound texture for given target.
            (WebCore::WebGLRenderingContext::validateTexFuncFormatAndType): Validate input format/type for *tex* functions.
            (WebCore::WebGLRenderingContext::validateTexFuncParameters): Validate input parameters for *tex* functions.
            (WebCore::WebGLRenderingContext::texParameter): Base function for texParameteri and texParameterf.
            * html/canvas/WebGLRenderingContext.h: Deal with max tex units.
            * html/canvas/WebGLTexture.cpp:
            (WebCore::WebGLTexture::WebGLTexture): Cache internalformat.
            * html/canvas/WebGLTexture.h: Ditto.
            (WebCore::WebGLTexture::setInternalformat):
            (WebCore::WebGLTexture::getInternalformat):
            * platform/graphics/GraphicsContext3D.cpp: internalformat and format need to be the same.
            (WebCore::GraphicsContext3D::extractImageData):

    2010-05-27  Zhenyao Mo  <zmo@google.com>

            Reviewed by Dimitri Glazkov.

            Implement lazy clearing of renderbuffers
            https://bugs.webkit.org/show_bug.cgi?id=36248

            Test: fast/canvas/webgl/renderbuffer-initialization.html

            * html/canvas/WebGLFramebuffer.cpp:
            (WebCore::WebGLFramebuffer::WebGLFramebuffer): Init added members.
            (WebCore::WebGLFramebuffer::setAttachment): Set attachment object.
            (WebCore::WebGLFramebuffer::onBind): Perform buffer clearing if needed.
            (WebCore::WebGLFramebuffer::onAttachedObjectChange): Ditto.
            (WebCore::WebGLFramebuffer::isUninitialized): Check whether an attached object is uninitialized renderbuffer.
            (WebCore::WebGLFramebuffer::setInitialized): After initialize a renderbuffer, set the flag.
            (WebCore::WebGLFramebuffer::initializeRenderbuffers): Clear un-initialized renderbuffers if framebuffer is complete.
            * html/canvas/WebGLFramebuffer.h:
            (WebCore::WebGLFramebuffer::isDepthAttached): Changed to check object.
            (WebCore::WebGLFramebuffer::isStencilAttached): Ditto.
            (WebCore::WebGLFramebuffer::isDepthStencilAttached): Ditto.
            * html/canvas/WebGLRenderbuffer.cpp:
            (WebCore::WebGLRenderbuffer::WebGLRenderbuffer): Init added members.
            * html/canvas/WebGLRenderbuffer.h:
            (WebCore::WebGLRenderbuffer::isInitialized): As the function name.
            (WebCore::WebGLRenderbuffer::setInitialized): Ditto.
            * html/canvas/WebGLRenderingContext.cpp:
            (WebCore::WebGLRenderingContext::bindFramebuffer): Call onBind().
            (WebCore::WebGLRenderingContext::copyTexImage2D): Call onAttachedObjectChange().
            (WebCore::WebGLRenderingContext::deleteRenderbuffer): Ditto.
            (WebCore::WebGLRenderingContext::deleteTexture): Ditto.
            (WebCore::WebGLRenderingContext::framebufferRenderbuffer): Call setAttachment.
            (WebCore::WebGLRenderingContext::framebufferTexture2D): Call onAttachedObjectChange().
            (WebCore::WebGLRenderingContext::renderbufferStorage): Ditto.
            (WebCore::WebGLRenderingContext::texImage2DBase): Ditto.
            * platform/graphics/mac/GraphicsContext3DMac.cpp:
            (WebCore::GraphicsContext3D::reshape): Initialize internal buffers.

    2010-05-14  Zhenyao Mo  <zmo@google.com>

            Reviewed by Dimitri Glazkov.

            Must implement OpenGL ES 2.0 semantics for NPOT textures
            https://bugs.webkit.org/show_bug.cgi?id=33805

            Test: fast/canvas/webgl/texture-npot.html

            * html/canvas/WebGLRenderingContext.cpp:
            (WebCore::WebGLRenderingContext::WebGLRenderingContext): Create black 1x1 textures.
            (WebCore::WebGLRenderingContext::bindTexture): Set texture dimensionality.
            (WebCore::WebGLRenderingContext::copyTexImage2D): Error check, set texture size.
            (WebCore::WebGLRenderingContext::drawArrays): Bind to black textures if needed.
            (WebCore::WebGLRenderingContext::drawElements): Bind to black textures if needed.
            (WebCore::WebGLRenderingContext::generateMipmap): Error check.
            (WebCore::WebGLRenderingContext::texImage2DBase): Error check, set texture size.
            (WebCore::WebGLRenderingContext::texParameterf): Set texture parameter.
            (WebCore::WebGLRenderingContext::texParameteri): Ditto.
            (WebCore::WebGLRenderingContext::handleNPOTTextures): Bind to black textures if needed before draw, and bind back to original textures after draw.
            * html/canvas/WebGLRenderingContext.h: Add black 1x1 textures.
            * html/canvas/WebGLTexture.cpp: Add support to track NPOT textures.
            (WebCore::WebGLTexture::createBlackTexture1x1): Create a black 1x1 texture.
            (WebCore::WebGLTexture::WebGLTexture): Initialize parameters and states.
            (WebCore::WebGLTexture::setDimensionality): Set dimensionality.
            (WebCore::WebGLTexture::setParameteri): Set parameter.
            (WebCore::WebGLTexture::setParameterf): Ditto.
            (WebCore::WebGLTexture::setSize): Set level 0 texture size.
            (WebCore::WebGLTexture::isNPOT): Whether the texture is NPOT.
            (WebCore::WebGLTexture::updateNPOTStates): Calculate NPOT and NeedToUseBlackTexture states.
            * html/canvas/WebGLTexture.h: Add support to track NPOT textures.
            (WebCore::WebGLTexture::isNPOT):
            (WebCore::WebGLTexture::needToUseBlackTexture):

2010-09-21  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/7729077> [books] SEARCH: Searching for last punctuation mark of paragraph adds next letter below

        Merged TOT WebKit r67994.

    2010-09-21  Dan Bernstein  <mitz@apple.com>

        Reviewed by Darin Adler.

        <rdar://problem/7729077> Extending the selection to sentence boundary after a line break may select extra character
        https://bugs.webkit.org/show_bug.cgi?id=46232

        Test: editing/selection/extend-by-sentence-002.html

        * editing/visible_units.cpp:
        (WebCore::nextBoundary): The text iterator’s range end can be the position after
        the line break, in which case the next visible is actually after the first character
        of the next sentence. Instead, advance the text iterator past the newline character
        and return the beginning of its range, which is guaranteed to still be before the
        next sentence.

2010-09-21  Justin Garcia  <justin.garcia@apple.com>

        Reviewed by Brad Moore.

        <rdar://problem/8102100> UITableViewCellStyleValue1 detail text label doesn't display on iPhone 4
        
        Round the ascent to the nearest 1/128 to avoid inaccurate results in computations that include it 
        due to limited floating-point precision.  We round to the nearest 1/128 because a) it is a power of two, 
        and you can exactly multiply integers by a power of 2, and b) it is small enough to not effect rendering 
        at any resolution that we will conceivably use.

        * wak/WAKStringDrawing.mm:
        (-[NSString __web_drawInRect:withFont:ellipsis:alignment:letterSpacing:lineSpacing:includeEmoji:truncationRect:measureOnly:renderedStringOut:]):

2010-09-20  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/8375390> iOS: cross_fuzz: Ruby: WebCore::RenderBlock::addChild* NULL ptrs (43722)

        Merged ToT WebKit r66371.

    2010-08-30  Adam Barth  <abarth@webkit.org>

        Reviewed by Darin Adler.

        WebCore::RenderBlock::addChild* NULL ptrs
        https://bugs.webkit.org/show_bug.cgi?id=43722

        Also includes some cleanup of comments and ASSERTs.

        Test: fast/ruby/before-doesnt-crash.html

        * rendering/RenderRuby.cpp:
        (WebCore::RenderRubyAsInline::addChild):

2010-09-20  Aaron Golden  <agolden@apple.com>

        Reviewed by David Carson.

        <rdar://problem/8446953> Search result is not shown on screen when searching for "about us" on arstechnica.com

        Adding recursiveSetUpdateAppearanceEnabled so that MobileSafari can use it to trigger
        selection()->setUpdateAppearanceEnabled(true|false) on many frames at once.

        * WebCore.iPhone.exp:
        * page/Frame.h:
        * page/iphone/FrameIPhone.mm:
        (WebCore::Frame::recursiveSetUpdateAppearanceEnabled):

2010-09-20  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/8416421> Assertion Failure at WebCore::LocalStorageThread::start (this=0x10d0a6e0).
        Reviewed by David Kilzer.

        Use the right assertion in storage files because WTF::isMainThread() actually means the current
        thread is web thread in iOS WebKit, and main thread is also possible to run storage code.

        * storage/LocalStorageThread.cpp:
        (WebCore::LocalStorageThread::~LocalStorageThread):
        (WebCore::LocalStorageThread::start):
        (WebCore::LocalStorageThread::threadEntryPoint):
        (WebCore::LocalStorageThread::scheduleTask):
        (WebCore::LocalStorageThread::terminate):
        (WebCore::LocalStorageThread::performTerminate):
        * storage/StorageAreaImpl.cpp:
        (WebCore::StorageAreaImpl::~StorageAreaImpl):
        (WebCore::StorageAreaImpl::StorageAreaImpl):
        * storage/StorageAreaSync.cpp:
        (WebCore::StorageAreaSync::performImport):
        (WebCore::StorageAreaSync::sync):
        (WebCore::StorageAreaSync::performSync):

2010-09-18  Cameron Zwarich <zwarich@apple.com>

        <rdar://problem/8418722> Crashes in +[WebLayer drawContents:ofLayer:intoContext:]
        Reviewed by David Carson.

        CATiledLayer painting is initiated by a timer in main thread, not by the normal CA commit observer.  When
        the timer fires, WebTiledLayer painting could be blocked for the web lock.  At the same time, if web thread
        performs a layout which ends up destroying the GraphicsLayer that owns the tiled layer, main thread will crash
        after it gets the lock and continue painting, because its contentLayer is pointing to a deleted object.

        * platform/graphics/mac/WebLayer.mm:
        (+[WebLayer drawContents:WebCore::ofLayer:intoContext:]):
        (-[WebLayer display]):
        (-[WebLayer drawInContext:]):
        * platform/graphics/mac/WebTiledLayer.mm:
        (-[WebTiledLayer display]):
        (-[WebTiledLayer drawInContext:]):

2010-09-17  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/8059467> iOS: VIDEO: Video overflows to next page in landscape mode in Nixonland

        Merged TOT WebKit r67770.

    2010-09-17  Dan Bernstein  <mitz@apple.com>

        Reviewed by Simon Fraser.

        Canvas sizing ignores intrinsic size
        https://bugs.webkit.org/show_bug.cgi?id=46024

        * fast/replaced/table-percent-height-expected.txt: Updated.
        * fast/replaced/table-percent-height.html: Changed to expect canvas to maintain
        its intrinsic ratio.

2010-09-17  Paul Knight  <pknight@apple.com>

        Reviewed by Cameron Zwarich.

        <rdar://problem/8398098> More notifications of new touches than removed touches after all fingers lifted
        
        Roll out the changes made for <rdar://problem/8399481> Extraneous touchstart events with a throw-like gesture.
        
        If two things happen with touch events simultaneously, we'd get these two events:
            TouchEventChange with touches (TouchPhaseMoved, TouchPhaseEnded)
            TouchEventEnd with touches (TouchPhaseMoved, TouchPhaseEnded)
        But WebCore really wants to only see the last one. The changes made in 8399481 were incomplete,
        and a better fix will be to suppress extra events in UIKit.

        * page/iphone/EventHandlerIPhoneTouch.cpp:
        (WebCore::EventHandler::handleTouchEvent):

2010-09-17  Ian Henderson  <ianh@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/8446612> assertion failure during WebCore::GeolocationManager::suspend()

        The only time we really _need_ to be on the web thread is when we're
        sending callbacks to m_service.  In other geolocation methods, we can
        just assert that the web thread lock is held.

        * platform/iphone/GeolocationManager.mm:
        (GeolocationManager::linkService):
        (GeolocationLink::~GeolocationLink):
        (GeolocationManager::suspend):
        (GeolocationManager::resume):
        (GeolocationManager::updatePositionOptions):
        (GeolocationManager::positionChanged):
        (GeolocationManager::errorOccurred):

2010-09-17  Eric Carlson  <eric.carlson@apple.com>

        Reviewed by Simon Fraser.

        <rdar://problem/8405758> Regression: Jasper: Tutorial video does not play in Pocket Informant HD

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::setNetworkState): Trigger playback if m_playing is set (we previously
        tried to start playback) when network state drops back to NETWORK_IDLE.
        (WebCore::HTMLMediaElement::playInternal): Set m_requestingPlay before calling updatePlayState
        so we request playback, and therefore trigger data loading, even if the engine isn't otherwise
        ready to begin playing.
        (WebCore::HTMLMediaElement::updatePlayState): Request playback if m_requestingPlay or m_playing.

2010-09-17  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/8414545> iOS: Memory corruption with creating lineboxes on renderblocks (first-letter issue)

        Merged ToT WebKit r67183, r67184, r67255 and r67281.

    2010-09-10  Dan Bernstein  <mitz@apple.com>

            Reviewed by Darin Adler.

            <rdar://problem/8414282> Can’t dynamically change first-letter to/from floating

            Test: fast/dynamic/first-letter-display-change.html

            * rendering/RenderBlock.cpp:
            (WebCore::styleForFirstLetter): Factored this helper function out.
            (WebCore::RenderBlock::updateFirstLetter): Renamed variables so that the
            “update style” and “create new” branches use the same terminology. In the
            update case, if the style change requires a new renderer, handle it.
            * rendering/RenderTextFragment.h:
            (WebCore::toRenderTextFragment): Added.

    2010-09-10  Dan Bernstein  <mitz@apple.com>

            Reviewed by Anders Carlsson.

            Pseudostyle resolution corrupts cached child index values
            https://bugs.webkit.org/show_bug.cgi?id=45574

            Covered by fast/dom/firstline-fixed-crash.html and fast/dom/firstletter-tablecell-crash.html.

            RenderBlock::updateFirstLetter() calls getCachedPseudoStyle() passing as the parent style the
            style of the parent of the first letter, which is not always the parent of the element for
            which we are getting :first-letter style. As a result, style resolution caches childIndex values
            in the wrong element’s style.

            * css/CSSStyleSelector.cpp:
            (WebCore::CSSStyleSelector::pseudoStyleForElement): Create the new style and inherit from
            the parent style before matching rules, to avoid corrupting the parent style itself.
            (WebCore::CSSStyleSelector::checkSelector): Always pass the element’s parent style as
            the parent style here.
            * rendering/RenderBlock.cpp:
            (WebCore::RenderBlock::updateFirstLetter): Removed the null check that was added
            in r67183.
            * rendering/RenderBlockLineLayout.cpp:
            (WebCore::RenderBlock::findNextLineBreak): Removed the null check that was added
            in r67184.

    2010-09-10  Cris Neckar  <cdn@chromium.org>

            Reviewed by Chris Fleizach.

            Null deref in RenderBlock::updateFirstLetter(). Check for null psuedo style.
            https://bugs.webkit.org/show_bug.cgi?id=45404

            Test: fast/dom/firstletter-tablecell-crash.html

            * rendering/RenderBlock.cpp:
            (WebCore::RenderBlock::updateFirstLetter):

    2010-09-10  Cris Neckar  <cdn@chromium.org>

            Reviewed by Chris Fleizach.

            Null deref in RenderBlock::findNextLineBreak(). Check for null style with
            first-line style and fixed position.
            https://bugs.webkit.org/show_bug.cgi?id=45350

            Test: fast/dom/firstline-fixed-crash.html

            * rendering/RenderBlockLineLayout.cpp:
            (WebCore::RenderBlock::findNextLineBreak):

2010-09-17  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/8423458> Multi-line text drawing is faster than single-line text drawing
        Reviewed by Brad Moore.

        When calling __web_drawAtPoint from [NSString drawAtPoint:forFont], forWidth is always set as FLT_MAX.
        In this case, WebCore shouldn't try to truncate the string because the target width is infinite.

        * wak/WAKStringDrawing.mm:

2010-09-16  Paul Knight  <pknight@apple.com>

        Reviewed by David Carson.

        <rdar://problem/8399481> Extraneous touchstart events with a throw-like gesture
        
        Touch events come in as a list of touches. Both the aggregate event and each individual touch have a phase (begin, change, end, stationary, and so on).
        
        If two things happen simultaneously, for example, a finger is lifted while another moves, we receive the following events:
            TouchEventChange with touches (TouchPhaseMoved, TouchPhaseEnded)
            TouchEventEnd with touches (TouchPhaseMoved, TouchPhaseEnded)
        
        We used to take both of those events, unpack the two touches and dispatch DOM TouchEvents for both, multiplying the number of events.
        
        Instead, we should dispatch only the events for the aggregate event type.

        * page/iphone/EventHandlerIPhoneTouch.cpp:
        (WebCore::EventHandler::handleTouchEvent):

2010-09-16  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/8403395> rendererForFont is taking a large amount of time in [NSString drawAtPoint:withFont] (YouTube blocker)
        Reviewed by Cameron Zwarich.

        Instead of checking for the presence of a 'sbix' table in the font, use GraphicsService SPI GSFontHasColorGlyphs() to
        query if the font is colored bitmap font because that info is cached in GSFont now.

        * platform/graphics/mac/FontPlatformDataMac.mm:
        (WebCore::FontPlatformData::FontPlatformData):
        (WebCore::FontPlatformData::setFont):

2010-09-16  Ian Henderson  <ianh@apple.com>

        Reviewed by Aaron Golden.

        <rdar://problem/6454414> Remove SPI WebTryThreadLock

        Since there aren't any more clients of this function and it's not
        supported, remove it.

        * WebCore.iPhone.exp:
        * wak/WebCoreThread.h:
        * wak/WebCoreThread.mm:

2010-09-15  Ian Henderson  <ianh@apple.com>

        Reviewed by Cameron Zwarich.

        <rdar://problem/8434112> Page flashes after zooming in/out

        After a zoom, layoutTilesNow is called while the tiling mode is still
        set to Zooming.  The change made for <rdar://problem/8413554> makes
        layoutTilesNow to do nothing in this case, which causes a flash.
        Change layoutTilesNow to check only if the tiling mode is Disabled.

        * platform/iphone/TileCache.mm:
        (WebCore::TileCache::layoutTilesNow):

2010-09-14  Brad Moore  <bradm@apple.com>

        Reviewed by Dan Bernstein.

        <rdar://problem/6832272> multi line string drawing can return too large of a size due to word/character rounding
        <rdar://problem/7994912> Fast string drawing and measurement should agree
        <rdar://problem/8014100> Multiline string measurement can report phantom lines
        
        Multi-line string measurement measures a string like "abc def" as:
        
        ceil(width("abc")) + ceil(width(" ")) ceil(width("def"))
        
        Single-line measures the same string as:
        
        ceil(width("abc")) + ceil(width(" abc"))
        
        At first blush, including the space in the run shouldn't make any difference, since the width of the space is
        always integral.  However, since we're adding floats, the associativity of addition is crucial.  By modifying
        the width iterator to sum the glyph widths from a word separately from preceding whitespace, we gain precision
        and match multi-line string drawing.

        * platform/graphics/FontFastPath.cpp: For consistency, use the WidthIterator's notion of the drawn size.
        (WebCore::Font::drawSimpleText):
        * platform/graphics/WidthIterator.cpp: Change the associativity of width addition to minimize precision loss.
        (WebCore::WidthIterator::advance):
        * wak/WAKStringDrawing.mm: Disable hacks that attempted to accoutn for the above.

2010-09-14  Dan Bernstein  <mitz@apple.com>

        Suggested by Cameron Zwarich.

        * platform/iphone/TileCache.mm:
        (WebCore::TileCache::layoutTilesNow): Check isTileCreationSuspended() before
        taking the mutex, for consistency and a theoretical performance advantage.

2010-09-14  Cameron Zwarich  <zwarich@apple.com>

        Reviewed by Simon Fraser.

        <rdar://problem/8413554> Jasper8C91: Bringing up print options dialog using a UIViewPrintFormatter causes existing WebView to reflow

        * platform/iphone/TileCache.mm:
        (WebCore::TileCache::layoutTilesNow): Bail out if tile creation is suspended (which is
        the case during layout for printing).

2010-09-14  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/8354794> Launch and cancel URL led to crash (8B115) (WebCore::ScriptExecutionContext::databaseThread() )
        Reviewed by Ian Henderson.

        The assumption that DatabaseTracer::setDatabasesPaused always be thread-safe is not true, because setDatabasesPaused()
        calls ScriptExcutionContext::databaseThread(), which could be accessed by web thread at the same time and leave databaseThread
        partially initialized.  To avoid random crashing, we need to acquire the web lock before calling setDatabasesPaused.

        * storage/DatabaseTracker.cpp:
        (WebCore::DatabaseTracker::setDatabasesPaused): don't use the same "end" local variable for nested scopes, add null check for scriptContext.

2010-09-13  Ian Henderson  <ianh@apple.com>

        <rdar://problem/8407269> N82 Jasper 8C90: Using Location Enabled Webpage Keeps Location Icon in Status Bar After Shut

        Reviewed by Aaron Golden.

        Add suspend and resume methods to GeolocationManager.  Suspending the
        shared GeolocationManager releases its CLLocationManager and completely
        turns off location services for the process.

        * WebCore.iPhone.exp: Export the suspend and resume methods, as well
        as the GeolocationManager class itself.
        * WebCore.xcodeproj/project.pbxproj: Change the GeolocationManager.h
        header to be private instead of project.
        * platform/iphone/GeolocationManager.h:
        (WebCore::GeolocationManager::GeolocationManager):
        * platform/iphone/GeolocationManager.mm:
        (GeolocationManager::linkService):
        (GeolocationLink::~GeolocationLink):
        (GeolocationManager::suspend):
        (GeolocationManager::resume):
        (GeolocationManager::updatePositionOptions):

2010-09-12  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/8421012> Neglect unlikely hyphenation opportunities

        Merged TOT WebKit r67350.

    2010-09-12  Dan Bernstein  <mitz@apple.com>

        Reviewed by Adele Peterson.

        Neglect unlikely hyphenation opportunities
        https://bugs.webkit.org/show_bug.cgi?id=45606

        Avoid looking for hyphenation points in about 40% of the cases at the cost of missing about
        3% of the hyphenation opportunities.

        * rendering/RenderBlockLineLayout.cpp:
        (WebCore::tryHyphenating): Bail out if the widest the prefix before the hyphen can be is no more
        than 5/4 the font size.

2010-09-10  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/7954156> iOS: Need to be able to clear cached authentication credentials in MobileSafari.
        Reviewed by David Carson.

        Add a static method in CredentialStorage to clear the in-memory credential hashmap.

        * WebCore.iPhone.exp:
        * platform/network/CredentialStorage.cpp:
        (WebCore::CredentialStorage::clearCredentials):
        * platform/network/CredentialStorage.h:

2010-09-10  Paul Knight  <pknight@apple.com>

        Reviewed by David Carson.

        <rdar://problem/8389192> Stop clamping touch event coordinates to the view bounds
        
        Each sequence of touch events should only be delivered to one frame (at least for now, <rdar://problem/7185284> is related).
        This way a frame will still see touchmove and touchend events if a finger has been dragged outside its bounds.

        * page/EventHandler.cpp:
        (WebCore::EventHandler::EventHandler):
        (WebCore::EventHandler::clear):
        * page/EventHandler.h:
        * page/iphone/EventHandlerIPhoneTouch.cpp:
        (WebCore::allTouchesAreTouchPhaseBegan): static helper function to determine if all individual touches in an event
            are in the Began phase. Used to determine if a TouchEvent is the start of a new touch sequence.
        (WebCore::EventHandler::handleTouchEvent): At the start of a new touch sequence, remember the subframe (if any) the
            event is forwarded to. Forward subsequent touch events in that sequence to that subframe.

2010-09-10  Paul Knight  <pknight@apple.com>

        Reviewed by David Carson.

        <rdar://problem/8389192> Stop clamping touch event coordinates to the view bounds
        
        Deliver touch move events to the responder view so they'll continue to be sent to content even if a finger is dragged outside the bounds of the web view.

        * wak/WKWindow.mm:
        (WKWindowSendEvent):

2010-09-10  Dean Jackson  <dino@apple.com>

        Reviewed by David Carson.

        <rdar://problem/8414203> Turn WebGL on in compile, but only enable via private API

        Add ENABLE_CANVAS_3D to FeatureDefines for iOS.

        * Configurations/FeatureDefines.xcconfig:

2010-09-10  Chris Fleizach  <cfleizach@apple.com>

        Reviewed by Joseph Pecoraro.

        <rdar://problem/8417059> AX: possible to crash because m_object disappears
 
        Not often, calling updateBackingStore() will invalidate the object calling it 
        and make m_object nil out. This should be protected against in prepareAccessibilityCall
        by verifying m_object still exists after calling updateBackingStore.

        * accessibility/iphone/AccessibilityObjectWrapperIPhone.mm:
        (-[AccessibilityObjectWrapper _prepareAccessibilityCall]):

2010-09-10  Joseph Pecoraro  <joepeck@webkit.org>

        <rdar://problem/8355738> Returning via back button makes iOS4 cache all XHR responses from then on

        Merged ToT WebKit r63100 and r63528.

    2010-07-16  Nate Chapin  <japhet@chromium.org>

            Reviewed by Darin Fisher.

            Regression in r63100: Don't clear m_loadType in
            FrameLoader::handledOnloadEvents, as it is used
            to make some decisions after the load has actually
            completed.

            Tickling this bug requires manipulation
            via the API (layout tests don't appear to traverse
            the correct codepath), so no layout test.

            https://bugs.webkit.org/show_bug.cgi?id=42298

            * loader/FrameLoader.cpp:
            (WebCore::FrameLoader::handledOnloadEvents): Don't reset m_loadType.
            (WebCore::FrameLoader::addExtraFieldsToRequest): Set subresource cache
               policy in one place and don't depend on m_loadType.

    2010-07-12  Nate Chapin  <japhet@chromium.org>

           Reviewed by Darin Fisher.

           Ensure that a cache policy that forces validation is cleared once
           the load event is fired, rather than only doing so at the next
           navigation. This leads to a lot of unnecessary load on AJAX-y
           websites.

           https://bugs.webkit.org/show_bug.cgi?id=41813

           Test: http/tests/xmlhttprequest/cache-headers-after-reload.html

           * loader/FrameLoader.cpp:
           (WebCore::FrameLoader::handledOnloadEvents): Reset m_loadType to FrameLoadTypeStandard.
           (WebCore::FrameLoader::addExtraFieldsToRequest): Only respect the original request's cache policy if the
               DocumentLoader is still loading, and handle the other cache policy settings that were scattered around the loader.
           (WebCore::FrameLoader::loadResourceSynchronously): Merge cachePolicy setting into FrameLoader::addExtraFieldsToRequest.
           * loader/SubresourceLoader.cpp:
           (WebCore::SubresourceLoader::create): Merge cachePolicy setting into FrameLoader::addExtraFieldsToRequest.

2010-09-09  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Carson.

        <rdar://problem/8400097> Jasper8C86: On reload, Facebook page displays no content

        Pausing and resuming a frame should be balanced by clients. Here we
        add an ASSERT to make sure clients never try to unpause an already unpaused
        page, causing the pause counter to go to negative numbers and causing
        issues later on.

        * page/iphone/FrameIPhone.mm:
        (WebCore::Frame::setTimersPausedInternal):

2010-09-08  Aaron Golden  <agolden@apple.com>

        Reviewed by David Carson.

        <rdar://problem/8114450> WebKit's tile cache sizing seems suboptimal with multitasking

        Removing two memory level thresholds, <= 20% remaining and <= 25% remaining.  In this
        new world of multitasking we expect to be hovering around 20% of system memory available,
        and with these thresholds removed we'll stay in a more aggressive tiling mode in that case.
        We'll still drop back to minimal tiling a little before the memory pressure become so great
        that SpringBoard starts killing background apps.

        * platform/iphone/TileCache.mm:
        (WebCore::TileCache::calculateCoverAndKeepRectForMemoryLevel):

2010-09-08  Eric Carlson  <eric.carlson@apple.com>

        Reviewed by Cameron Zwarich.

        <rdar://problem/8382826> Can't preview a song

        Make playback startup less sensitive to the sequence of state changes in the 
        media player.

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::setNetworkState): Trigger playback if m_requestingPlay is set 
        when network state drops back to NETWORK_IDLE.
        (WebCore::HTMLMediaElement::playInternal): Set m_requestingPlay after calling updatePlayState.
        (WebCore::HTMLMediaElement::updatePlayState): Trigger playback when m_requestingPlay is set.

2010-09-07  Joseph Pecoraro  <joepeck@webkit.org>

        <rdar://problem/8382082> <select> onchange event causing tests to fail

        Merged ToT WebKit r66929 and r66930.

        * dom/SelectElement.cpp:
        (WebCore::SelectElement::setSelectedIndex): Removed the incorrect code from iOS r249225.

    2010-09-03  Joseph Pecoraro  <joepeck@webkit.org>

            Reviewed by Darin Adler.

            Provide a way to trigger a <select multiple> onchange event on changes
            https://bugs.webkit.org/show_bug.cgi?id=45192

            Test: LayoutTests/platform/mac/fast/objc/dom-html-select-activate.html

            This provides a way for a WebKit client using the Obj-C DOM bindings to
            trigger the "change" on a listbox select (<select multiple> or <select>
            with size > 1). This is because when a select is rendered as a listbox
            "change" events are triggered by mouse down events.

            This adds -[DOMHTMLSelectElement _activateItemAtIndex:allowMultipleSelection:]
            to allow for handling multiple selections if the select element is a
            multi-select.

            * bindings/objc/DOMHTML.mm:
            (-[DOMHTMLSelectElement _activateItemAtIndex:allowMultipleSelection:]):
            * bindings/objc/DOMPrivate.h: unified the Category name. Was "FormsAutocomplete" now all are "FormAutocomplete".
            * dom/SelectElement.h:
            * html/HTMLSelectElement.cpp:
            (WebCore::HTMLSelectElement::setSelectedIndexByUser): listboxs need to be treated specially to fire their "change" event.
            * html/HTMLSelectElement.h:
            * wml/WMLSelectElement.cpp:
            (WebCore::WMLSelectElement::setSelectedIndexByUser):

2010-09-03  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/8005192> Mail entered a state where message subject and content isn't displayed
        Reviewed by Cameron Zwarich.

        This is a workaround for <rdar://problem/8005192>.  Normally, when main thread gets the web lock, it will
        release the lock on main runloop's exit.  However, for some reason, main thread in MobileMail sometimes
        acquired web lock but was not able to release it on runloop exit, and web thread gets stuck when trying
        to get the lock later.  This patch adds a observer for runloop entry to detect this state.  If main
        thread has the lock when entering runloop, we force it to release the lock and reset mainThreadLockCount.

        The observer will only be installed on MobileMail by calling MainRunLoopUnlockGuard() at its initialization stage.

        * WebCore.iPhone.exp:
        * wak/WebCoreThread.h:
        * wak/WebCoreThread.mm:
        (MainRunLoopUnlockGuard):
        (WebThreadUnlockGuardForMail):

2010-09-07  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/7794761> iBooks: Links in a float in multicol do not hit test correctly (44730)

        Merged TOT WebKit r66900.

    2010-09-07  Dan Bernstein  <mitz@apple.com>

        Reviewed by Dave Hyatt.

        Floats inside of multicol fail to hit test
        https://bugs.webkit.org/show_bug.cgi?id=44730

        Test: fast/multicol/hit-test-float.html

        Factored float hit-testing out of nodeAtPoint so that hitTestColumns could
        call it with column-adjusted coordinates.

        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::nodeAtPoint):
        (WebCore::RenderBlock::hitTestFloats):
        (WebCore::RenderBlock::hitTestColumns):
        * rendering/RenderBlock.h:

2010-09-03  David Carson  <dacarson@apple.com>

        Reviewed by Dan Bernstein.

        <rdar://problem/8358962> Canvas ImageData tests fail after switching canvas buffer to ARGB32

        Introduce USE_ARGB32 to wrap all format changes and Switch byte order of image content.

        * platform/graphics/cg/ImageBufferCG.cpp:
        (WebCore::ImageBuffer::ImageBuffer):
        (WebCore::):

2010-09-03  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/8392794> REGRESSION (r216813): Decomposed diacritics render incorrectly when preceded by stacked diacritics

        Merged TOT WebKit r66740.

    2010-09-03  Dan Bernstein  <mitz@apple.com>

        Reviewed by Anders Carlsson.

        <rdar://problem/8392655> REGRESSION (r57215): Decomposed diacritics render incorrectly when preceded by stacked diacritics
        https://bugs.webkit.org/show_bug.cgi?id=45182

        Test: fast/text/decomposed-after-stacked-diacritics.html

        * platform/graphics/Font.cpp:
        (WebCore::Font::codePath): Do not bail out if the run contains stacked diacritics, since
        it may also contain characters that require the complex text code path.

2010-09-02  Aaron Golden  <agolden@apple.com>

        Reviewed by Cameron Zwarich.

        <rdar://problem/8359530> No text in find on page highlight bubbles on this page

        Desktop Safari had this bug too:
        <rdar://problem/7413925> Find highlight is drawn incorrectly on pages with hardware layers

        and we're merged up past the point where the fix went in (r51355), but we missed part of
        the fix.  There was a change in FrameMac.mm and we didn't make the equivalent change in
        FrameIPhone.mm.  I'm just making the same change, adding the "flatten compositing layers"
        flag to the paint behavior in Frame::imageFromRect.

        * page/iphone/FrameIPhone.mm:
        (WebCore::Frame::imageFromRect):

2010-09-02 Beth Dakin <bdakin@apple.com>

        <rdar://problem/8064938> REGRESSION: MobileSafari hangs when editing search field on netflix.com (8A293)

        Merged ToT WebKit r66552 and r66555.

    2010-08-31  Beth Dakin  <bdakin@apple.com>
    
            Rubber-stamped by Dan Bernstein..
    
            Variable name change. m_shouldFirePostLayoutTimer is now 
            m_hasPendingPostLayoutTasks

            * page/FrameView.cpp:
            (WebCore::FrameView::FrameView):
            (WebCore::FrameView::~FrameView):
            (WebCore::FrameView::reset):
            (WebCore::FrameView::layout):
            (WebCore::FrameView::performPostLayoutTasks):
            * page/FrameView.h:

    2010-08-31  Beth Dakin  <bdakin@apple.com>

            Reviewed by Dave Hyatt.

            Fix for https://bugs.webkit.org/show_bug.cgi?id=44828 FrameView 
            should make more calls to postLayoutTasks() using the timer
            -and corresponding-
            <rdar://problem/8064938>

            This change only allows synchronous calls to postLayoutTasks() if 
            we are not already in a synchronous call to postLayoutTasks(). 
            Furthermore, it de-couples the notion of "the post layout timer 
            should fire" from m_postLayoutTasksTimer.isActive(), instead using 
            a boolean to track the need to use the timer.

            * page/FrameView.cpp:
            (WebCore::FrameView::FrameView):
            (WebCore::FrameView::~FrameView):
            (WebCore::FrameView::reset):
            (WebCore::FrameView::layout):
            (WebCore::FrameView::unscheduleRelayout):
            (WebCore::FrameView::performPostLayoutTasks):
            * page/FrameView.h:

2010-09-02  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Cameron Zwarich.

        <rdar://problem/8348337> Tapping next on the New Noteworthy tables
        causes the page to flash in the iTunes store on the iPad
        
        The Hurricane merge brought in new desktop code that causes
        pages to drop out of compositing mode if all of their compositing
        layers go away. Going out of compositing mode involves a UIDelegate
        call to remove the root layer, causing a CA commit on the main thread
        before the web thread has had a chance to update the tiles, which
        results in flashing.
        
        Fix by reverting to the pre-Jasper behavior of staying in compositing
        mode (which involves keeping a couple of cheap, empty layers around),
        when all the page's layers go away.

        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::computeCompositingRequirements):

2010-09-02  Eric Carlson  <eric.carlson@apple.com>

        Reviewed by Simon Fraser.

        <rdar://problem/8266916> iPad video preview fail always (no problem on iPhone)

        MobileStore depends on the Apex era shouldLoadMediaElementURL client delegate method to
        allow only media element urls to be loaded from non-whitelisted servers.

        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::willLoadMediaElementURL): Call webView:shouldLoadMediaURL:inFrame
        instead of webView:resource:willSendRequest:redirectResponse:fromDataSource only when
        running in MobileStore.

        * platform/RuntimeApplicationChecksIPhone.h:
        * platform/RuntimeApplicationChecksIPhone.mm:
        (WebCore::applicationIsMobileStore): New, return true when running in MobileStore.

2010-09-01  David Carson  <dacarson@apple.com>

        Reviewed by Joseph Pecoraro.

        <rdar://problem/7992472> iPad: iframe steals events from overlaid DOM

        This patch rolls out the incorrect change I made to address:
            <rdar://problem/7185284> JavaScript touch events are hit-tested on a per-frame basis using the centroid of touch locations
        When processing the new touch and it is the first touch, then see if the hit tested
        node belongs to a subframe. If does, ask the subframe EventHandler to handle the
        entire touch event.

        No new tests. (OOPS!)

        * WebCore.iPhone.exp: Reverted earlier change
        * page/iphone/EventHandlerIPhoneTouch.cpp:
        (WebCore::EventHandler::handleTouchEvent): Pass the event to the subframe if required.
        * wak/WKWindow.h: Reverted earlier change
        * wak/WKWindow.mm: Reverted earlier change
        (WKWindowSendEvent):

2010-09-02  Dean Jackson  <dino@apple.com>

        <rdar://problem/7557398> iOS: Implement WebGL

        Merge ToT WebKit r59499, r60902

    2010-05-14  Kenneth Russell  <kbr@google.com>

            Reviewed by Darin Adler.

            Rename WebGLArray types to TypedArray types
            https://bugs.webkit.org/show_bug.cgi?id=39091

            Extended functionality of do-webcore-rename script and used it to
            rename the WebGLArray types to the TypedArray naming convention.
            The only source files which were touched by hand, and which are
            being manually reviewed, are:
                WebCore/page/DOMWindow.idl
                WebCore/bindings/generic/RuntimeEnabledFeatures.h (script's changes undone)
                WebKit/WebCore/bindings/js/JSDOMWindowCustom.cpp
                WebKit/WebCore/bindings/v8/custom/V8DOMWindowCustom.cpp
            These only needed to be touched to update the aliases between the
            WebGLArray and TypedArray names introduced in bug 39036. (It was
            not feasible to have do-webcore-rename handle this as it would
            introduce circular renamings.) These aliases will be removed in
            roughly a month once existing WebGL content has been updated.

            No new tests; covered under existing WebGL tests. Updated
            constructed-objects-prototypes and prototype-inheritance-2 tests.
            Ran all layout tests in Safari and all WebGL tests in Chromium.

            * DerivedSources.make:
            * GNUmakefile.am:
            * WebCore.gypi:
            * WebCore.pri:
            * WebCore.pro:
            * WebCore.xcodeproj/project.pbxproj:
            * bindings/js/JSArrayBufferConstructor.cpp: Copied from WebCore/bindings/js/JSWebGLArrayBufferConstructor.cpp.
            (WebCore::):
            (WebCore::JSArrayBufferConstructor::JSArrayBufferConstructor):
            (WebCore::constructCanvasArrayBuffer):
            (WebCore::JSArrayBufferConstructor::getConstructData):
            * bindings/js/JSArrayBufferConstructor.h: Copied from WebCore/bindings/js/JSWebGLArrayBufferConstructor.h.
            (WebCore::construct):
            * bindings/js/JSArrayBufferViewCustom.cpp: Copied from WebCore/bindings/js/JSWebGLArrayCustom.cpp.
            (WebCore::toJS):
            (WebCore::JSArrayBufferView::slice):
            * bindings/js/JSArrayBufferViewHelper.h: Copied from WebCore/bindings/js/JSWebGLArrayHelper.h.
            * bindings/js/JSDOMWindowCustom.cpp:
            (WebCore::JSDOMWindow::arrayBuffer):
            (WebCore::JSDOMWindow::int8Array):
            (WebCore::JSDOMWindow::uint8Array):
            (WebCore::JSDOMWindow::int32Array):
            (WebCore::JSDOMWindow::uint32Array):
            (WebCore::JSDOMWindow::int16Array):
            (WebCore::JSDOMWindow::uint16Array):
            (WebCore::JSDOMWindow::floatArray):
            (WebCore::JSDOMWindow::webGLArrayBuffer):
            (WebCore::JSDOMWindow::webGLByteArray):
            (WebCore::JSDOMWindow::webGLUnsignedByteArray):
            (WebCore::JSDOMWindow::webGLIntArray):
            (WebCore::JSDOMWindow::webGLUnsignedIntArray):
            (WebCore::JSDOMWindow::webGLShortArray):
            (WebCore::JSDOMWindow::webGLUnsignedShortArray):
            (WebCore::JSDOMWindow::webGLFloatArray):
            * bindings/js/JSFloatArrayConstructor.cpp: Copied from WebCore/bindings/js/JSWebGLFloatArrayConstructor.cpp.
            (WebCore::):
            (WebCore::JSFloatArrayConstructor::JSFloatArrayConstructor):
            (WebCore::constructCanvasFloatArray):
            (WebCore::JSFloatArrayConstructor::getConstructData):
            * bindings/js/JSFloatArrayConstructor.h: Copied from WebCore/bindings/js/JSWebGLFloatArrayConstructor.h.
            * bindings/js/JSFloatArrayCustom.cpp: Copied from WebCore/bindings/js/JSWebGLFloatArrayCustom.cpp.
            (WebCore::JSFloatArray::indexSetter):
            (WebCore::toJS):
            (WebCore::JSFloatArray::set):
            * bindings/js/JSInt16ArrayConstructor.cpp: Copied from WebCore/bindings/js/JSWebGLShortArrayConstructor.cpp.
            (WebCore::):
            (WebCore::JSInt16ArrayConstructor::JSInt16ArrayConstructor):
            (WebCore::constructCanvasShortArray):
            (WebCore::JSInt16ArrayConstructor::getConstructData):
            * bindings/js/JSInt16ArrayConstructor.h: Copied from WebCore/bindings/js/JSWebGLShortArrayConstructor.h.
            * bindings/js/JSInt16ArrayCustom.cpp: Copied from WebCore/bindings/js/JSWebGLShortArrayCustom.cpp.
            (WebCore::JSInt16Array::indexSetter):
            (WebCore::toJS):
            (WebCore::JSInt16Array::set):
            * bindings/js/JSInt32ArrayConstructor.cpp: Copied from WebCore/bindings/js/JSWebGLIntArrayConstructor.cpp.
            (WebCore::):
            (WebCore::JSInt32ArrayConstructor::JSInt32ArrayConstructor):
            (WebCore::constructCanvasIntArray):
            (WebCore::JSInt32ArrayConstructor::getConstructData):
            * bindings/js/JSInt32ArrayConstructor.h: Copied from WebCore/bindings/js/JSWebGLIntArrayConstructor.h.
            * bindings/js/JSInt32ArrayCustom.cpp: Copied from WebCore/bindings/js/JSWebGLIntArrayCustom.cpp.
            (WebCore::JSInt32Array::indexSetter):
            (WebCore::toJS):
            (WebCore::JSInt32Array::set):
            * bindings/js/JSInt8ArrayConstructor.cpp: Copied from WebCore/bindings/js/JSWebGLByteArrayConstructor.cpp.
            (WebCore::):
            (WebCore::JSInt8ArrayConstructor::JSInt8ArrayConstructor):
            (WebCore::constructCanvasByteArray):
            (WebCore::JSInt8ArrayConstructor::getConstructData):
            * bindings/js/JSInt8ArrayConstructor.h: Copied from WebCore/bindings/js/JSWebGLByteArrayConstructor.h.
            * bindings/js/JSInt8ArrayCustom.cpp: Copied from WebCore/bindings/js/JSWebGLByteArrayCustom.cpp.
            (WebCore::JSInt8Array::indexSetter):
            (WebCore::toJS):
            (WebCore::JSInt8Array::set):
            * bindings/js/JSUint16ArrayConstructor.cpp: Copied from WebCore/bindings/js/JSWebGLUnsignedShortArrayConstructor.cpp.
            (WebCore::):
            (WebCore::JSUint16ArrayConstructor::JSUint16ArrayConstructor):
            (WebCore::constructCanvasUnsignedShortArray):
            (WebCore::JSUint16ArrayConstructor::getConstructData):
            * bindings/js/JSUint16ArrayConstructor.h: Copied from WebCore/bindings/js/JSWebGLUnsignedShortArrayConstructor.h.
            * bindings/js/JSUint16ArrayCustom.cpp: Copied from WebCore/bindings/js/JSWebGLUnsignedShortArrayCustom.cpp.
            (WebCore::JSUint16Array::indexSetter):
            (WebCore::toJS):
            (WebCore::JSUint16Array::set):
            * bindings/js/JSUint32ArrayConstructor.cpp: Copied from WebCore/bindings/js/JSWebGLUnsignedIntArrayConstructor.cpp.
            (WebCore::):
            (WebCore::JSUint32ArrayConstructor::JSUint32ArrayConstructor):
            (WebCore::constructCanvasUnsignedIntArray):
            (WebCore::JSUint32ArrayConstructor::getConstructData):
            * bindings/js/JSUint32ArrayConstructor.h: Copied from WebCore/bindings/js/JSWebGLUnsignedIntArrayConstructor.h.
            * bindings/js/JSUint32ArrayCustom.cpp: Copied from WebCore/bindings/js/JSWebGLUnsignedIntArrayCustom.cpp.
            (WebCore::JSUint32Array::indexSetter):
            (WebCore::toJS):
            (WebCore::JSUint32Array::set):
            * bindings/js/JSUint8ArrayConstructor.cpp: Copied from WebCore/bindings/js/JSWebGLUnsignedByteArrayConstructor.cpp.
            (WebCore::):
            (WebCore::JSUint8ArrayConstructor::JSUint8ArrayConstructor):
            (WebCore::constructCanvasUnsignedByteArray):
            (WebCore::JSUint8ArrayConstructor::getConstructData):
            * bindings/js/JSUint8ArrayConstructor.h: Copied from WebCore/bindings/js/JSWebGLUnsignedByteArrayConstructor.h.
            * bindings/js/JSUint8ArrayCustom.cpp: Copied from WebCore/bindings/js/JSWebGLUnsignedByteArrayCustom.cpp.
            (WebCore::JSUint8Array::indexSetter):
            (WebCore::toJS):
            (WebCore::JSUint8Array::set):
            * bindings/js/JSWebGLArrayBufferConstructor.cpp: Removed.
            * bindings/js/JSWebGLArrayBufferConstructor.h: Removed.
            * bindings/js/JSWebGLArrayCustom.cpp: Removed.
            * bindings/js/JSWebGLArrayHelper.h: Removed.
            * bindings/js/JSWebGLByteArrayConstructor.cpp: Removed.
            * bindings/js/JSWebGLByteArrayConstructor.h: Removed.
            * bindings/js/JSWebGLByteArrayCustom.cpp: Removed.
            * bindings/js/JSWebGLFloatArrayConstructor.cpp: Removed.
            * bindings/js/JSWebGLFloatArrayConstructor.h: Removed.
            * bindings/js/JSWebGLFloatArrayCustom.cpp: Removed.
            * bindings/js/JSWebGLIntArrayConstructor.cpp: Removed.
            * bindings/js/JSWebGLIntArrayConstructor.h: Removed.
            * bindings/js/JSWebGLIntArrayCustom.cpp: Removed.
            * bindings/js/JSWebGLRenderingContextCustom.cpp:
            (WebCore::JSWebGLRenderingContext::bufferData):
            (WebCore::JSWebGLRenderingContext::bufferSubData):
            (WebCore::JSWebGLRenderingContext::texImage2D):
            (WebCore::JSWebGLRenderingContext::texSubImage2D):
            (WebCore::dataFunctionf):
            (WebCore::dataFunctioni):
            (WebCore::dataFunctionMatrix):
            * bindings/js/JSWebGLShortArrayConstructor.cpp: Removed.
            * bindings/js/JSWebGLShortArrayConstructor.h: Removed.
            * bindings/js/JSWebGLShortArrayCustom.cpp: Removed.
            * bindings/js/JSWebGLUnsignedByteArrayConstructor.cpp: Removed.
            * bindings/js/JSWebGLUnsignedByteArrayConstructor.h: Removed.
            * bindings/js/JSWebGLUnsignedByteArrayCustom.cpp: Removed.
            * bindings/js/JSWebGLUnsignedIntArrayConstructor.cpp: Removed.
            * bindings/js/JSWebGLUnsignedIntArrayConstructor.h: Removed.
            * bindings/js/JSWebGLUnsignedIntArrayCustom.cpp: Removed.
            * bindings/js/JSWebGLUnsignedShortArrayConstructor.cpp: Removed.
            * bindings/js/JSWebGLUnsignedShortArrayConstructor.h: Removed.
            * bindings/js/JSWebGLUnsignedShortArrayCustom.cpp: Removed.
            * bindings/v8/V8DOMWrapper.cpp:
            * bindings/v8/custom/V8ArrayBufferCustom.cpp: Copied from WebCore/bindings/v8/custom/V8WebGLArrayBufferCustom.cpp.
            (WebCore::V8ArrayBuffer::constructorCallback):
            * bindings/v8/custom/V8ArrayBufferViewCustom.cpp: Copied from WebCore/bindings/v8/custom/V8WebGLArrayCustom.cpp.
            (WebCore::toV8):
            (WebCore::V8ArrayBufferView::sliceCallback):
            * bindings/v8/custom/V8ArrayBufferViewCustom.h: Copied from WebCore/bindings/v8/custom/V8WebGLArrayCustom.h.
            (WebCore::constructWebGLArray):
            * bindings/v8/custom/V8DOMWindowCustom.cpp:
            (WebCore::V8DOMWindow::WebGLArrayBufferAccessorGetter):
            (WebCore::V8DOMWindow::WebGLByteArrayAccessorGetter):
            (WebCore::V8DOMWindow::WebGLUnsignedByteArrayAccessorGetter):
            (WebCore::V8DOMWindow::WebGLShortArrayAccessorGetter):
            (WebCore::V8DOMWindow::WebGLUnsignedShortArrayAccessorGetter):
            (WebCore::V8DOMWindow::WebGLIntArrayAccessorGetter):
            (WebCore::V8DOMWindow::WebGLUnsignedIntArrayAccessorGetter):
            (WebCore::V8DOMWindow::WebGLFloatArrayAccessorGetter):
            * bindings/v8/custom/V8FloatArrayCustom.cpp: Copied from WebCore/bindings/v8/custom/V8WebGLFloatArrayCustom.cpp.
            (WebCore::V8FloatArray::constructorCallback):
            (WebCore::V8FloatArray::setCallback):
            (WebCore::toV8):
            * bindings/v8/custom/V8Int16ArrayCustom.cpp: Copied from WebCore/bindings/v8/custom/V8WebGLShortArrayCustom.cpp.
            (WebCore::V8Int16Array::constructorCallback):
            (WebCore::V8Int16Array::setCallback):
            (WebCore::toV8):
            * bindings/v8/custom/V8Int32ArrayCustom.cpp: Copied from WebCore/bindings/v8/custom/V8WebGLIntArrayCustom.cpp.
            (WebCore::V8Int32Array::constructorCallback):
            (WebCore::V8Int32Array::setCallback):
            (WebCore::toV8):
            * bindings/v8/custom/V8Int8ArrayCustom.cpp: Copied from WebCore/bindings/v8/custom/V8WebGLByteArrayCustom.cpp.
            (WebCore::V8Int8Array::constructorCallback):
            (WebCore::V8Int8Array::setCallback):
            (WebCore::toV8):
            * bindings/v8/custom/V8Uint16ArrayCustom.cpp: Copied from WebCore/bindings/v8/custom/V8WebGLUnsignedShortArrayCustom.cpp.
            (WebCore::V8Uint16Array::constructorCallback):
            (WebCore::V8Uint16Array::setCallback):
            (WebCore::toV8):
            * bindings/v8/custom/V8Uint32ArrayCustom.cpp: Copied from WebCore/bindings/v8/custom/V8WebGLUnsignedIntArrayCustom.cpp.
            (WebCore::V8Uint32Array::constructorCallback):
            (WebCore::V8Uint32Array::setCallback):
            (WebCore::toV8):
            * bindings/v8/custom/V8Uint8ArrayCustom.cpp: Copied from WebCore/bindings/v8/custom/V8WebGLUnsignedByteArrayCustom.cpp.
            (WebCore::V8Uint8Array::constructorCallback):
            (WebCore::V8Uint8Array::setCallback):
            (WebCore::toV8):
            * bindings/v8/custom/V8WebGLArrayBufferCustom.cpp: Removed.
            * bindings/v8/custom/V8WebGLArrayCustom.cpp: Removed.
            * bindings/v8/custom/V8WebGLArrayCustom.h: Removed.
            * bindings/v8/custom/V8WebGLByteArrayCustom.cpp: Removed.
            * bindings/v8/custom/V8WebGLFloatArrayCustom.cpp: Removed.
            * bindings/v8/custom/V8WebGLIntArrayCustom.cpp: Removed.
            * bindings/v8/custom/V8WebGLRenderingContextCustom.cpp:
            (WebCore::vertexAttribAndUniformHelperf):
            (WebCore::uniformHelperi):
            (WebCore::uniformMatrixHelper):
            * bindings/v8/custom/V8WebGLShortArrayCustom.cpp: Removed.
            * bindings/v8/custom/V8WebGLUnsignedByteArrayCustom.cpp: Removed.
            * bindings/v8/custom/V8WebGLUnsignedIntArrayCustom.cpp: Removed.
            * bindings/v8/custom/V8WebGLUnsignedShortArrayCustom.cpp: Removed.
            * html/canvas/ArrayBuffer.cpp: Copied from WebCore/html/canvas/WebGLArrayBuffer.cpp.
            (WebCore::ArrayBuffer::create):
            (WebCore::ArrayBuffer::ArrayBuffer):
            (WebCore::ArrayBuffer::data):
            (WebCore::ArrayBuffer::byteLength):
            (WebCore::ArrayBuffer::~ArrayBuffer):
            (WebCore::ArrayBuffer::tryAllocate):
            * html/canvas/ArrayBuffer.h: Copied from WebCore/html/canvas/WebGLArrayBuffer.h.
            * html/canvas/ArrayBuffer.idl: Copied from WebCore/html/canvas/WebGLArrayBuffer.idl.
            * html/canvas/ArrayBufferView.cpp: Copied from WebCore/html/canvas/WebGLArray.cpp.
            (WebCore::ArrayBufferView::ArrayBufferView):
            (WebCore::ArrayBufferView::~ArrayBufferView):
            (WebCore::ArrayBufferView::setImpl):
            (WebCore::ArrayBufferView::calculateOffsetAndLength):
            * html/canvas/ArrayBufferView.h: Copied from WebCore/html/canvas/WebGLArray.h.
            (WebCore::ArrayBufferView::buffer):
            (WebCore::ArrayBufferView::verifySubRange):
            (WebCore::ArrayBufferView::clampOffsetAndNumElements):
            * html/canvas/ArrayBufferView.idl: Copied from WebCore/html/canvas/WebGLArray.idl.
            * html/canvas/FloatArray.cpp: Copied from WebCore/html/canvas/WebGLFloatArray.cpp.
            (WebCore::FloatArray::create):
            (WebCore::FloatArray::FloatArray):
            (WebCore::FloatArray::slice):
            * html/canvas/FloatArray.h: Copied from WebCore/html/canvas/WebGLFloatArray.h.
            (WebCore::FloatArray::set):
            (WebCore::FloatArray::item):
            * html/canvas/FloatArray.idl: Copied from WebCore/html/canvas/WebGLFloatArray.idl.
            * html/canvas/Int16Array.cpp: Copied from WebCore/html/canvas/WebGLShortArray.cpp.
            (WebCore::Int16Array::create):
            (WebCore::Int16Array::Int16Array):
            (WebCore::Int16Array::slice):
            * html/canvas/Int16Array.h: Copied from WebCore/html/canvas/WebGLShortArray.h.
            * html/canvas/Int16Array.idl: Copied from WebCore/html/canvas/WebGLShortArray.idl.
            * html/canvas/Int32Array.cpp: Copied from WebCore/html/canvas/WebGLIntArray.cpp.
            (WebCore::Int32Array::create):
            (WebCore::Int32Array::Int32Array):
            (WebCore::Int32Array::slice):
            * html/canvas/Int32Array.h: Copied from WebCore/html/canvas/WebGLIntArray.h.
            * html/canvas/Int32Array.idl: Copied from WebCore/html/canvas/WebGLIntArray.idl.
            * html/canvas/Int8Array.cpp: Copied from WebCore/html/canvas/WebGLByteArray.cpp.
            (WebCore::Int8Array::create):
            (WebCore::Int8Array::Int8Array):
            (WebCore::Int8Array::slice):
            * html/canvas/Int8Array.h: Copied from WebCore/html/canvas/WebGLByteArray.h.
            * html/canvas/Int8Array.idl: Copied from WebCore/html/canvas/WebGLByteArray.idl.
            * html/canvas/IntegralTypedArrayBase.h: Copied from WebCore/html/canvas/WebGLIntegralTypedArrayBase.h.
            (WebCore::IntegralTypedArrayBase::set):
            (WebCore::IntegralTypedArrayBase::item):
            (WebCore::IntegralTypedArrayBase::IntegralTypedArrayBase):
            * html/canvas/TypedArrayBase.h: Copied from WebCore/html/canvas/WebGLTypedArrayBase.h.
            (WebCore::TypedArrayBase::set):
            (WebCore::TypedArrayBase::TypedArrayBase):
            (WebCore::TypedArrayBase::create):
            * html/canvas/Uint16Array.cpp: Copied from WebCore/html/canvas/WebGLUnsignedShortArray.cpp.
            (WebCore::Uint16Array::create):
            (WebCore::Uint16Array::Uint16Array):
            (WebCore::Uint16Array::slice):
            * html/canvas/Uint16Array.h: Copied from WebCore/html/canvas/WebGLUnsignedShortArray.h.
            * html/canvas/Uint16Array.idl: Copied from WebCore/html/canvas/WebGLUnsignedShortArray.idl.
            * html/canvas/Uint32Array.cpp: Copied from WebCore/html/canvas/WebGLUnsignedIntArray.cpp.
            (WebCore::Uint32Array::create):
            (WebCore::Uint32Array::Uint32Array):
            (WebCore::Uint32Array::slice):
            * html/canvas/Uint32Array.h: Copied from WebCore/html/canvas/WebGLUnsignedIntArray.h.
            * html/canvas/Uint32Array.idl: Copied from WebCore/html/canvas/WebGLUnsignedIntArray.idl.
            * html/canvas/Uint8Array.cpp: Copied from WebCore/html/canvas/WebGLUnsignedByteArray.cpp.
            (WebCore::Uint8Array::create):
            (WebCore::Uint8Array::Uint8Array):
            (WebCore::Uint8Array::slice):
            * html/canvas/Uint8Array.h: Copied from WebCore/html/canvas/WebGLUnsignedByteArray.h.
            * html/canvas/Uint8Array.idl: Copied from WebCore/html/canvas/WebGLUnsignedByteArray.idl.
            * html/canvas/WebGLArray.cpp: Removed.
            * html/canvas/WebGLArray.h: Removed.
            * html/canvas/WebGLArray.idl: Removed.
            * html/canvas/WebGLArrayBuffer.cpp: Removed.
            * html/canvas/WebGLArrayBuffer.h: Removed.
            * html/canvas/WebGLArrayBuffer.idl: Removed.
            * html/canvas/WebGLBuffer.cpp:
            (WebCore::WebGLBuffer::associateBufferData):
            (WebCore::WebGLBuffer::associateBufferSubData):
            * html/canvas/WebGLBuffer.h:
            (WebCore::WebGLBuffer::elementArrayBuffer):
            * html/canvas/WebGLByteArray.cpp: Removed.
            * html/canvas/WebGLByteArray.h: Removed.
            * html/canvas/WebGLByteArray.idl: Removed.
            * html/canvas/WebGLFloatArray.cpp: Removed.
            * html/canvas/WebGLFloatArray.h: Removed.
            * html/canvas/WebGLFloatArray.idl: Removed.
            * html/canvas/WebGLGetInfo.cpp:
            (WebCore::WebGLGetInfo::WebGLGetInfo):
            (WebCore::WebGLGetInfo::getWebGLFloatArray):
            (WebCore::WebGLGetInfo::getWebGLIntArray):
            (WebCore::WebGLGetInfo::getWebGLUnsignedByteArray):
            * html/canvas/WebGLGetInfo.h:
            * html/canvas/WebGLIntArray.cpp: Removed.
            * html/canvas/WebGLIntArray.h: Removed.
            * html/canvas/WebGLIntArray.idl: Removed.
            * html/canvas/WebGLIntegralTypedArrayBase.h: Removed.
            * html/canvas/WebGLRenderingContext.cpp:
            (WebCore::WebGLRenderingContext::bufferData):
            (WebCore::WebGLRenderingContext::bufferSubData):
            (WebCore::WebGLRenderingContext::getUniform):
            (WebCore::WebGLRenderingContext::getVertexAttrib):
            (WebCore::WebGLRenderingContext::readPixels):
            (WebCore::WebGLRenderingContext::texImage2D):
            (WebCore::WebGLRenderingContext::texSubImage2D):
            (WebCore::WebGLRenderingContext::uniform1fv):
            (WebCore::WebGLRenderingContext::uniform1iv):
            (WebCore::WebGLRenderingContext::uniform2fv):
            (WebCore::WebGLRenderingContext::uniform2iv):
            (WebCore::WebGLRenderingContext::uniform3fv):
            (WebCore::WebGLRenderingContext::uniform3iv):
            (WebCore::WebGLRenderingContext::uniform4fv):
            (WebCore::WebGLRenderingContext::uniform4iv):
            (WebCore::WebGLRenderingContext::uniformMatrix2fv):
            (WebCore::WebGLRenderingContext::uniformMatrix3fv):
            (WebCore::WebGLRenderingContext::uniformMatrix4fv):
            (WebCore::WebGLRenderingContext::vertexAttrib1fv):
            (WebCore::WebGLRenderingContext::vertexAttrib2fv):
            (WebCore::WebGLRenderingContext::vertexAttrib3fv):
            (WebCore::WebGLRenderingContext::vertexAttrib4fv):
            (WebCore::WebGLRenderingContext::getWebGLFloatArrayParameter):
            (WebCore::WebGLRenderingContext::getWebGLIntArrayParameter):
            (WebCore::WebGLRenderingContext::getWebGLUnsignedByteArrayParameter):
            * html/canvas/WebGLRenderingContext.h:
            * html/canvas/WebGLRenderingContext.idl:
            * html/canvas/WebGLShortArray.cpp: Removed.
            * html/canvas/WebGLShortArray.h: Removed.
            * html/canvas/WebGLShortArray.idl: Removed.
            * html/canvas/WebGLTypedArrayBase.h: Removed.
            * html/canvas/WebGLUnsignedByteArray.cpp: Removed.
            * html/canvas/WebGLUnsignedByteArray.h: Removed.
            * html/canvas/WebGLUnsignedByteArray.idl: Removed.
            * html/canvas/WebGLUnsignedIntArray.cpp: Removed.
            * html/canvas/WebGLUnsignedIntArray.h: Removed.
            * html/canvas/WebGLUnsignedIntArray.idl: Removed.
            * html/canvas/WebGLUnsignedShortArray.cpp: Removed.
            * html/canvas/WebGLUnsignedShortArray.h: Removed.
            * html/canvas/WebGLUnsignedShortArray.idl: Removed.
            * page/DOMWindow.idl:
            * platform/graphics/GraphicsContext3D.h:
            * platform/graphics/mac/GraphicsContext3DMac.cpp:
            (WebCore::GraphicsContext3D::bufferData):
            (WebCore::GraphicsContext3D::bufferSubData):
            * platform/graphics/qt/GraphicsContext3DQt.cpp:
            (WebCore::GraphicsContext3D::bufferData):
            (WebCore::GraphicsContext3D::bufferSubData):


    2010-06-09  Kenneth Russell  <kbr@google.com>

            Reviewed by Dimitri Glazkov.

            Rename FloatArray to Float32Array
            https://bugs.webkit.org/show_bug.cgi?id=40323

            Used do-webcore-rename to perform renaming. Manually undid
            incorrect changes to WebCore/bridge/jni/jsc/JNIBridgeJSC.cpp,
            WebCore/manual-tests/resources/ArrayParameterTestApplet.java and
            ArrayParameterTestApplet.class. Updated LayoutTests. Built and ran
            all layout tests on Safari; built Chromium and ran selected WebGL
            tests.

            * CMakeLists.txt:
            * DerivedSources.make:
            * GNUmakefile.am:
            * WebCore.gypi:
            * WebCore.pri:
            * WebCore.pro:
            * WebCore.xcodeproj/project.pbxproj:
            * bindings/generic/RuntimeEnabledFeatures.h:
            (WebCore::RuntimeEnabledFeatures::float32ArrayEnabled):
            * bindings/js/JSArrayBufferViewCustom.cpp:
            (WebCore::toJS):
            * bindings/js/JSDOMWindowCustom.cpp:
            (WebCore::JSDOMWindow::float32Array):
            (WebCore::JSDOMWindow::webGLFloatArray):
            * bindings/js/JSFloat32ArrayConstructor.cpp: Copied from WebCore/bindings/js/JSFloatArrayConstructor.cpp.
            (WebCore::):
            (WebCore::JSFloat32ArrayConstructor::JSFloat32ArrayConstructor):
            (WebCore::constructCanvasFloatArray):
            (WebCore::JSFloat32ArrayConstructor::getConstructData):
            * bindings/js/JSFloat32ArrayConstructor.h: Copied from WebCore/bindings/js/JSFloatArrayConstructor.h.
            * bindings/js/JSFloat32ArrayCustom.cpp: Copied from WebCore/bindings/js/JSFloatArrayCustom.cpp.
            (WebCore::JSFloat32Array::indexSetter):
            (WebCore::toJS):
            (WebCore::JSFloat32Array::set):
            * bindings/js/JSFloatArrayConstructor.cpp: Removed.
            * bindings/js/JSFloatArrayConstructor.h: Removed.
            * bindings/js/JSFloatArrayCustom.cpp: Removed.
            * bindings/js/JSWebGLRenderingContextCustom.cpp:
            (WebCore::dataFunctionf):
            (WebCore::dataFunctionMatrix):
            * bindings/v8/custom/V8ArrayBufferViewCustom.cpp:
            (WebCore::toV8):
            * bindings/v8/custom/V8DOMWindowCustom.cpp:
            (WebCore::V8DOMWindow::WebGLFloatArrayAccessorGetter):
            * bindings/v8/custom/V8Float32ArrayCustom.cpp: Copied from WebCore/bindings/v8/custom/V8FloatArrayCustom.cpp.
            (WebCore::V8Float32Array::constructorCallback):
            (WebCore::V8Float32Array::setCallback):
            (WebCore::toV8):
            * bindings/v8/custom/V8FloatArrayCustom.cpp: Removed.
            * bindings/v8/custom/V8WebGLRenderingContextCustom.cpp:
            (WebCore::vertexAttribAndUniformHelperf):
            (WebCore::uniformMatrixHelper):
            * html/canvas/Float32Array.cpp: Copied from WebCore/html/canvas/FloatArray.cpp.
            (WebCore::Float32Array::create):
            (WebCore::Float32Array::Float32Array):
            (WebCore::Float32Array::slice):
            * html/canvas/Float32Array.h: Copied from WebCore/html/canvas/FloatArray.h.
            * html/canvas/Float32Array.idl: Copied from WebCore/html/canvas/FloatArray.idl.
            * html/canvas/FloatArray.cpp: Removed.
            * html/canvas/FloatArray.h: Removed.
            * html/canvas/FloatArray.idl: Removed.
            * html/canvas/WebGLGetInfo.cpp:
            (WebCore::WebGLGetInfo::WebGLGetInfo):
            (WebCore::WebGLGetInfo::getWebGLFloatArray):
            * html/canvas/WebGLGetInfo.h:
            * html/canvas/WebGLRenderingContext.cpp:
            (WebCore::WebGLRenderingContext::getUniform):
            (WebCore::WebGLRenderingContext::getVertexAttrib):
            (WebCore::WebGLRenderingContext::uniform1fv):
            (WebCore::WebGLRenderingContext::uniform2fv):
            (WebCore::WebGLRenderingContext::uniform3fv):
            (WebCore::WebGLRenderingContext::uniform4fv):
            (WebCore::WebGLRenderingContext::uniformMatrix2fv):
            (WebCore::WebGLRenderingContext::uniformMatrix3fv):
            (WebCore::WebGLRenderingContext::uniformMatrix4fv):
            (WebCore::WebGLRenderingContext::vertexAttrib1fv):
            (WebCore::WebGLRenderingContext::vertexAttrib2fv):
            (WebCore::WebGLRenderingContext::vertexAttrib3fv):
            (WebCore::WebGLRenderingContext::vertexAttrib4fv):
            (WebCore::WebGLRenderingContext::getWebGLFloatArrayParameter):
            * html/canvas/WebGLRenderingContext.h:
            * html/canvas/WebGLRenderingContext.idl:
            * page/DOMWindow.idl:
            * platform/graphics/GraphicsContext3D.h:
            * platform/graphics/mac/GraphicsContext3DMac.cpp:
            * platform/graphics/qt/GraphicsContext3DQt.cpp:

2010-09-01  Dan Bernstein  <mitz@apple.com>

        Reviewed by Cameron Zwarich.

        <rdar://problem/8372523> Printing Yahoo.com hangs printd

        * platform/graphics/cg/ImageCG.cpp:
        (WebCore::BitmapImage::copyUnscaledFrameAtIndex): In the copy code path, instead of using
        CGImageCreateCopy(), return the same image but retain it. Only this way, CGPDFContext knows that
        the copy and the original are the same, and does not encde them separately.

2010-09-01  Justin Garcia  <justin.garcia@apple.com>

        <rdar://problem/8199727> RTL: UIText{Content}View should autodetect directionality of text
        
        Merged ToT WebKit r66581
        
    2010-08-31  Justin Garcia  <justin.garcia@apple.com>
    
        Reviewed by Dan Bernstein.

        https://bugs.webkit.org/show_bug.cgi?id=44915
        Need to handle CSSValueAuto in CSSPrimitiveValue::operator ETextAlign()

        * css/CSSPrimitiveValueMappings.h:
        (WebCore::CSSPrimitiveValue::CSSPrimitiveValue): Map TAAUTO to -webkit-auto.  "auto" is
        not a valid text-align value.  We use TAAUTO internally for the nameless value that acts
        as left if direction:ltr and right for direction:rtl.

2010-08-31  Joseph Pecoraro  <joepeck@webkit.org>

        Part of <rdar://problem/8159628> Can't input data to authorize for Bank of Ireland on-line banking

        Merged ToT WebKit r66284.

    2010-08-27  Joseph Pecoraro  <joepeck@webkit.org>

            Reviewed by Alexey Proskuryakov.

            Extra Events triggered by <input> on focus
            https://bugs.webkit.org/show_bug.cgi?id=44731

            Tests: fast/events/input-focus-no-duplicate-events.html
                   fast/events/input-tab-focus-no-duplicate-events.html

            * dom/Element.cpp:
            (WebCore::Element::focus): do not continue and update the appearance of the element if it was not focused.
            * page/FocusController.cpp:
            (WebCore::FocusController::setFocusedNode): respect the return value of Document::setFocusedNode.

2010-08-31  Aaron Golden  <agolden@apple.com>

        WebKit part of <rdar://problem/8218811> Horrible lag when typing in search field

        Merge ToT WebKit r66544

    2010-08-31  Sam Weinig  <sam@webkit.org>

        Reviewed by Darin Adler.

        Add ability to count text matches without marking
        https://bugs.webkit.org/show_bug.cgi?id=43996

        Safari needs to be able to count text matches without triggering lots of repainting.
        Rename markAllMatchesForText() to countMatchesForText() and add a markMatches parameter.

        * WebCore.exp.in:
        * page/Frame.cpp:
        (WebCore::Frame::countMatchesForText):
        * page/Frame.h:
        * page/Page.cpp:
        (WebCore::Page::markAllMatchesForText):

2010-08-31  Eric Carlson  <eric.carlson@apple.com>

        Reviewed by David Carson.

        <rdar://problem/8348558> REGRESSION (3.2.2-Jasper8C81): Video plays without user 
        interaction on money.cnn.com

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::updatePlayState): Don't call prepareToPlay until we are supposed
        to begin playing.

2010-08-31  Dean Jackson  <dino@apple.com>

        Reviewed by Chris Marrin
        
        <rdar://problem/7557398> iOS: Implement WebGL

        WebGL can now compile and run, but is not enabled.

        * Configurations/FeatureDefines.xcconfig:
            - ENABLE_3D_CANVAS stuff
        * WebCore.xcodeproj/project.pbxproj:
            - Add OpenGL.framework
        * platform/graphics/GraphicsContext3D.h:
        (WebCore::GraphicsContext3D::Attributes::Attributes):
            - turn stencil buffer off (this comes from ToT too)
        * platform/graphics/GraphicsLayer.h:
            - change typedef for PlatformLayer
        * platform/graphics/cg/GraphicsContext3DCG.cpp:
        (WebCore::GraphicsContext3D::getImageData):
            - #if for iOS colorspace construction
        * platform/graphics/iphone/GraphicsContext3DIPhone.h: Added.
            - #defines for all desktop OpenGL functions to
              make them OpenGLES compatible (avoids a huge number
              of #ifs around each call)
        * platform/graphics/mac/GraphicsContext3DMac.mm:
            - #ifs for all iOS specific logic
        * platform/graphics/mac/WebGLLayer.h:
            - iOS uses CAEAGLLayer
        * platform/graphics/mac/WebGLLayer.mm:
            - make sure endPaint() is called on the context
              when the layer is drawn
        * platform/mac/WebCoreSystemInterface.h:
            - change CALayer typedef

2010-08-30  Cameron Zwarich  <zwarich@apple.com>

        <rdar://problem/8361253> syslog spew from MobileSafari during canvas benchmark

        Reviewed by David Carson.

        The method requiresWidthHeightSwitchedAtIndex() was added to ImageSource, but
        it did not properly handle the case where the ImageSource has no m_decoder,
        which would cause CG to log that NULL had been passed to one of its function.

        This patch makes orientationRequiresWidthAndHeightSwapped(), a separate function
        that only takes an orientation, so that calls from Image methods can use
        Image::frameOrientationAtIndex() to get the orientation, which properly handles
        the case where there is no m_decoder on the ImageSource. I stuck this function
        in ImageSourceCG.{h|cpp} for lack of a better place, alongside other similar
        miscellaneous functions.

        * platform/graphics/ImageSource.h:
        * platform/graphics/cg/ImageCG.cpp:
        (WebCore::BitmapImage::draw):
        * platform/graphics/cg/ImageSourceCG.cpp:
        (WebCore::orientationRequiresWidthAndHeightSwapped):
        (WebCore::ImageSource::frameSizeAtIndex):
        (WebCore::ImageSource::orientationAtIndex):
        (WebCore::ImageSource::createFrameAtIndex):
        * platform/graphics/cg/ImageSourceCG.h:

2010-08-30  Dean Jackson  <dino@apple.com>

        Part of <rdar://problem/7557398> iOS: Implement WebGL

        Merge ToT WebKit r61631

    2010-06-22  Chris Marrin  <cmarrin@apple.com>

            Reviewed by Simon Fraser.

            https://bugs.webkit.org/show_bug.cgi?id=40643

            Final phase of moving ownership of WebGLLayer to GraphicsContext3D.
            As it turns out, I still have to have a separate CGLContextObj for
            rendering because Core Animation composites in a separate thread,
            so we need to disconnect WebGL rendering from CA compositing. But
            this change is still worthwhile because it reduces dependencies
            and makes it easier to port WebGL to other platforms.

            No new tests since this is just restructuring and the current tests
            are all still valid and do a sufficient test of WebGL functionality.

            * platform/graphics/GraphicsContext3D.h:
            (WebCore::GraphicsContext3D::platformLayer):
            * platform/graphics/GraphicsLayer.h:
            (WebCore::GraphicsLayer::setContentsToWebGL):
            (WebCore::GraphicsLayer::setWebGLNeedsDisplay):
            * platform/graphics/mac/GraphicsContext3DMac.mm: Add creation of WebGLLayer
            (WebCore::GraphicsContext3D::GraphicsContext3D):
            * platform/graphics/mac/GraphicsLayerCA.h:
            (WebCore::GraphicsLayerCA::):
            * platform/graphics/mac/GraphicsLayerCA.mm: Handle setting of WebGLLayer as content the same as for MediaLayer. Also changed WebGL related names for clarity
            (WebCore::GraphicsLayerCA::GraphicsLayerCA):
            (WebCore::GraphicsLayerCA::commitLayerChangesBeforeSublayers):
            (WebCore::GraphicsLayerCA::updateContentsWebGLLayer):
            (WebCore::GraphicsLayerCA::setContentsToWebGL):
            (WebCore::GraphicsLayerCA::setWebGLNeedsDisplay):
            * platform/graphics/mac/WebGLLayer.h:
            * platform/graphics/mac/WebGLLayer.mm: Got rid of storage for context and texture, now just store GraphicsContext3D and get them from there when needed
            (-[WebGLLayer copyCGLPixelFormatForDisplayMask:]):
            (-[WebGLLayer copyCGLContextForPixelFormat:]):
            (-[WebGLLayer drawInCGLContext:pixelFormat:forLayerTime:displayTime:]):
            (-[WebGLLayer copyImageSnapshotWithColorSpace:]):
            * rendering/RenderLayerBacking.cpp: Changed init of WebGL contentsLayer to pass WebGLLayer rather than GraphicsContext3D
            (WebCore::RenderLayerBacking::updateGraphicsLayerConfiguration):
            (WebCore::RenderLayerBacking::rendererContentChanged):

2010-08-30  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/8361089> CSS downloads all background images related to element, instead of just final rule (24223)

        Merged ToT WebKit r66128, r66141, r66195 and r66240.

    2010-08-27  Simon Fraser  <simon.fraser@apple.com>

            Reviewed by Tony Chang.

            Crash in CSSStyleSelector.cpp
            https://bugs.webkit.org/show_bug.cgi?id=44780

            Need to null-check the images when replacing pending images, because a later
            rule may have replaced an image with 'none'.

            Test: fast/css/pending-images-crash.html

            * css/CSSStyleSelector.cpp:
            (WebCore::CSSStyleSelector::loadPendingImages):
            * page/FrameView.cpp:
            (WebCore::FrameView::paintContents): Fix unrelated log message.

    2010-08-27  Simon Fraser  <simon.fraser@apple.com>

            Reviewed by Nikolas Zimmermann.

            r66141 caused fast/forms/select-style.html to fail on mac:
            https://bugs.webkit.org/show_bug.cgi?id=44737

            Handle the fact that a CSSImageValue may have a value of CSSValueNone,
            in which case we should not return a pending image.

            * css/CSSImageValue.cpp:
            (WebCore::CSSImageValue::cachedOrPendingImage):
            * css/CSSStyleSelector.cpp:
            (WebCore::CSSStyleSelector::cachedOrPendingFromValue):

    2010-08-26  Simon Fraser  <simon.fraser@apple.com>

            Reviewed by Dave Hyatt.

            CSS downloads all background images related to element, instead of just final rule
            https://bugs.webkit.org/show_bug.cgi?id=24223

            We used to kick off image loads at the point where the style selector
            applies a CSS rule to an element, even if that rule was overridden
            by a rule in a later block of rules. This caused loads of images that
            weren't actually used.

            Fix this by delaying image loads until the style has been fully
            resolved. This is achieved by inserting a StylePendingImage into
            the RenderStyle for duration of the style resolution, and keeping
            an entry in a hash for the relevant CSS property.

            At the end of style resolution, we iterate through the hash, and
            replace the StylePendingImage with StyleCachedImages, which
            causes the loads to happen only for images that are in the final style.        

            Tests: http/tests/css/border-image-loading.html
                   http/tests/css/mask-image-loading.html
                   http/tests/css/reflection-mask-image-loading.html

            * GNUmakefile.am: Add StylePendingImage.h
            * WebCore.gypi: Ditto
            * WebCore.vcproj/WebCore.vcproj: Ditto

            * css/CSSImageValue.h: Change m_image to a RefPtr<StyleImage>,
            since it may be a StylePendingImage or StyleCachedImage.
            * css/CSSImageValue.cpp:
            (WebCore::CSSImageValue::~CSSImageValue): Only call removeClient if it's a cachedImage.
            (WebCore::CSSImageValue::cachedOrPendingImage): If we have an image (pending or cached),
            return it. Otherwise make a pending image and return it.
            (WebCore::CSSImageValue::cachedImage): Only return the image if it's a cached image.
            (WebCore::CSSImageValue::cachedImageURL):
            (WebCore::CSSImageValue::clearCachedImage):

            * css/CSSStyleSelector.h:
            * css/CSSStyleSelector.cpp:
            (WebCore::CSSStyleSelector::initForStyleResolve): Clear m_pendingImageProperties.
            (WebCore::CSSStyleSelector::styleForElement): Load pending images.
            (WebCore::CSSStyleSelector::styleForKeyframe): Ditto.
            (WebCore::CSSStyleSelector::pseudoStyleForElement): Ditto.
            (WebCore::CSSStyleSelector::styleForPage): Ditto.
            (WebCore::CSSStyleSelector::applyProperty): Pull property into a local variable
            so we can use it in macros.
            (WebCore::CSSStyleSelector::mapFillAttachment): Pass the property down (needed to avoid
            additional macro complexity).
            (WebCore::CSSStyleSelector::mapFillClip): Ditto
            (WebCore::CSSStyleSelector::mapFillComposite): Ditto
            (WebCore::CSSStyleSelector::mapFillOrigin): Ditto
            (WebCore::CSSStyleSelector::styleImage): Call cachedOrPendingFromValue()
            (WebCore::CSSStyleSelector::cachedOrPendingFromValue): Get the cachedOrPendingImage()
            from the CSSValue, and if it's a pending image, record the property.
            (WebCore::CSSStyleSelector::mapFillImage): Pass the property down (needed to avoid
            additional macro complexity).
            (WebCore::CSSStyleSelector::mapFillRepeatX): Ditto
            (WebCore::CSSStyleSelector::mapFillRepeatY): Ditto
            (WebCore::CSSStyleSelector::mapFillSize): Ditto
            (WebCore::CSSStyleSelector::mapFillXPosition): Ditto
            (WebCore::CSSStyleSelector::mapFillYPosition): Ditto
            (WebCore::CSSStyleSelector::mapNinePieceImage): Ditto
            (WebCore::CSSStyleSelector::loadPendingImages): Iterate through the m_pendingImageProperties
            hash, and replace the pending images with cached images.

            * rendering/style/StyleCachedImage.h: Make cssValue() const.
            * rendering/style/StyleCachedImage.cpp:
            (WebCore::StyleCachedImage::cssValue):

            * rendering/style/StyleGeneratedImage.h:  Make cssValue() const.
            * rendering/style/StyleGeneratedImage.cpp:
            (WebCore::StyleGeneratedImage::cssValue):

            * rendering/style/StyleImage.h:
            (WebCore::StyleImage::operator==): Make const.
            (WebCore::StyleImage::isPendingImage):
            * rendering/style/StylePendingImage.h: Added.

2010-08-30  Dean Jackson  <dino@apple.com>

        Part of <rdar://problem/7557398> iOS: Implement WebGL

        Merge ToT WebKit r61263

    2010-06-16  Chris Marrin  <cmarrin@apple.com>

            Reviewed by Eric Carlson.

            https://bugs.webkit.org/show_bug.cgi?id=40643

            Second of three steps - rename Canvas3DLayer to WebGLLayer

            * WebCore.xcodeproj/project.pbxproj:
            * platform/graphics/mac/Canvas3DLayer.h: Removed.
            * platform/graphics/mac/Canvas3DLayer.mm: Removed.
            * platform/graphics/mac/GraphicsLayerCA.mm:
            (WebCore::GraphicsLayerCA::setContentsToGraphicsContext3D):
            * platform/graphics/mac/WebGLLayer.h: Copied from WebCore/platform/graphics/mac/Canvas3DLayer.h.
            * platform/graphics/mac/WebGLLayer.mm: Copied from WebCore/platform/graphics/mac/Canvas3DLayer.mm.

2010-08-30  Dean Jackson  <dino@apple.com>

        Part of <rdar://problem/7557398> iOS: Implement WebGL

        Merge ToT WebKit r61262

    2010-06-16  Chris Marrin  <cmarrin@apple.com>

            Reviewed by Simon Fraser.

            https://bugs.webkit.org/show_bug.cgi?id=40643

            Rename GraphicsContext3DMac.cpp so it can interact with CALayer

            * platform/graphics/mac/GraphicsContext3DMac.cpp: Removed.
            * platform/graphics/mac/GraphicsContext3DMac.mm: Copied from WebCore/platform/graphics/mac/GraphicsContext3DMac.cpp.
            * WebCore.xcodeproj/project.pbxproj

2010-08-30  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Carson.

        <rdar://problem/8138498> change event isn't emitted for <select> if multiple attribute is set

        In Open Source WebKit it looks like the onchange event for <select multiple> is triggered
        by mouseup events on the list menu. On iOS, <select>'s are form assisted and don't take
        this path. It looks like this code was originally added a long time ago, and with a merge
        accidentally got inverted.

        * dom/SelectElement.cpp:
        (WebCore::SelectElement::setSelectedIndex):

2010-08-30  Eric Carlson  <eric.carlson@apple.com>

        Reviewed by Simon Fraser.

        <rdar://problem/8373690> LayoutTests: fast/js/custom-constructors.html is crashing

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::prepareForLoad): Don't force loading when 'preload' is 'none'.

        * platform/graphics/iphone/MediaPlayerPrivateIPhone.mm:
        (WebCore::MediaPlayerPrivateiPhone::setDeferredProperties): NSString doesn't respond to stringValue.

2010-08-30  Dan Bernstein  <mitz@apple.com>

        Reviewed by Pratik Solanki.

        <rdar://problem/8352570> Disable auto-hyphenation for N82/N72

        * platform/text/cf/HyphenationCF.cpp:
        (WebCore::canHyphenate):

2010-08-30  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/8324890> REGRESSION: WebCore could get deadlocked in DatabaseTracker::originsDidChange().
        Reviewed by David Kilzer and Brady Eidson.

        DatabaseTracker::databaseNamesForOrigin is changed in Havoc/Gemini merge; now it requires to get
        m_databaseGuard lock, and this causes deadlock if the same thread has already acquired the lock
        before calling this function.

        Instead of using databaseNamesForOrigin, use databaseNamesForOriginNoLock in DatabaseTracker::originsDidChange()
        since the lock is already acquired at the beginning.

        * storage/DatabaseTracker.cpp:
        (WebCore::DatabaseTracker::originsDidChange): Use databaseNamesForOriginNoLock.
        (WebCore::DatabaseTracker::removeDeletedOpenedDatabases): Fix assertion failure in openTrackerDatabase by acquire m_databaseGuard before calling it.

2010-08-28  Pratik Solanki  <psolanki@apple.com>

        Part of <rdar://problem/8348440> Disable purgeable memory for N82 and N72

        Merged ToT WebKit r66301.

    2010-08-28  Pratik Solanki  <psolanki@apple.com>

        Reviewed by Dan Bernstein.

        Add an ENABLE define for purgeable memory support
        https://bugs.webkit.org/show_bug.cgi?id=44777

        * platform/PurgeableBuffer.h:
        * platform/mac/PurgeableBufferMac.cpp:

2010-08-27  Eric Carlson  <eric.carlson@apple.com>

        Reviewed by Simon Fraser.

        <rdar://problem/6893793> LayoutTests/http/tests/security/local-video-*.html tests (3) are broken

        * editing/TextIterator.cpp:
        (WebCore::TextIterator::advance): <video> and <audio> are non-text nodes even though they use
        the widget renderer. Without this change, every media element's innerText has an extra space
        so every layout test result will need to change.

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::loadResource): Call willLoadMediaElementURL for the poster to
        give the client a chance to veto.
        (WebCore::HTMLMediaElement::getPluginProxyParams): Don't require the '_media_element_allow_inline_'
        attribute to for inline playback when running in DRT.

        * html/HTMLVideoElement.cpp:
        (WebCore::HTMLVideoElement::updatePosterImage): Call willLoadMediaElementURL for the poster to
        give the client a chance to veto.

        * platform/RuntimeApplicationChecksIPhone.h:
        * platform/RuntimeApplicationChecksIPhone.mm:
        (WebCore::applicationIsDumpRenderTree): New, return true when running in DRT.

        * platform/graphics/iphone/MediaPlayerPrivateIPhone.mm:
        (WebCore::MediaPlayerPrivateiPhone::load): Add url to deferred properties list when called
        before the proxy has registered itself.
        (WebCore::MediaPlayerPrivateiPhone::setDeferredProperties): Call load() before all other
        deferred properties.

2010-08-27  Joseph Pecoraro  <joepeck@webkit.org>

        <rdar://problem/8367202> "Copy Inspector Resources" build phase copied too many files

        Merged ToT WebKit r63696 and r65753

    2010-07-19  Joseph Pecoraro  <joepeck@webkit.org>

            Reviewed by Mark Rowe.

            Web Inspector: Do Not Copy *.re2js Inspector Resources in XCode Build Phase
            https://bugs.webkit.org/show_bug.cgi?id=42601

            Remove *.re2js files after copying them over in the Build Phase. We do
            the same to remove the WebKit.qrc file.

            * WebCore.xcodeproj/project.pbxproj:

    2010-08-20  Joseph Pecoraro  <joepeck@webkit.org>

            Reviewed by David Kilzer.

            Do Not Copy Subversion Related Files in Inspector Build Phase
            https://bugs.webkit.org/show_bug.cgi?id=44353

            * WebCore.xcodeproj/project.pbxproj: remove .svn directories in the "Copy Inspector Resources" build phase.

2010-08-26  Eric Carlson  <eric.carlson@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/6466492> LayoutTests: Re-enable media layout tests once <audio> and <video> tags are supported

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::prepareForLoad): In simulator builds, tell the media engine to
        load data without waiting for playback if settings->mediaDataLoadsAutomatically() is true.

        * page/Settings.cpp:
        (WebCore::Settings::Settings): Initialize m_mediaDataLoadsAutomatically to false.
        * page/Settings.h:
        (WebCore::Settings::setMediaDataLoadsAutomatically): New, set m_mediaDataLoadsAutomatically.
        (WebCore::Settings::mediaDataLoadsAutomatically): New, return m_mediaDataLoadsAutomatically.

2010-08-26  Chris Fleizach  <cfleizach@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/8198648> We need to come up with a way to navigate tables on devices with keyboards

        Exposes 3 WebCore methods to the iPhone AX wrapper (rowRanges, columnRange, cellForRowColumn).
        With these methods, VoiceOver is able to navigate a table with in all cardinal directions.

        Tests: platform/iphone-simulator/accessibility/table-cell-for-row-col.html
               platform/iphone-simulator/accessibility/table-cell-ranges.html

        * accessibility/iphone/AccessibilityObjectWrapperIPhone.mm:
        (-[AccessibilityObjectWrapper tableCellParent]):
        (-[AccessibilityObjectWrapper tableParent]):
            Add helper methods to retrieve the containing table or table cell.
        (-[AccessibilityObjectWrapper accessibilityHeaderElements]):
            Modify to use the tableCellParent and tableParent helper methods.
        (-[AccessibilityObjectWrapper accessibilityElementForRow:andColumn:]):
        (-[AccessibilityObjectWrapper accessibilityRowRange]):
        (-[AccessibilityObjectWrapper accessibilityColumnRange]):

2010-08-26  Cameron Zwarich  <zwarich@apple.com>

        <rdar://problem/8292756> UIWebView clips the result of window.innerWidth and window.innerHeight undesireably

        Reviewed by Aaron Golden.

        WAK uses a recursive calculation involving intersections up the layer hierarchy to
        the root layer to determine the visible region. This normally works pretty well, but
        hosted contexts often manipulate their position in their hosting context by adjusting
        the bounds of their root layer, which breaks this approach.

        This patch fixes that by allowing UIWebView to override the root of the layer hierarchy.

        * wak/WAKWindow.h:
        * wak/WAKWindow.mm:
        (-[WAKWindow setRootLayer:]):
        (-[WAKWindow rootLayer]):
        (-[WAKWindow visibleRect]):

2010-08-26  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/8294689> iOS: Memory corruption in counter nodes (43812)

        Merged ToT WebKit r66052.

    2010-08-25  Cris Neckar  <cdn@chromium.org>

        Reviewed by Darin Adler.

        Added abort condition for RenderCounters when traversing a detached render tree.
        https://bugs.webkit.org/show_bug.cgi?id=43812

        Test: fast/css/counters/counter-traverse-object-crash.html

        * rendering/RenderCounter.cpp:
        (WebCore::findPlaceForCounter):

2010-08-25  Cameron Zwarich  <zwarich@apple.com>

        <rdar://problem/8298965> WebTiledLayer doesn't take the WebThreadLock while drawing

        Reviewed by Simon Fraser.

        <rdar://problem/7891743> tried to fix this for both WebLayer and WebTiledLayer,
        but it added the code to -[WebTiledLayer display]. Most of the time that a CATiledLayer
        subclass draws, it draws from a render server driven image provider rather than
        the usual transaction display mechanism, so drawInContext: is called without display
        ever being called.

        The right fix is to move the locking to the common method that does the drawing
        for all of these custom layer subclasses.

        * platform/graphics/mac/WebLayer.mm:
        (+[WebLayer drawContents:WebCore::ofLayer:intoContext:]):
        * platform/graphics/mac/WebTiledLayer.mm:

2010-08-25  Chris Fleizach  <cfleizach@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/8207024> AX: need to read column, row headers in tables on the web

        Exposes the row and column headers on tables through accessibilityHeaderElements.

        This also required turning on ACCESSIBILITY_TABLES for the iPhone, which is doable
        now that there is infrastructure support for ignoring the column elements needed on Mac OSX.

        Test: platform/iphone-simulator/accessibility/header-elements.html

        * accessibility/AccessibilityTable.h:
        * accessibility/AccessibilityTableColumn.cpp:
        (WebCore::AccessibilityTableColumn::accessibilityIsIgnored):
        * accessibility/AccessibilityTableHeaderContainer.cpp:
        (WebCore::AccessibilityTableHeaderContainer::accessibilityIsIgnored):
        * accessibility/iphone/AccessibilityObjectWrapperIPhone.mm:
        (-[AccessibilityObjectWrapper _accessibilityTableAncestor]):
        (-[AccessibilityObjectWrapper _accessibilityTraitsFromAncestors]):
        (-[AccessibilityObjectWrapper accessibilityHeaderElements]):

2010-08-25  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Kilzer.

        <rdar://problem/8327102> Disable Compile Time INSPECTOR Flag for N82

        * Configurations/WebCore.xcconfig: specify an armv6 export file for the armv6 architecture.
        * DerivedSources.make: filter out Inspector exports when generating an armv6 export.
        * WebCore.Inspector.exp:
        * WebCore.iPhone.exp: moved an iOS Inspector only export to WebCore.Inspector.exp.

2010-08-25  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/8190162> iOS: Digest authentication logout doesn't work in MobileSafari on www.gatwood.net/photos

        Merged WebKit ToT r59185, r63834, r63836, r66005, r63095, r63681.        

        * platform/network/mac/ResourceHandleMac.mm: Change firstRequest() to request() at line 612.

    2010-07-12  Alexey Proskuryakov  <ap@apple.com>

            Reviewed by Darin Adler.

            https://bugs.webkit.org/show_bug.cgi?id=13075
            XMLHttpRequest with failed authentication should set status to 401

            https://bugs.webkit.org/show_bug.cgi?id=6871
            <rdar://problem/3363403> 401 error page is never shown

            * platform/network/mac/ResourceHandleMac.mm: (WebCore::ResourceHandle::receivedCredential):
            Added a comment explaining why we handle empty credentials differently here.

            * platform/network/cf/ResourceHandleCFNet.cpp: (WebCore::ResourceHandle::receivedCredential):
            Bring this code in sync with Mac.

    2010-08-25  Yongjun Zhang  <yongjun_zhang@apple.com>

            Reviewed by Alexey Proskuryakov.

            https://bugs.webkit.org/show_bug.cgi?id=44461
            Assertion failure at WebCore/platform/network/CredentialStorage.cpp:85.

            Remove the assertion at CredentialStorage.cpp:85 since it is legal to have
            multiple forward slashes after the path component.

            No test needed.

            * platform/network/CredentialStorage.cpp:
            (WebCore::protectionSpaceMapKeyFromURL):

    2010-07-21  Alexey Proskuryakov  <ap@apple.com>

            Unreviewed Windows build fix.

            https://bugs.webkit.org/show_bug.cgi?id=42717
            <rdar://problem/7062824> A wrong password entered for site or proxy auth remains in WebCore
            credential storage, and is sent with subsequent requests

            * platform/network/cf/ResourceHandleCFNet.cpp:
            (WebCore::ResourceHandle::didReceiveAuthenticationChallenge): Don't use that direct a
            copy/paste, oops!

    2010-07-21  Alexey Proskuryakov  <ap@apple.com>

            Reviewed by Darin Adler.

            https://bugs.webkit.org/show_bug.cgi?id=42717
            <rdar://problem/7062824> A wrong password entered for site or proxy auth remains in WebCore
            credential storage, and is sent with subsequent requests

            Tests: http/tests/security/401-logout/401-logout.php
                   http/tests/xmlhttprequest/remember-bad-password.html

            * platform/network/CredentialStorage.cpp: (WebCore::CredentialStorage::remove):
            * platform/network/CredentialStorage.h:
            Added a way to remove stored credentials for a given protection space.

            * platform/network/cf/ResourceHandleCFNet.cpp: (WebCore::ResourceHandle::didReceiveAuthenticationChallenge):
            * platform/network/mac/ResourceHandleMac.mm: (WebCore::ResourceHandle::didReceiveAuthenticationChallenge):
            Remove stored credentials if they didn't work the first time.

    2010-05-10  Alexey Proskuryakov  <ap@apple.com>

            Reviewed by Brady Eidson.

            https://bugs.webkit.org/show_bug.cgi?id=37989
            Safari (still) doesn't always send basic credentials preemptively

            Test: http/tests/xmlhttprequest/basic-auth-default.html

            After fetching credentials from WebCore storage, put them back right away. This will add
            default credentials for the directory, since this may be the first time we learn about its
            associated protection space.

            * platform/network/cf/ResourceHandleCFNet.cpp:
            (WebCore::ResourceHandle::didReceiveAuthenticationChallenge):
            (WebCore::WebCoreSynchronousLoader::didReceiveChallenge):
            * platform/network/mac/ResourceHandleMac.mm:
            (WebCore::ResourceHandle::didReceiveAuthenticationChallenge):
            (-[WebCoreSynchronousLoader connection:didReceiveAuthenticationChallenge:]):

2010-08-25  Cameron Zwarich  <zwarich@apple.com>

        <rdar://problem/8353945> WebKit should make ImageBuffers with the correct CGBitmapContext settings on iOS

        Reviewed by David Carson.

        Change ImageBufferCG to use the 'proper' settings for iOS, which are the settings
        CA uses for its textures. The performance team is going to optimize ARGB32 -> ARGB32
        resampling, which will only help us if our image buffers are ARGB32.

        * platform/graphics/cg/ImageBufferCG.cpp:
        (WebCore::ImageBuffer::ImageBuffer):

2010-08-24  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/7751613> Crash while navigating iTMS4

        Merged TOT WebKit r65681 and r65934.

    2010-08-24  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Tony Chang.

        After r65681, caret no longer displays promptly while editing form fields
        https://bugs.webkit.org/show_bug.cgi?id=44294
        
        The caret no longer eagerly updates its rect on every paint, so we have
        to manually update it after scrolling the selection into view when
        the selection changes.
        
        Tested by the pixel results of fast/forms/input-text-scroll-left-on-blur.html

        * page/Frame.cpp:
        (WebCore::Frame::revealSelection):

    2010-08-19  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Nikolas Zimmermann.

        HTMLElement::isContentEditable() can cause an updateStyleIfNeeded() to happen in the middle of layout
        https://bugs.webkit.org/show_bug.cgi?id=21834
        <rdar://problem/8093653&8261394>
        
        If we're in the middle of layout, or painting, and something causes updateStyleIfNeeded() to
        get called, then we can end up entering recalcStyle() during layout or painting. This is bad
        because it can create/destry the renderers and RenderLayers which are in use by layout/painting.
        This is the cause of a number of random crashers, some of which show up more frequently
        in content which uses accelerated compositing.
        
        The changes here:
        1. Add an assertion in Document::updateStyleIfNeeded() that we are not laying out or painting.
        2. Remove calls to updateStyleIfNeeded() in editing and caret painting code
        3. Pass along information to CTM and BBox-related SVG methods to indicate whether it's safe
           to update style.

        Tested by new assertions and existing tests.

        * dom/Document.cpp:
        (WebCore::Document::updateStyleIfNeeded): New assertion that we are not mid-layout or painting.
        (WebCore::command): Call updateStyleIfNeeded() to ensure that subsequent calls to isContentEditable()
        return the correct result.

        * dom/Element.cpp:
        (WebCore::Element::focus): Move the supportsFocus() call to after style has been updated.

        * editing/SelectionController.cpp:
        (WebCore::SelectionController::localCaretRect):
        (WebCore::SelectionController::caretRepaintRect):
        (WebCore::SelectionController::paintCaret):
        * editing/SelectionController.h:
        (WebCore::SelectionController::localCaretRectForPainting): When painting, use localCaretRectForPainting()
        which does not update style. Make localCaretRect() non-const so allowing it to update style without ugly casts.

        * html/HTMLElement.cpp:
        (WebCore::HTMLElement::isContentEditable): Don't call updateStyleIfNeeded() here.
        (WebCore::HTMLElement::isContentRichlyEditable): Ditto.
        (WebCore::HTMLElement::contentEditable): Ditto.

        * page/FrameView.h:
        (WebCore::FrameView::isMidLayout): New accessor, used for asserting.

        * rendering/RenderPath.cpp:
        (WebCore::fillAndStrokePath): Pass DisallowStyleUpdate to getScreenCTM since we are painting.
        * rendering/RenderSVGResourceContainer.cpp:
        (WebCore::RenderSVGResourceContainer::transformOnNonScalingStroke): This is only called when
        painting, so use DisallowStyleUpdate.

        * svg/SVGElement.cpp:
        (WebCore::SVGElement::attributeChanged): Changes to the style attribute should not have
        side effects, since a call to Element::getAttribute() is allowed to result in a call to
        setAttribute() for the style attribute. To avoid updateStyleIfNeeded() during painting,
        this must not cause SVG to do extra work.

        * svg/SVGLocatable.cpp: Pass StyleUpdateStrategy down to these methods to indicate
        whether it's OK to update style.
        (WebCore::SVGLocatable::getBBox):
        (WebCore::SVGLocatable::computeCTM):
        (WebCore::SVGLocatable::getTransformToElement):
        * svg/SVGLocatable.h:
        (WebCore::SVGLocatable::):
        * svg/SVGStyledLocatableElement.cpp:
        (WebCore::SVGStyledLocatableElement::getBBox):
        (WebCore::SVGStyledLocatableElement::getCTM):
        (WebCore::SVGStyledLocatableElement::getScreenCTM):
        * svg/SVGStyledLocatableElement.h:
        * svg/SVGStyledTransformableElement.cpp:
        (WebCore::SVGStyledTransformableElement::getCTM):
        (WebCore::SVGStyledTransformableElement::getScreenCTM):
        (WebCore::SVGStyledTransformableElement::getBBox):
        * svg/SVGStyledTransformableElement.h:
        * svg/SVGTextElement.cpp:
        (WebCore::SVGTextElement::getBBox):
        (WebCore::SVGTextElement::getCTM):
        (WebCore::SVGTextElement::getScreenCTM):
        * svg/SVGTextElement.h:

2010-08-24  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/8163986> iOS: REGRESSION(r50698): embed.src and object.data should deny javascript: URL (41481)

        Modified and merged ToT WebKit r65900.

        Modified r65900 to apply the change to FrameLoader.h/cpp, instead of Subframeloader.h/cpp which were added
        at r61584.

        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::requestFrame):
        (WebCore::FrameLoader::loadOrRedirectSubframe):
        (WebCore::FrameLoader::requestObject):
        * loader/FrameLoader.h:

    2010-08-24  Sam Weinig  <sam@webkit.org>

            Reviewed by Adam Barth.

            Fix for <rdar://problem/8153271> and <rdar://problem/8153288> 
            Change behavior of javascript: urls in <embed> and <object> back to 
            how they behaved before r50698.

            Tests: fast/loader/javascript-url-in-embed.html
                   fast/loader/javascript-url-in-object.html

            * loader/SubframeLoader.cpp:
            (WebCore::SubframeLoader::requestFrame):
            (WebCore::SubframeLoader::requestObject):
            (WebCore::SubframeLoader::loadOrRedirectSubframe):
            * loader/SubframeLoader.h:

2010-08-24  Dan Bernstein  <mitz@apple.com>

        Removed unused #import added in the previous change.

        * platform/graphics/mac/FontCacheMac.mm:

2010-08-24  Dan Bernstein  <mitz@apple.com>

        Reviewed by Darin Adler.

        <rdar://problem/8349420> Enable public Emoji codepoints

        This change makes all public Emoji codepoints that aren’t covered by PhoneFallback (or other)
        fonts render with Apple Color Emoji.

        * platform/graphics/mac/FontCacheMac.mm:
        (WebCore::copyFontCharacterSet): Added this helper function.
        (WebCore::appleColorEmojiCharacterSet): Ditto.
        (WebCore::phoneFallbackCharacterSet): Ditto.
        * platform/graphics/mac/FontCacheMac.mm:
        (WebCore::FontCache::getFontDataForCharacters): If none of the language fonts were selected,
        check if the character is included in PhoneFallback. If not, and if it is included in Apple
        Color Emoji, use the latter.

2010-08-24  Eric Carlson  <eric.carlson@apple.com>

        Reviewed by Darin Adler.

        <rdar://problem/8347578> HTMLMediaElement.canPlayType gives wrong results on the iPhone

        * platform/graphics/iphone/MediaPlayerPrivateIPhone.mm:
        (WebCore::mimeTypeCache): Cleanup style.
        (WebCore::MediaPlayerPrivateiPhone::supportsType): Fix logic inversion, no codecs parameter
        should return "maybe".

2010-08-24  Eric Carlson  <eric.carlson@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/8339778> REGRESSION (3.2.2-Jasper8C79): Video doesn’t play at vimeo.com homepage

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::load): Tell the media engine to begin loading data as soon as
        the movie validates when load() is called directly from a user gesture.

2010-08-23  Dan Bernstein  <mitz@apple.com>

        Reviewed by Bard Moore.

        <rdar://problem/8344705> Use Apple Color Emoji to map public and internal Emoji codepoints to glyphs

        This does not change behavior, since the mapping for internal codepoints is unchanged and public
        codepoints do not use the Emoji font yet.

        * platform/graphics/mac/ComplexTextController.cpp:
        (WebCore::ComplexTextController::adjustGlyphsAndAdvances): Remove check for glyph ID 7, since the
        font supplies actual glyph IDs.
        * platform/graphics/mac/FontCacheMac.mm:
        (WebCore::FontCache::getFontDataForCharacters): Changed the fictional family name AppleWebKitImage
        to the real font name Apple Color Emoji.
        (WebCore::FontCache::createFontPlatformData): Check for Apple Color Emoji instead of AppleWebKitImage.
        Obtain and use a GSFontRef for the image font.
        * platform/graphics/mac/FontMac.mm:
        (WebCore::smileImage): Map Apple Color Emoji glyph IDs to image numbers.
        * platform/graphics/mac/GlyphPageTreeNodeMac.cpp:
        (WebCore::GlyphPage::fill): Removed hard-coded character-to-glyph mapping for AppleWebKitImage.

2010-08-23  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/8338034> Make the main resource non-purgeable

        Reviewed by David Carson.

        Use purgeable memory for subresources only since the WebCore cache does
        not cache main resources. We move the code to SubresourceLoader instead
        of having it in ResourceLoader.

        * loader/ResourceLoader.cpp:
        (WebCore::ResourceLoader::didFinishLoading): Move code from here ...
        * loader/SubresourceLoader.cpp:
        (WebCore::SubresourceLoader::didFinishLoading): ... to equivalent code here.

2010-08-23  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/8017320> Assertion failure at WebCore::DOMTimer::resume (this=0x15fea240) atWebCore/page/DOMTimer.cpp:244

        Reviewed by David Kilzer and David Carson.

        The previous patch https://svn.apple.com/trac/puzzlebox/changeset/240757 only fixes the case when a new frame
        is created while the main frame is in suspended state.  If a new JS timeout is installed in an already suspended
        subframe, the newly installed DOM timer won't get suspended.  The reason is Frame::setTimersPaused implementation
        doesn't update subframe's m_timersPausedCount variable even though it suspends all existing timers.  This
        patch updates m_timersPausedCount for all frames to make sure future timers get suspended as well.

        * page/Frame.h:
        * page/iphone/FrameIPhone.mm:
        (WebCore::Frame::setTimersPaused): move recursion into setTimersPausedInternal so that we don't have to get JSLock for each frame.
        (WebCore::Frame::setTimersPausedInternal):

2010-08-22  David Carson  <dacarson@apple.com>

        Reviewed by Yongjun Zhang.

        <rdar://problem/7185284> JavaScript touch events are hit-tested on a per-frame basis using the centroid of touch locations

        If the frame didn't call preventDefault, then hit-test the parent frame for touch events only.
        Added the method WKWindowShouldHitTestParentFrameForTouchEvent() to be called when parent frame
        should not be hit tested. This method needed to be exported so that it can be called from WebKit.

        * WebCore.iPhone.exp:
        * wak/WKWindow.h:
        * wak/WKWindow.mm:
        (WKWindowShouldHitTestParentFrameForTouchEvent): Added.
        (WKWindowSendEvent):

2010-08-21  David Carson  <dacarson@apple.com>

        Reviewed by Cameron Zwarich.

        <rdar://problem/8204665> MFMailComposeViewController distorts attached JPEG images if they're mirrored

        Image width and height need to be swapped when EXIF orientation is greater than 4.
        EXIF orientations 5 to 8 are rotated either 90 or 270 deg (and possibly mirrored).
        Added a convenience method to determine if width and height need to be switched and
        changed the code to use the new method.

        * platform/graphics/ImageSource.h:
        * platform/graphics/cg/ImageCG.cpp:
        (WebCore::BitmapImage::draw):
        * platform/graphics/cg/ImageSourceCG.cpp:
        (WebCore::ImageSource::frameSizeAtIndex):
        (WebCore::ImageSource::requiresWidthHeightSwitchedAtIndex): Added.
        (WebCore::ImageSource::createFrameAtIndex):

2010-08-20  Dan Bernstein  <mitz@apple.com>

        Reviewed by Simon Fraser.

        WebCore part of <rdar://problem/5607116> Support web fonts (CSS @font-face) in iOS WebKit

        This change consists almost entirely of replacing iOS-specific code paths with their
        common counterparts, and changing some code which assumed that FontPlatformData.font() was
        non-nil to use FontPlatformData.cgFont() instead, where the assumption is no longer correct.
        Also removed the never-used m_gsFont member of FontPlatformData.

        * platform/graphics/mac/FontCacheMac.mm:
        (WebCore::FontCache::getFontDataForCharacters): Use cgFont() instead of font().
        (WebCore::FontCache::createFontPlatformData): Switched to use a FontPlatformData constructor that
        does not require a GSFontRef, since passing a NULL GSFontRef is not allowed anymore.
        * platform/graphics/mac/FontCustomPlatformData.cpp:
        (WebCore::FontCustomPlatformData::~FontCustomPlatformData): Removed iOS-specific code path. Updated
        #ifdef to match TOT WebKit r65760.
        (WebCore::FontCustomPlatformData::fontPlatformData): Removed iOS-specific code path.
        (WebCore::createFontCustomPlatformData): Ditto.
        * platform/graphics/mac/FontCustomPlatformData.h:
        (WebCore::FontCustomPlatformData::FontCustomPlatformData): Removed iOS-specific code paths.
        * platform/graphics/mac/FontMac.mm:
        (WebCore::Font::drawGlyphs): Replaced some iOS-specific code with shared code, using cgFont()
        instead of font().
        * platform/graphics/mac/FontPlatformData.h:
        (WebCore::FontPlatformData::FontPlatformData): Removed an iOS-specific GSFontRef-based constructor
        in favor of the CGFontRef-based constructor.
        (WebCore::FontPlatformData::hash): Use m_cgFont instead of m_gsFont.
        (WebCore::FontPlatformData::operator==): Share more of this method.
        (WebCore::FontPlatformData::hashTableDeletedFontValue): Moved the iOS and non-iOS versions next to
        each other.
        * platform/graphics/mac/FontPlatformDataMac.mm:
        (WebCore::fontIsColorBitmapFont): Changed to take a CGFontRef instead of a GSFontRef.
        (WebCore::FontPlatformData::FontPlatformData): Moved more of the initialization into the
        initializer. Initialize m_cgFont. Added assertions and made changes corresponding to TOT WebKit r65727.
        (WebCore::FontPlatformData::operator=): Shrunk the iOS-specific part.
        (WebCore::FontPlatformData::setFont): Added assertions and made changes corresponding to TOT WebKit r65727.
        (WebCore::FontPlatformData::allowsLigatures): Removed trailing whitespace.
        (WebCore::FontPlatformData::ctFont): Shrunk iOS-specific part.
        (WebCore::FontPlatformData::description): Updated to use cgFont() instead of m_font.
        * platform/graphics/mac/GlyphPageTreeNodeMac.cpp:
        (WebCore::GlyphPage::fill): Ditto.
        * platform/graphics/mac/SimpleFontDataMac.mm:
        (WebCore::SimpleFontData::platformInit): Initialize vertical metrics for custom fonts.
        (WebCore::SimpleFontData::platformBoundsForGlyph): Removed iOS-specific code.
        (WebCore::SimpleFontData::platformWidthForGlyph): Use cgFont() and size() instead of the GSFontRef.

2010-08-20  Dan Bernstein  <mitz@apple.com>

        Reviewed by Simon Fraser.

        Really fix <rdar://problem/8297875> Printing inline JPEG content from MobileMail fails to scale and corrupts image

        * platform/graphics/ImageSource.h:
        (WebCore::ImageSource::isSubsampled): Added.
        * platform/graphics/cg/ImageCG.cpp:
        (WebCore::BitmapImage::copyUnscaledFrameAtIndex): Only use the cached frame if it is not
        scaled and the image source does not subsample intrinsically.

2010-08-20  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/8237166> doubleSided:NO layers not working it some configurations:
            (CSS reflections override backface-visibility in web content)

        Merged ToT WebKit r65752.
    
    2010-08-20  Simon Fraser  <simon.fraser@apple.com>
    
            Reviewed by Dan Bernstein.
    
            <rdar://problem/8245719> backface-visibility and reflections don't play nicely together.
            
            On elements with a reflection and backface-visibility: hidden, set the doubleSided property on the 
            reflection flattening layer so that backface-visibility works in all configurations.
    
            Test: compositing/reflections/backface-hidden-reflection.html
    
            * platform/graphics/mac/GraphicsLayerCA.mm:
            (WebCore::GraphicsLayerCA::updateBackfaceVisibility): Call setDoubleSided: on the structural
            layer for reflections.
            (WebCore::GraphicsLayerCA::ensureStructuralLayer): Fix a comment typo, and call updateBackfaceVisibility()
            when we gain a structural layer.

2010-08-20  David Carson  <dacarson@apple.com>

        Reviewed by Joseph Pecoraro.

        <rdar://problem/8290109> Regression: Jasper: Go button doesn't do anything in Friendly

        Certain iOS applications rely on the fact that they can press 'Go' on the keyboard
        to submit a form. This change puts in a setting allowing clients to bypass the 
        implicit submit only when there is a single input field added here:
            https://bugs.webkit.org/show_bug.cgi?id=9756

        * html/HTMLFormElement.cpp:
        (WebCore::HTMLFormElement::submitImplicitly):
        * page/Settings.cpp:
        (WebCore::Settings::Settings):
        * page/Settings.h:
        (WebCore::Settings::setAllowMultiElementImplicitSubmission):
        (WebCore::Settings::allowMultiElementImplicitSubmission):

2010-08-20  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/8292250> iOS: Memory corruption in WebSocketChannel::skipBuffer() - underflow in buffer size (43777)

        Merged ToT WebKit r61375, r65219, r65135, r65313.
    
    2010-08-13  Fumitoshi Ukai  <ukai@chromium.org>

            Reviewed by Alexey Proskuryakov.

            flaky websocket/tests/frame-length-overflow.html
            https://bugs.webkit.org/show_bug.cgi?id=43902

            Add m_shouldDiscardReceivedData flag to indicate it will no longer
            receive data from network.

            * websockets/WebSocketChannel.cpp:
            (WebCore::WebSocketChannel::WebSocketChannel):
            (WebCore::WebSocketChannel::didReceiveData):
            (WebCore::WebSocketChannel::didFail):
            (WebCore::WebSocketChannel::processBuffer):
            - when frame length overflows, we couldn't process data any more.
              clear buffer and mark m_shouldDiscardReceivedData true to make sure
              it doesn't process the same buffer again.
            * websockets/WebSocketChannel.h:

    2010-08-11  Fumitoshi Ukai  <ukai@chromium.org>

            Reviewed by Alexey Proskuryakov.

            REGRESSION(65135): format specifier warnings
            https://bugs.webkit.org/show_bug.cgi?id=43876

            * websockets/WebSocketChannel.cpp:
            (WebCore::WebSocketChannel::appendToBuffer): cast size_t to unsigned long for %lu.
            (WebCore::WebSocketChannel::processBuffer): cast size_t to unsigned long for %lu.

    2010-08-11  Fumitoshi Ukai  <ukai@chromium.org>

            Reviewed by Alexey Proskuryakov.

            Fix length calculation to be more robust.
            https://bugs.webkit.org/show_bug.cgi?id=43777

            Test: websocket/tests/frame-length-overflow.html

            * websockets/WebSocketChannel.cpp:
            (WebCore::WebSocketChannel::appendToBuffer): len is size_t.
             - add sanity check for integer wraps.
            (WebCore::WebSocketChannel::skipBuffer): len is size_t.
            (WebCore::WebSocketChannel::processBuffer): length is size_t.
             - add sanity check for integer wraps.
            * websockets/WebSocketChannel.h: change m_bufferSize and len to size_t.

    2010-06-17 Fumitoshi Ukai  <ukai@chromium.org>

            Reviewed by Alexey Proskuryakov.

            WebSocket: resume should not process buffer if already processing.
            https://bugs.webkit.org/show_bug.cgi?id=39340

            Test: websocket/tests/alert-in-event-handler.html

            While running an event handler of WebSocket object, it may be suspended
            and resumed in various reason. e.g. alert() will suspend/resume
            ActiveDOM objects. In chromium, sending IPC message would also
            suspend/resume ActiveDOM objects.
            If resume process pending buffer in this case, another event might
            be fired while running the initial event handler.
            Thus, resume should not process pending buffer immediately.
            Pending buffer would be processed after the current task has been
            finished.

            * websockets/ThreadableWebSocketChannelClientWrapper.h:
            * websockets/WebSocketChannel.cpp:
            (WebCore::WebSocketChannel::WebSocketChannel):
            (WebCore::WebSocketChannel::resume):
             Just set one shot timer for resumeTimerFired() if not yet set.
            (WebCore::WebSocketChannel::resumeTimerFired):
             Process pending event after resume was called.
            * websockets/WebSocketChannel.h:

2010-08-19  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/8325390> Switch to using WebCore/plugin/PluginViewNone.cpp

        Reviewed by Joseph Pecoraro.

        * bindings/js/ScriptDebugServer.cpp:
        (WebCore::ScriptDebugServer::setJavaScriptPaused): Removed hacks
        added in the Safari Havoc Final/Gemini merge.
        * page/Page.cpp:
        (WebCore::Page::privateBrowsingStateChanged): Ditto.
        * plugins/PluginStream.cpp: Ditto.
        * plugins/PluginStream.h: Ditto.
        * plugins/PluginView.cpp: Ditto.
        * plugins/PluginView.h: Ditto.  Merged part of ToT WebKit r65697.
        * plugins/PluginViewNone.cpp: Ditto.
        (WebCore::PluginView::platformGetValueStatic):

2010-08-19  Dan Bernstein  <mitz@apple.com>

        Reviewed by Simon Fraser.

        <rdar://problem/8297875> Printing inline JPEG content from MobileMail fails to scale and corrupts image

        When drawing an image on the screen or into other bitmap contexts, WebKit may opt
        to use subsampled versions of the image. When a subsampled image is drawn into a
        PDF context, the resulting PDF contains the original (not subsampled) image data with
        incorrect (based on subsampling) metadata, leading to the corruption observed in this
        bug. This inconsistent PDF output is the subject of <rdar://problem/8330183>. However that
        ends up being resolved, we would like to embed the full-resolution image data in PDFs,
        for best printed output quality. Drawing the full-resolution image into the PDF context
        doesn’t cause it to be decoded and rasterize, so the actual pixel dimensions do not
        contribute to resource consumption. 

        * platform/graphics/BitmapImage.h:
        * platform/graphics/cg/ImageCG.cpp:
        (WebCore::BitmapImage::draw): When drawing into a PDF context, ensure that
        the image is not subsampled.
        (WebCore::BitmapImage::copyUnscaledFrameAtIndex): Added. Returns a (possibly
        uncached) image that has not been subsampled.
        * platform/graphics/cg/ImageSourceCG.cpp:
        (WebCore::ImageSource::imageSourceOptions): Treat negative requestedSubsampling as a request for
        no subsampling. Otherwise, the baseline subsampling is applied to the requested value.
        (WebCore::ImageSource::createFrameAtIndex): Take an infinite scale hint to mean that
        no subsampling should be performed.

2010-08-18  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/8272620> Get purgeable memory support working correctly

        Reviewed by David Kilzer.

        For purgeable memory to work correctly, it needs to be a separate
        memory allocation. Trying to vm_allocate() purgeable virtual address
        space and then have its backing pages map to our TC-malloc'd memory
        using vm_copy() doesn't really work. The kernel does not like this
        aliasing of memory and the end result is that memory doesn't get freed
        the way we expect it to be freed.  So in order to use purgeable memory,
        we update SharedBuffer to allocate a PurgeableBuffer in which to store
        its data. We only do this for SharedBuffers used with ResourceLoaders
        i.e. used with CachedResource objects. PurgeableBuffer now allocates
        memory and copies the resource data there.

        * loader/CachedResource.cpp:
        (WebCore::CachedResource::makePurgeable): Don't allocate
        PurgeableBuffer here, use the one in SharedBuffer.
        * loader/ResourceLoader.cpp:
        (WebCore::ResourceLoader::didFinishLoading): Now that the resource has
        finished loading, tell SharedBuffer that it can use purgeable memory.
        Future calls to SharedBuffer::data() will create the PurgeableBuffer.
        * platform/PurgeableBuffer.h:
        (WebCore::PurgeableBuffer::create):
        (WebCore::PurgeableBuffer::data):
        * platform/SharedBuffer.cpp:
        (WebCore::SharedBuffer::SharedBuffer):
        (WebCore::SharedBuffer::createPurgeableBuffer): Added.Tries to create a
        PurgeableBuffer object and copy the data there. This can fail to create
        a PurgeableBuffer and is not guaranteed to succeed.
        (WebCore::SharedBuffer::data):
        * platform/SharedBuffer.h:
        (WebCore::SharedBuffer::shouldUsePurgeableMemory):
        * platform/mac/PurgeableBufferMac.cpp:
        (WebCore::PurgeableBuffer::create): Added. Allocate a new purgeable
        memory region of the size passed.
        (WebCore::PurgeableBuffer::data): Removed const.

2010-08-19  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Kilzer.

        <rdar://problem/8327102> Disable Compile Time INSPECTOR Flag for N82

        * Configurations/WebCore.xcconfig: specify an armv6 export file for the armv6 architecture.
        * DerivedSources.make: filter out Inspector exports when generating an armv6 export.
        * WebCore.Inspector.exp:
        * WebCore.iPhone.exp: moved an iOS Inspector only export to WebCore.Inspector.exp.

2010-08-18  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/8307907> Disable purgeable memory support in WebCore

        Reviewed by David Carson.

        Merge in change from Baker while I continue to work on 8272620.

        Disable the purgeable memory support on iPhone. It seems that the way
        we have implemented purgeable memory support is resulting in more pages
        being kept in memory even after we clear the purgeable pages. Our
        appropach of caling vm_copy() on tc-malloc'd memory (which we get via
        mmap) is causing the pages to stay resident instead of being returned
        to the system when we call madvise(MADV_FREE). For now, we disable
        purgeable so we can give back more memory to the system. In future, we
        need to understand and fix our purgeable memory support.

        * platform/PurgeableBuffer.h:
        * platform/mac/PurgeableBufferMac.cpp:

2010-08-18  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/8325228> iOS: REGRESSION (r63452): Layering problem on Google image results when selecting an image (43014)

        Merged ToT WebKit r64095.

        * rendering/RenderLayerBacking.cpp:
        (clipBox): Removed unused static method.

    2010-07-26  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Dan Bernstein.

        Google image search results broken on pages with Flash
        https://bugs.webkit.org/show_bug.cgi?id=43014

        The test for overflow added in r63452 is wrong in that it ignores the effects
        of positioning on overflow.
        
        The correct approach is to start by using RenderView's layoutOverflowRect as the largest bounds,
        then getting the oveflow rect via backgroundClipRect() relative to the root layer.
        
        Test: compositing/geometry/limit-layer-bounds-overflow-root.html

        * rendering/RenderLayerBacking.cpp:
        (WebCore::layerOrAncestorIsTransformed):
        (WebCore::RenderLayerBacking::updateCompositedBounds):

2010-08-17  Dan Bernstein  <mitz@apple.com>

        Reviewed by Joseph Pecoraro.

        <rdar://problem/7794650> LayoutTests/platform/iphone-simulator/fast/text/emoji-complextext.html sometimes fails

        * platform/graphics/SimpleFontData.cpp:
        (WebCore::SimpleFontData::SimpleFontData): Initialize m_syntheticBoldOffset in the
        image font code path.

2010-08-17  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/8321695> REGRESSION: Preferences: ASSERTION FAILED: !m_databaseGuard.tryLock() at DatabaseTracker.cpp:114

        Reviewed by David Carson.

        Lock m_databaseGuard before calling DatabaseTracker::openTrackerDatabase because it expects m_databaseGuard to
        be already locked.

        * storage/DatabaseTracker.cpp:
        (WebCore::DatabaseTracker::originsDidChange):

2010-08-17  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by Simon Fraser.

        <rdar://problem/8289002> REGRESSION (Jasper8C67 Havoc Merge): Movies on Apple's trailer site do not fit on screen properly.

        iOS treats embedded video differently than Desktop, and expects to
        spill outside the bounds of the layer. Do not clip the bounds of
        the plugin layer given to us on iOS.

        * platform/graphics/mac/GraphicsLayerCA.mm:
        (WebCore::GraphicsLayerCA::setupContentsLayer):

2010-08-17  Dan Bernstein  <mitz@apple.com>

        Reviewed by Dave Kilzer.

        <rdar://problem/7684451> Lucida Grande, Monaco need better fallback fonts (Mail is not respecting fixed width fonts on EBE emails)

        * platform/graphics/FontCache.cpp:
        (WebCore::alternateFamilyName): Removed mapping from Hevetica Neue to Helvetica,
        since Helvetica Neue is now included in iOS.
        * platform/graphics/mac/FontCacheMac.mm:
        (WebCore::FontCache::getSimilarFontPlatformData): Added that Verdana is similar to Lucida
        Grande, and that Courier is similar to Monaco and Menlo.

2010-08-17  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/8273078> Hanging on Account Verification

        Merged ToT WebKit r61059 and r64110.

    2010-07-27  Kent Tamura  <tkent@chromium.org>

            Reviewed by Ojan Vafai.

            Add a runtime setting for interactive form validation.
            https://bugs.webkit.org/show_bug.cgi?id=40520

            The interactive validation feature was disabled for non-strict
            modes by r61059 to avoid a compatibility issue. This removes the
            mode checking and introduce a runtime setting to enable/disable
            the feature instead.
            The default value is 'disable' and we'll remove the setting when
            the compatibility issue is resolved and interactive validation
            implementation is completed.

            * html/HTMLFormElement.cpp:
            (WebCore::HTMLFormElement::validateInteractively):
            * page/Settings.cpp:
            (WebCore::Settings::Settings):
            * page/Settings.h:
            (WebCore::Settings::setInteractiveFormValidationEnabled):
            (WebCore::Settings::interactiveFormValidationEnabled):

    2010-06-12  Kent Tamura  <tkent@chromium.org>

            Reviewed by Dimitri Glazkov.

            Disable interactive form validation in non-strict modes
            https://bugs.webkit.org/show_bug.cgi?id=40218

            The interactive validation feature of HTML5 is not compatible with
            HTML4, and users and page authors don't expect existing sites work
            differently in WebKit. For example, maxlength and required attributes
            in existing sites unexpectedly prevented form submission.
            So, we disable the interactive validation feature in non-strict
            modes to improve compatibility.

            Test: fast/forms/interactive-validation-compat-mode.html
                  fast/forms/interactive-validation-html4.html

            * html/HTMLFormElement.cpp:
            (WebCore::HTMLFormElement::validateInteractively):
             Process interactive validation only in the strict mode.

2010-08-17  Enrica Casucci  <enrica@apple.com>

        Reviewed by David Kilzer.
        
        <rdar://problem/5245015>
        Support WYSIWYG DHTML contentEditable editing areas (Google docs are not editable on P2)
 
        * WebCore.iPhone.exp: added two exported functions.
        * editing/SelectionController.cpp:
        (WebCore::SelectionController::focusedOrActiveStateChanged): removed clearing of the selection every time.
        * page/iphone/FrameIPhone.mm:
        (WebCore::ancestorRespondingToClickEvents): 
        (WebCore::Frame::qualifyingNodeAtViewportLocation): removed node approximation for clicks in editable content.
        * wak/WKWindow.mm:
        (WKWindowMakeFirstResponder): modified to support the case of a view that doesn't accept to be first responder.
        This doesn't need #ifdef because the behavior relies on the value returned by WKAcceptsFirstReponder
        that calls into WebHTMLView's acceptsFirstResponder that has #ifdef ENABLE_CONTENTEDITABLE.
        When that is not defined, it always returns YES, matching the behavior before these changes.

2010-08-17  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/8283080> Remove workarounds for rdar://problem/8275365&8275099

        * platform/text/cf/HyphenationCF.cpp:

2010-08-17  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/8216873> iOS: Use after free with SVG use element. (42659)

        Merget ToT WebKit r63865

    2010-08-17  Justin Schuh  <jschuh@chromium.org>

            Reviewed by Oliver Hunt.

            Prevent DeleteButtonController enable state from changing when not editing
            https://bugs.webkit.org/show_bug.cgi?id=42659

            Test: svg/custom/use-invalid-html.xhtml

            * dom/ContainerNode.cpp:
            (WebCore::ContainerNode::cloneChildNodes):

2010-08-16  Chris Fleizach  <cfleizach@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/8270459> role="tab" does not appear in iOS

        Test: platform/iphone-simulator/accessibility/tab-role.html

        * accessibility/iphone/AccessibilityObjectWrapperIPhone.mm:
        (-[AccessibilityObjectWrapper accessibilityTraits]):
        (-[AccessibilityObjectWrapper determineIsAccessibilityElement]):

2010-08-16  Joseph Pecoraro  <joepeck@webkit.org>

        Merged ToT WebKit r63445.

    2010-07-15  Daniel Bates  <dbates@rim.com>

            Reviewed by Darin Adler.

            [Mac] Implement LayoutTestController::markerTextForListItem()
            https://bugs.webkit.org/show_bug.cgi?id=37929

            Export symbols for WebCore::markerTextForListItem() and WebCore::toElement().

            * WebCore.exp.in:

2010-08-14  Dean Jackson  <dino@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/8071468> TLF: Add Gyro DOM events
        <rdar://problem/5440938> TLF: Add Accelerometer DOM events

        Add the iPhone client implementation of DeviceMotion using
        the Core Motion framework. Unfortunately, this is a fairly
        significant departure from the design that landed in Open Source,
        which has the controller and client attached to the Page object.
        This implementation moves them to Document, keeping the code
        completely in WebCore and making it much easier to suspend the
        hardware when the document is paused. We'll try to get these
        changes accepted in Open Source.

        * Configurations/FeatureDefines.xcconfig:
            - enable DEVICE_ORIENTATION
        * WebCore.xcodeproj/project.pbxproj:
            - add new DeviceMotionClientIPhone files
        * bindings/generic/RuntimeEnabledFeatures.cpp:
            - enable the runtime feature for device motion events
        * bindings/js/JSDeviceMotionEventCustom.cpp:
        * bindings/js/JSDeviceOrientationEventCustom.cpp:
            - JavaScript bindings in PEP are currently a little
              behind Open Source. This is a back-port to use the
              older way arguments are passed in.
        * dom/DeviceMotionClientIPhone.h: Added.
        * dom/DeviceMotionClientIPhone.mm: Added.
            - The client implementation for Core Motion
        * dom/DeviceMotionController.h:
        * dom/DeviceMotionController.cpp:
        (WebCore::DeviceMotionController::suspendUpdates):
        (WebCore::DeviceMotionController::resumeUpdates):
            - adding methods to help suspending and resuming
              the client when the document is paused.
        * dom/DeviceOrientationController.cpp:
        (WebCore::DeviceOrientationController::DeviceOrientationController):
            - turning DEVICE_ORIENTATION on caused a null client to
              be passed in, triggering an ASSERT. This is something we'll
              fix in Open Source soon.
        * dom/Document.cpp:
        * dom/Document.h:
            - Document is the home for DeviceMotion controller and
              client in the PEP implementation. Again, we'll fix this in
              Open Source soon.
        * history/CachedFrame.cpp:
            - Resume the DeviceMotion controller when a document is restored.
        * page/DOMWindow.cpp:
        (WebCore::DOMWindow::addEventListener):
        (WebCore::DOMWindow::removeEventListener):
        (WebCore::DOMWindow::removeAllEventListeners):
            - Due to the difference in location of the controller between
              PEP and OpenSource, branch the event listening code to
              send to the right place.
        * page/Page.cpp:
        (WebCore::Page::Page):
            - Protect the page from creating a useless DeviceMotionController.

2010-08-13  Dan Bernstein  <mitz@apple.com>

        Reviewed by David Carson.

        <rdar://problem/8308600> Assertion failure (root needs layout) in FrameView::layout() in AppStore due to event handling on the main thread during didLayout() client callback

        * page/FrameView.cpp:
        (WebCore::FrameView::layout): Moved the call to ChromeClient::didLayout() from here…
        (WebCore::FrameView::performPostLayoutTasks): …to here.

2010-08-13  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/8216895> iOS: Use after free in scrollbar layout (42724)

        Merged ToT WebKit r64780.

    2010-08-05  Tony Chang  <tony@chromium.org>

        Reviewed by David Hyatt.

        Fix a crash when a hidden iframe with a custom scrollbar finishes loading an image.
        https://bugs.webkit.org/show_bug.cgi?id=42724

        Test: scrollbars/hidden-iframe-scrollbar-crash2.html

        * page/FrameView.cpp:
        (WebCore::FrameView::createScrollbar):
        * rendering/RenderScrollbar.cpp:
        (WebCore::RenderScrollbar::createCustomScrollbar): Pass in Frame
        (WebCore::RenderScrollbar::RenderScrollbar): Pass in Frame
        (WebCore::RenderScrollbar::owningRenderer): Use the frame to get the RenderBox
        (WebCore::RenderScrollbar::getScrollbarPseudoStyle):
        (WebCore::RenderScrollbar::updateScrollbarParts):
        (WebCore::RenderScrollbar::updateScrollbarPart):
        * rendering/RenderScrollbar.h:
        * rendering/RenderScrollbarPart.cpp:
        (WebCore::RenderScrollbarPart::computeScrollbarWidth): null check
        (WebCore::RenderScrollbarPart::computeScrollbarHeight): null check

2010-08-13  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/8302921> iOS: Geolocation activity started after frame has been disconnected can cause crash (39879)

        Merged ToT WebKit r65329.

    2010-08-13  Steve Block  <steveblock@google.com>

        Reviewed by Alexey Proskuryakov.

        Geolocation activity started after frame has been disconnected can cause crash
        https://bugs.webkit.org/show_bug.cgi?id=39879

        New requests started after the Frame has been disconnected are ignored. We do
        not invoke the error callback as this would allow buggy or malicious pages to
        hose the CPU. Such a page could hold a reference to a Geolocation object from
        a since closed Page and register new requests from the error callback to
        create an infinite loop.

        Tests: fast/dom/Geolocation/disconnected-frame-already.html

        * page/Geolocation.cpp:

2010-08-13  Julio Gonzalez  <juliog@apple.com>

        <rdar://problem/8239911> Add Tibetan range to the list of fallbacks to support Kailasa

        Reviewed by David Kilzer.

        * platform/graphics/mac/FontCacheMac.mm:
        (WebCore::FontCache::getFontDataForCharacters): Added support for
        Tibetan fallback font.

2010-08-13  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/8302936> iOS: Use after free in PluginData::page() -> Page::refreshPlugins() (43888)

        Merged ToT WebKit r60258 (partial) and r65280.

    2010-08-12  Justin Schuh  <jschuh@chromium.org>

        Reviewed by Dumitru Daniliuc.

        Clear PluginData's page pointer on page refresh
        https://bugs.webkit.org/show_bug.cgi?id=43888

        Test: plugins/access-after-page-destroyed.html

        * page/Page.cpp:
        (WebCore::Page::refreshPlugins):

2010-08-12  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/8240361> iOS: history state methods check against baseURL instead of document URL (42858)

        Merged ToT WebKit r60608 and r64077.

    2010-06-02  Darin Fisher  <darin@chromium.org>

            Reviewed by Brady Eidson.

            location.href and outgoing referrer not updated properly by
            pushState/replaceState
            https://bugs.webkit.org/show_bug.cgi?id=40027

            Tests: fast/loader/stateobjects/pushstate-updates-location.html
                   fast/loader/stateobjects/replacestate-updates-location.html
                   http/tests/navigation/pushstate-updates-referrer.html
                   http/tests/navigation/replacestate-updates-referrer.html

            * dom/Document.cpp:
            (WebCore::Document::updateURLForPushOrReplaceState):
            Update the FrameLoader's notion of the current URL as well!

            * loader/FrameLoader.cpp:
            (WebCore::FrameLoader::loadInSameDocument):
            Use the 'url' parameter instead of m_URL since m_URL might have
            changed during the handling of the PopState event.  Eventually,
            this will become irrelevant since the PopState event should be
            dispatched asynchronously, but just in case we patch HashChange
            to be asynchronous before PopState, this change would be needed.

    2010-07-26  Justin Schuh  <jschuh@chromium.org>

            Reviewed by Darin Fisher.

            Check history state against origin before setting
            https://bugs.webkit.org/show_bug.cgi?id=42858

            Tests: fast/loader/stateobjects/replacestate-base-illegal.html
                   fast/loader/stateobjects/replacestate-base-legal.html

            * page/History.cpp:
            (WebCore::History::urlForState):
            (WebCore::History::stateObjectAdded):

2010-08-12  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7999024> Switch call to GSMainScreenScaleFactor() in WAKStringDrawing.mm back to wkGetScreenScaleFactor()

        Reviewed by Pratik Solanki.

        * wak/WAKStringDrawing.mm:
        (applyEllipsisStyle): Changed calls to GSMainScreenScaleFactor()
        back to wkGetScreenScaleFactor() now that
        <rdar://problem/7998987> is fixed.
        (-[NSString __web_drawInRect:withFont:ellipsis:alignment:letterSpacing:lineSpacing:includeEmoji:truncationRect:measureOnly:]): Ditto.

2010-08-12  David Kilzer  <ddkilzer@apple.com>

        Relanding: <rdar://problem/7854586> iOS: Enable Ruby support

        Reviewed by David Carson.

        * Configurations/FeatureDefines.xcconfig: Enable Ruby support
        for all SDKs except iOS SDK 4.2.

2010-08-12  Andy Estes  <aestes@apple.com>

        <rdar://problem/8295061> Merge open source r64390, which added support
        for compiling open source WebKit against iOS SDKs.

        Relanded with fix:  <rdar://problem/8300652> Jasper8C73: WebKit_Sim-591 installhdrs failed

        Reviewed by David Kilzer.

        * Configurations/Base.xcconfig:
        * Configurations/FeatureDefines.xcconfig:
        * Configurations/Version.xcconfig:
        * Configurations/WebCore.xcconfig:

2010-08-12  Chris Fleizach  <cfleizach@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/7083779> iPhone VoiceOver incorrectly announces aria-checked="mixed" as "off"

        Support mixed checkboxes.

        Test: platform/iphone-simulator/accessibility/mixed-checkboxes.html

        * accessibility/iphone/AccessibilityObjectWrapperIPhone.mm:
        (-[AccessibilityObjectWrapper accessibilityTraits]):
        (-[AccessibilityObjectWrapper accessibilityValue]):

2010-08-12  Chris Fleizach  <cfleizach@apple.com>

        Reviewed by Beth Dakin.

        <rdar://problem/8303114> AX: merge in (AX: isNativeCheckbox does not work as advertised)

        Merged ToT WebKit r65204

        Test: platform/mac/accessibility/native-vs-nonnative-checkboxes.html

        * accessibility/AccessibilityRenderObject.cpp:
        (WebCore::AccessibilityRenderObject::isInputImage):
        (WebCore::AccessibilityRenderObject::isNativeCheckboxOrRadio):
        * dom/InputElement.h:
        * html/HTMLInputElement.h:
        (WebCore::HTMLInputElement::isCheckbox):

2010-08-12  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/8251694> iOS: Use after free in PluginData::page() (43147)

        Merged ToT WebKit r64293.

    2010-07-29  Justin Schuh  <jschuh@chromium.org>

            Reviewed by Nate Chapin.

            Clear PluginData's page pointer on Page destruction
            https://bugs.webkit.org/show_bug.cgi?id=43147

            Test: plugins/access-after-page-destroyed.html

            * page/Page.cpp:
            (WebCore::Page::~Page):

2010-08-11  Eric Carlson  <eric.carlson@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/8288691> video element order of attributes matters

        Allow some property settings to be deferred so we don't miss setting then when the
        HTMLMediaElement is up and running but the plug-in helper hasn't registered itself yet.

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::prepareForLoad): Tell mediaPlayer to cancel the current load
        if it already exists.

        * platform/graphics/iphone/MediaPlayerPrivateIPhone.h:
        * platform/graphics/iphone/MediaPlayerPrivateIPhone.mm: 
        (WebCore::MediaPlayerPrivateiPhone::cancelLoad): Cancel all pending requests on the
        objc helper object. Clear the deferred properties dictionary.
        (WebCore::MediaPlayerPrivateiPhone::addDeferredProperty): New. Add a property name and value to
        the deferred properties dictionary dictionary.
        (WebCore::MediaPlayerPrivateiPhone::setDeferredProperties): New. Set all deferred properties.
        (WebCore::MediaPlayerPrivateiPhone::setPoster): Defer setting property if media player 
        helper doesn't exist yet.
        (WebCore::MediaPlayerPrivateiPhone::setControls): Ditto.
        (WebCore::MediaPlayerPrivateiPhone::processPendingRequests): Schedule deferred properties, if any.
        (-[WebCoreMediaPlayerNotificationHelper cancelPendingRequests]): New. Cancel all 
        performSelector requests.
        (-[WebCoreMediaPlayerNotificationHelper scheduleDeferredPropertiesWithOptionalDelay:]): New.
        Call setDeferredProperties, optionally after delay.

2010-08-10  Chris Fleizach  <cfleizach@apple.com>

        Reviewed by David Carson.

        <rdar://problem/8251165> N81 Settings > Facetime > Create New Account > Subscribe switch not togglable with VO

        Make sure checkboxes and radio buttons return the right point for VoiceOver to press.

        Test: platform/iphone-simulator/accessibility/centerpoint.html

        * accessibility/iphone/AccessibilityObjectWrapperIPhone.mm:
        (-[AccessibilityObjectWrapper accessibilityCenterPoint]):

2010-08-10  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/8292293> iOS: Memory corruption with moving ruby text nodes to runs without ruby bases. (43795)

        Merged ToT WebKit r65090.

    2010-08-10  Abhishek Arya  <inferno@chromium.org>

        Reviewed by David Hyatt.

        Take checks for ruby base existence out of the ASSERTs.
        https://bugs.webkit.org/show_bug.cgi?id=43795

        Test: fast/ruby/ruby-remove-no-base.html

        * rendering/RenderRubyRun.cpp:
        (WebCore::RenderRubyRun::addChild):
        (WebCore::RenderRubyRun::removeChild):

2010-08-10  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/8143975> iPhone: ZDI-CAN-806: Memory Corruption Possibly Related to Run-In/Scrolling (41375)

        Merged ToT WebKit r65035.

    2010-08-09  Mark Rowe  <mrowe@apple.com>

            Merge r63772.

        2010-07-20  Leo Yang  <leo.yang@torchmobile.com.cn>

            Reviewed by David Hyatt.

            Don't merge Anonymous block whose first child is inline run-in.
            Make run-in recalculate its style after its renderer is destroyed.
            https://bugs.webkit.org/show_bug.cgi?id=41375.

            Test: fast/runin/crash-when-reparent-sibling.html

            * rendering/RenderBlock.cpp:
            (WebCore::canMergeContiguousAnonymousBlocks):
            * rendering/RenderObjectChildList.cpp:
            (WebCore::RenderObjectChildList::destroyLeftoverChildren):

2010-08-10  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/8210895> Change MACOSX_DEPLOYMENT_TARGET from 10.5 to 10.6

        Reviewed by David Carson.

        * Configurations/DebugRelease.xcconfig: Changed
        MACOSX_DEPLOYMENT_TARGET from "10.5" and "10.6" for iphoneos and
        iphonesimulator platforms.

2010-08-07  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/8290269> iOS: HTMLLinkElement ignores dnsPrefetchingEnabled setting (42500)

        Merged ToT WebKit r63622.

    2010-07-17  TJ Lee  <tjlee0909@gmail.com>

        Reviewed by Timothy Hatcher.

        HTMLLinkElement ignores dnsPrefetchingEnabled setting
        https://bugs.webkit.org/show_bug.cgi?id=42500

        Changed the HTML Link tag to check that the browser
        has DNS-prefetching enabled before calling ResourceHandle::prepareForURL.

        There are no test cases for this patch because it was unclear how to test
        this using a layout test. A possible test case would be to
        clear the DNS cache on the client's machine before loading a page with
        <link rel="dns-prefetch" href="SomeSiteThatsNotTheCurrentOne.com"> and
        then check the number of DNS cache entries.

        * html/HTMLLinkElement.cpp:
        (WebCore::HTMLLinkElement::process):

2010-08-10  Chris Fleizach  <cfleizach@apple.com>

        Reviewed by David Carson.

        <rdar://problem/8246355> AX: WEB: popup buttons should return their data through AXValue

        Test: platform/iphone-simulator/accessibility/popup-button-value-label.html

        * accessibility/iphone/AccessibilityObjectWrapperIPhone.mm:
        (-[AccessibilityObjectWrapper stringValueShouldBeUsedInLabel]):
        (-[AccessibilityObjectWrapper accessibilityLabel]):
        (-[AccessibilityObjectWrapper accessibilityValue]):

2010-08-09  Chris Fleizach  <cfleizach@apple.com>

        Part 11 of 11: <rdar://problem/8281591> Bring AX code up to date from open source
        AX: Safari does not support ARIA mixed checkboxes
        https://bugs.webkit.org/show_bug.cgi?id=43016

        Test: platform/mac/accessibility/mixed-checkbox.html

        * accessibility/AccessibilityObject.cpp:
        (WebCore::AccessibilityObject::checkboxOrRadioValue):
        * accessibility/AccessibilityObject.h:
        (WebCore::):
        * accessibility/AccessibilityRenderObject.cpp:
        (WebCore::AccessibilityRenderObject::isNativeCheckboxOrRadio):
        (WebCore::AccessibilityRenderObject::checkboxOrRadioValue):
        * accessibility/AccessibilityRenderObject.h:
        * accessibility/mac/AccessibilityObjectWrapper.mm:
        (-[AccessibilityObjectWrapper accessibilityAttributeValue:]):

2010-08-09  Chris Fleizach  <cfleizach@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/7654163> AX: VoiceOver repeatedly announces area code prefix as part of phone number text field

        The placeholder value of a textfield should be returned separately.

        Test: platform/iphone-simulator/accessibility/placeholder-value.html

        * accessibility/iphone/AccessibilityObjectWrapperIPhone.mm:
        (-[AccessibilityObjectWrapper accessibilityPlaceholderValue]):

2010-08-09  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7902157> Enable web sockets once the spec has stabilized

        Reviewed by David Carson.

        NOTE: Build failures may be fixed by touching these files and
        then rebuilding:
        $ touch WebCore/page/DOMWindow.idl WebCore/websockets/WebSocket.idl

        * Configurations/FeatureDefines.xcconfig: Updated to enable
        web sockets for iOS WebKit.
        * websockets/WebSocket.cpp: Merged part of ToT WebKit r63735
        after iOS WebKit r243595 landed.
        * websockets/WebSocket.h: Ditto.

2010-08-09  Chris Fleizach  <cfleizach@apple.com>

        <rdar://problem/8281591> Bring AX code up to date from open source

        Update iPhone AX code that relied on open source methods.

        * accessibility/iphone/AccessibilityObjectWrapperIPhone.mm:
        (-[AccessibilityObjectWrapper accessibilityTraits]):
        (-[AccessibilityObjectWrapper accessibilityValue]):

2010-08-09  Chris Fleizach  <cfleizach@apple.com>

        10 of 10: < rdar://problem/8281591> Bring AX code up to date from open source
        Bug 43006 - AX: remove intValue() has intValue() from AccessibilityObject 
        https://bugs.webkit.org/show_bug.cgi?id=43006

        * accessibility/AccessibilityObject.cpp:
        (WebCore::AccessibilityObject::checkboxOrRadioValue):
        * accessibility/AccessibilityObject.h:
        (WebCore::):
        * accessibility/AccessibilityRenderObject.cpp:
        (WebCore::AccessibilityRenderObject::selectedRadioButton):
        (WebCore::AccessibilityRenderObject::selectedTabItem):
        (WebCore::AccessibilityRenderObject::checkboxOrRadioValue):
        * accessibility/AccessibilityRenderObject.h:
        * accessibility/mac/AccessibilityObjectWrapper.mm:
        (-[AccessibilityObjectWrapper accessibilityAttributeValue:]):

2010-08-09  Chris Fleizach  <cfleizach@apple.com>

        Part 9 of 10: < rdar://problem/8281591> Bring AX code up to date from open source
        Bug 42981 - AX: consolidate parentObjectIfExists() and parentObject() code
        https://bugs.webkit.org/show_bug.cgi?id=42981

        * accessibility/AccessibilityRenderObject.cpp:
        (WebCore::AccessibilityRenderObject::renderParentObject):
        (WebCore::AccessibilityRenderObject::parentObjectIfExists):
        (WebCore::AccessibilityRenderObject::parentObject):
        * accessibility/AccessibilityRenderObject.h:

2010-08-09  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Kilzer.

        <rdar://problem/8287663> Assertion in Databases when reaching quota during openDatabase call

        The openDatabase call can be run on the Web Thread and may call out to
        the client about the quota being reached. On iOS this runs some delegates
        on the main thread which look up information on the database. The
        DatabasesTracker assumes that all the work on a proposed Database happens
        on a single thread. Here that is not the case, and should be fine as long
        as the original thread, the Web Thread, is locked or disabled.

        * storage/DatabaseTracker.cpp:
        (WebCore::DatabaseTracker::detailsForNameAndOrigin): allow main thread if the Web Thread is locked / disabled.

2010-08-09  Chris Fleizach  <cfleizach@apple.com>

        Part 8 of 10: < rdar://problem/8281591> Bring AX code up to date from open source
        Bug 42979 - AX: replace m_renderer->document->axObjectCache() with just axObjectCache()
        https://bugs.webkit.org/show_bug.cgi?id=42979

        * accessibility/AccessibilityRenderObject.cpp:
        (WebCore::AccessibilityRenderObject::firstChild):
        (WebCore::AccessibilityRenderObject::lastChild):
        (WebCore::AccessibilityRenderObject::previousSibling):
        (WebCore::AccessibilityRenderObject::nextSibling):
        (WebCore::AccessibilityRenderObject::parentObjectIfExists):
        (WebCore::AccessibilityRenderObject::parentObject):
        (WebCore::AccessibilityRenderObject::menuForMenuButton):
        (WebCore::AccessibilityRenderObject::menuButtonForMenu):
        (WebCore::AccessibilityRenderObject::addRadioButtonGroupMembers):
        (WebCore::AccessibilityRenderObject::axObjectCache):
        (WebCore::AccessibilityRenderObject::contentChanged):
        (WebCore::AccessibilityRenderObject::addChildren):

2010-08-09  Chris Fleizach  <cfleizach@apple.com>

        Part 7 of 10: < rdar://problem/8281591> Bring AX code up to date from open source
        Bug 42652 - CrashTracer: [USER] 300 crashes in Safari at com.apple.WebCore: WebCore::AccessibilityTable::isTableExposableThroughAccessibility + 573
        https://bugs.webkit.org/show_bug.cgi?id=42652

        Test: accessibility/updating-attribute-in-table-causes-crash.html

        * accessibility/AccessibilityTableCell.cpp:
        (WebCore::AccessibilityTableCell::parentTable):

2010-08-09  Chris Fleizach  <cfleizach@apple.com>

        Part 6 of 10: <rdar://problem/8281591> Bring AX code up to date from open source
        Bug 42391 - AX: Crash when table has empty thead tag

        * accessibility/AccessibilityTableColumn.cpp:
        (WebCore::AccessibilityTableColumn::headerObjectForSection):

2010-08-09  Chris Fleizach  <cfleizach@apple.com>
 
        Part 5 of 10: < rdar://problem/8281591> Bring AX code up to date from open source
        Bug 42056 - AX converts AtomicStrings to .string() more than needed 

        * accessibility/AccessibilityRenderObject.cpp:
        (WebCore::AccessibilityRenderObject::isPressed):
        (WebCore::siblingWithAriaRole):
        (WebCore::AccessibilityRenderObject::accessibilityDescription):
        (WebCore::AccessibilityRenderObject::hasTextAlternative):
        (WebCore::AccessibilityRenderObject::supportsARIAFlowTo):
        (WebCore::AccessibilityRenderObject::supportsARIADropping):
        (WebCore::AccessibilityRenderObject::supportsARIADragging):
        (WebCore::AccessibilityRenderObject::determineARIADropEffects):
        (WebCore::AccessibilityRenderObject::isExpanded):
        (WebCore::AccessibilityRenderObject::isRequired):
        (WebCore::AccessibilityRenderObject::isSelected):
        (WebCore::AccessibilityRenderObject::supportsARIAOwns):
        (WebCore::AccessibilityRenderObject::isEnabled):
        (WebCore::AccessibilityRenderObject::activeDescendant):
        (WebCore::AccessibilityRenderObject::determineAriaRoleAttribute):
        (WebCore::AccessibilityRenderObject::orientation):
        (WebCore::AccessibilityRenderObject::canSetExpandedAttribute):
        (WebCore::AccessibilityRenderObject::canSetValueAttribute):

2010-08-09  Chris Fleizach  <cfleizach@apple.com>

        Part 4 of 10: <rdar://problem/8281591> Bring AX code up to date from open source
        
        Bug 41784 - AX: when a node's role changes, the AX tree might need to be updated 
        https://bugs.webkit.org/show_bug.cgi?id=41784

        Test: platform/mac/accessibility/image-map-link-used-as-radiobutton.html

        * accessibility/AccessibilityImageMapLink.cpp:
        (WebCore::AccessibilityImageMapLink::roleValue):
        (WebCore::AccessibilityImageMapLink::accessibilityDescription):
        (WebCore::AccessibilityImageMapLink::title):
        * accessibility/AccessibilityImageMapLink.h:
        (WebCore::AccessibilityImageMapLink::node):
        * accessibility/AccessibilityListBoxOption.cpp:
        (WebCore::AccessibilityListBoxOption::accessibilityIsIgnored):
        (WebCore::AccessibilityListBoxOption::stringValue):
        * accessibility/AccessibilityListBoxOption.h:
        (WebCore::AccessibilityListBoxOption::node):
        * accessibility/AccessibilityObject.cpp:
        (WebCore::AccessibilityObject::language):
        (WebCore::renderListItemContainerForNode):
        (WebCore::AccessibilityObject::getAttribute):
        (WebCore::AccessibilityObject::intValue):
        (WebCore::AccessibilityObject::hasIntValue):
        * accessibility/AccessibilityObject.h:
        (WebCore::AccessibilityObject::isCheckbox):
        (WebCore::AccessibilityObject::isRadioButton):
        (WebCore::AccessibilityObject::isListItem):
        (WebCore::AccessibilityObject::isCheckboxOrRadio):
        (WebCore::AccessibilityObject::node):
        (WebCore::AccessibilityObject::headingLevel):
        (WebCore::AccessibilityObject::isDetached):
        * accessibility/AccessibilityRenderObject.cpp:
        (WebCore::AccessibilityRenderObject::isPasswordField):
        (WebCore::AccessibilityRenderObject::headingLevel):
        (WebCore::AccessibilityRenderObject::selectedTabItem):
        (WebCore::AccessibilityRenderObject::hierarchicalLevel):
        (WebCore::AccessibilityRenderObject::node):
        (WebCore::AccessibilityRenderObject::intValue):
        (WebCore::AccessibilityRenderObject::stringValue):
        (WebCore::AccessibilityRenderObject::accessibilityDescription):
        * accessibility/AccessibilityRenderObject.h:
        * rendering/RenderMenuList.cpp:
        (WebCore::RenderMenuList::itemAccessibilityText):

2010-08-09  Chris Fleizach  <cfleizach@apple.com>

        Part 3 of 10: <rdar://problem/8281591> Bring AX code up to date from open source

        Bug 41784 - AX: when a node's role changes, the AX tree might need to be updated
        https://bugs.webkit.org/show_bug.cgi?id=41784

        Test: platform/mac/accessibility/update-children-when-aria-role-changes.html

        * accessibility/AccessibilityRenderObject.cpp:
        (WebCore::AccessibilityRenderObject::AccessibilityRenderObject):
        (WebCore::AccessibilityRenderObject::updateAccessibilityRole):

2010-08-09  Chris Fleizach  <cfleizach@apple.com>

        Part 2 of 10: <rdar://problem/8281591> Bring AX code up to date from open source

        Bug 41780 - AX: when an element uses role="text" but no aria-label, it should default to textUnderElement()
        https://bugs.webkit.org/show_bug.cgi?id=41780

        Test: platform/mac/accessibility/static-text-role-uses-text-under-element.html

        * accessibility/AccessibilityRenderObject.cpp:
        (WebCore::AccessibilityRenderObject::stringValue):
        (WebCore::AccessibilityRenderObject::accessibilityIsIgnored):

2010-08-09  Chris Fleizach  <cfleizach@apple.com>

        Part 1 of 10: <rdar://problem/8281591> Bring AX code up to date from open source

        Test: accessibility/removed-continuation-element-causes-crash.html

        * accessibility/AccessibilityObject.h:
        (WebCore::AccessibilityObject::updateChildrenIfNecessary):
        * accessibility/AccessibilityRenderObject.cpp:
        (WebCore::AccessibilityRenderObject::childrenChanged):
        (WebCore::AccessibilityRenderObject::addChildren):
        * accessibility/AccessibilityRenderObject.h:

2010-08-08  Dan Bernstein  <mitz@apple.com>

        Reviewed by Sam Weinig.

        <rdar://problem/8285690> Enable color bitmap fonts

        * platform/graphics/mac/FontMac.mm:
        (WebCore::showGlyphsWithAdvances): Changed #ifdef to compile color bitmap code for iOS even
        when building on Snow Leopard.
        (WebCore::Font::drawGlyphs): Use the identity transform for color bitmap fonts.
        * platform/graphics/mac/FontPlatformDataMac.mm:
        (WebCore::fontIsColorBitmapFont): Added. Checks for the presence of a 'sbix' table in the
        font. This is the same criterion Core Text uses, but doing it ourselves saves us creating a
        CTFont in most cases.
        (WebCore::FontPlatformData::FontPlatformData): Initialize m_isColorBitmapFont.
        (WebCore::FontPlatformData::setFont): Set m_isColorBitmapFont.

2010-08-08  Dean Jackson  <dino@apple.com>

        <rdar://problem/5440938> TLF: Add Accelerometer DOM events
        <rdar://problem/8071468> TLF: Add Gyro DOM events
        
        Merge r64845 from WebKit TOT - The DeviceMotionEvent interface

    2010-08-06  Dean Jackson  <dino@apple.com>

            Reviewed by Simon Fraser and Steve Block.

            https://bugs.webkit.org/show_bug.cgi?id=42865
            Implement DeviceMotionEvent

            Implement the DeviceMotionEvent interface as defined
            in http://dev.w3.org/geo/api/spec-source-orientation.html
            This is currently an empty implementation, in that there is
            no motion client connected - the platform implementations
            will need to do that.

            Tests: fast/dom/DeviceMotion/create-event.html
                   fast/dom/DeviceMotion/optional-event-properties.html
                   fast/dom/DeviceMotion/window-property.html

            * Android.derived.jscbindings.mk:
            * Android.derived.v8bindings.mk:
            * Android.jscbindings.mk:
            * Android.mk:
            * Android.v8bindings.mk:
            * CMakeLists.txt:
            * Configurations/FeatureDefines.xcconfig:
            * DerivedSources.make:
            * GNUmakefile.am:
            * WebCore.gypi:
            * WebCore.pro:
            * WebCore.vcproj/WebCore.vcproj:
            * WebCore.xcodeproj/project.pbxproj:
              - Add new files for DeviceMotionEvent build support
            * bindings/generic/RuntimeEnabledFeatures.cpp:
            * bindings/generic/RuntimeEnabledFeatures.h:
              - new runtime flags for device motion
            * bindings/js/JSDeviceMotionEventCustom.cpp: Added.
            * bindings/v8/custom/V8DeviceMotionEventCustom.cpp: Added.
              - Custom JS binding to translate property access through
                to the DeviceMotionData object that the Event holds
            * bindings/js/JSEventCustom.cpp:
              - Include the custom code for DeviceMotionEvent
            * dom/DeviceMotionClient.h: Added.
              - Pure virtual client for DeviceMotion access
            * dom/DeviceMotionController.cpp: Added.
            * dom/DeviceMotionController.h: Added.
              - Controller class that manages event dispatch
            * dom/DeviceMotionData.cpp: Added.
            * dom/DeviceMotionData.h: Added.
              - Representation of the data that comes from a device motion
                client that is then used within the event.
            * dom/DeviceMotionEvent.cpp: Added.
            * dom/DeviceMotionEvent.h: Added.
            * dom/DeviceMotionEvent.idl: Added.
              - The actual event implementation
            * dom/Document.cpp:
            (WebCore::Document::createEvent):
              - Update createEvent to allow "devicemotion" events
            * dom/Event.cpp:
            * dom/Event.h:
              - isDeviceMotionEvent virtual method
            * dom/EventNames.h:
              - new "devicemotion" event type
            * page/DOMWindow.cpp:
            (WebCore::DOMWindow::addEventListener):
            * page/DOMWindow.h:
            * page/DOMWindow.idl:
              - allow creation of "devicemotion" events and pass registration
                through to the Page's deviceMotionController object
            * page/Page.cpp:
            * page/Page.h:
              - new PageClient for deviceMotionController



2010-08-08  Dean Jackson  <dino@apple.com>

        <rdar://problem/5440938> TLF: Add Accelerometer DOM events
        <rdar://problem/8071468> TLF: Add Gyro DOM events

        Scaffolding for DeviceOrientation event

        Merge r59847, r59935, r62646, r62653, r62659, r63193, r63196
        r63312, r63317, r63544, r63646, r63750, r63810, r64048, r64125,
        r64270, r64299, r64350, r64356, r64208 from OpenSource TOT

    2010-05-20  Steve Block  <steveblock@google.com>

            Reviewed by Jeremy Orlow.

            Provide bindings for DeviceOrientation
            https://bugs.webkit.org/show_bug.cgi?id=39210

            Adds ENABLE_DEVICE_ORIENTATION to XCode project file, always disabled.

            * Configurations/FeatureDefines.xcconfig:

    2010-05-20  Steve Block  <steveblock@google.com>

            Reviewed by Jeremy Orlow.

            Provide bindings for DeviceOrientation
            https://bugs.webkit.org/show_bug.cgi?id=39210

            Adds ENABLE_DEVICE_ORIENTATION to VisualStudio project files, always disabled.

            * win/tools/vsprops/FeatureDefines.vsprops:
            * win/tools/vsprops/FeatureDefinesCairo.vsprops:

    2010-05-20  Steve Block  <steveblock@google.com>

            Reviewed by Jeremy Orlow.

            Provide bindings for DeviceOrientation
            https://bugs.webkit.org/show_bug.cgi?id=39210

            Adds ENABLE_DEVICE_ORIENTATION to XCode project file, always disabled.

            * Configurations/FeatureDefines.xcconfig:

    2010-05-20  Steve Block  <steveblock@google.com>

            Reviewed by Jeremy Orlow.

            Provide bindings for DeviceOrientation
            https://bugs.webkit.org/show_bug.cgi?id=39210

            Tests: fast/dom/DeviceOrientation/window-property.html
                   fast/dom/Window/window-properties-on-device-orientation.html

            Adds bindings for DeviceOrientation as defined in
            http://dev.w3.org/geo/api/spec-source-orientation.html
            This is guarded by ENABLE(DEVICE_ORIENTATION) which is currently disabled on
            all platforms but Android.

            * Android.derived.jscbindings.mk:
            * Android.derived.v8bindings.mk:
            * Android.mk:
            * Configurations/FeatureDefines.xcconfig:
            * DerivedSources.cpp:
            * DerivedSources.make:
            * GNUmakefile.am:
            * WebCore.gypi:
            * WebCore.pri:
            * WebCore.pro:
            * WebCore.xcodeproj/project.pbxproj:
            * bindings/js/JSEventCustom.cpp:
            (WebCore::toJS):
            * bindings/v8/custom/V8EventCustom.cpp:
            (WebCore::toV8):
            * dom/DeviceOrientationEvent.cpp: Added.
            (WebCore::DeviceOrientationEvent::DeviceOrientationEvent):
            (WebCore::DeviceOrientationEvent::initDeviceOrientationEvent):
            * dom/DeviceOrientationEvent.h: Added.
            (WebCore::DeviceOrientationEvent::create):
            (WebCore::DeviceOrientationEvent::alpha):
            (WebCore::DeviceOrientationEvent::beta):
            (WebCore::DeviceOrientationEvent::gamma):
            (WebCore::DeviceOrientationEvent::isDeviceOrientationEvent):
            * dom/DeviceOrientationEvent.idl: Added.
            * dom/Event.cpp:
            (WebCore::Event::isDeviceOrientationEvent):
            * dom/Event.h:
            * dom/EventNames.h:
            * page/DOMWindow.h:
            * page/DOMWindow.idl:

    2010-05-20  Steve Block  <steveblock@google.com>

            Reviewed by Jeremy Orlow.

            Provide bindings for DeviceOrientation
            https://bugs.webkit.org/show_bug.cgi?id=39210

            Modifies existing fast/dom/Window tests to skip window.ondeviceorientation until
            it is widely supported.
            Adds new fast/dom/Window/window-properties-on-device-orientation.html to test
            type and presence of window.ondeviceorientation.
            Adds new fast/dom/DeviceOrientation directory and initial test.
            Adds all DeviceOrientation tests to all skipped lists.

            * fast/dom/DeviceOrientation: Added.
            * fast/dom/DeviceOrientation/script-tests: Added.
            * fast/dom/DeviceOrientation/script-tests/TEMPLATE.html: Added.
            * fast/dom/DeviceOrientation/script-tests/window-property.js: Added.
            (hasOnDeviceOrientationProperty):
            * fast/dom/DeviceOrientation/window-property-expected.txt: Added.
            * fast/dom/DeviceOrientation/window-property.html: Added.
            * fast/dom/Window/script-tests/window-property-descriptors.js:
            * fast/dom/Window/window-properties-on-device-orientation-expected.txt: Added.
            * fast/dom/Window/window-properties-on-device-orientation.html: Added.
            * fast/dom/Window/window-properties.html:
            * platform/chromium/test_expectations.txt:
            * platform/gtk/Skipped:
            * platform/mac/Skipped:
            * platform/qt/Skipped:
            * platform/win/Skipped:


    2010-05-21  Steve Block  <steveblock@google.com>

            Reviewed by Jeremy Orlow.

            Add DeviceOrientation and DeviceOrientationClient
            https://bugs.webkit.org/show_bug.cgi?id=39479

            * src/WebViewImpl.cpp:
            (WebKit::WebViewImpl::WebViewImpl):

    2010-05-21  Steve Block  <steveblock@google.com>

            Reviewed by Jeremy Orlow.

            Add DeviceOrientation and DeviceOrientationClient
            https://bugs.webkit.org/show_bug.cgi?id=39479

            * Api/qwebpage.cpp:
            (QWebPagePrivate::QWebPagePrivate):

    2010-05-21  Steve Block  <steveblock@google.com>

            Reviewed by Jeremy Orlow.

            Add DeviceOrientation and DeviceOrientationClient
            https://bugs.webkit.org/show_bug.cgi?id=39479

            * webkit/webkitwebview.cpp:
            (webkit_web_view_init):

    2010-05-21  Steve Block  <steveblock@google.com>

            Reviewed by Jeremy Orlow.

            Add DeviceOrientation and DeviceOrientationClient
            https://bugs.webkit.org/show_bug.cgi?id=39479

            * WebView.cpp:
            (WebView::initWithFrame):

    2010-05-21  Steve Block  <steveblock@google.com>

            Reviewed by Jeremy Orlow.

            Add DeviceOrientation and DeviceOrientationClient
            https://bugs.webkit.org/show_bug.cgi?id=39479

            * WebView/WebView.mm:
            (-[WebView _commonInitializationWithFrameName:groupName:usesDocumentViews:]):

    2010-05-21  Steve Block  <steveblock@google.com>

            Reviewed by Jeremy Orlow.

            Add DeviceOrientation and DeviceOrientationClient
            https://bugs.webkit.org/show_bug.cgi?id=39479

            The page owns a DeviceOrientation object, which has a pointer to a
            DeviceOrientationClient object provided by the embedder. The
            DeviceOrientation object forwards requests to start listening to
            orientation to the client, and when updates are available, fires a
            DeviceOrientationEvent on the window object.

            No new tests are possible at this time as the implementation is
            incomplete. Future patches will add LayoutTestController methods
            to provide mock orientation events to test this.

            * Android.mk:
            * CMakeLists.txt:
            * GNUmakefile.am:
            * WebCore.base.exp:
            * WebCore.gypi:
            * WebCore.pro:
            * WebCore.vcproj/WebCore.vcproj
            * WebCore.xcodeproj/project.pbxproj:
            * dom/DeviceOrientation.cpp: Added.
            (WebCore::DeviceOrientation::DeviceOrientation):
            (WebCore::DeviceOrientation::onDeviceOrientationChange):
            * dom/DeviceOrientation.h: Added.
            * dom/DeviceOrientationClient.h: Added.
            (WebCore::DeviceOrientationClient::~DeviceOrientationClient):
            * page/Page.cpp:
            (WebCore::Page::Page):
            * page/Page.h:
            (WebCore::Page::deviceOrientation):
            * svg/graphics/SVGImage.cpp:
            (WebCore::SVGImage::dataChanged):


    2010-07-05  Steve Block  <steveblock@google.com>

            Reviewed by Adam Barth.

            DeviceOrientation should be renamed to DeviceOrientationController
            https://bugs.webkit.org/show_bug.cgi?id=41608

            No new tests, renaming only.

            * Android.mk:
            * CMakeLists.txt:
            * GNUmakefile.am:
            * WebCore.gypi:
            * WebCore.pro:
            * WebCore.vcproj/WebCore.vcproj:
            * WebCore.xcodeproj/project.pbxproj:
            * dom/DeviceOrientation.cpp: Removed.
            * dom/DeviceOrientation.h: Removed.
            * dom/DeviceOrientationController.cpp: Copied from WebCore/dom/DeviceOrientation.cpp.
            (WebCore::DeviceOrientationController::DeviceOrientationController):
            (WebCore::DeviceOrientationController::onDeviceOrientationChange):
            * dom/DeviceOrientationController.h: Copied from WebCore/dom/DeviceOrientation.h.
            * page/Page.cpp:
            (WebCore::Page::Page):
            * page/Page.h:
            (WebCore::Page::deviceOrientationController):

    2010-07-06  Steve Block  <steveblock@google.com>

            Reviewed by Adam Barth.

            DeviceOrientationEventConstructor should be exposed at window.DeviceOrientationEvent
            https://bugs.webkit.org/show_bug.cgi?id=41685

            Test: fast/dom/Window/window-properties-device-orientation.html
                  fast/dom/DeviceOrientation/window-property.txt

            * page/DOMWindow.idl:

    2010-07-06  Steve Block  <steveblock@google.com>

            Reviewed by Adam Barth.

            DeviceOrientationEventConstructor should be exposed at window.DeviceOrientationEvent
            https://bugs.webkit.org/show_bug.cgi?id=41685

            This required fast/dom/Window/window-properties-on-device-orientation.html to be renamed
            to fast/dom/Window/window-properties-device-orientation.html and updated.

            * fast/dom/DeviceOrientation/script-tests/window-property.js:
            * fast/dom/DeviceOrientation/window-property-expected.txt:
            * fast/dom/Window/window-properties-device-orientation-expected.txt: Copied from LayoutTests/fast/dom/Window/window-properties-on-device-orientation-expected.txt.
            * fast/dom/Window/window-properties-device-orientation.html: Copied from LayoutTests/fast/dom/Window/window-properties-on-device-orientation.html.
            * fast/dom/Window/window-properties-on-device-orientation-expected.txt: Removed.
            * fast/dom/Window/window-properties-on-device-orientation.html: Removed.
            * fast/dom/Window/window-properties.html:
            * platform/gtk/Skipped:
            * platform/mac/Skipped:
            * platform/qt/Skipped:
            * platform/win/Skipped:

    2010-07-07  Steve Block  <steveblock@google.com>

            Reviewed by Adam Barth.

            document.createEvent() should support DeviceOrientationEvent
            https://bugs.webkit.org/show_bug.cgi?id=41618

            * fast/dom/DeviceOrientation/create-event-expected.txt: Added.
            * fast/dom/DeviceOrientation/create-event.html: Added.
            * fast/dom/DeviceOrientation/script-tests/create-event.js: Added.
            * platform/gtk/Skipped:

    2010-07-07  Steve Block  <steveblock@google.com>

            Reviewed by Adam Barth.

            document.createEvent() should support DeviceOrientationEvent
            https://bugs.webkit.org/show_bug.cgi?id=41618

            Tests: fast/dom/DeviceOrientation/create-event.html

            * dom/Document.cpp:
            (WebCore::Document::createEvent):

    2010-07-12  Steve Block  <steveblock@google.com>

            Reviewed by Jeremy Orlow.

            DeviceOrientationEvent should use optional properties
            https://bugs.webkit.org/show_bug.cgi?id=41607

            This change adds a new DeviceOrientation class which takes care of which of the
            optional properties are present. DeviceOrientationEvent owns an instance of
            DeviceOrientation, rather than owning the properties directly.
            DeviceOrientationEvent now requires custom bindings.

            Test: fast/dom/DeviceOrientation/optional-event-properties.html

            * Android.mk:
            * Android.jscbindings.mk:
            * Android.v8bindings.mk:
            * CMakeLists.txt:
            * GNUmakefile.am:
            * WebCore.gypi:
            * WebCore.pro:
            * WebCore.vcproj/WebCore.vcproj:
            * WebCore.xcodeproj/project.pbxproj:
            * bindings/js/JSBindingsAllInOne.cpp:
            * bindings/js/JSDeviceOrientationEventCustom.cpp: Added.
            (WebCore::JSDeviceOrientationEvent::alpha):
            (WebCore::JSDeviceOrientationEvent::beta):
            (WebCore::JSDeviceOrientationEvent::gamma):
            (WebCore::JSDeviceOrientationEvent::initDeviceOrientationEvent):
            * bindings/v8/custom/V8DeviceOrientationEventCustom.cpp: Added.
            (WebCore::V8DeviceOrientationEvent::alphaAccessorGetter):
            (WebCore::V8DeviceOrientationEvent::betaAccessorGetter):
            (WebCore::V8DeviceOrientationEvent::gammaAccessorGetter):
            (WebCore::V8DeviceOrientationEvent::initDeviceOrientationEventCallback):
            * dom/DeviceOrientation.cpp: Added.
            * dom/DeviceOrientation.h: Added.
            (WebCore::DeviceOrientation::create):
            (WebCore::DeviceOrientation::canProvideAlpha):
            (WebCore::DeviceOrientation::alpha):
            (WebCore::DeviceOrientation::canProvideBeta):
            (WebCore::DeviceOrientation::beta):
            (WebCore::DeviceOrientation::canProvideGamma):
            (WebCore::DeviceOrientation::gamma):
            (WebCore::DeviceOrientation::DeviceOrientation):
            * dom/DeviceOrientationEvent.cpp:
            (WebCore::DeviceOrientationEvent::DeviceOrientationEvent):
            (WebCore::DeviceOrientationEvent::initDeviceOrientationEvent):
            * dom/DeviceOrientationEvent.h:
            (WebCore::DeviceOrientationEvent::create):
            (WebCore::DeviceOrientationEvent::orientation):
            * dom/DeviceOrientationEvent.idl:

    2010-07-12  Steve Block  <steveblock@google.com>

            Reviewed by Jeremy Orlow.

            DeviceOrientationEvent should use optional properties
            https://bugs.webkit.org/show_bug.cgi?id=41607

            * fast/dom/DeviceOrientation/optional-event-properties-expected.txt: Added.
            * fast/dom/DeviceOrientation/optional-event-properties.html: Added.
            * fast/dom/DeviceOrientation/script-tests/optional-event-properties.js: Added.

    2010-07-12  Steve Block  <steveblock@google.com>

            Reviewed by Jeremy Orlow.

            DeviceOrientationEvent should use optional properties
            https://bugs.webkit.org/show_bug.cgi?id=41607

            This change adds a new DeviceOrientation class which takes care of which of the
            optional properties are present. DeviceOrientationEvent owns an instance of
            DeviceOrientation, rather than owning the properties directly.
            DeviceOrientationEvent now requires custom bindings.

            Test: fast/dom/DeviceOrientation/optional-event-properties.html

            * Android.mk:
            * Android.jscbindings.mk:
            * Android.v8bindings.mk:
            * CMakeLists.txt:
            * GNUmakefile.am:
            * WebCore.gypi:
            * WebCore.pro:
            * WebCore.vcproj/WebCore.vcproj:
            * WebCore.xcodeproj/project.pbxproj:
            * bindings/js/JSBindingsAllInOne.cpp:
            * bindings/js/JSDeviceOrientationEventCustom.cpp: Added.
            (WebCore::JSDeviceOrientationEvent::alpha):
            (WebCore::JSDeviceOrientationEvent::beta):
            (WebCore::JSDeviceOrientationEvent::gamma):
            (WebCore::JSDeviceOrientationEvent::initDeviceOrientationEvent):
            * bindings/v8/custom/V8DeviceOrientationEventCustom.cpp: Added.
            (WebCore::V8DeviceOrientationEvent::alphaAccessorGetter):
            (WebCore::V8DeviceOrientationEvent::betaAccessorGetter):
            (WebCore::V8DeviceOrientationEvent::gammaAccessorGetter):
            (WebCore::V8DeviceOrientationEvent::initDeviceOrientationEventCallback):
            * dom/DeviceOrientation.cpp: Added.
            * dom/DeviceOrientation.h: Added.
            (WebCore::DeviceOrientation::create):
            (WebCore::DeviceOrientation::canProvideAlpha):
            (WebCore::DeviceOrientation::alpha):
            (WebCore::DeviceOrientation::canProvideBeta):
            (WebCore::DeviceOrientation::beta):
            (WebCore::DeviceOrientation::canProvideGamma):
            (WebCore::DeviceOrientation::gamma):
            (WebCore::DeviceOrientation::DeviceOrientation):
            * dom/DeviceOrientationEvent.cpp:
            (WebCore::DeviceOrientationEvent::DeviceOrientationEvent):
            (WebCore::DeviceOrientationEvent::initDeviceOrientationEvent):
            * dom/DeviceOrientationEvent.h:
            (WebCore::DeviceOrientationEvent::create):
            (WebCore::DeviceOrientationEvent::orientation):
            * dom/DeviceOrientationEvent.idl:

    2010-07-12  Steve Block  <steveblock@google.com>

            Reviewed by Jeremy Orlow.

            DeviceOrientationEvent should use optional properties
            https://bugs.webkit.org/show_bug.cgi?id=41607

            * fast/dom/DeviceOrientation/optional-event-properties-expected.txt: Added.
            * fast/dom/DeviceOrientation/optional-event-properties.html: Added.
            * fast/dom/DeviceOrientation/script-tests/optional-event-properties.js: Added.

    2010-07-14  Steve Block  <steveblock@google.com>

            Reviewed by Jeremy Orlow.

            Provide implementation of DeviceOrientationController and hook into DOMWindow
            https://bugs.webkit.org/show_bug.cgi?id=39588

            Added DeviceOrientationController::addListener() and removeListener()
            to start and stop the client and added calls from DomWindow. Implemented
            DeviceOrientationController::onDeviceOrientationChange() to fire a
            DeviceOrientationEvent on the window object.

            No new tests yet, pending LayoutTestController methods for mock DeviceOrientation.

            * dom/DeviceOrientationClient.h:
            * dom/DeviceOrientationController.cpp:
            (WebCore::DeviceOrientation::addListener):
            (WebCore::DeviceOrientation::removeListener):
            (WebCore::DeviceOrientation::removeAllListeners):
            (WebCore::DeviceOrientationController::onDeviceOrientationChange):
            * dom/DeviceOrientationController.h:
            * page/DOMWindow.cpp:
            (WebCore::DOMWindow::addEventListener):
            (WebCore::DOMWindow::removeEventListener):
            (WebCore::DOMWindow::removeAllEventListeners):

    2010-07-14  Hans Wennborg  <hans@chromium.org>

            Reviewed by Steve Block.

            Rename DeviceOrientationController::onOrientationChange to didChangeDeviceOrientation
            https://bugs.webkit.org/show_bug.cgi?id=42257

            According to convention, we should avoid "on" in favor of "did" in function names.

            * dom/DeviceOrientationController.cpp:
            (WebCore::DeviceOrientationController::didChangeDeviceOrientation):
            * dom/DeviceOrientationController.h:


    2010-07-16  Hans Wennborg  <hans@chromium.org>

            Reviewed by Steve Block.

            DeviceOrientationEvent.h should not forward-declare DeviceOrientation
            https://bugs.webkit.org/show_bug.cgi?id=42447

            When destructing m_orientation, DeviceOrientation cannot be an incomplete type.

            * dom/DeviceOrientationEvent.h:

    2010-07-19  Hans Wennborg  <hans@chromium.org>

            Reviewed by Steve Block.

            Explicitly declare DeviceOrientationEvent destructor and define it in the .cpp file
            https://bugs.webkit.org/show_bug.cgi?id=42466

            (Original problem at https://bugs.webkit.org/show_bug.cgi?id=42447)

            No new functionality so no new tests.

            * dom/DeviceOrientationEvent.cpp:
            (WebCore::DeviceOrientationEvent::~DeviceOrientationEvent):
            Move here to avoid needing to have the full declaration of
            DeviceOrientation in DeviceOrientationEvent.h.
            * dom/DeviceOrientationEvent.h:

    2010-07-20  Hans Wennborg  <hans@chromium.org>

            Reviewed by Steve Block.

            Runtime feature switch for device orientation
            https://bugs.webkit.org/show_bug.cgi?id=42265

            Add a runtime feature switch that decides whether device orientation
            events are available or not. Defaults to true.

            * bindings/generic/RuntimeEnabledFeatures.cpp:
            * bindings/generic/RuntimeEnabledFeatures.h:
            (WebCore::RuntimeEnabledFeatures::setDeviceOrientationEnabled):
            (WebCore::RuntimeEnabledFeatures::deviceOrientationEnabled):
            (WebCore::RuntimeEnabledFeatures::deviceOrientationEventEnabled):
            (WebCore::RuntimeEnabledFeatures::ondeviceorientationEnabled):
            * page/DOMWindow.cpp:
            (WebCore::DOMWindow::addEventListener):
            (WebCore::DOMWindow::removeEventListener):
            (WebCore::DOMWindow::removeAllEventListeners):
            * page/DOMWindow.idl:
            * page/Page.cpp:
            (WebCore::Page::Page):

    2010-07-20  Hans Wennborg  <hans@chromium.org>

            Reviewed by Steve Block.

            Runtime feature switch for device orientation
            https://bugs.webkit.org/show_bug.cgi?id=42265

            Add a runtime feature switch that decides whether device orientation
            events are available or not. Defaults to true.

            * public/WebRuntimeFeatures.h:
            * src/WebRuntimeFeatures.cpp:
            (WebKit::WebRuntimeFeatures::enableDeviceOrientation):
            (WebKit::WebRuntimeFeatures::isDeviceOrientationEnabled):

    2010-07-21  Hans Wennborg  <hans@chromium.org>

            Reviewed by Steve Block.

            Runtime feature switch for device orientation
            https://bugs.webkit.org/show_bug.cgi?id=42265

            Add a runtime feature switch that decides whether device orientation
            events are available or not. Defaults to true.

            * WebCore.vcproj/WebCoreCommon.vsprops: Add bindings/generic to include path.
            * bindings/generic/RuntimeEnabledFeatures.cpp:
            * bindings/generic/RuntimeEnabledFeatures.h:
            (WebCore::RuntimeEnabledFeatures::setDeviceOrientationEnabled):
            (WebCore::RuntimeEnabledFeatures::deviceOrientationEnabled):
            (WebCore::RuntimeEnabledFeatures::deviceOrientationEventEnabled):
            (WebCore::RuntimeEnabledFeatures::ondeviceorientationEnabled):
            * page/DOMWindow.cpp:
            (WebCore::DOMWindow::addEventListener):
            (WebCore::DOMWindow::removeEventListener):
            (WebCore::DOMWindow::removeAllEventListeners):
            * page/DOMWindow.idl:
            * page/Page.cpp:
            (WebCore::Page::Page):

    2010-07-21  Hans Wennborg  <hans@chromium.org>

            Reviewed by Steve Block.

            Runtime feature switch for device orientation
            https://bugs.webkit.org/show_bug.cgi?id=42265

            Add a runtime feature switch that decides whether device orientation
            events are available or not. Defaults to true.

            * public/WebRuntimeFeatures.h:
            * src/WebRuntimeFeatures.cpp:
            (WebKit::WebRuntimeFeatures::enableDeviceOrientation):
            (WebKit::WebRuntimeFeatures::isDeviceOrientationEnabled):

    2010-07-26  Steve Block  <steveblock@google.com>

            Reviewed by Jeremy Orlow.

            DeviceOrientation event listeners should never be called synchronously from addEventListener()
            https://bugs.webkit.org/show_bug.cgi?id=42304

            No new tests as there are currently no implementations to test. Tests will be
            added once LayoutTestController methods for providing a mock implementation are
            in place, see Bug 39589.

            * dom/DeviceOrientationController.cpp:
            (WebCore::DeviceOrientationController::DeviceOrientationController):
            (WebCore::DeviceOrientationController::timerFired):
            (WebCore::DeviceOrientationController::addListener):
            (WebCore::DeviceOrientationController::removeListener):
            (WebCore::DeviceOrientationController::removeAllListeners):
            * dom/DeviceOrientationController.h:

    2010-07-27  Steve Block  <steveblock@google.com>

            Reviewed by Jeremy Orlow.

            LayoutTests/fast/dom/DeviceOrientation/window-property.html assumes use of V8
            https://bugs.webkit.org/show_bug.cgi?id=43025

            This change modifies window-property.html and its expected result to work with JSC.
            A V8-specific expected result is added for Android.

            * fast/dom/DeviceOrientation/script-tests/window-property.js:
            * fast/dom/DeviceOrientation/window-property-expected.txt:
            * platform/android-v8: Added.
            * platform/android-v8/fast: Added.
            * platform/android-v8/fast/dom: Added.
            * platform/android-v8/fast/dom/DeviceOrientation: Added.
            * platform/android-v8/fast/dom/DeviceOrientation/window-property-expected.txt: Added.

    2010-07-29  Steve Block  <steveblock@google.com>

            Reviewed by Jeremy Orlow.

            Add LayoutTestController methods to test DeviceOrientation
            https://bugs.webkit.org/show_bug.cgi?id=39589

            * fast/dom/DeviceOrientation/basic-operation-expected.txt: Added.
            * fast/dom/DeviceOrientation/basic-operation.html: Added.
            * fast/dom/DeviceOrientation/script-tests/basic-operation.js: Added.
            * platform/gtk/Skipped:

    2010-07-29  Steve Block  <steveblock@google.com>

            Reviewed by Jeremy Orlow.

            Add LayoutTestController methods to test DeviceOrientation
            https://bugs.webkit.org/show_bug.cgi?id=39589

            This patch does not hook up the new LayoutTestController method to WebKit
            for any platform. This will be done in later patches.
            https://bugs.webkit.org/show_bug.cgi?id=43181 tracks this for Mac.

            Test: fast/dom/DeviceOrientation/basic-operation.html

            * WebCore/WebCore.exp.in:
            * WebCore.xcodeproj/project.pbxproj:
            * dom/DeviceOrientationClient.h:
            (WebCore::DeviceOrientationClient::~DeviceOrientationClient):
            * dom/DeviceOrientationController.cpp:
            (WebCore::DeviceOrientationController::DeviceOrientationController):
            * dom/DeviceOrientationEvent.cpp:
            * platform/mock/DeviceOrientationClientMock.cpp: Added.
            (WebCore::DeviceOrientationClientMock::DeviceOrientationClientMock):
            (WebCore::DeviceOrientationClientMock::setController):
            (WebCore::DeviceOrientationClientMock::startUpdating):
            (WebCore::DeviceOrientationClientMock::stopUpdating):
            (WebCore::DeviceOrientationClientMock::setOrientation):
            (WebCore::DeviceOrientationClientMock::timerFired):
            * platform/mock/DeviceOrientationClientMock.h: Added.
            (WebCore::DeviceOrientationClientMock::lastOrientation):

    2010-07-29  Steve Block  <steveblock@google.com>

            Reviewed by Jeremy Orlow.

            Add LayoutTestController methods to test DeviceOrientation
            https://bugs.webkit.org/show_bug.cgi?id=39589

            * DumpRenderTree/LayoutTestController.cpp:
            (setMockDeviceOrientationCallback):
            (LayoutTestController::staticFunctions):
            * DumpRenderTree/LayoutTestController.h:
            * DumpRenderTree/chromium/LayoutTestController.cpp:
            * DumpRenderTree/chromium/LayoutTestController.h:
            * DumpRenderTree/gtk/LayoutTestControllerGtk.cpp:
            (LayoutTestController::setMockDeviceOrientation):
            * DumpRenderTree/mac/LayoutTestControllerMac.mm:
            (LayoutTestController::setMockDeviceOrientation):
            * DumpRenderTree/qt/LayoutTestControllerQt.cpp:
            (LayoutTestController::setMockDeviceOrientation):
            * DumpRenderTree/qt/LayoutTestControllerQt.h:
            * DumpRenderTree/win/LayoutTestControllerWin.cpp:
            (LayoutTestController::setMockDeviceOrientation):
            * DumpRenderTree/wx/LayoutTestControllerWx.cpp:
            (LayoutTestController::setMockDeviceOrientation):
            * Scripts/build-webkit:

    2010-07-29  Victor Wang  <victorw@chromium.org>

            Unreviewed, rolling out r64270.
            http://trac.webkit.org/changeset/64270
            https://bugs.webkit.org/show_bug.cgi?id=39589

            The patch breaks chromium webkit unittest

            * WebCore.exp.in:
            * WebCore.xcodeproj/project.pbxproj:
            * dom/DeviceOrientationClient.h:
            (WebCore::DeviceOrientationClient::~DeviceOrientationClient):
            * dom/DeviceOrientationController.cpp:
            (WebCore::DeviceOrientationController::DeviceOrientationController):
            * dom/DeviceOrientationEvent.cpp:
            * platform/mock/DeviceOrientationClientMock.cpp: Removed.
            * platform/mock/DeviceOrientationClientMock.h: Removed.

    2010-07-29  Victor Wang  <victorw@chromium.org>

            Unreviewed, rolling out r64270.
            http://trac.webkit.org/changeset/64270
            https://bugs.webkit.org/show_bug.cgi?id=39589

            The patch breaks chromium webkit unittest

            * fast/dom/DeviceOrientation/basic-operation-expected.txt: Removed.
            * fast/dom/DeviceOrientation/basic-operation.html: Removed.
            * fast/dom/DeviceOrientation/script-tests/basic-operation.js: Removed.
            * platform/gtk/Skipped:

    2010-07-29  Victor Wang  <victorw@chromium.org>

            Unreviewed, rolling out r64270.
            http://trac.webkit.org/changeset/64270
            https://bugs.webkit.org/show_bug.cgi?id=39589

            The patch breaks chromium webkit unittest

            * DumpRenderTree/LayoutTestController.cpp:
            (LayoutTestController::staticFunctions):
            * DumpRenderTree/LayoutTestController.h:
            * DumpRenderTree/chromium/LayoutTestController.cpp:
            (LayoutTestController::LayoutTestController):
            * DumpRenderTree/chromium/LayoutTestController.h:
            * DumpRenderTree/gtk/LayoutTestControllerGtk.cpp:
            * DumpRenderTree/mac/LayoutTestControllerMac.mm:
            * DumpRenderTree/qt/LayoutTestControllerQt.cpp:
            * DumpRenderTree/qt/LayoutTestControllerQt.h:
            * DumpRenderTree/win/LayoutTestControllerWin.cpp:
            * DumpRenderTree/wx/LayoutTestControllerWx.cpp:
            * Scripts/build-webkit:

    2010-07-30  Steve Block  <steveblock@google.com>

            Reviewed by Steve Block.

            Add LayoutTestController methods to test DeviceOrientation
            https://bugs.webkit.org/show_bug.cgi?id=39589

            * fast/dom/DeviceOrientation/basic-operation-expected.txt: Added.
            * fast/dom/DeviceOrientation/basic-operation.html: Added.
            * fast/dom/DeviceOrientation/script-tests/basic-operation.js: Added.
            * platform/gtk/Skipped:

    2010-07-30  Steve Block  <steveblock@google.com>

            Reviewed by Steve Block.

            Add LayoutTestController methods to test DeviceOrientation
            https://bugs.webkit.org/show_bug.cgi?id=39589

            This patch does not hook up the new LayoutTestController method to WebKit
            for any platform. This will be done in later patches.
            https://bugs.webkit.org/show_bug.cgi?id=43181 tracks this for Mac.

            Test: fast/dom/DeviceOrientation/basic-operation.html

            * Android.mk:
            * CMakeLists.txt:
            * GNUmakefile.am:
            * WebCore.exp.in:
            * WebCore.gypi:
            * WebCore.pro:
            * WebCore.vcproj/WebCore.vcproj:
            * WebCore.xcodeproj/project.pbxproj:
            * dom/DeviceOrientationClient.h:
            (WebCore::DeviceOrientationClient::~DeviceOrientationClient):
            * dom/DeviceOrientationController.cpp:
            (WebCore::DeviceOrientationController::DeviceOrientationController):
            * dom/DeviceOrientationEvent.cpp:
            * platform/mock/DeviceOrientationClientMock.cpp: Added.
            (WebCore::DeviceOrientationClientMock::DeviceOrientationClientMock):
            (WebCore::DeviceOrientationClientMock::setController):
            (WebCore::DeviceOrientationClientMock::startUpdating):
            (WebCore::DeviceOrientationClientMock::stopUpdating):
            (WebCore::DeviceOrientationClientMock::setOrientation):
            (WebCore::DeviceOrientationClientMock::timerFired):
            * platform/mock/DeviceOrientationClientMock.h: Added.
            (WebCore::DeviceOrientationClientMock::lastOrientation):

    2010-07-30  Steve Block  <steveblock@google.com>

            Reviewed by Steve Block.

            Add LayoutTestController methods to test DeviceOrientation
            https://bugs.webkit.org/show_bug.cgi?id=39589

            * DumpRenderTree/LayoutTestController.cpp:
            (setMockDeviceOrientationCallback):
            (LayoutTestController::staticFunctions):
            * DumpRenderTree/LayoutTestController.h:
            * DumpRenderTree/chromium/LayoutTestController.cpp:
            (LayoutTestController::LayoutTestController):
            (LayoutTestController::setMockDeviceOrientation):
            * DumpRenderTree/chromium/LayoutTestController.h:
            * DumpRenderTree/gtk/LayoutTestControllerGtk.cpp:
            (LayoutTestController::setMockDeviceOrientation):
            * DumpRenderTree/mac/LayoutTestControllerMac.mm:
            (LayoutTestController::setMockDeviceOrientation):
            * DumpRenderTree/qt/LayoutTestControllerQt.cpp:
            (LayoutTestController::setMockDeviceOrientation):
            * DumpRenderTree/qt/LayoutTestControllerQt.h:
            * DumpRenderTree/win/LayoutTestControllerWin.cpp:
            (LayoutTestController::setMockDeviceOrientation):
            * DumpRenderTree/wx/LayoutTestControllerWx.cpp:
            (LayoutTestController::setMockDeviceOrientation):
            * Scripts/build-webkit:

    2010-07-26  Steve Block  <steveblock@google.com>

            Reviewed by Jeremy Orlow.

            Page clients should be passed to Page constructor via structure of pointers
            https://bugs.webkit.org/show_bug.cgi?id=42834

            * src/WebViewImpl.cpp:
            (WebKit::WebViewImpl::WebViewImpl):

    2010-07-26  Steve Block  <steveblock@google.com>

            Reviewed by Jeremy Orlow.

            Page clients should be passed to Page constructor via structure of pointers
            https://bugs.webkit.org/show_bug.cgi?id=42834

            * Api/qwebpage.cpp:
            (QWebPagePrivate::QWebPagePrivate):

    2010-07-26  Steve Block  <steveblock@google.com>

            Reviewed by Jeremy Orlow.

            Page clients should be passed to Page constructor via structure of pointers
            https://bugs.webkit.org/show_bug.cgi?id=42834

            * webkit/webkitwebview.cpp:
            (webkit_web_view_init):

    2010-07-26  Steve Block  <steveblock@google.com>

            Reviewed by Jeremy Orlow.

            Page clients should be passed to Page constructor via structure of pointers
            https://bugs.webkit.org/show_bug.cgi?id=42834

            * WebView.cpp:
            (WebView::initWithFrame):

    2010-07-26  Steve Block  <steveblock@google.com>

            Reviewed by Jeremy Orlow.

            Page clients should be passed to Page constructor via structure of pointers
            https://bugs.webkit.org/show_bug.cgi?id=42834

            * WebView.cpp:
            (wxWebView::Create):

    2010-07-26  Steve Block  <steveblock@google.com>

            Reviewed by Jeremy Orlow.

            Page clients should be passed to Page constructor via structure of pointers
            https://bugs.webkit.org/show_bug.cgi?id=42834

            * WebView/WebView.mm:
            (-[WebView _commonInitializationWithFrameName:groupName:usesDocumentViews:]):

    2010-07-26  Steve Block  <steveblock@google.com>

            Reviewed by Jeremy Orlow.

            Page clients should be passed to Page constructor via structure of pointers
            https://bugs.webkit.org/show_bug.cgi?id=42834

            * ewk/ewk_view.cpp:
            (_ewk_view_priv_new):

    2010-07-26  Steve Block  <steveblock@google.com>

            Reviewed by Jeremy Orlow.

            Page clients should be passed to Page constructor via structure of pointers
            https://bugs.webkit.org/show_bug.cgi?id=42834

            No new tests, refactoring only.

            * WebCore.exp.in:
            * page/Page.cpp:
            (WebCore::Page::Page):
            * page/Page.h:
            (WebCore::Page::PageClients::PageClients):
            * svg/graphics/SVGImage.cpp:
            (WebCore::SVGImage::dataChanged):

    2010-07-26  Steve Block  <steveblock@google.com>

           Reviewed by Jeremy Orlow.

           Page clients should be passed to Page constructor via structure of pointers
           https://bugs.webkit.org/show_bug.cgi?id=42834

           * WebKit2/WebProcess/WebPage/WebPage.cpp:
           (WebPage::WebPage):

2010-08-07  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7764466> Assertion failure in AnimationBase::updateStateMachine() trying to add page to home screen

        Merged ToT WebKit r63862.

    2010-07-21  Chris Marrin  <cmarrin@apple.com>

        Reviewed by Simon Fraser.

        Assertion failure in AnimationBase::updateStateMachine() coming out of paused state
        https://bugs.webkit.org/show_bug.cgi?id=37993

        Added logic to properly handle pausing and resuming when in the 
        AnimationStateStartWaitStyleAvailable state. This was causing an
        assert when going out of the pause state because the paused flag
        was not set.

        The fix is a straightforward implementation, going into a new
        AnimationStatePausedWaitStyleAvailable state and setting the paused
        flag (actually setting the m_pauseTime variable to something other
        than -1). Also added handling of the new state, both when the 
        "style available" callback comes in while in this state and when
        unpausing while in this state. 

        For now a LayoutTest is not possible since there's no way to go in
        and out of the pause state. I've opened https://bugs.webkit.org/show_bug.cgi?id=42790
        to track this.

        * page/animation/AnimationBase.cpp:
        (WebCore::AnimationBase::updateStateMachine):
        * page/animation/AnimationBase.h:
        (WebCore::AnimationBase::):

2010-08-07  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/8285125> iOS: First word on a line doesn’t hyphenate properly

        Merged TOT WebKit r64920.

    2010-08-07  Dan Bernstein  <mitz@apple.com>

        Reviewed by Anders Carlsson.

        <rdar://problem/8285090> First word on a line doesn’t hyphenate properly
        https://bugs.webkit.org/show_bug.cgi?id=43679

        Test: fast/text/hyphenate-first-word.html

        * rendering/RenderBlockLineLayout.cpp:
        (WebCore::tryHyphenating): The character at lastSpace is not necessarily a whitespace character
        before the current word. It can also be part of the word, such as when the word is the first
        one on the line. Include the charcater at lastSpace in the string passed to lastHyphenLocation().

2010-08-07  Dan Bernstein  <mitz@apple.com>

    <rdar://problem/8285101> Merge Open Source changes needed for color bitmap font support

    Merged TOT WebKit r64915, r64916 and r64926.

    2010-08-07  Dan Bernstein  <mitz@apple.com>

        Reviewed by Sam Weinig.

        Use ctFont() to get the CTFont.

        * platform/graphics/mac/FontMac.mm:
        (WebCore::showGlyphsWithAdvances):

    2010-08-07  Dan Bernstein  <mitz@apple.com>

        Build fix

        * platform/graphics/SimpleFontData.h:

    2010-08-07  Dan Bernstein  <mitz@apple.com>

        Reviewed by Anders Carlsson.

        Created a separate SimpleFontData constructor exclusively for SVG fonts and moved the CTFontRef
        from SimpleFontData to FontPlatformData.
        https://bugs.webkit.org/show_bug.cgi?id=43674

        * config.h: Moved definitions of WTF_USE_CORE_TEXT and WTF_USE_ATSUI from here to wtf/Platform.h.
        * css/CSSFontFaceSource.cpp:
        (WebCore::CSSFontFaceSource::getFontData): Use new SimpleFontData constructor for SVG fonts.
        * platform/graphics/SimpleFontData.cpp:
        (WebCore::SimpleFontData::SimpleFontData): Separated into two constructors, one for
        PlatformFontData-based fonts and one for SVG fonts.
        * platform/graphics/SimpleFontData.h: Moved the m_CTFont member variable and the getCTFont()
        accessor from here…
        * platform/graphics/mac/FontPlatformData.h: …to here, renaming the latter ctFont().
        * platform/graphics/mac/FontPlatformDataMac.mm:
        (WebCore::FontPlatformData::FontPlatformData): Copy m_CTFont.
        (WebCore::FontPlatformData::operator=): Copy m_CTFont.
        (WebCore::FontPlatformData::setFont): Clear m_CTFont.
        (WebCore::FontPlatformData::ctFont): Moved here from SimpleFontDataCoreText.cpp and renamed.
        * platform/graphics/mac/SimpleFontDataCoreText.cpp:
        (WebCore::SimpleFontData::getCFStringAttributes): Updated to use FontPlatformData::ctFont().
        * svg/SVGFontData.cpp:
        (WebCore::SVGFontData::SVGFontData): Added an assertion.

2010-08-07  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/8279408> Move some member variables around to reduce class sizes. (38961)

        Merged ToT WebKit r59197-r59198.

    2010-05-11  Anders Carlsson  <andersca@apple.com>

        Reviewed by Mark Rowe.

        https://bugs.webkit.org/show_bug.cgi?id=38961
        Move some member variables around to reduce class sizes.

        If a class inherits (directly or indirectly) from FastAllocBase, we don't want the first member variable
        of that class to also inherit (directly or indirectly) from FastAllocBase as this will add padding to the class
        and thus increasing its size.

        * css/CSSParserValues.h:
        * css/CSSSelector.h:
        (WebCore::CSSSelector::CSSSelector):
        (WebCore::CSSSelector::RareData::RareData):
        * platform/graphics/FontCache.cpp:
        (WebCore::FontPlatformDataCacheKey::FontPlatformDataCacheKey):

2010-08-07  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/8282609> Enable sandboxed iframes

        Reviewed by David Carson.

        * Configurations/FeatureDefines.xcconfig: Updated to enable
        sandboxed iframes for iOS WebKit.

2010-08-06  Joseph Pecoraro  <joepeck@webkit.org>

        Build fix for the previous. Forgot to remove some ifdefs
        which prevented a necessary an include from happening!

        * dom/ViewportArguments.cpp:

2010-08-06  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Carson.

        <rdar://problem/8283903> Assertion in WebCore::setViewportFeature with viewport device-width or height

        Revert Viewport handling of "device-width" and "device-height" to
        what is was before the Havoc merge (the Open Source implementation).

        The Open Source implementations uses the ChromeClient's windowRect
        for the "device-*" information. iOS has always gotten the screen
        size and special cases "classic" mode, when running an iPhone
        application half sized on the iPad.

        * dom/ViewportArguments.cpp:
        (WebCore::setViewportFeature):

2010-08-06  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/7597628> TLF: Enable auto-hyphenation

        Merged TOT WebKit r61548, r61552, r61629, r64677, r64682 and r64683.

    2010-08-04  Dan Bernstein  <mitz@apple.com>

        Build fix.

        * platform/text/mac/HyphenationMac.mm:
        (WebCore::lastHyphenLocation):


    2010-08-04  Dan Bernstein  <mitz@apple.com>

        Release build fix.

        * platform/text/mac/HyphenationMac.mm:
        (WebCore::lastHyphenLocation):


    2010-08-04  Dan Bernstein  <mitz@apple.com>

        Allow the language for hyphenation to be specified
        https://bugs.webkit.org/show_bug.cgi?id=43467

        Test: fast/text/hyphenate-locale.html

        Added a -webkit-hyphenate-locale property whose value can be either auto or a locale identifier
        string. The initial value is auto and the property is inherited. When the value is a locale
        identifier, hyphenation should follow the rules for the specified locale.

        * WebCore.xcodeproj/project.pbxproj: Added AtomicStringKeyedMRUCache.h.
        * css/CSSComputedStyleDeclaration.cpp:
        (WebCore::CSSComputedStyleDeclaration::getPropertyCSSValue): Handle -webkit-hyphenate-locale.
        Updated for the renaming of RenderStyle::hyphenateCharacter() to hyphenationString().
        * css/CSSParser.cpp:
        (WebCore::CSSParser::parseValue): Parse -webkit-hyphenate-locale.
        * css/CSSPropertyNames.in: Added -webkit-hyphenate-locale.
        * css/CSSStyleSelector.cpp:
        (WebCore::CSSStyleSelector::applyProperty): Apply the -webkit-hyphenate-locale property to the
        RenderStyle. Updated for the renaming of RenderStyle::hyphenateCharacter() to hyphenationString().
        * platform/text/AtomicStringKeyedMRUCache.h: Added.
        (WebCore::AtomicStringKeyedMRUCache::get):
        * platform/text/Hyphenation.cpp:
        (WebCore::canHyphenate): Added an implementation that returns false.
        (WebCore::lastHyphenLocation): Now asserts that it is not called, because it is an error to call
        this function if canHyphenate() returned false.
        * platform/text/Hyphenation.h:
        Added canHyphenate(). Returns true if hyphenation is possible for the given locale identifier.
        * platform/text/android/HyphenationAndroid.cpp:
        (WebCore::canHyphenate): Added an implementation that returns true and a FIXME.
        (WebCore::lastHyphenLocation): Added unused localeIdentifier parameter.
        * platform/text/cf/HyphenationCF.cpp:
        (WebCore::AtomicStringKeyedMRUCache<RetainPtr<CFLocaleRef> >::createValueForNullKey): Returns
        the CFLocaleRef for the current search locale.
        (WebCore::AtomicStringKeyedMRUCache<RetainPtr<CFLocaleRef> >::createValueForKey): Returns a
        CFLocaleRef for the locale identifier.
        (WebCore::canHyphenate): Added. Returns true.
        (WebCore::lastHyphenLocation): Added localeIdentifier parameter, used to pass a CFLocaleRef to
        the hyphenation function.
        * platform/text/mac/HyphenationMac.mm:
        (WebCore::AtomicStringKeyedMRUCache<bool>::createValueForNullKey): Returns whether the current
        search locale is english.
        (WebCore::AtomicStringKeyedMRUCache<bool>::createValueForKey): Returns whether the locale identifier
        string identifies locale with the English language.
        (WebCore::canHyphenate): Added. Returns true if the locale language is English.
        (WebCore::lastHyphenLocation): Added localeIdentifier parameter and an assertion that its language
        is English.
        * rendering/RenderBlockLineLayout.cpp:
        (WebCore::tryHyphenating): Added a locale identifier parameter, which is passed down to
        lastHyphenLocation(). Added 1 to the value passed for the beforeIndex parameter to lastHyphenLocation(),
        because the latter only returns values smaller than that index. The Mac implementation could
        return a value equal to beforeIndex, but that is fixed in the WebKitSystemInterface part of this patch.
        (WebCore::RenderBlock::findNextLineBreak): Only set canHyphenate to true if hyphenation is possible
        for the specified hyphenation locale. Pass the hyphenation locale to tryHyphenating().
        * rendering/style/RenderStyle.cpp:
        (WebCore::RenderStyle::diff): Compare hyphenation locales.
        (WebCore::RenderStyle::hyphenString): Updated for the renaming of hyphenateCharacter() to
        hyphenationString().
        * rendering/style/RenderStyle.h:
        (WebCore::InheritedFlags::hyphenationString): Renamed hyphenateCharacter() to this.
        (WebCore::InheritedFlags::hyphenationLocale): Added this accessor.
        (WebCore::InheritedFlags::setHyphenationString): Renamed setHyphenateCharacter() to this.
        (WebCore::InheritedFlags::setHyphenationLocale): Added this accessor.
        (WebCore::InheritedFlags::initialHyphenationString): Renamed initialHyphenateCharacter() to this.
        (WebCore::InheritedFlags::initialHyphenateLocale): Added. Returns the null atom, which represents a
        value of auto.
        * rendering/style/StyleRareInheritedData.cpp:
        (WebCore::StyleRareInheritedData::StyleRareInheritedData): Copy the hyphenation locale. Updated for
        rename.
        (WebCore::StyleRareInheritedData::operator==): Compare the hyphenation locales. Updated for rename.
        * rendering/style/StyleRareInheritedData.h:


    2010-06-22  Dan Bernstein  <mitz@apple.com>

        Reviewed by Anders Carlsson.

        <rdar://problem/8119403> REGRESSION (r61548): PLT is almost 1.5% slower, Google page cycler slower
        https://bugs.webkit.org/show_bug.cgi?id=41012

        * rendering/RenderBlockLineLayout.cpp:
        (WebCore::RenderBlock::computeHorizontalPositionsForLine): Removed a redundant statement that was
        left over in the original patch and resulted in double the calls to RenderText::width() here.
        (WebCore::RenderBlock::findNextLineBreak): Changed the order of evaluating conditions for a
        potential speedup.


    2010-06-21  Dan Bernstein  <mitz@apple.com>

        Release build fix

        * rendering/RenderBlockLineLayout.cpp:
        (WebCore::tryHyphenating):


    2010-06-21  Dan Bernstein  <mitz@apple.com>

        Reviewed by Darin Adler.

        CSS3: Implement the 'hyphens' and 'hyphenate-character' properties
        https://bugs.webkit.org/show_bug.cgi?id=10228

        Tests: fast/text/hyphenate-character.html
               fast/text/hyphens.html

        Added -webkit-hyphens and -webkit-hyphenate-character as specified in
        <http://www.w3.org/TR/2010/WD-css3-gcpm-20100608/#hyphenation>.

        * Android.mk: Added Hyphenation.cpp.
        * CMakeLists.txt: Ditto.
        * GNUmakefile.am: Added Hyphenation.{cpp,h}.
        * WebCore.base.exp: Exported wkGetHyphenationLocationBeforeIndex().
        * WebCore.gypi: Added Hyphenation.{cpp,h}.
        * WebCore.pro: Added Hyphenation.{cpp,h}.
        * WebCore.vcproj/WebCore.vcproj: Added Hyphenation.{cpp,h}.
        * WebCore.xcodeproj/project.pbxproj: Added Hyphenation.{cpp,h}.
        * css/CSSComputedStyleDeclaration.cpp:
        (WebCore::CSSComputedStyleDeclaration::getPropertyCSSValue): Added the -webkit-hyphenate-character
        and -webkit-hyphens cases.
        * css/CSSParser.cpp:
        (WebCore::CSSParser::parseValue): Validate values for the new properties.
        * css/CSSPrimitiveValueMappings.h:
        (WebCore::CSSPrimitiveValue::CSSPrimitiveValue): Added. Maps from a Hyphens value to an identifier.
        (WebCore::CSSPrimitiveValue::operator Hyphens): Added. Maps from an identifier to a Hyphens value.
        * css/CSSPropertyNames.in: Added -webkit-hyphenate-character and -webkit-hyphens.
        * css/CSSStyleSelector.cpp:
        (WebCore::CSSStyleSelector::applyProperty): Apply the new properties to the RenderStyle.
        * css/CSSValueKeywords.in:
        * platform/mac/WebCoreSystemInterface.h: Added wkGetHyphenationLocationBeforeIndex.
        * platform/mac/WebCoreSystemInterface.mm: Ditto.
        * platform/text/CharacterNames.h: Added the hyphen character.
        * platform/text/Hyphenation.cpp: Added.
        (WebCore::lastHyphenLocation): Added this default implementation for platforms that do not implement
        hyphenation yet. It calls notImplemented() and returns 0.
        * platform/text/Hyphenation.h: Added.
        * platform/text/cf/HyphenationCF.cpp: Added.
        (WebCore::lastHyphenLocation): Returns the last hyphenation location occurring in the given string before
        the given index. Uses the current search locale (which is based on the top language preference of the user)
        for hyphenation.
        * platform/text/mac/HyphenationMac.mm: Added.
        (WebCore::lastHyphenLocation): Returns the last hyphenation location occurring in the given string before
        the given index. Returns 0 if the current search locale is not "en", because the platform only knows how to
        hyphenate English.
        * rendering/BidiRun.h:
        (WebCore::BidiRun::BidiRun): Added a boolean member, m_hasHyphen, and initialized it to false in the constructor.
        * rendering/InlineBox.h:
        (WebCore::InlineBox::InlineBox): Renamed m_hasEllipsisBox to m_hasEllipsisBoxOrHyphen, because this bit is now
        shared by two subclass: RootInlineBox uses it for hasEllipsisBox(), while InlineTextBox uses it for hasHyphen().
        * rendering/InlineTextBox.cpp:
        (WebCore::adjustCharactersAndLengthForHyphen): Added this helper function to get the hyphen string from the style
        and return a UChar* and length for the concatenation of the given text with the hyphen string.
        (WebCore::InlineTextBox::selectionRect): If the selected range touches the end and the box has a hyphen,
        compute the width of the text with the hyphen string concatenated to it.
        (WebCore::InlineTextBox::paint): If the box has a hyphen, draw the text with the hyphen string concatenated to it.
        (WebCore::InlineTextBox::paintSelection): Similarly concatenate the hyphen string.
        * rendering/InlineTextBox.h:
        (WebCore::InlineTextBox::hasHyphen): Added this accessor.
        (WebCore::InlineTextBox::setHasHyphen): Ditto.
        * rendering/RenderBlock.h:
        * rendering/RenderBlockLineLayout.cpp:
        (WebCore::RenderBlock::constructLine): Copy the m_hasHyphen flag from the run to its text box.
        (WebCore::RenderBlock::computeHorizontalPositionsForLine): Add the width of the hyphen string when computing the
        width of a box that has a hyphen.
        (WebCore::RenderBlock::layoutInlineChildren): If the line was hyphenated, set the m_hasHyphen flag on the
        logically last run.
        (WebCore::tryHyphenating): Added this helper function which checks if a piece of text that does not fit on the
        line could be hyphenated such that the part before the hyphen, including the hyphen, would fit. Given the amount
        of space remaining on the line, it finds the longest prefix that can fit in the remaining space (which leaving room for
        the hyphen), and then checks for a hyphenation location within that prefix.
        (WebCore::RenderBlock::findNextLineBreak): In the 'hyphens: none' case, prevent line breaks at soft hyphens.
        In the 'hyphens: auto' case, try hyphenating when a word will not fit in the remaining space on the line.
        * rendering/RootInlineBox.cpp:
        (WebCore::RootInlineBox::detachEllipsisBox): Changed to use hasEllipsisBox() and setHasEllipsisBox().
        (WebCore::RootInlineBox::clearTruncation): Ditto.
        (WebCore::RootInlineBox::placeEllipsis): Ditto.
        (WebCore::RootInlineBox::paintEllipsisBox): Ditto.
        (WebCore::RootInlineBox::nodeAtPoint): Ditto.
        (WebCore::RootInlineBox::ellipsisBox): Ditto.
        * rendering/RootInlineBox.h:
        (WebCore::RootInlineBox::hasEllipsisBox): Added this accessor.
        (WebCore::RootInlineBox::setHasEllipsisBox): Ditto.
        * rendering/style/RenderStyle.cpp:
        (WebCore::RenderStyle::diff): Return a layout hint if the hyphens setting or hyphenate-character differs.
        (WebCore::RenderStyle::hyphenString): Added. For hyphenate-character: auto, returns the hyphen character.
        * rendering/style/RenderStyle.h:
        (WebCore::InheritedFlags::hyphens): Added this accessor.
        (WebCore::InheritedFlags::hyphenateCharacter): Ditto.
        (WebCore::InheritedFlags::setHyphens): Ditto.
        (WebCore::InheritedFlags::setHyphenateCharacter): Ditto.
        (WebCore::InheritedFlags::initialHyphens): Added. Returns HyphensManual.
        (WebCore::InheritedFlags::initialHyphenateCharacter): Added. Returns the null string, corresponding to
        a value of 'auto'.
        * rendering/style/RenderStyleConstants.h:
        Added a Hyphens enum.
        * rendering/style/StyleRareInheritedData.cpp:
        (WebCore::StyleRareInheritedData::StyleRareInheritedData): Initialize and copy the new members.
        (WebCore::StyleRareInheritedData::operator==): Compare the new members.
        * rendering/style/StyleRareInheritedData.h: Added two new members: hyphens and hyphenateCharacter.

2010-08-05  Joseph Pecoraro  <joepeck@webkit.org>

        Merged ToT WebKit r64397, r64398, r64399, r64400, r64403, r64428, r64612, r64613.

        <rdar://problem/8032000> Mobile Safari Application Cache Limited to 5MB

    2010-07-30  Joseph Pecoraro  <joepeck@webkit.org>

            Reviewed by David Kilzer.

            Limit ApplicationCache Total and Per-Origin Storage Capacity (Quotas)
            https://bugs.webkit.org/show_bug.cgi?id=40627

            Part 1 - Add Total and Per-Origin Quota Preferences.

            Allow the application cache total size to be a preference, and
            add a new preference for the default per-origin quota.

              Handle the per-origin quota in the global cacheStorage() object.
              The per-origin quota will be used in a later part, this just
              handles interaction with it from a client.

            * loader/appcache/ApplicationCacheStorage.cpp:
            (WebCore::ApplicationCacheStorage::setDefaultOriginQuota): setter
            (WebCore::ApplicationCacheStorage::ApplicationCacheStorage): default to "noQuota" on construction
            * loader/appcache/ApplicationCacheStorage.h:
            (WebCore::ApplicationCacheStorage::noQuota): constant to mean unlimited storage
            (WebCore::ApplicationCacheStorage::defaultOriginQuota): accessor

              Move around some exports around for Offline Web Applications.

            * WebCore.exp.in: Added OFFLINE_WEB_APPLICATIONS exports.

    2010-07-30  Joseph Pecoraro  <joepeck@webkit.org>

            Reviewed by David Kilzer.

            Limit ApplicationCache Total and Per-Origin Storage Capacity (Quotas)
            https://bugs.webkit.org/show_bug.cgi?id=40627

            Part 2 - Update Schema and enforce Per-Origin Quotas

            Added an "Origins" table to the application cache databases.
            This, like the Database's Origins table, is a list of origin
            and quota pairs. Origins records are added as soon as they are
            needed, and deleted only when the ApplicationCacheStorage is
            emptied. This means Origins records persist even after all
            caches for that origin may be deleted. The "CacheGroups" table
            now has a foreign key column "origin" which relates to the
            "Origins" table.

            To enforce the quotas, remaining quota space is checked at
            the start of update as an estimate and at the end before
            inserting. Currently, reaching the quota limit will simply
            cause an update error. A later part will provide a
            notification to the client to allow an action, and refactor
            the final quota limit check into a transaction.

              Respect the quota during the update process. And cause
              the update process to fail when the quota is reached.

            * loader/appcache/ApplicationCacheGroup.cpp: added loading counter, counts bytes as they load
            (WebCore::ApplicationCacheGroup::ApplicationCacheGroup):
            (WebCore::ApplicationCacheGroup::didReceiveData):
            (WebCore::ApplicationCacheGroup::didFinishLoading):
            (WebCore::ApplicationCacheGroup::checkIfLoadIsComplete):
            * loader/appcache/ApplicationCacheGroup.h: added security origin, based on the manifest URL
            (WebCore::ApplicationCacheGroup::origin): accessor

              Updates the schema of the database tables as described
              above. Handle other SQL operations such as checking the
              remaining space and inserting and deleting Origins records.

            * loader/appcache/ApplicationCacheStorage.cpp:
            (WebCore::ApplicationCacheStorage::quotaForOrigin): query for the quota of an origin, may return the default origin quota if it didn't exist.
            (WebCore::ApplicationCacheStorage::remainingSizeForOriginExcludingCache): calculate the remaining size in a quota for an origin, possibly excluding a cache.
            (WebCore::ApplicationCacheStorage::storeUpdatedQuotaForOrigin): persistent update.
            (WebCore::ApplicationCacheStorage::openDatabase): updated schema for CachesGroups, added new table Origins.
            (WebCore::ApplicationCacheStorage::empty): wipe Origins table as well.
            (WebCore::ApplicationCacheStorage::unknownQuota): constant to mean unknown quota

    2010-07-30  Joseph Pecoraro  <joepeck@webkit.org>

            Reviewed by David Kilzer.

            Limit ApplicationCache Total and Per-Origin Storage Capacity (Quotas)
            https://bugs.webkit.org/show_bug.cgi?id=40627

            Part 3 - Refactor storeNewestCache to allow Failure Reason Output

            Storing can result in an error in a number of reasons. Previously
            the reasons were global and binary and could be determined by
            checking ApplicationCacheStorage state. Now, with per-origin quotas
            a per-origin quota can cause a failure that is not in global state.
            Current failure reasons are:

              OriginQuotaReached = per-origin quota reached, no storage is allowed.
              TotalQuotaReached  = database quota reached, no storage is allowed.
              DiskOrOperationFailure = SQL error such as failed prepare or query. Not expected to happen.

            This part provides an implementation of storeNewestCache for those
            that care about the failure reason, and not just if it succeeded
            or not. This moves the final origin quota check into the transaction.

            * loader/appcache/ApplicationCache.h: style fix for forwarding headers.
            * loader/appcache/ApplicationCacheGroup.cpp:
            (WebCore::ApplicationCacheGroup::checkIfLoadIsComplete): move origin quota check into storeNewestCache's SQL transaction.
            * loader/appcache/ApplicationCacheStorage.cpp:
            (WebCore::ApplicationCacheStorage::storeNewestCache): old implementation calls the new implementation ignoring failure reason.
            (WebCore::ApplicationCacheStorage::storeNewestCache): new implementation provides a failure reason in case of failure.
            * loader/appcache/ApplicationCacheStorage.h:
            (WebCore::ApplicationCacheStorage::): added FailureReason enum and storeNewestCache allowing it.

    2010-07-30  Joseph Pecoraro  <joepeck@webkit.org>

            Reviewed by David Kilzer.

            Limit ApplicationCache Total and Per-Origin Storage Capacity (Quotas)
            https://bugs.webkit.org/show_bug.cgi?id=40627

            Part 4 - Client Notification when the Quota is Reached

            Notify the WebKit client when the per-origin quota is reached
            via a delegate method reachedApplicationCacheOriginQuota.

              Call the delegate method when the quota is reached.

            * loader/appcache/ApplicationCacheGroup.cpp:
            (WebCore::ApplicationCacheGroup::ApplicationCacheGroup):
            (WebCore::ApplicationCacheGroup::didFinishLoading):
            (WebCore::ApplicationCacheGroup::didReachOriginQuota):
            (WebCore::ApplicationCacheGroup::cacheUpdateFailedDueToOriginQuota):
            (WebCore::ApplicationCacheGroup::checkIfLoadIsComplete):
            (WebCore::ApplicationCacheGroup::scheduleReachedOriginQuotaCallback):
            * loader/appcache/ApplicationCacheGroup.h:

              Some minor refactoring to access more quota information
              without repeating code. Such as origin usage, and creating
              an origin record.

            * loader/appcache/ApplicationCacheStorage.cpp:
            (WebCore::ApplicationCacheStorage::usageForOrigin):
            (WebCore::ApplicationCacheStorage::storeUpdatedQuotaForOrigin):
            (WebCore::ApplicationCacheStorage::store):
            (WebCore::ApplicationCacheStorage::ensureOriginRecord):
            * loader/appcache/ApplicationCacheStorage.h:

              Boilerplate. Exports and definition of the delegate method.

            * WebCore.OfflineWebApplications.exp:
            * loader/EmptyClients.h:
            (WebCore::EmptyChromeClient::reachedApplicationCacheOriginQuota):
            * page/ChromeClient.h:

    2010-08-03  Joseph Pecoraro  <joepeck@webkit.org>

            Reviewed by David Kilzer.

            Limit ApplicationCache Total and Per-Origin Storage Capacity (Quotas)
            https://bugs.webkit.org/show_bug.cgi?id=40627

            Part 6 - LayoutTest and Cleanup

            Test: http/tests/appcache/origin-quota.html

            * loader/appcache/ApplicationCacheGroup.cpp:
            (WebCore::ApplicationCacheGroup::scheduleReachedOriginQuotaCallback): made synchronous, as asynchronously the cache group was deleted too soon.
            * loader/appcache/ApplicationCacheStorage.cpp:
            (WebCore::ApplicationCacheStorage::storeUpdatedQuotaForOrigin): all storing operations should force the database to be created if needed.

2010-08-05  Chris Marrin  <cmarrin@apple.com>

        Reviewed by Simon Fraser.

        <rdar://problem/7891743> Should take the web thread lock for the -display overrides in WebLayer and WebTiledLayer

        WebKit rendering code can be called from both the main thread (the thread doing
        the UI) and the Web thread (the thread that normally does all the rendering).
        We need to protect against this by taking the WebThread lock. Previous to this
        fix we were only taking the lock for WebTiledLayers because CA's tile rendering
        code could make the call from a different thread. That call was in -drawInContext
        because it was only trying to protect against the actual WebKit rendering code be
        re-entered. But the lock really needs to be taken in the -display call because
        there is additional logic in GraphicsLayer being call which also needs to be
        protected. Since -display ultimately calls -drawInContext, the locking logic was
        moved to -display.

        I am also using pthread_main_np() rather than !WebThreadIsCurrent() to avoid
        taking the lock when in the web thread. This avoids some edge cases that caused
        problems in other contexts (as suggested by Cameron Zwarich).

        * platform/graphics/mac/WebLayer.mm:
        (-[WebLayer display]):
        * platform/graphics/mac/WebTiledLayer.mm:
        (-[WebTiledLayer display]):
        (-[WebTiledLayer drawInContext:]):

2010-08-05  Joseph Pecoraro  <joepeck@webkit.org>

        <rdar://problem/8037314> WebScriptObject should provide a way to check for key existence

        Merged ToT WebKit r63763.

    2010-07-20  Joseph Pecoraro  <joepeck@webkit.org>

            Reviewed by Geoffrey Garen.

            WebScriptObject Should Allow Safely Checking For Key Existence
            https://bugs.webkit.org/show_bug.cgi?id=42613

            Test: platform/mac/fast/objc/webScriptObject-hasWebScriptKey.html

            Add private API "hasWebScriptKey" to check for key existence in
            a WebScriptObject. Like JavaScript's `in` syntax. This is intended
            to be made public eventually.

            * bindings/objc/WebScriptObject.mm:
            (-[WebScriptObject hasWebScriptKey:]):
            * bindings/objc/WebScriptObjectPrivate.h:

2010-08-05  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/8275644> REGRESSION (Havoc merge I): Assertion failure in JSC::Heap::registerThread() when running regression tests

        Reviewed by Pratik Solanki.

        * bindings/js/JSDOMWindowBase.cpp:
        (WebCore::JSDOMWindowBase::commonJSGlobalData): Don't set
        exclusiveThread on iOS since we don't run JavaScript exclusively
        on one thread, but instead allow it to be run on both the main
        thread (with the WebThread lock) and on the WebThread.

2010-08-05  Dan Bernstein  <mitz@apple.com>

        Reviewed by Dave Kilzer.

        <rdar://problem/8275753> REGRESSION (Havoc merge I): HYPHEN (and other characters) rendered as missing glyph in many fonts

        * platform/graphics/mac/FontCacheMac.mm:
        (WebCore::FontCache::getLastResortFallbackFont): On iOS, there is no provision for real system fallback,
        so don’t return Times and rely on system fallback to find a font with a glyph for the character. Instead,
        return the phone fallback font, which has maximal coverage. This was the behavior prior to the Havoc merge.

2010-08-05  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6645438> Merge Soil.xcconfig into Base.xcconfig

        Reviewed by David Carson.

        The BUILD_TYPE definitions don't need to be in a separate
        xcconfig file, so move them into Base.xcconfig.

        * Configurations/Base.xcconfig: Added BUILD_TYPE definitions
        from Soil.xcconfig.
        * Configurations/Soil.xcconfig: Removed.
        * Configurations/Version.xcconfig: Removed #include of
        Soil.xcconfig.
        * WebCore.xcodeproj/project.pbxproj: Removed references to
        Soil.xcconfig.

2010-08-04  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Kilzer.

        <rdar://problem/8262092> Safari Havoc Final merge broke iPad Web Inspector

        Give iOS access to the inspector's webView directly, so it can
        manage the webView directly, via InspectorController::inspectorPage.

        * WebCore.iPhone.exp: export InspectorController inspectorPage access.
        * inspector/InspectorClient.h:
        * inspector/InspectorController.cpp:
        (WebCore::InspectorController::inspectorPage):
        * inspector/InspectorController.h:
        * loader/EmptyClients.h: no inspector page for an empty client.
        (WebCore::EmptyInspectorClient::inspectorPage):

2010-08-04  David Kilzer  <ddkilzer@apple.com>

        Part 2 of 2: <rdar://problem/7781582> Merge WebKit with Safari Havoc Final/Safari Gemini

        Merged ToT WebKit r58930-r63936 from Safari Havoc and Gemini
        branches to iOS WebKit.

        870 files changed, 65193 insertions(+), 36489 deletions(-)

2010-08-03  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Kilzer.

        <rdar://problem/8268790> Warnings From check-for-webkit-framework-include-consistency

        * DerivedSources.make: removed duplicate DOM_CLASSES names.

2010-08-02  David Kilzer  <ddkilzer@apple.com>

        Part 1 of 2: <rdar://problem/7781582> Merge WebKit with Safari Havoc Final/Safari Gemini

        Merged ToT WebKit r54085-r58928 to iOS WebKit.

        The second part will merge commits on the Havoc and Gemini branches.

        45864 files changed, 1788569 insertions(+), 269116 deletions(-)

2010-07-31  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/8259163> iOS: Short documents may print a second blank page

        Merged TOT WebKit r64409.

    2010-07-30  Dan Bernstein  <mitz@apple.com>

        Reviewed by Darin Adler.

        <rdar://problem/8257783> Short documents may print a second blank page
        https://bugs.webkit.org/show_bug.cgi?id=43271

        Test: printing/stretch-to-view-height.html

        * WebCore.exp.in: Export Frame::forceLayoutForPagination(), replacing forceLayoutWithPageWidthRange().
        * page/Frame.cpp:
        (WebCore::Frame::setPrinting): Now takes a page width and height and a maximum shrink factor and passes
        them down to forceLayoutForPagination().
        * page/Frame.h:
        (WebCore::Frame::):
        * page/FrameView.cpp:
        (WebCore::FrameView::reset): Initialize m_pageHeight.
        (WebCore::FrameView::forceLayoutForPagination): Renamed forceLayoutWithPageWidthRange() to this and
        changed it to take a page width and height and a maximum shrink factor. Sets m_pageHeight, which is
        queried by RenderBox::calcHeight() during layout. If the given pageHeight is 0, m_pageHeight is set
        to the visible height, retaining the behavior before this change.
        * page/FrameView.h:
        (WebCore::FrameView::pageHeight): Added this accessor.
        * page/PrintContext.cpp:
        (WebCore::PrintContext::begin): Added a height parameter, used when calling setPrinting().
        (WebCore::PrintContext::end): Updated for setPrinting() changes.
        (WebCore::PrintContext::pageNumberForElement): Account for shrink-to-fit.
        (WebCore::PrintContext::pageProperty): Pass 0 for the height, retaining current behavior.
        (WebCore::PrintContext::numberOfPages): Account for shrink-to-fit.
        (WebCore::PrintContext::spoolAllPagesWithBoundaries): Pass the page width to begin().
        * page/PrintContext.h:
        * rendering/RenderBox.cpp:
        (WebCore::RenderBox::calcHeight): When printing, use FrameView::pageHeight() as the basis for
        viewport-relative heights.

2010-07-30  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Kilzer.

        <rdar://problem/8256238> Web Inspector: generate-inspector-html-with-extras should not be copied as a resource

        * WebCore.xcodeproj/project.pbxproj: Do not include the script in the WebCore target, so its not copied into the build.

2010-07-30  Justin Garcia  <justin.garcia@apple.com>

        Reviewed by David Kilzer.
        
        <rdar://problem/8137496> MobileMail hangs when creating a particular selection in a Radar email
        <rdar://problem/7739238> Mail hung while typing, spinning CPU (WebCore::findNextWordFromIndex)
        
        * platform/text/mac/TextBoundaries.mm: Fix the loop's termination condition.
        (WebCore::findNextWordFromIndex):

2010-07-28  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Carson.

        <rdar://problem/5688897> Follow-up to Web Inspector "Lite" for iPad

        Follow up fixes for Web Inspector usage.

        * loader/EmptyClients.h: this should not have been hidden behind the INSPECTOR guard.
        * svg/graphics/SVGImage.cpp:
        (WebCore::SVGImage::dataChanged): always provide an empty inspector client.

2010-07-27  David Kilzer  <ddkilzer@apple.com>

        Remove build trains and device names from source code

        Reviewed by Joseph Pecoraro.

        We don't want to leak build train names or device names in the
        open source dump, so fix them now.

        Searched for build train names:  Wildcat, Apex
        Searched for device names:  M68, N45, N82, N72, N88, N18, K48, N90, N81

        References were either removed, or build trains and device names
        were changed to marketing names ("Apex" to "iOS 4.0", "N90" to
        "iPhone 4").

        * page/iphone/FrameIPhone.mm:
        (WebCore::Frame::createDefaultFieldEditorDocumentStructure):
        * platform/graphics/cg/ImageSourceCG.cpp:
        (WebCore::ImageSource::createFrameAtIndex):
        * platform/graphics/mac/FontMac.mm:
        (WebCore::smileImage):
        * platform/graphics/transforms/TransformationMatrix.h:
        * platform/iphone/WebEvent.mm:
        (-[WebEvent initWithKeyEventType:withTimeStamp:withCharacters:withCharactersIgnoringModifiers:withModifiers:isRepeating:withKeyCode:isTabKey:withCharacterSet:]):
        * wak/WAKStringDrawing.mm:
        (applyEllipsisStyle):
        (-[NSString __web_drawInRect:withFont:ellipsis:alignment:letterSpacing:lineSpacing:includeEmoji:truncationRect:measureOnly:]):
        * wak/WKGraphics.mm:
        (imageResourcePath):

2010-07-26  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/8017320> Assertion failure at WebCore::DOMTimer::resume (this=0x15fea240) atWebCore/page/DOMTimer.cpp:244

        Reviewed by Cameron Zwarich and Pratik Solanki.

        When a page is loading, scrolling or zooming will suspend timers but won't pause on-going loading
        or document parsing.  At this point, when a new sub-frame is created, its pausedTimers flag will
        not be set even if the main frame is already in suspending state, and new timers installed in this
        frame are not suspended.  This will cause the assertion when user stops scrolling or zooming.

        The fix is to set pauseTimers flag for a frame if its parent frame is already in pausing state.

        * page/Frame.cpp:
        (WebCore::Frame::Frame):

2010-07-26  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/8234269> Streamline Inspector Source build phase script doesn't work on hardware builds

        Reviewed by Joseph Pecoraro.

        When WebCore is built by B&I, the BUILD_STYLE Xcode variable is
        not set for hardware builds.  This caused the build phase script
        to assume it was a Debug build and not run the
        combine-javascript-resources script.

        However, even if BUILD_STYLE was set, it wouldn't be exactly
        what this script expected (Debug, Release or Production).  For
        iOS, we define BUILD_TYPE for this very purpose.

        * WebCore.xcodeproj/project.pbxproj: Switched the Streamline
        Inspector Source build phase script to use BUILD_TYPE instead of
        BUILD_STYLE to check whether the current build is a debug build.

2010-07-23  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/6845619> Reset CoreLocation Warnings will not reset Geolocation warnings

        * platform/iphone/GeolocationServiceCoreLocation.mm:
        (-[GeoLocationManager start]): Check the authorization with new API prior to starting up CoreLocation.
        (-[GeoLocationManager sendLocation:]): No longer check the authorization here.

2010-07-23  Paul Knight  <pknight@apple.com>

        Reviewed by Joseph Pecoraro.

        <rdar://problem/7692971> Remove bad uses of !important from html.css

        Instead of using html.css to enforce padding on button elements, set the padding
        in the render theme's adjustButtonStyle. This way buttons that are sufficiently styled
        as defined by RenderTheme::isControlStyled can use custom padding values.

        * css/html.css: Remove !important padding styles.
        * rendering/RenderThemeIPhone.cpp:
        (WebCore::RenderThemeIPhone::adjustButtonStyle): Set the padding box of buttons in the render theme instead.

2010-07-23  Joseph Pecoraro  <joepeck@webkit.org>

        Rubber-Stamped by Greg Bolsinga.

        Production build fix.

        Do not rely on the streamline build phase to run to generate a new
        inspector.html. Use whatever is already available.

        * WebCore.xcodeproj/project.pbxproj: updated inject iOS inspector resources build phase.
        * inspector/generate-inspector-html-with-extras: improve error message.

2010-07-22  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Carson and Greg Bolsinga.

        <rdar://problem/5688897> Web Inspector "Lite" for iPad

        Added iOS Build Phase "Inject Inspector Extras for iOS" which
        will add the custom iphone files to the generated "inspector.html"
        file. This creates a new "inspector-iphone.html" file for use on
        the device. The original, "inspector.html" still exists.

          Added Build Phase and resources to inject.

        * WebCore.xcodeproj/project.pbxproj: added Build Phase.
        * inspector/front-end/iphone/iphone.css: Added.
        * inspector/front-end/iphone/iphone.js: Added.

          This script is used in the Build Phase. It generates a new
          html file and adds <script> and <link> references in the <head>
          to files in an inspector front-end subdirectory. This is meant
          to be generic if upstreamed.

        * inspector/generate-inspector-html-with-extras: Added.

2010-07-22  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Carson.

        <rdar://problem/5688897> Web Inspector "Lite" for iPad

        * Configurations/WebCore.xcconfig: no longer exclude some Inspector files.
        * WebCore.xcodeproj/project.pbxproj: allow "Copy Inspector Resources" and "Streamline Inspector" build phases to run.
        * inspector/InspectorController.h: accessor for the inspector's page object.
        (WebCore::InspectorController::inspectorPage):

2010-07-20  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/7751667> iOS: Text justification leaves too much space

        Merged TOT r63357.

    2010-07-14  Dan Bernstein  <mitz@apple.com>

        Reviewed by Simon Fraser.

        <rdar://problem/7759909> Certain text runs measure 1 pixel wider when measured as a whole than when measured piecewise
        https://bugs.webkit.org/show_bug.cgi?id=42279

        No test because the issue cannot be reproduced with standard fonts.

        Word- and run-rounding works by advancing ahead to the nearest integral width. As the total
        width accumulated becomes large, the float type’s low precision results in accumulated rounding
        error, sometimes crossing an integer. Consequently, word-rounding makes different decisions when
        measuring a multi-word run than when measuring its words individually. To work around this,
        word- and run-rounding are applied only to the width accumulated since the last rounding
        character.

        * platform/graphics/WidthIterator.cpp:
        (WebCore::WidthIterator::advance):
        * platform/graphics/mac/ComplexTextController.cpp:
        (WebCore::ComplexTextController::adjustGlyphsAndAdvances):

2010-07-20  Cameron Zwarich  <zwarich@apple.com>

        <rdar://problem/8207846> Text looks bad in landscape UIWebView with transparent background

        Reviewed by Greg Bolsinga.

        Our landscape-specific filtered antialiasing uses gamma-corrected blending, which
        doesn't work correctly with transparent layers.

        * platform/graphics/mac/WebLayer.mm:
        (+[WebLayer drawContents:WebCore::ofLayer:intoContext:]): Only enable the landscape-specific
        filtered antialiasing for opaque layers.
        * platform/iphone/TileCache.mm:
        (WebCore::TileCache::drawLayer): Ditto.

2010-07-19  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by David Carson.

        <rdar://problem/8207900> Assertion failure at WebCore::EventHandler::handleTouchEvent (this=0xd41c514, e=@0xbfffd8d4)

        Loosen up an ASSERT.

        * page/iphone/EventHandlerIPhoneTouch.cpp:
        (WebCore::EventHandler::handleTouchEvent): TouchPhaseMoved and TouchPhaseEnded are
        acceptable touch phases when a touch isn't already being tracked.

2010-07-18  Dmitry Gorbik  <dgorbik@apple.com>

        Reviewed by David Carson and Joseph Pecoraro.

        Changed the logic of text autosizing.
        Before we autosized _all_ the nodes where the parent had fixed height
        but its content overflowed. But now we only autosize nodes which are located deep
        enough (nesting depth is greater than some const) from them.

        Fixes:
        <rdar://problem/5161942> Text Autosizing: Overlapping text in Mobile Safari on CNN
        <rdar://problem/5165551> Text Autosizing: Cypress : Web page rendering issue (CNN) - QC 27263
        <rdar://problem/5166907> Text Autosizing: The list of films play at the SFIFF doesn't render properly
        <rdar://problem/5169827> Text Autosizing: truths.treehugger.com
        <rdar://problem/5177498> Text Autosizing: http://www.sportingrage.com renders incorrectly
        <rdar://problem/5944218> Text Autosizing: Issue on tweetscan.com
        <rdar://problem/6893117> Text Autosizing: New Google Finance page lays out incorrectly.
        <rdar://problem/7500877> Text Autosizing: overlapping text and images on www.lafiestarestaurant.net
        <rdar://problem/7776931> Text Autosizing: Overlapping text CA DMV web site (8A224)
        <rdar://problem/8044378> Text Autosizing: Overlapping text on seekingalpha.com
        <rdar://problem/8097219> Text Autosizing: Page on www.photogonia.com renders with overlapping text on iPhone

        Test: text-autosizing/overflow.html

        Added a new enum RenderObject::BlockContentHeightType, values are:
        0 - FixedHeight - the block has fixed height and content doesn't overflow
        1 - FlexibleHeight - the block has flexible height
        2 - OverflowHeight - the block has fixed height and the content overflows intentionally

        * rendering/RenderObject.cpp:
        (WebCore::RenderObject::traverseNext):
        (WebCore::includeNonFixedHeight):
        (WebCore::RenderObject::adjustComputedFontSizesOnBlocks):
        (WebCore::RenderObject::resetTextAutosizing):
        * rendering/RenderObject.h:

2010-07-16  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/8149004> A Mail with all supported fonts display and print an empty page

        Merged TOT WebKit r63556, r63570.

    2010-07-16  Dan Bernstein  <mitz@apple.com>

        Reviewed by Anders Carlsson.

        Refinement of r63556: moved the tab width computation back to Font, but added a
        SimpleFontData parameter.

        * platform/graphics/Font.h:
        (WebCore::Font::tabWidth):
        * platform/graphics/WidthIterator.cpp:
        (WebCore::WidthIterator::advance):
        * platform/graphics/mac/ComplexTextController.cpp:
        (WebCore::ComplexTextController::adjustGlyphsAndAdvances):

    2010-07-16  Dan Bernstein  <mitz@apple.com>

        Reviewed by Anders Carlsson.

        <rdar://problem/8198266> white-space: pre text containing tabs is not laid out correctly when the font lacks a space glyph
        https://bugs.webkit.org/show_bug.cgi?id=42437

        No test because none of the fonts available to DumpRenderTree are missing a space glyph.

        Changed the tab width computation to use the width of the space glyph from the font that has
        a space glyph, which may be a fallback font if the primary font lacks a space glyph.

        * platform/graphics/Font.h: Removed Font::tabWidth().
        * platform/graphics/WidthIterator.cpp:
        (WebCore::WidthIterator::advance):
        * platform/graphics/mac/ComplexTextController.cpp:
        (WebCore::ComplexTextController::adjustGlyphsAndAdvances):

2010-07-14  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/8190212> iOS: crash in FrameView::detachCustomScrollbars (41196)

        Merged ToT WebKit r63138.

    2010-07-12  Tony Chang  <tony@chromium.org>

        Reviewed by David Hyatt.

        crash in FrameView::detachCustomScrollbars
        https://bugs.webkit.org/show_bug.cgi?id=41196

        Test: scrollbars/hidden-iframe-scrollbar-crash.html

        * page/FrameView.cpp:
        (WebCore::FrameView::detachCustomScrollbars):

2010-07-14  Greg Bolsinga  <bolsinga@apple.com>

        Let Xcode 3.2.4 update the project file.

        Reviewed by Paul Knight.

        * WebCore.xcodeproj/project.pbxproj:

2010-07-14  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by David Carson & David Kilzer.

        Add debugging descriptions to WAK objects whose output is much like
        UIKit's -recursiveDescription.

        * wak/WAKScrollView.mm:
        (-[WAKScrollView description]):
        * wak/WAKView.h:
        * wak/WAKView.mm:
        (-[WAKView description]):
        (-[WAKView _appendDescriptionToString:atLevel:]):
        * wak/WAKWindow.h:
        * wak/WAKWindow.mm:
        (-[WAKWindow description]):
        (-[WAKWindow recursiveDescription]):

2010-07-13  Yongjun Zhang  <yongjun_zhang@apple.com>

        Reviewed by Justin Garcia.

        <rdar://problem/8140578> WebCore EXC_BAD_ACCESS (WebCore::Document::minimumLayoutDelay())

        iOS WebKit uses a timer to change the last character typed in a password field.  In this radar, if
        the user submits the username and password form right after she types the password, the timer is
        scheduled for 2 seconds and it might fire after the new page comes, depending on the network speed.

        When the new page arrives, the old page with the password field is put into page cache.  If the
        timer fires after this point, WebCore will hit the assertion because RenderText::setText() triggers
        a layout on the cached page, not on the current page.

        The fix is to ignore layout triggered by secure text timer when the page is already cached.  This
        won't affect restoring pages because password field value is not restorable in page cache.

        * rendering/RenderText.cpp:
        (WebCore::RenderText::secureLastCharacter):

2010-07-13  Eric Carlson  <eric.carlson@apple.com>

        Reviewed by Greg Bolsinga.

        <rdar://problem/7644023>
        On iOS, volumechange events are sent for media elements even though the volume isn't changed

        The media player framework has no API to change movie volume, so don't post 'volumechange'
        events when the volume and mute attributes are changed. Instead, post them when the media
        engine reports that the user has changed the volume.

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::setVolume): Don't call updateVolume or post volumechange event
        as JavaScript is not allowed to change volume to the call to the media engine will fail.
        (WebCore::HTMLMediaElement::setMuted): Ditto.
        (WebCore::HTMLMediaElement::updateVolume): Update m_volume and post volumechange notification
        when player volume is different than cached value.

        * platform/graphics/MediaPlayer.cpp:
        (WebCore::MediaPlayer::volumeChanged): Cache player volume.

        * platform/graphics/MediaPlayerPrivate.h:
        (WebCore::MediaPlayerPrivateInterface::volume): Add volume() method.

        * platform/graphics/iphone/MediaPlayerPrivateIPhone.mm:
        (WebCore::MediaPlayerPrivateiPhone::deliverNotification): Tell media player the volume
        has changed.

2010-07-12  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/8155465> iOS: Memory corruption with crash in RenderObject::containingBlock() (41373)

        Merged ToT WebKit r63048.

    2010-07-10  Dan Bernstein  <mitz@apple.com>

        Reviewed by Anders Carlsson.

        <rdar://problem/8153214> Continuation outlines in layers do not paint correctly

        Test: fast/inline/continuation-outlines-with-layers-2.html

        Continuation outlines are normally painted by the containing block. However, when the
        block and the inline are not enclosed by the same self-painting layer, the inline has to
        paint its own outlines. This was handled correctly only for the case where the inline had
        its own self-painting layer, but now when an ancestor inline had the self-painting layer.

        * rendering/InlineFlowBox.cpp:
        (WebCore::InlineFlowBox::paint): Instead of testing for having a self-painting layer, test
        whether any intermediate box between the inline and the containing block has a self-painting
        layer.
        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::paintObject): Ditto.
        * rendering/RenderObject.cpp:
        (WebCore::RenderObject::enclosingBoxModelObject): Added this utility method.
        * rendering/RenderObject.h:

2010-07-09  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/8177436> iOS: Crash in RenderObject::containingBlock when clearing selection in a display:none node. (41523)

        Merged ToT WebKit r62873.

    2010-07-02  Ojan Vafai  <ojan@chromium.org>

        Reviewed by Adam Barth.

        Crash in RenderObject::containingBlock when clearing selection in a display:none node.
        https://bugs.webkit.org/show_bug.cgi?id=41523

        updateStyleIfNeeded before clearing the selection in the RenderView. Otherwise,
        m_selectionStart and m_selectionEnd in RenderView point to garbage object.
        This fixes the crash because updateStyleIfNeeded clears the selection before
        clobbering nodes that contain the selection.

        Test: editing/selection/crash-on-clear-selection.html

        * editing/SelectionController.cpp:
        (WebCore::SelectionController::updateAppearance):

2010-07-06  Dmitry Gorbik  <dgorbik@apple.com>

        Reviewed by Joseph Pecoraro.

        Autosize list markers. They do not share style with text, so we have to do it separately.
        <rdar://problem/7258243> Text Autosizing: Second ordered list (<ol>) item always drawn too small

        Test: text-autosizing/lists.html

        * dom/Document.cpp:
        (WebCore::TextAutoSizingValue::adjustNodeSizes):

2010-07-07  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/8164504> iOS: <use> on <font-face> causes crashes, if SVGUseElement gets detached (41621)

        Merged ToT WebKit r62662.

    2010-07-06  Nikolas Zimmermann  <nzimmermann@rim.com>

        Reviewed by Dirk Schulze.

        <use> on <font-face> causes crashes, if SVGUseElement gets detached
        https://bugs.webkit.org/show_bug.cgi?id=41621

        Do not call removeFromMappedElementSheet() from the SVGFontFaceElement destructor,
        as that can potentially cause the element to be reattached while destructing.

        In order to fix the crash in the testcase, the order of calling the base-class detach
        method in SVGUseElement and the instance/shadow tree destruction has to be reversed,
        matching the order in removedFromDocument().

        Test: svg/custom/use-font-face-crash.svg

        * svg/SVGFontFaceElement.cpp:
        (WebCore::SVGFontFaceElement::~SVGFontFaceElement): Remove removeFromMappedElementSheet() call.
        * svg/SVGUseElement.cpp:
        (WebCore::SVGUseElement::detach): Reverse order of calling base-class detach method and instance/shadow tree destruction.

2010-07-06  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/8119094> "reply to this comment" on techdirt article brings up reply box very far from the link

        Reviewed by Simon Fraser.

        WebCore calculates getBoundingClientRect() and getClientRects() in viewport space.  In iPhone WebKit, however,
        view->visibleContentRect() returns the whole document rect, not the visible viewport rect.

        This patch uses view->actualVisibleContentRect() when calculating client rects for an element or a range, to match
        the way window.scrollBy and window.scrollTo is calculated.  We should revisit this when '<rdar://problem/6881737>
        visibleContentRect vs. actualVisibleContentRect' is properly addressed.

        * dom/Element.cpp:
        (WebCore::Element::getClientRects):
        (WebCore::Element::getBoundingClientRect):
        * dom/Range.cpp:
        (WebCore::adjustFloatQuadsForScrollAndAbsoluteZoom):

2010-07-06  Chris Fleizach  <cfleizach@apple.com>

        Reviewed by Greg Bolsinga.

        <rdar://problem/7890148> AX: too hard to hit test on the web for VoiceOver users
        Provides a mechanism so that accessibility code in UIKit can determine whether a hit test can select
        a better candidate than direct hit-testing provides.

        * accessibility/iphone/AccessibilityObjectWrapperIPhone.h:
        * accessibility/iphone/AccessibilityObjectWrapperIPhone.mm:
        (-[AccessibilityObjectWrapper accessibilityCanFuzzyHitTest]):
        (-[AccessibilityObjectWrapper accessibilityPostProcessHitTest:]):
        (-[AccessibilityObjectWrapper accessibilityHitTest:]):
        (-[AccessibilityObjectWrapper accessibilityElementRect]):

2010-07-06  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/8155457> iOS: Memory corruption with SVG <use> element (40994)

        Merged ToT WebKit r62482.

    2010-07-05  Nikolas Zimmermann  <nzimmermann@rim.com>

        Reviewed by Darin Adler.

        Memory corruption with SVG <use> element
        https://bugs.webkit.org/show_bug.cgi?id=40994

        Fix race condition in svgAttributeChanged. Never call svgAttributeChanged() from attributeChanged()
        when we're synchronizing SVG attributes. It leads to either unnecessary extra work being done or
        crashes. Especially together with <polyline>/<polygon> which always synchronize the SVGAnimatedPoints
        datastructure with the points attribute, no matter if there are changes are not. This should be
        furhter optimized, but this fix is sane and fixes the root of the evil races.

        Test: svg/custom/use-property-synchronization-crash.svg

        * svg/SVGElement.cpp:
        (WebCore::SVGElement::attributeChanged):

2010-07-05  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Kilzer.

        <rdar://problem/7963319> Crash in WebCore: WebCore::FontFallbackList::setPlatformFont

        Added logging to try and catch when the setPlatformFont issue
        arises and what might cause it. Add an early return to prevent
        crashing in the crashes we have seen.

        * platform/graphics/FontCache.cpp:
        (WebCore::FontCache::getCachedFontData):
        * platform/graphics/FontFallbackList.cpp:
        (WebCore::FontFallbackList::setPlatformFont):

2010-07-03  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/8152864> iOS: Narrow cast for span leads to divide by zero and crash in fixed table layout (40812)

        Merged ToT WebKit r61451.

    2010-06-18  Abhishek Arya  <inferno@chromium.org>

        Reviewed by Adam Barth.

        Convert column span from an unsigned short type to an unsigned int
        type. Fixes a divide-by-zero crash arising from using a zero colspan
        value coming from a narrow cast of an int to an unsigned short.
        https://bugs.webkit.org/show_bug.cgi?id=40812

        Test: fast/table/zero-colspan-crash.html

        * rendering/RenderTable.h: Change span from unsigned short to unsigned int.
        * rendering/RenderTableSection.cpp: Fix a compiler warning with comparing
          unsigned int with signed int. Value of an unsigned int here cannot be
          greater than maximum positive value of a signed int.
        (WebCore::RenderTableSection::addCell):

2010-07-02  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/8152788> iOS: Null-deref for missing mime-type in web archive (41082)

        Merged ToT WebKit r61781.

    2010-06-24  Brady Eidson  <beidson@apple.com>

        Reviewed by Sam Weinig.

        <rdar://problem/8044645> and https://bugs.webkit.org/show_bug.cgi?id=41082

        Webarchives will null main resource cause a repro crash.

        Test: webarchive/loading/mainresource-null-mimetype-crash.html

        * loader/archive/cf/LegacyWebArchive.cpp:
        (WebCore::LegacyWebArchive::createResource): Fail to create the archive resource if the main resource's
          mime type is null.

2010-07-02  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/8053341> iPhone: ZDI-CAN-784: Apple Webkit Rendering Counter Remote Code Execution Vulnerability (40032)

        Merged ToT WebKit r62271.

    2010-07-01  Justin Schuh  <jschuh@chromium.org>

        Reviewed by Dan Bernstein.

        Prevent crash on counter destruction
        https://bugs.webkit.org/show_bug.cgi?id=40032

        Added counter destruction to RenderWidget::destroy()

        Test: fast/css/counters/destroy-counter-crash.html

        * rendering/RenderWidget.cpp:
        (WebCore::RenderWidget::destroy):

2010-07-02  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7948059> iPhone: ZDI-CAN-766: SVG ForeignObject Rendering Layout Vulnerability

        Merged ToT WebKit r61667.

    2010-06-23  Nikolas Zimmermann  <nzimmermann@rim.com>

        Reviewed by Eric Seidel.

        Reproducible crash in com.apple.WebCore 0x01ed3784 WebCore::RenderLineBoxList::appendLineBox(WebCore::InlineFlowBox*) + 36
        https://bugs.webkit.org/show_bug.cgi?id=40953

        REGRESSION (r58209-58231): Memory corruption with invalid SVG
        https://bugs.webkit.org/show_bug.cgi?id=40173

        Fix several crashes, all related to <foreignObject> and/or invalid SVG documents.
        - Only allow <svg> nodes, as direct children of a <foreignObject>, not any other "partial" SVG content.
        - Assure to create RenderSVGRoot objects for <svg> nodes in <foreignObject>, treat them as "outermost SVG elements".
        - Never allow any partial SVG content to appear in any document. Only <svg> elements are allowed.

        Tests: svg/custom/bug45331.svg
               svg/foreignObject/disallowed-svg-nodes-as-direct-children.svg
               svg/foreignObject/no-crash-with-svg-content-in-html-document.svg
               svg/foreignObject/svg-document-as-direct-child.svg
               svg/foreignObject/svg-document-in-html-document.svg
               svg/foreignObject/text-tref-02-b.svg

        * dom/Element.cpp: Added childShouldCreateRenderer, with ENABLE(SVG) guards.
        (WebCore::Element::childShouldCreateRenderer): Only create a renderer for a SVG child, if we're a SVG element, or if the child is a <svg> element.
        * dom/Element.h: Added childShouldCreateRenderer, with ENABLE(SVG) guards.
        * svg/SVGForeignObjectElement.cpp:
        (WebCore::SVGForeignObjectElement::childShouldCreateRenderer): Disallow arbitary SVG content, only <svg> elements are allowed as direct children of a <foreignObject>
        * svg/SVGSVGElement.cpp:
        (WebCore::SVGSVGElement::isOutermostSVG): Be sure to create RenderSVGRoot objects for <svg> elements inside <foreignObject>

2010-07-01  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/8152028> DumpRenderTree: make window.ScrollBy and window.scrollTo work.

        Reviewed by David Kilzer

        Remove the lines where newDocumentOrigin set to oldDocumentOrigin before the new value
        is applied to WKView.

        * wak/WKScrollView.mm:
        (_WKScrollViewSetDocumentViewOrigin):

2010-07-01  Chris Fleizach  <cfleizach@apple.com>

        Reviewed by Greg Bolsinga.

        <rdar://problem/8131388> AX: WebKit doesn't expose the same info as UIKit for password fields, causing VO to give erroneous info

        Test: platform/iphone-simulator/accessibility/password-value.html

        * accessibility/AccessibilityObject.h:
        * accessibility/iphone/AccessibilityObjectIPhone.mm:
        (WebCore::AccessibilityObject::accessibilityPasswordFieldLength):
        * accessibility/iphone/AccessibilityObjectWrapperIPhone.mm:
        (-[AccessibilityObjectWrapper accessibilityValue]):

2010-06-29  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/8144645> iPhone: http://www.mav-start.hu/english/index.php make browsers crash (40828)

        Merged ToT WebKit r61709.

    2010-06-23  Abhishek Arya  <inferno@chromium.org>

        Reviewed by Kenneth Rohde Christiansen.

        Firing the onchange event on select which changes its size > 1 causes the select
        object to change from a menulist to a listbox. However, when propogating the events,
        we do a bad cast assuming the object will remain a menulist. Added proper checks to
        make sure we check the renderer after the onchange is fired and propogate the event
        based on correct object type.
        https://bugs.webkit.org/show_bug.cgi?id=40828

        Test: fast/events/select-onchange-crash.html

        * dom/SelectElement.cpp:
        (WebCore::SelectElement::setSelectedIndex):

2010-06-29  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/8092150> iPhone: crash when focus is changed while trying to focus next element (40407)

        Merged ToT WebKit r60984.

    2010-06-10  Tony Chang  <tony@chromium.org>

        Reviewed by Kent Tamura.

        crash when focus is changed while trying to focus next element
        https://bugs.webkit.org/show_bug.cgi?id=40407

        Test: fast/events/focus-change-crash.html

        * dom/Element.cpp:
        (WebCore::Element::focus):

2010-06-29  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/8053345> iPhone: ZDI-CAN-785: Apple Webkit SVG Floating Text Element Remote Code Execution Vulnerability (40033)

        Merged ToT WebKit r61044.

    2010-06-11  Abhishek Arya  <inferno@chromium.org>

        Reviewed by David Hyatt.

        Don't process floats if parent node is not a RenderBlock.
        https://bugs.webkit.org/show_bug.cgi?id=40033

        Test: svg/text/clear-floats-crash.svg

        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::clearFloats):

2010-06-29  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/8053308> iPhone: ZDI-CAN-782: Apple Webkit SVG First-Letter Style Remote Code Execution Vulnerability (40031)

        Merged ToT WebKit r61050.

    2010-06-10  Abhishek Arya  <inferno@chromium.org>

        Reviewed by Dave Hyatt.

        Do not render CSS Styles :first-letter and :first-line in a SVG text element context.
        https://bugs.webkit.org/show_bug.cgi?id=40031

        Test: svg/text/text-style-invalid.svg

        * rendering/RenderSVGText.cpp:
        (WebCore::RenderSVGText::firstLineBlock):
        (WebCore::RenderSVGText::updateFirstLetter):
        * rendering/RenderSVGText.h:

2010-06-29  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/8000906> iPhone: Memory Corruption in RenderBoxModelObject (39305)

        Merged ToT WebKit r61921.

    2010-06-25  Dan Bernstein  <mitz@apple.com>

        Reviewed by Sam Weinig.

        <rdar://problem/8000667> Certain text is repeated before and after a line break

        Test: fast/text/bidi-explicit-embedding-past-end.html

        * platform/text/BidiResolver.h:
        (WebCore::::createBidiRunsForLine): Committing explicit embedding past the end of the range
        creates BidiRuns up to the end of the range, so at that point, we can stop iterating.

2010-06-29  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7977219> iPhone: memory corruption (read random system memory) in RenderBlock(?) (38977)

        Merged ToT WebKit r62134.

    2010-06-29  Dan Bernstein  <mitz@apple.com>

        Reviewed by Darin Adler.

        <rdar://problem/7975842> Certain text is repeated after using splitText()

        Tests: fast/text/setData-dirty-lines.html
               fast/text/splitText-dirty-lines.html

        * dom/CharacterData.cpp:
        (WebCore::CharacterData::setData): Call RenderText::setTextWithOffset() rather than
        setText(), because only the former correctly dirties line boxes.
        * dom/Text.cpp:
        (WebCore::Text::splitText): Ditto.

2010-06-29  Justin Garcia  <justin.garcia@apple.com>

        Reviewed by Enrica.

        <rdar://problem/8133228> Misspelled word not marked with red underline if I press return after typing it

        iPhone has special code for boundary finding that needs to run after spaces and at the start
        of a new paragraph.  Checking for a new paragraph by checking that VisiblePosition::characterBefore()
        is a '\n' does not work because characterBefore() does not emit newlines like TextIterator, it
        simply looks at what's in the DOM, and paragraphs in the DOM are usually divs.

        Filed https://bugs.webkit.org/show_bug.cgi?id=41234 to make characterBefore() and characterAfter()
        match TextIterator, or to rename them to make the difference in behavior more obvious.

        * editing/TypingCommand.cpp:
        (WebCore::TypingCommand::markMisspellingsAfterTyping):
        * page/Frame.cpp:
        (WebCore::Frame::respondToChangedSelection):

2010-06-28  Dean Jackson  <dino@apple.com>

        Merge TOT r61933

        Note that I had to change the call to applyDeclarations because
        it doesn't yet have templated form in PEP.

    2010-06-25  Dean Jackson  <dino@apple.com>

            Reviewed by Simon Fraser.

            https://bugs.webkit.org/show_bug.cgi?id=41188
            Animations should not require 0% and 100% keyframes

            When we are generating the animation lists in CSSStyleSelector,
            rather than bail if we notice that "from" or "to" are missing, we
            now generate synthetic keyframes for those cases.

            Tests: animations/missing-from-to-transforms.html
                   animations/missing-from-to.html
                   WebCore/manual-tests/animation-with-transition.html

            * css/CSSStyleSelector.cpp:
            (WebCore::CSSStyleSelector::styleForKeyframe):
                    Moved individual keyframe generation into a new function.
            (WebCore::CSSStyleSelector::keyframeStylesForAnimation):
                    Call the new function above for regular keyframes, and
                    also check for missing keyframes and generate them if
                    necessary.
            * css/CSSStyleSelector.h:

2010-06-28  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/8063124> Assertion failure in StorageSyncManager when re-loading www.google.com after setting the simulator to "Simplified Chinese".

        Reviewed by Joself Pecoraro

        Use ASSERT(isMainThread() || pthread_main_np()) rather than ASSERT(isMainThread()) in iPhone port.

        No new tests.

        * storage/StorageSyncManager.cpp:
        (WebCore::StorageSyncManager::StorageSyncManager):
        (WebCore::StorageSyncManager::~StorageSyncManager):
        (WebCore::StorageSyncManager::close):
        (WebCore::StorageSyncManager::scheduleImport):
        (WebCore::StorageSyncManager::scheduleSync):

2010-06-26  Eric Carlson  <eric.carlson@apple.com>

        Reviewed by David Carson.

        <rdar://problem/7986617> autoplay should work on <video> in AdSheet

        If autoplay is allowed and playback has never started, trigger playback when the network
        state drops back to NETWORK_IDLE since that indicates the media engine has stopped
        buffering because it has validated the movie. On the desktop autoplay is triggered when
        the ready state reaches HAVE_ENOUGH_DATA, but that doesn't happen on the phone because we
        can't reach HAVE_ENOUGH_DATA until the movie begins buffering because playback has been
        requested.

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::setNetworkState):

2010-06-23  Chris Fleizach  <cfleizach@apple.com>

        Reviewed by Greg Bolsinga.

        <rdar://problem/7083845> iPhone VoiceOver ignores aria-pressed

        Test: platform/iphone-simulator/accessibility/aria-pressed-state.html

        * accessibility/iphone/AccessibilityObjectWrapperIPhone.mm:
        (-[AccessibilityObjectWrapper accessibilityTraits]):

2010-06-23  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by Pratik Solanki.

        <rdar://problem/7734460> Input fields claim to support "search" event but do not

        Wrap these IDL declarations with ENABLE_ON_SEARCH. Getting search to work is
        <rdar://problem/5459633>, and these can be removed then.

        * dom/Document.idl: Turn off the onsearch property.
        * dom/Element.idl: Ditto.
        * page/DOMWindow.idl: Ditto.
        * svg/SVGElementInstance.idl: Ditto.

2010-06-23  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/8108879> Limit simultaneous DNS prefetch request number (40852)

        Merged ToT WebKit r61435

    2010-06-18  Alexey Proskuryakov  <ap@apple.com>

            Reviewed by Geoff Garen.

            https://bugs.webkit.org/show_bug.cgi?id=40852
            <rdar://problem/8105498> Limit simultaneous DNS prefetch request number (40852)

            No change in functionality, so no tests.

            We still queue up to 64 names, but only make up to 8 requests at once. If there are names
            remaining in queue, we retry after a short timeout (which is easier than posting
            notifications from client callback).

            * platform/network/cf/DNSCFNet.cpp:
            (WebCore::DNSResolveQueue::add):
            (WebCore::DNSResolveQueue::fired):

2010-06-21  Cameron Zwarich  <zwarich@apple.com>

        <rdar://problem/8092276> Gradients in text fields print as solid black

        Reviewed by Paul Knight.

        In my fairly exhaustive testing, this only happens for text fields. Other form
        elements have their gradients converted to white. This is due to the alpha in
        the gradients and deficiencies in the PDF compositing model.

        * rendering/RenderThemeIPhone.cpp:
        (WebCore::RenderThemeIPhone::paintTextFieldDecorations): Don't paint the gradient when printing.

2010-06-21  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/5817920> execCommand("Copy") and ("Cut") can overwrite the pasteboard without user interaction (27751)

        Merged ToT WebKit r58703

    2010-05-03  Abhishek Arya  <inferno@chromium.org>

            Reviewed by Adam Barth.

            Add support for controlling clipboard access from javascript.
            Clipboard access from javascript is disabled by default.
            https://bugs.webkit.org/show_bug.cgi?id=27751

            Test: editing/execCommand/clipboard-access.html

            * WebCore.base.exp:
            * editing/EditorCommand.cpp:
            (WebCore::supportedCopyCut):
            (WebCore::supportedPaste):
            (WebCore::createCommandMap):
            * page/Settings.cpp:
            (WebCore::Settings::Settings):
            (WebCore::Settings::setJavaScriptCanAccessClipboard):
            * page/Settings.h:
            (WebCore::Settings::javaScriptCanAccessClipboard):

2010-06-18  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by Aaron Golden.

        <rdar://problem/8103049> 8A293 MobileSafari crashes in WebCore when dismissing serpentinesf.com's map (WebCore::RenderObject::localToContainerQuad)

        * dom/DocumentIPhone.cpp:
        (WebCore::Document::eventRectRelativeToRoot): Check for a 0 Renderer* before proceeding.

2010-06-18  Justin Garcia  <justin.garcia@apple.com>

        <rdar://problem/8004202> When switching from an RTL language to an LTR language, caret stays right-aligned

        Merged open source r61418.

    2010-06-18  Justin Garcia  <justin.garcia@apple.com>

        Reviewed by Ojan Vafai.

        https://bugs.webkit.org/show_bug.cgi?id=39798
        No selection change notification for editing operation that doesn't change the selection's DOM position

        Some editing operations change the selection visually without affecting its position within
        the DOM.  This was previously known to occur for certain typing commands, but it can also
        occur for some Pastes and changes to block style.

        * editing/Editor.cpp:
        (WebCore::Editor::appliedEditing):
        (WebCore::Editor::unappliedEditing):
        (WebCore::Editor::reappliedEditing):
        (WebCore::Editor::changeSelectionAfterCommand):
        * editing/Editor.h:

2010-06-17  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by David Carson.

        <rdar://problem/7992497> REGR: Ending one touch ends all touches (JavaScript Touch)

        Basically this now pays attention to the touch's phase. The bug was that in GSEvents,
        'end' did not happen until every finger lifted. In UITouchEvents / UIGestureRecognizers,
        'end' happens for each finger lifting. What the code used to do was end every touch when
        and 'end' happened. It now tracks for each finger. Since some touches may not be touching
        the screen that are in the touches passed in, we cannot use the raw touch count to count
        what touches are touching the screen. This affected calculating gesture events in particular.

        * page/iphone/EventHandlerIPhoneTouch.cpp:
        (WebCore::EventHandler::handleTouchEvent):

2010-06-17  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by David Carson.

        <rdar://problem/7992497> REGR: Ending one touch ends all touches (JavaScript Touch)

        Rename -[WebEvent gestureChanged] to -[WebEvent isGesture] and PlatformTouchEvent::gestureChanged()
        to PlatformTouchEvent::isGesture() for clarity.

        * page/iphone/EventHandlerIPhoneTouch.cpp:
        (WebCore::EventHandler::handleTouchEvent):
        * platform/PlatformTouchEvent.h:
        (WebCore::PlatformTouchEvent::isGesture):
        * platform/iphone/PlatformTouchEventIPhone.mm:
        (WebCore::PlatformTouchEvent::PlatformTouchEvent):
        * platform/iphone/WebEvent.h:
        * platform/iphone/WebEvent.mm:
        (-[WebEvent initWithTouchEventType:withTimeStamp:withLocation:withTouchCount:withTouchLocations:withTouchGlobalLocations:withTouchIdentifiers:withTouchPhases:isGesture:withGestureScale:withGestureRotation:]):
        (-[WebEvent _eventDescription]):
        (-[WebEvent isGesture]):

2010-06-17  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by David Carson.

        <rdar://problem/7992497> REGR: Ending one touch ends all touches (JavaScript Touch)

        In GSEvents, the end happened when no touches were happening. This is not true with
        UIGestureRecognizers. So we need to pass the UITouchPhase for each finger into WebCore.
        This change adds the TouchPhase to the WebEvent and PlatformTouchEvent. Nothing uses this
        touch phase yet, so that build dependencies are not introduced.

        * platform/PlatformTouchEvent.h:
        (WebCore::):
        (WebCore::PlatformTouchEvent::touchPhaseAtIndex):
        * platform/iphone/PlatformTouchEventIPhone.mm:
        (WebCore::PlatformTouchEvent::PlatformTouchEvent):
        * platform/iphone/WebEvent.h:
        * platform/iphone/WebEvent.mm:
        (-[WebEvent initWithTouchEventType:withTimeStamp:withLocation:withTouchCount:withTouchLocations:withTouchGlobalLocations:withTouchIdentifiers:withGestureChanged:withGestureScale:withGestureRotation:]):
        (-[WebEvent initWithTouchEventType:withTimeStamp:withLocation:withTouchCount:withTouchLocations:withTouchGlobalLocations:withTouchIdentifiers:withTouchPhases:withGestureChanged:withGestureScale:withGestureRotation:]):
        (-[WebEvent dealloc]):
        (-[WebEvent _touchPhaseDescription:]):
        (-[WebEvent _touchPhasesDescription]):
        (-[WebEvent _eventDescription]):
        (-[WebEvent touchPhases]):

2010-06-16  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/8010589> iPhone: Reproducible font-related crash when loading Google Web Fonts page in background tab

        Merged ToT WebKit r59876, and modified the patch to exclude changes in RenderProgress.h because it doesn't exist in PEP WebKit yet.

    2010-05-20  Dan Bernstein  <mitz@apple.com>

            Reviewed by Dave Hyatt.

            <rdar://problem/8007953> Textarea using custom font appears blank

            Test: fast/css/font-face-in-shadow-DOM.html

            When a remote font is loaded, CSSFontSelector forces a style recalc, which replaces all
            RenderSyles that have FontFallbackLists referencing the placeholder font with fresh
            RenderStyles. However, it does not descend into shadow DOM trees, so those may end up with
            styles that still reference the placeholder font.

            The fix is to add RenderObject::requiresForcedStyleRecalcPropagation() and have it return
            true from renderers that maintain shadow DOM trees or otherwise keep their own RenderStyles.

            * dom/Element.cpp:
            (WebCore::Element::recalcStyle): Check if forced style recalc needs to propagated.
            * rendering/RenderButton.h:
            (WebCore::RenderButton::requiresForcedStyleRecalcPropagation):
            * rendering/RenderDataGrid.h:
            (WebCore::RenderDataGrid::requiresForcedStyleRecalcPropagation):
            * rendering/RenderFileUploadControl.h:
            (WebCore::RenderFileUploadControl::requiresForcedStyleRecalcPropagation):
            * rendering/RenderListItem.h:
            (WebCore::RenderListItem::requiresForcedStyleRecalcPropagation):
            * rendering/RenderMedia.h:
            (WebCore::RenderMedia::requiresForcedStyleRecalcPropagation):
            * rendering/RenderMenuList.h:
            (WebCore::RenderMenuList::RenderMenuList::requiresForcedStyleRecalcPropagation):
            * rendering/RenderObject.h:
            (WebCore::RenderObject::requiresForcedStyleRecalcPropagation):
            * rendering/RenderProgress.h:
            (WebCore::RenderProgress::requiresForcedStyleRecalcPropagation):
            * rendering/RenderSlider.h:
            (WebCore::RenderSlider::requiresForcedStyleRecalcPropagation):
            * rendering/RenderTextControl.h:
            (WebCore::RenderTextControl::requiresForcedStyleRecalcPropagation):

2010-06-15  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/7531991> iPhone: https servers shouldn't be able to store no-store pages from other servers (33456)

        Merged ToT WebKit r58433

    2010-04-28  Abhishek Arya  <inferno@chromium.org>

            Reviewed by Alexey Proskuryakov.

            Added a check to make sure that resources from a different https origin are not cached.
            https://bugs.webkit.org/show_bug.cgi?id=33456

            Test: http/tests/appcache/different-https-origin-resource-main.html

            * loader/appcache/ManifestParser.cpp:
            (WebCore::parseManifest):

2010-06-15  Dan Bernstein  <mitz@apple.com>

        <rdar://problem/7838897> Respect CSS column breaks and page breaks in content

        Merged TOT WebKit r54929, r55067, r61065.

    2010-06-12  Dan Bernstein  <mitz@apple.com>

        Reviewed by Dave Hyatt.

        <rdar://problem/7882140> -webkit-column-break-* properties don’t do anything
        https://bugs.webkit.org/show_bug.cgi?id=40531

        Test: fast/multicol/break-properties.html

        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::paintChildren): Check for -webkit-column-break-{before,after}: always
        and -webkit-column-break-inside: avoid when doing column layout.

    2010-02-17  Yuzo Fujishima  <yuzo@google.com>

        Reviewed by Eric Seidel.

        When page-break-{after,before} is set to always, force page breaks even for overflow-specified elements.
        RenderBlock::inRootBlockContext() was introduced by Changeset 5611. Although it is a reasonable criteria for choosing an optional page break location, it is not for a mandatory page break as specified by http://dev.w3.org/csswg/css3-page/#forced-pg-brk. The method is removed because it is not used anywhere else.
        Note: this patch makes page break work for overflow-specified elements. For tables and floated elements, more work is needed.
        https://bugs.webkit.org/show_bug.cgi?id=9526

        Test: printing/page-break-always-for-overflow.html

        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::paintChildren):
        * rendering/RenderBlock.h:

    2010-02-07  Hayato Ito  <hayato@chromium.org>

        Reviewed by Eric Seidel.

        Support CSS page-break-inside with a value of 'avoid'.

        https://bugs.webkit.org/show_bug.cgi?id=34080

        Test: printing/page-break-inside.html

        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::paintChildren):

2010-06-14  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/8010497> iPhone: Geolocation event fires after document is deleted (39388)

        Merged ToT WebKit r59859

    2010-05-20  Marcus Bulach  <bulach@chromium.org>

            Reviewed by Steve Block.

            Ensure timers are stopped on Geolocation::disconnectFrame()
            https://bugs.webkit.org/show_bug.cgi?id=39388

            fast/dom/Geolocation/notimer-after-unload.html, plus it should be possible to re-enable Gtk LayoutTests.

            * page/Geolocation.cpp:
            (WebCore::Geolocation::disconnectFrame):

2010-06-14  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/7948126> iPhone: ZDI-CAN-765: CSS Charset Text Transformation Vulnerability

        Merged ToT WebKit r59795

    2010-05-19  Abhishek Arya  <inferno@chromium.org>

            Reviewed by David Hyatt.

            Check that the node is a text node before doing a static cast
            to a Text class pointer.
            https://bugs.webkit.org/show_bug.cgi?id=38626

            Test: fast/text/text-transform-nontext-node-crash.xhtml

            * rendering/RenderText.cpp:
            (WebCore::RenderText::originalText):
            * rendering/RenderTextFragment.cpp:
            (WebCore::RenderTextFragment::originalText):
            (WebCore::RenderTextFragment::previousCharacter):

2010-06-11  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/7992912> iPhone: HTTP 307 after a 303 after a POST re-sends POST data from the original request (Using Facebook OAuth leads to disclosure of Facebook passwords.)

        Merged ToT WebKit r55157

    2010-02-23  Brady Eidson  <beidson@apple.com>

            Reviewed by Alexey Proskuryakov.

            HTTP 307 after a 303 after a POST re-sends POST data from the original request.
            <rdar://problem/7390251> and https://bugs.webkit.org/show_bug.cgi?id=31410

            Test: http/tests/loading/307-after-303-after-post.html

            Remember the last HTTP method send out during a redirect chain for a resource handle:
            * platform/network/ResourceHandle.cpp:
            (WebCore::ResourceHandle::lastHTTPMethod):
            * platform/network/ResourceHandle.h:
            * platform/network/ResourceHandleInternal.h:
            (WebCore::ResourceHandleInternal::ResourceHandleInternal):

            Refer to the last HTTP method used instead of the original method:
            * platform/network/cf/ResourceHandleCFNet.cpp:
            (WebCore::willSendRequest):
            (WebCore::ResourceHandle::willSendRequest):
            * platform/network/mac/ResourceHandleMac.mm:
            (WebCore::ResourceHandle::willSendRequest):
            (-[WebCoreResourceHandleAsDelegate connection:willSendRequest:redirectResponse:]):

2010-06-11  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/7914983> iPhone: Manipulating document fragment members while adding it to tree may result in loss of tree integrity. (36031)

        Merge ToT WebKit r57839

    2010-04-08  Dimitri Glazkov  <dglazkov@chromium.org>

            Reviewed by Darin Adler.

            Manipulating document fragment members while adding it to tree may result in loss of tree integrity.
            https://bugs.webkit.org/show_bug.cgi?id=36031

            Changes the logic of appending/inserting document fragment to first stashing all of its children
            to a vector, then processing the vector. This avoids ghastliness that would be caused by mutation
            events mucking with the document fragment while it's being appended/inserted.

            Test: fast/dom/Node/fragment-mutation.html

            * dom/ContainerNode.cpp:
            (WebCore::targetNodes): Added method to populate a vector of nodes (targets) to be used in
                inserting/appending operation.
            (WebCore::ContainerNode::insertBefore): Changed to use vector-based iteration.
            (WebCore::ContainerNode::appendChild): Ditto.
            * dom/Node.cpp:
            (WebCore::Node::checkReplaceChild): Cleaned up comments.
            (WebCore::Node::checkAddChild): Ditto.

2010-06-09  Cameron Zwarich  <zwarich@apple.com>

        <rdar://problem/8059574> UIWebDocumentView Printing: Hyperlink underlines mis-aligned

        Reviewed by David Carson

        * platform/graphics/cg/GraphicsContextCG.cpp:
        (WebCore::GraphicsContext::GraphicsContext): Add a printing path for underline drawing.

2010-06-08  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/7022218> iPhone: focus() behavior permits keystrokes to be redirected across domains (26824)

        Merged ToT WebKit r58829

    2010-05-05  Alexey Proskuryakov  <ap@apple.com>

            Reviewed by Adele Peterson.

            https://bugs.webkit.org/show_bug.cgi?id=26824
            <rdar://problem/7018610> EventHandler can operate on a wrong frame if focus changes during
            keyboard event dispatch.

            EventHandler object is tied to a frame, so it's wrong for it to continue processing a keyboard
            event if focused frame changes between keydown and keypress.

            * manual-tests/focus-change-between-key-events.html: Added.

            * page/EventHandler.cpp: (WebCore::EventHandler::keyEvent): Bail out early if focused frame
            changes while dispatching keydown. Also made similar changes for Windows to maintain matching
            behavior, even though EventHandler was re-entered anyway due to WM_KEYDOWN and WM_CHAR being
            separate events.

2010-06-05  Dan Bernstein  <mitz@apple.com>

        Reviewed by Dave Kilzer.

        <rdar://problem/8064070> Disable text autosizing when printing

        No test because printing is not supported yet in the OS.

        * page/FrameView.cpp:
        (WebCore::FrameView::layout): Skip autosizing when printing.

2010-06-04  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/7624870> iPhone: WebCore crashes when element is removed from within 2-dimensional mouse wheel event handler. (34700)

        Merged ToT WebKit r55436, r55737, r55739

    2010-03-09  Andy Estes  <aestes@apple.com>

            Reviewed by Adele Peterson.

            Check for null renderer in scrollNode().
            https://bugs.webkit.org/show_bug.cgi?id=34700

            Test: fast/events/remove-child-onscroll.html

            * page/EventHandler.cpp:
            (WebCore::scrollNode): Return early if node->renderer() == 0

    2010-03-09  Andy Estes  <aestes@apple.com>

            Reviewed by Adele Peterson.

            Check for null renderer in scrollNode().
            https://bugs.webkit.org/show_bug.cgi?id=34700

            Test: fast/events/remove-child-onscroll.html

            * page/EventHandler.cpp:
            (WebCore::scrollNode): Return early if node->renderer() == 0

    2010-02-10  Andy Estes  <aestes@apple.com>

            Reviewed by Maciej Stachowiak.

            Add the capability to create and dispatch a WheelEvent in JavaScript.
            Ensure the event's default handler is triggered in the same way as it is
            during a PlatformWheelEvent.

            https://bugs.webkit.org/show_bug.cgi?id=35566

            Test: fast/events/wheelevent-in-scrolling-div.html

            * dom/Node.cpp: Ensure that the default behavior (scrolling) occurs for
            wheel events originating both from the platform and from
            JavaScript/ObjC.
            (WebCore::Node::dispatchWheelEvent): Instantiate new WheelEvent with
            the graunularity of the PlatformWheelEvent.
            (WebCore::Node::defaultEventHandler): Add support for mousewheel events.
            * dom/WheelEvent.cpp: Add three new member variables: m_deltaX, m_deltaY
            and m_granularity.  m_deltaX and m_deltaY differ from m_wheelDeltaX and
            m_wheelDeltaY, which are the number of wheel ticks multiplied by 120 for
            IE compatibility.
            (WebCore::WheelEvent::WheelEvent): Initialize new member variables.
            (WebCore::WheelEvent::initWheelEvent): Same.
            (WebCore::WheelEvent::initWebKitWheelEvent): Same.
            * dom/WheelEvent.h: See WheelEvent.cpp.
            (WebCore::WheelEvent::): Add Granularity enum (Pixel, Line, Page).
            (WebCore::WheelEvent::create): Add new arguments.
            (WebCore::WheelEvent::deltaX): Amount of scroll in x direction.
            (WebCore::WheelEvent::deltaY): Amount of scroll in y direction.
            (WebCore::WheelEvent::granularity): Units of deltaX and deltaY.
            * dom/WheelEvent.idl: Add initWebKitWheelEvent() to JavaScript.  This is
            the same as the initWheelEvent ObjC method.  As the DOM Level 3 Events
            specification is still a working draft and subject to change, prefix
            'WebKit' to the method signature to indicate experimental support.
            * page/EventHandler.cpp: Move the scroll handling from
            handleWheelEvent() to defaultWheelEventHandler(), which is executed on
            both PlatformWheelEvents and JavaScript WheelEvents.
            (WebCore::scrollNode): Renamed from scrollAndAcceptEvent().  Remove
            the PlatformWheelEvent from the argument list and instead return a
            boolean indicating if the scroll event was accepted.
            (WebCore::EventHandler::handleWheelEvent): Move scrolling code from here
            (WebCore::EventHandler::defaultWheelEventHandler): ...to here.
            * page/EventHandler.h: Add function signature.

2010-06-04  Chris Fleizach  <cfleizach@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/8064072> AX: allow internal links to be returned

        Test: platform/iphone-simulator/accessibility/internal-link.html

        * accessibility/AccessibilityRenderObject.cpp:
        (WebCore::AccessibilityRenderObject::internalLinkElement):
        * accessibility/iphone/AccessibilityObjectWrapperIPhone.mm:
        (-[AccessibilityObjectWrapper accessibilityLinkedElement]):

2010-06-03  Cameron Zwarich  <zwarich@apple.com>

        <rdar://problem/8054626> GUIMark2 should run faster on iPhone OS

        Reviewed by David Carson.

        * page/FrameView.cpp:
        (WebCore::FrameView::repaintContentRectangle): Roll out an accidental commit of a
        debugging change from r225661.

2010-06-01  Yongjun Zhang  <yongjun_zhang@apple.com>

        Reviewed by David Kilzer

        <rdar://problem/8021123> [Apex8A285] safari overlaying form button inside textarea

        The fix disables text autosizing for textareas.

        Text autosizing adjusts font sizes for multiline paragraphs. When editing textarea,
        if there is only one line of text, text autosizing won't be applied.  When a second
        line is added, it triggers autosizing and applies a different font size to all text
        lines.  This results in reflow of text lines and change of textarea's height.  We
        already disabled text autoresizing for input text field, but not for textarea.

        Test: platform/iphone-simulator/iphone/fast/html/textarea-auto-sizing-disable.html

        * rendering/RenderBlock.cpp:
        (WebCore::resizeTextPermitted):

2010-05-27  Cameron Zwarich  <zwarich@apple.com>

        <rdar://problem/7240335> Underline (underscore) bars are drawn too thick sometimes

        Reviewed by David Kilzer.

        This fixes all known issues with underline drawing:

        1) On the iPad in landscape, the default viewport width is 980, but the screen size
        is 1024, giving a zoom scale that is slightly above 1. The existing code would draw
        a line of 1.0 height in user coordinates without antialiasing, which is close to using
        a ceil for the height when drawing the line in device coordinates. The proper thing
        to do is to transform the line to device coordinates, round its height, and then convert
        that line back to user coordinates.

        2) Sometimes, the thickness of lines is inconsistent on the same page at a particular
        zoom scale. This is also because we are relying on the line drawing code to round the
        height of the line for us instead of doing it ourselves.

        3) Sometimes, lines are drawn at the wrong vertical position. This appears to be because
        there is a translation in the CTM that is not taken into account by the existing code that
        only uses the scale. This defeats the purpose of converting to device space and rounding.

        * platform/graphics/cg/GraphicsContextCG.cpp:
        (WebCore::GraphicsContext::GraphicsContext): Pick a line width in user coordinates
        that produces the nearest integral line width in device coordinates, rounding instead
        of using the effective ceil produced by the unantialiased drawing. Also, instead of
        only using the scale from the user-to-device-space transform, use the entire transform,
        because other code in WebCore may concatenate a translation to the CTM. Finally, inline
        the helper function roundPointToDevicePixels() into its only caller.

2010-05-26  Cameron Zwarich  <zwarich@apple.com>

        <rdar://problem/8021741> Page number display when looking at a PDF is constantly changing its height between 1 pixel while scrolling

        Reviewed by David Kilzer.

        UIKit uses -[WAKWindow visibleRect] to determine where to place the indicator. The easiest
        fix is to just not round the value here. I verified with CADebug that no new subpixel rendering
        takes place after this fix.

        * wak/WAKScrollView.mm:
        (-[WAKScrollView actualDocumentVisibleRect]): Round the value returned from visibleRect
        to preserve existing behavior.
        * wak/WAKWindow.mm:
        (-[WAKWindow visibleRect]): Don't round the visible rect to integral coordinates.

2010-05-26  Enrica Casucci  <enrica@apple.com>

        <rdar://problem/7993670> Sluggish typing in MobileNotes; backspacing over a newline deletes an extra character.

        Merged ToT WebKit r60176.

    2010-05-25  Enrica Casucci  <enrica@apple.com>

            Reviewed by Darin Adler.

            REGRESSION(51522): typing at the end of a line in designMode documents is *very* slow.
            https://bugs.webkit.org/show_bug.cgi?id=36037
            <rdar://problem/8022887>

            The performance regression was traced to r51522 but this is not entirely true. That revision introduced, among other things,
            additional checks in the method isCandidate of both Position and PositionIterator classes to support scenarios of mixed editability
            that were not allowed before. This change uncovered an underlying issue with the decrement method of PositionIterator, that in some
            cases would iterate through every position as offset in a block before moving to the last child in the block.
            This was exactly the case of the attached test case, where, trying to check if the caret was placed at the end of a block, we were examining
            every position in the block before considering the last true position in the block.
            The performance was linear with the number of child nodes in the block, instead of constant.

            * dom/PositionIterator.cpp:
            (WebCore::PositionIterator::decrement):

2010-05-24 Yongjun Zhang <yongjun_zhang@apple.com>

        <rdar://problem/7696515> ASSERTION FAILED: inputElement->isChecked() at CheckedRadioButtons.cpp:78
        (CrashTracer: [USER] 1 crash in MobileSafari at WebCore: WebCore::CheckedRadioButtons::removeButton + 404)

        Merged ToT WebKit r54372

    2010-02-04  Alexey Proskuryakov  <ap@apple.com>

            Reviewed by Darin Adler.

            Assertion failure in CheckedRadioButtons::removeButton when using jQuery 1.4.1
            https://bugs.webkit.org/show_bug.cgi?id=34520

            Test: fast/dom/HTMLInputElement/cloned-input-checked-state.html

            * dom/Element.cpp: (WebCore::Element::cloneElementWithoutChildren): Copy non-attribute
            properties before attributes. Otherwise, copying "checked" property would make the cloned
            node checked, unchecking original (they share a name, and are thus in the same radio group).
            We do want the original to be unchecked, but we also want to know its original state in
            HTMLInputElement::copyNonAttributeProperties().

            * html/HTMLInputElement.cpp: (WebCore::HTMLInputElement::copyNonAttributeProperties):
            Use setChecked instead of plain assignment to prevent m_checked getting out of sync with
            checkedRadioButtons. Also, copy field related to default checked state, so that m_checked
            won't be overridden when copying attributes.

2010-05-21  Cameron Zwarich  <zwarich@apple.com>

        <rdar://problem/7058173> Crash beneath -[WAKView viewWillDraw]

        Reviewed by David Kilzer.

        WAKView's dealloc does work that is unsafe without the WebKit lock, but it can be
        called after the autounlock runloop observer due to autorelease pools. Instead of
        forwarding all deallocs to the WebKit thread, it makes more sense to only forward
        those deallocs that are taking place without the WebKit lock.

        * wak/WebCoreThread.mm:
        (WebCoreObjCDeallocWithWebThreadLock): Added.
        (WebCoreObjCDeallocWithWebThreadLockImpl): Added.
        (StartWebThread): Register WAKView for dealloc with the WebKit lock.
        * wak/WebCoreThreadMessage.h:

2010-05-20  Joseph Pecoraro  <joepeck@webkit.org>

        <rdar://problem/7645599> [webView markAllMatchesForText:searchText] API is broken for multicolumn layout

        Merged ToT WebKit r54901.

    2010-02-17  Dan Bernstein  <mitz@apple.com>

            Reviewed by Darin Adler.

            <rdar://problem/7645569> REGRESSION (r51324): Incorrect marker rects for blocks that span multiple columns

            * manual-tests/match-marker-rects.html: Added.
            * rendering/InlineTextBox.cpp:
            (WebCore::InlineTextBox::paintTextMatchMarker): Use the text renderer rather
            than its ancestor block for the local-to-absolute transformation.
            (WebCore::InlineTextBox::computeRectForReplacementMarker): Ditto.

2010-05-19  Ken Kocienda  <kocienda@apple.com>

        <rdar://problem/7945841> Apex: Text displayed incorrectly on Settings page of Tweetie 2 after Helvetica Neue change

        --- Submission Information ---
        - Risk level: medium
        - Risk details: Font metrics changes with the new system font on
          N90 sometimes interact badly with the various bits of rounding
          we do here and there. This new workaround makes one additional
          attempt to prevent text from drawing with an ellipsis due to the
          passed-in width being *just* too small to accommodate the given
          text. There will now be one re-attempt made with a slightly
          larger width when text gets truncated and the truncated with is
          somewhat close to the passed-in width. The number of cases where
          this code will run is pretty tightly defined, in an effort to
          minimize potential impact.
        - Code reviewed by: Greg Bolsinga and Cameron Zwarich
        - Testing details: Did some testing using instances of known
          clipping problems mentioned in recently-filed bugs.
        * wak/WAKStringDrawing.mm:
        (applyEllipsisStyle)

2010-05-20  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/7915266> Quicktime plugin snapshot in Safari doesn't take up full page

        Reviewed by Cameron Zwarich

        Set the background color of PluginDocument to (217, 224, 233), which is suggested by HI by extracting
        the color from the bottom of QuickTime Plugin background image.

        * loader/PluginDocument.cpp:
        (WebCore::PluginTokenizer::createDocumentStructure):

2010-05-19  Cameron Zwarich  <zwarich@apple.com>

        <rdar://problem/7668416> MobileSafari address view loses anti-aliasing when going back or forward twice in history (7B334)

        Reviewed by David Kilzer.

        Move the setting of orientation-specific antialiasing style on the CGContext from
        Font::drawGlyphs to WKFontAntialiasingStateSaver and eliminate the global variable
        used for tracking its desired value. The landscape-specific value could end up in
        the global variable when UIKit text was drawing on the main thread, causing the text
        to be drawn with kCGFontAntialiasingStyleFilterLight, which unfortunately looks
        terrible when drawing into a layer with alpha.

        * platform/graphics/Font.cpp:
        * platform/graphics/Font.h:
        * platform/graphics/mac/FontMac.mm:
        (WebCore::Font::drawGlyphs):
        * platform/graphics/mac/WebLayer.mm:
        (+[WebLayer drawContents:WebCore::ofLayer:intoContext:]):
        * platform/iphone/TileCache.mm:
        (WebCore::TileCache::drawLayer):
        * wak/WKGraphics.h:
        (WKFontAntialiasingStateSaver::WKFontAntialiasingStateSaver):
        * wak/WKGraphics.mm:
        (WKFontAntialiasingStateSaver::setup):
        (WKFontAntialiasingStateSaver::restore):

2010-05-19  Cameron Zwarich  <zwarich@apple.com>

        Reviewed by David Kilzer.

        Remove all code related to font smoothing, because allowsFontSmoothing is off by
        default globally on iPhone OS and we only ever turn font smoothing off, which has
        no effect.

        * platform/graphics/Font.cpp:
        (WebCore::Font::setShouldUseSmoothing): Remove iPhone-specific thread assertions, since
        nobody should even be calling this.
        * platform/graphics/Font.h:
        * platform/graphics/mac/FontMac.mm:
        (WebCore::Font::drawGlyphs):
        * wak/WKGraphics.h:
        * wak/WKGraphics.mm:
        (WKFontAntialiasingStateSaver::setup):
        (WKFontAntialiasingStateSaver::restore):

2010-05-19  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7937610> WebKit_Sim-524 fails to build in Damnation: 'WKNoteOpenPanelFiles' undeclared

        Reviewed by David Carson.

        * platform/mac/WebCoreSystemInterface.h: NoteOpenPanelFiles
        should not be enabled for PLATFORM(IPHONE).
        * platform/mac/WebCoreSystemInterface.mm: Ditto.

2010-05-19  Enrica Casucci  <enrica@apple.com>

    <rdar://problem/8003877> iPhone: REGRESSION (r59385) crash destroying inline renderers
    Merged ToT WebKit r59786.

    2010-05-19  Enrica Casucci  <enrica@apple.com>

            Reviewed by Dave Hyatt.

            REGRESSION (r59385) crash destroying inline renderers
            https://bugs.webkit.org/show_bug.cgi?id=39143
            <rdar://problem/8003662>

            The goal of r59385 was to make sure that the layout of block after all its children had been removed produced the identical result
            as the one of a newly created empty block. In order to do so, we had to make sure that the m_inlineChildren flag was reset to true when
            the block had no children (as it is upon creation).
            I discovered that, by doing that for anonymous blocks it leads removeChild to conclude that the anonymous children can be removed,
            without considering that the anonymous block could be part of a continuation chain. For this reason, when RenderInline::destroy()
            tries to remove the continuations we are effectively deleting a renderer that had been deleted already.

            Test: fast/inline-block/anonymous-block-crash.html

            * rendering/RenderBlock.cpp:
            (WebCore::RenderBlock::layoutBlock): resetting the flag m_inlineChildren only for non anonymous blocks otherwise we incurr in
            a double deletion of the renderer that causes the crash.

2010-05-19  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by Pratik Solanki.

        <rdar://problem/7969977> WebCoreThread.h shouldn't be included in other WebCore header files

        * platform/sql/SQLiteDatabase.h: Do not #import WebCoreThread.h from this header.
        * wak/WKWindow.h: Ditto.

2010-05-18  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7999307> Baker8B46/Jasper8C13 NonUI: SwitchBoard crashes on launch

        Reviewed by Cameron Zwarich.

        SwitchBoard/SkankKit doesn't call WebKitInitialize(), which
        means the function pointer to wkGetScreenScaleFactor() is not
        initialized at the time that it's called, so execution jumps to
        0x0 and we crash.  The simple fix is to call
        GSMainScreenScaleFactor() instead of wkGetScreenScaleFactor().
        I filed <rdar://problem/7998987&7999024> for a follow-up fix.

        * wak/WAKStringDrawing.mm:
        (-[NSString __web_drawInRect:withFont:ellipsis:alignment:letterSpacing:lineSpacing:includeEmoji:truncationRect:measureOnly:]):
        Call GSMainScreenScaleFactor() instead of
        wkGetScreenScaleFactor().

2010-05-17  Justin Garcia  <justin.garcia@apple.com>

        Reviewed by Brad Moore.

        For <rdar://problem/7993865> and related bugs.

        Create an opt-in mode for fast string drawing where we ceilf the font's ascent, like it is
        for standard WebKit text drawing.

        * wak/WAKStringDrawing.h:
        * wak/WAKStringDrawing.mm:
        (+[NSString _web_setAscentRoundingEnabled:]):
        (+[NSString _web_ascentRoundingEnabled]):
        (-[NSString __web_drawInRect:withFont:ellipsis:alignment:letterSpacing:lineSpacing:includeEmoji:truncationRect:measureOnly:]):

2010-05-17  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7924514> iPhone: Table layout crash bug (38261)

        Merged ToT WebKit r59495.

    2010-05-14  Abhishek Arya  <inferno@chromium.org>

        Reviewed by David Hyatt.

        Move the m_width(Length) and m_columns(RenderTable::ColumnStruct)
        vector out-of-bounds check out of the ASSERT into the main code.
        https://bugs.webkit.org/show_bug.cgi?id=38261

        Test: fast/table/fixed-table-layout-large-colspan-crash.html

        * rendering/FixedTableLayout.cpp:
        (WebCore::FixedTableLayout::calcWidthArray):

2010-05-17  Ken Kocienda  <kocienda@apple.com>

        <rdar://problem/7989468> Text not rendered in SMS conversation bubble

        --- Submission Information ---
        - Risk level: medium
        - Risk details: See below
        - Code reviewed by: Cameron Zwarich, Justin Garcia, and Andre Boule
        - Testing details: Did some testing using instances of known
          clipping problems mentioned in recently-filed bugs.

        * wak/WAKStringDrawing.mm:
        (-[NSString __web_drawInRect:withFont:ellipsis:alignment:letterSpacing:lineSpacing:includeEmoji:truncationRect:measureOnly:])

        My last change to this area of code (r226257) applied to all
        devices, but since this kind of clipping only seems to manifest
        itself with the new system font on N90 devices, I aimed to
        reduce risk by restoring N88 and earlier to the exact same code
        we shipped in 3.x. I'm also modifying the code path for N90 by
        using a simple ceilf for the width of a space when "rounding
        hacks" are enabled and the code is measuring text only, and a
        roundf when it is drawing. This is on the assumption that the
        call with measureOnly == YES is being made for the purposes of
        sizing a UI element. The ceilf will err on the size of making
        the UI element a little bigger than it might need to be (on the
        order of a few pixels). Using roundf for drawing protects
        against the possibility that another of the methods in this file
        was used to size the UI element, and the size submitted to this
        method in the rect parameter might be just a little too narrow
        to handle all the spaces being rounded upwards unconditionally
        with ceilf.

        The overall hope is that this will prevent instances of clipping
        which can result from the different measuring and drawing
        techniques used in this method. As with my previous change, this
        method might increase the number of cases where text measures
        slightly wider than it did before (on the order of a couple
        pixels). That said, we have not yet found this to be a problem.
        Yet we've found many cases of text clipping. As such, this seems
        like a change we want to take. I've indicated "medium" as the
        risk level because of the stage of the project. Note that this
        is not code we want to live with for a long time. It's only a
        targeted set of tradeoffs to get Apex out the door.

        I have also been asked to mention that this code will choose the
        font for an external monitor based on the device, which might
        not make sense. Hi Cameron!

2010-05-17  Simon Fraser  <simon.fraser@apple.com>

    <rdar://problem/7988135> iPhone: HTML5 media elements do not layout correctly in column mode

    Merge ToT WebKit r59513.

    2010-05-14  David Hyatt  <hyatt@apple.com>

            Reviewed by Simon Fraser.

            https://bugs.webkit.org/show_bug.cgi?id=39137

            Make RenderLayers position properly inside multicolumn layout.

            (1) Create RenderLayers when column properties are specified.  This allows descendant layers to easily
            know they are inside a multicolumn layout when positioning.

            (2) Patch updateLayerPosition to offset the layer into the first column that contains the layer.  Splitting
            of a layer across columns still does not work, but the layer will now at least appear in the first column in
            which it occurs.

            (3) Fix pagination bugs caused by the fact that visual overflow doesn't propagate up the line box tree when layers
            are involved.  Make sure to use lineTop and lineBottom in this case (it's not perfect, but it gets most cases
            working properly).  With this change elements like <video> will paginate properly and not get split across pages.

            (4) Make column repainting and layer positioning work with RTL columns by fixing adjustForColumns to
            account for RTL.

            (5) Fix RTL pagination by making sure the column pagination rects are the content width of the whole block and not just
            the width of one column.

            Added fast/multicol/layers-in-multicol.html

            * rendering/RenderBlock.cpp:
            (WebCore::RenderBlock::layoutColumns):
            (WebCore::RenderBlock::adjustForColumns):
            * rendering/RenderBox.h:
            (WebCore::RenderBox::locationOffset):
            * rendering/RenderBoxModelObject.h:
            (WebCore::RenderBoxModelObject::requiresLayer):
            * rendering/RenderLayer.cpp:
            (WebCore::RenderLayer::updateLayerPosition):
            (WebCore::RenderLayer::convertToLayerCoords):
            (WebCore::RenderLayer::shouldBeNormalFlowOnly):
            * rendering/RenderLineBoxList.cpp:
            (WebCore::RenderLineBoxList::paint):
            * rendering/RenderView.cpp:
            (WebCore::RenderView::RenderView):
            * rendering/RenderView.h:
            (WebCore::RenderView::requiresLayer):
            * rendering/style/RenderStyle.h:
            (WebCore::InheritedFlags::specifiesColumns):

2010-05-17  Joseph Pecoraro  <joepeck@webkit.org>

        <rdar://problem/7986518> REGRESSION (r58950): Webkit crashes on clicking back button when in hotmail (39008)

        Merged ToT WebKit r59486.

    2010-05-14  Alexey Proskuryakov  <ap@apple.com>

            Reviewed by Brady Eidson.

            https://bugs.webkit.org/show_bug.cgi?id=39008
            <rdar://problem/7976142> REGRESSION (r58950): Webkit crashes on clicking back button when in Hotmail

            Test: fast/parser/tokenizer-close-during-document-write.html

            * dom/Document.cpp: (WebCore::Document::write): Check that the tokenizer is still around
            after calling write(). It can become null (as it happens in regression test), and I don't
            see any guarantee that it would never be replaced with a different one (but I can't make a
            test for that).

2010-05-17  Joseph Pecoraro  <joepeck@webkit.org>

        <rdar://problem/7970576> [Apex8A273]: Text in Wikipedia's mobile box is cut off on the bottom for double byte characters

        Merged ToT WebKit r58400, r58627, r58762.

    2010-05-03  Joseph Pecoraro  <joepeck@webkit.org>

            Reviewed by Dan Bernstein.

            REGRESSION: Text clipped in absolutely positioned search inputs
            https://bugs.webkit.org/show_bug.cgi?id=38468

            Previously I incorrectly added x() and y() to the tx and ty positioning.
            This clips a search input like a text input, respecting the vertically
            centered text.

            * rendering/RenderTextControlSingleLine.cpp:
            (WebCore::RenderTextControlSingleLine::layout): only the Y changes, so change setLocation to setY
            (WebCore::RenderTextControlSingleLine::controlClipRect):

    2010-04-28  Joseph Pecoraro  <joepeck@webkit.org>

            Reviewed by Oliver Hunt.

            REGRESSION(r58313): Regression evident in pixel tests: the search icon is always clipped at the bottom.
            https://bugs.webkit.org/show_bug.cgi?id=38253

            Test: fast/css/input-search-padding.html

            An <input type="search"> contains an inner block, which is explicitly
            centered in RenderTextControlSingleLine based on the height of the element.
            However, the clipping rect was not using the set location, and instead
            calculated off of the top border and padding alone. This also vertically
            centers the Caps Lock indicator.

            * rendering/RenderTextControl.cpp: moved controlClipRect implementation to RenderTextControlSingleLine
            * rendering/RenderTextControl.h: allow a subclass implementation of controlClipRect, removed redundant hasControlClip implementation, and moved controlClipRect
            * rendering/RenderTextControlSingleLine.cpp:
            (WebCore::RenderTextControlSingleLine::paint): vertically center the Caps Lock indicator
            (WebCore::RenderTextControlSingleLine::controlClipRect): use the set location of the anonymous inner block instead
            * rendering/RenderTextControlSingleLine.h: allow for an implementation of controlClipRect for <input type="search">

    2010-04-28  Sheriff Bot  <webkit.review.bot@gmail.com>

            Unreviewed, rolling out r58313.
            http://trac.webkit.org/changeset/58313
            https://bugs.webkit.org/show_bug.cgi?id=38253

            Regression evident in pixel tests: the search icon is always
            clipped at the bottom. (Requested by jorlow on #webkit).

            * rendering/RenderTextControl.cpp:
            (WebCore::RenderTextControl::controlClipRect):
            * rendering/RenderTextControl.h:
            (WebCore::RenderTextControl::hasControlClip):
            * rendering/RenderTextControlSingleLine.cpp:
            (WebCore::RenderTextControlSingleLine::paint):
            * rendering/RenderTextControlSingleLine.h:

2010-05-16  Justin Garcia  <justin.garcia@apple.com>

        Reviewed by Brad Moore.

        <rdar://problem/7983178> REGRESSION(r227796): Mail setup assistant: "Other" is left justified in template page

        Rolling out r226118.

        * wak/WAKStringDrawing.mm:
        (-[NSString __web_drawInRect:withFont:ellipsis:alignment:letterSpacing:lineSpacing:includeEmoji:truncationRect:measureOnly:]):

2010-05-15  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Cameron Zwarich.

        <rdar://problem/7932752> Thumbnail/poster images missing (grey area) when navigating 'back' to Akamai iPhone Showcase page.

        FrameLoader only uses the back/forward cache on pages without plugins, but on http://iphone.akamai.com we happened
        to use the back/forward cache, because the video elements are all hidden when they are created. Thus the
        video elements are broken when navigating back to the page.

        The fix is to ensure that we always set m_containsPlugIns in loadMediaPlayerProxyPlugin(), even when we don't
        have a renderer.

        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::loadMediaPlayerProxyPlugin):

        --- Submission Information---
        - Risk level:  low
        - Risk details: disables the back/forward cache for pages with <video> elements that are initially hidden.
        - Code reviewed by: Cameron Zwarich
        - Testing details: Tested pages with video elements in the sim and on the device. Verified that the reported problem was fixed. Root was tested by QA and Cameron. <rdar://problem/7988948> was filed but also occurs without this change.

2010-05-14  Ken Kocienda  <kocienda@apple.com>

        <rdar://problem/7945841> Apex: Text displayed incorrectly on Settings page of Tweetie 2 after Helvetica Neue change

        --- Submission Information ---
        - Risk level: low
        - Risk details: Small visual glitch in text drawing. The risk is that
          we might now have cases where text measures slightly wider
          than it did before (on the order of a couple pixels). That
          said, the text will always fit in this rectangle. That seems like
          a tradeoff we want, given the clipping we've been seeing.
        - Code reviewed by: Greg Bolsinga and Julio Gonzales
        - Testing details: Tested apps mentioned in the bug, both on N90 and N88.
          Verified that the text no longer clips or ellipsizes.

        * wak/WAKStringDrawing.mm:
        (-[NSString __web_drawInRect:withFont:ellipsis:alignment:letterSpacing:lineSpacing:includeEmoji:truncationRect:measureOnly:]):
        This code measures word-by-word and space-by-space in order to find out
        where to break lines, but then draws the line in one shot (in order to
        ensure proper bidi rendering). With the switchover to the new system
        font, we're seeing some new problems we haven't seen before. For
        instance, the width of the space character in the balloon text in a sent
        SMS message is 4.448. This gets rounded down to 4.000. While related
        rounding-hack code does perform a ceil on the width of the word
        preceding the space, the width of the space landing so close to 0.5
        means that the ceils sometime fail to make up enough ground. The result
        is that the width of the measured text is less than the drawn text, and
        we get clipping or an ellipsis. This fix is straightforward. It
        accumulates the error of rounding spaces, and adds it once its
        rounded value is greater than zero.

2010-05-13  Justin Garcia  <justin.garcia@apple.com>

        Reviewed by Ken.

        <rdar://problem/7956671> AM/PM in MobileMail is slightly lower than the time

        Round the font's ascender up when computing the baseline to be consistent with other string drawing.

        * wak/WAKStringDrawing.mm:
        (-[NSString __web_drawInRect:withFont:ellipsis:alignment:letterSpacing:lineSpacing:includeEmoji:truncationRect:measureOnly:]):

2010-05-13  Yongjun Zhang  <yongjun_zhang@apple.com>

    <rdar://problem/7977658> MobileSafari has 2 MB of VM_TAG_FOR_COLLECTOR_MEMORY resident in the background

    Merge ToT WebKit r54428

        2010-02-04  Geoffrey Garen  <ggaren@apple.com>

            Reviewed by Oliver Hunt.

            Updated to use new WeakGCPtr::clear interface.

            * bindings/js/JSEventListener.cpp:
            * bindings/js/JSEventListener.h:
            (WebCore::JSEventListener::invalidateJSFunction):

2010-05-13  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7953255> [PROXY] REGRESSION (3.1.3-4.0): Manual web proxy prompts for username/password after entering them in Settings

        Pre-reviewed by Alexey Proskuryakov.  Reviewed by David Carson.

        Changes for <rdar://problem/7704943> forced WebCore to always
        return NO from -connectionShouldUseCredentialStorage:.  That
        caused this regression because always returning NO from
        -connectionShouldUseCredentialStorage: caused CFNetwork not to
        check for proxy authentication credentials in the keychain.

        The fix is to have WebCore check for the credentials in the
        keychain when proxy authentication is requested (before
        prompting the user for a username and password).

        * platform/network/mac/ResourceHandleMac.mm:
        (WebCore::ResourceHandle::didReceiveAuthenticationChallenge):
        Added code to check the keychain (via NSURLCredentialStorage)
        for proxy authentication credentials and use them if found.
        (-[WebCoreSynchronousLoader connection:didReceiveAuthenticationChallenge:]): Ditto.

2010-05-13  Cameron Zwarich  <zwarich@apple.com>

        <rdar://problem/7951258> m.nytimes.com doesn't reflow text when rotating

        Reviewed by Greg Bolsinga.

        The -[WAKWindow visibleRect] method, used for computing window.innerWidth, traverses
        the layer hierarchy to compute the visible region of the web content. However, in the
        middle of a rotation animation, this will give the post-animation width. The NYTimes
        mobile site runs a script on a timer that checks for window.innerWidth changes and then
        modifies some CSS depending on the value of window.orientation at that time.

        This is possible to reproduce on Northstar, but it reproduces a lot more easily on Apex
        because rotation is now a server-side animation rather than a client-side UIAnimator
        animation.

        A better fix would be to disable timers during rotation, but that would be too risky:
        <rdar://problem/7982284> Disable timers during rotation, just as we do while panning and zooming

        * wak/WAKWindow.h:
        * wak/WAKWindow.mm:
        (-[WAKWindow initWithLayer:]): Set _cachedVisibleRect to CGRectNull.
        (-[WAKWindow visibleRect]): Use the value of _cachedVisibleRect if it is not null.
        (-[WAKWindow willRotate]): Cache the value of visibleRect.
        (-[WAKWindow didRotate]): Set _cachedVisibleRect to CGRectNull.

2010-05-13  Chris Fleizach  <cfleizach@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/7980318> AX: Safari crasher when opening a new tab
        Make sure that an object won't be deallocated while it's waiting for the WebThreadLock

        * accessibility/iphone/AccessibilityObjectWrapperIPhone.mm:
        (-[AccessibilityObjectWrapper dealloc]):
        (-[AccessibilityObjectWrapper _prepareAccessibilityCall]):
        (-[AccessibilityObjectWrapper accessibilityObject]):
        (-[AccessibilityObjectWrapper accessibilityHitTest:]):
        (-[AccessibilityObjectWrapper accessibilityElementCount]):
        (-[AccessibilityObjectWrapper accessibilityElementAtIndex:]):
        (-[AccessibilityObjectWrapper indexOfAccessibilityElement:]):
        (-[AccessibilityObjectWrapper accessibilityLanguage]):
        (-[AccessibilityObjectWrapper accessibilityTraits]):
        (-[AccessibilityObjectWrapper isAccessibilityElement]):
        (-[AccessibilityObjectWrapper accessibilityLabel]):
        (-[AccessibilityObjectWrapper accessibilityValue]):
        (-[AccessibilityObjectWrapper accessibilityHint]):
        (-[AccessibilityObjectWrapper accessibilityURL]):
        (-[AccessibilityObjectWrapper accessibilityFrame]):
        (-[AccessibilityObjectWrapper accessibilityContainer]):
        (-[AccessibilityObjectWrapper accessibilityFocusedUIElement]):
        (-[AccessibilityObjectWrapper _accessibilityWebDocumentView]):
        (-[AccessibilityObjectWrapper _accessibilityNextElementsWithCount:]):
        (-[AccessibilityObjectWrapper _accessibilityPreviousElementsWithCount:]):
        (-[AccessibilityObjectWrapper isAttachment]):
        (-[AccessibilityObjectWrapper _accessibilityActivate]):
        (-[AccessibilityObjectWrapper attachmentView]):
        (-[AccessibilityObjectWrapper accessibilityElementDidBecomeFocused]):
        (-[AccessibilityObjectWrapper accessibilityModifySelection:increase:]):
        (-[AccessibilityObjectWrapper stringForTextMarkers:]):
        (-[AccessibilityObjectWrapper arrayOfTextForTextMarkers:]):
        (-[AccessibilityObjectWrapper positionForTextMarker:]):
        (-[AccessibilityObjectWrapper textMarkerRange]):
        (-[AccessibilityObjectWrapper elementTextRange]):
        (-[AccessibilityObjectWrapper accessibilityObjectForTextMarker:]):
        (-[AccessibilityObjectWrapper textMarkerRangeForSelection]):
        (-[AccessibilityObjectWrapper textMarkerForPosition:]):
        (-[AccessibilityObjectWrapper stringForRange:]):
        (-[AccessibilityObjectWrapper elementsForRange:]):
        (-[AccessibilityObjectWrapper selectedTextMarker]):
        (-[AccessibilityObjectWrapper lineEndMarkerForMarker:]):
        (-[AccessibilityObjectWrapper lineStartMarkerForMarker:]):
        (-[AccessibilityObjectWrapper nextMarkerForMarker:]):
        (-[AccessibilityObjectWrapper previousMarkerForMarker:]):
        (-[AccessibilityObjectWrapper frameForTextMarkers:]):
        (-[AccessibilityObjectWrapper textMarkerForPoint:]):

2010-05-13  Enrica Casucci  <enrica@apple.com>

        <rdar://problem/7978027> REGRESSION: Crash in WebCore::RenderInline::destroy() due to 59270

        Merged ToT WebKit r59385.

    2010-05-13  Enrica Casucci  <enrica@apple.com>

            Reviewed by Dave Hyatt.

            Adding block elements to a block and removing them changes the height of the element.
            https://bugs.webkit.org/show_bug.cgi?id=38874

            The initial height of an empty editable block is different from the height of the same block after we add block elements
            and remove them.

            Test: editing/deleting/delete-block-contents-004.html

            * rendering/RenderBlock.cpp:
            (WebCore::RenderBlock::layoutBlock): resetting m_childrenInline flag to true when layout a block with no children.

2010-05-13  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7915089> iPhone: FrameView's layout root can be detached by style recalc (37760)

        Merged ToT WebKit r59263.

    2010-05-12  James Robinson  <jamesr@chromium.org>

        Patch by Dan Bernstein.

        Reviewed by David Hyatt.

        Fix marking the layout root's parent as needing layout
        https://bugs.webkit.org/show_bug.cgi?id=37760

        If an element gets marked as needing layout due to the recalcStyle()
        call in FrameView::layout(), the m_layoutSchedulingEnabled flag will
        be set to false.  It's possible at this point that a parent of the
        existing FrameView::m_layoutRoot will be marked as needing layout.

        This patch updates FrameView::scheduleRelayoutOfSubtree to account
        for this case.

        Manual test only due to subtle timing issues.

        * manual-tests/layoutroot_detach.xml: Added.
        * page/FrameView.cpp:
        (WebCore::FrameView::scheduleRelayoutOfSubtree):

2010-05-13  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7976275> iPhone: innerHTML decompilation issues in textarea (38922)

        Merged ToT WebKit r59241, r59242.

    2010-05-12  Abhishek Arya  <inferno@chromium.org>

        Reviewed by Darin Adler.

        HTML Entity Escape the contents of a textarea node when accessed
        via the innerHTML and outerHTML node properties.
        https://bugs.webkit.org/show_bug.cgi?id=38922

        Test: fast/innerHTML/innerHTML-special-elements.html

        * editing/markup.cpp:
        (WebCore::appendStartMarkup):

2010-05-13  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7949495> iPhone: Use of stale pointers whilst normalizing DOM nodes with mutation event handlers that modify element attributes (38583)

        Merged ToT WebKit r59109.

    2010-05-10  Sam Weinig  <sam@webkit.org>

        Reviewed by Darin Adler.

        Fix for https://bugs.webkit.org/show_bug.cgi?id=38583
        <rdar://problem/7948784> Crash in Element::normalizeAttributes.

        Test: fast/dom/Element/normalize-crash.html

        * dom/Element.cpp:
        (WebCore::Element::normalizeAttributes): Copy attributes to a vector
        before iterating.
        * dom/NamedAttrMap.cpp:
        (WebCore::NamedNodeMap::copyAttributesToVector): Added.
        * dom/NamedAttrMap.h:

2010-05-12  Aaron Golden  <agolden@apple.com>

        Reviewed by Greg Bolsinga.

        <rdar://problem/7970075> websheet login page error opening page.

        If the connection properties returned by the ResourceHandle's client already contain a dictionary
        for kCFURLConnectionSocketStreamProperties, then we can't just replace it with a different dictionary.
        If we have stream properties to add then we need to add them to the stream properties returned by the
        client.

        Also, if shouldUseCredentialStorage is false then we don't need to mess with this at all.  There's no
        point in setting an empty dictionary for stream properties, just leave it as nil or whatever the client
        provided.

        * platform/network/mac/ResourceHandleMac.mm:
        (WebCore::ResourceHandle::start):

2010-05-12  Enrica Casucci  <enrica@apple.com>

        <rdar://problem/7929608> After deleting a notes field, the cell doesn't display correctly

        Merged ToT WebKit r59245.

    2010-05-12  Enrica Casucci  <enrica@apple.com>

            Reviewed by Dave Hyatt.

            Adding block elements to a block and removing them changes the height of the element.
            https://bugs.webkit.org/show_bug.cgi?id=38874

            The initial height of an empty editable block is different from the height of the same block after we add block elements
            and remove them.

            Test: editing/deleting/delete-block-contents-004.html

            * rendering/RenderBlock.cpp:
            (WebCore::RenderBlock::removeChild): m_childrenInline was set to true only when the Renderer is created
            and never reset to true when all the block elements contained are removed.

2010-05-11  Cameron Zwarich  <zwarich@apple.com>

        <rdar://problem/7917665> REGRESSION: Mail displayed empty black bar where attached Excel tabs should be

        Reviewed by David Carson.

        * page/FrameView.cpp: Only deliver the didFirstLayout message for the main frame, similar
        to what <rdar://problem/7712953> did for didLayout and didFirstVisuallyNonEmptyLayout. This
        avoids entering layout or painting from the main thread while layout is on the stack on the
        WebKit thread.

2010-05-11  Justin Garcia  <justin.garcia@apple.com>

        Reviewed by Brad Moore.

        <rdar://problem/7952826> Apex -[UIKeyboardImpl setMarkedText] is 2.5x slower than Northstar on N82

        Missed an unnecessary selection change notification call in my last check-in because it does
        not go through Editor::respondToSelectionChange.  Only other case like this is
        in RenderText::secureLastCharacter() which we don't call during a composition change.

        * editing/Editor.cpp:
        (WebCore::Editor::changeSelectionAfterCommand):

2010-05-11  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/7932939> Safari crashed - Array was mutated while being enumerated

        Export WebThreadLockFromAnyThreadNoLog, which is the same as WebThreadLockFromAnyThread,
        but does not log to the console.

        * WebCore.iPhone.exp:
        * wak/WebCoreThread.h:
        * wak/WebCoreThread.mm:
        (WebThreadLockFromAnyThread):
        (WebThreadLockFromAnyThreadNoLog):
        (_WebThreadLockFromAnyThread):

2010-05-11  Ada Chan  <adachan@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/7957775> MobileSafari crashed with open database assertion on mail.yahoo.com (8A268)

        We added a mechanism to start a background task when a transaction begins so if Safari is suspended
        while it's in the middle of a database transaction, it'll get a chance to finish the transaction in
        the background task. However, the call to start the background task was deferred to the main thread,
        so if Safari is suspended just after a transaction started but before the main thread gets the chance
        to start the background task, Safari will be suspended with sqlite still having locks on the database
        file. SpringBoard detects the locked file and hence kills Safari.

        So instead of deferring the call to start background task to the main thread, do it directly from
        the WebThread. We also need to start a background task for the database open task since that could
        lead to a file being locked.

        * storage/Database.cpp:
        (WebCore::TransactionInProgressAutoCounter::TransactionInProgressAutoCounter): Convenience class that
        makes the transaction counting easier.
        (WebCore::TransactionInProgressAutoCounter::~TransactionInProgressAutoCounter):
        (WebCore::Database::performOpenAndVerify): Notify DatabaseTracker when we begin and finish handling the
        open database task.
        * storage/DatabaseTracker.cpp:
        (WebCore::transactionInProgressMutex):
        (WebCore::DatabaseTracker::incrementTransactionInProgressCount): Moved from SQLTransaction. It's public
        so it can be called in Database.cpp and SQLTransaction.cpp.
        (WebCore::DatabaseTracker::decrementTransactionInProgressCount): Ditto.
        * storage/DatabaseTracker.h:
        * storage/SQLTransaction.cpp:
        (WebCore::SQLTransaction::checkAndHandleClosedDatabase):
        (WebCore::SQLTransaction::openTransactionAndPreflight):
        (WebCore::SQLTransaction::postflightAndCommit):
        (WebCore::SQLTransaction::cleanupAfterTransactionErrorCallback):
        * storage/SQLTransaction.h:

2010-05-10  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7949473> iPhone: WebKit crash on WebCore::Node::nodeIndex() (28697)

        Merged ToT WebKit r59098.

    2010-05-10  Alexey Proskuryakov  <ap@apple.com>

        Reviewed by Darin Adler.

        Based on a patch by Eric Seidel.

        https://bugs.webkit.org/show_bug.cgi?id=28697
        <rdar://problem/7946578> WebKit crash on WebCore::Node::nodeIndex()

        It's not OK to call ContainerNode::willRemoveChild() in a loop, because Range code assumes
        that it can adjust start and end position to any node except for the one being removed -
        so these notifications cannot be batched.

        Test: fast/dom/Range/remove-all-children-crash.html

        * dom/ContainerNode.cpp:
        (WebCore::willRemoveChild): Removed unused ExceptionCode.
        (WebCore::willRemoveChildren): New function, used in removeChildren() case.
        (WebCore::ContainerNode::removeChild): ExceptionCode return was always 0, don't bother with it.
        (WebCore::ContainerNode::removeChildren): Call willRemoveChildrenFromNode.
        (WebCore::dispatchChildRemovalEvents): Moved some logic out into willRemoveChildrenFromNode
        and willRemoveChild.

        * dom/Document.cpp:
        (WebCore::Document::nodeChildrenWillBeRemoved): New function, used in removeChildren() case.

        * dom/Document.h:
        (WebCore::Document::nodeChildrenWillBeRemoved): New function, used in removeChildren() case.

        * dom/Range.h:
        * dom/Range.cpp:
        (WebCore::boundaryNodeChildrenWillBeRemoved): New function, used in removeChildren() case.
        (WebCore::Range::nodeChildrenWillBeRemoved): Ditto.

2010-05-10  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7965011> iPhone: Workaround 7512156, Safari same-origin bypass with http:example.com URL (38497)

        Merged ToT WebKit r58792.

    2010-05-03  Alexey Proskuryakov  <ap@apple.com>

        Reviewed by Adam Barth.

        https://bugs.webkit.org/show_bug.cgi?id=38497
        <rdar://problem/7759438> Make sure that http URLs always have a host in SecurityOrigin

        This is a hardening fix, and behavior really depends on what an underlying networking layer
        does. So, no test.

        * page/SecurityOrigin.cpp:
        (WebCore::schemeRequiresAuthority): List schemes that need an authority for successful loading.
        (WebCore::SecurityOrigin::SecurityOrigin): Never let e.g. http origins with empty authorities
        have the same security origin.

2010-05-10  Cameron Zwarich  <zwarich@apple.com>

        <rdar://problem/7957150> The web layer should lock and lay out when drawn by renderInContext:

        Reviewed by Kevin Decker.

        * platform/iphone/TileCache.mm: Add a TileCache instance variable to TileHostLayer.
        (-[TileHostLayer initWithTileCache:WebCore::]):
        (-[TileHostLayer renderInContext:]): Take the WebKit lock if we are on the main
        thread and create tiles if necessary.
        (WebCore::TileCache::TileCache): Pass the TileCache in to the construction of the
        TileHostLayer.

2010-05-09  Justin Garcia  <justin.garcia@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/7952826> Apex -[UIKeyboardImpl setMarkedText] is 2.5x slower than Northstar on N82

        Selection changes that happen during a composition change (changes to marked text) are just an
        internal implementation detail and so they aren't interesting.  Listening and responding to them in
        UIKit is expensive.

        We use Editor::m_ignoreCompositionSelectionChange to avoid revealing the selection on those changes,
        we should use that boolean to suppress selection change notifications too.

        Filed https://bugs.webkit.org/show_bug.cgi?id=38830 to merge this to open source.

        * editing/Editor.cpp:
        (WebCore::Editor::respondToChangedSelection):
        (WebCore::Editor::setIgnoreCompositionSelectionChange):

2010-05-09  Justin Garcia  <justin.garcia@apple.com>

        Reviewed by Enrica.

        <rdar://problem/7952826> Apex -[UIKeyboardImpl setMarkedText] is 2.5x slower than Northstar on N82

        Avoid selection painting related work since we do it all in UIKit.  Filed:

        <rdar://problem/7961607> Implement Frame::selectionImage for iPhone

        to do this in a more performant way for <rdar://problem/4407034>.

        * editing/SelectionController.cpp:
        (WebCore::SelectionController::updateAppearance):

2010-05-09  Jonathan Koch  <jbk@apple.com>

        <rdar://problem/7946117> High DPI spelling dot

	--- Submission Information ---
	- Risk level: low
	- Risk details: modified graphics function to use hi-res graphics if present
	- Code reviewed by: David Kilzer
	- Testing details: tested in simulator at 1 and 2x. tested on N90 and N88.

        * Resources/SpellingDot@2x.png: Added.
        * WebCore.iPhone.exp:
        * WebCore.xcodeproj/project.pbxproj:
        * wak/WKGraphics.mm:
        (imageResourcePath):
        (WKGraphicsCreateImageFromBundleWithName):
        (WKDrawPatternBitmap):
        (WKCreatePatternFromCGImage):

2010-05-08  Ken Kocienda  <kocienda@apple.com>

        <rdar://problem/7958673> Text shifts when changing text fields in Facebook and other 3rd party Apps

        --- Submission Information ---
        - Risk level: low
        - Risk details: Small visual glitch in text editing, now fixed.
        - Code reviewed by: Cameron Zwarich
        - Testing details: Tested apps mentioned in the bug, both on N90 and N88.
          Verified that the correct font is used on each, and that the font does not
          flip when entering or leaving a text field.

        * page/iphone/FrameIPhone.mm:
        (WebCore::Frame::createDefaultFieldEditorDocumentStructure): Test for N90.
        Use appropriate font for the document based on the result of the test.

2010-05-07  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7948673> iPhone: REGRESSION: Pop-up blocker blocks submitting to target="_blank"

        Merged ToT WebKit r58872.

    2010-05-06  Andy Estes  <aestes@apple.com>

        Reviewed by Maciej Stachowiak.

        Allow forms submitting to target="_blank" to open popups if the submission
        originated from a user gesture.

        https://bugs.webkit.org/show_bug.cgi?id=37335
        <rdar://problem/7884980>

        Test: fast/events/popup-allowed-from-gesture-initiated-form-submit.html

        * bindings/js/ScriptController.cpp:
        (WebCore::ScriptController::processingUserGesture): If no DOM event is
        being processed, consult UserGestureIndicator to determine return value.
        * bindings/js/ScriptController.h: Moved the logic of processingUserGestureEvent()
        into processingUserGesture().

2010-05-07  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7826893> iPhone: Cross-origin XMLHttpRequest can send credentials from Keychain to unexpecting servers

        Merged ToT WebKit r57993.

        * platform/network/mac/ResourceHandleMac.mm:
        (WebCore::ResourceHandle::start): Modified iPhone-only code
        paths to add the necessary keys to the connectionProperties
        dictionary instead of using createNSURLConnection().

    2010-04-21  Alexey Proskuryakov  <ap@apple.com>

        Reviewed by Brady Eidson.

        https://bugs.webkit.org/show_bug.cgi?id=37933
        <rdar://problem/7719540> XMLHttpRequest.withCredentials should be better enforced.

        Test: http/tests/xmlhttprequest/cross-origin-authorization-with-embedder.html

        This improves integration between ResourceHandle and Apple networking libraries.

        * platform/network/cf/ResourceHandleCFNet.cpp:
        (WebCore::createConnectionProperties): A new helper for creating connection properties dictionary.
        (WebCore::ResourceHandle::start): Pass connection properties.
        (WebCore::WebCoreSynchronousLoader::load): Ditto.

        * platform/network/mac/ResourceHandleMac.mm:
        (WebCore::createNSURLConnection): Factor out OS version dependent code for creating
        NSURLConnection. Tell NSURLConnection about credential policy upfront.
        (WebCore::ResourceHandle::start): Use the new function.
        (+[WebCoreSynchronousLoader loadRequest:allowStoredCredentials:returningResponse:error:]): Ditto.

2010-05-07  Joseph Pecoraro  <joepeck@webkit.org>

        <rdar://problem/7885765> REGRESSION(?): document.write isn't producing a body in Nike ad

        Merged ToT WebKit r58950.

    2010-05-07  Joseph Pecoraro  <joepeck@webkit.org>

            Reviewed by Adam Barth.

            document.write is not synchronous after page load
            https://bugs.webkit.org/show_bug.cgi?id=38146

            If there are no pending scripts, a document.write call should be
            synchronous. This matches other browsers and the HTML5 spec. Forcing
            the tokenizer to be synchronous in Document::write does not affect
            external scripts written by the write call. This should only change
            behavior of document.write after the page is done loading.

            Difficult to test reliably due to HTMLTokenizing relying on processing time.
            I made a manual test because the test requires processing very large strings
            synchronously and therefore can take some time.

            Test: WebCore/manual-tests/dom/document-write-synchronous-after-page-load.html

            * dom/Document.cpp:
            (WebCore::SynchronousHTMLTokenizerGuard::SynchronousHTMLTokenizerGuard): if the provided tokenizer is an HTMLTokenizer make it synchronous
            (WebCore::SynchronousHTMLTokenizerGuard::~SynchronousHTMLTokenizerGuard): if the provided tokenizer was an HTMLTokenizer return its synchronous state
            (WebCore::Document::write): temporarily set the tokenizer to synchronous during document.write
            * dom/Tokenizer.h:
            (WebCore::Tokenizer::asHTMLTokenizer): default implementation returns 0, to be overridden by HTMLTokenizer
            * html/HTMLTokenizer.h: allow access to to the force synchronous state
            (WebCore::HTMLTokenizer::forceSynchronous): accessor
            (WebCore::HTMLTokenizer::asHTMLTokenizer): override the default to return itself
            * manual-tests/dom/document-write-synchronous-after-page-load.html: Added.

2010-05-06  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7924486> iPhone: Frame.src allows javascript URLs with starting spaces (38260)

        Merged ToT WebKit r58844.

    2010-05-05  Alexey Proskuryakov  <ap@apple.com>

        Reviewed by Darin Adler.

        https://bugs.webkit.org/show_bug.cgi?id=38260
        <rdar://problem/7917548> Fix whitespace removing in deprecatedParseURL().

        Broken all the way since r4 (yes, that's a revision number).

        Test: http/tests/security/xss-DENIED-javascript-with-spaces.html

        * css/CSSHelper.cpp: (WebCore::deprecatedParseURL): Fixed loop conditions for remaining length.

2010-05-06  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7843758> iPhone: REGRESSION (4.0.5): Safari sends NTLM credentials as plain text AND asks for credentials all the time when authenticating to Windows IIS Server

        Merged ToT WebKit r57232.

    2010-04-07  Alexey Proskuryakov  <ap@apple.com>

        Reviewed by Darinn Adler.

        https://bugs.webkit.org/show_bug.cgi?id=37230
        <rdar://problem/7813115> REGRESSION (4.0.5): Safari asks for credentials all the time when
        authenticating to Windows IIS Server

        * platform/network/ProtectionSpace.h: (WebCore::ProtectionSpaceAuthenticationScheme): Added
        a constant for ProtectionSpaceAuthenticationSchemeUnknown.

        * platform/network/cf/AuthenticationCF.cpp: (WebCore::core):
        * platform/network/cf/SocketStreamHandleCFNet.cpp: (WebCore::authenticationSchemeFromAuthenticationMethod):
        Return ProtectionSpaceAuthenticationSchemeUnknown for unknown scheme.

        * platform/network/mac/AuthenticationMac.mm:
        (WebCore::mac): Support NTLM on systems older than 10.6. We actually get this string from
        NSURLConnection, even though there was no public constant.
        (WebCore::core): Return ProtectionSpaceAuthenticationSchemeUnknown for unknown scheme.

2010-05-06  Cameron Zwarich  <zwarich@apple.com>

        <rdar://problem/7946872> iPhone implementation of WebChromeClient::scaleFactor() always returns 1.0

        Reviewed by David Carson.

        * html/HTMLCanvasElement.cpp:
        (WebCore::HTMLCanvasElement::convertLogicalToDevice): Always use a scale of 1. There is
        support in WebKit for HiDPI canvas from the days of the old Mac OS work, but almost all
        sites do the wrong things, including demos by Apple engineers, so we'll just make canvas
        LoDPI. A bug is tracking the reversal of this decision: <rdar://problem/7952960>.

2010-05-06  Ada Chan  <adachan@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/7942714> Viewing a mail in gmail crashes Safari

        Merged ToT r58915.

    2010-05-06  Ada Chan  <adachan@apple.com>

            Reviewed by David Kilzer.

            https://bugs.webkit.org/show_bug.cgi?id=38695

            Check the result from widget() for NULL before accessing it.

            * rendering/RenderIFrame.cpp:
            (WebCore::RenderIFrame::calcHeight):
            (WebCore::RenderIFrame::calcWidth):

2010-05-06  Eric Carlson  <eric.carlson@apple.com>

        Reviewed by Simon Fraser.

        <rdar://problem/7952557>
        8A264: Able to play video tag movie inline via App Switcher player controls

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::deliverNotification): Deal with the new MediaPlayerRequestBeginPlayback
        and MediaPlayerRequestPausePlayback notifications.

        * platform/graphics/iphone/MediaPlayerPrivateIPhone.mm:
        (WebCore::MediaPlayerPrivateiPhone::deliverNotification): Include MediaPlayerRequestBeginPlayback
        and MediaPlayerRequestPausePlayback.
        * platform/graphics/mac/MediaPlayerProxy.h: Define Include MediaPlayerRequestBeginPlayback
        and MediaPlayerRequestPausePlayback.

2010-05-06  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Cameron Zwarich.

        <rdar://problem/7950836> Apex8A268 Mobile Safari crashes when opening nytimes.com

        Should only call hideMediaPlayerProxyPlugin() when we actually have an m_proxyWidget,
        which fixes a null deref crash.

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::attach):

2010-05-06  David Kilzer  <ddkilzer@apple.com>

        WebCore part: <rdar://problem/7860969> REGRESSION (Apex8A193-8A194): Web site using NTLM authentication fails to load

        Reviewed by Greg Bolsinga and Ada Chan.

        * platform/network/mac/AuthenticationMac.mm:
        (WebCore::mac): Remove errant "&& !PLATFORM(IPHONE)" macro since
        iPhone OS supports NTLM authentication.
        (WebCore::core): Ditto.

2010-05-05  Paul Knight  <pknight@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/6826593> get inconsistent behavior when pasting photos into compose email

        If we have more than 256MB of physical memory, set the maximum decoded image size limit to
        5MP instead of 3MP.

        * page/Settings.cpp:
        (WebCore::Settings::Settings):

2010-05-05  Paul Knight  <pknight@apple.com>

        Reviewed by David Kilzer and David Carson.

        <rdar://problem/6826593> get inconsistent behavior when pasting photos into compose email

        Do not limit images based on their HTML width and height attributes. We will check image limits
        on the actual data in CachedImage::data. Keying off the width and height attributes often prevents
        an image from displaying that would have otherwise been subsampled.

        * loader/ImageLoader.cpp:
        (WebCore::ImageLoader::updateFromElement):

2010-05-05  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Eric Carlson.

        <rdar://problem/7913420> REGRESSION: <video> element never becomes visible after being set to display:none

        The video proxy plugin was getting destroyed when its view was removed from the
        view hiearchy when display:none was set (which is normal behavior for plug-ins,
        but we have to avoid for the special media proxy plug-in).

        Fix this by plumbing through 'hide' and 'show' methods for the media proxy plug-in,
        which call through to the WebFrameLoaderClient, and remove from and re-add the plug-in's
        view to the global list of plugin views.

        This affects the answer to +[WebPluginController isPluginView:] at just the right times
        to ensure that the media plug-in is not destroyed when we don't want it to be.

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::createRenderer):
        (WebCore::HTMLMediaElement::attach):
        * loader/EmptyClients.h:
        (WebCore::EmptyFrameLoaderClient::hideMediaPlayerProxyPlugin):
        (WebCore::EmptyFrameLoaderClient::showMediaPlayerProxyPlugin):
        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::hideMediaPlayerProxyPlugin):
        (WebCore::FrameLoader::showMediaPlayerProxyPlugin):
        * loader/FrameLoader.h:
        * loader/FrameLoaderClient.h:

2010-05-04  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Kilzer.

        <rdar://problem/7828848> CSS @font-face style linking of SVG fonts causes Mobile Safari to crash

        Merged ToT WebKit r58786.

    2010-05-04  Joseph Pecoraro  <joepeck@webkit.org>

            Reviewed by Dan Bernstein.

            SVG fonts trigger GlyphPage::fill with null font
            https://bugs.webkit.org/show_bug.cgi?id=38530

            SVG fonts do not use the glyph page cache. This change detects when
            attempting to fill a GlyphPage with an SVG font and indicates that
            the glyphs were not available.

            * platform/graphics/GlyphPageTreeNode.cpp:
            (WebCore::fill): helper method which handles attempts to fill a GlyphPage with SVG or non-SVG fonts
            (WebCore::GlyphPageTreeNode::initializePage): use the helper where appropriate

2010-05-04  Joseph Pecoraro  <joepeck@webkit.org>

        <rdar://problem/7928164> REGRESSION (r216813): Characters with stacked diacritics (U+1E00..U+2000) use the complex code path

        Merged ToT WebKit r58426, r58585.

    2010-04-30  Dan Bernstein  <mitz@apple.com>

            Reviewed by Adele Peterson.

            Part of <rdar://problem/6649734> Text repainting does not account for glyphs which draw outside the typographic bounds of the font
            https://bugs.webkit.org/show_bug.cgi?id=6274

            Account for glyph overflow of characters in the range U+1E00..U+2000, but without sending them
            through the complex text code path. Instead, introduce a variant of the fast path that tracks
            glyph overflow.

            * platform/graphics/Font.cpp:
            (WebCore::Font::drawText): Use codePath().
            (WebCore::Font::floatWidth): Use codePath(). Pass the GlyphOverflow pointer through to
            floatWidthForSimpleText() if the code path is SimpleWithGlyphOverflow.
            (WebCore::Font::selectionRectForText): Use codePath().
            (WebCore::Font::offsetForPosition): Ditto.
            * platform/graphics/Font.h: Replaced canUseGlyphCache() with codePath(). Added a GlyphOverflow
            parameter to floatWidthForSimpleText().
            * platform/graphics/FontFastPath.cpp:
            Removed ROMAN_AND_GREEK_DIACRITICS_CAN_USE_GLYPH_CACHE.
            (WebCore::Font::codePath): Renamed canUseGlyphCache() to this. Where it used to return false,
            it now returns Complex. Where it used to return true, it now returns Simple, except for
            the range U+1E00..U+2000, where it now returns SimpleWithGlyphOverflow.
            (WebCore::Font::floatWidthForSimpleText): Added a GlyphOverflow parameter. If not 0, have the
            width iterator account for glyph bounds, then update the GlyphOverflow accordingly.
            * platform/graphics/WidthIterator.cpp:
            (WebCore::WidthIterator::WidthIterator): Added boolean parameter telling the width iterator
            whether to account for glyph bounds. Initialize m_accountForGlyphBounds accordingly. Initialize
            m_maxGlyphBoundingBoxY, m_minGlyphBoundingBoxY, m_firstGlyphOverflow and m_lastGlyphOverflow.
            (WebCore::WidthIterator::advance): If accounting for glyph bounds, update the above member variables.
            * platform/graphics/WidthIterator.h:
            (WebCore::WidthIterator::maxGlyphBoundingBoxY): Added this accessor.
            (WebCore::WidthIterator::minGlyphBoundingBoxY): Ditto.
            (WebCore::WidthIterator::firstGlyphOverflow): Ditto.
            (WebCore::WidthIterator::lastGlyphOverflow): Ditto.

    2010-04-21  Ojan Vafai  <ojan@chromium.org>

            Reviewed by Adele Peterson.

            http://trac.webkit.org/changeset/57215 caused perf/memory regressions
            https://bugs.webkit.org/show_bug.cgi?id=37292

            #if out the canUseGlyphCache Changes from r57215 as they caused a
            8% perf regression on Chromium's international page load tests so that
            the perf regression can be fixed properly without being left in the tree.

            * platform/graphics/FontFastPath.cpp:
            (WebCore::Font::canUseGlyphCache):

2010-05-04  Ada Chan  <adachan@apple.com>

        Reviewed by David Kilzer and Brady Eidson.

        <rdar://problem/7915725> We should truncate the database file to 0 bytes when deleting database

        We can't just delete the database file right away when user deletes the database in Settings
        since other background processes may still be accessing this database.  Deleting the database
        file in this situation would nuke the POSIX file locks, potentially causing the background
        processes to corrupt the new database, and putting SQLite in a bad state.

        So instead of deleting the file, we'll truncate the database file to zero bytes, so any processes
        in the middle of executing commands will get errors.  When Safari is launched next time,
        it'll go through the database files and delete any that are zero bytes.

        * WebCore.iPhone.exp:
        * platform/sql/SQLiteFileSystem.cpp:
        (WebCore::SQLiteFileSystem::truncateDatabaseFile): Use the special SQLITE_TRUNCATE_DATABASE
        sqlite3_file_control option to truncate the file.
        * platform/sql/SQLiteFileSystem.h:
        * storage/Database.cpp:
        (WebCore::Database::performOpenAndVerify): Grab the openDatabaseMutex lock before opening
        any database. This will ensure that databases can be opened only after we are done deleting
        empty database files.
        * storage/DatabaseTracker.cpp:
        (WebCore::DatabaseTracker::deleteDatabaseFile): Instead of the deleting the database file
        immediately, it'll just truncate the file to zero bytes.
        (WebCore::isZeroByteFile):
        (WebCore::DatabaseTracker::deleteDatabaseFileIfEmpty): Check if the file has zero bytes.
        Bail if it does not.  Then lock the database file by setting the locking mode to exclusive
        and execute a read command (SELECT).  At that point, the process holds the shared lock
        to the file and no other process can modify it.  If another process already has an exclusive
        write lock to the file, the read command would fail.  After we make sure the shared lock has
        been acquired, check to make sure the file is still empty, and if so, delete it.
        (WebCore::DatabaseTracker::openDatabaseMutex): Return the lock that would block any open
        database operations until the background task to delete empty database files has finished.
        (WebCore::DatabaseTracker::emptyDatabaseFilesRemovalTaskWillBeScheduled): Acquire the openDatabaseMutex.
        (WebCore::DatabaseTracker::emptyDatabaseFilesRemovalTaskDidFinish): Release the openDatabaseMutex.
        * storage/DatabaseTracker.h:

2010-05-04  Cameron Zwarich  <zwarich@apple.com>

        <rdar://problem/7724115> Going back to a page in the b/f cache has the wrong zoom scale or page width

        Reviewed by David Carson.

        * loader/EmptyClients.h:
        (WebCore::EmptyFrameLoaderClient::forceLayoutWithoutRecalculatingStyles): Added.
        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::commitProvisionalLoad): Call forceLayoutWithoutRecalculatingStyles
        on the FrameLoaderClient rather than directly calling forceLayout on the FrameView. This used
        to call forceLayout on the FrameLoaderClient but switched to calling it on the FrameView as
        an optimization. We still need to run our own platform-specific code here, which does not run
        if it is called directly on the FrameView.
        * loader/FrameLoaderClient.h: Add forceLayoutWithoutRecalculatingStyles method.

2010-05-04  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7941384> Assertion in TimerBase::stop() assumes the WebThread's ID is always 2, which may not always be true

        Reviewed by Ada Chan.

        The assumption that the main thread's ID is always 1 and the
        WebThread's ID is always 2 is doesn't hold when other threads
        are started between the main thread and the WebThread.  The
        assertions in WebCore::TimerBase that assumed this are now
        misfiring, so we must fix the bad assumptions.

        NOTE: This is blocking testing of an Apex/P1, hence it's also an
        Apex/P1 even though it only modifies debugging code.

        * platform/Timer.cpp:
        (WebCore::TimerBase::start): Changed assertion to check that the
        code is running on the main thread or the WebThread and that the
        WebThread is locked.  This mimics what
        JSC::CrossThreadRefCounted::isOwnedByCurrentThread() checks.
        (WebCore::TimerBase::stop): Ditto.
        (WebCore::TimerBase::setNextFireTime): Ditto.

2010-05-03  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/7931463> Typing first emoji character slower by 340ms in Apex

        Reviewed by David Kilzer.

        Getting the file through [NSBundle pathForResource] can be slow,
        especially when you are on the device and the bundle in question
        (WebCore) has around 950 directory entries. So we hardcode the path
        to the file in order to improve performance. We can't do this for the
        simulator since the SDK could be installed anywhere. Also, its not
        really a big perf issue on Macs.

        * platform/graphics/mac/FontMac.mm:
        (WebCore::smileImage):

2010-05-03  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7914237> Update legal text for iPhone-only headers and source

        Reviewed by Greg Bolsinga.

        Per Apple Legal, we are updating the license text used for
        header files (both "static" an generated), but not for source
        files (including *.idl files).

        Note that the TileCache.{h|mm} files did not previously have a
        license statement, so I'm also updating them as well.

        * bindings/scripts/CodeGeneratorJS.pm: Split
        $beginAppleCopyright into $beginAppleCopyrightForHeaderFiles and
        $beginAppleCopyrightForSourceFiles.
        (GenerateHeader): Switched from $beginAppleCopyright to use
        $beginAppleCopyrightForHeaderFiles.
        (GenerateImplementation): Switched from $beginAppleCopyright to
        use $beginAppleCopyrightForSourceFiles.
        * bindings/scripts/CodeGeneratorObjC.pm: Ditto.
        (GenerateHeader): Ditto.
        (GenerateImplementation): Ditto.

        * accessibility/iphone/AccessibilityObjectWrapperIPhone.h:
        Updated license statement.
        * bindings/js/JSTouchConstructor.h: Ditto.
        * bindings/js/JSTouchListConstructor.h: Ditto.
        * bindings/objc/PublicDOMInterfacesIPhone.h: Ditto.
        * dom/DocumentIPhone.h: Ditto.
        * dom/DocumentIPhoneForward.h: Ditto.
        * dom/GestureEvent.h: Ditto.
        * dom/Touch.h: Ditto.
        * dom/TouchEvent.h: Ditto.
        * dom/TouchList.h: Ditto.
        * page/iphone/WebEventRegion.h: Ditto.
        * platform/PlatformTouchEvent.h: Ditto.

        * platform/iphone/TileCache.h: Added header-style license
        statement.
        * platform/iphone/TileCache.mm: Added source-style license
        statement.

2010-04-30  Joseph Pecoraro  <joepeck@webkit.org>

        <rdar://problem/7924417> iPhone: REGRESSION (r57215): ~12MB regression in Membuster high water mark (37936)

        Merged ToT WebKit r58467, r58474.

    2010-04-28  Dan Bernstein  <mitz@apple.com>

            Rubber-stamped by Maciej Stachowiak.

            Try to fix test failures seen on the Leopard build bot after r58467

            * platform/graphics/SimpleFontData.cpp:
            (WebCore::SimpleFontData::platformGlyphInit): Initialize m_zeroWidthSpaceGlyph before
            calling widthForGlyph(), as the latter uses the former.

    2010-04-28  Dan Bernstein  <mitz@apple.com>

            Reviewed by Adele Peterson.

            More of <rdar://problem/7855777> REGRESSION: Memory usage increase caused by storing glyph bounds in GlyphMetricsMap
            https://bugs.webkit.org/show_bug.cgi?id=37936

            Assigning zero width and empty bounds to the ZERO WIDTH SPACE glyph often allocates a width map
            page and a bounds map page for the glyph, each of which pages contains 255 unused entries. Save
            this space by not storing the zero width and empty bounds in the metrics maps.

            * platform/graphics/SimpleFontData.cpp:
            (WebCore::SimpleFontData::SimpleFontData): Initialize m_zeroWidthSpaceGlyph.
            (WebCore::SimpleFontData::platformGlyphInit): Set m_zeroWidthSpaceGlyph. Don’t create entries
            for the ZERO WIDTH SPACE glyph in the width map and in the bounds map.
            * platform/graphics/SimpleFontData.h:
            (WebCore::SimpleFontData::boundsForGlyph): Return empty bounds for the ZERO WIDTH SPACE glyph
            without consulting the bounds map.
            (WebCore::SimpleFontData::widthForGlyph): Return zero for the ZERO WIDTH SPACE glyph without
            consulting the width map.

2010-04-30  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7923633> permissions errors some WebKit headers in Symbols/WebKit

        Reviewed by Pratik Solanki.

        The File::Temp::tempfile() method was creating temp files
        securely (with 0600 permissions) as it should, but this is too
        restrictive for header files built for a framework.  The fix is
        simply to run chmod 0644 on each file after it is processed.

        * scrub-ifdefs.pl: Updated the script to change header file
        permissions to 0644 after processing them.

2010-04-30  Chris Fleizach  <cfleizach@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/7925883> Support ability to use AccessibilityObject::press

        Expose the ability to programatically press an an accessibility object through the iPhone wrapper.

        * accessibility/iphone/AccessibilityObjectWrapperIPhone.mm:
        (-[AccessibilityObjectWrapper accessibilityActivate]):

2010-04-27  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7915306> iPhone: REGRESSION: Scripts can send arbitrary credentials to other origins

        Merged ToT WebKit r58409.

    2010-04-28  Julien Chaffraix  <jchaffraix@webkit.org>

        Reviewed by Alexey Proskuryakov.

        [XHR] Cross-Origin synchronous request with credential raises NETWORK_ERR
        https://bugs.webkit.org/show_bug.cgi?id=37781
        <rdar://problem/7905150>

        Tests: http/tests/xmlhttprequest/access-control-preflight-credential-async.html
               http/tests/xmlhttprequest/access-control-preflight-credential-sync.html

        Rolling the patch in as I could not reproduce Qt results locally.

        * loader/DocumentThreadableLoader.cpp:
        (WebCore::DocumentThreadableLoader::DocumentThreadableLoader): Now we remove the
        credential from the request here to avoid forgetting to do so in the different code path.
        (WebCore::DocumentThreadableLoader::makeSimpleCrossOriginAccessRequest): Just add the
        "Origin" header.
        (WebCore::DocumentThreadableLoader::loadRequest): Check here the the credential have
        been removed so that we don't leak them. Also tweaked a comment to make it clear that
        the URL check has issue when credential is involved.

2010-04-29  Justin Garcia  <justin.garcia@apple.com>

        <rdar://problem/7918904> Assertion !renderer()->needsLayout() fails inserting a Japanese character

        Merging r58551.

    2010-04-29  Justin Garcia  <justin.garcia@apple.com>

        Reviewed by Adele Peterson.

        Need to updateLayout after typing commands too
        https://bugs.webkit.org/show_bug.cgi?id=38352

        Replaced !m_parent checks in EditCommand.cpp by the more descriptive isTopLevelCommand().
        Move the post editing operation updateLayout() call to {un,re}appliedEditing so that text insertions,
        which don't go through EditCommand::{un,re}apply() can benefit from it too.  No test case possible
        since most platforms have a layout performed as a side effect of post operation selection code.

        * editing/EditCommand.cpp:
        (WebCore::EditCommand::apply):
        (WebCore::EditCommand::unapply):
        (WebCore::EditCommand::reapply):
        * editing/EditCommand.h:
        (WebCore::EditCommand::isTopLevelCommand):
        * editing/Editor.cpp:
        (WebCore::Editor::appliedEditing):
        (WebCore::Editor::unappliedEditing):
        (WebCore::Editor::reappliedEditing):

2010-04-29  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Kilzer.

        <rdar://problem/7909020> N90: Apex8A258: Mobile Safari eating up large amounts of %CPU

        Approximate ToT WebKit Merge of r55266 and r56239.

    2010-03-19  Antti Koivisto  <koivisto@iki.fi>

            Reviewed by Simon Hausmann.

            https://bugs.webkit.org/show_bug.cgi?id=36366
            Repaint loop when painting using scaled CTMs with different translations

            The code in RenderBoxModelScaleObserver::shouldPaintBackgroundAtLowQuality
            tests if the scaling has changed from the previous value by comparing the
            transformations. The test fails if the scale is the same but the translation
            changes. This can lead to infinite repaint loop if the document is painted
            in pieces using different translations (for example for tiling).

            * rendering/RenderBoxModelObject.cpp:
            (WebCore::RenderBoxModelScaleObserver::shouldPaintBackgroundAtLowQuality):

    2010-02-25  Oliver Hunt  <oliver@apple.com>

            Reviewed by Simon Fraser.

            Multiple repaints on apple.com
            https://bugs.webkit.org/show_bug.cgi?id=35409

            apple.com was triggering the fast scaling path for background images due to
            repeated repaints as more content came in.  This occured due to a two problems
            in the logic to detect scaling.  The first is that the main context is flipped
            on mac so fails the identity or translation check.  We work around this by adding
            an function that allows the scaling for a flipped CTM.  The other problem was that
            we were looking at the destination rect size instead of the destination tile size
            when deciding if the size we were drawn at would cause scaling.

            * platform/graphics/transforms/AffineTransform.h:
            (WebCore::AffineTransform::isIdentityOrTranslationOrFlipped):
            * rendering/RenderBoxModelObject.cpp:
            (WebCore::RenderBoxModelScaleObserver::shouldPaintBackgroundAtLowQuality):
            (WebCore::RenderBoxModelObject::paintFillLayerExtended):

2010-04-28  Brady Eidson  <beidson@apple.com>

        Reviewed by David Kilzer.

        Part 3 of <rdar://problem/7739494> Apex8A218: Safari Crashes Trying to Use Gmail (HTML5 database issue?)

        * WebCore.base.exp:

        Add the concept of "should run while paused" to DatabaseTasks.  The only time this will be false is
        for new SQLTransactions that haven't run any steps yet:
        * storage/DatabaseTask.cpp:
        (WebCore::DatabaseTask::performTask):
        (WebCore::DatabaseTransactionTask::shouldPerformWhilePaused):
        * storage/DatabaseTask.h:
        (WebCore::DatabaseTask::debugName):
        (WebCore::DatabaseOpenTask::shouldPerformWhilePaused):
        (WebCore::DatabaseCloseTask::shouldPerformWhilePaused):
        (WebCore::DatabaseTableNamesTask::shouldPerformWhilePaused):

        Add the concept of a "paused queue" to the DatabaseThread, which is where all ineligible tasks go
        if they're pulled off the main queue while databases are paused:
        * storage/DatabaseThread.cpp:
        (WebCore::DatabaseThread::DatabaseThread):
        (WebCore::DatabaseThread::requestTermination): Kill the pause queue, also.
        (WebCore::DatabaseUnpauseTask::create): DatabaseUnpauseTask goes into the main queue when the database is unpaused
          and handles running the pause.
        (WebCore::DatabaseUnpauseTask::shouldPerformWhilePaused):
        (WebCore::DatabaseUnpauseTask::DatabaseUnpauseTask):
        (WebCore::DatabaseUnpauseTask::doPerformTask):
        (WebCore::DatabaseUnpauseTask::debugTaskName):
        (WebCore::DatabaseThread::setPaused): Update the paused flag and schedule a DatabaseUnpauseTask if appropriate.
        (WebCore::DatabaseThread::handlePausedQueue): Empty the pause queue only if the thread is still unpaused.
          Otherwise, put the tasks back in the pause queue.
        (WebCore::DatabaseThread::databaseThread): If the thread is paused and a task is not pause-eligible, move it to
          the pause queue, instead.
        * storage/DatabaseThread.h:

        * storage/DatabaseTracker.cpp:
        (WebCore::DatabaseTracker::setDatabasesPaused): Walk all DatabaseThreads and update their paused flag.
        * storage/DatabaseTracker.h:

        * storage/SQLTransaction.cpp:
        (WebCore::SQLTransaction::shouldPerformWhilePaused): Only run while paused if the transaction has already started.
        * storage/SQLTransaction.h:

2010-04-28  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Kilzer.

        <rdar://problem/7909020> N90: Apex8A258: Mobile Safari eating up large amounts of %CPU

        Merged ToT WebKit r54429, r54483, r54484, r54485, r54486, r54487, r54489, r54491, r54492.

        Only r54483 contained meaningful WebCore changes, the rest of the changes
        just update tests but will make subsequent ToT merges much easier. As
        expected all SVG tests required an update due to changes in the DRT output.

    2010-02-08  Nikolas Zimmermann  <nzimmermann@rim.com>

            Reviewed by Dirk Schulze.

            All SVG *-expected.txt files contain wrong results
            https://bugs.webkit.org/show_bug.cgi?id=34703

            Finally dump meaningful information for SVG layout tests.
            Use 'absoluteClippedOverflowRect' which goes through the same code paths used
            to actually calculate repaint rects etc - instead of the legacy CSS-unaware
            code path that mapped 'repaintRectInLocalCoordinates' through 'absoluteTransform'.
            Remove absoluteTransform() - a long standing TODO, finally not needed anymore.

            Despite SVGRenderTreeAsText, SVGPaintServerGradient was also using absoluteTransform().
            Rewrite the code in question, fixing svg/W3C-SVG-1.1/pserver-grad-08-b.svg alignment issues
            when scaling/panning text using gradient on stroke/fill. Affects some other gradient tests as well.

            As we're now dumping clipped overflow rects any problems with repaint rects will become
            immediate visible - it turns out we're not supporting the overflow rules on the outermost <svg>
            element properly (repaint rects and bounding boxes need to take special SVG overflow rules into account).
            Fixing that magically gives pixel-perfect clipped overflow rects for all types of shapes/text/containers.

            Note: This will break any overriden platform-specific SVG results, need to wait for build bots in order to update them.

            * rendering/RenderObject.cpp: Remove absoluteTransform() method, centralize overflow query code in SVGRenderSupport::isOverflowHidden().
            * rendering/RenderObject.h: Remove absoluteTransform() method.
            * rendering/RenderSVGHiddenContainer.h: Ditto.
            * rendering/RenderSVGRoot.cpp:
            (WebCore::RenderSVGRoot::paint): Use SVGRenderSupport::isOverflowHidden() to query SVG overflow mode.
            (WebCore::RenderSVGRoot::computeRectForRepaint): Respect SVG overflow rules here: clip repaintRect against overflow rect _before_ passing
                                                             along to RenderBox. This is the key issue behind wrong absoluteClippedOverflowRect() values.
            (WebCore::RenderSVGRoot::nodeAtPoint): Use SVGRenderSupport::isOverflowHidden() to query SVG overflow mode.
            * rendering/RenderSVGRoot.h: Remove absoluteTransform(). Don't expose viewportSize() anymore.
            * rendering/RenderSVGText.cpp:
            (WebCore::RenderSVGText::strokeBoundingBox): Fix default stroke width to 1. This was the only wrong place -> fixes repaint rects for stroked text.
            * rendering/RenderSVGViewportContainer.cpp: Remove absoluteTransform() method.
            (WebCore::RenderSVGViewportContainer::pointIsInsideViewportClip): Use SVGRenderSupport::isOverflowHidden() to query SVG overflow mode.
            * rendering/RenderSVGViewportContainer.h: Remove absoluteTransform() method.
            * rendering/SVGRenderSupport.cpp: Refactored overflow queries in one place, centralizing SVG specific assumptions about overflowX/Y.
            (WebCore::SVGRenderBase::isOverflowHidden):
            * rendering/SVGRenderSupport.h:
            * rendering/SVGRenderTreeAsText.cpp: Dump absoluteClippedOverflowRect() instead of absoluteTransform().mapRect(repaintRectInLocalCoordinates()).
            (WebCore::writePositionAndStyle): Affects all layout tests dumping render trees.
            * svg/graphics/SVGPaintServerGradient.cpp: Rewrite Gradient on text fill/stroke support on Cg, to avoid using absoluteTransform().
            (WebCore::absoluteTransformForRenderer):
            (WebCore::createMaskAndSwapContextForTextGradient):
            (WebCore::clipToTextMask):
            (WebCore::SVGPaintServerGradient::setup):

    2010-02-05  Csaba Osztrogonác  <ossy@webkit.org>

            Reviewed by Dirk Schulze.
            Rubber-stamped by Kenneth Rohde Christiansen.

            [Qt] Modifying SVG path dumping to equal to other ports
            https://bugs.webkit.org/show_bug.cgi?id=33784

            * platform/graphics/qt/PathQt.cpp:
            (WebCore::Path::debugString): Path dumping style is aproached to Mac.

2010-04-28  Brady Eidson  <beidson@apple.com>

        Reviewed by Greg Bolsinga and David Kilzer.

        Part 2 of <rdar://problem/7739494> Apex8A218: Safari Crashes Trying to Use Gmail (HTML5 database issue?)

        Tracks the total number of in-progress transactions.
        Any time a transaction is in progress, WebKit is notified and can start a background task to give them
        a chance to complete.

        Let DatabaseTracker notify its client (on the main thread) when any transactions are in progress:
        * storage/DatabaseTracker.cpp:
        (WebCore::DatabaseTracker::willBeginFirstTransaction):
        (WebCore::DatabaseTracker::didFinishLastTransaction):
        (WebCore::DatabaseTracker::notifyWillBeginFirstTransaction):
        (WebCore::DatabaseTracker::notifyDidFinishLastTransaction):
        * storage/DatabaseTracker.h:

        Add client methods for willBeginFirstTransation and didFinishLastTransaction:
        * storage/DatabaseTrackerClient.h:

        * storage/SQLTransaction.cpp:
        (WebCore::SQLTransaction::checkAndHandleClosedDatabase): Drop the transaction count when the transaction
          is closed.
        (WebCore::SQLTransaction::openTransactionAndPreflight): Bump the transaction count when starting.
        (WebCore::SQLTransaction::postflightAndCommit):  Drop the transaction count when the transaction is closed.
        (WebCore::SQLTransaction::cleanupAfterTransactionErrorCallback):  Drop the transaction count when the
          transaction is closed.
        (WebCore::transactionInProgressMutex):
        (WebCore::SQLTransaction::incrementTransactionInProgressCount): Atomically bump the transaction count and
          notify the DatabaseTracker if it just went from 0 to 1.
        (WebCore::SQLTransaction::decrementTransactionInProgressCount): Atomically drop the transaction count and
          notify the DatabaseTracker if it just went from 1 to 0.
        * storage/SQLTransaction.h:

2010-04-28  Yongjun Zhang  <yongjun_zhang@apple.com>

        Reviewed by Pratik Solanki and David Carson.

        <rdar://problem/7888824> mobilesafari crash low memory

        * WebCore.iPhone.exp: export function Cache::pruneLiveResources(bool)

2010-04-28  Greg Bolsinga  <bolsinga@apple.com>

        <rdar://problem/7890009> SVG background-image is distorted after zoom on iPad and iPhone 4.0

        Merged ToT WebKit r58375.

    2010-04-27  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by the inimitable Dan Bernstein.

        SVG as background image renders incorrectly after zooming
        https://bugs.webkit.org/show_bug.cgi?id=38215

        When doing a partial redraw of an SVGImage used as a CSS background
        image, we're limited to drawing the entire Frame, clipped to the dirty rect.
        Because of this, we need to fix up the CTM so that the origin is at the
        top left of the unclipped image, rather than the top left of the
        portion being redrawn.

        Test: fast/images/svg-background-partial-redraw.html

        * svg/graphics/SVGImage.cpp:
        (WebCore::SVGImage::draw):

2010-04-27  Ada Chan  <adachan@apple.com>

        Reviewed by David Kilzer and Brady Eidson.

        <rdar://problem/7838548> Where possible, replace use of CPDistributedMessagingCenter with Darwin CFNotificationCenter

        Instead of sending CPDistributedMessagingCenter notifications that contain information about which database
        or origin was deleted, we'll send Darwin notifications with no payload to indicate that some database or
        origin has been deleted.

        When we are notified that some database has been deleted, we'll go through each opened database in
        the DatabaseTracker and check if it still exists in the database and if the database file is still
        current.  If not, we'll mark it deleted and close it.

        When we are notified that some origin has been deleted, we'll get the current list of origins and compare
        with what are currently in the quota map.  We'll remove any origins that are no longer in the current list
        and add any that are in the current list but not in the quota map.

        * WebCore.iPhone.exp:
        * storage/DatabaseTracker.cpp:
        (WebCore::DatabaseTracker::deleteOrigin): Call DatabaseTrackerClient::dispatchDidDeleteDatabaseOrigin()
        which will send a Darwin notification to notify other apps that an origin has been deleted.
        (WebCore::DatabaseTracker::deleteDatabase): Call DatabaseTrackerClient::dispatchDidDeleteDatabase()
        which will send a Darwin notification to notify other apps that a database has been deleted.
        (WebCore::DatabaseTracker::originsDidChange): Collect all the origins from the quota map into a HashSet.
        Go through the up-to-date list of origins.  For any that's already in the quota map, remove it from the hash
        set.  If it's not in the quota map, add it to the quota map.  In the end, any origins that are left in
        the hash set are not tracked anymore and should be removed from the tracker.
        (WebCore::DatabaseTracker::removeDeletedOpenedDatabases): Go through all the opened databases and check
        if they still exist and if their database files are still current.  If not, mark them as deleted and close them.
        * storage/DatabaseTracker.h:
        * storage/DatabaseTrackerClient.h:

2010-04-27  Eric Carlson  <eric.carlson@apple.com>

        Reviewed by David Carson.

        <rdar://problem/7901866>
        Thumbnail/poster images missing from Akamai iPhone Showcase after recent bug fix

        The plug-in should only be created once.

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::createMediaPlayerProxy): Bail if m_proxyWidget is non-NULL.

2010-04-27  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7910250> iPhone: Render application/json as text/plain and not render as html (37358)

        Merged ToT WebKit r57386.

    2010-04-09  Abhishek Arya  <inferno@chromium.org>

        Reviewed by Adam Barth.

        Prevent HTTP responses served with JSON content type from being rendered as HTML.

        Test: http/tests/security/xss-DENIED-mime-type-execute-as-html.html

        * dom/DOMImplementation.cpp:
        (WebCore::DOMImplementation::isTextMIMEType): Render application/json as text/plain.
        * platform/MIMETypeRegistry.cpp:
        (WebCore::initializeSupportedNonImageMimeTypes): Add a compile assert to prevent addition of new mime types in non-image types.

2010-04-27  Joseph Pecoraro  <joepeck@webkit.org>

        <rdar://problem/7907616> <input type="search"> with uneven padding causes text clipping

        Merged ToT WebKit r58313.

    2010-04-27  Joseph Pecoraro  <joepeck@webkit.org>

            Reviewed by Dan Bernstein.

            <input type="search"> with uneven padding causes text clipping
            https://bugs.webkit.org/show_bug.cgi?id=38160

            Test: fast/css/input-search-padding.html

            An <input type="search"> contains an inner block, which is explicitly
            centered in RenderTextControlSingleLine based on the height of the element.
            However, the clipping rect was not using the set location, and instead
            calculated off of the top border and padding alone. This also vertically
            centers the Caps Lock indicator.

            * rendering/RenderTextControl.cpp: moved controlClipRect implementation to RenderTextControlSingleLine
            * rendering/RenderTextControl.h: allow a subclass implementation of controlClipRect, removed redundant hasControlClip implementation, and moved controlClipRect
            * rendering/RenderTextControlSingleLine.cpp:
            (WebCore::RenderTextControlSingleLine::paint): vertically center the Caps Lock indicator
            (WebCore::RenderTextControlSingleLine::controlClipRect): use the set location of the anonymous inner block instead
            * rendering/RenderTextControlSingleLine.h: allow for an implementation of controlClipRect for <input type="search">

2010-04-27  Cameron Zwarich  <zwarich@apple.com>

        <rdar://problem/7901387> Crash in UIStringDrawing referencing GraphicsContext

        Reviewed by Andre Boule.

        A number of UIKit sizing methods call into WAKStringDrawing.mm code without calling
        WKSetCurrentGraphicsContext(), which causes the string drawing code to retain a possibly
        deleted object from a stale pointer. The fix is to not create a WebCore GraphicsContext
        (which is what retains the CGContextRef) when there is no drawing being done.

        This is a speculative fix, but hopefully it works.

        * wak/WAKStringDrawing.mm:
        (-[NSString __web_drawAtPoint:forWidth:withFont:ellipsis:letterSpacing:includeEmoji:measureOnly:]):
        Moved the creation of a WebCore GraphicsContext beneath a check for whether text is being drawn
        rather than only measured.
        (-[NSString _web_stringForWidth:withFont:ellipsis:letterSpacing:includeEmoji:]): Removed creation
        of WebCore GraphicsContext, since it is never used.

2010-04-26  Yongjun Zhang  <yongjun_zhang@apple.com>

        <rdar://problem/7829037> regression: crash when supply no credentials

        Merged ToT WebKit r58264.

    2010-04-26  Yongjun Zhang  <yongjun_zhang@apple.com>

        Reviewed by Alexey Proskuryakov.

        https://bugs.webkit.org/show_bug.cgi?id=38128
        Don't add empty credential to CredentialStorage.

        An empty credential is currently regarded as a invalid login because it means a missing value in
        protectionSpaceToCredentialMap.  This change makes it consistent with current WebCore's behavior
        by ignoring empty credentials.

        No new tests added since this only affects credential entered by user from credential dialog,
        which is not testable in DRT.

        * platform/network/mac/ResourceHandleMac.mm:
        (WebCore::ResourceHandle::receivedCredential):

2010-04-26  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7910018> iPhone: Cross-origin bypass: Javascript URL can be set as iframe.src via multiple DOM aliases (37031)

        Merged ToT WebKit r57627.

        NOTE: Changes to WebCore/bindings/v8 were not merged.

    2010-04-14  Justin Schuh  <jschuh@chromium.org>

        Reviewed by Adam Barth.

        Javascript URL can be set as iframe.src via multiple DOM aliases
        https://bugs.webkit.org/show_bug.cgi?id=37031

        Moved frame/iframe checks from Attr to Node on inherited members.
        Node child manipulation methods now return NOT_SUPPORTED_ERR if used
        on a frame/iframe src attribute.
        NamedNodeMap set methods now perform frame/iframe src checks.
        Moved allowSettingSrcToJavascriptURL static helper function from
        JSElementCustom.cpp to exported function in JSDOMBinding.h.

        * bindings/js/JSAttrCustom.cpp:
        (WebCore::JSAttr::setValue):
        * bindings/js/JSDOMBinding.cpp:
        (WebCore::allowSettingSrcToJavascriptURL):
        * bindings/js/JSDOMBinding.h:
        * bindings/js/JSElementCustom.cpp:
        * bindings/js/JSNamedNodeMapCustom.cpp:
        (WebCore::JSNamedNodeMap::setNamedItem):
        (WebCore::JSNamedNodeMap::setNamedItemNS):
        * bindings/js/JSNodeCustom.cpp:
        (WebCore::isAttrFrameSrc):
        (WebCore::JSNode::setNodeValue):
        (WebCore::JSNode::setTextContent):
        (WebCore::JSNode::insertBefore):
        (WebCore::JSNode::replaceChild):
        (WebCore::JSNode::removeChild):
        (WebCore::JSNode::appendChild):
        * bindings/v8/custom/V8AttrCustom.cpp:
        * bindings/v8/custom/V8NamedNodeMapCustom.cpp:
        (WebCore::V8NamedNodeMap::setNamedItemNSCallback):
        (WebCore::V8NamedNodeMap::setNamedItemCallback):
        (WebCore::toV8):
        * bindings/v8/custom/V8NodeCustom.cpp:
        (WebCore::isFrameSrc):
        (WebCore::V8Node::textContentAccessorSetter):
        (WebCore::V8Node::nodeValueAccessorSetter):
        (WebCore::V8Node::insertBeforeCallback):
        (WebCore::V8Node::replaceChildCallback):
        (WebCore::V8Node::removeChildCallback):
        (WebCore::V8Node::appendChildCallback):
        * dom/Attr.idl:
        * dom/NamedNodeMap.idl:
        * dom/Node.idl:

2010-04-26  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7909936> REGRESSION (r47291): XHR allows arbitrary XSRF across domains (36843)

        Merged ToT WebKit r57041.

    2010-04-02  Justin Schuh  <jschuh@chromium.org>

        Reviewed by Alexey Proskuryakov.

        XHR allows arbitrary XSRF across domains
        https://bugs.webkit.org/show_bug.cgi?id=36843

        Added a one-line change to prevent bypassing the XDC check on
        synchronous preflighted requests. Added layout tests to cover
        variations of this problem.

        Tests: http/tests/xmlhttprequest/access-control-preflight-async-header-denied.html
               http/tests/xmlhttprequest/access-control-preflight-async-method-denied.html
               http/tests/xmlhttprequest/access-control-preflight-sync-header-denied.html
               http/tests/xmlhttprequest/access-control-preflight-sync-method-denied.html

        * loader/DocumentThreadableLoader.cpp:
        (WebCore::DocumentThreadableLoader::preflightFailure):

2010-04-26  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7909843> iPhone: Cross-origin image theft via SVGs as a canvas pattern (36838)

        Merged ToT WebKit r56810.

    2010-03-30  Chris Evans  <cevans@chromium.org>

        Reviewed by Adam Barth.

        Taint the canvas if an SVG-derived pattern is rendered into it.

        https://bugs.webkit.org/show_bug.cgi?id=36838

        Test: fast/canvas/svg-taint.html

        * html/canvas/CanvasRenderingContext2D.cpp:
        (WebCore::CanvasRenderingContext2D::createPattern):
          Take into account the image's hasSingleSecurityOrigin() property.

2010-04-26  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7909752> iPhone: Cross-origin bypass: iFrame.src can be set to a JavaScript URL via nodeValue or textContent (36502)

        Merged ToT WebKit r56651.

    2010-03-26  Justin Schuh  <jschuh@chromium.org>

        Reviewed by Adam Barth.

        Security: iFrame.src accepts JavaScript URL via nodeValue or textContent
        https://bugs.webkit.org/show_bug.cgi?id=36502

        Overrode inherited nodeValue and textContent in Attr.idl so they proxy
        to value, which performs a security check.

        Test: http/tests/security/xss-DENIED-iframe-src-alias.html

        * bindings/js/JSAttrCustom.cpp:
        (WebCore::JSAttr::nodeValue):
        (WebCore::JSAttr::setNodeValue):
        (WebCore::JSAttr::textContent):
        (WebCore::JSAttr::setTextContent):
        * bindings/v8/custom/V8AttrCustom.cpp:
        (WebCore::V8Attr::nodeValueAccessorSetter):
        (WebCore::V8Attr::nodeValueAccessorGetter):
        (WebCore::V8Attr::textContentAccessorSetter):
        (WebCore::V8Attr::textContentAccessorGetter):
        * dom/Attr.idl:

2010-04-26  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7909015> iPhone: Abuse of libxml API leads to OOB pointer access in libxml (36000)

        Merged ToT WebKit r56420.

    2010-03-23  Chris Evans  <cevans@chromium.org>

        Reviewed by Darin Adler.

        Fix hard-to-see crash due to incorrect libxml API usage.

        https://bugs.webkit.org/show_bug.cgi?id=36000

        Test: fast/text/bad-encoding.html

        * dom/XMLTokenizerLibxml2.cpp:
        (WebCore::XMLTokenizer::doEnd): Avoid operations on a closed context.

2010-04-26  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7908977> iPhone: Need another parent check after Document::removeFocusedNodeOfSubtree (35818)

        Merged ToT WebKit r55783.

    2010-03-05  Dimitri Glazkov  <dglazkov@chromium.org>

        Reviewed by Sam Weinig.

        Add one more parent check during node removal.
        https://bugs.webkit.org/show_bug.cgi?id=35818

        Test: fast/dom/Node/mutation-blur.html

        * dom/ContainerNode.cpp:
        (WebCore::ContainerNode::removeChild): Added check.

2010-04-26  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7902397> iPhone: Arbitrary Code Execution in WebCore::FontFallbackList::determinePitch (38001)

        Merged ToT WebKit r58201.

    2010-04-23  Dan Bernstein  <mitz@apple.com>

        Reviewed by Simon Fraser.

        <rdar://problem/7898436> :after content is duplicated

        Test: fast/css-generated-content/after-duplicated-after-split.html

        * rendering/RenderInline.cpp:
        (WebCore::RenderInline::splitInlines): Pass the correct owner of the child list.

2010-04-26  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7874294> iPhone: CSS hover adjacent sibling display (http://test.davebowker.com/rn-hover/) (Crash Reproducible) (29635)

        Merged ToT WebKit r57759, r57817.

    2010-04-19  Dan Bernstein  <mitz@apple.com>

        Reviewed by Darin Adler.

        Make the fix for <rdar://problem/7873647> from r57759 more robust.

        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::updateHoverActiveState): Use RefPtrs for the Nodes.

    2010-04-16  Dan Bernstein  <mitz@apple.com>

        Reviewed by Simon Fraser.

        <rdar://problem/7873647> Crash when updating hover state

        Test: fast/dynamic/hover-style-recalc-crash.html

        Updating the hover state of an element caused the document to need style
        recalc, and then updating the hover state of a link caused style recalc,
        which changed the render tree while updateHoverActiveState() was iterating
        over it, leading to a crash.

        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::updateHoverActiveState): Collect the nodes to be
        updated into vectors, then update their active and hover states.

2010-04-26  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7826965> iPhone: CSSPrimitiveValue::setFloatValue() doesn’t throw an exception if a non-number unit type is passed (36680)

        Merged ToT WebKit r56663.

    2010-03-27  Mark Rowe  <mrowe@apple.com>

        Reviewed by Darin Adler.

        CSSPrimitiveValue::setFloatValue/setStringValue should throw an exception if passed an incorrect unit type.
        <http://webkit.org/b/36680> / <rdar://problem/7801016>

        Test: fast/dom/setPrimitiveValue-exceptions.html

        * css/CSSPrimitiveValue.cpp:
        (WebCore::CSSPrimitiveValue::setFloatValue): Throw an INVALID_ACCESS_ERR if either of our type or the passed-in
        type is not a numeric type.
        (WebCore::CSSPrimitiveValue::setStringValue): Throw an INVALID_ACCESS_ERR if either of our type or the passed-in
        type is not a string type.

2010-04-26  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/7907736> Merge r56543 from WebKit TOT to fix AdLib animation issues

        Merged ToT WebKit r56543.

    2010-03-25  Simon Fraser  <simon.fraser@apple.com>

            Reviewed by Adele Peterson.

            https://bugs.webkit.org/show_bug.cgi?id=35714
            Computed style on delayed transform animations is incorrect

            When fetching computed style while a delayed accelerated animation is in effect,
            we would get the value form the first keyframe, rather than getting the current
            style.

            Fix by checking to see whether we've in the delay phase (with no backwards-fill)
            in KeyframeAnimation::getAnimatedStyle().

            Test: compositing/animation/computed-style-during-delay.html

            * page/animation/KeyframeAnimation.cpp:
            (WebCore::KeyframeAnimation::getAnimatedStyle):

2010-04-26  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Greg Bolsinga.

        <rdar://problem/7830677> Extreme performance regression in Pie Guy web app (opacity animations running in software).

        r45309 on WebKit TOT changed the behavior of opacity animations so that they don't, in isolation, trigger
        compositing mode. This cause a performance regression on http://mrgan.com/pieguy/, since it has an opacity
        animation that runs before any other compositing triggers.

        So revert the behavior for iPhone, such that opacity animations do trigger compositing.

        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::requiresCompositingForAnimation):

2010-04-25  Enrica Casucci  <enrica@apple.com>

        <rdar://problem/7855777> REGRESSION (r57215): ~12MB regression in Membuster high water mark (37936)

        Merged ToT WebKit r58192.

        2010-04-23  Adele Peterson  <adele@apple.com>

        Reviewed by Dan Bernstein.

            Fix for <rdar://problem/7855777> REGRESSION: Memory usage increase caused by storing glyph bounds in GlyphMetricsMap
            https://bugs.webkit.org/show_bug.cgi?id=37936

            This change breaks the GlyphMetricsMap into two maps - one for width and one for bounds, so that we don't store
            a FloatRect for the glyph bounds unless we need to.

            Covered by existing tests.  This should not cause any change in functionality.

            Updated for removal of GlyphMetricsMap.cpp
            * Android.mk:
            * GNUmakefile.am:
            * WebCore.gypi:
            * WebCore.vcproj/WebCore.vcproj:
            * WebCore.xcodeproj/project.pbxproj:

            Made GlyphMetricsMap a template, so it can be used for separate width and bounds maps.
            * platform/graphics/GlyphMetricsMap.cpp: Removed.
            * platform/graphics/GlyphMetricsMap.h:
            (WebCore::GlyphMetricsMap::metricsForGlyph):
            (WebCore::GlyphMetricsMap::setMetricsForGlyph):
            (WebCore::GlyphMetricsMap::GlyphMetricsPage::metricsForGlyph):
            (WebCore::GlyphMetricsMap::GlyphMetricsPage::setMetricsForGlyph):
            (WebCore::GlyphMetricsMap::GlyphMetricsPage::setMetricsForIndex):
            (WebCore::::unknownMetrics):
            (WebCore::::locatePageSlowCase):

            * platform/graphics/mac/ComplexTextController.cpp: (WebCore::ComplexTextController::adjustGlyphsAndAdvances):
            Call boundsForGlyph instead of metricsForGlyph.
            * platform/graphics/win/UniscribeController.cpp: (WebCore::UniscribeController::shapeAndPlaceItem):
            ditto.
            * platform/graphics/SimpleFontData.cpp: (WebCore::SimpleFontData::platformGlyphInit):
            Call setMetricsForGlyph for both glyph maps.

            Break getters and setters for metricsForGlyph into widthForGlyph and boundsForGlyph, maintaining present behavior.
            * platform/graphics/SimpleFontData.h:
            (WebCore::):
            (WebCore::SimpleFontData::boundsForGlyph):
            (WebCore::SimpleFontData::widthForGlyph):
            * platform/graphics/cairo/SimpleFontDataCairo.cpp:
            (WebCore::SimpleFontData::platformBoundsForGlyph):
            (WebCore::SimpleFontData::platformWidthForGlyph):
            * platform/graphics/chromium/SimpleFontDataChromiumWin.cpp:
            (WebCore::SimpleFontData::platformBoundsForGlyph):
            (WebCore::SimpleFontData::platformWidthForGlyph):
            * platform/graphics/chromium/SimpleFontDataLinux.cpp:
            (WebCore::SimpleFontData::platformBoundsForGlyph):
            (WebCore::SimpleFontData::platformWidthForGlyph):
            * platform/graphics/gtk/SimpleFontDataPango.cpp:
            (WebCore::SimpleFontData::platformBoundsForGlyph):
            (WebCore::SimpleFontData::platformWidthForGlyph):
            * platform/graphics/mac/SimpleFontDataMac.mm:
            (WebCore::SimpleFontData::platformBoundsForGlyph):
            (WebCore::SimpleFontData::platformWidthForGlyph):
            * platform/graphics/win/SimpleFontDataCGWin.cpp:
            (WebCore::SimpleFontData::platformBoundsForGlyph):
            (WebCore::SimpleFontData::platformWidthForGlyph):
            * platform/graphics/win/SimpleFontDataCairoWin.cpp:
            (WebCore::SimpleFontData::platformBoundsForGlyph):
            * platform/graphics/win/SimpleFontDataWin.cpp:
            (WebCore::SimpleFontData::boundsForGDIGlyph):
            (WebCore::SimpleFontData::widthForGDIGlyph):
            * platform/graphics/wince/SimpleFontDataWince.cpp:
            (WebCore::SimpleFontData::platformBoundsForGlyph):
            * platform/graphics/wx/SimpleFontDataWx.cpp:
            (WebCore::SimpleFontData::platformBoundsForGlyph):
            (WebCore::SimpleFontData::platformWidthForGlyph):

2010-04-24  Andre Boule  <aboule@apple.com>

        Reviewed by cameron zwarich.

        <rdar://problem/7894111> UILabel is clipping descenders, text measuring code not reporting correct size

        Jason's patch unintentionally changed the multi-line string drawing/measuring height calculation path
        to always force the custom lineSpacing path. There is some goofyness in our system font which caused this
        regression : lineHeight != ascent - descent + linegap. This is supposed to be true and if it was,
        there wouldn't be a problem. But it isn't, and we have to live with that, so for now, I am reverting
        our size calculation to the old path that it was since at least back to OS 3.x.

        *  wak/WAKStringDrawing.mm:

2010-04-24  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by Paul Knight.

        <rdar://problem/7542676> iPhone WebKit should not have ENABLE(DATALIST) defined

        * Configurations/FeatureDefines.xcconfig: Turn off DATALIST for iPhone.

2010-04-23  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7901486> Disable WebSockets since the standard is still in flux

        Reviewed by Paul Knight.

        * Configurations/FeatureDefines.xcconfig: Disabled web sockets
        for iPhone OS and iPhone Simulator builds.

2010-04-23  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Carson.

        <rdar://problem/7890075> Unbalanced pagehide when hibernating a paused (withEvents) tab document.

        Ensure that pagehide and pageshow events are always balanced by
        preventing duplicate dispatches of the events. Balance in DOMWindow
        because all dispatches of these events goes though this path.

        * page/DOMWindow.cpp:
        (WebCore::DOMWindow::DOMWindow): default status to PageStatusNone
        (WebCore::DOMWindow::dispatchEvent): balance pagehide / pageshow events
        * page/DOMWindow.h: added PageStatus enum type and instance variable

2010-04-23  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7697454> Only sniff MIME types for the main resource (Lots of time spent in -[NSURLResponse(WebCoreURLResponse) adjustMIMETypeIfNecessary])

        Merged ToT WebKit r58158.

        Backed out iPhone WebKit r220401.

        * platform/network/iphone/WebCoreURLResponseIPhone.mm: Backed
        out iPhone-specific change in favor of ToT WebKit fix.

    2010-04-23  David Kilzer  <ddkilzer@apple.com>

        <http://webkit.org/b/38032> No need to content sniff 304 responses
        <rdar://problem/7891726>

        Reviewed by Brady Eidson.

        * platform/network/mac/ResourceHandleMac.mm:
        (-[WebCoreResourceHandleAsDelegate connection:didReceiveResponse:]):
        No need to adjust the MIME type on 304 responses since they're
        only used to determine if the resource needs to be refetched.


2010-04-23  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/7876387> iPhone 4.0 Safari regression: Lots of glitches with CSS animations in jqTouch

        Merged ToT WebKit r58186.

    2010-04-23  Simon Fraser  <simon.fraser@apple.com>

            Reviewed by Dan Bernstein.
            When webkitAnimationEnd event fires, on-screen rendering should show the last frame of animation
            https://bugs.webkit.org/show_bug.cgi?id=37955

            After r37484, animation and transition end events were fired on a timer, after the animation/transition
            ended. This opened up one event loop cycle in which the non-animating state of the element was visible
            before the event fired, resulting in flashes in content that reset style from the event handler.

            Fix by firing these events in the same event cycle as the animation end, once all animations
            have been updated. This also required moving the place that start animations are fixed until
            a later state in the state machine, so that animations have their start time set at the point
            the event is fired (to avoid an assertion when using the freeze API in DRT).

            Not testable, since the flash is very transitory and cannot be captured in a pixel test.

            * page/animation/AnimationBase.cpp:
            (WebCore::AnimationBase::updateStateMachine): Move the firing of 'start' events into the state
            where the start time is known.
            * page/animation/AnimationControllerPrivate.h:
            * page/animation/AnimationController.cpp:
            (WebCore::AnimationControllerPrivate::updateStyleIfNeededDispatcherFired): Call the new fireEventsAndUpdateStyle()
            method.
            (WebCore::AnimationControllerPrivate::fireEventsAndUpdateStyle): New method to share code that used to be in
            updateStyleIfNeededDispatcherFired().
            (WebCore::AnimationControllerPrivate::animationTimerFired): Call fireEventsAndUpdateStyle() once we've
            processed all animations.

2010-04-23  Simon Fraser  <simon.fraser@apple.com>

        Prerequisite to fixing
        <rdar://problem/7876387> iPhone 4.0 Safari regression: Lots of glitches with CSS animations in jqTouch

        Merged ToT WebKit r56286 and r56296.

    2010-03-19  Chris Marrin  <cmarrin@apple.com>

            Reviewed by Simon Fraser.

            Fixed a crash with AnimationController getting deleted out from under itself.

            It's possible for the Frame that owns an AnimationController to get deleted
            in the EndTransitionEvent (or other animation events) to get deleted in the
            event handler. Normally this case is protected against by preventing the Frame
            from getting deleted until the end of the runloop. But native uses of the
            WebView can subvert this protection. So I added a protector to the
            animation event dispatcher to protect it in those cases.

            Test: transitions/transition-end-event-destroy-iframe.html

            * page/animation/AnimationController.cpp:
            (WebCore::AnimationControllerPrivate::updateStyleIfNeededDispatcherFired):

2010-04-23  Simon Fraser  <simon.fraser@apple.com>

        Prerequisite to fixing
        <rdar://problem/7876387> iPhone 4.0 Safari regression: Lots of glitches with CSS animations in jqTouch

        Merged ToT WebKit r58185.

    2010-04-23  Simon Fraser  <simon.fraser@apple.com>

            Reviewed by Dan Bernstein.

            CompositeAnimation::updateKeyframeAnimations() can make a KeyframeAnimation for animation "none"
            https://bugs.webkit.org/show_bug.cgi?id=38017

            Check to see if the animation name is "none", and don't fire off a keyframe animation in
            that case.

            * page/animation/CompositeAnimation.cpp:
            (WebCore::CompositeAnimation::updateKeyframeAnimations):

2010-04-23  Simon Fraser  <simon.fraser@apple.com>

        Prerequisite to fixing
        <rdar://problem/7876387> iPhone 4.0 Safari regression: Lots of glitches with CSS animations in jqTouch

        Merged ToT WebKit r56562.

    2010-03-25  Simon Fraser  <simon.fraser@apple.com>

            Reviewed by Geoffrey Garen.

            https://bugs.webkit.org/show_bug.cgi?id=36557
            Animations use the wrong timing-function sometimes

            Fix an issue where animations picked the wrong style for their "unanimated" value.

            Previously, the "unanimated" style was considered to be the style before the animation
            was applied. This caused us to pick up stale values for animation timing functions, for
            blending when a property is missing from the first keyframe, and for resuming transitions
            once an animation ends.

            Instead, we need to use the "current" style, which is the one that causes the animation
            to kick off.

            Tests: animations/longhand-timing-function.html
                   animations/transition-and-animation-3.html
                   animations/unanimated-style.html

            * page/animation/CompositeAnimation.cpp:
            (WebCore::CompositeAnimation::updateKeyframeAnimations):

2010-04-23  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/7371198> REGRESSION: Safari cannot resume in time when access Sina website

        CG disabled the caching of resampled images (the RIP cache) in Apex.
        They believe the CA cache should be sufficient for such images.
        Unfortunately, this doesn't work for WebCore since we draw into our own
        CGContext and can't take advantage of the CA cache. As a result we
        suffered regressions from Northstar. With this change, we enable the
        cache for all the images we draw and this brings us to parity with
        Northstar.

        Reviewed by David Carson.

        * platform/graphics/cg/ImageSourceCG.cpp:
        (WebCore::ImageSource::createFrameAtIndex):

2010-04-22  Simon Fraser  <simon.fraser@apple.com>

        Improve (but not totally fix):
        <rdar://problem/7876387> iPhone 4.0 Safari regression: Lots of glitches with CSS animations in jqTouch

        Merged ToT WebKit r56459.

    2010-03-24  Dean Jackson  <dino@apple.com>

            Reviewed by Kevin Decker.

            <rdar://problem/7785305>
            Fix regression caused by r55576. It turned out that ensuring
            CoreAnimation always gets a correct fill parameter caused flashing
            as non-filled animations ended (CA briefly showed the initial animation
            value before the style system set the final value).

            * platform/graphics/mac/GraphicsLayerCA.mm:
            (WebCore::GraphicsLayerCA::setupAnimation):

2010-04-22  Joseph Pecoraro  <joepeck@webkit.org>

        Merged ToT WebKit r58042.

        <rdar://problem/6948763> Line appears between characters separated by ZERO WIDTH NON-JOINER

        Added iPhone Specific results for Render Tree Output

        * platform/iphone-simulator/fast/text/format-control-expected.txt: Added.

    2010-04-21  David Yonge-Mallo  <davinci@chromium.org>

            Reviewed by Dan Bernstein.

            ZWNJ - Display non-printing, invisible character
            https://bugs.webkit.org/show_bug.cgi?id=16131

            Added tests for the handling of ZWJ and ZWNJ characters in simple font
            path.  These characters have zero width but may change the widths of text
            around them.  Furthermore, their glyphs should not be displayed in
            simple static text.

            * fast/text/format-control.html: Added.
            * fast/text/zero-width-characters.html: modified to test ZWSP, ZWJ, and ZWNJ.
            * platform/mac/fast/text/format-control-expected.checksum: Added.
            * platform/mac/fast/text/format-control-expected.png: Added.
            * platform/mac/fast/text/format-control-expected.txt: Added.

2010-04-22  Justin Garcia  <justin.garcia@apple.com>

        Reviewed by Jonathan Koch.

        <rdar://problem/7740978> First slide to Spotlight lagged for about a second

        In the case where Editor::setTextAsChildOfElement is setting an empty string on an empty
        element, don't bother clearing a [0, 0] selection only to set it again.  This avoids the
        expense of creating VisiblePositions.
        There are certain side effects of set Editor::setTextAsChildOfElement that we do want in
        this case though, like clearing the composition and clearing undo operations.  Move code
        so that we get these even when we early return.

        * editing/Editor.cpp:
        (WebCore::Editor::setTextAsChildOfElement):

2010-04-22  Eric Carlson  <eric.carlson@apple.com>

        Reviewed by David Kilzer and Greg Bolsinga.

        <rdar://problem/7894423>
        Allow new HTML attribute to opt-in to inline media playback when mediaPlaybackAllowsInline

        * html/HTMLAttributeNames.in: define webkit-playsinline
        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::getPluginProxyParams): Enable inline playback if mediaPlaybackAllowsInline
        is set AND "webkit-playsinline" attribute is present.

2010-04-22  Eric Carlson  <eric.carlson@apple.com>

        <rdar://problem/7846860> Stream does not restart after it stalls and rebuffers.

        Merged ToT WebKit r58107.

    2010-04-22  Eric Carlson  <eric.carlson@apple.com>

            Reviewed by Simon Fraser.

            Do not pause movie when readyState drops below HAVE_FUTURE_DATA
            https://bugs.webkit.org/show_bug.cgi?id=37991
            <rdar://problem/7893937>

            No new tests, we don't have infrastructure in DRT to test with streamed
            movies.

            * html/HTMLMediaElement.cpp:
            (WebCore::HTMLMediaElement::HTMLMediaElement): Initialize m_readyStateMaximum.
            (WebCore::HTMLMediaElement::prepareForLoad): Reset m_readyStateMaximum.
            (WebCore::HTMLMediaElement::setReadyState): Maintain m_readyStateMaximum.
            (WebCore::HTMLMediaElement::potentiallyPlaying): Also return true if the readyState was
            previously >= HAVE_FUTURE_DATA.
            * html/HTMLMediaElement.h:

2010-04-22  Enrica Casucci  <enrica@apple.com>

        <rdar://problem/7860782> After accidentally typing return character in first line and then backspacing, it still sticks in the title
        It doesn't fix the problem entirely but avoids redundant markup.

        Merged ToT WebKit r55824.

    2010-03-10  Chang Shu  <chang.shu@nokia.com>

        Reviewed by Darin Adler.

        While calculating alpha channel, convert the floating point value to
        an integer in [0, 256) with equal distribution.
        https://bugs.webkit.org/show_bug.cgi?id=22150

        * css/CSSParser.cpp:
        (WebCore::CSSParser::parseColorParameters):

2010-04-21  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Greg Bolsinga, Cameron Zwarich.

        <rdar://problem/7887314> top wildcat crasher - WebCore: WebThreadLock + 12 - 0xbbadbeef

        -[WebTiledLayer drawInContext:] can be called on the web thread, when MobileSafari
        uses -renderInContext: to generate a page snapshot. WebThreadLock() asserts when called
        on the web thread, so only lock if we're on the main thread.

        Do the same for the CA animation callback, in case animations are started on the
        main thread (e.g. in response to touch events).

        * platform/graphics/mac/GraphicsLayerCA.mm:
        (-[WebAnimationDelegate animationDidStart:]):
        * platform/graphics/mac/WebTiledLayer.mm:
        (-[WebTiledLayer drawInContext:]):

2010-04-21  David Carson  <dacarson@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/7697454> Only sniff MIME types for the main resource (Lots of time spent in -[NSURLResponse(WebCoreURLResponse) adjustMIMETypeIfNecessary])

        WebCore cache revalidation responses are being sniffed to
        determine their mimetype. This is not necessary for 304 Not Modified
        responses. In this case do an early return.

        * platform/network/iphone/WebCoreURLResponseIPhone.mm: Early return if status code is 304

2010-04-21  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/7754204> Sub-TLF: hires art for emoji in WebCore

        Reviewed by David Carson.

        * Resources/images/emoji-E*@2x.png: Lots of hi-res emoji artwork added.
        * WebCore.xcodeproj/project.pbxproj:

2010-04-20  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Kilzer.

        <rdar://problem/7633494> Add onpagehide/onpageshow handler

        * WebCore.iPhone.exp: export the two new functions below
        * page/Frame.h: declare the iPhone only functions
        * page/iphone/FrameIPhone.mm:
        (WebCore::Frame::dispatchPageHideEventBeforePause): self explanatory!
        (WebCore::Frame::dispatchPageShowEventBeforeResume): self explanatory!

2010-04-20  Greg Bolsinga  <bolsinga@apple.com>

        Rubber stamped by David Carson.

        <rdar://problem/7886011> REGR: ASSERT when Scrolling a Page with Timers

        Revert -r219805.

        * WebCore.iPhone.exp:
        * page/Frame.cpp:
        (WebCore::Frame::Frame):
        * page/Frame.h:
        * page/iphone/FrameIPhone.mm:
        (WebCore::Frame::setTimersPaused):

2010-04-20  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7826962> iPhone: replaceState leaks state information to the parent frame (36435)

        Merged ToT WebKit r56365.

    2010-03-22  Darin Fisher  <darin@chromium.org>

        Reviewed by Brady Eidson.

        HistoryController::replaceState() should modify m_currentItem
        instead of the current HistoryItem of the BackForwardList.

        https://bugs.webkit.org/show_bug.cgi?id=36435

        Test: fast/loader/stateobjects/replacestate-in-iframe.html

        * loader/HistoryController.cpp:
        (WebCore::HistoryController::replaceState):

2010-04-20  Eric Carlson  <eric.carlson@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/7758935> Akamai iPhone Showcase (http stream) webpage no longer functional

        Remove the restriction that required a user action to call the media engine's load()
        function. While we are still not allowed to load media files automatically, the media engine
        (plug-in) now *never* loads data until the movie begins playing and we still require a
        user gesture to initiate playback.

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::HTMLMediaElement): Don't set RequireUserGestureForLoadRestriction.

2010-04-19  Jason Beaver <jbeaver@apple.com>

	Reviewed by Andre Boule

	<rdar://problem/7794343> Provide solution to make some Northstar strings still fit in Apex

	Disabled truncation rect calculation for new text rendering methods (required to get truncation to work).

	* wak/WAKStringDrawing.mm:

2010-04-19  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by Joseph Pecoraro.

        <rdar://problem/7848505> Geolocation tracking icon in status bar disappears when scrolling in MobileSafari

        Split out calling Document::suspend/resumeActiveDOMObjects() from
        Frame::setTimersPaused(). Then in all places (which are all in UIKit) where
        -[WebFrame setTimeoutsPaused:] is called, also call -[WebFrame setActiveDOMObjectsSuspended:],
        with the exception of -[WebView _willStart/_didFinishScrollingOrZooming]. This way,
        Geolocation and therefore CoreLocation is still enabled during scrolling, and
        then the CoreLocation indicator remaining in the status bar while scrolling
        a Geolocation using web page.

        * WebCore.iPhone.exp: Export new Frame::setActiveDOMObjectsSuspended.
        * page/Frame.cpp: Add and implement setActiveDOMObjectsSuspended.
        (WebCore::Frame::Frame):
        * page/Frame.h: Ditto.
        (WebCore::Frame::isActiveDOMObjectsSuspended):
        * page/iphone/FrameIPhone.mm:
        (WebCore::Frame::setActiveDOMObjectsSuspended): Added and implemented.
        (WebCore::Frame::setTimersPaused): No longer calls Document::suspend/resumeActiveDOMObjects().

2010-04-19  David Carson  <dacarson@apple.com>

        Reviewed by David Kilzer and Greg Bolsinga

        <rdar://problem/7796181> Email thumbs are saved to the camera roll for RAW images rather than embedded thumbnails
        <rdar://problem/7859099> Safari will no longer load certain URLs which loaded fine in prior OS versions

        Add malformed MIMETypes back to the list of supported mimetypes as some applications, like Mail, depend
        on it and we are not correcting the mimetypes when sniffing incoming content from the network.

        * platform/MIMETypeRegistry.cpp:
        (WebCore::initializeSupportedImageMIMETypes):

2010-04-19  David Carson  <dacarson@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/7644552> Pasting N88 photos in mail compose shows an empty placeholder

        Remove the optimization that was made as part of
        https://bugs.webkit.org/show_bug.cgi?id=26747
        as it breaks EXIF 90/270deg rotated images.
        Running the test case for that bug showed no regression.`

        * platform/graphics/cg/ImageCG.cpp:
        (WebCore::BitmapImage::draw):

2010-04-19  Ada Chan  <adachan@apple.com>

        Preparation for <rdar://problem/7786490> Investigate Session Storage Quota

        Merged WebCore ToT r57822 and r57826.

    2010-04-19  Ada Chan  <adachan@apple.com>

            Reviewed by Jeremy Orlow.

            https://bugs.webkit.org/show_bug.cgi?id=37717
            Allow clients concerned with memory consumption to set a quota on session storage
            since the memory used won't be released until the Page is destroyed.
            The default is noQuota, which matches the current behavior.

            * WebCore.base.exp: Export Settings::setSessionStorageQuota().
            * page/Page.cpp:
            (WebCore::Page::sessionStorage):
            * page/Settings.cpp:
            (WebCore::Settings::Settings):
            (WebCore::Settings::setSessionStorageQuota):
            * page/Settings.h:
            (WebCore::Settings::sessionStorageQuota):
            * storage/StorageNamespace.cpp:
            (WebCore::StorageNamespace::sessionStorageNamespace):
            * storage/StorageNamespace.h:
            * storage/StorageNamespaceImpl.cpp:
            (WebCore::StorageNamespaceImpl::sessionStorageNamespace):
            * storage/StorageNamespaceImpl.h:

    2010-04-19  Ada Chan  <adachan@apple.com>

            Build fix: wrap Settings::setLocalStorageQuota() and Settings::setSessionStorageQuota()
            in #if ENABLE(DOM_STORAGE).

            * page/Settings.cpp:
            (WebCore::Settings::Settings):
            * page/Settings.h:

2010-04-19  Joseph Pecoraro  <joepeck@webkit.org>

        <rdar://problem/7876409> iPhone: Depth of field demo page much slower in Safari and Mac Chrome than in Windows Chrome

        Merged WebKit ToT r54113 and r54272.

    2010-02-02  James Robinson  <jamesr@chromium.org>

            Reviewed by Dmitry Titov.

            Add a null check for image, which might be NULL if tileSize is empty
            https://bugs.webkit.org/show_bug.cgi?id=34510

            Test: fast/gradients/crash-on-1px-border.html

            * rendering/RenderBoxModelObject.cpp:
            (WebCore::RenderBoxModelScaleObserver::shouldPaintBackgroundAtLowQuality):

    2010-01-31  Oliver Hunt  <oliver@apple.com>

            Reviewed by Simon Fraser.

            Animated scaling of background-image is too slow
            https://bugs.webkit.org/show_bug.cgi?id=33808

            Implement a version of the RenderImage animated scaling optimisation
            for background images. Due to the possibility of arbitrary transforms
            being applied to containing elements we explicitly check the current
            CTM of the context for scaling or rotation.

            * platform/graphics/GraphicsContext.cpp:
            (WebCore::GraphicsContext::drawTiledImage):
            * platform/graphics/GraphicsContext.h:
            * platform/graphics/transforms/TransformationMatrix.h:
            (WebCore::TransformationMatrix::isIdentityOrTranslation):
            * rendering/RenderBoxModelObject.cpp:
            (WebCore::RenderBoxModelScaleData::RenderBoxModelScaleData):
            (WebCore::RenderBoxModelScaleData::~RenderBoxModelScaleData):
            (WebCore::RenderBoxModelScaleData::hiqhQualityRepaintTimer):
            (WebCore::RenderBoxModelScaleData::size):
            (WebCore::RenderBoxModelScaleData::setSize):
            (WebCore::RenderBoxModelScaleData::lastPaintTime):
            (WebCore::RenderBoxModelScaleData::setLastPaintTime):
            (WebCore::RenderBoxModelScaleData::useLowQualityScale):
            (WebCore::RenderBoxModelScaleData::transform):
            (WebCore::RenderBoxModelScaleData::setTransform):
            (WebCore::RenderBoxModelScaleData::setUseLowQualityScale):
            (WebCore::RenderBoxModelScaleObserver::boxModelObjectDestroyed):
            (WebCore::RenderBoxModelScaleObserver::highQualityRepaintTimerFired):
            (WebCore::RenderBoxModelScaleObserver::shouldPaintBackgroundAtLowQuality):
            (WebCore::RenderBoxModelObject::highQualityRepaintTimerFired):
            (WebCore::RenderBoxModelObject::~RenderBoxModelObject):
            (WebCore::RenderBoxModelObject::paintFillLayerExtended):
            * rendering/RenderBoxModelObject.h:

2010-04-18  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7826949> iPhone: REGRESSION (r54320): Crash in RenderBlock::requiresLineBox (36198)

        Merged ToT WebKit r56186.

    2010-03-18  Dan Bernstein  <mitz@apple.com>

        Reviewed by Darin Adler.

        <rdar://problem/7761400> Rework the fix for
        https://bugs.webkit.org/show_bug.cgi?id=18722

        Test: fast/dynamic/float-remove-above-line-2.html

        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::removeFloatingObject): Treat 0- and less-than-0-height floats
        as having a height of 1 so that they intersect with the line they originate on.
        (WebCore::RenderBlock::clearFloats): Use numeric_limits.
        * rendering/RenderBlockLineLayout.cpp:
        (WebCore::RenderBlock::layoutInlineChildren): Removed the intersection checks here,
        so that a float is always included in the float list of the line it originates on, even
        if it does not intersect that line. This ensures that every float is accounted for, which
        is necessary during incremental layout when adding floats from clean lines.

2010-04-18  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7877683> iPhone: HTMLFrameSetElement-window-eventListener-attributes.html sometimes crashes on SnowLeopard Release (37720)

        Merged ToT WebKit r57790.

    2010-04-17  Alexey Proskuryakov  <ap@apple.com>

        Reviewed by Adam Barth.

        https://bugs.webkit.org/show_bug.cgi?id=37720
        <rdar://problem/7873752> HTMLFrameSetElement-window-eventListener-attributes.html sometimes
        crashes on SnowLeopard Release

        Tests:
        * fast/dom/Window/HTMLBodyElement-window-eventListener-attributes.html:
        * fast/dom/Window/HTMLFrameSetElement-window-eventListener-attributes.html:

        * bindings/scripts/CodeGeneratorJS.pm: Use global object as a wrapper for window event
        listeners set via document.body. The body wrapper can go away if nothing else references it.

        * html/HTMLBodyElement.idl: Override listeners that exist on Element with custom implementations,
        because we need to use window object as a wrapper, not the element. Marked all window event
        listeners as such for code generator.

        * html/HTMLFrameSetElement.idl: Ditto.

2010-04-18  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7877677> iPhone: REGRESSION (r54400): Hangs when doing AJAX update with large amount of data (37181)

        Merged ToT WebKit r57340.

    2010-04-08  Alexey Proskuryakov  <ap@apple.com>

        Reviewed by Darin Adler.

        https://bugs.webkit.org/show_bug.cgi?id=37181
        <rdar://problem/7835374> REGRESSION (r54400): Hangs when doing AJAX update with large amount of data

        Test: fast/events/gc-freeze-with-attribute-listeners.html

        The problem was that we were creating JS wrappers for nodes with attribute event listeners,
        and GC is very slow if there are nodes with wrappers in a detached tree whose root does not
        have a wrapper.

        * bindings/js/ScriptEventListener.cpp: (WebCore::createAttributeEventListener): Don't create
        wrappers for attribute event listeners - if there is a node, JSLazyEventListener::initializeJSFunction()
        will create one.

        * bindings/js/JSNodeCustom.cpp: (WebCore::JSNode::markChildren): Added a FIXME about the problem
        we are stepping around now.

2010-04-18  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7877670> iPhone: REGRESSION (r47291): Body from cross origin preflight response is prepended to the actual response body

        Merged ToT WebKit r56955.

    2010-04-01  Alexey Proskuryakov  <ap@apple.com>

        Reviewed by Darin Adler.

        https://bugs.webkit.org/show_bug.cgi?id=36854
        <rdar://problem/7811668> REGRESSION (r47291): Body from cross origin preflight response
        is prepended to the actual response body

        Tests: http/tests/xmlhttprequest/access-control-response-with-body-sync.html
               http/tests/xmlhttprequest/access-control-response-with-body.html

        * loader/DocumentThreadableLoader.cpp: (WebCore::DocumentThreadableLoader::didReceiveData):
        Don't send data to the client when handling a preflight request.

2010-04-18  Dan Bernstein  <mitz@apple.com>

        Reviewed by Dave Kilzer.

        WebCore part of <rdar://problem/7877559> Use Developer directory-relative #inlcudes in .xcconfig files
        Changed absolute #include paths to <DEVELOPER_DIR>-relative paths.

        * Configurations/Indigo.xcconfig:
        * Configurations/iPhone.xcconfig:

2010-04-18  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7877501> iPhone: REGRESSION: WebKit crashes when deleting images on blogger.com (34957)

        Merged ToT WebKit r55179.

    2010-02-23  Enrica Casucci  <enrica@apple.com>

        Reviewed by Simon Fraser.

        REGRESSION: WebKit crashes when deleting images on blogger.com (34957)
        <rdar://problem/7651935>
        https://bugs.webkit.org/show_bug.cgi?id=34957

        Fixing a regression introduced with revision 53085. Anchor elements should not be considered
        in editable content when calculating the position in the parent before the node.

        Test: editing/execCommand/delete-image-in-anchor.html

        * dom/Position.cpp:
        (WebCore::Position::getInlineBoxAndOffset):

2010-04-18  David Kilzer  <ddkilzer@apple.com>

        Remove workarounds for iPhone OS 3.2 and earlier

        Reviewed by Greg Bolsinga.

        * platform/graphics/cg/GraphicsContextCG.cpp: Removed workaround
        for iPhone OS 3.2.
        * platform/network/iphone/QuickLook.mm: Removed workaround added
        in r115600 for iPhone OS 4.0 before MobileQuickLook was fixed.

2010-04-17  Julio Gonzalez  <juliog@apple.com>

        <rdar://problem/7866412> Add Gurmukhi and Oriya to list of fallback fonts

        Reviewed by David Kilzer.

        * platform/graphics/mac/FontCacheMac.mm:
        (WebCore::FontCache::getFontDataForCharacters): Added support
        for Indic fallback fonts.

2010-04-17  Jason Beaver <jbeaver@apple.com>

	<rdar://problem/7794343> Provide solution to make some Northstar strings still fit in Apex

	Added new string drawing functions that take an attributes object instead of a long list of arguments.

	* wak/WAKStringDrawing.h:
	* wak/WAKStringDrawing.mm:

2010-04-17  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7876499> REGRESSION (r218504): Touch event detection broken by 7781548

        Reviewed by Eric Carlson and Kevin Decker.

        * page/iphone/EventHandlerIPhoneTouch.cpp:
        (WebCore::EventHandler::handleTouchEvent): Instantiate a
        UserGestureIndicator on the stack to indicate a user gesture is
        being processed per ToT WebKit r57045.

2010-04-17  Joseph Pecoraro  <joepeck@webkit.org>

        <rdar://problem/7876416> iPhone: CrashTracer: [USER] 20 crashes in Safari at com.apple.WebCore: WebCore::CounterNode::insertAfter + 319

        Merged WebKit ToT r54317

    2010-02-03  Adele Peterson  <adele@apple.com>

            Reviewed by Simon Fraser.

            Fix for <rdar://problem/7594212>
            https://bugs.webkit.org/show_bug.cgi?id=34549 - CSS counters crash at http://www.w3.org/TR/css3-content/
            CrashTracer: [USER] 20 crashes in Safari at com.apple.WebCore: WebCore::CounterNode::insertAfter + 319

            Test: fast/css/counters/counter-before-selector-crash.html

            * rendering/RenderCounter.cpp: (WebCore::updateCounters): nil check.

2010-04-17  Joseph Pecoraro  <joepeck@webkit.org>

        <rdar://problem/7856358> Test/disable new HTML5 input elements merged with Safari Havoc

        Merged WebKit ToT r54274, part of r55980, r56385, r56463, r57012, r57274, r57279.

    2010-04-08  Kent Tamura  <tkent@chromium.org>

            Reviewed by Darin Adler.

            willValidate doesn't need to check existence of a form element and a name attribute.
            https://bugs.webkit.org/show_bug.cgi?id=34733

            Remove checks against m_form and m_hasName in
            HTMLFormControlElement::willValidate(), and remove the code to
            track their updates.

            Test: fast/forms/willvalidate.html

            * html/HTMLFormControlElement.cpp:
            (WebCore::HTMLFormControlElement::HTMLFormControlElement):
            (WebCore::HTMLFormControlElement::parseMappedAttribute):
            (WebCore::HTMLFormControlElement::insertedIntoTree):
            (WebCore::HTMLFormControlElement::removedFromTree):
            (WebCore::HTMLFormControlElement::recalcWillValidate):
            (WebCore::HTMLFormControlElement::willValidate):
            (WebCore::HTMLFormControlElement::setNeedsWillValidateCheck):
            * html/HTMLFormControlElement.h:
            (WebCore::HTMLFormControlElement::formDestroyed):
            * html/HTMLInputElement.cpp:
            (WebCore::HTMLInputElement::setInputType):
              setNeedsWillValidateCheck() should be called before
              setAttribute(valueAttr, ...) is called.

    2010-04-02  Kent Tamura  <tkent@chromium.org>

            Reviewed by Darin Adler.

            Forms with autocomplete=off should not consume saved state
            https://bugs.webkit.org/show_bug.cgi?id=36762

            Introduce Element::shouldSaveAndRestoreFormControlState() to check
            if we should save and restore control state.

            Test: fast/forms/state-restore-to-non-autocomplete-form.html

            * dom/Document.cpp:
            (WebCore::Document::formElementsState): Check shouldSaveAndRestoreFormControlState().
            * dom/Element.h:
            (WebCore::Element::shouldSaveAndRestoreFormControlState): Added. It just returns true.
            * html/HTMLFormControlElement.cpp:
            (WebCore::HTMLFormControlElementWithState::autoComplete):
              Added. It return autocomplete state of the form.
            (WebCore::HTMLFormControlElementWithState::shouldSaveAndRestoreFormControlState):
              Added. It returns the result of autoComplete().
            (WebCore::HTMLFormControlElementWithState::finishParsingChildren):
              Do not restore state if shouldSaveAndRestoreFormControlState() is false.
            * html/HTMLFormControlElement.h: Declare autoComplete() and overriding methods.
            * html/HTMLInputElement.cpp:
            (WebCore::HTMLInputElement::autoComplete):
              Reduce code by using autoComplete() of the parent class.
            (WebCore::HTMLInputElement::saveFormControlState):
              Remove the autoComplete() check. Document::formElementsState() does equivalent check.

    2010-03-24  MORITA Hajime  <morrita@google.com>

            Reviewed by Darin Adler.

            Refactoring: HTMLFormControlElement should not have redundant null check
            https://bugs.webkit.org/show_bug.cgi?id=36487

            No new tests as there is no new functionality.

            * html/HTMLFormControlElement.cpp:
            (WebCore::HTMLFormControlElement::dispatchFocusEvent):
            (WebCore::HTMLFormControlElement::dispatchBlurEvent):

    2010-03-23  Kent Tamura  <tkent@chromium.org>

            Reviewed by Adam Barth.

            Add checks if setNeedsWillValidateCheck() and
            setNeedsValidityCheck() are called correctly.
            https://bugs.webkit.org/show_bug.cgi?id=34924

            Introduce HTMLFormControlElement::m_willValidate and
            m_isValid. They are the caches of willValidate() and
            isValidFormControlElement(). setNeedsWillValidateCheck() updates
            m_willValidate and setNeedsValidityCheck() updates m_isValid.

            willValidate() and isValidFormControlElement() have assertions to
            check m_willvalidate or m_isValid has the correct state. If
            setNeedsWillValidateCheck() or setNeedsValidityCheck() is needed
            to be called and is not called, these assertions fail.

            * html/HTMLButtonElement.h:
            (WebCore::HTMLButtonElement::recalcWillValidate):
            * html/HTMLFieldSetElement.h:
            (WebCore::HTMLFieldSetElement::recalcWillValidate):
            * html/HTMLFormControlElement.cpp:
            (WebCore::HTMLFormControlElement::HTMLFormControlElement):
            (WebCore::HTMLFormControlElement::parseMappedAttribute):
            (WebCore::HTMLFormControlElement::recalcWillValidate):
            (WebCore::HTMLFormControlElement::willValidate):
            (WebCore::HTMLFormControlElement::setNeedsWillValidateCheck):
            (WebCore::HTMLFormControlElement::validationMessage):
            (WebCore::HTMLFormControlElement::isValidFormControlElement):
            (WebCore::HTMLFormControlElement::setNeedsValidityCheck):
            * html/HTMLFormControlElement.h:
            * html/HTMLInputElement.cpp:
            (WebCore::HTMLInputElement::setInputType):
            (WebCore::HTMLInputElement::parseMappedAttribute):
            (WebCore::HTMLInputElement::setValue):
            (WebCore::HTMLInputElement::recalcWillValidate):
            * html/HTMLInputElement.h:
            * html/HTMLTextAreaElement.cpp:
            (WebCore::HTMLTextAreaElement::setNonDirtyValue):

    2010-02-02  Kent Tamura  <tkent@chromium.org>

            Reviewed by Darin Adler.

            Fix a bug that changes for some constraint attributes doesn't
            update validation CSS selectors.
            https://bugs.webkit.org/show_bug.cgi?id=31716

            - Rename HTMLFormControlElement::updateValidity() to setNeedsValidityCheck()
            - Introduce HTMLFormControlElement::setNeedsWillValidate()
            - Introduce HTMLFormControlElement::m_hasName to make willValidate()
              work in parseMappedAttribute().
            - We need to call setNeedsValidityCheck() when HTMLInputElement::step or
              HTMLTextAreaElement::maxLength is changed.

            * html/HTMLFormControlElement.cpp:
            (WebCore::HTMLFormControlElement::HTMLFormControlElement):
            (WebCore::HTMLFormControlElement::parseMappedAttribute):
            (WebCore::HTMLFormControlElement::insertedIntoTree):
            (WebCore::HTMLFormControlElement::removedFromTree):
            (WebCore::HTMLFormControlElement::formDestroyed):
            (WebCore::HTMLFormControlElement::willValidate): Avoids function calls.
            (WebCore::HTMLFormControlElement::setNeedsWillValidateCheck):
            (WebCore::HTMLFormControlElement::setNeedsValidityCheck):
            * html/HTMLFormControlElement.h:
            (WebCore::HTMLFormControlElement::disabled): Move the code from .cpp.
            * html/HTMLInputElement.cpp:
            (WebCore::HTMLInputElement::setInputType):
            (WebCore::HTMLInputElement::parseMappedAttribute):
            (WebCore::HTMLInputElement::setValue):
            (WebCore::HTMLInputElement::setValueFromRenderer):
            (WebCore::HTMLInputElement::setFileListFromRenderer):
            * html/HTMLTextAreaElement.cpp:
            (WebCore::HTMLTextAreaElement::parseMappedAttribute):
            (WebCore::HTMLTextAreaElement::setValue):
            * rendering/RenderTextControlMultiLine.cpp:
            (WebCore::RenderTextControlMultiLine::subtreeHasChanged):

2010-04-17  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7548905> Change build version of WebKit from 10.5 (Leopard) to 10.6 (Snow Leopard)

        Reviewed by Joseph Pecoraro.

        This changes the WebKit version from 5532.9 to 6532.9 to signify
        that iPhone OS 4.0 is closer to SnowLeopard's version of WebKit
        than Leopard's version of WebKit.

        * Configurations/Version.xcconfig: Changed
        SYSTEM_VERSION_PREFIX_iphoneos from 5 to 6.

2010-04-16  Cameron Zwarich  <zwarich@apple.com>

        <rdar://problem/7865429> Some texts are not in hidpi

        Reviewed by Pratik Solanki.

        I have another fix for this in UIKit that I will send out, but it seems better to
        default the scale to match the main screen rather than always having it be 1.0. Then
        if we have a bug where it gets mismatched (which hopefully won't happen again), it
        will affect external screens rather than normal usage.

        * wak/WKWindow.mm:
        (WKWindowCreate):

2010-04-16  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by Kevin Decker.

        <rdar://problem/7823182> REGR: iPad doesn't send "resize" nor "orientationchange" event in Safari/Standlone

        Resurrect the code from https://svn.apple.com/trac/puzzlebox/changeset/49403 that was lost in a merge.

        * dom/Node.cpp:
        (WebCore::tryAddEventListener):
        (WebCore::tryRemoveEventListener):

2010-04-16  Mike Knippers  <knippers@apple.com>

        Reviewed by David Carson.

        Generated new order file for iPhone.

        <rdar://problem/7868995> Update order file for WebCore

        * WebCore.iPhone.order:

2010-04-16  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Cameron Zwarich.

        <rdar://problem/7790672> <video> elements dynamically created and inserted into the DOM
        don't composite with other page elements

        When <video> elements are inserted into the DOM from script, the widget gets added the window
        before compositing has been set up, so we fail to hook up the plugin's layer to the compositing
        layers.

        Fix by having RenderLayerBacking::updateGraphicsLayerConfiguration() call out to UIKit to reparent
        the plugin's view's layer at the point where we'd normally hook it up. Calling out to UIKit is necessary
        to juggle the UIView/layer re-parenting on the main thread.

        * plugins/PluginWidget.h:
        * plugins/mac/PluginWidgetMac.mm:
        (WebCore::PluginWidget::attachPluginLayer): New method that calls a method on the platform widget (a WAKView).

        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::updateGraphicsLayerConfiguration): On iPhone, call pluginWidget->attachPluginLayer()
        rather than calling setContentsToMedia() directly. attachPluginLayer() will call back out to UIKit, which
        does necessary view/layer juggling before calling back into WebCore via -[WebView _setMediaLayer:forPluginView:].

2010-04-16  Eric Carlson  <eric.carlson@apple.com>

        Reviewed by Simon Fraser.

        <rdar://problem/7866301> need API for mediaPlaybackAllowsInline

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::getPluginProxyParams): Pass a new attribute to the
        plug-in when mediaPlaybackAllowsInline is false.

2010-04-16  Dean Jackson  <dino@apple.com>

        Reviewed by David Carson.

        <rdar://problem/7866301> need API for mediaPlaybackAllowsInline

        Add a page setting that indicates if inline <video> and <audio>
        are allowed. This is just the setting - a subsequent patch will
        implement the behavior.

        * page/Settings.cpp:
        (WebCore::Settings::Settings):
        * page/Settings.h:
        (WebCore::Settings::setMediaPlaybackAllowsInline):
        (WebCore::Settings::mediaPlaybackAllowsInline):

2010-04-13  Paul Knight   <pknight@apple.com>

        Reviewed by Joseph Pecoraro.

        <rdar://problem/6935490> Mobile WebKit changes button border radius when clicked

        In addition to adjusting a button's border radius after layout, adjust it when the theme is called
        to apply additional styles.

        * rendering/RenderButton.cpp:
        (WebCore::RenderButton::layout):
        * rendering/RenderThemeIPhone.cpp:
        (WebCore::RenderThemeIPhone::adjustButtonBorderRadius): Add a new static method that calculates and
        applies the correct border radius.
        (WebCore::RenderThemeIPhone::adjustButtonStyle): Adjust the button's border radius when the theme
        is given a chance to adjust styles.
        * rendering/RenderThemeIPhone.h: Declare RenderThemeIPhone::adjustButtonBorderRadius.

2010-04-15  Cameron Zwarich  <zwarich@apple.com>

        <rdar://problem/7845062> -[CALayer regionBeingDrawn] doesn't adjust rects from the backing store for the layer's contentsScale

        Reviewed by Simon Fraser.

        We use some dirty SPI to get the raw repaint rects from CA's backing store, as opposed
        to the coalesced rect, so we need to adjust for the layer's contentsScale in the same
        way that we adjust for the flipped contents of the backing store.

        * platform/iphone/TileCache.mm:
        (WebCore::shouldRepaintInPieces):
        (WebCore::TileCache::drawLayer):

2010-04-15  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7826900> iPhone: CSSPrimitiveValue::parserValue() returns deleted memory (20069)

        Merged ToT WebKit r55914.

    2010-03-12  Dan Bernstein  <mitz@apple.com>

        Reviewed by Darin Adler.

        <rdar://problem/7725534> CSSPrimitiveValue::parserValue() returns deleted memory
        https://bugs.webkit.org/show_bug.cgi?id=20069

        No test added, since with the CSS variables feature disabled, the pointer
        to the freed memory is never dereferenced.

        * css/CSSPrimitiveValue.cpp:
        (WebCore::valueOrPropertyName): Changed to return a const AtomicString& from
        a static table.
        (WebCore::CSSPrimitiveValue::parserValue): Updated for the above change.

2010-04-15  Eric Carlson  <eric.carlson@apple.com>

        Merged ToT WebKit r56650

    2010-03-26  Eric Carlson  <eric.carlson@apple.com>

            <rdar://problem/7320584>
            https://bugs.webkit.org/show_bug.cgi?id=36681
            "new Audio()" doesn't work with plug-in backed media engine.

            Don't require plug-in backed <video> and <audio> elements to be in the document to play.

            * html/HTMLMediaElement.cpp:
            (WebCore::HTMLMediaElement::HTMLMediaElement): Initialize m_proxyWidget
            (WebCore::HTMLMediaElement::createRenderer): Set renderer widget if it has already been
            allocated.
            (WebCore::HTMLMediaElement::scheduleLoad): Call createMediaPlayerProxy to make sure we
            have a plug-in proxy.
            (WebCore::HTMLMediaElement::loadResource): Ditto.
            (WebCore::HTMLMediaElement::ensureMediaPlayer): Allocate media player.
            (WebCore::HTMLMediaElement::setMediaPlayerProxy): Call ensureMediaPlayer.
            (WebCore::HTMLMediaElement::getPluginProxyParams): New, return the url and params vectors.
            (WebCore::HTMLMediaElement::finishParsingChildren): Call createMediaPlayerProxy.
            (WebCore::HTMLMediaElement::createMediaPlayerProxy): New, allocate the proxy widget if necessary.
            * html/HTMLMediaElement.h:

            * loader/EmptyClients.h:
            (WebCore::EmptyFrameLoaderClient::createMediaPlayerProxyPlugin): Add declaration.

            * loader/FrameLoader.cpp:
            (WebCore::toPlugInElement): Don't allow an audio or video element to be cast to a plug-in element.
            (WebCore::FrameLoader::loadPlugin):
            (WebCore::FrameLoader::loadMediaPlayerProxyPlugin): New, allocate a media player proxy plug-in.

            * loader/FrameLoader.h: Declare loadMediaPlayerProxyPlugin.

            * loader/FrameLoaderClient.h: Declare createMediaPlayerProxyPlugin.

            * rendering/RenderEmbeddedObject.cpp:
            (WebCore::RenderEmbeddedObject::updateWidget): Call loadMediaPlayerProxyPlugin when passed an
            audio or video node.

            * rendering/RenderLayerCompositor.cpp:
            (WebCore::RenderLayerCompositor::requiresCompositingForVideo):

             * rendering/RenderVideo.cpp:
             (WebCore::RenderVideo::RenderVideo): Get default width and height from defaultSize.
             (WebCore::RenderVideo::defaultSize): New, return the spec defined default width and height.
             * rendering/RenderVideo.h:

2010-04-14  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7826879> iPhone: Reproducible crash in RenderButton::styleDidChange() at sunrise.ch

        Merged ToT WebKit r56297.

    2010-03-19  Shinichiro Hamaji  <hamaji@chromium.org>

        Reviewed by Dan Bernstein.

        WebCore::RenderButton::styleDidChange ReadAV@NULL (6739b7fe455ecb54a6812c0866c3b47c)
        https://bugs.webkit.org/show_bug.cgi?id=34641

        Don't dig into buttons and menu lists when finding which element
        should be modified by :first-letter pseudo class.  Even before
        this change, we didn't dig into inline buttons and menu lists as
        they are replaced so this issue wasn't found long time.

        Test: fast/css/first-letter-block-form-controls-crash.html

        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::updateFirstLetter):

2010-04-14  David Kilzer  <ddkilzer@apple.com>

        Part 3 of 3: <rdar://problem/7781548> video in webpages can "autoplay" by programmatically clicking

        Merged ToT WebKit r57045.

    2010-04-02  Andy Estes  <aestes@apple.com>

        Reviewed by Adam Barth.

        The previous mechanism for testing whether an event was due to a user
        gesture only checked the event type, not the source of the event.  This
        allowed scripts to defeat popup blocking by programatically emitting
        certain types of events.

        Change the user gesture detection to check for a flag that is only set
        when the event in question was generated through the platform and not
        through the DOM.

        https://bugs.webkit.org/show_bug.cgi?id=37008

        Tests: fast/events/popup-allowed-from-gesture-initiated-event.html
               fast/events/popup-blocked-from-fake-button-click.html
               fast/events/popup-blocked-from-fake-focus.html

        * Android.mk: Add UserGestureIndicator.{cpp, h}.
        * GNUmakefile.am: Same.
        * WebCore.gypi: Same.
        * WebCore.pro: Same.
        * WebCore.vcproj/WebCore.vcproj: Same.
        * WebCore.xcodeproj/project.pbxproj: Same.
        * bindings/v8/ScriptController.cpp:
        (WebCore::ScriptController::processingUserGesture): Check the value of
        UserGesureIndicator::processingUserGesture().
        * dom/Document.cpp:
        (WebCore::Document::createEvent): Remove call to
        Event::setCreatedByDOM().
        * dom/Event.cpp:
        (WebCore::Event::Event): Remove initializers for m_createdByDOM.
        (WebCore::Event::fromUserGesture): Check the value of
        UserGestureIndicator::processingUserGesture().
        * dom/Event.h: Remove m_createdByDOM.
        * dom/UserGestureIndicator.cpp: Added.
        (WebCore::UserGestureIndicator::UserGestureIndicator): Save the previous
        value of s_processingUserGesture before setting it to true.
        (WebCore::UserGestureIndicator::~UserGestureIndicator): Restore
        s_processingUserGesture to its previous value.
        * dom/UserGestureIndicator.h: Added.
        (WebCore::UserGestureIndicator::processingUserGesture): Return the value
        of s_processingUserGesture.
        * page/EventHandler.cpp:
        (WebCore::EventHandler::handleMousePressEvent): Instantiate a
        UserGestureIndicator object on the stack to indicate a user gesture is
        being processed.
        (WebCore::EventHandler::handleMouseDoubleClickEvent): Same.
        (WebCore::EventHandler::handleMouseReleaseEvent): Same.
        (WebCore::EventHandler::keyEvent): Same.
        (WebCore::EventHandler::handleTouchEvent): Same.

2010-04-14  David Kilzer  <ddkilzer@apple.com>

        Part 2 of 3: <rdar://problem/7781548> video in webpages can "autoplay" by programmatically clicking

        Merged ToT WebKit r54182.

    2010-01-29  Gavin Barraclough  <barraclough@apple.com>

        Reviewed by Sam Weinig + Oliver Hunt.

        Bug 34346 - With JSC bindings, make processingUserGesture work with events in Isolated Worlds

        Change HTMLMediaElement methods that require checking whether the event is a user gesture to
        be passed a boolean.  This may be passed from the JSC bindings (where we have an exec state),
        or read from the event.  Add a Flag to the IDL to mark this information is required.

        * WebCore.Video.exp:
        * bindings/js/JSDOMBinding.cpp:
        (WebCore::processingUserGesture):
        * bindings/js/JSDOMWindowCustom.cpp:
        (WebCore::domWindowAllowPopUp):
        (WebCore::JSDOMWindow::open):
        (WebCore::JSDOMWindow::showModalDialog):
        * bindings/js/JSDocumentCustom.cpp:
        (WebCore::JSDocument::setLocation):
        * bindings/js/ScriptController.cpp:
        (WebCore::ScriptController::processingUserGesture):
        (WebCore::ScriptController::processingUserGestureEvent):
        (WebCore::ScriptController::anyPageIsProcessingUserGesture):
        * bindings/js/ScriptController.h:
        * bindings/scripts/CodeGeneratorJS.pm:
        * dom/Event.cpp:
        (WebCore::Event::isUserEvent):
        * dom/Event.h:
        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::removedFromDocument):
        (WebCore::HTMLMediaElement::load):
        (WebCore::HTMLMediaElement::play):
        (WebCore::HTMLMediaElement::pause):
        (WebCore::HTMLMediaElement::beginScrubbing):
        (WebCore::HTMLMediaElement::documentDidBecomeActive):
        (WebCore::HTMLMediaElement::webkitEnterFullScreen):
        * html/HTMLMediaElement.h:
        * html/HTMLMediaElement.idl:
        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::isProcessingUserGesture):
        * loader/MediaDocument.cpp:
        (WebCore::MediaDocument::defaultEventHandler):
        * page/DOMWindow.cpp:
        (WebCore::DOMWindow::allowPopUp):
        * rendering/MediaControlElements.cpp:
        (WebCore::MediaControlSeekButtonElement::defaultEventHandler):

2010-04-14  David Kilzer  <ddkilzer@apple.com>

        Part 1 of 3: <rdar://problem/7781548> video in webpages can "autoplay" by programmatically clicking

        Merged ToT WebKit r54143.

    2010-02-01  Eric Carlson  <eric.carlson@apple.com>

        Reviewed by Adele Peterson.

        Fullscreen API should be on HTMLVideoElement
        https://bugs.webkit.org/show_bug.cgi?id=34438

        Move fullscreen DOM APIs from HTMLMediaElement to HTMLVideoElement.

        * html/HTMLMediaElement.cpp:
        * html/HTMLMediaElement.h:
        * html/HTMLMediaElement.idl:
        * html/HTMLVideoElement.cpp:
        (WebCore::HTMLVideoElement::paint): Removed outdated FIXME.
        (WebCore::HTMLVideoElement::paintCurrentFrameInContext): Ditto.
        (WebCore::HTMLVideoElement::webkitEnterFullScreen): Moved from HTMLMediaElement.
        (WebCore::HTMLVideoElement::webkitExitFullScreen): Ditto.
        (WebCore::HTMLVideoElement::webkitSupportsFullscreen): Ditto.
        (WebCore::HTMLVideoElement::webkitDisplayingFullscreen): Ditto.
        * html/HTMLVideoElement.h:
        * html/HTMLVideoElement.idl:

2010-04-14  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by David Carson.

        <rdar://problem/7853347> ASSERTION FAILED: (touchEventType == TouchEventChange) at WebCore/page/iphone/EventHandlerIPhoneTouch.cpp:202 WebCore::EventHandler::handleTouchEvent

        Loosen up this ASSERT. A Touch Event sequence TouchBegin, TouchChange, TouchBegin is valid.
        The first finger touches, moves, and then the second finger begins.

        * page/iphone/EventHandlerIPhoneTouch.cpp:
        (WebCore::EventHandler::handleTouchEvent):

2010-04-14  David Kilzer  <ddkilzer@apple.com>

        Follow-up: <rdar://problem/7791134> iPhone: WebKit should treat port numbers outside the valid range as being blacklisted

        Merged ToT WebKit r56879.

    2010-03-31  Mark Rowe  <mrowe@apple.com>

        Reviewed by Darin Adler.

        <http://webkit.org/b/36878> REGRESSION: Trailing colon on hostnames (with no port specified) causes "Not allowed to use restricted network port"

        * platform/KURL.cpp:
        (WebCore::KURL::port): Explicitly handle the case of a colon being present in the URL after the host name but with
        no port number before the path.  This is handled in the same manner as the colon and port being omitted completely.

2010-04-13  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by David Carson.

        Fix comma placement in the -description of a WebEvent.

        * platform/iphone/WebEvent.mm:
        (-[WebEvent _touchLocationsDescription:]):
        (-[WebEvent _touchIdentifiersDescription]):

2010-04-13  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7717592> iPhone: CVE-2009-1233: Denial of service (application crash) via an XML document containing many nested A elements (35746)

        Merged ToT WebKit r57263.

    2010-04-08  Chris Evans  <cevans@chromium.org>

        Reviewed by Adam Barth.

        Sanity: apply a max node depth to XML parsing.

        https://bugs.webkit.org/show_bug.cgi?id=37247

        Test: fast/images/svg-nested.html

        * dom/XMLTokenizer.cpp:
        (WebCore::XMLTokenizer::pushCurrentNode):
          Error out the parse upon a really large node depth.

2010-04-12  Joseph Pecoraro  <joepeck@webkit.org>

        Follow up, attempt to fix the build for r217923.

        <rdar://problem/7761767> Select boxes are misshapen in LayoutTests/fast/forms/basic-selects.html

        * rendering/RenderThemeIPhone.cpp:

2010-04-12  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Kilzer and Paul Knight.

        <rdar://problem/7761767> Select boxes are misshapen in LayoutTests/fast/forms/basic-selects.html

        Enforce some default styles in RenderThemeIPhone. These are similar
        to the forced style rules used by RenderThemeMac and RenderThemeSafari.

        * rendering/RenderThemeIPhone.cpp: enforce default styles.
        (WebCore::RenderThemeIPhone::adjustMenuListButtonStyle):

2010-04-11  Chris Fleizach  <cfleizach@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/6839316> Stale accessibility rectangles left after application of CSS transforms

        The correct notification was already being sent in these cases, it just needed to be propagated upwards.

        * accessibility/iphone/AXObjectCacheIPhone.mm:
        (WebCore::AXObjectCache::postPlatformNotification):
        * accessibility/iphone/AccessibilityObjectWrapperIPhone.h:
        * accessibility/iphone/AccessibilityObjectWrapperIPhone.mm:
        (-[AccessibilityObjectWrapper postLayoutChangeNotification]):

2010-04-11  Chris Fleizach  <cfleizach@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/7846644> img alt inside link is not spoken by VO in MobileSafari

        An image inside of a link was not being exposed, and instead the link itself was being exposed.
        This caused the problem because the link did not have the alt tag of the image to return as its label.

        Test: platform/iphone-simulator/accessibility/link-with-only-image.html

        * accessibility/iphone/AccessibilityObjectWrapperIPhone.mm:
        (-[AccessibilityObjectWrapper containsUnnaturallySegmentedChildren]):

2010-04-11  Chris Fleizach  <cfleizach@apple.com>

        Reviewed by Brad Moore.

        <rdar://problem/7846602> REGESSION: MobileSafari crashed while using VoiceOver on store.apple.com/us

        accessibilityElementDidBecomeFocused is called from the outside and hence needs a web thread lock.

        * accessibility/iphone/AccessibilityObjectWrapperIPhone.mm:
        (-[AccessibilityObjectWrapper accessibilityElementDidBecomeFocused]):

2010-04-09  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Kilzer.

        <rdar://problem/7408710> Merge instrumentation framework from mainline WebCore

        Allow WebKit to build with ENABLE_INSPECTOR enabled. However, this
        change does not enable the flag.

          Allow a previously excluded file.

        * Configurations/WebCore.xcconfig: no longer exclude ConsoleMessage.cpp

          Context menus are disabled on PLATFORM(IPHONE). Correct some code
          that should have been protected by the ENABLE(CONTEXT_MENUS) flag.

        * bindings/js/JSInspectorFrontendHostCustom.cpp:
        (WebCore::JSInspectorFrontendHost::showContextMenu):
        * inspector/InspectorFrontendHost.cpp:
        (WebCore::InspectorFrontendHost::~InspectorFrontendHost):
        * inspector/InspectorFrontendHost.h:

2010-04-09  Chris Marrin  <cmarrin@apple.com>

        Reviewed by NOBODY (OOPS!).

        Reviewed by Simon Fraser.

        Fixed bug where animation time was not updated when dynamically loading a style sheet
        https://bugs.webkit.org/show_bug.cgi?id=37352

        A dynamically loaded style sheet kicks off its own styleRecalc cycle. This was not
        bracketed with a beginAnimationUpdate/endAnimationUpdate which wasn't resetting the
        animation time. In some time-dependent cases this was causing a negative elapsedTime
        to be sent to the keyframe animator. This is an invalid case which destroys the
        animation prematurely. I not only added the brackets, but I also added an assert
        and protection for when the elapsedTime comes up negative.

        Test: animations/dynamic-stylesheet-loading.html

        * dom/Document.cpp: Added brackets
        (WebCore::Document::updateStyleSelector):
        * page/animation/KeyframeAnimation.cpp: Added assert and protection
        (WebCore::KeyframeAnimation::getKeyframeAnimationInterval):

2010-04-09  Patrick Piemonte  <piemonte@apple.com>

        <rdar://problem/7828274> WebCore should use CLLocationManager +locationServicesEnabled

        Reviewed by David Kilzer.

        BUILD FIX: Added missing braces.

        * platform/iphone/GeolocationServiceCoreLocation.mm:
        (-[GeoLocationManager start]):

2010-04-09  Patrick Piemonte  <piemonte@apple.com>

        <rdar://problem/7828274> WebCore should use CLLocationManager +locationServicesEnabled

        Reviewed by David Kilzer.

        Updating the CoreLocation API usage.

        * platform/iphone/GeolocationServiceCoreLocation.mm:
        (-[GeoLocationManager start]):

2010-04-08  Greg Bolsinga  <bolsinga@apple.com>

        <rdar://problem/7674554> Safari hangs when user replies to Hotmail email (flat frame code needs lots of help)

        Merge ToT WebKit r57225.

    2010-04-07  Kenneth Rohde Christiansen  <kenneth@webkit.org>

        Reviewed by Darin Adler.

        Poor rendering on lala.com with frame flattening
        https://bugs.webkit.org/show_bug.cgi?id=37164

        Do not flatten offscreen iframes.

        Test: fast/frames/flattening/iframe-flattening-offscreen.html

        * rendering/RenderPartObject.cpp:
        (WebCore::RenderPartObject::flattenFrame):
        * rendering/RenderPartObject.h:

2010-04-08  Greg Bolsinga  <bolsinga@apple.com>

        <rdar://problem/7674554> Safari hangs when user replies to Hotmail email (flat frame code needs lots of help)

        Merge ToT WebKit r57080.

    2010-04-01  Kenneth Rohde Christiansen  <kenneth@webkit.org>

        Reviewed by Dave Hyatt.

        iframe flattening doesn't flatten
        https://bugs.webkit.org/show_bug.cgi?id=36798

        Fixed to the iframe flattening code so that the iframes on
        http://www.samisite.com/test-csb2nf/id43.htm are actually
        flattened.

        Covered by current tests.

        * page/FrameView.cpp: Propagate contents changes of iframes
        and subframes in framesets to the parent so that it is relayouted
        (WebCore::FrameView::setContentsSize):
        (WebCore::FrameView::adjustViewSize):
        (WebCore::FrameView::scheduleRelayout):
        * rendering/RenderPart.cpp: HTMLIFrameElement do not inherit from
        HTMLFrameElement, but HTMLFrameElementBase, correct cast. Correct
        the use of inset border values. Avoid a sometimes unnecessary
        relayout.
        (WebCore::RenderPart::layoutWithFlattening):
        * rendering/RenderPartObject.cpp: Make the calcHeight and calcWidth
        return the right values, considering scrolling and fixed width/height
        (WebCore::RenderPartObject::flattenFrame):
        (WebCore::RenderPartObject::calcHeight):
        (WebCore::RenderPartObject::calcWidth):
        (WebCore::RenderPartObject::layout):

2010-04-08  Greg Bolsinga  <bolsinga@apple.com>

        <rdar://problem/7674554> Safari hangs when user replies to Hotmail email (flat frame code needs lots of help)

        Merge ToT WebKit r56856.

    2010-03-31  Kenneth Rohde Christiansen  <kenneth@webkit.org>

        Unreviewed crash fix.

        Crash with frame flattening on after r56854
        https://bugs.webkit.org/show_bug.cgi?id=36894

        Solution tested by Greg Bolsinga, thanks.

        * page/FrameView.cpp:
        (WebCore::FrameView::avoidScrollbarCreation):
        * platform/ScrollView.cpp:
        (WebCore::ScrollView::setHasHorizontalScrollbar):
        (WebCore::ScrollView::setHasVerticalScrollbar):

2010-04-08  Greg Bolsinga  <bolsinga@apple.com>

        <rdar://problem/7674554> Safari hangs when user replies to Hotmail email (flat frame code needs lots of help)

        Merge ToT WebKit r56854.

    2010-03-31  Kenneth Rohde Christiansen  <kenneth@webkit.org>

        Reviewed by Antti Koivisto.

        iframe flattening doesn't flatten
        https://bugs.webkit.org/show_bug.cgi?id=36798

        Do not draw scrollbars for subframes when frame flattening is
        enabled. Implemented using a virtual method in ScrollView as
        suggested by Dave Hyatt.

        Do not suppress scrollbars as that is wrong according to
        Dave Hyatt.

        Covered by current tests.

        * page/FrameView.cpp:
        (WebCore::FrameView::avoidScrollbarCreation):
        * page/FrameView.h:
        * platform/ScrollView.cpp:
        (WebCore::ScrollView::setHasHorizontalScrollbar):
        (WebCore::ScrollView::setHasVerticalScrollbar):
        * platform/ScrollView.h:
        (WebCore::ScrollView::avoidScrollbarCreation):
        * rendering/RenderPart.cpp:
        (WebCore::RenderPart::layoutWithFlattening):

2010-04-08  Greg Bolsinga  <bolsinga@apple.com>

        <rdar://problem/7674554> Safari hangs when user replies to Hotmail email (flat frame code needs lots of help)

        Merge ToT WebKit r56852.

    2010-03-30  Kenneth Rohde Christiansen  <kenneth@webkit.org>

        Reviewed by Antti Koivisto.

        iframe flattening doesn't flatten
        https://bugs.webkit.org/show_bug.cgi?id=36798

        Fix wrongly reversing logic in frame flattening check.

        Tests:
        fast/frames/flattening/iframe-flattening-fixed-height.html
        fast/frames/flattening/iframe-flattening-fixed-width.html
        fast/frames/flattening/iframe-flattening-fixed-width-and-height.html
        fast/frames/flattening/iframe-flattening-fixed-width-and-height-no-scrolling.html

        * rendering/RenderPartObject.cpp:
        (WebCore::RenderPartObject::flattenFrame):

2010-04-08  Greg Bolsinga  <bolsinga@apple.com>

        <rdar://problem/7674554> Safari hangs when user replies to Hotmail email (flat frame code needs lots of help)

        Merge ToT WebKit r56718.

    2010-03-26  Kenneth Rohde Christiansen  <kenneth@webkit.org>

        Reviewed by Antti Koivisto.

        Implement flattening for iframes.

        Refactoring of frameset flattening code to reuse it for
        iframe flattening.

        Tests: fast/frames/flattening/iframe-flattening-simple.html

        * WebCore.base.exp:
        * page/FrameView.cpp:
        (WebCore::FrameView::layout):
        (WebCore::FrameView::scheduleRelayout):
        * page/Settings.cpp:
        (WebCore::Settings::Settings):
        (WebCore::Settings::setFrameFlatteningEnabled):
        * page/Settings.h:
        (WebCore::Settings::frameFlatteningEnabled):
        * rendering/RenderFrame.cpp:
        * rendering/RenderFrame.h:
        * rendering/RenderFrameSet.cpp:
        (WebCore::RenderFrameSet::flattenFrameSet):
        * rendering/RenderFrameSet.h:
        * rendering/RenderPart.cpp:
        (WebCore::RenderPart::layoutWithFlattening):
        * rendering/RenderPart.h:
        * rendering/RenderPartObject.cpp:
        (WebCore::RenderPartObject::flattenFrame):
        (WebCore::RenderPartObject::calcHeight):
        (WebCore::RenderPartObject::calcWidth):
        (WebCore::RenderPartObject::layout):
        * rendering/RenderPartObject.h:

2010-04-08  Greg Bolsinga  <bolsinga@apple.com>

        <rdar://problem/7674554> Safari hangs when user replies to Hotmail email (flat frame code needs lots of help)

        Merge ToT WebKit r54613.

    2010-02-10  Jesus Sanchez-Palencia  <jesus.palencia@openbossa.org>

        Reviewed by Kenneth Rohde Christiansen.

        Support frameset flattening
        https://bugs.webkit.org/show_bug.cgi?id=32717

        Add support for enabling/disabling FrameSet Flattening on the Mac port.

        * WebCore.base.exp:

2010-04-08  Greg Bolsinga  <bolsinga@apple.com>

        <rdar://problem/7674554> Safari hangs when user replies to Hotmail email (flat frame code needs lots of help)

        Merge ToT WebKit r54440.

    2010-01-19  Kenneth Rohde Christiansen  <kenneth@webkit.org>

        Reviewed by Dave Hyatt.

        Implement flattening of framesets
        https://bugs.webkit.org/show_bug.cgi?id=32717

        The following patch, builds ontop of Antti Koivisto's frameset
        flattening code from the iPhone source, which itself is based on
        the old Nokia Series 60 source.

        Layout tests have been added to test the functionality and the original
        code which has then been fixed to make these pass, as well as support
        frameset grids.

        Tests: fast/frames/flattening/frameset-flattening-advanced.html
               fast/frames/flattening/frameset-flattening-grid.html
               fast/frames/flattening/frameset-flattening-simple.html
               fast/frames/flattening/frameset-flattening-subframe-resize.html
               fast/frames/flattening/frameset-flattening-subframesets.html

        * page/FrameView.cpp:
        (WebCore::FrameView::layout):
        (WebCore::FrameView::scheduleRelayout):
        * page/Settings.cpp:
        (WebCore::Settings::Settings):
        (WebCore::Settings::setFrameSetFlatteningEnabled):
        * page/Settings.h:
        (WebCore::Settings::frameSetFlatteningEnabled):
        * rendering/RenderFrame.cpp:
        (WebCore::RenderFrame::layoutWithFlattening):
        * rendering/RenderFrame.h:
        * rendering/RenderFrameSet.cpp:
        (WebCore::RenderFrameSet::layout):
        (WebCore::RenderFrameSet::positionFramesWithFlattening):
        (WebCore::RenderFrameSet::flattenFrameSet):
        (WebCore::RenderFrameSet::userResize):
        * rendering/RenderFrameSet.h:

2010-04-08  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by David Carson.

        <rdar://problem/7674554> Safari hangs when user replies to Hotmail email (flat frame code needs lots of help)

        Remove ENABLE(FRAME_FLATTENING_DEPRECATED) code so that OpenSource code can be merged in for this feature.

        * DerivedSources.make:
        * WebCore.FrameFlatteningDeprecated.exp: Removed.
        * page/Frame.cpp:
        * page/Frame.h:
        * page/FrameView.cpp:
        (WebCore::FrameView::layout):
        (WebCore::FrameView::scheduleRelayout):
        * page/Settings.cpp:
        (WebCore::Settings::Settings):
        * page/Settings.h:
        * rendering/RenderFrame.cpp:
        * rendering/RenderFrame.h:
        * rendering/RenderFrameSet.cpp:
        (WebCore::RenderFrameSet::layout):
        * rendering/RenderFrameSet.h:
        * rendering/RenderPartObject.cpp:
        (WebCore::RenderPartObject::RenderPartObject):
        (WebCore::RenderPartObject::layout):
        * rendering/RenderPartObject.h:
        * rendering/RenderWidget.cpp:
        (WebCore::RenderWidget::updateWidgetPosition):

2010-04-08  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Carson.

        <rdar://problem/7761093> Default size of <input type="text"> fields changed from 137x21 to 129x21 from Wildcat to Apex
        <rdar://problem/7763309> iPhone: REGRESSION: bugs.webkit.org text fields are much smaller in ToT (25566)

        Merged ToT WebKit r43007 and r54748

    2010-01-05  Ojan Vafai  <ojan@chromium.org>

            Reviewed by Dan Bernstein.

            Improve text control intrinsic widths.
            https://bugs.webkit.org/show_bug.cgi?id=25566
            https://bugs.webkit.org/show_bug.cgi?id=25581
            https://bugs.webkit.org/show_bug.cgi?id=25958

            For Mac fonts that have invalid avgCharWidth entries in the OS/2 table,
            fallback to the Safari 4- behavior of using the width of a zero. For other
            fonts, make Mac match Windows (and thus IE) metrics.

            Lucida Grande is hard-coded to match MS Shell Dlg for inputs and
            Courier New for textareas in order to match Safari Win, Firefox and, in
            some cases IE (IE uses different default fonts depending on encoding).

            The only case where we still don't match Windows is if no font-size is
            set. The default font-size for form controls on the Mac is smaller and
            thus text-control widths will be slightly smaller.

            No new tests. Covered by existing tests.

            * platform/graphics/mac/SimpleFontDataMac.mm:
            (WebCore::SimpleFontData::platformCharWidthInit):
            * rendering/RenderTextControl.cpp:
            (WebCore::):
            (WebCore::RenderTextControl::hasValidAvgCharWidth):
            (WebCore::RenderTextControl::getAvgCharWidth):
            (WebCore::RenderTextControl::calcPrefWidths):
            * rendering/RenderTextControl.h:
            (WebCore::RenderTextControl::scaleEmToUnits):
            * rendering/RenderTextControlMultiLine.cpp:
            (WebCore::RenderTextControlMultiLine::getAvgCharWidth):
            * rendering/RenderTextControlMultiLine.h:
            * rendering/RenderTextControlSingleLine.cpp:
            (WebCore::RenderTextControlSingleLine::getAvgCharWidth):
            (WebCore::RenderTextControlSingleLine::preferredContentWidth):
            * rendering/RenderTextControlSingleLine.h:

2010-04-08  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Greg Bolsinga.

        <rdar://problem/7530169> Background flashes to non-stretched size during a CSS transition elsewhere on the page

        Fix a bug in the phone-specific tiling code that did the wrong thing if the source image was being scaled.

        * platform/graphics/Image.cpp:
        (WebCore::Image::drawTiled):

2010-04-07  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by David Carson.

        <rdar://problem/7580622> REGR: Verify Geolocation works after Safari Havoc merge

        Use the new ChromeClient and WebUIDelegate for Geolocation.

        * loader/EmptyClients.h:
        * page/Chrome.cpp:
        (WebCore::Chrome::requestGeolocationPermissionForFrame):
        * page/Chrome.h:
        * page/ChromeClient.h:

2010-04-07  Ada Chan  <adachan@apple.com>

        Reviewed by Greg Bolsinga and Brady Eidson

        <rdar://problem/7631760> Settings doesn't know Safari databases has changed

        Sends a system wide notification when a new origin has been added to the database.
        Other processes can listen for that notification and refresh their origin maps, and then
        send a local notification that the origins have changed.

        * WebCore.iPhone.exp: Export _WebThreadIsLockedOrDisabled and DatabaseTracker::invalidateOrigins.
        * storage/DatabaseTracker.cpp:
        (WebCore::DatabaseTracker::populateOrigins): Only instantiate m_quotaManager if it's not null.  This change
        is already in OpenSource.
        (WebCore::DatabaseTracker::setQuota): Call dispatchDidAddNewOrigin() on the DatabaseTrackerClient if a new
        origin has been inserted into the database.
        (WebCore::DatabaseTracker::invalidateOrigins): Clear the m_quotaMap so it'll be recalculated next time.
        * storage/DatabaseTracker.h:
        * storage/DatabaseTrackerClient.h:

2010-04-07  Enrica Casucci  <enrica@apple.com>

    <rdar://problem/7702452> N90/Apex8A211: Text gets "white-out" by the insertion cursor

    Merged ToT WebKit r57218.

    2010-04-07  Enrica Casucci  <enrica@apple.com>

            Reviewed by Darin Adler.

            https://bugs.webkit.org/show_bug.cgi?id=37219

            This change disables text caret for the iPhone platflorm.
            Added UNUSED_PARAM to build when ENABLE_TEXT_CARET is 0.

            * editing/SelectionController.cpp:
            (WebCore::SelectionController::recomputeCaretRect):
            (WebCore::SelectionController::paintCaret):
            * page/Frame.cpp:
            (WebCore::Frame::paintDragCaret):

2010-04-07  Enrica Casucci  <enrica@apple.com>

        <rdar://problem/7795471> [Apex8A228]: Deleting characters with stacked diacriticals causes artifacts to remain
        <rdar://problem/7795689> [Apex8A229]: Some stacked diacritical characters are not drawn correctly

        Merged ToT WebKit r57215.

        2010-04-07  Enrica Casucci  <enrica@apple.com>

            Reviewed by Dave Hyatt.

            Text repainting does not account for glyphs which draw outside the typographic bounds of the font (6274).
            <rdar://problem/6649734>
            <https://bugs.webkit.org/show_bug.cgi?id=6274>

            In order to be able to handle successfully this case, it is necessary to change the glyph width cache to store
            the bounding box for the glyph instead of the simply caching the glyph width.
            Retrieving the bounding box for the glyph is expensive, therefore we do it only
            when we are rendering text using the complex text path to minimize the performance impact.
            To support characters with stacked diacritics, the method canUseGlyphCache has been modified to
            return false for the range of characters with stacked diacritics.
            The glyph cache has been also updated to allow storing the glyph bounding box together with the
            horizontal width. The bounding box is populated only for complex text.

            The original version of this patch has been written by Dan Bernstein.

            Test: fast/repaint/stacked-diacritics.html

            * Android.mk: File name change.
            * GNUmakefile.am: File name change.
            * WebCore.base.exp: Added parameter in exported function.
            * WebCore.gypi: File name change.
            * WebCore.vcproj/WebCore.vcproj: File name change.
            * WebCore.xcodeproj/project.pbxproj: File name change.
            * platform/graphics/Font.cpp:
            (WebCore::Font::floatWidth): Added glyphOverflow parameter.
            * platform/graphics/Font.h:
            (WebCore::GlyphOverflow::GlyphOverflow): Added.
            (WebCore::Font::width): Added glyphOverflow parameter.
            * platform/graphics/FontFastPath.cpp:
            (WebCore::Font::canUseGlyphCache): Modified to render characters with stacked diacritics with complex text path.
            * platform/graphics/GlyphMetricsMap.cpp: Copied from WebCore/platform/graphics/GlyphWidthMap.cpp.
            (WebCore::GlyphMetricsMap::locatePageSlowCase): Class name changed to reflect new semantics.
            * platform/graphics/GlyphMetricsMap.h: Copied from WebCore/platform/graphics/GlyphWidthMap.h.
            (WebCore::GlyphMetricsMap::GlyphMetricsMap):
            (WebCore::GlyphMetricsMap::~GlyphMetricsMap):
            (WebCore::GlyphMetricsMap::metricsForGlyph):
            (WebCore::GlyphMetricsMap::widthForGlyph):
            (WebCore::GlyphMetricsMap::setMetricsForGlyph):
            (WebCore::GlyphMetricsMap::GlyphMetricsPage::metricsForGlyph):
            (WebCore::GlyphMetricsMap::GlyphMetricsPage::setMetricsForGlyph):
            (WebCore::GlyphMetricsMap::GlyphMetricsPage::setMetricsForIndex):
            (WebCore::GlyphMetricsMap::locatePage):
            * platform/graphics/GlyphWidthMap.cpp: Removed.
            * platform/graphics/GlyphWidthMap.h: Removed.
            * platform/graphics/SimpleFontData.cpp:
            (WebCore::SimpleFontData::platformGlyphInit):
            * platform/graphics/SimpleFontData.h:
            (WebCore::):
            (WebCore::SimpleFontData::widthForGlyph):
            (WebCore::SimpleFontData::metricsForGlyph):
            * platform/graphics/cairo/SimpleFontDataCairo.cpp:
            (WebCore::SimpleFontData::platformMetricsForGlyph): Name and signature change.
            * platform/graphics/chromium/FontChromiumWin.cpp:
            (WebCore::Font::floatWidthForComplexText): Added parameter.
            * platform/graphics/chromium/FontLinux.cpp:
            (WebCore::Font::floatWidthForComplexText): Added parameter.
            * platform/graphics/chromium/SimpleFontDataChromiumWin.cpp:
            (WebCore::SimpleFontData::platformMetricsForGlyph): Name and signature change.
            * platform/graphics/chromium/SimpleFontDataLinux.cpp:
            (WebCore::SimpleFontData::platformWidthForGlyph): Name and signature vachange
            * platform/graphics/efl/FontEfl.cpp:
            (WebCore::Font::floatWidthForComplexText): Name and signature change.
            * platform/graphics/gtk/SimpleFontDataPango.cpp:
            (WebCore::SimpleFontData::platformMetricsForGlyph): Name and signature change.
            * platform/graphics/haiku/FontHaiku.cpp:
            (WebCore::Font::floatWidthForComplexText): Added parameter.
            * platform/graphics/haiku/SimpleFontDataHaiku.cpp:
            (WebCore::SimpleFontData::platformMetricsForGlyph): Name and signature change.
            * platform/graphics/mac/ComplexTextController.cpp:
            (WebCore::ComplexTextController::ComplexTextController):
            (WebCore::ComplexTextController::adjustGlyphsAndAdvances):
            * platform/graphics/mac/ComplexTextController.h:
            (WebCore::ComplexTextController::minGlyphBoundingBoxX):
            (WebCore::ComplexTextController::maxGlyphBoundingBoxX):
            (WebCore::ComplexTextController::minGlyphBoundingBoxY):
            (WebCore::ComplexTextController::maxGlyphBoundingBoxY):
            * platform/graphics/mac/FontComplexTextMac.cpp:
            (WebCore::Font::floatWidthForComplexText): Added paramter.
            * platform/graphics/mac/SimpleFontDataMac.mm:
            (WebCore::SimpleFontData::platformMetricsForGlyph): Name and signature change.
            * platform/graphics/qt/FontQt.cpp:
            (WebCore::Font::floatWidthForComplexText): Added paramter.
            * platform/graphics/win/FontWin.cpp:
            (WebCore::Font::floatWidthForComplexText): Added parameter.
            * platform/graphics/win/SimpleFontDataCGWin.cpp:
            (WebCore::SimpleFontData::platformMetricsForGlyph): Name and signature change.
            * platform/graphics/win/SimpleFontDataWin.cpp:
            (WebCore::SimpleFontData::metricsForGDIGlyph):
            * platform/graphics/win/UniscribeController.cpp:
            (WebCore::UniscribeController::UniscribeController):
            (WebCore::UniscribeController::shapeAndPlaceItem):
            * platform/graphics/win/UniscribeController.h:
            (WebCore::UniscribeController::minGlyphBoundingBoxX):
            (WebCore::UniscribeController::maxGlyphBoundingBoxX):
            (WebCore::UniscribeController::minGlyphBoundingBoxY):
            (WebCore::UniscribeController::maxGlyphBoundingBoxY):
            * platform/graphics/wince/FontWince.cpp:
            (WebCore::Font::floatWidthForComplexText): Added parameter.
            * platform/graphics/wx/FontWx.cpp:
            (WebCore::Font::floatWidthForComplexText): Added parameter.
            * platform/graphics/wx/SimpleFontDataWx.cpp:
            (WebCore::SimpleFontData::platformMetricsForGlyph): Name and signature change.
            * rendering/InlineFlowBox.cpp:
            (WebCore::InlineFlowBox::placeBoxesHorizontally):
            (WebCore::InlineFlowBox::computeLogicalBoxHeights):
            (WebCore::InlineFlowBox::computeVerticalOverflow):
            * rendering/InlineTextBox.cpp:
            (WebCore::InlineTextBox::setFallbackFonts):
            (WebCore::InlineTextBox::fallbackFonts):
            (WebCore::InlineTextBox::setGlyphOverflow):
            (WebCore::InlineTextBox::glyphOverflow):
            * rendering/InlineTextBox.h:
            (WebCore::InlineTextBox::clearGlyphOverflowAndFallbackFontMap): Added.
            * rendering/RenderBlockLineLayout.cpp:
            (WebCore::RenderBlock::computeHorizontalPositionsForLine):
            (WebCore::RenderBlock::layoutInlineChildren):
            * rendering/RenderText.cpp:
            (WebCore::RenderText::RenderText):
            (WebCore::RenderText::styleDidChange):
            (WebCore::RenderText::widthFromCache):
            (WebCore::RenderText::trimmedPrefWidths):
            (WebCore::RenderText::calcPrefWidths):
            (WebCore::RenderText::setText):
            (WebCore::RenderText::width):
            * rendering/RenderText.h:

2010-04-07  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Cameron Zwarich.

        <rdar://problem/7482080> Text on demo.webapp-net.com looks blurry or out-of-focus

        Set the correct contents scale on compositing layers, taking screen scale into account.

        * page/Frame.h:
        * page/iphone/FrameIPhone.mm:
        (WebCore::Frame::contentsScale): New method that returns the product of document scale and
        screen scale.

        (WebCore::Frame::documentScaleChanged): Use contentsScale() when updating compositing layers.
        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::createGraphicsLayer): Use contentsScale(), not documentScale().
        (WebCore::RenderLayerBacking::updateForegroundLayer): Ditto.
        (WebCore::RenderLayerBacking::updateMaskLayer): Ditto.

2010-04-07  Greg Bolsinga  <bolsinga@apple.com>

        <rdar://problem/7822422> Event Targets are lost in a non-deterministic fashion

        Merged ToT WebKit r54401.

    2010-02-04  Geoffrey Garen  <ggaren@apple.com>

        Build fix: Added a forwarding header.

        * ForwardingHeaders/runtime/WeakGCPtr.h: Added.

2010-04-07  Greg Bolsinga  <bolsinga@apple.com>

        <rdar://problem/7822422> Event Targets are lost in a non-deterministic fashion

        Merged ToT WebKit r54400.

    2010-02-04  Geoffrey Garen  <ggaren@apple.com>

        Reviewed by Alexey Proskuryakov and Darin Adler.

        REGRESSION (r52082): Missing event handlers on JQuery demo page (33383)
        https://bugs.webkit.org/show_bug.cgi?id=33383
        <rdar://problem/7559449>

        There were two bugs here:

        1. A stale wrapper would invalidate a node's event listeners, even if
        the node had a fresh wrapper keeping it alive.

        The fix for this is for an event listener to keep a WeakGCPtr back-pointer
        to the wrapper it expects to mark it. The wrapper destructor checks this
        back-pointer, and only invalidates the event listener in the case of a match.

        2. Conversely, a stale wrapper would not invalidate a node's event
        listeners soon enough, if its destructor didn't have a chance to run
        before an event fired on the node. (This can only happen in cases where
        we've made some other error and failed to mark a wrapper that was circuitously
        observable in the DOM. But we know we have edge case bugs like this, and
        we don't want them to be crashes.)

        The fix for this is to check the wrapper back-pointer before firing the
        event listener. As long as the the wrapper back-pointer is not null,
        it's safe to fire the listener.

        * ForwardingHeaders/runtime/WeakGCPtr.h: Added. Appease build gods.

        * bindings/js/JSAbstractWorkerCustom.cpp:
        (WebCore::JSAbstractWorker::addEventListener):
        (WebCore::JSAbstractWorker::removeEventListener):
        * bindings/js/JSDOMApplicationCacheCustom.cpp:
        (WebCore::JSDOMApplicationCache::addEventListener):
        (WebCore::JSDOMApplicationCache::removeEventListener):
        * bindings/js/JSDOMWindowCustom.cpp:
        (WebCore::JSDOMWindow::markChildren):
        (WebCore::JSDOMWindow::addEventListener):
        (WebCore::JSDOMWindow::removeEventListener): Updated to pass a wrapper
        to the JSEventListener constructor.

        * bindings/js/JSEventListener.cpp:
        (WebCore::JSEventListener::JSEventListener):
        (WebCore::JSEventListener::initializeJSFunction):
        (WebCore::JSEventListener::invalidateJSFunction):
        * bindings/js/JSEventListener.h:
        (WebCore::JSEventListener::create):
        (WebCore::JSEventListener::isolatedWorld):
        (WebCore::JSEventListener::wrapper):
        (WebCore::JSEventListener::setWrapper):
        (WebCore::JSEventListener::jsFunction):
        (WebCore::createJSAttributeEventListener): Implemented the back-pointer
        described above. Refactored the jsFunction() accessor to return 0 if
        the wrapper back-pointer is 0.

        * bindings/js/JSEventSourceCustom.cpp:
        (WebCore::JSEventSource::addEventListener):
        (WebCore::JSEventSource::removeEventListener):
        * bindings/js/JSLazyEventListener.cpp:
        (WebCore::JSLazyEventListener::JSLazyEventListener):
        (WebCore::JSLazyEventListener::initializeJSFunction):
        * bindings/js/JSLazyEventListener.h:
        (WebCore::JSLazyEventListener::create):
        * bindings/js/JSMessagePortCustom.cpp:
        (WebCore::JSMessagePort::markChildren):
        (WebCore::JSMessagePort::addEventListener):
        (WebCore::JSMessagePort::removeEventListener):
        * bindings/js/JSNodeCustom.cpp:
        (WebCore::JSNode::addEventListener):
        (WebCore::JSNode::removeEventListener):
        (WebCore::JSNode::markChildren):
        * bindings/js/JSSVGElementInstanceCustom.cpp:
        (WebCore::JSSVGElementInstance::addEventListener):
        (WebCore::JSSVGElementInstance::removeEventListener):
        * bindings/js/JSWebSocketCustom.cpp:
        (WebCore::JSWebSocket::addEventListener):
        (WebCore::JSWebSocket::removeEventListener):
        * bindings/js/JSWorkerContextCustom.cpp:
        (WebCore::JSWorkerContext::markChildren):
        (WebCore::JSWorkerContext::addEventListener):
        (WebCore::JSWorkerContext::removeEventListener):
        * bindings/js/JSXMLHttpRequestCustom.cpp:
        (WebCore::JSXMLHttpRequest::markChildren):
        (WebCore::JSXMLHttpRequest::addEventListener):
        (WebCore::JSXMLHttpRequest::removeEventListener):
        * bindings/js/JSXMLHttpRequestUploadCustom.cpp:
        (WebCore::JSXMLHttpRequestUpload::markChildren):
        (WebCore::JSXMLHttpRequestUpload::addEventListener):
        (WebCore::JSXMLHttpRequestUpload::removeEventListener): Updated to pass a wrapper
        to the JSEventListener constructor.


        * bindings/js/ScriptEventListener.cpp:
        (WebCore::createAttributeEventListener): Updated to pass a wrapper
        to the JSEventListener constructor.
        (WebCore::getEventListenerHandlerBody): Updated for the fact that jsFunction()
        is no longer a virtual accessor on the EventHandler base class.

        * bindings/scripts/CodeGeneratorJS.pm: Updated for the fact that jsFunction()
        is no longer a virtual accessor on the EventHandler base class. Added a "JS"
        to invalidateEventListeners and markEventListeners to clarify that these
        actions are for JS event listeners only. Added a wrapper parameter to
        invalidateEventListeners for the back-pointer check explained above.

        * dom/EventListener.h:
        (WebCore::EventListener::invalidateJSFunction): ditto

        * dom/EventTarget.h:
        (WebCore::EventTarget::markJSEventListeners):
        (WebCore::EventTarget::invalidateJSEventListeners): ditto

2010-04-06  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Greg Bolsinga.

        <rdar://problem/5908492> Initial contents scale on Eclair layers is wrong

        Frame cached the document scale in m_documentScale, but was never told the initial scale,
        so this was always 1.0 until you pinched.

        Fix by fetching the scale from the WAKView, and replace the setter with a documentScaleChanged()
        that gets called from WebHTMLView's override of -setScale:. Frame::documentScale() also needs
        to get the scale from the main frame's view, since that's the only one with the scale on it.

        Also moved Frame's scale-related iPhone-only code to FrameIPhone.mm.

        When creating GraphicsLayers, set their contentsScale by fetching the documentScale from the Frame.

        * WebCore.iPhone.exp:
        * page/Frame.cpp:
        * page/Frame.h:
        * page/iphone/FrameIPhone.mm:
        (WebCore::Frame::documentScale):
        (WebCore::Frame::documentScaleChanged):
        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::createGraphicsLayer):
        (WebCore::RenderLayerBacking::updateForegroundLayer):
        (WebCore::RenderLayerBacking::updateMaskLayer):

2010-04-06  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by NOBODY (OOPS!).

        Initial cleanup for:
        <rdar://problem/5908492> Initial contents scale on Eclair layers is wrong

        Rename some methods to make their roles clearer:

        RenderLayer::setDocumentScale() -> updateContentsScale()
        RenderLayerBacking::setDocumentScale() -> updateContentsScale()
        RenderLayerCompositor::setDocumentScale() -> updateContentsScale()

        * page/Frame.cpp:
        (WebCore::Frame::setDocumentScale):
        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::updateContentsScale):
        * rendering/RenderLayer.h:
        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::updateContentsScale):
        * rendering/RenderLayerBacking.h:
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::updateContentsScale):
        * rendering/RenderLayerCompositor.h:

2010-04-06  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by David Carson.

        <rdar://problem/6845619> Reset CoreLocation Warnings will not reset Geolocation warnings

        This is clean up in preparation to update to Open Source Geolocation. ENABLE_GEOLOCATION_PERMISSION_CACHE
        is an iPhone only concept that doesn't even work due to <rdar://problem/7835511>.

        * page/Geolocation.cpp: Use ENABLE_GEOLOCATION_PERMISSION_CACHE.
        * page/Geolocation.h: Ditto.
        * platform/GeolocationService.cpp: Ditto.
        * platform/GeolocationService.h: Use ENABLE_GEOLOCATION_PERMISSION_CACHE. Remove unneeded PLATFORM(IPHONE).
        * platform/iphone/GeolocationServiceCoreLocation.mm: Use ENABLE_GEOLOCATION_PERMISSION_CACHE.
        (-[GeoLocationManager sendLocation:]):

2010-04-06  Chris Fleizach  <cfleizach@apple.com>

        Reviewed by Greg Bolsinga.

        <rdar://problem/7703989> VO clickable area on device doesn't match combined size of all webkit descendant contents
        Some links where allowing their children to be exposed through Accessibility instead of exposing the link itself.

        Test: platform/iphone-simulator/accessibility/link-with-images-text.html

        * accessibility/iphone/AccessibilityObjectWrapperIPhone.mm:
        (-[AccessibilityObjectWrapper determineIsAccessibilityElement]):
        (-[AccessibilityObjectWrapper containsUnnaturallySegmentedChildren]):

2010-04-06  Paul Knight   <pknight@apple.com>

        Reviewed by Greg Bolsinga.

        <rdar://problem/7786960> WebCore should listen for a wakeup notification instead of listening to power wakeup events

        Instead of using IOKit power notifications, fire the shared timer every time the application becomes active.

        * platform/iphone/SharedTimerIPhone.mm:
        (-[WebCorePowerNotifierIPhone init]):

2010-04-05  Cameron Zwarich  <zwarich@apple.com>

        <rdar://problem/7063255> 7C106: MobileSafari renders usps.com incorrectly

        Reviewed by David Carson.

        * platform/network/mac/ResourceHandleMac.mm:
        (-[WebCoreResourceHandleAsDelegate connection:didReceiveResponse:]): Only use QuickLook
        for the main resource load.

2010-04-05  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/7829095> Name the Web Thread for Xcode

        Reviewed by Greg Bolsinga.

        Set the name for the WebThread using pthread_setname_np for debugging.

        * wak/WebCoreThread.mm:
        (RunWebThread):

2010-04-05  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by Paul Knight.

        Wrap a missing ENABLE(FRAME_FLATTENING_DEPRECATED).
        Investigation done for <rdar://problem/7674554>.

        * page/Settings.h:

2010-04-05  Cameron Zwarich  <zwarich@apple.com>

        <rdar://problem/7644476> CFURLConnectionSetMaximumBufferSize deprecated

        Reviewed by Pratik Solanki.

        * platform/network/iphone/NSURLConnectionIPhone.m:
        (-[NSURLConnectionIPhone start]): Remove usage of CFURLConnectionSetMaximumBufferSize().
        According to the CFNetwork team, what we are doing is now the default behavior.

2010-04-04  Cameron Zwarich  <zwarich@apple.com>

        <rdar://problem/7526051> context.fillText does not work on iPhone

        Reviewed by David Kilzer.

        Remove uses of WKGetCurrentGraphicsContext() from platform/graphics. These were
        probably needed at one point for WAKStringDrawing, but now WAKStringDrawing creates
        a WebCore GraphicsContext with the result of WKGetCurrentGraphicsContext() as the
        platform context.

        This was causing the canvas text drawing code to use the wrong context.

        * platform/graphics/mac/FontMac.mm:
        (WebCore::Font::drawGlyphs):
        * platform/graphics/mac/GraphicsContextMac.mm:
        (WebCore::GraphicsContext::drawLineForMisspellingOrBadGrammar):

2010-04-03  Cameron Zwarich  <zwarich@apple.com>

        <rdar://problem/7811150> Search bar text is low-res when keyboard is shown

        Reviewed by Pratik Solanki.

        * platform/iphone/TileCache.mm:
        (WebCore::TileCache::Tile::Tile): Set the contentsScale of the new layer appropriately
        using the screenScale in the WAKWindow.
        * wak/WKWindow.mm:
        (WKWindowCreate): Set the default value of screenScale to 1.0. In theory, we don't
        need it, but it's better to be safe than sorry.

2010-04-03  Dan Bernstein  <mitz@apple.com>

        Reviewed by Cameron Zwarich.

        -[WAKView displayRectIgnoringOpacity:inContext:] should not clip the receiver to its superview’s bounds
        Part of <rdar://problem/7628970> Sub-TLF: Support for printing in WebKit

        This matches -[NSView displayRectIgnoringOpacity:inContext:] behavior, although the implementation differs:
        in AppKit, -displayRectIgnoringOpacity:inContext: and -displayRectIgnoringOpacity: use separate recursive
        methods, and the former’s never calls -lockFocus. Clipping of subviews is achieved by other means. In WAK,
        we share the recursive _WKViewDraw(), and _WKViewLockFocus() is solely responsible for clipping to the
        superview’s bounds. Instead of creating separate recursive methods, this patch just adds a boolean parameter
        that controls whether _WKViewLockFocus() is called.

        * wak/WKView.mm:
        (_WKViewDraw): Call _WKViewLockFocus() iff lockFocus is 'true'. Pass 'true' to self when drawing the subviews.
        (WKViewDisplayRect): Pass 'true' for the lockFocus parameter of _WKViewDraw().
        (WKViewDisplayRectInContext): Pass 'false' for the lockFocus parameter of _WKViewDraw().
        * wak/WKViewPrivate.h: Removed extern declaration of static _WKViewDraw() (the declaration started clashing
        with the definition in WKView.mm after adding the boolean parameter to the latter).

2010-04-03  Cameron Zwarich  <zwarich@apple.com>

        <rdar://problem/7811150> Search bar text is low-res when keyboard is shown

        Rubber-stamped by David Kilzer.

        * wak/WAKWindow.h: I forgot to stage the header changes, which was the whole point.

2010-04-02  Cameron Zwarich  <zwarich@apple.com>

        <rdar://problem/7811150> Search bar text is low-res when keyboard is shown

        Reviewed by David Carson.

        Add methods to WAKWindow to set the screen scale so WebKit can have screen-specific
        scale information. Otherwise, TV Out on N90 won't work right at all, as currently the
        screen scale is always taken from GraphicsServices for the main screen.

        This patch just adds the accessors to WAKWindow so that they get into a build and UIKit
        roots are not necessary.

        * wak/WAKWindow.mm:
        (-[WAKWindow setScreenScale:]):
        (-[WAKWindow screenScale]):
        * wak/WKWindow.h:
        * wak/WKWindow.mm:
        (WKWindowSetScreenScale):
        (WKWindowGetScreenScale):

2010-04-02  Ada Chan  <adachan@apple.com>

        Reviewed by David Kilzer and Brady Eidson.

        <rdar://problem/7631791> Unable to delete a database if Safari is running

        Add methods that only delete the database and origin in memory from the DatabaseTracker.
        The plan is to have Preferences do the entire deletion - including updating the database
        files on disk.  Then it'll notify other apps that use databases to update their DatabaseTrackers
        to forget about the deleted database/origin.

        * WebCore.iPhone.exp:
        * storage/DatabaseTracker.cpp:
        (WebCore::DatabaseTracker::deleteOriginInMemoryIfEmpty): Create the origin based on the origin name.
        Check to make sure the origin does not contain any databases.  If so, remove it from the quota map
        and the origin quota manager and notify the DatabaseTrackerClient.
        (WebCore::DatabaseTracker::deleteDatabaseInMemory): Go through any opened Database objects that
        refer to this deleted database and mark each of them as deleted and close them.  Remove
        the database from the origin quota manager and notify the DatabaseTrackerClient.
        * storage/DatabaseTracker.h:

2010-04-02  Ada Chan  <adachan@apple.com>

        Prep for <rdar://problem/7631791> Unable to delete a database if Safari is running

        Merged ToT WebKit r56954

    2010-04-01  Ada Chan  <adachan@apple.com>

        Reviewed by Darin Adler.

        Change DatabaseTracker::deleteOrigin() to return true if there are no errors in deleting the origin.
        Ditto for DatabaseTracker::deleteDatabase().

        https://bugs.webkit.org/show_bug.cgi?id=36988

        * storage/DatabaseTracker.cpp:
        (WebCore::DatabaseTracker::deleteOrigin):
        (WebCore::DatabaseTracker::deleteDatabase):
        * storage/DatabaseTracker.h:

2010-04-01  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by Greg Bolsinga.

        <rdar://problem/7761071> Too many focus/blur events sent for LayoutTests/fast/events/change-frame-focus.html

        Mimic Desktop, which triggers setting focus only if the next responder
        is in a different frame. To do this, we need a way to know which view
        will be the next responder.

          Temporarily save the nextResponder and make it accessible only while
          resigning. This mimics the behavior in NSWindow. The new method should
          only be called while resigning.

        * wak/WKWindow.h:
        * wak/WKWindow.mm:
        (WKWindowMakeFirstResponder): set and clear the new first responder when appropriate.
        (WKWindowNewFirstResponderAfterResigning): return the first responder.

          Provide a wrapper for WKWindow to be a WAKView.

        * wak/WAKWindow.h:
        * wak/WAKWindow.mm:
        (-[WAKWindow _newFirstResponderAfterResigning]):

2010-03-31  David Kilzer  <ddkilzer@apple.com>

        Make iPhone WebKit source build Mac OS X WebKit

        Reviewed by Greg Bolsinga and David Carson.

        Needed to test <rdar://problem/7763309> after merging.

        * accessibility/mac/AccessibilityObjectWrapper.h:
        (-[AccessibilityObjectWrapper accessibilityPostedNotification:]):
        Fixed method declaration.
        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::load): Restored ToT WebKit code.
        (WebCore::HTMLMediaElement::play): Ditto.
        (WebCore::HTMLMediaElement::pause): Ditto.
        * wak/WAKStringDrawing.h: Moved #if PLATFORM(IPHONE) macro to
        encompass iPhone-only headers.

2010-03-30  Dan Bernstein  <mitz@apple.com>

        Reviewed by David Carson.

        Part of <rdar://problem/7628970> Sub-TLF: Support for printing in WebKit

        Added -[WAKView displayRectIgnoringOpacity:inContext:].

        * wak/WAKView.h: Declare the new method.
        * wak/WAKView.mm:
        (-[WAKView displayRectIgnoringOpacity:inContext:]): Added.
        Causes the receiver and its descendants to be redrawn to the specified CGContext. Calls
        through to WKViewDisplayRectInContext.
        * wak/WKView.h: Declared WKViewDisplayRectInContext().
        * wak/WKView.mm:
        (WKViewDisplayRectInContext): Added. Saves the current graphics context, then sets it to the
        given context and invokes _WKViewDraw(), then restores the saved context.

2010-03-30  Enrica Casucci  <enrica@apple.com>

    <rdar://problem/7693772> [Keyboard] TH: 8A204: Incorrect insertion position after typing THAI CHARACTER SARA AM = 0E33

    Merged ToT WebKit r54729, r56813.

    2010-03-30  Enrica Casucci  <enrica@apple.com>

      Reviewed by Darin Adler.

      Incorrect insertion position after typing THAI CHARACTER SARA AM = 0E33.
      <rdar://problem/7810749>
      https://bugs.webkit.org/show_bug.cgi?id=36858

      Test: fast/text/multiglyph-characters.html

      Characters with multiple glyph were not supported correctly.
      Computing the advance width was producing a division by zero.

      * platform/graphics/mac/ComplexTextController.cpp:
      (WebCore::ComplexTextController::advance):


    2010-02-12  Dan Bernstein  <mitz@apple.com>

            Reviewed by Simon Fraser.

            <rdar://problem/7609268> REGRESSION (r50301): Problem selecting text in a Devanagari website
            https://bugs.webkit.org/show_bug.cgi?id=34865

            Test: fast/text/glyph-reordering.html

            * platform/graphics/mac/ComplexTextController.cpp:
            (WebCore::ComplexTextController::ComplexTextRun::ComplexTextRun):
            (WebCore::ComplexTextController::ComplexTextRun::setIsNonMonotonic): Added. Sets m_isMonotonic
            and populates m_glyphEndOffsets with the end offsets of each glyph’s corresponding character range.
            (WebCore::ComplexTextController::advance): For non-monotonic runs, use endOffsetAt() to get
            glyphs’ end offsets.
            (WebCore::ComplexTextController::adjustGlyphsAndAdvances): Check for monotonicity and call
            setIsNonMonotonic() if needed.
            * platform/graphics/mac/ComplexTextController.h:
            (WebCore::ComplexTextController::ComplexTextRun::lastIndexAt): Added this getter.
            (WebCore::ComplexTextController::ComplexTextRun::isMonotonic): Ditto.
            * platform/graphics/mac/ComplexTextControllerATSUI.cpp:
            (WebCore::ComplexTextController::ComplexTextRun::ComplexTextRun): Initialize m_isMonotonic.
            * platform/graphics/mac/ComplexTextControllerCoreText.cpp:
            (WebCore::ComplexTextController::ComplexTextRun::ComplexTextRun): Ditto.

2010-03-30  Chris Fleizach  <cfleizach@apple.com>

        Reviewed by Brad Moore.

        <rdar://problem/7806729> AXWEB: make text selection, copy and cut work in the web

        This allows the ability to change selection within the web through accessibility.

        Test: platform/iphone-simulator/accessibility/selected-text.html

        * accessibility/iphone/AXObjectCacheIPhone.mm:
        (WebCore::AXObjectCache::postPlatformNotification):
        * accessibility/iphone/AccessibilityObjectWrapperIPhone.h:
        * accessibility/iphone/AccessibilityObjectWrapperIPhone.mm:
        (-[AccessibilityObjectWrapper postSelectedTextChangeNotification]):
        (-[AccessibilityObjectWrapper accessibilityModifySelection:increase:]):
        (-[AccessibilityObjectWrapper accessibilityIncreaseSelection:]):
        (-[AccessibilityObjectWrapper accessibilityDecreaseSelection:]):
        (-[AccessibilityObjectWrapper stringForTextMarkers:]):
        (-[AccessibilityObjectWrapper textMarkerRangeForSelection]):
        (-[AccessibilityObjectWrapper selectionRangeString]):
        * editing/mac/SelectionControllerMac.mm:
        (WebCore::SelectionController::notifyAccessibilityForSelectionChange):

2010-03-30  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Kilzer.

        <rdar://problem/7134013> UIWebView jscript window.Scrollby doesn't work properly on iphone sdk 3.0 beta 5

        Reapply a patch for fixing scrollTo and scrollBy but without the
        extra check preventing a seemingly "needless" scroll. Scrolling on the
        iphone should move relative to the actualDocumentVisibleRect.

        * page/DOMWindow.cpp:
        (WebCore::DOMWindow::scrollBy):
        (WebCore::DOMWindow::scrollTo):
        * platform/ScrollView.h:
        * platform/iphone/ScrollViewIPhone.mm:
        (WebCore::ScrollView::setActualScrollPosition):
        * wak/WAKScrollView.h:
        * wak/WAKScrollView.mm:
        (-[WAKScrollView actualDocumentVisibleRect]):
        (-[WAKScrollView setActualScrollPosition:]):

2010-03-29  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by Brad Moore.

        Wrap a missing ENABLE(FRAME_FLATTENING_DEPRECATED).
        Investigation done for <rdar://problem/7674554>.

        * rendering/RenderFrame.cpp:
        * rendering/RenderFrame.h:

2010-03-29  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Kilzer.

        <rdar://problem/7786502> ASSERT Crash when Using Local Storage

          Global function InitWebCoreThreadSystemInterface should be called
          early on to fill in JavaScriptCore's function pointers.

        * wak/WebCoreThreadSystemInterface.cpp: Added.
        (InitWebCoreThreadSystemInterface):
        * wak/WebCoreThreadSystemInterface.h: Added.

          Build System and other File Handling.

        * WebCore.iPhone.exp: export InitWebCoreThreadSystemInterface
        * ForwardingHeaders/wtf/iphone/WebCoreThread.h: Added. Shared Header.
        * WebCore.xcodeproj/project.pbxproj: Added new Files.

2010-03-29  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Kilzer.

        <rdar://problem/7784505> Remove Key Codes from WAKAppKitStubs

        The Key Codes previously moved to platform/iphone/KeyEventCodesIPhone.h
        and are available through <WebKit/KeyEventCodesIPhone.h>.

        * wak/WAKAppKitStubs.h:

2010-03-28  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/7802668> Don't delete quicklook temporary file in ResourceHandleMac

        Reviewed by David Kilzer

        It turns out we don't need to delete the quicklook file in
        -[WebCoreResourceHandleAsDelegate connection:didFailWithError:] because
        removeQLPreviewConverterForURL(), which we call earlier, already does
        that for us. Also remove ivar m_quicklookContentFilename and use a
        local variable instead.

        * platform/network/mac/ResourceHandleMac.mm:
        (-[WebCoreResourceHandleAsDelegate dealloc]):
        (-[WebCoreResourceHandleAsDelegate connection:didReceiveResponse:]):
        (-[WebCoreResourceHandleAsDelegate connection:didFailWithError:]):

2010-03-27  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7791134> iPhone: WebKit should treat port numbers outside the valid range as being blacklisted

        Merged ToT WebKit r56489, r56492.

    2010-03-24  Mark Rowe  <mrowe@apple.com>

        Revert the portion of r56489 that dealt with port zero as it introduced some test failures.

        * platform/KURL.cpp:
        (WebCore::KURL::port): Use the "ok" argument to charactersToUIntStrict to determine whether
        it was able to successfully parse the string as an unsigned integer, rather than relying on
        the fact it returned zero when it failed.

    2010-03-24  Mark Rowe  <mrowe@apple.com>

        Reviewed by Darin Adler.

        WebKit should treat port numbers outside the valid range as being blacklisted
        <http://webkit.org/b/36571> / <rdar://problem/7790908>

        * platform/KURL.cpp:
        (WebCore::KURL::port): Map invalid port numbers to invalidPortNumber.
        (WebCore::portAllowed): Add invalidPortNumber to the blacklist.
        * platform/KURLGoogle.cpp:  invalid port numbers to invalidPortNumber.
        (WebCore::KURL::port): Add invalidPortNumber to the blacklist.
        Also bring this in to sync with KURL.  Having this identical code in two places is stupid.

2010-03-27  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7748481> iPhone: TCMalloc should tag its memory, so it shows up distinctly in vmmap

        Merged ToT WebKit r55483.

    2010-03-03  Mark Rowe  <mrowe@apple.com>

        Reviewed by Geoff Garen.

        Add virtual memory tags for TCMalloc and WebCore's purgeable buffers.

        * platform/mac/PurgeableBufferMac.cpp:
        (WebCore::PurgeableBuffer::create):  Use the VM tag.

2010-03-27  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7726545> Apex: iPhone: Drop-cap split between columns in "Hot, Flat and Crowded"

        Merged ToT WebKit r55636.

    2010-03-07  Dan Bernstein  <mitz@apple.com>

        Reviewed by Simon Fraser.

        <rdar://problem/7722008> Column breaking ignores floats
        https://bugs.webkit.org/show_bug.cgi?id=35837

        Test: fast/multicol/float-truncation.html

        Introduce an earlier column-break if otherwise a float that could fit
        inside a single column will be split between columns.

        It is still possible for floats to be needlessly broken if initially
        they fit in the column, but normal flow truncation then shortens the
        column.

        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::visibleTopOfHighestFloatExtendingBelow): Added.
        Returns the visible top of the highest descendant float that visibly
        extends below the given y offset, ignoring floats that are taller than
        the given maximum height.
        (WebCore::RenderBlock::layoutColumns): If the initial column height
        would cause a float to be split, truncate above the float.
        * rendering/RenderBlock.h:

2010-03-27  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7717457> iPhone: WebSocket crash bug when reloading the page while the WebSocket is busy (35732)

        Merged ToT WebKit r55570.

    2010-03-04  Fumitoshi Ukai  <ukai@chromium.org>

        Reviewed by Alexey Proskuryakov.

        WebSocket crash bug when reloading the page while the WebSocket is busy
        https://bugs.webkit.org/show_bug.cgi?id=35732

        * websockets/WebSocketChannel.cpp:
        (WebCore::WebSocketChannel::disconnect): clear m_context from WebSocketChannel and WebSocketHandshake.
        (WebCore::WebSocketChannel::didOpen): check m_context
        (WebCore::WebSocketChannel::didClose): clear m_context
        (WebCore::WebSocketChannel::didReceiveData): check m_context, and check m_client early before appending to buffer
        * websockets/WebSocketHandshake.cpp:
        (WebCore::WebSocketHandshake::clearScriptExecutionContext): Added.
        * websockets/WebSocketHandshake.h:

2010-03-27  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7714749> iPhone: databaseIdentifiers are not filtered for slashes

        Merged ToT WebKit r56139.

    2010-03-17  Brady Eidson  <beidson@apple.com>

        Reviewed by Darin Adler.

        databaseIdentifiers are not filtered for slashes
        <rdar://problem/7708789> and https://bugs.webkit.org/show_bug.cgi?id=36243

        In addition to filtering for '/' and '\', to remove the directory vulnerability
        on all platforms, it seems worth it to also escape other characters that are
        obviously dangerous or illegal to have in a filename (mostly inspired by the
        Windows illegal-character list).

        No new tests - It's unclear how a test could possibly work into our testing
        infrastructure.

        * page/SecurityOrigin.cpp:
        (WebCore::): Added a 128-bool table "needsEscaping" that has a true/false answer
          for lower-ASCII.
        (WebCore::SecurityOrigin::SecurityOrigin):
        (WebCore::SecurityOrigin::createFromDatabaseIdentifier): "Unescape" the host
          component using the KURL utility.
        (WebCore::shouldEscapeUChar): If the char is lower-ASCII, look it up in the
          needsEscaping table. Otherwise, let it pass.
        (WebCore::encodedHost): Modeled after KURL's host escaping method, but targeted
          for the escaping considerations for the host component. We don't use the KURL
          version because this one is "different" enough because it operates on UTF16 and
          has its own "is bad character?" decider.
        (WebCore::SecurityOrigin::databaseIdentifier): Create the escaped host if needed,
          and use it instead of the unescaped host.
        * page/SecurityOrigin.h:

2010-03-26  Enrica Casucci  <enrica@apple.com>

        Reviewed by Kevin Decker.

        Text gets "white-out" by the insertion cursor.
        <rdar://problem/7702452>

        There is no need to repaint the rect under the old caret position when
        the selection changes.

        * editing/SelectionController.cpp:
        (WebCore::SelectionController::recomputeCaretRect): Added ifdef !PLATFORM(IPHONE) around the
        call to repaint the rect.

2010-03-26  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/7336971> WebCore should write content as it is received for QuickLook

        Reviewed by David Kilzer

        For any QuickLook-able documents, we would buffer the entire file
        contents in memory and save it to disk only after we were done
        downloading the whole file.  This would cause jetsams if the file was
        large (e.g. over 150M).  Instead of buffering in memory, we write the
        data out to disk as we get it. Note that we still jetsam on large iWork
        files but that's because the quicklook code is doing the same thing
        <rdar://7798439>

        * platform/network/mac/ResourceHandleMac.mm:
        (-[WebCoreResourceHandleAsDelegate dealloc]):
        (-[WebCoreResourceHandleAsDelegate connection:didReceiveResponse:]):
        (-[WebCoreResourceHandleAsDelegate connection:didReceiveData:lengthReceived:]):
        (-[WebCoreResourceHandleAsDelegate connectionDidFinishLoading:]):
        (-[WebCoreResourceHandleAsDelegate connection:didFailWithError:]):

2010-03-26  Greg Bolsinga  <bolsinga@apple.com>

        <rdar://problem/7760302> 3rd party app crashes in WebCore::HistoryController::updateBackForwardListForFragmentScroll

        For the LayoutTests filed: <rdar://problem/7799375> Fix LayoutTests that instantiate a raw WebView

        Merged ToT WebKit r54966.

    2010-02-18  Brady Eidson  <beidson@apple.com>

        Reviewed by Sam Weinig.

        Particularly constructed WebFrames can try to access a null HistoryItem
        <rdar://problem/7638892> and https://bugs.webkit.org/show_bug.cgi?id=35063

        Test: fast/loader/api-test-new-window-data-load-base-url.html

        * loader/HistoryController.cpp:
        (WebCore::HistoryController::updateBackForwardListForFragmentScroll): We have a known case where a fragment scroll
          might take place with a null m_currentItem. updateBackForwardListClippedAtTarget() will either move m_currentItem
          to m_previousItem then create a new m_currentItem...  or it will do nothing. So we either have both an m_currentItem
          and m_previousItem, or we have neither.  In the case where we have no m_previousItem, return early.

2010-03-26  Joseph Pecoraro  <joepeck@webkit.org>

        <rdar://problem/7767161> LayoutTests/fast/runin/generated.html fails

        Merged ToT WebKit r56641.

    2010-03-26 Joseph Pecoraro <joepeck@webkit.org>

        Reviewed by Dave Hyatt.

        Generated run-in Content is Mistakenly Getting Deleted
        https://bugs.webkit.org/show_bug.cgi?id=36505
        <rdar://problem/7767161>

          Test dynamic update of the inner block, containing the generated
          run-in, but not owning it with the :before rule, and owners.

        * fast/runin/generated2.html: Added.
        * platform/mac/fast/runin/generated2-expected.txt: Added.

          Test dynamic update of the outer block, this block owns the
          generated run-in, but it is actually contained in a child block.

        * fast/runin/generated3.html: Added.
        * platform/mac/fast/runin/generated3-expected.txt: Added.

          Test dynamic updates affecting generated run-ins both
          in relation to and not in relation to list markers.

        * fast/runin/generated4.html: Added.
        * platform/mac/fast/runin/generated4-expected.txt: Added.

2010-03-26  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7714744> iPhone: Out-of-bounds index reads with mismatched SVG keyPoints / keyTimes / keySplines / values (35606)

        Merged ToT WebKit r56214.

    2010-03-18  Chris Evans  <cevans@chromium.org>

        Reviewed by Nikolas Zimmermann.

        Fix a minor crash with mismatched array sizes in SVG animation
        elements.

        https://bugs.webkit.org/show_bug.cgi?id=35606

        Test: svg/animations/keypoints-mismatch.svg

        * svg/SVGAnimationElement.cpp:
        (WebCore::SVGAnimationElement::startedActiveInterval):
        Globally apply validations relevant to all animation types.

2010-03-26  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7714740> iPhone: SVG crash / memory corruption with strange <use> structures and unterminated SVG XML (35603)

        Merged ToT WebKit r55511.

    2010-03-04  Oliver Hunt  <oliver@apple.com>

        Reviewed by Maciej Stachowiak.

        https://bugs.webkit.org/show_bug.cgi?id=35603
        SVG incorrectly allows nested <use> elements in a <use> shadow tree

        Simplify the handling of invalid or missing use-targets by cloning them
        to empty <g> elements rather than just allowing the <use> element to
        be copied into the shadow tree, as this violates a number of assumptions
        in the shadow tree handling code.

        Tests: svg/custom/use-nested-disallowed-target.svg
               svg/custom/use-nested-missing-target-added.svg
               svg/custom/use-nested-missing-target-removed.svg
               svg/custom/use-nested-missing-target.svg
               svg/custom/use-nested-notarget.svg

        * svg/SVGUseElement.cpp:
        (WebCore::SVGUseElement::buildPendingResource):
        (WebCore::SVGUseElement::buildShadowAndInstanceTree):
        (WebCore::SVGUseElement::expandUseElementsInShadowTree):

2010-03-26  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7712331> Apex: iPhone: ZDI-CAN-689: WebKit First-Letter Pseudo-Element Style Remote Code Execution Vulnerability

        Merged ToT WebKit r55196.

    2010-02-24  Dan Bernstein  <mitz@apple.com>

        Reviewed by Simon Fraser.

        <rdar://problem/7682827> Text with :first-letter lingers after being removed

        Test: fast/css/first-letter-set-text.html

        * rendering/RenderTextFragment.cpp:
        (WebCore::RenderTextFragment::setTextInternal): Set this back as the
        text node’s renderer, as removing the first letter has resets the node’s
        renderer.

2010-03-26  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7711709> Apex: iPhone: ZDI-CAN-688: WebKit Option Element ContentEditable Remote Code Execution Vulnerability (35621)

        Merged ToT WebKit r55462, r55465.

    2010-03-03  Dan Bernstein  <mitz@apple.com>

        Build fix.

        * dom/ContainerNode.cpp:
        (WebCore::ContainerNode::removeChildren):

    2010-03-03  Dan Bernstein  <mitz@apple.com>

        Reviewed by Sam Weinig.

        <rdar://problem/7682756> Assertion failure when replacing the contents of a <select>

        Test: fast/dom/remove-children-notification-order.html

        * dom/ContainerNode.cpp:
        (WebCore::ContainerNode::removeChildren): Changed to call childrenChanged()
        before calling removedFromDocument() on each removed child, which matches
        the order removeChild() does things, and avoids the assertion. This required
        temporarily storing the removed children in a vector.
        Also added comments about other discrepancies between this function and
        removeChild().

2010-03-26  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7683366> iPhone: innerHTML applies meta/link/title tags from a detached html element (26825)

        Merged ToT WebKit r55203.

    2010-02-24  Dan Bernstein  <mitz@apple.com>

        Reviewed by Anders Carlsson.

        <rdar://problem/7018611> innerHTML applies meta/link/title tags from a detached html element

        Test: fast/parser/fragment-parser.html

        Ensure that fragment parsing has no side effects on the fragment’s owner
        document.

        * html/HTMLParser.cpp:
        (WebCore::HTMLParser::insertNode): Don’t call
        dispatchDocumentElementAvailable() for fragments.
        (WebCore::HTMLParser::handleError): Don’t copy attributes to the owner
        document’s <html> and <body> elements when a redundant <html> or <body>
        is encountered while parsing a fragment.
        (WebCore::HTMLParser::framesetCreateErrorCheck): Don’t change the owner
        document’s <body> element’s style when parsing a fragment.
        (WebCore::HTMLParser::createHead): Don’t attach the new <head> to the
        ownder document of a fragment.

2010-03-26  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7682493> Apex: iPhone: ZDI-CAN-686: Apple Webkit ContentEditable moveParagraphs Uninitialized Element Remote Code Execution Vulnerability

        Merged ToT WebKit r55167.

    2010-02-23  Enrica Casucci  <enrica@apple.com>

        Reviewed by Darin Adler.

        Crash in createContextualFragment when inserting a list in a non HTML document.
        <rdar://problem/7666670>
        https://bugs.webkit.org/show_bug.cgi?id=35305

        createFragmentFromMarkup did not handle correctly the case where documentElement is
        not an HTMLElement. The static cast to HTMLElement was causing createContextualFragment to
        crash.

        Test: editing/execCommand/insert-list-xml.xhtml

        * dom/Element.cpp:
        (WebCore::Element::createContextualFragment): Added.
        * dom/Element.h: Added createContextualFragment virtual function.
        * editing/markup.cpp:
        (WebCore::createFragmentFromMarkup): Removed static cast to HTMLElement.
        * html/HTMLElement.cpp:
        (WebCore::HTMLElement::createContextualFragment): Modified to perform only checks
        that are specific for an HTMLElement object. The rest of the logic has been moved to the
        corresponding method in the Element class.

2010-03-25  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7796325> Baker (4.1) needs to use llvm-gcc-4.2 to compile JavaScriptCore, WebCore, WKSI, WebKit

        Reviewed by Joseph Pecoraro.

        * Configurations/Base.xcconfig: Switched to use
        $(REAL_PLATFORM_NAME) to determine which compiler to use.  For
        the iphoneos SDK, we always want llvm-gcc-4.2.  For the
        iphonesimulator SDK, we just want the default compiler: gcc-4.2.

2010-03-25  Enrica Casucci  <enrica@apple.com>

        Reviewed by Brad Moore.

        Can't type into these web form fields
        <rdar://problem/7102762>

        All the keyboard events must be correctly routed to editor client
        to be filtered appropriately.
        Some events should not be generated for the delete key, which is what was
        causing this bug in particular. In general, not letting the editor client
        receive any event other than keypress was breaking most of the keyboard events.

        * editing/Editor.cpp:
        (WebCore::Editor::handleKeyboardEvent): Removed IPHONE specific code.

2010-03-25  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7672303> Apex: iPhone: Add port 6667 (irc) to port blacklist

        Merged ToT WebKit r54193.

    2010-02-01  Brady Eidson  <beidson@apple.com>

        Reviewed by Tim Hatcher.

        Add common IRC ports to port blocking.
        <rdar://problem/7593895> and https://bugs.webkit.org/show_bug.cgi?id=34451

        * platform/KURL.cpp:
        (WebCore::portAllowed):

2010-03-25  Nicholas Jong  <njong@apple.com>

        Reviewed by Brad Moore.

        <rdar://problem/7751372> Remove showsRangeSelection

        Expose static method
        SelectionController::wordSelectionContainingCaretSelection so
        that the rest of the implementation of
        SelectionController::expandSelectionToWordContainingCaretSelection
        can be moved to UIKit.  Export isEditablePosition for use in
        WebVisiblePosition.  Remove
        Frame::moveSelectionToStartOrEndOfCurrentWord, whose
        implementation has moved to UIKit.  This part of an effort to
        move iPhone-specific selection twiddling towards UIKit.

        * WebCore.iPhone.exp:
        * editing/SelectionController.h:
        * page/Frame.h:
        * page/iphone/FrameIPhone.mm:

2010-03-25  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7672283> Apex: iPhone: iDefense [V-aktmspge23]: use after free related to setting innerHTML of element with caption

        Merged ToT WebKit r54521, r54557.

    2010-02-09  Darin Adler  <darin@apple.com>

        * rendering/RenderObject.cpp:
        (WebCore::RenderObject::styleDidChange): Fixed typo in comment.

    2010-02-08  Darin Adler  <darin@apple.com>

        Reviewed by Dan Bernstein.

        Crash due to layout not done in case involving removal of absolute positioning
        https://bugs.webkit.org/show_bug.cgi?id=34734
        rdar://problem/7588280

        Test: fast/dynamic/position-change-layout.html

        * rendering/RenderObject.cpp:
        (WebCore::RenderObject::styleDidChange): Call markContainingBlocksForLayout in
        a case where the object already needs layout, but might have a new containing
        block and so needs to mark the new containing block.

2010-03-25  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7661270> Apex: [ DOMRange textRects ] returns incorrect rects when using columns

        Merged ToT WebKit r54784, r54807.

    2010-02-15  Dan Bernstein  <mitz@apple.com>

        Reviewed by Simon Fraser.

        <rdar://problem/7645609> [webView selectionRect] API is broken for multicolumn layout

        Refine the fix for https://bugs.webkit.org/show_bug.cgi?id=34923 by using the center of
        a quad’s bounding box, rather than its top left, as the reference point passed to
        offsetFromContainer(). This ensures that if a sliver off the top of the selection rect is in
        one column, but most of it is on another column, the single rect we return will be for the
        second column.

        * platform/graphics/FloatRect.h:
        (WebCore::FloatRect::center): Added.
        * rendering/RenderObject.cpp:
        (WebCore::RenderObject::localToContainerQuad): Use the center instead of the top left.

    2010-02-15  Dan Bernstein  <mitz@apple.com>

        Reviewed by Simon Fraser.

        <rdar://problem/7647300> Incorrect client rects for blocks the span multiple columns and their descendants
        https://bugs.webkit.org/show_bug.cgi?id=34923

        Test: fast/multicol/client-rects.html

        In column layout, a different transform applies to different points in
        the block and its descendants, depending on their y coordinate within the
        block. offsetFromContainer() used to return the offset that applied to
        the origin. With this change, it returns the offset that applies to a
        given reference point. When mapping a quad from local to absolute
        coordinates, the top left of the quad’s bounding box is used as that
        reference point.

        * editing/SelectionController.cpp:
        (WebCore::SelectionController::layout): Pass the caret’s origin as the
        reference point to offsetFromContainer().
        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::adjustForColumns): Adds the offset between the
        given point and its image under the column paint-time transform to the
        given offset. Used by offsetFromContainer() where it had previously used
        adjustRectForColumns(), which takes a rect and operates less efficiently.
        * rendering/RenderBlock.h:
        * rendering/RenderBox.cpp:
        (WebCore::RenderBox::mapLocalToContainer): Pass the transformed point as
        the reference point to offsetFromContainer().
        (WebCore::RenderBox::mapAbsoluteToLocalPoint): Pass a point to
        offsetFromContainer().
        (WebCore::RenderBox::offsetFromContainer): Use adjustForColumns() instead
        of adjustRectForColumns(), and use the reference point to get the right
        adjustment for the point of interest, instead of the origin, in case this
        box spans multiple columns.
        * rendering/RenderBox.h:
        * rendering/RenderInline.cpp:
        (WebCore::RenderInline::offsetFromContainer): Ditto. Actually apply the
        column offset to the computation, which previously this function didn’t
        do.
        (WebCore::RenderInline::mapLocalToContainer): Pass the transformed point
        as the reference point to offsetFromContainer().
        (WebCore::RenderInline::mapAbsoluteToLocalPoint): Pass a point to
        offsetFromContainer().
        * rendering/RenderInline.h:
        * rendering/RenderObject.cpp:
        (WebCore::RenderObject::mapLocalToContainer): Apply column adjustment,
        based on the reference point, to the transform if needed.
        (WebCore::RenderObject::localToContainerQuad): Initialize the
        TransformState with the top left corner of the quad’s bounding box. It
        is later used as the reference point when deciding on which column to
        base the calculations.
        (WebCore::RenderObject::offsetFromContainer): Adjust for columns.
        (WebCore::RenderObject::offsetFromAncestorContainer): Pass the origin
        as the reference point to offsetFromContainer().
        * rendering/RenderObject.h:
        (WebCore::RenderObject::adjustForColumns): Added.
        * rendering/RenderTableCell.cpp:
        (WebCore::RenderTableCell::offsetFromContainer): Pass the reference
        point through.
        * rendering/RenderTableCell.h:
        * rendering/RenderText.cpp:
        (WebCore::RenderText::absoluteRectsForRange): Map (the origin of) each
        rect to absolute coordinates individually.
        * rendering/RenderThemeMac.mm:
        (WebCore::RenderThemeMac::convertToPaintingRect): Pass a point to
        offsetFromContainer().

2010-03-25  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7650521> iPhone: REGRESSION(r52116): WebCore::ImageEventSender::dispatchPendingEvents() crashes in certain conditions (34490)

        Merged ToT WebKit r54618, r54727.

    2010-02-12  Alexey Proskuryakov  <ap@apple.com>

        Reviewed by David Levin.

        https://bugs.webkit.org/show_bug.cgi?id=34866
        Leopard Debug Bot crashed on fast/forms/old-names.html

        * html/HTMLFormCollection.cpp: (WebCore::HTMLFormCollection::formCollectionInfo): Removed
        a misplaced checkConsistency() call. We are not looking at cache content at this point, and
        caches will be reset on next access.

    2010-02-09  Alexey Proskuryakov  <ap@apple.com>

        Reviewed by Geoffrey Garen.

        https://bugs.webkit.org/show_bug.cgi?id=34490
        WebCore::ImageEventSender::dispatchPendingEvents() crashes in certain conditions

        Test: fast/images/destroyed-image-load-event.html

        * ForwardingHeaders/wtf/ValueCheck.h: Added.

        * loader/ImageLoader.cpp:
        (WTF::ValueCheck): Special case value check for ImageLoader - it's allocated inside elements,
        so check the owner instead.
        (WebCore::ImageEventSender::hasPendingEvents): Added a debugging aid for ImageLoader destructor.
        (WebCore::ImageLoader::~ImageLoader): Assert that we're not going to leave dangling pointers
        in ImageEventSender.
        (WebCore::ImageLoader::setImage): Cancel events that could be dispatched for the previous
        image. The only client using this method that I could find was DeleteButton, which doesn't
        care about load events for the new image, so I didn't add any code for firing those.
        (WebCore::ImageLoader::setLoadingImage): This method only existed to confuse readers -
        there wasn't any meaningful code shared (callers just undid most assignments made there).
        Merged the logic into callers.
        (WebCore::ImageLoader::updateFromElement): We're forgetting the old image, so forget its
        old events, too.
        (WebCore::ImageLoader::notifyFinished): This can be called from setImage(), in which case
        no one is going to dispatch the event "soon". So, don't queue it.
        (WebCore::ImageEventSender::dispatchPendingEvents): Call checkConsistency(). This didn't
        help catch this particuar bug, but seems like a useful check anyway.

        * loader/ImageLoader.h: Removed setLoadingImage().

2010-03-25  David Kilzer  <ddkilzer@apple.com>

        BUILD FIX 2: <rdar://problem/7672046> Bits wasted in StyleRareInheritedData

        * rendering/style/StyleRareInheritedData.cpp:
        (WebCore::StyleRareInheritedData::StyleRareInheritedData):
        Fixed copy/paste issue from r213991 and fixed copy constructor.

2010-03-25  David Kilzer  <ddkilzer@apple.com>

        BUILD FIX: <rdar://problem/7672046> Bits wasted in StyleRareInheritedData

        * rendering/style/StyleRareInheritedData.cpp:
        (WebCore::StyleRareInheritedData::StyleRareInheritedData):
        Changed the order of initialized fields to match the declaration
        order.

2010-03-25  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7672046> Bits wasted in StyleRareInheritedData

        Reviewed by David Carson.

        * rendering/style/StyleRareInheritedData.h: Stop wasting bits.

2010-03-25  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7597676> iPhone: JSC is failing to propagate anonymous slot count on some transitions

        Merged ToT WebKit r54100.

    2010-01-29  Mark Rowe  <mrowe@apple.com>

        Roll out r54073 as it introduced many thousands of leaks.

        * bindings/scripts/CodeGeneratorJS.pm:

2010-03-24  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7791592> Remove WAKStringDrawing assertions related to non-main-thread string drawing and sizing since it should be thread safe

        Reviewed by Greg Bolsinga and David Carson.

        String drawing and sizing are now safe on any thread, so we may
        remove these assertions.

        * wak/WAKStringDrawing.mm:
        (-[NSString _web_drawAtPoint:forWidth:withFont:ellipsis:letterSpacing:includeEmoji:]):
        Removed incorrect assertion.
        (-[NSString _web_stringForWidth:withFont:ellipsis:letterSpacing:includeEmoji:]): Ditto.

2010-03-23  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7771301> JavaScriptCore, WebCore, WebKit projects only built for armv7 (missing armv6)

        Reviewed by Greg Bolsinga.

        ARCHS_UNIVERSAL_IPHONE_OS isn't as universal as the name
        suggests, so switch to using ARCHS_STANDARD_32_BIT instead.

        * Configurations/Base.xcconfig: Break out VALID_ARCHS by
        REAL_PLATFORM_NAME.  Use ARCHS_STANDARD_32_BIT for iphoneos and
        iphonesimulator.
        * Configurations/DebugRelease.xcconfig: Switched from using
        ARCHS_UNIVERSAL_IPHONE_OS to using ARCHS_STANDARD_32_BIT.

2010-03-23  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Kilzer.

        <rdar://problem/7580867> Replace iPhone-specific database storage quota mechanism with ToT WebKit mechanism
        <rdar://problem/7768253> New LayoutTests/storage/domstorage/ tests are hitting ridiculous quota limits

        Remove old IPHONE quota handling, in favor of ToT WebKit's. The
        localStorage quota is the same as it was previously (5*1024*1024).

        * storage/StorageAreaImpl.cpp:
        (WebCore::StorageAreaImpl::setItem):
        * storage/StorageMap.cpp:
        (WebCore::StorageMap::StorageMap):
        (WebCore::StorageMap::copy):
        (WebCore::StorageMap::setItem):
        (WebCore::StorageMap::removeItem):
        (WebCore::StorageMap::importItem):
        * storage/StorageMap.h:

2010-03-23  David Chan  <davidmchan@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/7773785> Loading the SpellingDot image takes over 1s on N82

        * wak/WKGraphics.mm: Workaround to hardcode the path to resource images on embedded platforms.

2010-03-23  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Kilzer.

        <rdar://problem/7784505> Remove Key Codes from WAKAppKitStubs

        * WebCore.xcodeproj/project.pbxproj: made KeyEventCodesIPhone.h private

2010-03-22  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Kilzer.

        <rdar://problem/7707318> windowsKeyCodeForKeyEvent should use explicit parameters, not object
        <rdar://problem/7707283> key mapping function should be shared across platforms

        Merged ToT WebKit r56360, r56361, r56363.

    2010-03-22  Joseph Pecoraro  <joepeck@webkit.org>

            Reviewed by David Kilzer.

            Part 1 of 3: Upstream iPhone KeyEvent platform code and share with Mac platform
            https://bugs.webkit.org/show_bug.cgi?id=35870
            <rdar://problem/7707283>

            * WebCore.xcodeproj/project.pbxproj: Added iphone group and new files.
            * platform/iphone: Added.
            * platform/iphone/KeyEventCodesIPhone.h: Added.
            * platform/iphone/KeyEventIPhone.mm: Added. Ensure PLATFORM(IPHONE)
            * platform/mac/KeyEventMac.mm: Ensure PLATFORM(MAC)

    2010-03-22  Joseph Pecoraro  <joepeck@webkit.org>

            Reviewed by David Kilzer.

            Upstream Part of the iPhone Platform sharing code with the Mac Platform
            https://bugs.webkit.org/show_bug.cgi?id=35870
            <rdar://problem/7707283>

            Part 2 of 3: No changes other than moving code around.
            Copied KeyEvent function from platform/mac to a platform/cocoa shared directory.

            * WebCore.xcodeproj/project.pbxproj: Added cocoa group and new files.
            * platform/cocoa/KeyEventCocoa.h: Added.
            * platform/cocoa/KeyEventCocoa.mm: Copied from WebCore/platform/mac/KeyEventMac.mm.
            (WebCore::keyIdentifierForKeyEvent):
            (WebCore::windowsKeyCodeForKeyEvent): Include the shared code.
            * platform/mac/KeyEventMac.mm:

    2010-03-22  Joseph Pecoraro  <joepeck@webkit.org>

            Reviewed by David Kilzer.

            Upstream Part of the iPhone Platform sharing code with the Mac Platform
            https://bugs.webkit.org/show_bug.cgi?id=35870
            <rdar://problem/7707283> and <rdar://problem/7707318>

            Part 3 of 3: Shared code between iphone and mac. The shared code was
            refactored to be usable by both platforms without platform specific
            typing, meaning no NSEvent versus WebEvent special cases.

              Shared code usable by either mac or iphone platforms.

            * platform/cocoa/KeyEventCocoa.h:
            * platform/cocoa/KeyEventCocoa.mm:
            (WebCore::keyIdentifierForCharCode):
            (WebCore::windowsKeyCodeForKeyCode):
            (WebCore::windowsKeyCodeForCharCode):

              Make use of the shared code. Keep anything platform specific in the
              original file before calling the shared code.

            * platform/iphone/KeyEventIPhone.mm:
            (WebCore::keyIdentifierForKeyEvent):
            * platform/mac/KeyEventMac.mm:
            (WebCore::keyIdentifierForKeyEvent):
            (WebCore::windowsKeyCodeForKeyEvent):

2010-03-22  Cameron Zwarich  <zwarich@apple.com>

        <rdar://problem/7756735> REGRESSION: touch and gesture objects missing from window object after Havoc merge

        Reviewed by David Kilzer.

        * page/DOMWindow.idl: The Havoc merge included the open source version of the touch
        event IDL block, including a DontEnum. We don't want this.

2010-03-22  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7559240> Disable sandboxed iframe feature after Havoc merge

        Merged ToT WebKit r55043.

        * Configurations/FeatureDefines.xcconfig: Disable ENABLE_SANDBOX
        by default for iPhone WebKit.

    2010-02-19  Maciej Stachowiak  <mjs@apple.com>

        Reviewed by David Levin.

        Add an ENABLE flag for sandboxed iframes to make it possible to disable it in releases
        https://bugs.webkit.org/show_bug.cgi?id=35147

        I made ENABLE(SANDBOX) only control the sandbox attribute itself;
        I did not ifdef the infrastructure to make sandboxing
        switchable. This is because the likely concerns about sandboxing
        are not stability of the infrastructure code, but rather the fact
        that the security model exposed to authors is still evolving.

        * Configurations/FeatureDefines.xcconfig:
        * GNUmakefile.am:
        * WebCore.pri:
        * html/HTMLIFrameElement.cpp:
        (WebCore::HTMLIFrameElement::parseMappedAttribute):

2010-03-22  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by Paul Knight.

        <rdar://problem/7769468> Isolated crash at intro page in Plants vs. Zombies in -[WebCorePowerNotifierIPhone init]

        * platform/iphone/SharedTimerIPhone.mm: Add error checking to prevent this crash from occurring.
        (-[WebCorePowerNotifierIPhone init]):

2010-03-21  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7338698> MobileQuickLook crashes due to missing SPI in Apex

        Reviewed by Paul Knight.

        * platform/network/mac/ResourceHandleMac.mm: Removed workaround.

2010-03-21  Philippe Champeaux  <champeaux.p@apple.com>

        <rdar://problem/7616665> WebKit should switch from MobileQuickLook to QuickLook

        Reviewed by David Kilzer.

        Changed "MobileQuickLook" to "QuickLook" and changed
        "USE(MOBILE_QUICK_LOOK)" to "USE(QUICK_LOOK)".

        * WebCore.iPhone.exp:
        * WebCore.iPhone.order:
        * WebCore.xcodeproj/project.pbxproj:
        * loader/MainResourceLoader.cpp:
        (WebCore::MainResourceLoader::loadNow):
        * loader/PolicyChecker.cpp:
        (WebCore::PolicyChecker::checkNavigationPolicy):
        * loader/ResourceLoadNotifier.cpp:
        (WebCore::ResourceLoadNotifier::dispatchWillSendRequest):
        * loader/loader.cpp:
        (WebCore::Loader::Host::servePendingRequests):
        * platform/network/iphone/QuickLook.h: Renamed from WebCore/platform/network/iphone/MobileQuickLook.h.
        * platform/network/iphone/QuickLook.mm: Renamed from WebCore/platform/network/iphone/MobileQuickLook.mm.
        (WebCore::QLPreviewConverterClass):
        (WebCore::QLTypeCopyBestMimeTypeForFileNameAndMimeType):
        (WebCore::QLTypeCopyBestMimeTypeForURLAndMimeType):
        (WebCore::QLPreviewGetSupportedMIMETypesSet):
        (WebCore::QLFileAttributes):
        (WebCore::QLDirectoryAttributes):
        (qlPreviewConverterDictionaryMutex):
        (QLPreviewConverterDictionary):
        (QLContentDictionary):
        (WebCore::addQLPreviewConverterWithFileForURL):
        (WebCore::qlPreviewConverterFileNameForURL):
        (WebCore::qlPreviewConverterUTIForURL):
        (WebCore::removeQLPreviewConverterForURL):
        (WebCore::registerQLPreviewConverterIfNeeded):
        (WebCore::safeQLURLForDocumentURLAndResourceURL):
        (createQLPreviewProtocol):
        (WebCore::QLPreviewProtocol):
        * platform/network/iphone/WebCoreURLResponseIPhone.h:
        * platform/network/iphone/WebCoreURLResponseIPhone.mm:
        * platform/network/mac/ResourceHandleMac.mm:
        (-[WebCoreResourceHandleAsDelegate initWithHandle:]):
        (-[WebCoreResourceHandleAsDelegate connection:didReceiveResponse:]):
        (-[WebCoreResourceHandleAsDelegate connection:didReceiveData:lengthReceived:]):
        (-[WebCoreResourceHandleAsDelegate connectionDidFinishLoading:]):
        (-[WebCoreResourceHandleAsDelegate connection:didFailWithError:]):

2010-03-21  David Kilzer  <ddkilzer@apple.com>

        Remove stray carriage return (^M) characters from iPhone order files

        Rubber-stamped by Cameron Zwarich.

        * WebCore.iPhone.order: Removed stray carriage return (^M)
        characters.

2010-03-21  David Kilzer  <ddkilzer@apple.com>

        Part 2 of 2: <rdar://problem/7767168> Disable Ruby support for Apex

        Reviewed by David Carson.

        * Configurations/FeatureDefines.xcconfig: Disable Ruby support
        on iPhone OS and iPhone Simulator builds.

2010-03-21  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7151276> Remove workarounds for WebThreadCreateNSInvocation()

        Reviewed by Paul Knight.

        * wak/WebCoreThreadMessage.h:
        (WebThreadCreateNSInvocation): Removed.

2010-03-21  David Kilzer  <ddkilzer@apple.com>

        Part 1 of 2: <rdar://problem/7767168> Disable Ruby support for Apex

        Merge ToT WebKit r54649.

    2010-02-08  Maciej Stachowiak  <mjs@apple.com>

        Reviewed by Cameron Zwarich.

        Restore ENABLE_RUBY flag so vendors can ship with Ruby disabled if they choose.
        https://bugs.webkit.org/show_bug.cgi?id=34698

        * Configurations/FeatureDefines.xcconfig:
        * DerivedSources.make:
        * GNUmakefile.am:
        * html/HTMLTagNames.in: Make the ruby-related tag names conditional.
        * rendering/RenderObject.cpp:
        (WebCore::RenderObject::createObject): ifdef the code that would create ruby elements.
        * rendering/RenderObject.h: ditto above
        * rendering/RenderRuby.cpp: ifdef this whole file
        * rendering/RenderRuby.h: ditto
        * rendering/RenderRubyBase.cpp: ditto
        * rendering/RenderRubyBase.h: ditto
        * rendering/RenderRubyRun.cpp: ditto
        * rendering/RenderRubyRun.h: ditto
        * rendering/RenderRubyText.cpp: ditto
        * rendering/RenderRubyText.h: ditto

2010-03-20  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6564538> Re-enable UTI code in WebCore now that MobileCoreServices exists

        Reviewed by David Carson.

        MobileCoreServices has existed on iPhone OS since Kirkwood (3.0)
        so it's time to remove the workarounds put in place before that.

        * platform/MIMETypeRegistry.cpp:
        (WebCore::initializeSupportedImageMIMETypes): Removed workaround
        for iPhone.  The original code returns fewer MIME types than the
        workaround, but WebKit on Mac OS X doesn't include all of the
        crazy variants either.
        (WebCore::initializeSupportedImageMIMETypesForEncoding): Removed
        workaround for iPhone.  The original code returns more MIME
        types than the workaround.
        * platform/graphics/cg/ImageSourceCG.cpp:
        (WebCore::ImageSource::filenameExtension): Removed workaround
        for iPhone.  Valid extensions are returned for common image
        types.
        * platform/graphics/cg/ImageSourceCGMac.mm: Replaced #if
        PLATFORM(IPHONE)/#endif macros (which commented out all of
        the code) with necessary headers and soft linking macros.

2010-03-19  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Kilzer.

        Move html/StepRange.{cpp,h} to its alphabetical position in XCode.

        * WebCore.xcodeproj/project.pbxproj:

2010-03-19  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Kilzer.

        <rdar://problem/7761189> Some "ValidityState" layout tests fail after Havoc merge

        Part 3 of 3: Now with ENABLE(RANGETYPE_AS_TEXT), an <input type=range> is treated
        as much like a range input as possible, but just with a text renderer. This means
        it supports value sanitization, min, max, etc.

        * html/HTMLInputElement.cpp: Shifted most ENABLE flags from emulating TEXT to RANGE.

2010-03-19  Joseph Pecoraro  <joepeck@webkit.org>

    Reviewed by David Kilzer.

    <rdar://problem/7761189> Some "ValidityState" layout tests fail after Havoc merge

    Part 2 of 3: Merged ToT WebKit r56241, r56242, r56250.

    2010-03-19  Joseph Pecoraro  <joepeck@webkit.org>

            Reviewed by David Kilzer.

            Assertion failure in media/video-controls-with-mutation-event-handler.html
            https://bugs.webkit.org/show_bug.cgi?id=36376

            Fix crashing test. Underlying the media element's volume slider is a
            range input, which sanitizes values before expected on the media control.

            * rendering/RenderMedia.cpp:
            (WebCore::RenderMedia::createVolumeSlider):

    2010-03-19  Joseph Pecoraro  <joepeck@webkit.org>

            Reviewed by David Kilzer.

            <input type=range> does not validate correctly without a renderer and the tests are incorrect
            https://bugs.webkit.org/show_bug.cgi?id=36259

            Setting value attribute on an <input type=range> to an out-of-range value fires oninput
            https://bugs.webkit.org/show_bug.cgi?id=16990

            Part 2 of 2: When setting the range element's value, overflows and underflows
            are automatically sanitized to valid values. Moved the general case
            sanitization code out of the Renderer into HTMLInputElement::sanitizeValue.

            * html/HTMLInputElement.cpp:
            (WebCore::HTMLInputElement::value): when getting a default value on reset() ensure the defaultValue is provided
            (WebCore::HTMLInputElement::sanitizeValue): clamp the value within the max/min/step range constraints
            * html/StepRange.cpp:
            (WebCore::StepRange::StepRange): allow const element in the constructor
            (WebCore::StepRange::clampValue): clamp from a String value
            * html/StepRange.h:
            (WebCore::StepRange::defaultValue): easy calculation of the default value for max/min/step range constraints
            * rendering/RenderSlider.cpp:
            (WebCore::RenderSlider::updateFromElement): no longer handle the general case sanitization in the renderer

    2010-03-18  Joseph Pecoraro  <joepeck@webkit.org>

            Reviewed by David Kilzer.

            <input type=range> does not validate correctly without a renderer and the tests are incorrect
            https://bugs.webkit.org/show_bug.cgi?id=36259

            Part 1 of 2: Refactoring the SliderRange struct out of rendering/RenderSlider
            into a more appropriate place. Changed the named to StepRange. Changed
            from a struct to a class.

              Added new files to the build.

            * GNUmakefile.am:
            * WebCore.gypi:
            * WebCore.pro:
            * WebCore.vcproj/WebCore.vcproj:
            * WebCore.xcodeproj/project.pbxproj:

              Renamed and moved class SliderRange to StepRange.

            * html/StepRange.cpp: Added.
            (WebCore::StepRange::StepRange):
            (WebCore::StepRange::clampValue):
            (WebCore::StepRange::valueFromElement):
            (WebCore::sliderPosition):
            * html/StepRange.h: Added.
            (WebCore::StepRange::proportionFromValue):
            (WebCore::StepRange::valueFromProportion):
            * rendering/RenderSlider.cpp:
            (WebCore::RenderSlider::updateFromElement): updated to use StepRange
            (WebCore::RenderSlider::setValueForPosition): updated to use StepRange

2010-03-19  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7182100> Remove workaround in FileSystemPOSIX.cpp for broken access() call

        Reviewed by Greg Bolsinga.

        * platform/posix/FileSystemPOSIX.cpp:
        (WebCore::makeAllDirectories): Backed out workaround for
        <rdar://problem/5865938>.  Verified that the changes worked on a
        freshly installed system using the WebKit stickies demo.

2010-03-19  Karl Hong <khong@apple.com>

        Review by David Kilzer <ddkilzer@apple.com>

        <rdar://problem/7672101>Switch from -khtml prefix to -webkit prefix for CSS in FrameIPhone.mm

        As stated in bug description, switch the property names which contain ancient prefix -khtml.

        *page/iphone/FrameIPhone.mm

2010-03-19  Joseph Pecoraro  <joepeck@webkit.org>

    Reviewed by David Kilzer.

    <rdar://problem/7761189> Some "ValidityState" layout tests fail after Havoc merge

    Part 1 of 3: Merged ToT WebKit r54120, r54271, r54754.

    2010-02-13  Kent Tamura  <tkent@chromium.org>

            Reviewed by Darin Adler.

            Refactor parsing/serialization functions in HTMLInputElement.
            https://bugs.webkit.org/show_bug.cgi?id=34852

            - Rename formStringToDouble() to parseToDoubleForNumberType()
            - Rename formStringToDateComponents() to parseToDateComponents()
            - Rename formStringFromDouble() to serializeForNumberType()
            - Add serializeForDateTimeTypes()
              The code is moved from setValueAsDate() and setDateValue().
            - Add serialize()

            parseToDouble() is the top-level function to parse a
            type-dependent string and return a double
            value. parseToDoubleForNumber() and parseToDateComponents()
            functions are helper functions for it. serialize() is the
            top-level function to serialize a double value to a type-dependent
            string, and serializeForNumberType() and
            serializeForDateTimeTypes() are helper functions for it.

            No tests because of no functional changes.

            * html/HTMLInputElement.cpp:
            (WebCore::HTMLInputElement::stepMismatch):
            (WebCore::HTMLInputElement::getAllowedValueStep):
            (WebCore::HTMLInputElement::parseToDouble):
            (WebCore::HTMLInputElement::valueAsDate):
            (WebCore::HTMLInputElement::setValueAsDate):
            (WebCore::HTMLInputElement::setValueAsNumber):
            (WebCore::HTMLInputElement::serializeForDateTimeTypes):
            (WebCore::HTMLInputElement::serialize):
            (WebCore::HTMLInputElement::serializeForNumberType):
            (WebCore::HTMLInputElement::parseToDoubleForNumberType):
            (WebCore::HTMLInputElement::parseToDateComponents):
            * html/HTMLInputElement.h:
            * html/ValidityState.cpp:
            (WebCore::ValidityState::typeMismatch):
            * rendering/RenderSlider.cpp:
            (WebCore::SliderRange::valueFromElement):
            (WebCore::RenderSlider::updateFromElement):
            (WebCore::RenderSlider::setValueForPosition):

    2010-02-02  Kent Tamura  <tkent@chromium.org>

            Reviewed by Darin Adler.

            rangeOverflow/rangeUnderflow support for type=datetime, datetime-local,
            month, time and week
            https://bugs.webkit.org/show_bug.cgi?id=34483

            Tests: fast/forms/ValidityState-rangeOverflow.html
                   fast/forms/ValidityState-rangeUnderflow.html

            * html/HTMLInputElement.cpp:
              Defines the hard limits for the types as double values.
            (WebCore::HTMLInputElement::rangeUnderflow): Supports the types.
            (WebCore::HTMLInputElement::rangeOverflow): Supports the types.
            (WebCore::HTMLInputElement::minimum): Supports the types.
            (WebCore::HTMLInputElement::maximum): Supports the types.

    2010-01-31  Kent Tamura  <tkent@chromium.org>

            Reviewed by Darin Adler.

            Fix valueAsNumber calculation for type=month.
            https://bugs.webkit.org/show_bug.cgi?id=34304

            valueAsNumber calculation for type=month which was checked in as
            r53893 was the number of milliseconds since UNIX epoch, and it was
            wrong. The correct way is the number months since UNIX epoch.

            * html/DateComponents.cpp:
            (WebCore::DateComponents::setMonthsSinceEpoch):
            (WebCore::DateComponents::monthsSinceEpoch):
            * html/DateComponents.h: Declare setMonthsSinceEpoch() and monthsSinceEpoch().
            * html/HTMLInputElement.cpp:
            (WebCore::HTMLInputElement::parseToDouble):
              Switch to monthsSinceEpoch() for type=MONTH.
            (WebCore::HTMLInputElement::valueAsDate):
              Add code with millisecondsSinceEpoch() for MONTH because
              parseToDouble() changed its behavior.
            (WebCore::HTMLInputElement::setValueAsNumber):
              Use setMonthsSinceEpoch() for MONTH.

2010-03-16  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/7266253> [Apex8A107]: Emoji becomes blank characters after inputting Thai Text

        Reviewed by Dan Bernstein

        The complex font rendering path knows nothing about emoji characters.
        CoreText places 7 in the glyph buffer when it comes across an emoji
        character. So we replace the glyph with the actual emoji character code
        in the complex font rendering path so that we can render emoji along
        with scripts like Thai and Devanagari.

        Tests: platform/iphone-simulator/fast/text/emoji-complextext.html
               platform/iphone-simulator/fast/text/emoji-text.html

        * platform/graphics/mac/ComplexTextController.cpp:
        (WebCore::ComplexTextController::adjustGlyphsAndAdvances):

2010-03-18  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by David Carson.

        <rdar://problem/7757722> Crashes when visiting web page in WebCore::Document::eventRectRelativeToRoot

        Check to see if RenderObject::node() returns 0 before dereferencing.

        * dom/DocumentIPhone.cpp:
        (WebCore::Document::eventRectRelativeToRoot):

2010-03-17  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by David Carson.

        <rdar://problem/7643903> Remove all uses of IPhoneApplyOnWebThread & IPhoneGetterApplyOnWebThread & IPhoneSetterApplyOnWebThread, as they are obtuse

        The methods on the DOM objects that were tagged this way were not used nearly everywhere.
        Some are used in UIKit, and the 'run on the web thread' behavior is not desired.

        * bindings/scripts/CodeGeneratorObjC.pm:
        * html/HTMLFormElement.idl:
        * html/HTMLInputElement.idl:
        * html/HTMLOptionElement.idl:
        * html/HTMLSelectElement.idl:
        * html/HTMLTextAreaElement.idl:

2010-03-17  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by David Carson.

        <rdar://problem/7756577> REGRESSION: LayoutTests/fast/css/pseudo-required-optional-005.html fails on background of input type="range"

        <input type=range> elements are not yet supported on the iPhone. The
        current behavior is to turn them into text fields. TextFields respect
        the required attribute, but range inputs should always be optional.
        This patch maps <input type=range> to a fake input type that acts like
        a text field in all cases but the isRequired check. This allows the
        range input to still be usable andit correctly respond to type checks
        and the required attribute.

        The fake input type is meant to make it much easier for later merging
        and adding official support for the range input, while still
        maintaining the current behavior. All of this code is surrounded by
        the ENABLE(RANGETYPE_AS_TEXT) flag.

        * html/HTMLInputElement.cpp: Make RANGETEXT act like a TEXT, for all but the required state
        * html/HTMLInputElement.h: Added fake input type RANGETEXT
        * html/ValidityState.cpp: Make RANGETEXT act like a TEXT

2010-03-15  Cameron Zwarich  <zwarich@apple.com>

        <rdar://problem/7756196> More DocumentWeakReference threading assertion failures

        Reviewed by Greg Bolsinga.

        * dom/Document.cpp:
        (WebCore::DocumentWeakReference::document): Update for iPhone's threading model.
        (WebCore::DocumentWeakReference::clear): Ditto.

2010-03-15  Cameron Zwarich  <zwarich@apple.com>

        <rdar://problem/7752552> Crash watching iPad TV ad

        Merge ToT WebKit r56018.

    2010-03-15  Cameron Zwarich  <zwarich@apple.com>

        Reviewed by Geoff Garen.

        Bug 36135 - GCController::garbageCollectNow() crashes when called from garbage collection
        <https://bugs.webkit.org/show_bug.cgi?id=36135>
        <rdar://problem/7752552>

        * bindings/js/GCController.cpp:
        (WebCore::GCController::garbageCollectNow): Fail silently if garbage collection is
        active rather than hitting the CRASH() reentrancy guard.

2010-03-15  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by Dan Bernstein.

        <rdar://problem/7285735> Quirksmode WebKit: dynamic :only-child test fails
        <rdar://problem/7285744> Quirksmode WebKit: dynamic :last-child test fails

        Test: fast/css/dynamic-pseudo-class.html

        Text Autosizing clones a RenderStyle for use on the Renderer it is
        cloning from. Cloning a RenderStyle does not copy the RenderStyle state
        associated with the element. This state information is needed in this
        case, because we are assigning it to the same renderer and the special
        RenderStyle states would be lost otherwise. The states include psuedo
        class information such as first-child, last-child information.

        * dom/Document.cpp:
        (cloneRenderStyleWithState): file static method to clone and copy over the special state information.

2010-03-15  Cameron Zwarich  <zwarich@apple.com>

        <rdar://problem/7712953> ASSERTION FAILED: !needsLayout() in WebCore::FrameView::paintContents() (FrameView.cpp:1701)

        Reviewed by Greg Bolsinga.

        This assertion failure is caused by a reentrant layout from the web thread giving
        up the WebKit lock in order to deliver a delegate message to the main thread, spinning
        the main thread's runloop and causing layout to be reentered from painting. The easiest
        way for these delegate messages to be sent is for a subframe to finish layout and send
        the message while the main frame is doing layout. This patch fixes that particular problem,
        but there are other issues, like a subframe getting a resize event and doing something
        from JS that requires a delegate callback to be sent.

        The fix is to only send these for the main frame. None of them do any frame-specific
        work in UIKit, and with frame-flattening enabled, FrameView::scheduleRelayout() always
        invalidates the main frame's layout when scheduling a layout for a subframe.

        * page/FrameView.cpp:
        (WebCore::FrameView::layout): Only send the didLayout callback if the frame being
        laid out is the main frame.
        (WebCore::FrameView::performPostLayoutTasks): Ditto for the didFirstVisuallyNonEmptyLayout
        callback.

2010-03-14  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7752676> CrashTracer: [USER] 1 crash in MobileSafari at WebCore: WebCore::ScriptExecutionContext::stopDatabases + 86

        Reviewed by Cameron Zwarich.

        * dom/Document.cpp:
        (WebCore::Document::isContextThread): Changed to return true if
        the current thread is the Web Thread or the main thread.

2010-03-14  Greg Bolsinga  <bolsinga@apple.com>

        <rdar://problem/7751942> Missing a 0 check in FrameLoader.cpp:3917

        Merged ToT WebKit r54145.

        Reviewed by David Kilzer.

    2010-02-01  Brady Eidson  <beidson@apple.com>

        Reviewed by Adele Peterson.

        Crash in Safari opening new tabs to "same page"
        <rdar://problem/7593857> and https://bugs.webkit.org/show_bug.cgi?id=34444

        Test: fast/loader/crash-copying-backforwardlist.html

        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::loadItem): Null check currentItem().

        * page/Page.cpp:
        (WebCore::Page::goToItem): Ditto.

2010-03-14  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7751937> Immediate ASSERT upon launch: ASSERTION FAILED: isMainThread() Document.cpp:365 WebCore::DocumentWeakReference::DocumentWeakReference(WebCore::Document*))

        Reviewed by Cameron Zwarich.

        * dom/Document.cpp:
        (WebCore::DocumentWeakReference::DocumentWeakReference): Changed
        to assert that the current thread is the main thread or the Web
        Thread.
        * platform/Timer.h: Added include of WebCoreThread.h.
        (WebCore::TimerBase::isActive): Changed assert that the current
        thread is the Web Thread or the main thread.

2010-03-08  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by Simon Fraser.

        Add ENABLE(FRAME_FLATTENING_DEPRECATED), which wraps the code that explodes iframes within their parents.

        Investigation done for <rdar://problem/7674554>, Apex only.

        * DerivedSources.make:
        * WebCore.iPhone.exp:
        * page/Frame.cpp:
        * page/Frame.h:
        * page/FrameView.cpp:
        (WebCore::FrameView::layout):
        (WebCore::FrameView::scheduleRelayout):
        * page/Settings.cpp:
        (WebCore::Settings::Settings):
        * page/Settings.h:
        * rendering/RenderFrameSet.cpp:
        (WebCore::RenderFrameSet::layout):
        * rendering/RenderFrameSet.h:
        * rendering/RenderPartObject.cpp:
        (WebCore::RenderPartObject::RenderPartObject):
        (WebCore::RenderPartObject::layout):
        * rendering/RenderPartObject.h:
        * rendering/RenderWidget.cpp:
        (WebCore::RenderWidget::updateWidgetPosition):

2010-03-13  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7751767> WebCore has a weak export of WebCore::jsString(JSC::ExecState*, WebCore::String const&)

        Merged ToT WebKit r54405.

    2010-02-04  Mark Rowe  <mrowe@apple.com>

        Reviewed by Timothy Hatcher.

        Build fix.  Remove a symbol corresponding to an inline function from the linker export
        file to prevent a weak external failure.

        * WebCore.base.exp: Remove symbol.
        * WebCore.xcodeproj/project.pbxproj: Accommodate rename of script.

2010-03-13  David Carson  <dacarson@apple.com>

        Reviewed by Greg Bolsinga.

        <rdar://problem/6395260> Crash in WebCore::ImageTokenizer::writeRawData() after memory level warning

        Crash occurs because an iFrame has a top level load of an image. When we go to load the image
        we have hit the memory limit and ImageLoader short ciruits the load and does not construct a
        CachedImage. Later, the ImageDocument representing the top level load tries to add the loaded data
        to the CachedImage, but it is null.
        The fix is to not short circuit the load in this case. It is possible to tell this case because
        the flag m_loadManually is set to true when loading via ImageDocument and the ImageLoader will
        not have an existing CachedImage (m_image).
        The fix does not disable memory limit checking as the content is still added to the CachedImage
        via CahcedImage::data() which contains a check for memory limits and does the right thing.

        * loader/ImageLoader.cpp:
        (WebCore::ImageLoader::updateFromElement):

2010-03-13  Pratik Solanki  <psolanki@apple.com>

        Reviewed by David Carson

        <rdar://problem/7751620> Obscure/remove @2x strings from WebCore

        * platform/graphics/mac/FontMac.mm:
        (WebCore::smileImage): Obscure "@2x" by passing numeric ASCII codes to
        snprintf

2010-03-13  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7610586> Merge Safari Havoc changes from ToT WebKit (r53218-r54084)

        Merged ToT WebKit r53218-r54084 on trunk.

        2593 files changed, 102315 insertions(+), 46263 deletions(-)

2010-03-13  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by Simon Fraser.

        <rdar://problem/6089245> iFrames and Touch Events

        This fixes both iframes and framesets. When calculating the event region rectangles,
        the code needs to walk up the ownerDocuments to get to the top coordinate system.

        * dom/DocumentIPhone.cpp:
        (WebCore::Document::eventRectRelativeToRoot):
        (WebCore::Document::touchEventsChangedTimerFired):
        (WebCore::Document::checkChildRenderers):
        * dom/DocumentIPhone.h:

2010-03-12  Paul Knight   <pknight@apple.com>

        <rdar://problem/7729209> K48: It takes over 30 seconds to load a web page from Safari after Unit waked-up

        Reviewed by Greg Bolsinga and David Kilzer.

        CFRunLoopTimer is susceptible to drift while the device sleeps. This can prevent immediate one-shot timers from firing
        if the absolute firing date is in the past but the real firing date has been delayed to some time in the future. In
        particular this is delaying subresources from loading.

        Register for power notifications and run the timer firing handler when the device wakes from sleep.

        The pattern for this fix borrows heavily from SharedTimerMac, but we don't have the luxury of the higher level
        NSWorkspace notification.

        * platform/iphone/SharedTimerIPhone.mm:
        (powerChanged): Added a static C function to respond to IOKit's power notifications.
        (-[WebCorePowerNotifierIPhone init]): Added. Register for IOKit power notifications.
        (-[WebCorePowerNotifierIPhone didWake]): Added. Fire timers on the web thread.
        (WebCore::setSharedTimerFireTime): Registers for power assertions if necessary.

2010-03-12  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/7610277> WebKit needs to be able to render hires emoji

        Reviewed by Greg Bolsinga

        Support for hi-res emoji. We load the @2x version of the file on hi-res capable
        devices if it is present. If not, we fall back to our currently shipping
        images.

        * WebCore.iPhone.exp:
        * platform/graphics/mac/FontMac.mm:
        (WebCore::smileImage):
        * platform/iphone/WebCoreSystemInterfaceIPhone.mm:
        * platform/mac/WebCoreSystemInterface.h:

2010-03-12  Dean Jackson  <dino@apple.com>

        Reviewed by Eric Carlson.

        <rdar://problem/7745630> autoplay should work when user actions are not required

        Change the code in HTMLMediaElement that disabled loading data and
        automatic playback on iPhone - it now looks to see if the restriction
        on requiring user actions has been lifted.

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::HTMLMediaElement):
        (WebCore::HTMLMediaElement::attributeChanged):
        (WebCore::HTMLMediaElement::insertedIntoDocument):
        (WebCore::HTMLMediaElement::load):
        (WebCore::HTMLMediaElement::autoplay):
        (WebCore::HTMLMediaElement::play):
        (WebCore::HTMLMediaElement::pause):
        (WebCore::HTMLMediaElement::pauseInternal):
        (WebCore::HTMLMediaElement::userRequestsMediaLoading):
            - test restrictions as we load or play media
        * html/HTMLMediaElement.h:
        (WebCore::HTMLMediaElement::requireUserGestureForLoad):
        (WebCore::HTMLMediaElement::requireUserGestureForRateChange):
            - new convenience methods for testing restrictions

2010-03-11  Nicholas Jong  <njong@apple.com>

        Reviewed by NOBODY (OOPS!).

        <rdar://problem/7621274> Selection hit testing regression (at-a-distance)

        Restore Northstar behavior: no selection at a distance in multi-line documents

        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::positionForPointWithInlineChildren):

2010-03-11  Dean Jackson  <dino@apple.com>

        Reviewed by Greg Bolsinga and Brad Moore.

        <rdar://problem/7710173> media playback should not be restricted to user gestures, or there should be an API to remove the restriction

        Add a new setting so that clients can control the restriction
        on audio/video elements requiring a user gesture to control
        playback. This is still disabled by default on iPhone.

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::HTMLMediaElement):
        * html/HTMLMediaElement.h:
        * page/Settings.cpp:
        (WebCore::Settings::Settings):
        * page/Settings.h:
        (WebCore::Settings::setMediaPlaybackRequiresUserAction):
        (WebCore::Settings::mediaPlaybackRequiresUserAction):

2010-03-11  Chris Fleizach  <cfleizach@apple.com>

        Reviewed by Greg Bolsinga.

        <rdar://problem/7581356> AX: use title attribute as accessibilityHint

        Test: platform/iphone-simulator/accessibility/accessibility-hint.html

        The accessibilityHint should be exposed as the title attribute.

        * accessibility/iphone/AccessibilityObjectWrapperIPhone.mm:
        (-[AccessibilityObjectWrapper accessibilityHint]):

2010-03-10  Drew Wilson  <amw@apple.com>

        <rdar://problem/7734224> 7B353: Pressing "0" while posting makes keyboard disappear

        Merge from Wildcat branch: r210266.

    2010-03-09  Drew Wilson  <amw@apple.com>

            Reviewed by Greg Bolsinga.

            <rdar://problem/7734224> 7B353: Pressing "0" while posting makes keyboard disappear
            Separate virtual keyCode mapping for keyCodes and charCodes.

            * platform/iphone/WebEvent.mm:
            (windowsKeyCodeForKeyCode):
            (windowsKeyCodeForCharCode):
            (-[WebEvent initWithKeyEventType:withTimeStamp:withCharacters:withCharactersIgnoringModifiers:withModifiers:isRepeating:withKeyCode:isTabKey:withCharacterSet:]):

2010-03-10  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7737280> REGRESSION: Using a mutable key in Obj-C bindings could cause crash in Dashcode/MobileStore

        Merged ToT WebKit r55757, r55760.

    2010-03-09  Alexey Proskuryakov  <ap@apple.com>

        Reviewed by Mark Rowe.

        https://bugs.webkit.org/show_bug.cgi?id=35951
        <rdar://problem/7327060> Frequent crashes in Dashcode at JSC::Bindings::ObjcInstance::~ObjcInstance + 80

        * bridge/objc/objc_instance.mm: (createInstanceWrapperCache): Fix Tiger code path, too.

    2010-03-09  Alexey Proskuryakov  <ap@apple.com>

        Reviewed by Oliver Hunt.

        https://bugs.webkit.org/show_bug.cgi?id=35951
        <rdar://problem/7327060> Frequent crashes in Dashcode at JSC::Bindings::ObjcInstance::~ObjcInstance + 80

        * bridge/objc/objc_instance.mm: (createInstanceWrapperCache): It's not correct to use object
        personality for keys, because the key can be a mutable object, so its hash can change over its
        lifetime.

2010-03-09  Dean Jackson  <dino@apple.com>

        <rdar://problem/7735547> implement fill-modes for CSS Animations

        Merge from ToT: r55576, r55596, r55601, r55605

    2010-03-05  Dean Jackson  <dino@apple.com>

        Reviewed by Simon Fraser.

        https://bugs.webkit.org/show_bug.cgi?id=35772
        Animation fill modes should be supported in the shorthand property

        Add CSSPropertyWebkitAnimationFillMode to the list of properties
        evaluated in the -webkit-animation shorthand.

        Test: animations/animation-shorthand.html

        * css/CSSParser.cpp:
        (WebCore::CSSParser::parseAnimationShorthand):

    2010-03-05  Dean Jackson  <dino@apple.com>

        Reviewed by Simon Fraser

        https://bugs.webkit.org/show_bug.cgi?id=35815
        Animation Fill Modes fail on Windows

        * css/CSSComputedStyleDeclaration.cpp:
        * css/CSSStyleSelector.cpp:
        * platform/graphics/mac/GraphicsLayerCA.mm:
            - use new enum value
        * platform/animation/Animation.h:
            - change bitfield type
        * rendering/style/RenderStyleConstants.h:
            - add new enum for fill mode

    2010-03-05  Dean Jackson  <dino@apple.com>

        Reviewed by Simon Fraser and Chris Marrin.

        Bug 26869: Add fill modes for CSS Animations
        https://bugs.webkit.org/show_bug.cgi?id=26869

        Tests: animations/fill-mode-removed.html
               animations/fill-mode-transform.html
               animations/fill-mode.html

        * css/CSSComputedStyleDeclaration.cpp:
        * css/CSSParser.cpp:
        * css/CSSParser.h:
        * css/CSSPropertyNames.in:
        * css/CSSStyleSelector.cpp:
        * css/CSSStyleSelector.h:
        * css/CSSValueKeywords.in:
            - parse, assign and retrieve the value of the new
              -webkit-animation-fill-mode property
        * page/animation/AnimationBase.cpp:
        * page/animation/AnimationBase.h:
            - new state in animation engine for a finished animation
              that is "filling" forwards in time. This allows the
              engine to keep the animation around and not revert to the
              old style.
            - update the timer code to indicate it doesn't need to
              keep animating if it is filling
            - now that animations can extend beyond their elapsed time,
              make sure progress works correctly with iteration counts
        * page/animation/KeyframeAnimation.cpp:
        (WebCore::KeyframeAnimation::animate):
            - ensure correct style value is returned at the right
              time by checking for fill mode
        (WebCore::KeyframeAnimation::onAnimationEnd):
            - continue to send the end event, but only remove the
              animation if it isn't filling forwards
        * platform/animation/Animation.cpp:
        * platform/animation/Animation.h:
            - new fill mode member property
        * platform/animation/AnimationList.cpp:
            - ensure the fill mode is propagated to a list of style valus
        * platform/graphics/mac/GraphicsLayerCA.mm:
            - make hardware layers use Core Animation's fill mode

2010-03-09  Dean Jackson  <dino@apple.com>

        <rdar://problem/7735272> DOM insertion mutation events should dispatch after a node is attached to the render tree

        Merged ToT WebKit r55532

    2010-03-04 Antoine Quint <ml@graougraou.com>

        Reviewed by Darin Adler.

        DOM insertion mutation events should dispatch after a node is attached to the render tree
        https://bugs.webkit.org/show_bug.cgi?id=35590

        Test:
        * fast/events/domnodeinsertedintodocument-dispatched-post-rendering.html

        Split off the internal-to-WebCore node insertion notification code from the DOM mutation
        event dispatching, originally in dispatchChildInsertionEvents(), to a new static function
        called notifyChildInserted(). This allows us to dispatch the mutation events at a later
        time upon insertion of a child into to the tree, specifically _after_ attachment to the render
        tree.

        * dom/ContainerNode.cpp:
          (WebCore::ContainerNode::insertBefore):
          (WebCore::ContainerNode::replaceChild):
          (WebCore::ContainerNode::appendChild):
          (WebCore::notifyChildInserted):
          (WebCore::dispatchChildInsertionEvents):

2010-03-08  Aaron Golden  <agolden@apple.com>

        Reviewed by Cameron Zwarich.

        <rdar://problem/7726634> Crash starting movie preview - grabbing web lock from fig thread

        Take the WebThreadLock only if we're on the main thread, not on any non-web-thread.

        * platform/iphone/TileCache.mm:
        (-[TileLayer display]):

2010-03-08  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by Simon Fraser.

        <rdar://problem/7717907> Touch events from HTML DOM not firing inside frames on iPad Beta3 sdk

        Since the data is all stored on the top Document, Document::touchEventListeners() needs to
        go up to the top Document, as is done elsewhere in this code.

        * dom/DocumentIPhone.cpp:
        (WebCore::Document::touchEventListeners):
        * dom/DocumentIPhone.h:

2010-03-06  Brad Moore  <bradm@apple.com>

        Reviewed by Greg Bolsinga.

        <rdar://problem/7725158> Tapping on an image in iBooks doesn't bring up controls

        Limiting the cases in which we identify an image element as interactive.

        approximateNodeAtViewportLocation:, used by UIKit to find interactive DOM elements, is implemented in terms of
        willRespondToMouseClickEvents().  Unfortunately, since approximateNodeAtViewportLocation: is used to find nodes
        for all types of interaction, be it web handlers or our own UI additions (like an action sheet),
        willRespondToMouseClickEvents() has been overloaded to encompass more types of interaction than just mouse clicks.
        I think a better long-term fix would be to have an approximateNodeAtViewportLocation:forInteractionTypes: method that
        allows us to refine our hit test in UIKit, but for now we can refine the image element's version to take the touch
        callout into consideration.

        --- Submission Information---
        - Risk level:       High
        - Risk details:     This could break the interactivity of images on the web.
        - Code reviewed by: Greg Bolsinga.
        - Testing details:  Browsed in Safari, interacted within iBooks.

        * html/HTMLImageElement.cpp:
        (WebCore::HTMLImageElement::willRespondToMouseClickEvents):

2010-03-08  David Kilzer  <ddkilzer@apple.com>

        Follow-up fix: <rdar://problem/7704943> Please add a way to ignore per-session credentials

        Merged Wildcat r209796 to trunk for Apex.

        * platform/network/mac/CredentialStorageMac.mm:
        (WebCore::CredentialStorage::saveToPersistentStorage):
        Switched to using -setDefaultCredential:forProtectionSpace:.

    2010-03-08  David Kilzer  <ddkilzer@apple.com>

        Revert follow-up fix: <rdar://problem/7704943> Please add a way to ignore per-session credentials

        Reviewed by Cameron Zwarich.

        The layout test failure of
        http/tests/xmlhttprequest/cross-origin-no-authorization.html was
        caused by a missing NSURLConnection delegate callback to
        -connectionShouldUseCredentialStorage:, which meant that
        CFNetwork would always use the default credentials that were
        available when basic authentication was required.  Since the
        missing delegate callback will be fixed by
        <rdar://problem/7725794>, we can safely switch back to storing
        default credentials to fix this bug.

        * platform/network/mac/AuthenticationMac.h:
        (WebCore::WebCoreCredentialStorage::saveToPersistentStorage):
        Switched back to using -setDefaultCredential:forProtectionSpace:.

2010-03-05  Cameron Zwarich  <zwarich@apple.com>

        <rdar://problem/7686013> Going back to a page previously loaded in landscape view displays page zoomed without the possibility to resize the view

        Reviewed by Simon Fraser.

        * history/CachedFrame.h: Expose the isMainFrame() method from the private base class.

2010-03-05  Alexey Proskuryakov  <ap@apple.com>

        <rdar://problem/7704943> Please add a way to ignore per-session credentials

        Reviewed by David Kilzer.

        Make sure that NSURLCredentialStorage is populated with
        credentials known to WebKit, thus making it possible to play
        back authenticated media.

        This patch is not suitable on desktop, because always returning
        NO from connectionShouldUseCredentialStorage: would make us fail
        to retrieve credentials from Keychain. Since HTTP credentials
        are not saved to Keychain on embedded, this is not an issue
        here.

        * platform/network/CredentialStorage.cpp:
        (WebCore::CredentialStorage::set): Called
        saveToPersistentStorage().
        * platform/network/CredentialStorage.h:
        * platform/network/mac/CredentialStorageMac.mm:
        (WebCore::CredentialStorage::saveToPersistentStorage): Added.
        * platform/network/mac/ResourceHandleMac.mm:
        (-[WebCoreResourceHandleAsDelegate connectionShouldUseCredentialStorage:]):
        (-[WebCoreSynchronousLoader connectionShouldUseCredentialStorage:]):

2010-03-05  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by David Carson.

        <rdar://problem/7721742> Backout change made for: Safari hangs when user replies to Hotmail email

        It did not fix the problem, and this code is fragile. It is less risky to not have the change.

        * rendering/RenderPartObject.cpp:
        (WebCore::RenderPartObject::layout):

2010-03-04  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7718151> WebKit: Selecting/copying all text on a page will copy entire chapter

        Merged ToT WebKit r55546.

    2010-03-04  Dan Bernstein  <mitz@apple.com>

        Based on a pacth from Nick Jong.

        Reviewed by Simon Fraser.

        Improve selection in multi-column blocks when hitting points above or
        below a column rect.

        Test: fast/multicol/hit-test-above-or-below.html

        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::adjustPointToColumnContents): If the point lies
        within the horizontal range for a column, constrain it to the column (if
        it is above) or the next column (if it is below).

2010-03-03  David Carson  <dacarson@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/7674554> K48 Safari hangs when user replies to Hotmail email

        In release builds there is an early return in FrameView::layout() if the
        the view's frame view does not equal the view. When this happens, the expanding
        frame code enters an endless loop. This change adds an assert a level higher
        and for release builds does not enter the do/while loop if layout will do
        an early return

        * rendering/RenderPartObject.cpp:
        (WebCore::RenderPartObject::layout):

2010-03-02  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/7709408> Return on software keyboard sets keycode to 0 instead of 13

        The software keyboard on iPhone gives us '\n' in the string instead of
        '\r' which is what the code (copied from desktop version) expects. This
        is also what you get when using the hardware keyboard. Update logic to
        check for 10 ('\n') and return a keycode of 13 in that case.

        Reviewed by Brad Moore and David Carson.

        * platform/iphone/WebEvent.mm:
        (windowsKeyCodeForKeyEvent):

2010-03-02  Drew Wilson  <amw@apple.com>

        Reviewed by David Kilzer/David Carson.

        Initialize WebEvent.keyCode with proper web key code, calling windowsKeyCodeForKeyEvent.
        The windowsKeyCodeForKeyEvent function was copied from KeyEventMac.mm.

        * platform/iphone/WebEvent.mm:
        (windowsKeyCodeForKeyEvent):
        (-[WebEvent initWithKeyEventType:withTimeStamp:withCharacters:withCharactersIgnoringModifiers:withModifiers:isRepeating:withKeyCode:isTabKey:withCharacterSet:]):

2010-03-02  Brad Moore  <bradm@apple.com>

        Reviewed by Dave Kilzer.

        <rdar://problem/7685432> Word boundaries all messed up

        My last change to the simple tokenizer addressed this longstanding bug:

        <rdar://problem/7259611> Word boundary code on iPhone gives different results than desktop

        Unfortunately, it didn't address the mountain of places where that buggy behavior is relied upon.  Rolling
        back the WebCore change and pursuing a far less risky WebKit change.


        --- Submission Information---
        - Risk level:       Low
        - Risk details:     Going back to a well-tested tokenizer with well-known bugs and interactions.
        - Code reviewed by: Dave Kilzer
        - Testing details:  Wrote and ran unit tests, tried out sundry problematic behaviors before and after.

        * platform/text/mac/TextBoundaries.mm:
        (WebCore::findSimpleWordBoundary):

2010-03-02  Brad Moore  <bradm@apple.com>

        Reviewed by Andre Boule and Dave Kilzer.

        <rdar://problem/7703199> Calendar: "more..." cut off in some mini-popovers

        When we're forcing truncation because lines have been dropped (a non-standard behavior), we need
        to force the last-drawn line to actually be truncated.

        --- Submission Information---
        - Risk level:       Medium
        - Risk details:     Should only affect clients of string drawing SPI, but almost everything that draws text runs through this path.
        - Code reviewed by: Andre Boule and Dave Kilzer
        - Testing details:  Wrote and ran a test to cover this case, tried out all apps, especially Calendar.


        * platform/graphics/StringTruncator.cpp:
        (WebCore::truncateString):
        (WebCore::StringTruncator::rightClipToWord):
        * platform/graphics/StringTruncator.h:
        * wak/WAKStringDrawing.mm:
        (applyEllipsisStyle):
        (-[NSString _web_drawInRect:withFont:ellipsis:alignment:lineSpacing:includeEmoji:truncationRect:measureOnly:]):

2010-03-02  Cameron Zwarich  <zwarich@apple.com>

        <rdar://problem/7677480> Moving views containing WebKit's TileLayers causes WebKit drawing on the main thread without the WebThreadLock

        Reviewed by Pratik Solanki.

        It turns out that CA's DisplayNeeded flag is only thread-local until the layer is
        removed from the layer hierarchy, in which case it migrates to the thread's global
        state. If the layer is added to the layer hierarchy on the main thread, the global
        state will migrate to the main thread's local state, causing drawing to occur without
        the WebThreadLock. The previous assumption in the code was that the lock will always
        be taken when drawing occurs and freed when the autounlock runloop observer runs
        after the CA runloop observer.

        * platform/iphone/TileCache.mm:
        (-[TileLayer display]): Take the WebThreadLock when drawing on the main thread.

2010-03-02  Chris Fleizach  <cfleizach@apple.com>

        Reviewed by Greg Bolsinga.

        <rdar://problem/7706475> LayoutTests/platform/iphone-simulator/accessibility/text-marker-validation.html uses freed memory (CrashTracer: [USER] 1 crash in DumpRenderTree at WebCore: WebCore::TreeShared<WebCo$

        A range was being created, but was not retained before the pointer to the range was retained.

        * accessibility/iphone/AccessibilityObjectWrapperIPhone.mm:
        (-[AccessibilityObjectWrapper positionForTextMarker:]):

2010-03-01  Chris Fleizach  <cfleizach@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/7037851> AX: VoiceOver focus ring does not follow moving element

        Monitor focusNode changes in Web and notify accessibility of changes. This allows web sites
        to inform VoiceOver of when content changes or otherwise moves.

        Test: platform/iphone-simulator/accessibility/focus-change-notifications.html

        * accessibility/iphone/AXObjectCacheIPhone.mm:
        (WebCore::AXObjectCache::postPlatformNotification):
        (WebCore::AXObjectCache::handleFocusedUIElementChanged):
        * accessibility/iphone/AccessibilityObjectWrapperIPhone.h:
        * accessibility/iphone/AccessibilityObjectWrapperIPhone.mm:
        (-[AccessibilityObjectWrapper postFocusChangeNotification]):
        (-[AccessibilityObjectWrapper accessibilitySetPostedNotificationCallback:withContext:]):
        (-[AccessibilityObjectWrapper accessibilityPostedNotification:WebCore::AXObjectCache::]):
        * accessibility/mac/AccessibilityObjectWrapper.h:
        * dom/Document.cpp:
        (WebCore::Document::setFocusedNode):

2010-02-28  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7700090> Only save QuickLook files from WebCore when running in MobileSafari

        Reviewed by Pratik Solanki.

        Only MobileSafari requires QuickLook content be saved to disk,
        so disable this feature for all other applications that use
        WebCore.

        * platform/network/iphone/MobileQuickLook.mm:
        (WebCore::addQLPreviewConverterWithFileForURL): Use an empty
        string if nil is passed in for the filename.  This fixes a crash
        when using -[UIWebView loadData:MIMEType:textEncodingName:baseURL:]
        to load QuickLook-able content.  Added assertions.
        (WebCore::removeQLPreviewConverterForURL): Only remove the file
        if we have a non-empty path.
        * platform/RuntimeApplicationChecksIPhone.h:
        (WebCore::applicationIsMobileSafari): Added declaration.
        * platform/RuntimeApplicationChecksIPhone.mm:
        (WebCore::applicationIsMobileSafari): Added.
        * platform/network/mac/ResourceHandleMac.mm:
        (-[WebCoreResourceHandleAsDelegate connection:didReceiveResponse:]):
        Only set m_content and m_quicklookContentFilename if the current
        application is MobileSafari.
        (-[WebCoreResourceHandleAsDelegate connection:didReceiveData:lengthReceived:]):
        Only append data to m_content if it is set.
        (-[WebCoreResourceHandleAsDelegate connectionDidFinishLoading:]):
        Only write the file if m_content and m_quicklookContentFilename
        are set.

2010-02-28  David Kilzer  <ddkilzer@apple.com>

        WebCore Part 2 of 2: <rdar://problem/7659356> BREAK: Unable to import docs to Tangier from iWork.com and QL (Doc. Bundled)

        Reviewed by Pratik Solanki.

        When UIWebDocumentInteractionController unzips a file, it
        expects the unzipped bundle name to match the zipped name.  If a
        user downloads the same file more than once (or a file with the
        same name more than once), the current code starts adding "-N"
        to the filename.  For example, MyDoc.pages.zip becomes
        MyDoc-1.pages.zip on the second download, MyDoc-2.pages.zip on
        the third, etc.  This violates this rule and prevents the file
        from being opened in an application (like Keynote, Numbers or
        Pages).

        The solution is to use a unique directory for each file so that
        its name will always remain the same.  We use mkdtemp(3) to
        create a unique directory name.

        * platform/network/mac/ResourceHandleMac.mm:
        (-[WebCoreResourceHandleAsDelegate connection:didReceiveResponse:]):
        Changed to use mkdtemp(3) to create a unique directory for each
        file downloaded so that its filename will be preserved.

2010-02-28  David Kilzer  <ddkilzer@apple.com>

        WebCore Part 1 of 2: <rdar://problem/7659356> BREAK: Unable to import docs to Tangier from iWork.com and QL (Doc. Bundled)

        Reviewed by Pratik Solanki.

        Fix an egregious object lifecycle issue with
        m_quicklookContentFilename that was spotted while fixing Part 2.

        * platform/network/mac/ResourceHandleMac.mm:
        (-[WebCoreResourceHandleAsDelegate dealloc]): Released
        m_quicklookContentFilename.
        (-[WebCoreResourceHandleAsDelegate connection:didReceiveResponse:]):
        Retained m_quicklookContentFilename.
        (-[WebCoreResourceHandleAsDelegate connection:didFailWithError:]):
        Released m_quicklookContentFilename.

2010-02-26  David Carson  <dacarson@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/7661695> WebPluginOnlyMode pages are the wrong size.

        Use the scaled screen co-ordinates provided in m_fixedLayoutSize rather
        than the absolute pixel size. Also, m_fixedLayoutSize has the advantage
        of being updated on rotation before layout.

        * rendering/RenderBox.cpp:
        (WebCore::RenderBox::availableHeightUsing):

2010-02-26  Chris Fleizach  <cfleizach@apple.com>

        Reviewed by Greg Bolsinga.

        <rdar://problem/7376616> Provide events to track VoiceOver focus

        Implement 4.0 accessibility API that allows apps to know where VO focus is. This patch
        transmutes that power to webpages.

        * accessibility/iphone/AccessibilityObjectWrapperIPhone.mm:
        (-[AccessibilityObjectWrapper accessibilityElementDidBecomeFocused]):

2010-02-24  Chris Fleizach  <cfleizach@apple.com>

        Reviewed by Greg Bolsinga.

        <rdar://problem/7474798> Safari: we never say "end of list"

        Provide a means through accessibility to determine when an element is at the start or end of a "container" type element
        (like tables, lists or landmarks)

        * accessibility/iphone/AccessibilityObjectWrapperIPhone.mm:
        (-[AccessibilityObjectWrapper _accessibilityIsLandmarkRole:]):
        (-[AccessibilityObjectWrapper _accessibilityListAncestor]):
        (-[AccessibilityObjectWrapper _accessibilityLandmarkAncestor]):
        (-[AccessibilityObjectWrapper _accessibilityTableAncestor]):
        (-[AccessibilityObjectWrapper _accessibilityTraitsFromAncestors]):

2010-02-24  Karl Hong <khong@apple.com>

        Review by Brad Moore

        <rdar://problem/7394370>Dots in HTTP Auth password field move vertically when the insertion point is placed

        Add a page setting m_primaryFontBaseline for font baseline calculation to ignore fallback fonts.

        page/Settings.h
        page/Settings.cpp
        rendering/InlineFlowBox.cpp

2010-02-23  Nicholas Jong  <njong@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/7622548> Text selection broken when text in multi column and paging scroll in UIWebView

        Reverts previous change for this bug.  Due to the fix for <rdar://problem/7643712>, columns now use the expected coordinate system, so we should not modify the selection rects we output.

        * dom/Range.cpp:
        (WebCore::Range::collectSelectionRects):
        * rendering/RenderImage.cpp:
        (WebCore::RenderImage::collectSelectionRects):
        * rendering/RenderObject.cpp:
        (WebCore::RenderObject::collectSelectionRects):
        * rendering/RenderText.cpp:
        (WebCore::RenderText::collectSelectionRects):

2010-02-22  Brad Moore  <bradm@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/7413582> No "more..." link or scrolling indicator for long notes

        Since we do a bit of truncation before ever trying to ellipsize a string, we can't simply compare the ellipsized version
        to its immediate predecessor to determine if truncation took place.  Check also that we didn't perform earlier truncation.

        * wak/WAKStringDrawing.mm:
        (-[NSString _web_drawInRect:withFont:ellipsis:alignment:lineSpacing:includeEmoji:truncationRect:measureOnly:]):

2010-02-22  Brad Moore  <bradm@apple.com>

        Reviewed by Greg Bolsinga.

        <rdar://problem/7666419> Auto-correct incorrectly kicked in for previously entered misspelled text

        The iPhone-only, simplified word-boundary search needs to identify "\n" as a word even when it occurs at the
        end of a buffer.

        * platform/text/mac/TextBoundaries.mm:
        (WebCore::findSimpleWordBoundary):

2010-02-22  Julio Gonzalez  <juliog@apple.com>

        <rdar://problem/7677113> [Safari]: Youtube.com - "square with dot in it" icon rendered in middle of text. Refreshing page and it shows up different place.

        Reviewed by David Kilzer.

        * platform/graphics/mac/FontCacheMac.mm:
        (WebCore::FontCache::getFontDataForCharacters): Fixed character
        ranges when setting useCJFont to true.  The other part of this
        fix is a font change.

2010-02-22  David Carson  <dacarson@apple.com>

        Reviewed by Aaron Golden.

        * platform/network/mac/ResourceHandleMac.mm:
        (WebCore::ResourceHandle::start): Remove debugging fprintf

2010-02-22  Paul Knight  <pknight@apple.com>

        <rdar://problem/6209763> Holy stretched checkbox Batman!

        Reviewed by Cameron Zwarich.

        * rendering/RenderBox.cpp:
        (WebCore::RenderBox::paintBoxDecorations): Force the painting bounds to be square when
        painting checkboxes and radio controls.

2010-02-21  Cameron Zwarich  <zwarich@apple.com>

        <rdar://problem/7672425> Crash when P element has -webkit-appearance:menulist-button style

        Reviewed by David Carson.

        * rendering/RenderThemeIPhone.cpp:
        (WebCore::RenderThemeIPhone::paintMenuListButtonDecorations): Check that a RenderBox
        is a RenderMenuList before casting it.

2010-02-21  David Carson  <dacarson@apple.com>

        Reviewed by Greg Bolsinga.

        <rdar://problem/7442501> Enable NSURLCache for top-level resources in MobileSafari

        Top-level resources are not cached internally by WebKit. This change tags top
        level resources and informs CFNetwork that the resource should be cached.

        * loader/MainResourceLoader.cpp:
        (WebCore::MainResourceLoader::loadNow): tag load as top-level resource
        * platform/network/mac/ResourceHandleMac.mm:
        (WebCore::ResourceHandle::start): set caching state based on flag as well os setting
        * platform/network/mac/ResourceRequest.h:
        (WebCore::ResourceRequest::ResourceRequest): add initialization of flag
        (WebCore::ResourceRequest::setMainResourceRequest): set flag state
        (WebCore::ResourceRequest::isMainResourceRequest): get flag state

2010-02-20  Paul Knight  <pknight@apple.com>

        Reviewed by Dave Kilzer.

        <rdar://problem/7536812> Padding issues with custom webkit styled select elements

        Should not set an internal right padding if the style's appearance is not MenulistButtonPart,
        because we won't draw the arrow widget.

        * rendering/RenderThemeIPhone.cpp:
        (WebCore::RenderThemeIPhone::popupInternalPaddingRight):

2010-02-19  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by Simon Fraser.

        <rdar://problem/7666857> Regression: UIWebView/Safari: touchmove stops working if document had an iframe

        Basically removing an iframe would destroy its Document, which would then remove all the touch event
        listeners on the topDocument. So now clearTouchEventListeners() will remove the listeners for its
        Nodes in the new removeTouchEventListenersInDocument.

        * dom/DocumentIPhone.cpp:
        (WebCore::Document::setInTouchEventHandling): Call topDocument() once since it walks the tree.
        (WebCore::Document::addTouchEventListener): Ditto.
        (WebCore::Document::removeTouchEventListener): Ditto.
        (WebCore::Document::dirtyTouchEventRects): Ditto.
        (WebCore::Document::clearTouchEventListeners): If this is not the topDocument, call
        removeTouchEventListenersInDocument.
        (WebCore::Document::removeTouchEventListenersInDocument): Walk through the listeners, and
        remove those belonging to the given Document.
        * dom/DocumentIPhone.h: Declare new method.

2010-02-18  Paul Knight  <pknight@apple.com>

        Reviewed by Greg Bolsinga.

        <rdar://problem/7274746> Alert dialog prompts user twice when trying to delete in Shared Documents

        Remove the timer from the list of observedContentModifiers before executing the timer's action to
        prevent WKContentChange notifications from being sent twice.

        * page/DOMTimer.cpp:
        (WebCore::DOMTimer::fired):

2010-02-18  Eric Carlson  <eric.carlson@apple.com>

        Reviewed by Simon Fraser.

        <rdar://problem/7641332> SJ Demo: audio is not playing in a UIWebView

        * platform/graphics/iphone/MediaPlayerPrivateIPhone.mm:
        (WebCore::MediaPlayerPrivateiPhone::deliverNotification): Tweaks to the mapping from CoreMedia
        to HTMLMediaElement state:
        + MediaPlayerNotificationReadyForPlayback - only change network state to Loading if is currently
            less than Loading, don't ever want to go backwards for this event.
        + MediaPlayerNotificationStreamLikelyToKeepUp - change ready state to HaveEnoughData only if
            it is greater than HaveMetadata because we can get this notification before
            MediaPlayerNotificationReadyForPlayback if the media loads fast enough.
        + MediaPlayerNotificationStreamBufferFull - only change ready state to HaveFutureData if it is
            greater than HaveMetadata.

2010-02-18  Olivier Bonnet  <olivierb@apple.com>

        Reviewed by Greg Bolsinga and David Kilzer.

        <rdar://problem/7657593> Expose Document->isTelephoneNumberParsingEnabled() at the WebKit level

        Export WebCore::Document::isTelephoneNumberParsingEnabled

        * WebCore.iPhone.exp:

2010-02-16  Pratik Solanki  <psolanki@apple.com>

        <rdar://problem/7652284> ASSERT(isMainThread) in MobileSafari at WebCore - WebCore::prefetchDNS + 72 (DNSCFNet.cpp:153)

        Fix asserts so that the code checks if we're on the main thread or web
        thread for iPhone.

        Reviewed by David Kilzer.

        * platform/network/cf/DNSCFNet.cpp:
        (WebCore::DNSResolveQueue::resolve):
        (WebCore::prefetchDNS):
        * storage/StorageAreaSync.cpp:
        (WebCore::StorageAreaSync::StorageAreaSync):
        (WebCore::StorageAreaSync::~StorageAreaSync):
        (WebCore::StorageAreaSync::scheduleFinalSync):
        (WebCore::StorageAreaSync::scheduleItemForSync):
        (WebCore::StorageAreaSync::scheduleClear):
        (WebCore::StorageAreaSync::syncTimerFired):
        (WebCore::StorageAreaSync::blockUntilImportComplete):
        * storage/StorageNamespaceImpl.cpp:
        (WebCore::StorageNamespaceImpl::~StorageNamespaceImpl):
        (WebCore::StorageNamespaceImpl::copy):
        (WebCore::StorageNamespaceImpl::storageArea):
        (WebCore::StorageNamespaceImpl::close):

2010-02-16  Cameron Zwarich  <zwarich@apple.com>

        <rdar://problem/7166808> Huge plugin when page is zoomed and load a .mp3 link

        Reviewed by Greg Bolsinga.

        In iPhone WebKit's emulation of AppKit, the WebView and the WebDocumentView both
        grow with the size of the document as opposed to only the WebDocumentView. The
        upsizing of the WebView to the visual region of the screen is done by UIKit after
        the size of the view changes, but it is never reset at the beginning of a load, like
        how the WebHTMLView's size is reset in FrameLoader::begin(). This means that the
        the associated RenderView returns a stale height in the first layout. This affects
        plugin documents, which use locally generated HTML with height=100%.

        Attempt to fix this naively by resetting the WebView's height in FrameLoader::begin()
        led to serious regressions, so I am just adding a workaround for the plugin case.

        * rendering/RenderBox.cpp:
        (WebCore::RenderBox::availableHeightUsing): Add a workaround for plugin documents.

2010-02-15  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by David Carson and Simon Fraser.

        <rdar://problem/7523456> REGR: Sometimes -[WebView (WebPrivate) _touchEventRegions] returns nil when it shouldn't

        This basically reverts https://svn.apple.com/trac/puzzlebox/changeset/121775, but keeps the optimizations made.

        The touch event regions are kept on the main Document, and the lock resides there. When called from the public
        API, it will force the call to happen to the topDocument. For SPI and the call to Document::getTouchRects()
        (made from WebKit / UIKit) it ASSERTs the Document is the topDocument.

        * WebCore.Touch.exp: New export.
        * WebCore.xcodeproj/project.pbxproj: Remove now unused PageIPhoneTouch.
        * dom/Document.cpp:
        (WebCore::Document::Document): Set up touch handling data.
        (WebCore::Document::removeAllEventListeners): Clear touch handling data.
        (WebCore::Document::clear): Clear touch handling data.
        * dom/DocumentIPhone.cpp: Touch handling data is stored on the topDocument.
        (WebCore::Document::setInTouchEventHandling): Sets whether touch handling is currently occuring to prevent modifying the touch handling data.
        (WebCore::Document::addTouchEventListener): Add a new touch handler.
        (WebCore::Document::removeTouchEventListener): Remove a touch handler.
        (WebCore::Document::dirtyTouchEventRects): Indicates the touch regions need to be recalculated, if there are some.
        (WebCore::Document::setTouchEventListenersDirty): Private method to toggle the touch region dirty state.
        (WebCore::Document::clearTouchEventListeners): Clears out all the touch handling data.
        (WebCore::Document::getTouchRects): Returns the touch event regions copied from behind a lock.
        (WebCore::Document::touchEventsChangedTimerFired): Gathers up all the touch event regions when fired.
        (WebCore::Document::checkChildRenderers):
        * dom/DocumentIPhone.h:
        (touchEventListeners):
        * dom/Node.cpp: Touches are now on the Document.
        (WebCore::Node::addEventListener):
        (WebCore::Node::removeEventListener):
        (WebCore::Node::removeAllEventListenersSlowCase):
        * dom/PageIPhoneTouch.cpp: Removed.
        * dom/PageIPhoneTouch.h: Removed.
        * page/FrameView.cpp: Touches are now on the Document.
        (WebCore::FrameView::layout):
        * page/Page.cpp: Touches are now on the Document.
        (WebCore::Page::Page):
        * page/Page.h: Ditto.
        * page/iphone/EventHandlerIPhoneTouch.cpp: Touches are now on the Document.
        (WebCore::EventHandler::handleTouchEvent):
        * rendering/RenderLayer.cpp: Ditto.
        (WebCore::RenderLayer::scrollToOffset):
        (WebCore::RenderLayer::styleChanged):
        * rendering/RenderObject.cpp: Ditto.
        (WebCore::RenderObject::styleWillChange):

2010-02-15  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7544637> Back out workaround for <rdar://problem/7438322>

        Rubber-stamped by Greg Bolsinga.

        * css/CSSStyleSelector.cpp:
        (WebCore::CSSStyleSelector::SelectorChecker::checkOneSelector):
        Backed out the workaround since the gcc-4.2 compiler was fixed
        in gcc-5659 for <rdar://problem/7511696>.  Both
        GreenGarnet10M2138 in Wildcat7B331 and YellowGarnet10M2224 in
        Apex8A201 have gcc-5659 now.

2010-02-15  David Kilzer  <ddkilzer@apple.com>

        BUILD FIX: WebCoreFrameView.h must be safe to use in Objective-C source code

        Fixes the following build failure after r205163:

            In file included from WebKit.framework/PrivateHeaders/WAKScrollView.h:12,
                             from UIWebDocumentView.m:68:
            WebCoreFrameView.h:48: error: expected ')' before 'WebCore'

        * page/mac/WebCoreFrameView.h: Made -_web_frame method available
        only when compiling Objective-C++ source.

2010-02-15  Chris Fleizach  <cfleizach@apple.com>

        Reviewed by Greg Bolsinga.

        <rdar://problem/7262285> AX: WAKScrollView does not return the right accessibility parent when it's a frame

        Need to expose a few accessibility methods that allow the WAKScrollView to return correct accessibility parent.
        The code exists in open source, but was not being utilized on the phone as it should have been.

        * accessibility/iphone/AccessibilityObjectWrapperIPhone.mm:
        (rendererForView):
        (-[AccessibilityObjectWrapper _accessibilityParentForSubview:]):
        * page/mac/WebCoreFrameView.h:

2010-02-15  Simon Fraser  <simon.fraser@apple.com>

        Fix build bustage.

        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::loadPlugin):
        (WebCore::FrameLoader::loadMediaPlayerProxyPlugin):

2010-02-12  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Greg Bolsinga.

        <rdar://problem/7608360> Fix <embed> to respect CSS transforms, clipping etc.

        Make the QuickTime plugin go down the same code path as <video> so it gets hosted
        in compositing layers within the content.

        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::loadPlugin):
        (WebCore::FrameLoader::loadMediaPlayerProxyPlugin):
        Replace the calls to rendererContentChanged() with calls to send a synthetic style change, which
        are the correct way to get the layer compositor to turn on compositing for the plugin.

        * plugins/PluginWidget.h:
        * plugins/mac/PluginWidgetMac.mm:
        (WebCore::PluginWidget::willProvidePluginLayer):
        Add iphone-only method that allows us to ask whether the widget will, at some point in future,
        vend us a layer.

        * rendering/RenderEmbeddedObject.cpp:
        (WebCore::RenderEmbeddedObject::allowsAcceleratedCompositing):
        Use the willProvidePluginLayer() method on iphone to determine when to go into compositing mode.

2010-02-12  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by David Carson.

        <rdar://problem/7625430> Crash toggling between Next/Previous on autofill form on on-screen keyboard

        The DOM ObjC calls -focus and -blur would all run on the web thread and
        return to the caller before the action had completed. This is not what
        we want at all.

        * dom/Element.idl: Remove IPhoneApplyOnWebThread property.

2010-02-11  David Kilzer  <ddkilzer@apple.com>

        Export WKViewCreateWithFrame() in WKView.h

        Reviewed by Greg Bolsinga.

        Part of: <rdar://problem/7477464> Sub-TLF: Integrate UIPDFView classes with WebKit

        * WebCore.iPhone.exp: Added _WKViewCreateWithFrame to export
        WKViewCreateWithFrame() for WKView.h.  This method is needed to
        implement UIWebPDFView in UIKit, and the WKView.h header is
        already exported as a private header.

2010-02-11  Aaron Golden  <agolden@apple.com>

        Reviewed by David Carson.

        <rdar://problem/7635689> Regression: Shadows are drawing in the wrong place

        Just removing a PLATFORM(IPHONE) work-around for <rdar://problem/7350677>,
        since that now causes us to draw the shadow in the wrong place.

        * platform/graphics/cg/GraphicsContextCG.cpp:
        (WebCore::GraphicsContext::GraphicsContext):

2010-02-11  Chris Fleizach  <cfleizach@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/7638820> AX: need to expose support for textMarkerForPoint

        This functionality exists in WebCore already. It just needs to be exposed to the iPhone AX wrapper.

        * accessibility/iphone/AccessibilityObjectWrapperIPhone.mm:
        (-[AccessibilityObjectWrapper textMarkerForPoint:]):

2010-02-10  Nicholas Jong  <njong@apple.com>

        Reviewed by Simon Fraser and Brad Moore.

        <rdar://problem/7622548> Text selection broken when text in multi column and paging scroll in UIWebView

        The collection of selection rects should be column-aware.

        * dom/Range.cpp:
        (WebCore::Range::collectSelectionRects):
        * rendering/RenderImage.cpp:
        (WebCore::RenderImage::collectSelectionRects):
        * rendering/RenderObject.cpp:
        (WebCore::RenderObject::collectSelectionRects):
        * rendering/RenderText.cpp:
        (WebCore::RenderText::collectSelectionRects):

2010-02-10  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by Cameron Zwarich.

        <rdar://problem/7601163> iPhone WebKit needs to handle multiple screens

        Remove now unused screenSize methods.

        * WebCore.iPhone.exp:
        * platform/iphone/WebCoreSystemInterfaceIPhone.mm:
        * platform/mac/WebCoreSystemInterface.h:

2010-02-10  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by Cameron Zwarich.

        <rdar://problem/7601163> iPhone WebKit needs to handle multiple screens

        * platform/iphone/PlatformScreenIPhone.mm:
        (WebCore::screenRect): Use new -[WAKWindow screenSize].
        (WebCore::screenAvailableRect): Use new -[WAKWindow availablScreenSize].
        * wak/WAKWindow.h: Add screenSize and availableScreenSize getters and setters.
        * wak/WAKWindow.mm: Ditto.
        (-[WAKWindow setScreenSize:]):
        (-[WAKWindow screenSize]):
        (-[WAKWindow setAvailableScreenSize:]):
        (-[WAKWindow availableScreenSize]): Called by PlatformScreenIPhone.
        * wak/WKWindow.h: Add screenSize and availableScreenSize members and add setters and getters.
        * wak/WKWindow.mm: Ditto.
        (WKWindowSetScreenSize):
        (WKWindowGetScreenSize):
        (WKWindowSetAvailableScreenSize):
        (WKWindowGetAvailableScreenSize):

2010-02-10  Eric Carlson  <eric.carlson@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/7452549> Allow entering and exiting fullscreen playback programatically

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::deliverNotification): Post fullscreen events when plug-in
            sends enter/exit fullscreen notification.
        (WebCore::HTMLMediaElement::enterFullscreen): The player handles fullscreen on the phone,
            not the chrome client.
        (WebCore::HTMLMediaElement::exitFullscreen): Ditto.

        * html/HTMLVideoElement.cpp:
        (WebCore::HTMLVideoElement::supportsFullscreen): The player handles fullscreen on the phone,
            not the chrome client.

        * platform/graphics/MediaPlayer.cpp:
        (WebCore::MediaPlayer::enterFullScreen): New.
        (WebCore::MediaPlayer::exitFullScreen): New.
        * platform/graphics/MediaPlayer.h:
        * platform/graphics/MediaPlayerPrivate.h:
        (WebCore::MediaPlayerPrivateInterface::enterFullScreen):
        (WebCore::MediaPlayerPrivateInterface::exitFullScreen):

        * platform/graphics/iphone/MediaPlayerPrivateIPhone.h:
        (WebCore::MediaPlayerPrivateiPhone::supportsFullscreen): New, declare fullscreen support.
        * platform/graphics/iphone/MediaPlayerPrivateIPhone.mm:
        (WebCore::MediaPlayerPrivateiPhone::enterFullScreen): New, call through to the plug-in.
        (WebCore::MediaPlayerPrivateiPhone::exitFullScreen): Ditto.
        * platform/graphics/mac/MediaPlayerProxy.h:

2010-02-10  Chris Fleizach  <cfleizach@apple.com>

        Reviewed by Greg Bolsinga.

        <rdar://problem/7631322> Web: VoiceOver no longer seeing anything in web areas

        Needed to update the iPhone specific accessibility code.

        * Configurations/WebCore.xcconfig:
        * WebCore.xcodeproj/project.pbxproj:
        * accessibility/AXObjectCache.cpp:
        (WebCore::AXObjectCache::selectedChildrenChanged):
        (WebCore::AXObjectCache::handleAriaRoleChanged):
        * accessibility/AXObjectCache.h:
        * accessibility/AccessibilityObject.h:
        * accessibility/iphone/AXObjectCacheIPhone.mm: Added.
        (WebCore::AXObjectCache::detachWrapper):
        (WebCore::AXObjectCache::attachWrapper):
        (WebCore::AXObjectCache::postPlatformNotification):
        (WebCore::AXObjectCache::handleFocusedUIElementChanged):
        (WebCore::AXObjectCache::handleScrolledToAnchor):
        * accessibility/iphone/AccessibilityObjectIPhone.mm:
        (WebCore::AccessibilityObject::accessibilityPlatformIncludesObject):
        * accessibility/mac/AXObjectCacheMac.mm:

2010-02-09  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/7631617> WebChromeClientIPhone::windowRect should not return GSMainScreenSize

        * wak/WAKWindow.h:
        * wak/WAKWindow.mm:
        (-[WAKWindow frame]): Added and implemented. WKWindowGetContentRect returns the result of WKWindowSetFrame.

2010-02-08  Eric Carlson  <eric.carlson@apple.com>

        <rdar://problem/7625500> Audio previews do not stop when pausing them via javascript

        Merge r134697 from Wildcat.

            Reviewed by David Carson.

            <rdar://problem/7562244> Audio previews do not stop when pausing them via javascript

            * html/HTMLMediaElement.cpp:
            (WebCore::HTMLMediaElement::load): Call userRequestsMediaLoading.
            (WebCore::HTMLMediaElement::play): Ditto.
            (WebCore::HTMLMediaElement::deliverNotification): Call userRequestsMediaLoading when on
                a MediaPlayerNotificationPlayPauseButtonPressed notification.
            (WebCore::HTMLMediaElement::userRequestsMediaLoading): New. Called when the user has
                triggered media loading and/or playback, clear the m_restrictions
                RequireUserGestureForRateChangeRestriction bit from  so playback can start and stop
                from scripts *not* triggered by a user gesture from now on.
            * html/HTMLMediaElement.h: Declare userRequestsMediaLoading.

2010-02-07  David Carson  <dacarson@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/7536812> Padding issues with custom webkit styled select elements

        Remove the !important keyword from the padding on SELECT elements. Asked around
        why it was originally added and the belief is that it was added as a demo fix.
        I have been running with this change for a couple of days and I have not seen
        any regressions.

        * css/html.css:

2010-02-05  David Kilzer  <ddkilzer@apple.com>

        Remove duplicate headers from the WebCore project

        Reviewed by Simon Fraser.  Almost-reviewed by Paul Knight.

        Fixes the following warnings during the build:

            Warning: Multiple build commands for output file MobileQuickLook.h
            Warning: Multiple build commands for output file WebEvent.h
            Warning: Multiple build commands for output file PageIPhoneTouch.h
            Warning: Multiple build commands for output file PluginWidget.h

        * WebCore.xcodeproj/project.pbxproj: Removed duplicate headers.

2010-02-05  Eric Carlson  <eric.carlson@apple.com>

        Reviewed by Simon Fraser.

        <rdar://problem/7597894> Audio and video source loaded through FrameLoader::loadPlugin() causing assertion/bad cast (CrashTracer: [USER] 1 crash in DumpRenderTree at WebCore: WebCore::toPlugInElement + 195)

        Restore PLUGIN_PROXY_FOR_VIDEO code lost in TOT merge.

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::scheduleLoad):
        (WebCore::HTMLMediaElement::loadResource):
        (WebCore::HTMLMediaElement::allocateMediaPlayerIfNecessary):
        (WebCore::HTMLMediaElement::setMediaPlayerProxy):
        (WebCore::HTMLMediaElement::finishParsingChildren):
        (WebCore::HTMLMediaElement::createMediaPlayerProxy):
        * html/HTMLMediaElement.h:
        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::loadMediaPlayerProxyPlugin):
        * rendering/RenderEmbeddedObject.cpp:
        (WebCore::RenderEmbeddedObject::updateWidget):
        * rendering/RenderVideo.cpp:
        (WebCore::RenderVideo::RenderVideo):
        (WebCore::RenderVideo::defaultSize):
        * rendering/RenderVideo.h:

2010-02-05  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/7618303> <embed>s are broken post-ToT merge; they never show up

        Remove the !PLATFORM(IPHONE) #ifdefs around setWidgetGeometry(), which I suspect
        were added because the boundsChanged variable was unused later. However, we need
        the call to setWidgetGeometry() to, er, set the widget geometry, otherwise the widget
        remains 0x0 and doesn't show up.

        * rendering/RenderWidget.cpp:
        (WebCore::RenderWidget::updateWidgetPosition):

2010-02-05  David Kilzer  <ddkilzer@apple.com>

        Fix definition of ENABLE_SHARED_WORKERS

        Rubber-stamped by Simon Fraser.

        * Configurations/FeatureDefines.xcconfig: Fixed
        ENABLE_SHARED_WORKERS definition to be a variable.

2010-02-03  Julio Gonzalez  <juliog@apple.com>

        <rdar://problem/7596396> Add Indic fonts to fallback list

        Reviewed by David Kilzer.

        * platform/graphics/mac/FontCacheMac.mm:
        (WebCore::FontCache::getFontDataForCharacters): Added test for
        Indic characters and use the correct fonts if found.

2010-02-03  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6973416> TLF: Merge with OS X WebKit (Safari Havoc)

        Merged ToT WebKit r45705-r53217 on trunk.

        12615 files changed, 743109 insertions(+), 175794 deletions(-)

2010-02-02  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Greg Bolsinga.

        <rdar://problem/5784256> The QTPlugin hosts its layer in root layer and won't display
        correctly when transforms are applied

        Add a getter for contentsLayerForMedia() that we can use to determine if we're changing the layer,
        and add some logic to ensure that we'll only update the media layer on the main thread, for iPhone.

        * platform/graphics/GraphicsLayer.h:
        (WebCore::GraphicsLayer::contentsLayerForMedia): Add a getter for the contents media layer.

        * platform/graphics/mac/GraphicsLayerCA.h: Override contentsLayerForMedia(), and add
        mediaLayerMustBeUpdatedOnMainThread().

        * platform/graphics/mac/GraphicsLayerCA.mm:
        (-[CALayer setBoundsWithValue:]):
        (-[CALayer setPositionWithValue:]): Obj-C methods that can be used with performSelector:...

        (WebCore::GraphicsLayerCA::contentsLayerForMedia): Getter for the contents media layer.
        (WebCore::GraphicsLayerCA::updateLayerPosition):
        (WebCore::GraphicsLayerCA::updateLayerSize):
        (WebCore::GraphicsLayerCA::updateContentsRect): Ensure that we update the bounds and position of
        the contents media layer on the main thread if we have to.

        (WebCore::GraphicsLayerCA::mediaLayerMustBeUpdatedOnMainThread): On iPhone, the only kind of
        contents media layer we have so far is for plugins, which must be updated on the main thread.

        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::updateGraphicsLayerConfiguration): Remove some old iphone-only
        code, and replace it with code merged from WebKit ToT.

2010-01-31  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/5784256> The QTPlugin hosts its layer in root layer and won't display
        correctly when transforms are applied

        Merge WebKit ToT r52872, r52875, r52885, r53139.

    2010-01-12  Adam Roben  <aroben@apple.com>

            Windows accelerated compositing build fix after r53110

            * plugins/PluginWidget.h:
            (WebCore::PluginWidget::platformLayer): Define platformLayer() for
            non-Mac platforms that have accelerated compositing turned on. It
            would probably be better to make PluginWidget not be used at all on
            non-Mac platforms, but this fix is much simpler.

    2010-01-06  Kevin Decker  <kdecker@apple.com>

            Reviewed by Simon Fraser

            Second step of:
            <rdar://problem/6398111> Integrate hardware layers with out-of-process plug-ins layer hosting mechanism

            * Plugins/Hosted/WebHostedNetscapePluginView.h: Expose the CALayer of the plugin by adding -pluginLayer method.
            * Plugins/Hosted/WebHostedNetscapePluginView.mm:
            (-[WebHostedNetscapePluginView pluginLayer]): Added.
            * Plugins/WebNetscapePluginView.h: Expose the CALayer of the plugin by adding -pluginLayer method.
            * Plugins/WebNetscapePluginView.mm:
            (-[WebNetscapePluginView pluginLayer]): Added.

    2010-01-06  Mark Rowe  <mrowe@apple.com>

            Fix the Mac build.

            * WebCore.base.exp: Export symbols WebKit would like to use.
            * plugins/PluginWidget.h:
            (WebCore::PluginWidget::PluginWidget): Redeclare a constructor.

    2010-01-06  Kevin Decker  <kdecker@apple.com>

            Reviewed by Eric Carlson.

            First step toward:
            <rdar://problem/6398111> Integrate hardware layers with out-of-process plug-ins layer hosting mechanism

            Small refactoring moving the PluginWidget class from WebKit to WebCore.
            * WebCore.xcodeproj/project.pbxproj: Added new source files and a "mac" group; exposes PluginWidget.h as a "Private" role
            * platform/Widget.h: Added isPluginWidget().
            (WebCore::Widget::isPluginWidget):
            * plugins/PluginWidget.h: Added.
            (WebCore::PluginWidget::isPluginWidget): Added as an interim solution until Mac plug-ins inheirt from PluginView.
            * plugins/mac/PluginWidgetMac.mm: Added.
            (WebCore::PluginWidget::invalidateRect): Added. Extracted from the old WebKit/FrameLoaderClientMac version of PluginWidget

2010-02-02  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7604438> Settings::maxParseDuration() can be set to -1 by WebPreferences, causing endless timer storms

        Reviewed by Pratik Solanki.

        * page/Page.h:
        (WebCore::Page::hasCustomHTMLTokenizerTimeDelay): Return true
        only if settings()->maxParseDuration() is not equal to -1.  This
        matches the non-iPhone version of the method, and (at worst)
        causes HTMLTokenizer::begin() to use a value of
        defaultTokenizerTimeDelay, which is the default for
        m_maxParseDuration in the Settings constructor anyway.
        (WebCore::Page::customHTMLTokenizerTimeDelay): Add an assertion
        that settings()->maxParseDuration() is never equal to -1 when
        this method is called.  This also matches the non-iPhone code.

2010-02-01  Brad Moore  <bradm@apple.com>

        Reviewed by Greg Bolsinga.

        <rdar://problem/7439327> truncation should not include a trailing space

        Making the iPhone version of the word clip function, which is used for truncation when
        drawing strings, discard trailing spaces.

        * platform/graphics/StringTruncator.cpp:
        (WebCore::rightClipToWordBuffer):

2010-02-01  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by David Kilzer.

        Use wkGetViewportScreenSize to determine the viewport screen size.

        * WebCore.iPhone.exp:
        * dom/Document.cpp:
        (WebCore::setViewportFeature):
        * platform/iphone/WebCoreSystemInterfaceIPhone.mm:
        * platform/mac/WebCoreSystemInterface.h:

2010-01-28  David Kilzer  <ddkilzer@apple.com>

        BUILD FIX: <rdar://problem/7588478> WebKit fails to build with http pipelining enabled in Apex

        Fixes the following link error in WebKit:

            Undefined symbols:
              "_wkSupportsHttpPipelining", referenced from:
                  _wkSupportsHttpPipelining$non_lazy_ptr in WebSystemInterface.o
                 (maybe you meant: _wkSupportsHttpPipelining$non_lazy_ptr)

        * DerivedSources.make: After including Availability.h in Platform.h,
        we must pass -miphoneos-version-min=$(IPHONEOS_DEPLOYMENT_TARGET)
        when checking the value of ENABLE_HTTP_PIPELINING.  Without this
        check, ENABLE_HTTP_PIPELINING would always be 0 and
        WebCore.HttpPipelining.exp was never included when generating
        WebKit.exp with the iPhoneOS SDK.  Note that this does not affect
        builds using the iPhoneSimulator SDK.

2010-01-28  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/5784256> The QTPlugin hosts its layer in root layer and won't display
        correctly when transforms are applied

        Merge WebKit ToT r53637

    2010-01-20  Simon Fraser  <simon.fraser@apple.com>

            Reviewed by Dave Hyatt.

            Hit testing on composited plugins is broken
            https://bugs.webkit.org/show_bug.cgi?id=33927
            <rdar://problem/7559069>

            RenderWidget::paint()'s strategy of moving widgets at paint time, using tx and ty, was flawed
            because tx,ty are not always root-relative, especially when painting into compositing layers.
            This would move widgets to the wrong location, which caused hit testing issues.

            Widgets are usually positioned by layout. The one time this was not true was scrolling fixed-position
            elements, so we now reposition widgets after scrolling too.

            There was a related problem, which was that widgets expect the graphics context to be set up for
            root-relative painting. To fix this, adjust the CTM and the paintRect when the widget's frameRect
            is in a different coordinate system to the painting offset.

            Test: plugins/mouse-events-fixedpos.html

            * page/FrameView.cpp:
            (WebCore::FrameView::scrollPositionChanged): Update widget positions, to handle widgets in fixed position
            elements, but only if we're not already inside of layout.

            * platform/graphics/GraphicsContext.h:
            (WebCore::GraphicsContext::translate): Add a translate() convenience method that takes a FloatSize.

            * platform/graphics/IntSize.h:
            (WebCore::IntSize::isZero): Add a convenience method for testing for a zero size.

            * platform/mac/WidgetMac.mm:
            (WebCore::Widget::paint): Adjust a comment.

            * rendering/RenderWidget.cpp:
            (WebCore::RenderWidget::paint): Detect when the widget's frame is in a different coordinate system
            to painting, and adjust the CTM and paintRect in that case.

2010-01-28  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/5784256> The QTPlugin hosts its layer in root layer and won't display
        correctly when transforms are applied

        Merge WebKit ToT r53110

    2010-01-11  Simon Fraser  <simon.fraser@apple.com>

            Reviewed by Kevin Decker.

            https://bugs.webkit.org/show_bug.cgi?id=33455
            Allows plugins to participate in accelerated compositing

            For plugins using the CoreAnimation rendering mode, host their CALayers in the
            accelerated compositing layer tree.

            This requires making normal flow RenderLayers for RenderEmbeddedObjects when they represent
            a plugin using this mode.

            * WebCore.base.exp: Export Node::setNeedsStyleRecalc() for use by WebKit.
            * WebCore.xcodeproj/project.pbxproj: Re-order files for sorting.

            * rendering/RenderEmbeddedObject.h:
            * rendering/RenderEmbeddedObject.cpp:
            (WebCore::RenderEmbeddedObject::requiresLayer): Make a layer if the plugin is using
            accelerated compositing mode.
            (WebCore::RenderEmbeddedObject::allowsAcceleratedCompositing): Asks whether the plugin has
            a layer, via PluginWidget.

            * rendering/RenderLayer.cpp:
            (WebCore::RenderLayer::shouldBeNormalFlowOnly):
            (WebCore::RenderLayer::isSelfPaintingLayer):
            RenderEmbeddedObjects should be normal flow layers, and self-painting layers.

            * rendering/RenderLayerBacking.cpp:
            (WebCore::RenderLayerBacking::updateGraphicsLayerConfiguration):
            Parent the plugin's layer in the GraphicsLayer when updating the layer configuration.

            * rendering/RenderLayerCompositor.h:
            * rendering/RenderLayerCompositor.cpp:
            (WebCore::RenderLayerCompositor::requiresCompositingLayer):
            (WebCore::RenderLayerCompositor::requiresCompositingForPlugin):
            RenderEmbeddedObjects that allow accelerated compositing trip accelerated compositing mode
            for the page.

2010-01-28  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/5784256> The QTPlugin hosts its layer in root layer and won't display
        correctly when transforms are applied

        Merge WebKit ToT r53034, since affects video background color too.

    2010-01-08  Simon Fraser  <simon.fraser@apple.com>

            Reviewed by Dan Bernstein.

            WebGL canvas paints background color twice
            https://bugs.webkit.org/show_bug.cgi?id=33361

            Clean up some logic around "directly composited" content: some images, video, and WebGL.

            We previously set the GraphicsLayer background color to the CSS background color
            in some cases where the box has no other decorations. However, the content
            layer's bounds do not correspond with the background box in many cases,
            and we could end up both painting the background color, and setting it on the layer.

            Simplify this logic to never use layer background colors, and thus skip allocating
            backing store only when the element has no visible box decorations.

            Tests: compositing/images/direct-image-background-color.html
                   compositing/reflections/simple-composited-reflections.html
                   compositing/video/video-background-color.html
                   compositing/webgl/webgl-background-color.html
                   compositing/webgl/webgl-blending.html

            * rendering/RenderLayerBacking.h:
            * rendering/RenderLayerBacking.cpp:
            (WebCore::is3DCanvas): Utility to determine if a RenderObject is a canvas with WebGL
            (WebCore::RenderLayerBacking::RenderLayerBacking): Remove m_hasDirectlyCompositedContent.
            (WebCore::RenderLayerBacking::updateGraphicsLayerConfiguration): canUseDirectCompositing()
            is renamed to isDirectlyCompositedImage() and only applies to images now.
            No longer set layer background color.
            (WebCore::RenderLayerBacking::updateGraphicsLayerGeometry): Just use hasPaintedContent()
            as the argument to setDrawsContent().
            (WebCore::hasBoxDecorationsOrBackground): Renamed.
            (WebCore::RenderLayerBacking::hasNonCompositingContent):
            (WebCore::hasBoxDecorationsOrBackgroundImage): Renamed from hasBoxDecorations().
            (WebCore::RenderLayerBacking::isSimpleContainerCompositingLayer): Moved test for
            hasOverflowControls() into hasNonCompositingContent() and removed the FIXME comment.
            (WebCore::RenderLayerBacking::containsPaintedContent): New method that decides
            if the layer (and its non-composited children) has any content that must be painted into backing store.
            (WebCore::RenderLayerBacking::isDirectlyCompositedImage): Renamed from canUseDirectCompositing()
            and reduced to only apply to images.
            (WebCore::RenderLayerBacking::rendererContentChanged): 3D canvas no longer falls under the
            canUseDirectCompositing() scope.

2010-01-28  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/5784256> The QTPlugin hosts its layer in root layer and won't display
        correctly when transforms are applied

        Merged WebKit ToT r53059

    2010-01-10  Simon Fraser  <simon.fraser@apple.com>

            Reviewed by Darin Adler.

            Allows plugins to participate in accelerated compositing
            https://bugs.webkit.org/show_bug.cgi?id=33455

            Part 1: rename setContentsToVideo() on GraphicsLayer to setContentsToMedia()
            to make it more general. Rename associated enums and methods similarly.

            * platform/graphics/GraphicsLayer.h:
            (WebCore::GraphicsLayer::setContentsToMedia):
            * platform/graphics/mac/GraphicsLayerCA.h:
            (WebCore::GraphicsLayerCA::):
            * platform/graphics/mac/GraphicsLayerCA.mm:
            (WebCore::GraphicsLayerCA::setContentsToMedia):
            (WebCore::GraphicsLayerCA::commitLayerChanges):
            (WebCore::GraphicsLayerCA::updateContentsMediaLayer):
            * platform/graphics/mac/MediaPlayerPrivateQTKit.mm:
            (WebCore::MediaPlayerPrivate::createQTMovieLayer):
            (WebCore::MediaPlayerPrivate::acceleratedRenderingStateChanged):

2010-01-28  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/5784256> The QTPlugin hosts its layer in root layer and won't display
        correctly when transforms are applied

        Merged WebKit ToT r52946

    2010-01-07  Simon Fraser  <simon.fraser@apple.com>

            Reviewed by Kevin Decker, Darin Adler.

            https://bugs.webkit.org/show_bug.cgi?id=33338
            Create a renderer for <object> and <embed>

            Add RenderEmbeddedObject, which derives from RenderPartObject, and is created for <object> and <embed>.
            Instances of RenderPartObject are now only allocated for iframes.

            Move object/embed-related code from RenderPartObject to RenderEmbeddedObject.

            * WebCore.xcodeproj/project.pbxproj:
            Add RenderEmbeddedObject.h/cpp

            * html/HTMLEmbedElement.cpp:
            (WebCore::HTMLEmbedElement::createRenderer): Create a RenderEmbeddedObject.
            (WebCore::HTMLEmbedElement::updateWidget): Use toRenderEmbeddedObject()

            * html/HTMLMediaElement.cpp:
            (WebCore::HTMLMediaElement::createRenderer): Make a RenderEmbeddedObject for the plugin-proxy case.
            (WebCore::HTMLMediaElement::finishParsingChildren): Use toRenderEmbeddedObject() in the plugin-proxy code.

            * html/HTMLObjectElement.cpp:
            (WebCore::HTMLObjectElement::createRenderer): Make a RenderEmbeddedObject
            (WebCore::HTMLObjectElement::updateWidget): Use toRenderEmbeddedObject()

            * page/FrameView.h:
            * page/FrameView.cpp:
            (WebCore::FrameView::addWidgetToUpdate):
            (WebCore::FrameView::removeWidgetToUpdate):
            (WebCore::FrameView::updateWidgets):
            Objects in the m_widgetUpdateSet are only ever RenderEmbeddedObjects.

            * rendering/RenderEmbeddedObject.cpp: Added.
            * rendering/RenderEmbeddedObject.h: Added.
            Most of the code moved from RenderPartObject.

            * rendering/RenderObject.h:
            (WebCore::RenderObject::isEmbeddedObject): New method.

            * rendering/RenderPart.cpp:
            (WebCore::RenderPart::RenderPart): Initialize m_hasFallbackContent here, rather than in the derived classes.
            * rendering/RenderPart.h: Comments.

            * rendering/RenderPartObject.h:
            * rendering/RenderPartObject.cpp:
            (WebCore::RenderPartObject::RenderPartObject): Clean up, code moved to base class, and removed object/embed-specific code.
            (WebCore::RenderPartObject::layout): Removed object/embed-specific code.

2010-01-28  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/5784256> The QTPlugin hosts its layer in root layer and won't display
        correctly when transforms are applied

        Merged ToT WebKit r52946.

    2010-01-07  Simon Fraser  <simon.fraser@apple.com>

            Reviewed by Darin Adler.

            https://bugs.webkit.org/show_bug.cgi?id=33338
            Create a renderer for <object> and <embed>

            First part of this change: renderPartObject->updateWidget() is a no-op for iframe elements,
            so we don't need to call it here, and can thus remove the attach() override entirely.

            * html/HTMLIFrameElement.cpp:
            * html/HTMLIFrameElement.h:

2010-01-26  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7578737> iPhone: Line breaking should not be allowed between a question mark and a subsequent quote mark

        Merged ToT WebKit r53839, r53872.

    2010-01-26  Dan Bernstein  <mitz@apple.com>

        Reviewed by Simon Fraser.

        Fixed an off-by-one error.

        * rendering/break_lines.cpp:
        (WebCore::shouldBreakAfter):

    2010-01-25  Dan Bernstein  <mitz@apple.com>

        Reviewed by Darin Adler.

        <rdar://problem/7573493> Error with line break inside ?&raquo; pair of characters.
        https://bugs.webkit.org/show_bug.cgi?id=17475

        Test: fast/text/line-break-after-question-mark.html

        Instead of unconditionally allowing lines to break after a question mark, which was intended
        to mimic Internet Explorer, apply the Unicode line breaking behavior after a question mark,
        with one exception in the ASCII range to match IE, namely not allowing a line break between
        a question mark and a vertical line.

        * rendering/break_lines.cpp:
        (WebCore::shouldBreakAfter): Added a next character parameter. Changed to consult a table
        for the question mark case in order to keep it fast and not require a text break iterator in
        the ASCII case.
        (WebCore::nextBreakablePosition): Pass the next character to shouldBreakAfter.

2010-01-26  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7580983> StorageAreaImpl::setItem() doesn't compute new total usage correctly (causing false quota exceptions)

        Reviewed by Paul Knight.

        * storage/StorageAreaImpl.cpp:
        (WebCore::StorageAreaImpl::setItem): Corrected the computation
        when the value changed but not the key.  The bug caused the
        quota limit to be hit too early since the full size of the old
        value was not subtracted correctly.

2010-01-25  David Kilzer  <ddkilzer@apple.com>

        Follow-up fix for:  <rdar://problem/7561053> Folder title should reflect ellipsizing it will receive in home screen

        Reviewed by Ken Kocienda.

        * wak/WAKStringDrawing.mm:
        (-[NSString _web_stringForWidth:withFont:ellipsis:letterSpacing:includeEmoji:]):
        Make sure to initialize wordRoundingEnabled before it's used in
        shouldDisableWordRounding() by calling
        _web_initWordRoundingEnabled().

2010-01-25  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7559133> SWB: gcc-5659 on Apex8A172 fails to build WebCore_Sim-643

        Reviewed by Simon Fraser.

        Test: compositing/color-matching/image-color-matching.html

        Follow-up: <rdar://problem/7576192> Verify CG vs. CA color space matching after fixing 7559133

        * platform/graphics/mac/GraphicsLayerCA.mm:
        (WebCore::GraphicsLayerCA::setContentsToImage): The color space
        matching workaround for iPhone OS never should have compiled, so
        once the compiler bug was fixed, this workaround needed to be
        removed to unblock a new compiler submission.  Radar 7576192
        covers testing the very subtle color space matching between CG
        and CA on iPhone OS hardware.

2010-01-22  Eric Carlson  <eric.carlson@apple.com>

        Reviewed by Simon Fraser.

        <rdar://problem/7392622> Next Movie control is stopping playback

        While we don't allow the playback or media loading to begin automatically,
        respect the 'autoplay' attribute once the movie starts playing so it is
        possible to change the element url and have the new movie continue to play
        once it loads.

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::HTMLMediaElement): Initialize m_userStartedPlayback.
        (WebCore::HTMLMediaElement::autoplay): Return false until m_userStartedPlayback
            is true, then return the state of the attribute.
        (WebCore::HTMLMediaElement::load): Set m_userStartedPlayback to true.
        (WebCore::HTMLMediaElement::play): Ditto
        * html/HTMLMediaElement.h:

2010-01-21  Eric Carlson  <eric.carlson@apple.com>

        Reviewed by Simon Fraser.

        <rdar://problem/7523993> Controls flash when 'autoplay' attribute changed

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::attributeChanged): Only call m_player->setControls when
        the 'controls' attribute changes.

2010-01-22  David Carson  <dacarson@apple.com>

        Reviewed by Greg Bolsinga

        <rdar://problem/7521072> Elements with CSS of white-space: nowrap not moving to next line

        Code was added to address an issue with hyphens being consumed incorrectly and content wrapping:
            <rdar://problem/4908507> Some characters dropped from SMS message
        Much has changed in the line breaking code since the original problem. I tried to reproduce the
        the problem the aforementioned radar describes, and I don't see the problem anymore.
        The code change breaks content that has the nowrap attribute.

        * rendering/bidi.cpp:
        (WebCore::RenderBlock::findNextLineBreak):

2010-01-22  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7569596> iPhone: Zoom applied to embedded SVG incorrectly (33988)

        Merged ToT WebKit r53684.

    2010-01-22  Dan Bernstein  <mitz@apple.com>

        Reviewed by Darin Adler.

        <rdar://problem/7568696> Zoom applied to embedded SVG incorrectly
        https://bugs.webkit.org/show_bug.cgi?id=33988

        Test: svg/custom/text-zoom.xhtml

        * svg/SVGSVGElement.cpp:
        (WebCore::SVGSVGElement::SVGSVGElement): Initialize m_scale.
        (WebCore::SVGSVGElement::currentScale): If this is the document element,
        return the frame’s zoom factor. Otherwise, return m_scale.
        (WebCore::SVGSVGElement::setCurrentScale): If this is the document element,
        set the frame’s zoom factor. Otherwise, set m_scale and mark for layout.
        * svg/SVGSVGElement.h: Added m_scale member.

2010-01-15  Aaron Golden  <agolden@apple.com>

        Reviewed by Cameron Zwarich.

        <rdar://problem/7536833> REG: Find in page causes images to be incorrectly highlighted when selecting text in Safari

        Adding implementations to RenderThemeIPhone for selection background colors (returning clear color from both).  This
        way we don't get the default RenderTheme implementations.

        * rendering/RenderThemeIPhone.cpp:
        (WebCore::RenderThemeIPhone::platformActiveSelectionBackgroundColor):
        (WebCore::RenderThemeIPhone::platformInactiveSelectionBackgroundColor):
        * rendering/RenderThemeIPhone.h:

2010-01-15  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by Cameron Zwarich.

        Implement a custom -[WebEvent description] for debugging purposes.

        * platform/iphone/WebEvent.mm:
        (-[WebEvent _typeDescription]):
        (-[WebEvent _modiferFlagsDescription]):
        (-[WebEvent _characterSetDescription]):
        (-[WebEvent _touchLocationsDescription:]):
        (-[WebEvent _touchIdentifiersDescription]):
        (-[WebEvent _eventDescription]):
        (-[WebEvent description]):

2010-01-14  Simon Fraser  <simon.fraser@apple.com>

    Merge WebKit TOT r53235, r53237.

    2010-01-13  Simon Fraser  <simon.fraser@apple.com>

            Reviewed by Dan Bernstein.

            Fix shadow drawing to do the correct computations using the base coordinate space
            https://bugs.webkit.org/show_bug.cgi?id=33629

            Shadows draw using the CGContext base CTM, so we need to convert the shadow offet
            and size from user CTM into into base CTM coordinates, via the matix obtained from wkGetUserToBaseCTM().

            Test: compositing/shadows/shadow-drawing.html

            * platform/graphics/cg/GraphicsContextCG.cpp:
            (WebCore::GraphicsContext::setPlatformShadow):

2010-01-14  Simon Fraser  <simon.fraser@apple.com>

    Merge WebKit TOT r53211.

    2010-01-13  Simon Fraser  <simon.fraser@apple.com>

            Reviewed by Dan Bernstein.

            Fix shadow drawing to do the correct computations using the base coordinate space
            https://bugs.webkit.org/show_bug.cgi?id=33629

            Step 1: do some renames in setPlatformShadow():
                size -> offset
                width -> xOffset
                height -> yOffset

        * platform/graphics/cg/GraphicsContextCG.cpp:
        (WebCore::GraphicsContext::GraphicsContext):

2010-01-14  Simon Fraser  <simon.fraser@apple.com>

        Add WebKit TOT r53222 changes from WebCoreSystemInterface.mm to WebCoreSystemInterfaceIPhone.mm

    2010-01-13  Simon Fraser  <simon.fraser@apple.com>

            Reviewed by Darin Adler.

            <rdar://problem/7532544>

            Expose new method on WebKitSystemInterface, WKGetUserToBaseCTM(), which will
            be used for a shadow drawing fix.

            * WebCore.base.exp:
            * platform/iphone/WebCoreSystemInterfaceIPhone.mm:
            * platform/mac/WebCoreSystemInterface.h:
            * platform/mac/WebCoreSystemInterface.mm:

2010-01-13  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by David Carson.

        <rdar://problem/7535608> REGR: ASSERT in WKContentObservation.cpp:66 when runnning MusicStore

        The change made for <rdar://problem/7454597> switched it so that NSURLConnectionIPhone wasn't
        always used on iPhone. Since the request in that Radar was simply to not call
        CFURLConnectionSetMaximumBufferSize(), do not call that in NSURLConnectionIPhone when
        __usesCacheFlag is YES. This way all the tools in NSURLConnectionIPhone are still used,
        and this ASSERT does not fire.

        * platform/network/iphone/NSURLConnectionIPhone.m:
        (-[NSURLConnectionIPhone start]): Do not call CFURLConnectionSetMaximumBufferSize() if __usesCacheFlag.
        * platform/network/mac/ResourceHandleMac.mm:
        (WebCore::ResourceHandle::start): Revert the change made in r127457.

2010-01-13  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by Pratik Solanki.

        NSURLConnectionIPhone.m is only built on iPhone so it does not require PLATFORM(IPHONE) checks.

        * platform/network/iphone/NSURLConnectionIPhone.m:
        (-[NSURLConnectionIPhone start]):

2010-01-13  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by David Kilzer.

        Removing WKObservingIndeterminateContentChanges() since it is not used.

        * wak/WKContentObservation.cpp:
        (WebThreadGetObservedContentModifiers):
        * wak/WKContentObservation.h:

2010-01-12  Alice Neels  <aneels@apple.com>

        Reviewed by Dave Kilzer.

        <rdar://problem/7454226> Autocorrect is correcting the wrong part of the string in web forms
        In order to find text positions correction in Web forms, we need to get the visiblePosition
        from the renderer. The WebCore changes are limited to exporting symbols that need to be used
        in WebKit.

        * WebCore.iPhone.exp:
        * WebCore.xcodeproj/project.pbxproj:

2010-01-13  Brad Moore  <bradm@apple.com>

        Reviewed by Greg Bolsinga.

        Adding a missing implementation of structuralComplexityContribution to cover non-HTML elements.

        <rdar://problem/7537749> structuralComplexityContribution unimplemented for DOMElement

        * bindings/objc/DOMUIKitExtensions.mm: added implementation for DOMElement

2010-01-12  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7526107> iPhone: Font fallback kills SVG kerning (33400)

        Merged ToT WebKit r52931, r52933 and r53039.

        NOTE: Changes to ATSUI-related files were not merged.

    2010-01-09  Dan Bernstein  <mitz@apple.com>

        Reviewed by Nikolas Zimmermann.

        <rdar://problem/7525778> Font fallback kills SVG kerning
        https://bugs.webkit.org/show_bug.cgi?id=33400

        Test: platform/mac/fast/text/sticky-typesetting-features.html

        Cache font attributes separately for different typesetting features.

        * platform/graphics/SimpleFontData.h: Replaced single-element caches
        with maps.
        * platform/graphics/mac/ComplexTextControllerATSUI.cpp:
        (WebCore::disableLigatures): Added an ATSUStyle parameter.
        (WebCore::initializeATSUStyle): Look up the ATSUStyle in the map and
        initialize if necessary. Return the ATSUStyle.
        (WebCore::ComplexTextController::collectComplexTextRunsForCharactersATSUI):
        Use the ATSUStyle returned from initializeATSUStyle().
        * platform/graphics/mac/SimpleFontDataMac.mm:
        (WebCore::SimpleFontData::platformInit):
        (WebCore::SimpleFontData::platformDestroy): Destroy the ATSUStyles in the
        map.
        (WebCore::SimpleFontData::getCFStringAttributes): Look up the attributes
        dictionary in the map and initialize if necessary.

    2010-01-07  Dan Bernstein  <mitz@apple.com>

        Build fix

        * WebCore.xcodeproj/project.pbxproj: Made TypesettingFeatures.h private.

    2010-01-07  Dan Bernstein  <mitz@apple.com>

        Reviewed by Sam Weinig.

        Added Font::typesettingFeatures() and deployed it

        No change in funcitonality

        * WebCore.xcodeproj/project.pbxproj: Added TypesettingFeatures.h.
        * platform/graphics/Font.h:
        (WebCore::Font::typesettingFeatures): Added. Determines the typesetting
            features from the text redndering mode.
        * platform/graphics/FontFastPath.cpp:
        (WebCore::Font::canUseGlyphCache): Use typesettingFeatures().
        * platform/graphics/SimpleFontData.h:
        * platform/graphics/TypesettingFeatures.h: Added.
        * platform/graphics/mac/ComplexTextControllerATSUI.cpp:
        (WebCore::disableLigatures): Take TypesettingFeatures instead of
            TextRenderingMode.
        (WebCore::initializeATSUStyle): Ditto.
        (WebCore::ComplexTextController::collectComplexTextRunsForCharactersATSUI):
            Use typesettingFeatures().
        * platform/graphics/mac/ComplexTextControllerCoreText.cpp:
        (WebCore::ComplexTextController::collectComplexTextRunsForCharactersCoreText):
            Ditto.
        * platform/graphics/mac/SimpleFontDataMac.mm:
        (WebCore::SimpleFontData::getCFStringAttributes): Take
            TypesettingFeatures instead of TextRenderingMode.
        * rendering/RenderBlockLineLayout.cpp:
        (WebCore::RenderBlock::findNextLineBreak): Use TypesettingFeatures().

2010-01-12  David Kilzer  <ddkilzer@apple.com>  &  Steven Susanto  <ssusanto@apple.com>

        <rdar://problem/7474865> Safari crashes or fails to download images from MobileMe Gallery

        Reviewed by Simon Fraser.

        In the MobileMe gallery, CachedImage objects were getting added
        to Document::m_documentImages, but not removed, until the limit
        was reached.  This then caused CachedImage objects to be created
        with NULL m_image variables, which then caused MobileSafari to
        crash.  (This makes me wonder how well the image-limiting code
        has actually been tested, and whether it should just be
        removed some day.  See <rdar://problem/7529024>.)

        The fix is to make sure that when <iframe> and <frame> elements
        are detached from a document, their CachedImage resources are
        removed from the top document, thereby making
        Document::totalImageDataSize() closer to being correct.  We
        accomplish this by using m_documentImages to track CachedImage
        objects used in subdocuments while the top document still uses
        m_documentImages to track CachedImage objects in all frames.

        * dom/Document.cpp:
        (WebCore::Document::detach): Added call to
        updateTotalImageDataSizeBeforeDetaching() to catch cases missed
        by the change to HTMLFrameOwnerElement::willRemove().
        (WebCore::Document::updateTotalImageDataSizeBeforeDetaching):
        Added.  This is where the bug is fixed by removing CachedImage
        objects in the subdocument's m_documentImages from the top
        document.
        (WebCore::Document::incrementTotalImageDataSize): For top
        documents, do what we did before.  For subdocuments, update
        m_documentImages and call incrementTotalImageDataSize() on our
        top document.  Removed the assert.
        (WebCore::Document::decrementTotalImageDataSize): For top
        documents, do what we did before.  For subdocuments, update
        m_documentImages and call decrementTotalImageDataSize() on our
        top document.  Removed the assert.
        * dom/Document.h:
        (WebCore::Document::updateTotalImageDataSizeBeforeDetaching):
        Added declaration.
        * html/HTMLFrameOwnerElement.cpp:
        (WebCore::HTMLFrameOwnerElement::willRemove): Call
        Document::willRemove() here since it's never called on a
        Document in an <iframe> or <frame> element.
        * loader/ImageLoader.cpp:
        (WebCore::ImageLoader::~ImageLoader): Call
        Document::decrementTotalImageDataSize() and
        Document::incrementTotalImageDataSize() on the current document,
        not the top document.
        (WebCore::ImageLoader::setImage): Ditto.
        (WebCore::ImageLoader::updateFromElement): Ditto.
        (WebCore::ImageLoader::notifyFinished): Ditto.

2010-01-12  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7387208> Enable http pipelining in WebKit

        Reviewed by David Carson.

        This patch adds support for HTTP pipelining, but it's off by
        default at runtime.  To enable it, a user default must be set:

            defaults write com.apple.mobilesafari WebKitEnableHTTPPipelining 1

        This is only supported on Apex or later.

        * DerivedSources.make: Updated to include
        WebCore.HttpPipelining.exp in generatd WebCore.exp when
        ENABLE(HTTP_PIPELINING) is true.
        * WebCore.HttpPipelining.exp: Added.
        * WebCore.xcodeproj/project.pbxproj: Added loaderIPhone.mm to
        the project.
        * loader/iphone/loaderIPhone.mm: Added.
        (WebCore::isHttpPipeliningEnabled): Returns true based on user
        default setting.  Only checked once per process invocation.
        * loader/loader.cpp:
        (WebCore::Loader::Loader): Set maxRequestsInFlightPerHost based
        on whether HTTP pipelining is enabled.
        (WebCore::Loader::determinePriority): Remove const keyword for
        ENABLE(HTTP_PIPELINING) since the method changed to be static.
        (WebCore::Loader::load): When HTTP pipelining is enabled, serve
        all requests, not just higher priority requests.
        (WebCore::Loader::Host::servePendingRequests): Set the priority
        of the request based on the cached resource.
        * loader/loader.h:
        (WebCore::Loader::Priority): Changed enum to be zero-based to
        match up with CFNetwork SPI.
        (WebCore::Loader::determinePriority): Changed from private
        instance method to protected static method when
        ENABLE(HTTP_PIPELINING) is true.
        (WebCore::isHttpPipeliningEnabled): Added.
        * platform/iphone/WebCoreSystemInterfaceIPhone.mm:
        (wkSupportsHttpPipelining): Added declaration.
        * platform/mac/WebCoreSystemInterface.h:
        (wkSupportsHttpPipelining): Added declaration.
        * platform/network/ResourceRequestBase.cpp:
        (WebCore::ResourceRequestBase::adopt): Set priority when copying
        data.
        (WebCore::ResourceRequestBase::copyData): Ditto.
        (WebCore::equalIgnoringHeaderFields): Compare priority values.
        * platform/network/ResourceRequestBase.h:
        (WebCore::ResourceRequestBase::setPriority): Added.
        (WebCore::ResourceRequestBase::priority): Added.
        (WebCore::ResourceRequestBase::ResourceRequestBase): Set default
        priority.
        * platform/network/mac/ResourceRequestMac.mm:
        (WebCore::ResourceRequest::doUpdatePlatformRequest): Call
        wkSupportsHttpPipelining() to set the request priority if http
        pipelining is enabled.

2010-01-11  Cameron Zwarich  <zwarich@apple.com>

        <rdar://problem/7520943> Shadows are reversed

        Reviewed by David Carson.

        * platform/graphics/cg/GraphicsContextCG.cpp:
        (WebCore::GraphicsContext::GraphicsContext): CA fixed a bug requiring all y coordinates
        for shadows to be inverted compared to their old values in code linked against the 3.2
        SDK or later. The same fix was submitted to Barolo, so there will be a desktop change to
        merge (and possibly adapt, since they do not do all of their drawing into layers) in the
        future, but for now just invert the y coordinate.

2010-01-11  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7526991> Document::incrementTotalImageDataSize() overestimates memory usage

        Reviewed by Simon Fraser.

        One CachedImage object is created for each unique image URL used
        in a document, even if one instance of an image is loaded in the
        main document and another is loaded in a frame.  This means that
        Document::m_totalImageDataSize should only be incremented the
        first time a new CachedImage is seen.  Currently it is
        incremented every time, which is the bug.

        * dom/Document.cpp:
        (WebCore::Document::removedLastRef): For Debug builds, do some
        sanity checking to verify that a total of all the CachedImage
        objects in m_documentImages is equal to m_totalImageDataSize.
        This will catch bugs when m_totalImageDataSize was not updated
        properly during the life of the document.  In order to prevent
        changes in the lifetime of CachedImage objects (some of which
        are destroyed before the Document is torn down), a second data
        structure, DocumentImageSizeMap m_documentImageSizes, was
        created for Debug builds.
        (WebCore::Document::incrementTotalImageDataSize): Only increment
        m_totalImageDataSize the first time a CachedImage is added to
        m_documentImages to match the decrement behavior in
        decrementTotalImageDataSize().  This is the bug fix.  Also add
        new the CachedImage objects to m_documentImageSizes for Debug
        builds.
        (WebCore::Document::decrementTotalImageDataSize): For Debug
        builds, update m_documentImageSizes when the last reference to a
        CachedImage will be removed from m_documentImages.
        * dom/Document.h: Added a new DocumentImageSizeMap type for
        Debug builds and declare m_documentImageSizes.  See notes in
        Document::removedLastRef() above for how this is used.

2010-01-11  David Kilzer  <ddkilzer@apple.com>

        Add a typedef for HashCountedSet<CachedImage *>

        Reviewed by Simon Fraser.

        * dom/Document.cpp:
        (WebCore::Document::decrementTotalImageDataSize): Used typedef.
        * dom/Document.h: Added DocumentImageSet typedef and used for
        m_documentImages.

2010-01-09  David Kilzer  <ddkilzer@apple.com>

        Methods for tracking image memory use should only be called from the main document

        Reviewed by Simon Fraser.

        * dom/Document.cpp:
        (WebCore::Document::incrementTotalImageDataSize): Added an
        assertion that this method is only called from the top document.
        (WebCore::Document::decrementTotalImageDataSize): Ditto.
        (WebCore::Document::totalImageDataSize): Ditto.
        (WebCore::Document::incrementAnimatedImageDataCount): Ditto.
        (WebCore::Document::animatedImageDataCount): Ditto.

2010-01-08  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Greg Bolsinga.

        <rdar://problem/7520890> 100% Reproducible crash at mapmyride.com

        Revert RenderPartObject part of change in r127295, which had an incorrect implementation of
        requiresLayer(). The correct code will be merged in from WebKit TOT later.

        * rendering/RenderPartObject.cpp:
        * rendering/RenderPartObject.h:

2010-01-07  David Kilzer  <ddkilzer@apple.com>

        Revert "<rdar://problem/7450285> iPhone: ZDI-CAN-632 DOCUMENT_POSITION_DISCONNECTED dangling pointer issue"

        This reverts commit r127550.  ToT WebKit found a ~25% regression
        in their PLT.

        * dom/Document.cpp:
        (WebCore::Document::updateLayout):
        * editing/SelectionController.cpp:
        (WebCore::SelectionController::SelectionController):
        (WebCore::SelectionController::setSelection):
        * editing/SelectionController.h:
        * page/Frame.cpp:
        (WebCore::Frame::setCaretVisible):
        (WebCore::Frame::selectionLayoutChanged):
        (WebCore::Frame::caretBlinkTimerFired):
        (WebCore::Frame::selectionBounds):
        * page/FrameView.cpp:
        (WebCore::FrameView::needsLayout):

2010-01-06  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7450285> iPhone: ZDI-CAN-632 DOCUMENT_POSITION_DISCONNECTED dangling pointer issue

        Merged ToT WebKit r52756.

    2010-01-04  Darin Adler  <darin@apple.com>

        Reviewed by Dan Bernstein.

        Reentrancy problem with selection in some edge cases.
        https://bugs.webkit.org/show_bug.cgi?id=32842
        rdar://problem/7449974

        Test: fast/forms/selection-layout-reentry-strange-case.html

        Move the selection display update process done in the
        selectionLayoutChanged function into the layout timer
        instead of doing it immediately when selection changes occur.

        * dom/Document.cpp:
        (WebCore::Document::updateLayout): Changed this to use the
        definition of needsLayout from FrameView rather than rolling
        its own.

        * editing/SelectionController.cpp:
        (WebCore::SelectionController::SelectionController):
        Initialize m_needsDisplayUpdate to false.
        (WebCore::SelectionController::setSelection): Call
        the new setNeedsDisplayUpdate function instead of the old
        badly named Frame::selectionLayoutChanged function.
        (WebCore::SelectionController::setNeedsDisplayUpdate):
        Set m_needsDisplayUpdate. If it is just becoming true, then
        call FrameView::scheduleRelayout.

        * editing/SelectionController.h: Added setNeedsDisplayUpdate,
        needsDisplayUpdate, and m_needsDisplayUpdate.

        * page/Frame.cpp:
        (WebCore::Frame::setCaretVisible): Call setNeedsDisplayUpdate.
        (WebCore::Frame::selectionLayoutChanged): Call
        setNeedsDisplayUpdate to set it to false, since this is the
        function that performs "selection display update". Later I want
        to rename this function. Also added a global reentrancy check
        since that's the easiest way I could think of to prevent infinite
        recursion in the case where recomputeCaretRect ends up triggering
        a layout. As a side effect, fixed theoretical problems in
        TEXT_CARET builds by improving the ifdef.
        (WebCore::Frame::caretBlinkTimerFired): Loosen assertions a
        bit. Later we might want to decouple caret rect from caret state
        a bit more and add these assertions back.
        (WebCore::Frame::selectionBounds): Call Document::updateLayout.
        This function is for external clients and they do not currently
        do anything to make sure layout is up to date.

        * page/FrameView.cpp:
        (WebCore::FrameView::needsLayout): Add a new clause, since
        we need a call to layout if needsDisplayUpdate is true.

2010-01-06  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7516838> iPhone: With text-rendering: optimizelegibility, sometimes lines run too long (32794)

        Merged ToT WebKit r52889.

    2010-01-06  Dan Bernstein  <mitz@apple.com>

        Reviewed by Sam Weinig.

        <rdar://problem/7488126> With text-rendering: optimizelegibility, sometimes lines run too long
        https://bugs.webkit.org/show_bug.cgi?id=32794

        Test: platform/mac/fast/text/line-breaking-with-kerning.html

        * rendering/RenderBlockLineLayout.cpp:
        (WebCore::RenderBlock::findNextLineBreak): When kerning is enabled, include
        the trailing space when measuring a word, then subtract its width. This
        accounts for kerning between the last glyph of the word and the following space.

2010-01-06  David Carson  <dacarson@apple.com>

        <rdar://problem/7454597> [NSURLConnectionIPhone start] should not set CFURLConnection max buffer size to 0 when foundation caching is enabled

        Reviewed by David Kilzer

        When Foundation caching is enabled, we don't need to alter Foundation's buffering
        semantics, so we can use the NSURLConnection class directly.

        * platform/network/mac/ResourceHandleMac.mm:
        (WebCore::ResourceHandle::start):

2010-01-06  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7512958> iPhone: Support CSS for Text Kerning and ligature

        Merged ToT WebKit r48989.

    2009-10-01  Beth Dakin  <bdakin@apple.com>

        Reviewed by Dave Hyatt.

        Fix for <rdar://problem/6934421> Support CSS for Text Kerning and
        ligature
        -and corresponding-
        https://bugs.webkit.org/show_bug.cgi?id=6136

        This patch makes the SVG CSS property text-rendering work with any
        HTML, much like it does in Firefox. It accepts four possible input
        values: auto, optimizeSpeed, optimizeLegibility, and
        geometricPrecision. Right now, in this implementation, here is what
        those values correspond to:

        auto = optimizeSpeed = what we normally when the value's not set
        optimizeLegibility = geometricPrecision = ligatures + kerning

        Add new file TextRenderingMode.h to the project files.
        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.xcodeproj/project.pbxproj:

        CSS support for the new CSSPropertyTextRendering
        * css/CSSComputedStyleDeclaration.cpp:
        (WebCore::):
        (WebCore::CSSComputedStyleDeclaration::getPropertyCSSValue):
        * css/CSSParser.cpp:
        (WebCore::CSSParser::parseValue):
        * css/CSSPrimitiveValueMappings.h:
        (WebCore::CSSPrimitiveValue::CSSPrimitiveValue):
        (WebCore::CSSPrimitiveValue::operator TextRenderingMode):
        * css/CSSPropertyNames.in:
        * css/CSSStyleSelector.cpp:
        (WebCore::CSSStyleSelector::applyProperty):
        * css/CSSValueKeywords.in:

        All the old SVG CSS support for this property can go away. When
        it's used in SVG, it will just fall into the normal HTML case.
        * css/SVGCSSComputedStyleDeclaration.cpp:
        (WebCore::CSSComputedStyleDeclaration::getSVGPropertyCSSValue):
        * css/SVGCSSParser.cpp:
        (WebCore::CSSParser::parseSVGValue):
        * css/SVGCSSPropertyNames.in:
        * css/SVGCSSStyleSelector.cpp:
        (WebCore::CSSStyleSelector::applySVGProperty):
        * css/SVGCSSValueKeywords.in:

        FontDescription stores the m_textRendering bit.
        * platform/graphics/FontDescription.h:
        (WebCore::FontDescription::FontDescription):
        (WebCore::FontDescription::textRenderingMode):
        (WebCore::FontDescription::setTextRenderingMode):
        (WebCore::FontDescription::operator==):

        We want to fall into the complex text rendering code path if
        kerning and ligatures have been enabled with this property.
        * platform/graphics/FontFastPath.cpp:
        (WebCore::Font::canUseGlyphCache):

        Now takes a TextRenderingMode as a parameter.
        * platform/graphics/SimpleFontData.h:

        New header for the enum.
        * platform/graphics/TextRenderingMode.h: Added.
        (WebCore::):

        getCFStringAttributes() now takes a TextRenderingMode as an
        attribute.
        * platform/graphics/mac/CoreTextController.cpp:
        (WebCore::CoreTextController::collectCoreTextRunsForCharacters):

        Enable kerning and ligatures whenever the TextRenderingMode is
        OptimizeLegibility or GeometricPrecision
        * platform/graphics/mac/FontMacATSUI.mm:
        (WebCore::disableLigatures):
        (WebCore::initializeATSUStyle):
        (WebCore::ATSULayoutParameters::initialize):
        * platform/graphics/mac/SimpleFontDataMac.mm:
        (WebCore::SimpleFontData::getCFStringAttributes):

        More SVG CSS stuff that isn't needed anymore since SVG will use the
        new HTML CSS implementation.
        * rendering/style/SVGRenderStyle.h:
        (WebCore::SVGRenderStyle::InheritedFlags::operator==):
        (WebCore::SVGRenderStyle::setBitDefaults):
        * rendering/style/SVGRenderStyleDefs.h:

2010-01-06  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7507103> Use QLTypeCopyBestMimeTypeForFileNameAndMimeType() in -[NSURLResponse(WebCoreURLResponse) adjustMIMETypeIfNecessary]

        Reviewed by David Carson.

        * platform/network/iphone/MobileQuickLook.h:
        (QLTypeCopyBestMimeTypeForFileNameAndMimeType): Added
        declaration.
        * platform/network/iphone/MobileQuickLook.mm:
        (WebCore::QLTypeCopyBestMimeTypeForFileNameAndMimeType): Added
        soft link and C++ method to call it.
        * platform/network/iphone/WebCoreURLResponseIPhone.mm:
        (-[NSURLResponse(WebCoreURLResponse) adjustMIMETypeIfNecessary]):
        Switched from using QLTypeCopyBestMimeTypeForURLAndMimeType() to
        QLTypeCopyBestMimeTypeForFileNameAndMimeType() so we can pass in
        the suggested file name from -[NSURLResponse suggestedFilename].

2010-01-06  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by David Kilzer.

        The QTPlugin hosts its layer in root layer and won't display correctly when transforms are applied
        <rdar://problem/5784256>

        WebCore changes to allow for plug-ins to be hosted in layers in the web content,
        so that they support CSS transforms, clipping, and layering with other web content.

        New code is not active until called by UIKit, so no behavioral changes yet.

        * WebCore.iPhone.exp:
        Export FrameView::graphicsLayerForPlatformWidget().

        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::loadPlugin):
        (WebCore::FrameLoader::loadMediaPlayerProxyPlugin):
        When we've created the plug-in for video elements, we need to inform the
        RenderLayerCompositor that it should now turn on compositing mode for
        that renderer's RenderLayer.

        * page/FrameView.h:
        * page/FrameView.cpp:
        (WebCore::FrameView::graphicsLayerForPlatformWidget):
        Add method to allow a client to ask for the GraphicsLayer
        that corresponds to a plug-in, if any. Exported via WebKit SPI.

        * platform/graphics/iphone/MediaPlayerPrivateIPhone.h:
        * platform/graphics/iphone/MediaPlayerPrivateIPhone.mm:
        (WebCore::MediaPlayerPrivateiPhone::setMediaPlayerProxy):
        (WebCore::MediaPlayerPrivateiPhone::supportsAcceleratedRendering):
        (WebCore::MediaPlayerPrivateiPhone::acceleratedRenderingStateChanged):
        Implement methods related to hardware-accelerated video. supportsAcceleratedRendering()
        will always return true on iPhone, and acceleratedRenderingStateChanged() has nothing to
        do, because we use a plug-in for the video element on the phone, and parent the
        plug-in's layer externally.

        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::requiresCompositingForVideo):
        Video is implemented via a RenderPartObject, not a RenderVideo, so say that we want
        compositing if this renderer corresponds with a video element.

        * rendering/RenderPartObject.h:
        (WebCore::RenderPartObject::requiresLayer):
        We need plug-ins to get RenderLayers so that we can turn on hardware acceleration for them.

2010-01-05  Patrick Piemonte  <piemonte@apple.com>

        <rdar://problem/7451167> Wildcat: Revert back to using CoreLocation API instance method locationServicesEnabled

        Reviewed by David Kilzer.

        * platform/iphone/GeolocationServiceCoreLocation.mm:
        (-[GeoLocationManager start]): changed from using locationServicesEnabled class method to instance property

2010-01-04  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7487059> Need to replace Arial Unicode as the font fallback

        Reviewed by Paul Knight.

        * platform/graphics/mac/FontCacheMac.mm:
        (WebCore::FontCache::getLastResortFallbackFont): Switched to the
        new fallback font.

2009-12-23  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7489483> iPhone: Use of free()d line boxes in mixed LTR/RTL text (32749)

        Merged ToT WebKit r52527.

    2009-12-23  Dan Bernstein  <mitz@apple.com>

        Reviewed by Darin Adler.

        <rdar://problem/7487164> First line of text cannot be selected
        https://bugs.webkit.org/show_bug.cgi?id=32749

        Test: fast/text/remove-zero-length-run.html

        * rendering/RenderText.cpp:
        (WebCore::RenderText::positionLineBox): Changed code that assumed that if a box was being
            removed, it was the only box in the RenderText. Instead, correctly preserve the list of
            text boxes.
        (WebCore::RenderText::checkConsistency): Updated for earlier rename.

2009-12-23  David Kilzer  <ddkilzer@apple.com>

        Use static_cast<>() operator instead of C-style casts

        * page/iphone/FrameIPhone.mm:
        (WebCore::Frame::imageFromRect):

2009-12-22  Aaron Golden  <agolden@apple.com>

        Rubber-stamped by Cameron Zwarich.

        <rdar://problem/7489182> Selected text is white

        Bringing back r125840 since there's a fix for the
        regression it caused.

        * WebCore.iPhone.exp:
        * page/Frame.cpp:
        (WebCore::Frame::selectionLayoutChanged):
        * page/Frame.h:
        * page/iphone/FrameIPhone.mm:
        (WebCore::Frame::imageFromRect):
        (WebCore::Frame::selectionImage):

2009-12-22  Aaron Golden  <agolden@apple.com>

        Reviewed by Cameron Zwarich.

        <rdar://problem/7489182> Selected text is white

        Preventing InlineTextBox::paint from changing the text
        drawing style due to selection on iPhone.

        * rendering/InlineTextBox.cpp:
        (WebCore::InlineTextBox::paint):

2009-12-22  Cameron Zwarich  <zwarich@apple.com>

        <rdar://problem/7489182> Selected text is white

        Rubber-stamped by David Kilzer.

        Roll out r125840.

        * WebCore.iPhone.exp:
        * page/Frame.cpp:
        (WebCore::Frame::selectionLayoutChanged):
        * page/Frame.h:
        * page/iphone/FrameIPhone.mm:

2009-12-21  David Carson  <dacarson@apple.com>

        Reviewed by Cameron Zwarich

        <rdar://problem/7457517> lala.com looks terrible on the k48 (iFrame)

        When an iFrame is positioned off the screen then don't resize it.
        As this decision needs to happen during layout, changed the method name from
        shouldResizeFrameToContent() to suggestResizeFrameToContent() to better
        capture it's purpose.

        * rendering/RenderPartObject.cpp:
        (WebCore::RenderPartObject::calcWidth):
        (WebCore::RenderPartObject::calcHeight):
        (WebCore::RenderPartObject::suggestResizeFrameToContent):
        (WebCore::RenderPartObject::layout):
        * rendering/RenderPartObject.h:

2009-12-21  Steven Susanto  <ssusanto@apple.com>

        Reviewed by David Kilzer.

        Part 2 For: <rdar://problem/7161437> window.screen.availHeight returns same value for browser and fullscreen web apps

        Added a check for null widget.
        Fixed where the previous checkin caused <rdar://problem/7490104> CrashTracer: [USER] 2 crashes in DumpRenderTree at WebCore: WebCore::Widget::getOuterView const + 21

2009-12-21  Steven Susanto  <ssusanto@apple.com>

        Part 1 For: <rdar://problem/7161437> window.screen.availHeight returns same value for browser and fullscreen web apps

        Reviewed by David Carson, David Kilzer.

        Changed behaviour for window.screen.availHeight/availWidth to return the visibleRect on the widget.
        Note: Will return window.screen.height/width instead of 0 when the widget's window is null.

        Test: included in LayoutTests/fast/dom/Window/window-resize.html

        *  platform/iphone/PlatformScreenIPhone.mm:

2009-12-19  David Kilzer  <ddkilzer@apple.com>

        Part 2 of 2: <rdar://problem/7424823> -[DOMHTMLImageElement(WebDOMHTMLImageElementOperationsPrivate) createNSDataRepresentation:] should be renamed to -dataRepresentation:

        Reviewed by Cameron Zwarich.

        * bindings/objc/DOMUIKitExtensions.h:
        (-[DOMHTMLImageElement createNSDataRepresentation:]): Removed.
        * bindings/objc/DOMUIKitExtensions.mm:
        (-[DOMHTMLImageElement createNSDataRepresentation:]): Removed.

2009-12-19  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7383371> iPhone: Would like to be able to specify the number of visible lines when using -webkit-line-clamp

        Merged ToT WebKit r50998.

        * rendering/style/RenderStyle.cpp:
        (WebCore::RenderStyle::hashForTextAutosizing): Updated to use
        the value of the line clamp property.

    2009-11-14  Adele Peterson  <adele@apple.com>

        Reviewed by Dan Bernstein.

        Fix for <rdar://problem/6946165> Would like to be able to specify the number of visible lines when using -webkit-line-clamp

        Test: fast/overflow/line-clamp.html

        * css/CSSComputedStyleDeclaration.cpp: (WebCore::CSSComputedStyleDeclaration::getPropertyCSSValue): Updated to handle different types of values.
        * css/CSSParser.cpp: (WebCore::CSSParser::parseValue): ditto.
        * css/CSSStyleSelector.cpp: (WebCore::CSSStyleSelector::applyProperty): ditto.

        * rendering/RenderFlexibleBox.cpp: (WebCore::RenderFlexibleBox::layoutVerticalBox):
        Use the line count value if available.  Otherwise, convert the percentage to the line count, as we did before.  Also,
        if there is anchor as the last child box, still allow adding the ellipsis.

        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::scrollByRecursively): Call isNone on the LineClampValue to see if the line-clamp property has been set.
        (WebCore::RenderLayer::scrollRectToVisible): ditto.

        * WebCore.xcodeproj/project.pbxproj: Added LineClampValue.h
        * rendering/style/LineClampValue.h: Added.
        (WebCore::LineClampValue::LineClampValue):
        (WebCore::LineClampValue::value):
        (WebCore::LineClampValue::isPercentage):
        (WebCore::LineClampValue::isNone):
        (WebCore::LineClampValue::operator==):
        (WebCore::LineClampValue::operator!=):
        * rendering/style/RenderStyleConstants.h: (WebCore::): Define ELineClampType enum for percentage or line count.

        * rendering/style/RenderStyle.h: Use LineClampValue.
        (WebCore::InheritedFlags::lineClamp):
        (WebCore::InheritedFlags::setLineClamp):
        (WebCore::InheritedFlags::initialLineClamp):
        * rendering/style/StyleRareNonInheritedData.h:

2009-12-19  David Kilzer  <ddkilzer@apple.com>

        Use static_cast<>() operator instead of C-style casts

        * page/iphone/FrameIPhone.mm:
        (WebCore::Frame::imageFromRect):

2009-12-18  Aaron Golden  <agolden@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/4407034> TLF: Find on a page in Safari

        Frame::selectionLayoutChanged() was disabled on PLATFORM(IPHONE), which prevented selectionBounds() from ever
        having a useful result.  I'm enabling selectionLayoutChanged.

        I'm also adding a PLATFORM(IPHONE) implementation of Frame::selectionImage and Frame::imageFromRect.

        * WebCore.iPhone.exp:
        * page/Frame.cpp:
        (WebCore::Frame::selectionLayoutChanged):
        * page/Frame.h:
        * page/iphone/FrameIPhone.mm:
        (WebCore::Frame::imageFromRect):
        (WebCore::Frame::selectionImage):

2009-12-17  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7002948> Backout workaround for bogus -Wmissing-prototypes warnings on SnowLeopard

        Reviewed by Greg Bolsinga.

        * Configurations/Base.xcconfig: Re-enable -Wmissing-prototypes
        for hardware builds.

2009-12-17  Chris Fleizach  <cfleizach@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/7478884> AX: return the URL for elements to use when no title is available

        Test: platform/iphone-simulator/accessibility/url-test.html

        * accessibility/iphone/AccessibilityObjectWrapperIPhone.mm:
        (-[AccessibilityObjectWrapper accessibilityURL]):

2009-12-16  Chris Fleizach  <cfleizach@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/7477092> AX: Text fields need to return their content in axValue

        Test: platform/iphone-simulator/accessibility/textfield-in-axvalue.html

        * accessibility/iphone/AccessibilityObjectWrapperIPhone.mm:
        (-[AccessibilityObjectWrapper accessibilityLabel]):
        (-[AccessibilityObjectWrapper accessibilityValue]):

2009-12-16  Cameron Zwarich  <zwarich@apple.com>

        <rdar://problem/7282386> -webkit-text-stroke is always white on iPhone

        Reviewed by Greg Bolsinga.

        Remove code from the initial import of WebKit from CVS to SVN. WebKit hasn't drawn
        selected text on iPhone for quite some time now, so it is fine to delete this.

        * rendering/InlineTextBox.cpp:
        (WebCore::paintTextWithShadows):
        (WebCore::InlineTextBox::paint):

2009-12-15  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7354278> iPhone: ZDI-CAN-596: Apple Webkit Blink Event Dangling Pointer Vulnerability (32567)

        Merged ToT WebKit r52073.

    2009-12-13  Dan Bernstein  <mitz@apple.com>

        Reviewed by Simon Fraser.

        <rdar://problem/7341364> Crash at HTMLParser::popOneBlockCommon() after
        handling misnested residual style tags

        Test: fast/parser/residual-style-close-ref-clone.html

        * html/HTMLParser.cpp:
        (WebCore::HTMLParser::handleResidualStyleCloseTagAcrossBlocks): Gave the
        block stack a strong reference to the cloned residual style element.

2009-12-11  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7430845> iPhone: Repro crash on ancestry.com (also CrashTracer) at com.apple.WebCore • WebCore::Document::detach + 238 (32293)

        Merged ToT WebKit r51877.

    2009-12-08  Brady Eidson  <beidson@apple.com>

        Reviewed by Darin Adler.

        Navigating to a cached page can result in accessing a destroyed HTMLInputElement.
        <rdar://problem/6856662> and https://webkit.org/b/32293

        Test: fast/loader/input-element-page-cache-crash.html

        * html/HTMLInputElement.cpp:
        (WebCore::HTMLInputElement::parseMappedAttribute): Make sure to unregister for the activation
          callback after the new m_autocomplete setting has been stored so the unregistration actually
          takes place.

2009-12-11  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7422005> iPhone: Check that a CSS format() argument is of a valid type. (31815)

        Merged ToT WebKit r51727.

    2009-12-05  Adam Langley  <agl@google.com>

        Reviewed by Adam Barth.

        Check that a CSS format() argument is of a valid type.

        https://bugs.webkit.org/show_bug.cgi?id=31815
        http://code.google.com/p/chromium/issues/detail?id=28582

        Test: fast/css/url-format-non-string.html

        * css/CSSParser.cpp:
        (WebCore::CSSParser::parseFontFaceSrc):

2009-12-11  David Kilzer  <ddkilzer@apple.com>

        Part 3 of 3:  <rdar://problem/7418362> iPhone: Crash in XMLTokenizer::popCurrentNode if window.close() is called during parsing (31576)

        Merged ToT WebKit r51962.

    2009-12-10  Oliver Hunt  <oliver@apple.com>

        Reviewed by Alexey Proskuryakov.

        Crash in XMLTokenizer::popCurrentNode if window.close() is called during parsing
        https://bugs.webkit.org/show_bug.cgi?id=31576

        Add a RefCounted wrapper object around xmlParserCtxtPtr so we can
        maintain it's lifetime more effectively.

        Test: fast/parser/xhtml-close-while-parsing.xhtml

        * dom/XMLTokenizer.cpp:
        (WebCore::XMLTokenizer::popCurrentNode):
        * dom/XMLTokenizer.h:
        (WebCore::XMLParserContext::context):
        (WebCore::XMLParserContext::XMLParserContext):
        (WebCore::XMLTokenizer::context):
        * dom/XMLTokenizerLibxml2.cpp:
        (WebCore::XMLParserContext::createStringParser):
        (WebCore::XMLParserContext::createMemoryParser):
        (WebCore::XMLParserContext::~XMLParserContext):
        (WebCore::XMLTokenizer::~XMLTokenizer):
        (WebCore::XMLTokenizer::doWrite):
        (WebCore::XMLTokenizer::initializeParserContext):
        (WebCore::XMLTokenizer::doEnd):
        (WebCore::XMLTokenizer::lineNumber):
        (WebCore::XMLTokenizer::columnNumber):
        (WebCore::XMLTokenizer::stopParsing):
        (WebCore::parseXMLDocumentFragment):
        (WebCore::parseAttributes):

2009-12-11  David Kilzer  <ddkilzer@apple.com>

        Part 2 of 3:  <rdar://problem/7418362> iPhone: Crash in XMLTokenizer::popCurrentNode if window.close() is called during parsing (31576)

        Merged ToT WebKit r50110.

    2009-10-26  Alexey Proskuryakov  <ap@apple.com>

        Reviewed by Darin Adler.

        https://bugs.webkit.org/show_bug.cgi?id=30049
        <rdar://problem/7286002> Manipulating DOM from a script while parsing XHTML can cause a crash

        Tests: fast/parser/remove-current-node-parent-x-2.xhtml
               fast/parser/remove-current-node-parent-x.xhtml

        * dom/XMLTokenizer.h: Store the whole stack of parent nodes - element.parentNode() is
        unreliable after DOM manipulation.

        * dom/XMLTokenizer.cpp:
        (WebCore::XMLTokenizer::pushCurrentNode): Push the new node onto stack.
        (WebCore::XMLTokenizer::popCurrentNode): This is now called instead of setCurrentNode when
        exiting a node.
        (WebCore::XMLTokenizer::clearCurrentNodeStack): We're aborting; or just done parsing. This
        replaces setCurrentNode(0).
        (WebCore::XMLTokenizer::enterText): Call pushCurrentNode().
        (WebCore::XMLTokenizer::exitText): Call popCurrentNode(), removing a long-standing FIXME
        (not sure if it was ever practical though - how can a parent become null while adding text?)

        * dom/XMLTokenizerLibxml2.cpp:
        (WebCore::XMLTokenizer::~XMLTokenizer): Call clearCurrentNodeStack().
        (WebCore::XMLTokenizer::startElementNs): Call pushCurrentNode().
        (WebCore::XMLTokenizer::endElementNs): Call popCurrentNode() to safely get to a parent. Also
        added a check fo script element still being in document - Firefox parses those that aren't,
        but doesn't execute them.

        * dom/XMLTokenizerQt.cpp:
        (WebCore::XMLTokenizer::~XMLTokenizer):
        (WebCore::XMLTokenizer::parseStartElement):
        (WebCore::XMLTokenizer::parseEndElement):
        Match libxml2 version changes.

2009-12-11  David Kilzer  <ddkilzer@apple.com>

        Part 1 of 3:  <rdar://problem/7418362> iPhone: Crash in XMLTokenizer::popCurrentNode if window.close() is called during parsing (31576)

        Merged ToT WebKit r50017.

    2009-10-23  Alexey Proskuryakov  <ap@apple.com>

        Reviewed by Sam Weinig.

        https://bugs.webkit.org/show_bug.cgi?id=30734
        Remove XMLTokenizer::m_currentNodeIsReferenced

        No change in behavior, no tests.

        * dom/XMLTokenizer.cpp:
        (WebCore::XMLTokenizer::setCurrentNode):
        * dom/XMLTokenizer.h:
        Don't store a boolean for the current node being the document - we can always check for that.

        * dom/XMLTokenizerLibxml2.cpp:
        (WebCore::XMLTokenizer::XMLTokenizer):
        * dom/XMLTokenizerQt.cpp:
        (WebCore::XMLTokenizer::XMLTokenizer):
        A fragment passed to XMLTokenizer is never null - in fact, the first thing we do is dereference
        it unconditionally, and then begin checking it for null, as if it could help.

2009-12-10  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7266331> Merge WebKit engine changes from Safari Bronco

        Merged ToT WebKit r46833-r50479 on the safari-4-branch to iPhone WebKit.

2009-12-10  David Kilzer  <ddkilzer@apple.com>

        Merge ToT WebKit r47509.

        * platform/network/iphone/WebCoreURLResponseIPhone.mm:
        (WebCore::swizzleMIMETypeMethodIfNecessary): Removed.
        (WebCore::sniffMIMEType): Removed.
        (-[NSURLResponse(WebCoreURLResponse) _webcore_reportedMIMEType]): Removed.
        (-[NSURLResponse(WebCoreURLResponse) adjustMIMETypeIfNecessary]): Added.
        This method calls -_setMIMEType: if we determine that the MIME
        type needs to be updated.
        * platform/network/mac/ResourceHandleMac.mm:
        (-[WebCoreResourceHandleAsDelegate connection:didReceiveResponse:]):
        Removed shouldUseQuickLookForMIMEType() check within the
        USE(MOBILE_QUICK_LOOK) block since the MIME type is adjusted
        above using -[WebURLResponse(WebCoreURLResponse) adjustMIMETypeIfNecessary].

2009-12-08  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7455441> iPhone accessibility tests crash after r123686 since they don't check for already being on the WebThread

        Reviewed by David Carson.

        Check that we're not on the WebThread before trying to take the
        WebThread lock.

        * accessibility/iphone/AccessibilityObjectWrapperIPhone.mm:
        (-[AccessibilityObjectWrapper accessibilityHitTest:]):
        (-[AccessibilityObjectWrapper accessibilityElementCount]):
        (-[AccessibilityObjectWrapper accessibilityElementAtIndex:]):
        (-[AccessibilityObjectWrapper indexOfAccessibilityElement:]):
        (-[AccessibilityObjectWrapper accessibilityLanguage]):
        (-[AccessibilityObjectWrapper accessibilityTraits]):
        (-[AccessibilityObjectWrapper isAccessibilityElement]):
        (-[AccessibilityObjectWrapper accessibilityLabel]):
        (-[AccessibilityObjectWrapper accessibilityValue]):
        (-[AccessibilityObjectWrapper accessibilityFrame]):
        (-[AccessibilityObjectWrapper accessibilityContainer]):
        (-[AccessibilityObjectWrapper accessibilityFocusedUIElement]):
        (-[AccessibilityObjectWrapper _accessibilityWebDocumentView]):
        (-[AccessibilityObjectWrapper _accessibilityNextElementsWithCount:]):
        (-[AccessibilityObjectWrapper _accessibilityPreviousElementsWithCount:]):
        (-[AccessibilityObjectWrapper arrayOfTextForTextMarkers:]):
        (-[AccessibilityObjectWrapper positionForTextMarker:]):
        (-[AccessibilityObjectWrapper textMarkerRange]):
        (-[AccessibilityObjectWrapper elementTextRange]):
        (-[AccessibilityObjectWrapper accessibilityObjectForTextMarker:]):
        (-[AccessibilityObjectWrapper textMarkerForPosition:]):
        (-[AccessibilityObjectWrapper stringForRange:]):
        (-[AccessibilityObjectWrapper elementsForRange:]):
        (-[AccessibilityObjectWrapper selectedTextMarker]):
        (-[AccessibilityObjectWrapper lineEndMarkerForMarker:]):
        (-[AccessibilityObjectWrapper lineStartMarkerForMarker:]):
        (-[AccessibilityObjectWrapper nextMarkerForMarker:]):
        (-[AccessibilityObjectWrapper previousMarkerForMarker:]):
        (-[AccessibilityObjectWrapper frameForTextMarkers:]):

2009-12-08  Chris Fleizach  <cfleizach@apple.com>

        Reviewed by Greg Bolsinga.

        <rdar://problem/7454460> UIAccessibility is causing layouts in WebCore without taking the WebCoreThread lock

        Make sure that before each method that can call be called from the outside world, we obtain the WebCoreThread lock.

        * accessibility/iphone/AccessibilityObjectWrapperIPhone.mm:
        (-[AccessibilityObjectWrapper accessibilityHitTest:]):
        (-[AccessibilityObjectWrapper accessibilityElementCount]):
        (-[AccessibilityObjectWrapper accessibilityElementAtIndex:]):
        (-[AccessibilityObjectWrapper indexOfAccessibilityElement:]):
        (-[AccessibilityObjectWrapper accessibilityLanguage]):
        (-[AccessibilityObjectWrapper accessibilityTraits]):
        (-[AccessibilityObjectWrapper isAccessibilityElement]):
        (-[AccessibilityObjectWrapper accessibilityLabel]):
        (-[AccessibilityObjectWrapper accessibilityValue]):
        (-[AccessibilityObjectWrapper accessibilityFrame]):
        (-[AccessibilityObjectWrapper accessibilityContainer]):
        (-[AccessibilityObjectWrapper accessibilityFocusedUIElement]):
        (-[AccessibilityObjectWrapper _accessibilityWebDocumentView]):
        (-[AccessibilityObjectWrapper _accessibilityNextElementsWithCount:]):
        (-[AccessibilityObjectWrapper _accessibilityPreviousElementsWithCount:]):
        (-[AccessibilityObjectWrapper arrayOfTextForTextMarkers:]):
        (-[AccessibilityObjectWrapper positionForTextMarker:]):
        (-[AccessibilityObjectWrapper textMarkerRange]):
        (-[AccessibilityObjectWrapper elementTextRange]):
        (-[AccessibilityObjectWrapper accessibilityObjectForTextMarker:]):
        (-[AccessibilityObjectWrapper textMarkerForPosition:]):
        (-[AccessibilityObjectWrapper stringForRange:]):
        (-[AccessibilityObjectWrapper elementsForRange:]):
        (-[AccessibilityObjectWrapper selectedTextMarker]):
        (-[AccessibilityObjectWrapper lineEndMarkerForMarker:]):
        (-[AccessibilityObjectWrapper lineStartMarkerForMarker:]):
        (-[AccessibilityObjectWrapper nextMarkerForMarker:]):
        (-[AccessibilityObjectWrapper previousMarkerForMarker:]):
        (-[AccessibilityObjectWrapper frameForTextMarkers:]):

2009-12-06  Cameron Zwarich  <zwarich@apple.com>

        <rdar://problem/7402965> Sometimes, navigating news.google.com links doesn't work

        Reviewed by David Kilzer.

        The fix for <rdar://problem/7385573> added a new case of touch warping in
        qualifyingNodeAtViewportLocation(), but it did not update the bestPoint local
        variable that gets assigned to the location out-variable and passed back to
        UIKit.

        * page/iphone/FrameIPhone.mm:
        (WebCore::Frame::qualifyingNodeAtViewportLocation): Update bestPoint if a
        different hit-test result is chosen.

2009-12-04  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7437170> Build WebCore with LLVM for Apex

        Reviewed by Greg Bolsinga.

        * Configurations/Base.xcconfig: Use llvm-gcc-4.2 when building
        for the iPhone OS 4.0 Internal SDK.

2009-12-03  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7261785> CrashTracer: [USER] 1 crash in DumpRenderTree at WebCore - WebCore::QualifiedName::QualifiedName + 37

        Reviewed by Cameron Zwarich.

        When compiling CSSStyleSelector.cpp for the iPhone Simulator on
        Snow Leopard, a gcc-4.2 optimization bug causes NULL to be
        passed on the stack instead of the address of WebCore::nullAtom.
        This subsequently causes QualifiedName::QualifiedName() to crash
        when it tries to dereference the NULL pointer.  To work around
        the bug, we declare a local copy of WebCore::nullAtom (which is
        logically equal to the original) and use that instead.

        * css/CSSStyleSelector.cpp:
        (WebCore::CSSStyleSelector::applyProperty): Use a local
        stack-based AtomicString representing nullAtom to work around a
        gcc optimization bug.

2009-12-02  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Greg Bolsinga.

        <rdar://problem/7438677> Frame::qualifyingNodeAtViewportLocation() ignores CSS transforms

        Fix Frame::renderRectForPoint() and ancestorRespondingToClickEvents() to use transform-aware methods,
        so that tapping correctly finds links, inputs etc in CSS-transformed content.

        * page/iphone/FrameIPhone.mm:
        (WebCore::Frame::renderRectForPoint):
        (WebCore::ancestorRespondingToClickEvents):

2009-12-02  Aaron Golden  <agolden@apple.com>

        Reviewed by David Carson.

        <rdar://problem/7406684> [K48m] Cambio Websheet App doesn't load images or style sheets
        <rdar://problem/7005049> Sub-TLF: The Web sheet should use kCFStreamPropertyBoundInterfaceIdentifier

        Adding plumbing to allow the WebView's resource load delegate to set custom properties on
        NSURLConnections initialized in WebKit.

        * loader/EmptyClients.h:
        (WebCore::EmptyFrameLoaderClient::connectionProperties):
        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::connectionProperties):
        * loader/FrameLoader.h:
        * loader/FrameLoaderClient.h:
        * loader/ResourceLoader.cpp:
        (WebCore::ResourceLoader::connectionProperties):
        * loader/ResourceLoader.h:
        (WebCore::ResourceLoader::connectionProperties):
        * platform/network/ResourceHandleClient.h:
        (WebCore::ResourceHandleClient::connectionProperties):
        * platform/network/iphone/NSURLConnectionIPhone.h:
        * platform/network/iphone/NSURLConnectionIPhone.m:
        (-[NSURLConnectionIPhone _initWithRequest:delegate:usesCache:maxContentLength:startImmediately:connectionProperties:]):
        (-[NSURLConnectionIPhone _clearIVars]):
        (-[NSURLConnectionIPhone start]):
        * platform/network/mac/ResourceHandleMac.mm:
        (WebCore::ResourceHandle::start):

2009-11-30  Chris Fleizach  <cfleizach@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/7431509> need a way to make a static text object through ARIA.

        There needs to be a way to create an accessible static text object through an ARIA role.
        This will allow various clients to create aggregated objects.

        I also changed static text objects to vend their text through accessibilityLabel instead
        of accessibilityValue, which is more accurate.

        A consequence of this change is that we need to make sure hit testing will not return
        an element within an element that's not supposed to have children.

        Test: platform/iphone-simulator/accessibility/text-role.html

        * accessibility/AccessibilityRenderObject.cpp:
        (WebCore::AccessibilityRenderObject::isDescendantOfBarrenParent):
        (WebCore::AccessibilityRenderObject::accessibilityIsIgnored):
        (WebCore::AccessibilityRenderObject::text):
        (WebCore::RoleEntry::):
        (WebCore::AccessibilityRenderObject::canHaveChildren):
        * accessibility/AccessibilityRenderObject.h:
        * accessibility/iphone/AccessibilityObjectWrapperIPhone.mm:
        (-[AccessibilityObjectWrapper determineIsAccessibilityElement]):
        (-[AccessibilityObjectWrapper accessibilityLabel]):
        (-[AccessibilityObjectWrapper accessibilityValue]):

2009-11-30  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/7421366> WC269: mobile safari crash while running automated wifi QL (WebCore::Page::clearTouchEventListeners() )

        Need to check the result of Frame::page() before proceedding, as is done elsewhere in this class.

        * dom/Document.cpp:
        (WebCore::Document::removeAllEventListeners):
        (WebCore::Document::clear):

2009-11-30  David Kilzer  <ddkilzer@apple.com>

        Part 1.5 of 2: <rdar://problem/7424823> -[DOMHTMLImageElement(WebDOMHTMLImageElementOperationsPrivate) createNSDataRepresentation:] should be renamed to -dataRepresentation:

        Reviewed by Greg Bolsinga.

        Switch to a new method that returns an autoreleased object.

        * bindings/objc/DOMUIKitExtensions.h: Updated for renamed
        methods.
        * bindings/objc/DOMUIKitExtensions.mm:
        (-[DOMHTMLImageElement createNSDataRepresentation:]): Updated
        for renamed methods.
        (-[DOMHTMLImageElement dataRepresentation:]): Renamed from
        -newNSDataRepresentation: and changed to return autoreleased
        object.
        (-[DOMHTMLImageElement newNSDataRepresentation:]): Renamed to
        -dataRepresentation:.

2009-11-30  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/7282096> hasEnoughMemoryFor() should return something reasonble in the sim

        Change hasEnoughMemoryFor() to use the resident size of the current process when running
        in the simulator, with an arbitrary 128M threshold.

        * platform/iphone/SystemMemoryIPhone.cpp:
        (WebCore::hasEnoughMemoryFor):

2009-11-26  David Kilzer  <ddkilzer@apple.com>

        Part 1 of 2: <rdar://problem/7424823> -[DOMHTMLImageElement(WebDOMHTMLImageElementOperationsPrivate) createNSDataRepresentation:] should be renamed to -newNSDataRepresentation:

        Reviewed by Cameron Zwarich.

        * bindings/objc/DOMUIKitExtensions.h:
        (-[DOMHTMLImageElement createNSDataRepresentation:]): Added a
        comment about being deprecated.
        (-[DOMHTMLImageElement newNSDataRepresentation:]): Added.
        * bindings/objc/DOMUIKitExtensions.mm:
        (-[DOMHTMLImageElement createNSDataRepresentation:]): Changed to
        call -newNSDataRepresentation:.
        (-[DOMHTMLImageElement newNSDataRepresentation:]): Renamed from
        -createNSDataRepresentation:.

2009-11-23  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by Simon Fraser.

        <rdar://problem/6752922> Optimize eventRegionsChanged (or have WebKit just maintain event regions internally)

        Track touch event nodes & resulting rects as they are created. This data is now
        kept in Page instead of Document because there is one Page per WebView. The rects
        are maintained behind a new lock. Code that need the rects will acquire the new
        lock and a copy of the rects.

        * WebCore.Touch.exp: Add new export for WebKit.
        * WebCore.xcodeproj/project.pbxproj: Add PageIPhoneTouch.cpp/h.
        * dom/Document.cpp: Touch Event data is now tracked in Page.
        (WebCore::Document::Document):
        (WebCore::Document::removeAllEventListeners):
        (WebCore::Document::clear):
        * dom/DocumentIPhone.cpp: Ditto.
        (WebCore::Document::createTouchList):
        * dom/DocumentIPhone.h: Ditto.
        * dom/Node.cpp: Ditto.
        (WebCore::Node::addEventListener):
        (WebCore::Node::removeEventListener):
        (WebCore::Node::removeAllEventListenersSlowCase):
        * dom/PageIPhoneTouch.cpp: Added. Code basically moved from Document and WebView.
        (WebCore::Page::addTouchEventListener):
        (WebCore::Page::removeTouchEventListener):
        (WebCore::Page::dirtyTouchEventRects): Basically moved from Document. If there
            are Touch Events, then recalulate their rects under the lock.
        (WebCore::Page::clearTouchEventListeners):
        (WebCore::Page::getTouchRects): Returns a copy of all the touch event rects to
            the caller. They are obtained under the lock.
        (WebCore::Page::touchEventsChangedTimerFired):
        (WebCore::Page::checkChildRenderers):
        * dom/PageIPhoneTouch.h: Added. Code basically moved from Document and WebView.
        (touchEventListeners):
        * loader/EmptyClients.h: No longer need to tell the ChromeClient about touch
            event regions.
        * page/ChromeClient.h: Ditto.
        * page/FrameView.cpp: Touch Event data is now tracked in Page.
        (WebCore::FrameView::layout):
        * page/Page.cpp: Handle PageIPhoneTouch.cpp/h
        (WebCore::Page::Page):
        * page/Page.h: Ditto.
        * page/iphone/EventHandlerIPhoneTouch.cpp: Updated to track touch events on Page.
        (WebCore::EventHandler::handleTouchEvent):
        * rendering/RenderLayer.cpp: Ditto.
        (WebCore::RenderLayer::scrollToOffset):
        (WebCore::RenderLayer::styleChanged):
        * rendering/RenderObject.cpp: Ditto.
        (WebCore::RenderObject::styleWillChange):

2009-11-23  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by David Carson.

        <rdar://problem/7418805> Crash / ASSERT when trying to search in book on amazon.com

        Remove a bogus Desktop only ASSERT.

        * xml/XMLHttpRequest.cpp:
        (WebCore::XMLHttpRequest::loadRequestAsynchronously):

2009-11-21  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6703905> Reduce String copying in WAKStringDrawing.mm

        Reviewed by Cameron Zwarich.

        Instead of passing a String to the static drawAtPoint() method,
        pass in a pointer and a length.  In some cases, this prevents
        the need to create a String object just to pass the pointer and
        length, and thus saves making an unnecessary copy of the string.

        * wak/WAKStringDrawing.mm:
        (-[NSString _web_sizeWithFont:forWidth:ellipsis:letterSpacing:resultRange:]):
        Whitespace change.
        (drawAtPoint): Changed to take a pointer and a length instead of
        a String.
        (-[NSString _web_drawAtPoint:forWidth:withFont:ellipsis:letterSpacing:includeEmoji:]):
        Updated calls to drawAtPoint().
        (-[NSString _web_drawInRect:withFont:ellipsis:alignment:lineSpacing:includeEmoji:truncationRect:measureOnly:]):
        Ditto.  The last two calls to drawAtPoint() no longer needlessly
        create String objects.

2009-11-20  David Kilzer  <ddkilzer@apple.com>

        Clean up cruftiness in WAKStringDrawing.mm

        Reviewed by Greg Bolsinga and Cameron Zwarich.

        Part of:  <rdar://problem/6703905> Reduce String copying in WAKStringDrawing.mm

        Fall cleaning:
        - Updated copyright.
        - Fixed location of PLATFORM(IPHONE) macro.
        - Resorted import headers.
        - Replaced various and sundry using statements with using
          namespace statements.
        - Removed unused MAX_LOCAL_CHARS macro.
        - Moved ELLIPSIS_CHARACTER macro into the method where it's used
          and made it a const UChar.
        - Moved @implementation statement below static methods but
          before Objective-C methods.
        - Removed unneeded WebCore:: prefixes.
        - Replaced use of MAXFLOAT with FLT_MAX to match other code.
        - Added comment to #endif statement.

        * wak/WAKStringDrawing.mm:
        (boundedTextBreakFollowing):
        (applyEllipsisStyle):
        (-[NSString _web_drawInRect:withFont:ellipsis:alignment:lineSpacing:includeEmoji:truncationRect:measureOnly:]):
        (-[NSString _web_securedStringIncludingLastCharacter:]):

2009-11-19  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by David Kilzer.

        Change PLATFORM(IPHONE) to ENABLE(TOUCH_EVENTS) where it was missing.

        * dom/Document.cpp:
        (WebCore::Document::removeAllEventListeners):
        (WebCore::Document::clear):

2009-11-18  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by David Kilzer.

        When moving code from the bridge to the ChromeClient, I went
        needlessly const crazy.

        * loader/EmptyClients.h:
        (WebCore::EmptyChromeClient::eventRegionsChanged):
        (WebCore::EmptyChromeClient::didPreventDefaultForEvent):
        (WebCore::EmptyChromeClient::didReceiveDocType):
        (WebCore::EmptyChromeClient::setNeedsScrollNotifications):
        (WebCore::EmptyChromeClient::observedContentChange):
        (WebCore::EmptyChromeClient::clearContentChangeObservers):
        (WebCore::EmptyChromeClient::didReceiveViewportArguments):
        (WebCore::EmptyChromeClient::notifyRevealedSelectionByScrollingFrame):
        (WebCore::EmptyChromeClient::isStopping):
        (WebCore::EmptyChromeClient::didLayout):
        * page/ChromeClient.h:

2009-11-18  David Kilzer  <ddkilzer@apple.com>

        Remove redundant initAtomicString() method from WAKStringDrawing.mm

        Reviewed by Greg Bolsinga.

        Part of:  <rdar://problem/6703905> Reduce String copying in WAKStringDrawing.mm

        Since AtomicString::init() already has a static bool variable to
        check whether it's initialized, there's no need to have another
        one in WAKStringDrawing.mm that does the exact same thing.

        * wak/WAKStringDrawing.mm: Added using WebCore::AtomicString
        statement.
        (initAtomicString): Removed.
        (-[NSString _web_sizeWithFont:forWidth:ellipsis:letterSpacing:resultRange:]):
        Switched to call AtomicString::init() directly.
        (-[NSString _web_drawAtPoint:forWidth:withFont:ellipsis:letterSpacing:includeEmoji:]): Ditto.
        (-[NSString _web_drawInRect:withFont:ellipsis:alignment:lineSpacing:includeEmoji:truncationRect:measureOnly:]): Ditto.
        (-[NSString _web_securedStringIncludingLastCharacter:]): Ditto.

2009-11-18  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Cameron Zwarich.

        <rdar://problem/7403328> Always commit Eclair layer changes on the web thread

        Export _WebThreadRunLoop for use in WebKit.

        * WebCore.iPhone.exp:

2009-11-18  David Carson  <dacarson@apple.com>

        Reviewed by Greg Bolsinga and David Kilzer

        <rdar://problem/5534247> Investigate turning on the Foundation disk cache for WebKit

        Add a setting that allows a client application to enable Foundation caching on
        NSURLConnection.
        If a client application would like to control the amount of RAM, disk space and
        storage location, they can do this through the NSURLCache class.

        * page/Settings.cpp:
        (WebCore::Settings::Settings): Initialize Foundation caching as disabled.
        * page/Settings.h:
        (WebCore::Settings::setFoundationCachingEnabled): added
        (WebCore::Settings::foundationCachingEnabled): added
        * platform/network/mac/ResourceHandleMac.mm:
        (WebCore::ResourceHandle::start):

2009-11-18  Mike Knippers  <knippers@apple.com>

        <rdar://problem/7399244> Build WebCore with order file

        Reviewed by David Kilzer.

        * WebCore.iPhone.order: Updated.

2009-11-17  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Greg Bolsinga.

        Minor cleanup in MediaPlayerPrivateIPhone:

          * Rename m_mediaPlayerClient to m_mediaPlayer, since it's a MediaPlayer, and not
            a MediaPlayerClient.
          * Eliminate WebMediaPlayerHelper, and just call it what it is (an NSObject),
            though it is really the MediaPlayerProxy.
          * Make some methods const.
          * Re-order member variables to optmize padding.

        * platform/graphics/iphone/MediaPlayerPrivateIPhone.h:
        (WebCore::MediaPlayerPrivateiPhone::usingNetwork):
        (WebCore::MediaPlayerPrivateiPhone::inFullscreen):
        * platform/graphics/iphone/MediaPlayerPrivateIPhone.mm:
        (WebCore::MediaPlayerPrivateiPhone::MediaPlayerPrivateiPhone):
        (WebCore::MediaPlayerPrivateiPhone::load):
        (WebCore::MediaPlayerPrivateiPhone::deliverNotification):

2009-11-16  David Kilzer  <ddkilzer@apple.com>

        Don't make unnecessary copies of String or Font objects in applyEllipsisStyle()

        Reviewed by Greg Bolsinga.

        Part of: <rdar://problem/6703905> Reduce String copying in WAKStringDrawing.mm

        * wak/WAKStringDrawing.mm:
        (applyEllipsisStyle): Make String and Font arguments be const
        references to prevent unnecessary copying.  Renamed renderer
        variable to font.  Used early returns in switch statement to
        prevent the need for a stack-allocated result string.  Removed
        default case in switch statement since the compiler will catch
        any missing cases.  Added ASSERT_NOT_REACHED() before final
        return statement since it should never be reached.

2009-11-16  David Kilzer  <ddkilzer@apple.com>

        De-tab-ify WAKStringDrawing.mm

        Reviewed by Greg Bolsinga.

        * wak/WAKStringDrawing.mm:
        (applyEllipsisStyle):
        (-[NSString _web_sizeWithFont:forWidth:ellipsis:letterSpacing:resultRange:]):
        (-[NSString _web_drawInRect:withFont:ellipsis:alignment:lineSpacing:includeEmoji:truncationRect:measureOnly:]):

2009-11-14  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7350394> iPhone: ZDI-CAN-579: call-after-free in HTMLObjectElement::renderFallBackContent (31277)

        Merged ToT WebKit r50698.

    2009-11-09  Anders Carlsson  <andersca@apple.com>

        Reviewed by Darin Adler and Dan Bernstein.

        <rdar://problem/7328395>
        https://bugs.webkit.org/show_bug.cgi?id=31277

        When an object tag's style changes (for example when child nodes are added/removed),
        reuse its Frame (if it has one) instead of creating multiple Frames.

        Test: fast/dom/HTMLObjectElement/children-changed.html

        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::requestObject):

2009-11-14  David Kilzer  <ddkilzer@apple.com>

        Follow-up fix:  <rdar://problem/7272591> iPhone: Apple Mail loads remote content from video, audio tags when configured not to, no delegate callback

        Reviewed by Eric Carlson.

        On Desktop WebKit, the delegate callbacks are made from
        HTMLMediaElement before the URL is passed to the media engine.
        Eric Carlson said that it's not practical for FigPlayer to call
        back into WebCore just before a resource is loaded because of
        threading concerns, so we need to perform the callbacks before
        we pass the URLs as parameters to the plug-in.

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::getPluginProxyParams): Perform
        delegate callbacks before sending URL parameters to the plug-in.
        Also added missing call to HTMLMediaElement::isSafeToLoadURL()
        for the initial source URL.

2009-11-12  Cameron Zwarich  <zwarich@apple.com>

        Reviewed by David Carson and David Kilzer.

        <rdar://problem/7237497> Tile cache should be optimized for the direction of scrolling

        Add a tiling direction property to WAKWindow and propogate it to the tile drawing
        code. The weighting of the direction is adopted from the code that currently assumes
        the direction of scrolling is always downward.

        * platform/iphone/TileCache.h:
        * platform/iphone/TileCache.mm:
        (WebCore::TileCache::TileCache):
        (WebCore::TileCache::tileDistance2): Made a method and changed to incorporate the
        tiling direction into the tile distance computations.
        (WebCore::TileCache::setTilingDirection): Added.
        (WebCore::TileCache::tilingDirection): Added.
        * wak/WAKWindow.h:
        * wak/WAKWindow.mm:
        (-[WAKWindow setTilingDirection:]): Added.
        (-[WAKWindow tilingDirection]): Added.

2009-11-12  Cameron Zwarich  <zwarich@apple.com>

        Reviewed by David Kilzer.

        Fix the build with the LOG_TILING #define.

        * platform/iphone/TileCache.mm:
        (WebCore::TileCache::Tile::~Tile):

2009-11-12  Cameron Zwarich  <zwarich@apple.com>

        Reviewed by Greg Bolsinga.

        <rdar://problem/7385573> Touch hit-testing often picks a node different than the one the user intended, which makes pressing links difficult

        * page/iphone/FrameIPhone.mm:
        (WebCore::Frame::qualifyingNodeAtViewportLocation): Currently, if hit-testing succeeds
        and finds a qualifying node, we don't look for any other nodes. Change this code that
        so that if a qualifying node is found, additional hit-tests are performed above and below
        the original point. If any of these finds a qualifying node that is a descendant of the
        original qualifying node, use that node instead. It is possible we could be more aggressive
        here, but even this is a great improvement on problematic sites.

2009-11-12  Justin Garcia  <justin.garcia@apple.com>

        Reviewed by Brad Moore.

        <rdar://problem/6800386> Editor::setTextAsChildOfElement() should use better splitting mechanism

        Let createFragmentFromText handle paragraph splitting.  It properly handles generating nbsps when necessary.  We
        need let WebCore completely handle whitespace in preparation for fixing:

        <rdar://problem/6413923> UITextField converts non-breaking spaces to spaces

        * WebCore.iPhone.exp:
        * editing/Editor.cpp:
        (WebCore::Editor::setTextAsChildOfElement): No longer need the breakLines parameter, as UIKit now removes newlines
        when necessary.
        * editing/Editor.h:

2009-11-10  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7354289> iPhone: WebKit should not pass Referer header through a redirect to a non-secure site (30841)

        Merged ToT WebKit r50226.

    2009-10-28  Alexey Proskuryakov  <ap@apple.com>

        Reviewed by Darin Adler.

        https://bugs.webkit.org/show_bug.cgi?id=30841
        <rdar://problem/7342730> WebKit should not pass Referer header through a redirect to a non-secure site

        Tests: http/tests/ssl/referer-301.html
               http/tests/ssl/referer-303.html

        * platform/network/mac/ResourceHandleMac.mm:
        (-[WebCoreResourceHandleAsDelegate connection:willSendRequest:redirectResponse:]):
        Remove Referer header if redirecting from https to another protocol.

        * platform/network/ResourceRequestBase.cpp:
        (WebCore::ResourceRequestBase::clearHTTPReferrer): Update request counterparts, as it is
        always done when changing or adding header fields.
        (WebCore::ResourceRequestBase::clearHTTPOrigin): Ditto.

        * platform/network/ResourceRequestBase.h: clearHTTPReferrer() and clearHTTPOrigin() are
        no longer inline, since they have non-trivial implementations.

        * platform/network/mac/ResourceRequestMac.mm:
        (WebCore::ResourceRequest::doUpdatePlatformRequest): Fixed to synchronize header field removals.
        (WebCore::ResourceRequest::doUpdateResourceRequest): Ditto.

        * platform/network/cf/ResourceHandleCFNet.cpp:
        (WebCore::willSendRequest):
        * platform/network/cf/ResourceRequestCFNet.cpp:
        (WebCore::setHeaderFields):
        (WebCore::ResourceRequest::doUpdatePlatformRequest):
        (WebCore::ResourceRequest::doUpdateResourceRequest):
        Match Mac changes.

2009-11-10  David Kilzer  <ddkilzer@apple.com>

        Add PLATFORM(IPHONE) macros to TileCache.{h|m}

        Reviewed by Cameron Zwarich.

        These changes make it possible to compile iPhone WebKit for
        Desktop Safari once again.

        * platform/iphone/TileCache.h:
        * platform/iphone/TileCache.mm:

2009-11-10  David Kilzer  <ddkilzer@apple.com>

        Introduce ENABLE(TEXT_AUTOSIZING)

        Reviewed by Greg Bolsinga.

        Most changes below are related to putting text autosizing code
        inside ENABLE(TEXT_AUTOSIZING) macros.  The remaining changes
        are as noted below.

        * DerivedSources.make: Added rule to include
        WebCore.TextAutosizing.exp in generated WebCore.exp if
        ENABLE_TEXT_AUTOSIZING is set to 1.
        * WebCore.TextAutosizing.exp: Added.
        * WebCore.iPhone.exp: Moved text autosizing symbols to
        WebCore.TextAutosizing.exp.  One symbol was removed since it was
        not used in WebKit.

        * WebCore.xcodeproj/project.pbxproj: Added
        WebCore.TextAutosizing.exp to the project.

        * css/CSSComputedStyleDeclaration.cpp:
        (WebCore::CSSComputedStyleDeclaration::getPropertyCSSValue):
        * css/CSSStyleSelector.cpp:
        (WebCore::CSSStyleSelector::SelectorChecker::checkOneSelector):
        * dom/Document.cpp:
        (WebCore::Document::detach):
        * dom/Document.h:
        * page/Frame.h: Added #include of FloatSize.h for text
        autosizing.  Removed include of Frame.h (itself!) from
        PLATFORM(IPHONE) code.
        * page/FrameView.cpp:
        (WebCore::FrameView::layout):
        * page/Settings.cpp:
        (WebCore::Settings::Settings):
        * page/Settings.h:
        * page/iphone/FrameIPhone.mm: Adjusted PLATFORM(IPHONE) macro.
        Moved text autosizing code to the bottom of the file to prevent
        the use of a lot more #if macros.
        (WebCore::Frame::visibleSize):
        (WebCore::Frame::setVisibleSize):
        * platform/graphics/Font.h:
        * platform/graphics/FontDescription.h:
        * platform/text/StringImpl.cpp:
        * platform/text/StringImpl.h:
        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::RenderBlock):
        * rendering/RenderBlock.h:
        * rendering/RenderObject.cpp:
        * rendering/RenderObject.h:
        * rendering/RenderText.cpp:
        (WebCore::RenderText::RenderText):
        * rendering/RenderText.h:
        * rendering/style/RenderStyle.cpp:
        (WebCore::RenderStyle::diff):
        * rendering/style/RenderStyle.h:
        (WebCore::InheritedFlags::textSizeAdjust):
        (WebCore::InheritedFlags::setTextSizeAdjust):
        (WebCore::InheritedFlags::initialTextSizeAdjust):
        * rendering/style/StyleInheritedData.cpp:
        (WebCore::StyleInheritedData::StyleInheritedData):
        (WebCore::StyleInheritedData::operator==):
        * rendering/style/StyleInheritedData.h:
        * rendering/style/StyleRareInheritedData.h:
        * rendering/style/TextSizeAdjustment.h:

2009-11-08  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7354251> iPhone: ZDI-CAN-578: use after free in WebCore::RenderBlock related to CSS run-in property (31034)

        Merged ToT WebKit r50466.

    2009-11-02  Darin Adler  <darin@apple.com>

        Reviewed by Dan Bernstein.

        Crash due to double-destroy related to CSS run-in property
        https://bugs.webkit.org/show_bug.cgi?id=31034
        rdar://problem/7328458

        Test: fast/css/run-in-crash.html

        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::destroy): Reorder destruction so the
        continuation is destroyed after anonymous children. See comment
        in the code for more details of why this is right.
        * rendering/RenderInline.cpp:
        (WebCore::RenderInline::destroy): Ditto.

2009-11-08  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7311412> iPhone: REGRESSION (r48687): Pages on ucas.com appear blank (30424)

        Reverted iPhone WebKit r112546, which originally fixed:
        <rdar://problem/7239662> iPhone: CrashTracer: [USER] 1 crash in Safari at com.apple.WebCore • WebCore::ThreadTimers::fireTimers + 135 • abort() called

        The eventual fix will be picked up with the merge for Safari
        Bronco.

        * dom/Document.cpp:
        (WebCore::Document::processHttpEquiv):
        * loader/FrameLoader.cpp:
        (WebCore::ScheduledRedirection::ScheduledRedirection):
        (WebCore::FrameLoader::FrameLoader):
        (WebCore::FrameLoader::setDefersLoading):
        (WebCore::FrameLoader::stopLoading):
        (WebCore::FrameLoader::cancelRedirection):
        (WebCore::FrameLoader::clear):
        (WebCore::FrameLoader::checkCompleted):
        (WebCore::FrameLoader::checkCompletedTimerFired):
        (WebCore::FrameLoader::scheduleCheckCompleted):
        (WebCore::FrameLoader::checkLoadCompleteTimerFired):
        (WebCore::FrameLoader::scheduleCheckLoadComplete):
        (WebCore::FrameLoader::checkCallImplicitClose):
        (WebCore::FrameLoader::scheduleHistoryNavigation):
        (WebCore::FrameLoader::redirectionTimerFired):
        (WebCore::FrameLoader::parentCompleted):
        (WebCore::FrameLoader::scheduleRedirection):
        (WebCore::FrameLoader::startRedirectionTimer):
        (WebCore::FrameLoader::stopRedirectionTimer):
        (WebCore::FrameLoader::completed):
        (WebCore::FrameLoader::checkLoadComplete):
        * loader/FrameLoader.h:
        * manual-tests/go-back-after-alert.html: Removed.
        * manual-tests/resources/alert-and-go-back.html: Removed.

2009-11-06  Karl Hong  <khong@apple.com>

        Reviewed by NOBODY (OOPS!).

        <radar://problem/6631215> Deleting the last character of a password will reveal spaces

        The problem for this bug is due to rebalanceWhitespace, when editing around a space,
        the space is removed and re-inserted.  In password case, it looks like a newly entered
        space which is showed momentarily.

        The solution is to stop rebalance white space for password deleting,

        * editing/DeleteSelectionCommand.cpp:
        (WebCore::DeleteSelectionCommand::doApply):

2009-11-05  Eric Carlson  <eric.carlson@apple.com>

        Reviewed by Paul Knight.

        <rdar://problem/7370994> MediaPlayerNotificationStreamUnlikelyToKeepUp == HaveFutureData

        An "unlikely to keep up" notification signals that the media engine has data
        buffered but not enough to play through without having to rebuffer, so it
        should correspond to MediaPlayer::HaveFutureData.

        * platform/graphics/iphone/MediaPlayerPrivateIPhone.mm:
        (WebCore::MediaPlayerPrivateiPhone::prepareToPlay):
        (WebCore::MediaPlayerPrivateiPhone::deliverNotification):
            MediaPlayerNotificationStreamUnlikelyToKeepUp -> HaveFutureData. Don't suppress
            time changed events when paused or they won't be reported when scrubbing
            a paused movie.

2009-11-05  Justin Garcia  <justin.garcia@apple.com>

        Removing workaround for:

        <rdar://problem/6767162> Delete not handled correctly when caret is before element with display:block style

        * WebCore.iPhone.exp:
        * editing/SelectionController.cpp:
        * editing/SelectionController.h:

2009-11-05  Justin Garcia  <justin.garcia@apple.com>

    Merged TOT r50543.

    <rdar://problem/6767162> Delete not handled correctly when caret is before element with display:block style

    2009-11-05  Justin Garcia  <justin.garcia@apple.com>

        Reviewed by Adele Peterson.

        https://bugs.webkit.org/show_bug.cgi?id=25439
        Deleting when in front of a block image removes character from previous paragraph

        Added editing/deleting/25439-{1,2,3}.html

        * editing/DeleteSelectionCommand.cpp:
        (WebCore::DeleteSelectionCommand::mergeParagraphs): Block images, tables and HRs cannot
        be made inline with other content.  Instead of merging, just move the caret to just before
        the selection we deleted.
        * editing/htmlediting.cpp:
        (WebCore::firstInSpecialElement): Added a FIXME.  This function begins iterating up from pos.node(), which
        doesn't necessarily contain pos (suppose pos was [img, 0]).
        (WebCore::lastInSpecialElement): Ditto.
        (WebCore::isRenderedAsNonInlineTableImageOrHR): Moved from visible_units.cpp.  Added a check for non-inline images.
        * editing/htmlediting.h:
        * editing/visible_units.cpp:
        (WebCore::startOfParagraph): Use moved/renamed function.  Removed FIXME.  The problem causing
        5027702 is now squarely in first/lastInSpecialElement
        (WebCore::endOfParagraph): Ditto.

2009-11-04  Paul Knight  <pknight@apple.com>

        Merged ToT r47512 (<rdar://problem/7076110>) as part of <rdar://problem/7308644> Improve web resource caching in the store apps.

        2009-08-19  Alexey Proskuryakov  <ap@apple.com>

                Reviewed by Anders Carlsson.

                https://bugs.webkit.org/show_bug.cgi?id=27464
                Implement application cache online whitelist wildcard flag

                Test: http/tests/appcache/whitelist-wildcard.html

                A "*" in NETWORK section means that network loading needn't be blocked.

                * loader/appcache/ApplicationCache.cpp:
                (WebCore::ApplicationCache::isURLInOnlineWhitelist):
                * loader/appcache/ApplicationCache.h:
                (WebCore::ApplicationCache::setAllowsAllNetworkRequests):
                (WebCore::ApplicationCache::allowsAllNetworkRequests):
                * loader/appcache/ApplicationCacheGroup.cpp:
                (WebCore::ApplicationCacheGroup::didFinishLoadingManifest):
                * loader/appcache/ApplicationCacheStorage.cpp:
                (WebCore::ApplicationCacheStorage::openDatabase):
                (WebCore::ApplicationCacheStorage::store):
                (WebCore::ApplicationCacheStorage::loadCache):
                * loader/appcache/ManifestParser.cpp:
                (WebCore::parseManifest):
                * loader/appcache/ManifestParser.h:

2009-11-03  Eric Carlson  <eric.carlson@apple.com>

        Reviewed by David Kilzer and Greg Bolsinga.

        <rdar://problem/7361593> Should be able to suppress default media controls

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::attributeChanged):
            Call media engine setControls method when 'controls' attribute changes.
        (WebCore::HTMLMediaElement::getPluginProxyParams):
            Pass 'controls' attribute, if present, to plug-in.

        * platform/graphics/MediaPlayer.cpp:
        (WebCore::NullMediaPlayerPrivate::setControls):
            New, do nothing, method.
        (WebCore::MediaPlayer::setControls):
            Pass call to the media engine.
        * platform/graphics/MediaPlayer.h:
        * platform/graphics/MediaPlayerPrivate.h:

        (WebCore::MediaPlayerPrivateInterface::setControls):
            Declare new method.

        * platform/graphics/iphone/MediaPlayerPrivateIPhone.h:
        * platform/graphics/iphone/MediaPlayerPrivateIPhone.mm:
        (WebCore::MediaPlayerPrivateiPhone::setControls):
            Implement setControls method.

2009-11-03  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by Cameron Zwarich.

        <rdar://problem/7261867> Mouse down events hit tested twice for WKView

        This simply eliminates the double hitTest. It also consolidates the switch
        statement into the three types of events.

        * wak/WKWindow.mm:
        (WKWindowSendEvent):

2009-10-29  Eric Carlson  <eric.carlson@apple.com>

        Reviewed by Simon Fraser and David Carson.

        <rdar://problem/7307953> Can't playback audio with hidden audio tags

        More work to deal with plug-in changes that broke previous attempt
        at this bug fix.

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::attributeChanged):
            Don't call scheduleLoad when the 'src' attribute is set for the first time,
            we don't want to begin loading data automatically.
        (WebCore::HTMLMediaElement::scheduleLoad):
            Create media player proxy immediately so the plug-in will be attached
            when we need it.
        (WebCore::HTMLMediaElement::loadInternal):
            Don't need to call createMediaPlayerProxy.
        (WebCore::HTMLMediaElement::loadResource):
            Call createMediaPlayerProxy instead if just creating MediaPlayer so the
            plug-in is connected.
        (WebCore::HTMLMediaElement::potentiallyPlaying):
            No more iPhone only logic!
        (WebCore::HTMLMediaElement::setMediaPlayerProxy):
            Allocate MediaPlayer if it doesn't already exist.

        * platform/graphics/iphone/MediaPlayerPrivateIPhone.h:
        (WebCore::MediaPlayerPrivateiPhone::canLoadPoster):
            Implement new method.

        * platform/graphics/iphone/MediaPlayerPrivateIPhone.mm:
        (WebCore::MediaPlayerPrivateiPhone::MediaPlayerPrivateiPhone):
            Initialize new member variables.
        (WebCore::MediaPlayerPrivateiPhone::setMediaPlayerProxy):
            Call processPendingRequests to deal with requests made before the
            connection to the plug-in.
        (WebCore::MediaPlayerPrivateiPhone::load):
            Clear m_pauseRequested and m_preparingToPlay.
        (WebCore::MediaPlayerPrivateiPhone::processPendingRequests):
            New, schedule call to prepareToPlay if necessary.
        (WebCore::MediaPlayerPrivateiPhone::prepareToPlay):
            New, tell the plug-in to begin loading media.
        (WebCore::MediaPlayerPrivateiPhone::play):
        (WebCore::MediaPlayerPrivateiPhone::pause):
            Remember when pause has been requested.
        (WebCore::MediaPlayerPrivateiPhone::deliverNotification):
            Deal with new notifications.
        (-[WebCoreMediaPlayerNotificationHelper schedulePrepareToPlay:]):
            New, call prepareToPlay after a delay.
        * platform/graphics/mac/MediaPlayerProxy.h:

2009-10-29  Simon Fraser  <simon.fraser@apple.com>

    Rubber-stamped by David Kilzer.

    Merged ToT WebKit r47618.

    2009-08-20  Dan Bernstein  <mitz@apple.com>

            Reviewed by John Sullivan.

            Fix more cases of
            <rdar://problem/7154521> Lots of "<Error>: doClip: empty path." spew in
            the console with certain content

            If the border box is empty, simply avoid painting instead of trying to
            clip to the empty path.

            * rendering/RenderBoxModelObject.cpp:
            (WebCore::RenderBoxModelObject::paintFillLayerExtended):
            * rendering/RenderReplaced.cpp:
            (WebCore::RenderReplaced::paint):
            * rendering/RenderWidget.cpp:
            (WebCore::RenderWidget::paint):

2009-10-29  Simon Fraser  <simon.fraser@apple.com>

    Rubber-stamped by David Kilzer.

    Merged ToT WebKit r47570.

    2009-08-20  Dan Bernstein  <mitz@apple.com>

            Reviewed by Darin Adler.

            <rdar://problem/7154605> Loading page with 1px wide <select> makes the
            toolbar go blank
            and
            <rdar://problem/7154521> Lots of "<Error>: doClip: empty path." spew in
            the console with certain content

            * rendering/RenderThemeMac.mm:
            (WebCore::RenderThemeMac::paintMenuListButtonGradients): Return early
            if the rectangle is empty. Use RenderStyle::getBorderRadiiForRect() to
            adjust the radii in case the sides of the rectangle are smaller than sum
            of the radii, so that the gradient background matches the border (which
            already uses getBorderRadiiForRect()). Check if bottomGradient is empty
            to avoid clipping to an empty path.
            (WebCore::RenderThemeMac::paintMenuListButton): Moved a
            GraphicContext::save() down to avoid a save/restore imbalance in the
            early return case.

            * rendering/RenderThemeSafari.cpp: Made the same changes.
            (WebCore::RenderThemeSafari::paintMenuListButtonGradients):
            (WebCore::RenderThemeSafari::paintMenuListButton):

2009-10-29  Greg Bolsinga  <bolsinga@apple.com>

        Rubber stamped by David Kilzer.

	Convert tabs to spaces.

        * platform/graphics/mac/FontCacheMac.mm:
        (WebCore::FontCache::getFontDataForCharacters):
        (WebCore::FontCache::createFontPlatformData):

2009-10-29  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/7337883> Displaying Japanese/Chinese text crashes in simulator

        Check platformFont for NULL (as is done elsewhere) before dereferencing.
        If it is 0, go to the secondary font. There's also tab removal here.

        * platform/graphics/mac/FontCacheMac.mm:
        (WebCore::FontCache::getFontDataForCharacters):

2009-10-29  Simon Fraser  <simon.fraser@apple.com>

    Rubber-stamped by David Kilzer.

    Merged ToT WebKit r49945.

    2009-10-20  Simon Fraser  <simon.fraser@apple.com>

            Reviewed by Darin Adler.

            Make accelerated compositing debug indicators work in release builds
            https://bugs.webkit.org/show_bug.cgi?id=30588

            Allow some debug indicators, that show which page elements go into compositing layers,
            to work in release builds, when the runtime prefs are set.

            * platform/graphics/GraphicsLayer.cpp:
            (WebCore::GraphicsLayer::GraphicsLayer):
            (WebCore::GraphicsLayer::setZPosition):
            * platform/graphics/GraphicsLayer.h:
            * platform/graphics/mac/GraphicsLayerCA.h:
            * platform/graphics/mac/GraphicsLayerCA.mm:
            (WebCore::clearBorderColor):
            (WebCore::GraphicsLayer::showRepaintCounter):
            (WebCore::GraphicsLayerCA::GraphicsLayerCA):
            (WebCore::GraphicsLayerCA::updateMasksToBounds):
            (WebCore::GraphicsLayerCA::updateLayerDrawsContent):
            (WebCore::GraphicsLayerCA::setDebugBorder):
            (WebCore::GraphicsLayerCA::swapFromOrToTiledLayer):
            (WebCore::GraphicsLayerCA::setupContentsLayer):
            * platform/graphics/mac/WebLayer.mm:

2009-10-29  Simon Fraser  <simon.fraser@apple.com>

    Rubber-stamped by David Kilzer.

    Merged ToT WebKit r49164.

    2009-10-05  Andrei Popescu  <andreip@google.com>

            Reviewed by Eric Carlson.

            Allow the platform media player to know the <video> poster URL.
            Add MediaPlayerPrivate::prepareToPlay() to support media engines
            that do not buffer video data automatically. This method allows
            such media engines to start the buffering just before starting
            playback.
            https://bugs.webkit.org/show_bug.cgi?id=29133

            All platforms that currently implement <video> return false
            in MediaPlayerPrivate::canLoadPoster() and do nothing in
            MediaPlayerPrivate::prepareToPlay() their behavior is
            unchanged. The current set of media test should then be
            sufficient to guarantee that this patch does not break anything.

            * html/HTMLMediaElement.cpp:
            (WebCore::HTMLMediaElement::loadResource):
            After the MediaPlayer is created, inform it what the poster URL is.
            (WebCore::HTMLMediaElement::updatePlayState):
            Add another case where prepareToPlay is called for the platforms
            that do not buffer video content automatically.
            (WebCore::HTMLMediaElement::couldPlayIfEnoughData)
            Same as potentiallyPlaying, except that we don't check for
            the readyState being at least HAVE_FUTURE_DATA.
            * platform/graphics/MediaPlayer.cpp:
            (WebCore::NullMediaPlayerPrivate::canLoadPoster):
            Empty implementation for the NullMediaPlayerPrivate.
            (WebCore::NullMediaPlayerPrivate::setPoster):
            Empty implementation for the NullMediaPlayerPrivate.
            (WebCore::MediaPlayer::canLoadPoster):
            Proxy to the m_private.
            (WebCore::MediaPlayer::setPoster):
            Proxy to m_private.
            * platform/graphics/MediaPlayer.h:
            * platform/graphics/MediaPlayerPrivate.h:
            (WebCore::MediaPlayerPrivateInterface::canLoadPoster):
            (WebCore::MediaPlayerPrivateInterface::setPoster):
            Add new methods that allow the platform player to receive the poster URL.
            (WebCore::MediaPlayerPrivateInterface::prepareToPlay):
            Notifies the media engine that playback should start. The media engine
            should start preparing (e.g. by initializing the player and starting to buffer)
            and call back when the state is changed to HAVE_FUTURE_DATA.

2009-10-26  David Carson  <dacarson@apple.com>

        BUILD FIX: Declare missing MobileQuickLook methods for Apex

        * platform/network/mac/ResourceHandleMac.mm: Declare
        -[QLPreviewConverter previewFileName] and -previewUTI since they
        haven't been submitted with MobileQuickLook to Apex yet.
        Followup radar as this might crash now for QL in Apex
        <rdar://problem/7338698> MobileQuickLook crashes

2009-10-26  David Carson  <dacarson@apple.com>

        Reviewed by Aaron Golden and Greg Bolsinga.

        <rdar://problem/7055219> Sub-TLF: Safari needs to support content downloading

        When content is converted using QuickLook, the content is consumed by the QL convert. We need to save
        a copy of the content so that it can be opened in a handling application.
        There are two issues with this change, I have created these follow up radars:
        <rdar://problem/7336977> WebCore should erase all saved QuickLook files on startup
        <rdar://problem/7336971> WebCore should write content as it is received for QuickLook

        * platform/network/iphone/MobileQuickLook.h:
        * platform/network/iphone/MobileQuickLook.mm:
        (WebCore::QLFileAttributes):
        (WebCore::QLDirectoryAttributes):
        (QLContentDictionary):
        (WebCore::addQLPreviewConverterWithFileForURL):
        (WebCore::qlPreviewConverterFileNameForURL):
        (WebCore::removeQLPreviewConverterForURL):
        (WebCore::registerQLPreviewConverterIfNeeded):
        * platform/network/mac/ResourceHandleMac.mm:
        (-[WebCoreResourceHandleAsDelegate dealloc]):
        (-[WebCoreResourceHandleAsDelegate connection:didReceiveResponse:]):
        (-[WebCoreResourceHandleAsDelegate connection:didReceiveData:lengthReceived:]):
        (-[WebCoreResourceHandleAsDelegate connectionDidFinishLoading:]):
        (-[WebCoreResourceHandleAsDelegate connection:didFailWithError:]):

2009-10-21  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Brad Moore.

        Fix for animation issue in some content (<rdar://problem/7324769>).

        Snow Leopard Core Animation has bug (<rdar://problem/7095638>) where animations are applied in the
        wrong order. This is now fixed in Wildcat builds, so we need to #ifdef the workaround.

        * platform/graphics/mac/GraphicsLayerCA.mm:
        (WebCore::GraphicsLayerCA::createTransformAnimationsFromKeyframes):

2009-10-21  Brad Moore  <bradm@apple.com>

        Reviewed by Andre Boule.

        WebKit side of a fix for:

        <rdar://problem/7103908> ER: Make UILabels that are truncated leave a blank fixed space at the end of the last line instead of ...

        Teaching the iPhone string truncation methods to optionally omit an ellipsis and instead size to an arbitrary width.

        * platform/graphics/StringTruncator.cpp:  Adding insertEllipsis and customTruncationElementWidth parameters.
        (WebCore::centerTruncateToBuffer):
        (WebCore::rightTruncateToBuffer):
        (WebCore::rightClipToCharacterBuffer):
        (WebCore::rightClipToWordBuffer):
        (WebCore::leftTruncateToBuffer):
        (WebCore::truncateString):
        (WebCore::StringTruncator::centerTruncate):
        (WebCore::StringTruncator::rightTruncate):
        (WebCore::StringTruncator::leftTruncate):
        (WebCore::StringTruncator::rightClipToCharacter):
        (WebCore::StringTruncator::rightClipToWord):
        * platform/graphics/StringTruncator.h:
        * wak/WAKStringDrawing.h:
        * wak/WAKStringDrawing.mm:  Changing the base draw-in-rect method to take an optional truncationRect that doubles as an out parameter.  Funneling everything through there.
        (applyEllipsisStyle): Optionally honoring a truncation width.
        (-[NSString _web_sizeWithFont:forWidth:ellipsis:letterSpacing:]):
        (-[NSString _web_sizeWithFont:forWidth:ellipsis:letterSpacing:resultRange:]):
        (-[NSString _web_drawInRect:withFont:ellipsis:alignment:lineSpacing:includeEmoji:truncationRect:measureOnly:]):
        (-[NSString _web_drawInRect:withFont:ellipsis:alignment:lineSpacing:includeEmoji:truncationRect:]):
        (-[NSString _web_drawInRect:withFont:ellipsis:alignment:lineSpacing:]):
        (-[NSString _web_drawInRect:withFont:ellipsis:alignment:]):
        (-[NSString _web_sizeInRect:withFont:ellipsis:lineSpacing:]):
        (-[NSString _web_sizeInRect:withFont:ellipsis:]):

2009-10-21  Ken Kocienda  <kocienda@apple.com>

        Reviewed by Greg Bolsinga

        Fix for this bug:
        <rdar://problem/7279792> Wildcat7B230: Misspelled words are not underlined in compose sheet

        Use correct drawing mode to see dots: kCGCompositeSover.

        * platform/graphics/mac/GraphicsContextMac.mm:
        (WebCore::GraphicsContext::drawLineForMisspellingOrBadGrammar)

2009-10-20  David Kilzer  <ddkilzer@apple.com>

        BUILD FIX: Removed errant right parenthesis

        * platform/network/iphone/MobileQuickLook.mm: Pain!

2009-10-20  David Kilzer  <ddkilzer@apple.com>

        BUILD FIX: Declare missing MobileQuickLook methods for Apex

        * platform/network/iphone/MobileQuickLook.mm: Declare
        -[QLPreviewConverter previewFileName] and -previewUTI since they
        haven't been submitted with MobileQuickLook to Apex yet.  This
        is okay because these methods should never be called from
        MobileSafari since they're in Wildcat-only code paths.

2009-10-20  David Kilzer  <ddkilzer@apple.com>

        For: <rdar://problem/7055219> Sub-TLF: Safari needs to support content downloading

        Reviewed by David Carson.

        Expose functions to return values from QLPreviewConverter when
        the contents of a URL is converted using MobileQuickLook.

        * WebCore.iPhone.exp: Export new methods.
        * platform/network/iphone/MobileQuickLook.h: Added declarations
        for new methods.
        * platform/network/iphone/MobileQuickLook.mm:
        (WebCore::qlPreviewConverterFileNameForURL): Added.
        (WebCore::qlPreviewConverterUTIForURL): Added.

2009-10-20  Eric Carlson  <eric.carlson@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/7307953> Can't playback audio with hidden audio tags

        Don't require plug-in backed <video> and <audio> elements to be in the document to play.

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::HTMLMediaElement): Initialize m_proxyWidget.
        (WebCore::HTMLMediaElement::createRenderer): Set renderer widget if it has already been
        allocated.
        (WebCore::HTMLMediaElement::loadInternal): Call createMediaPlayerProxy to make sure we
        have a plug-in proxy.
        (WebCore::HTMLMediaElement::play): Don't require the element to be in the document to play.
        (WebCore::HTMLMediaElement::getPluginProxyParams): New, return the url and params vectors.
        (WebCore::HTMLMediaElement::finishParsingChildren): Call createMediaPlayerProxy.
        (WebCore::HTMLMediaElement::createMediaPlayerProxy): New, allocate the proxy widget if necessary.
        * html/HTMLMediaElement.h:

        * loader/EmptyClients.h:
        (WebCore::EmptyFrameLoaderClient::createMediaPlayerProxyPlugin): Add declaration.

        * loader/FrameLoader.cpp:
        (WebCore::toPlugInElement): Don't allow an audio or video element to be cast to a plug-in element.
        (WebCore::FrameLoader::loadMediaPlayerProxyPlugin): New, allocate a media player proxy plug-in.

        * loader/FrameLoader.h: Declare loadMediaPlayerProxyPlugin.

        * loader/FrameLoaderClient.h: Declare createMediaPlayerProxyPlugin.

        * rendering/RenderPart.h:
        (WebCore::toRenderPart): New.

        * rendering/RenderPartObject.cpp:
        (WebCore::RenderPartObject::updateWidget): Call loadMediaPlayerProxyPlugin when passed an
        audio or video node.

        * rendering/RenderVideo.cpp:
        (WebCore::RenderVideo::RenderVideo): Get default width and height from defaultSize.
        (WebCore::RenderVideo::defaultSize): New, return the spec defined default width and height.
        * rendering/RenderVideo.h:

2009-10-19  Simon Fraser  <simon.fraser@apple.com>

    Rubber-stamped by David Kilzer.

    Merged ToT WebKit r49823.

    2009-10-19  Simon Fraser  <simon.fraser@apple.com>

            Reviewed by Darin Adler.

            Flash at end of opacity/transform transition sometimes
            https://bugs.webkit.org/show_bug.cgi?id=30501

            When a transition finishes, there window of time between when the animation is
            removed, and the final style set on the GraphicsLayer. This caused the layer to revert
            to its old appearance for one or two frames. To avoid this, we set the final
            transform or opacity at the start of the transition; we know that the animation
            will override the final value for as long as its running.

            No test because this is a very transient effect that can't be captured
            in a test.

            * rendering/RenderLayerBacking.cpp:
            (WebCore::RenderLayerBacking::createGraphicsLayer):
            (WebCore::RenderLayerBacking::updateLayerOpacity):
            (WebCore::RenderLayerBacking::updateLayerTransform):
            (WebCore::RenderLayerBacking::updateGraphicsLayerGeometry):
            (WebCore::RenderLayerBacking::startTransition):
            * rendering/RenderLayerBacking.h:

2009-10-19  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by David Carson.

        <rdar://problem/7312717> Crash when updating webkit-transform (animationDidStart:)

        Need to check m_graphicsLayer for nullness after grabbing the web thread lock.

        * platform/graphics/mac/GraphicsLayerCA.mm:
        (-[WebAnimationDelegate animationDidStart:]):

2009-10-16  Simon Fraser  <simon.fraser@apple.com>

    Rubber-stamped by David Kilzer.

    Merged ToT WebKit r49713.

    2009-10-16  Simon Fraser  <simon.fraser@apple.com>

            Reviewed by Dan Bernstein.

            Transform layer gets stuck with the wrong transform after an animation ends
            <rdar://problem/7311662>

            Work around a CoreAnimation bug which causes an animated transform layer to
            end up with a stale transform.

            Test: compositing/animation/state-at-end-event-transform-layer.html

            * platform/graphics/mac/GraphicsLayerCA.mm:
            (WebCore::bug7311367Workaround):
            (WebCore::GraphicsLayerCA::removeAnimationFromLayer):

2009-10-16  Simon Fraser  <simon.fraser@apple.com>

    Rubber-stamped by David Kilzer.

    Merged ToT WebKit r49711.

    2009-10-16  Simon Fraser  <simon.fraser@apple.com>

            Reviewed by Dan Bernstein.

            After running a transition with an end event listener, can't change the transform
            https://bugs.webkit.org/show_bug.cgi?id=30454

            Fix an issue where, if a document had any listener for webkitTransitionEnd or webkitAnimationEnd,
            the animations would not get cleaned up correctly, which broke subsequent changes of transform.

            Now, we always clean up the animations right after queuing up the end events.

            Tests: animations/state-at-end-event.html
                   transitions/move-after-transition.html

            * page/animation/ImplicitAnimation.cpp:
            (WebCore::ImplicitAnimation::onAnimationEnd):
            * page/animation/KeyframeAnimation.cpp:
            (WebCore::KeyframeAnimation::onAnimationEnd):

2009-10-15  David Kilzer  <ddkilzer@apple.com>

        Use WTF::Mutex instead of @synchronized to lock QLPreviewConverterDictionary

        Reviewed by Antti Koivisto.

        * platform/network/iphone/MobileQuickLook.mm:
        (qlPreviewConverterDictionaryMutex): Added.  Returns the mutex
        used for locking.
        (WebCore::addQLPreviewConverterForURL): Use the new mutex.
        (WebCore::removeQLPreviewConverterForURL): Ditto.
        (WebCore::safeQLURLForDocumentURLAndResourceURL): Ditto.

2009-10-13  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7289101> iPhone: Broken UTF-7 handling problem (29078)

        Merged ToT WebKit r49487.

    2009-10-12  Sam Weinig  <sam@webkit.org>

        Reviewed by Darin Adler.

        Fix for https://bugs.webkit.org/show_bug.cgi?id=29078
        <rdar://problem/7288221>

        Add a mechanism to blacklist certain codecs.  Initially, just blacklist UTF-7 as HTML5 encourages.

        * platform/text/TextEncodingRegistry.cpp:
        (WebCore::pruneBlacklistedCodecs):
        (WebCore::buildBaseTextCodecMaps):
        (WebCore::extendTextCodecMaps):

2009-10-12  Cameron Zwarich  <zwarich@apple.com>

        Reviewed by Greg Bolsinga.

        <rdar://problem/7292632> Minimize the amount of WAK code that does nothing meaningful at all

        Remove WAKScroller. No more WebKit code references NSScroller directly, and WAK no
        longer does its own scrolling, so it's completely useless.

        * wak/WAKAppKitStubs.h:
        * wak/WAKScrollView.h:
        * wak/WAKScrollView.mm:

2009-10-12  Cameron Zwarich  <zwarich@apple.com>

        Reviewed by Greg Bolsinga.

        <rdar://problem/7292632> Minimize the amount of WAK code that does nothing meaningful at all

        Remove code in WAKScrollView related to whether scrolling is allowed. WAK and WK used
        to implement their own scrolling before we had LayerKit.

        * wak/WAKScrollView.h:
        * wak/WAKScrollView.mm:

2009-10-12  David Kilzer  <ddkilzer@apple.com>

        Move WebEventRegion.{h|mm} into WebCore/page/iphone

        Reviewed by Greg Bolsinga.

        * WebCore.xcodeproj/project.pbxproj: Updated to reflect new
        location of files.
        * page/iphone/WebEventRegion.h: Renamed from WebCore/page/mac/WebEventRegion.h.
        * page/iphone/WebEventRegion.mm: Renamed from WebCore/page/mac/WebEventRegion.mm.

2009-10-10  Cameron Zwarich  <zwarich@apple.com>

        Reviewed by David Carson.

        <rdar://problem/7292704> REGRESSION: WKWindowSendEvent() forwards from the UI thread to the web thread

        Roll out r112370, which combined -[WAKWindow sendEvent:] and WKWindowSendEvent(), because
        this change broke the threading behaviour of WKWindowSendEvent().

        * wak/WAKWindow.h:
        * wak/WAKWindow.mm:
        (-[WAKWindow sendEvent:]):
        * wak/WKWindow.mm:
        (WKWindowSendEvent):
        (WKEventGetCurrentEvent):

2009-10-10  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7272591> iPhone: Apple Mail loads remote content from video, audio tags when configured not to, no delegate callback

        Merged ToT WebKit r49218.

    2009-10-06  Sam Weinig  <sam@webkit.org>

        Reviewed by Brady Eidson.

        Fix for <rdar://problem/7271202>
        Dispatch resource load delegate functions for the media element.
        Since we don't get the required callbacks from the media engine,
        just fake the parameters to the delegate functions as best as possible.

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::loadResource):
        (WebCore::HTMLMediaElement::isSafeToLoadURL):
        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::willLoadMediaElementURL):
        * loader/FrameLoader.h:

2009-10-10  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7292266> iPhone: garbageCollectSoon() not called after releasing a JSDOMWindow (30100)

        Merged ToT WebKit r49134.

    2009-10-05  Dmitry Titov  <dimich@chromium.org>

        Reviewed by Darin Adler.

        1-char fix for obviously reverse condition.
        https://bugs.webkit.org/show_bug.cgi?id=30100
        No test since the only difference is a timing of GC.

        * bindings/js/ScriptCachedFrameData.cpp:
        (WebCore::ScriptCachedFrameData::clear): Revert condition. Almost a typo.

2009-10-09  Antti Koivisto  <antti@apple.com>

        Reviewed by Cameron Zwarich.

        <rdar://problem/7289289> Tiles should be in their own sublayer of a UIWebDocumentView's layer

        Host tile layers on their own dedicated layer. Keep its size in sync with the host layer.

        * page/Settings.cpp:
        (WebCore::Settings::setPluginsEnabled):
        * platform/iphone/TileCache.h:
        * platform/iphone/TileCache.mm:
        (-[TileHostLayer actionForKey:]):
        (WebCore::TileCache::Tile::Tile):
        (WebCore::TileCache::TileCache):
        (WebCore::TileCache::tileHostLayer):
        (WebCore::TileCache::bounds):
        (WebCore::TileCache::hostLayerSizeChanged):
        (WebCore::TileCache::layoutTilesNow):
        (WebCore::TileCache::drawLayer):
        (WebCore::TileCache::setNeedsDisplayInRect):
        * wak/WAKWindow.h:
        * wak/WAKWindow.mm:
        (-[WAKWindow hostLayerSizeChanged]):
        * wak/WKWindow.mm:
        (WKWindowSetContentRect):

2009-10-09  David Kilzer  <ddkilzer@apple.com>

        Remove reference to PageTransitionEvent.idl in Resources

        One reference to PageTransitionEvent.idl in Resources was
        removed from the Xcode project file when WebKit ToT r47824 was
        merged to puzzlebox r113836, but the corresponding reference was
        not.  Removing it prevents Xcode from altering the project file
        every time it's opened.

        * WebCore.xcodeproj/project.pbxproj: Make Xcode happy.

2009-10-08  David Kilzer  <ddkilzer@apple.com>

        Part 12 of 12: <rdar://problem/4948442> Sub-TLF: iPhone: Safari needs to support more page types in its back forward cache (Frames, Java, etc.)

        Merged ToT WebKit r48545.

    2009-09-18  Antti Koivisto  <antti@apple.com>

        Reviewed by Maciej Stachowiak.

        https://bugs.webkit.org/show_bug.cgi?id=29512
        Don't recalculate style when restoring from the page cache

        FrameLoaderClient::forceLayout() also forces style recalc. Instead call FrameView::forceLayout()
        directly to update the scrollbars while keeping the existing style.

        Makes back/forward really fast on complex pages (in cases where page cache works).

        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::commitProvisionalLoad):

2009-10-08  David Kilzer  <ddkilzer@apple.com>

        Part 11 of 12: <rdar://problem/4948442> Sub-TLF: iPhone: Safari needs to support more page types in its back forward cache (Frames, Java, etc.)

        Merged ToT WebKit r48036.

    2009-09-03  Brady Eidson  <beidson@apple.com>

        Reviewed by Sam Weinig.

        Page Cache should support pages with Frames.
        https://bugs.webkit.org/show_bug.cgi?id=13631

        Tests: fast/events/pageshow-pagehide-on-back-cached-with-frames.html
               fast/loader/frames-with-unload-handlers-in-page-cache.html

        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::canCachePageContainingThisFrame):
        (WebCore::FrameLoader::logCanCacheFrameDecision):

2009-10-08  David Kilzer  <ddkilzer@apple.com>

        Part 10 of 12: <rdar://problem/4948442> Sub-TLF: iPhone: Safari needs to support more page types in its back forward cache (Frames, Java, etc.)

        Merged ToT WebKit r48034.

    2009-09-03  Brady Eidson  <beidson@apple.com>

        Reviewed by Sam Weinig.

        More partial work towards "Page Cache should support pages with Frames"
        https://bugs.webkit.org/show_bug.cgi?id=13631

        Fix a bug where subframes weren't asked if they were cacheable.

        No new tests, especially since page caching for frames isn't turned on yet.
        A layout test will come in my next patch, which enables frames in the page cache.

        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::canCachePageContainingThisFrame):

2009-10-08  David Kilzer  <ddkilzer@apple.com>

        Part 9 of 12: <rdar://problem/4948442> Sub-TLF: iPhone: Safari needs to support more page types in its back forward cache (Frames, Java, etc.)

        Merged ToT WebKit r48001 and r47917.

    2009-08-31  Brady Eidson  <beidson@apple.com>

        Rubberstamped by Sam Weinig

        * WebCore.base.exp: Removed an unneeded symbol export.

    2009-09-02  Brady Eidson  <beidson@apple.com>

        Reviewed by Darin Adler.

        More partial work towards "Page Cache should support pages with Frames"
        https://bugs.webkit.org/show_bug.cgi?id=13631

        No new tests. (No change in behavior, current tests pass).

        * loader/DocumentLoader.cpp:
        (WebCore::DocumentLoader::stopLoading): Adopt the new enum form for FrameLoader::stopLoading().

        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::stopLoading): Take an enum to decide whether to dispatch no unload events,
          only unload, or unload and pagehide.
        (WebCore::FrameLoader::closeURL):
        (WebCore::FrameLoader::scheduleRedirection):
        (WebCore::FrameLoader::cachePageForHistoryItem): Call pageHidden().
        (WebCore::FrameLoader::pageHidden): Add to dispatch the pagehide event to all frames in the case
          where a page is added to the PageCache.
        * loader/FrameLoader.h:

        * loader/FrameLoaderTypes.h: Add an UnloadEventPolicy enum.

2009-10-08  David Kilzer  <ddkilzer@apple.com>

        Part 8 of 12: <rdar://problem/4948442> Sub-TLF: iPhone: Safari needs to support more page types in its back forward cache (Frames, Java, etc.)

        Merged ToT WebKit r47999.

    2009-09-02  Brady Eidson  <beidson@apple.com>

        Reviewed by Darin Adler.

        More partial work towards "Page Cache should support pages with Frames"
        https://bugs.webkit.org/show_bug.cgi?id=13631

        - More CachedFrame destruction work.
        - Including related Frame and FrameLoader changes and cleanup.

        No new tests. (No change in behavior, current tests pass).

        * history/CachedFrame.cpp:
        (WebCore::CachedFrameBase::restore): Rebuild up the whole FrameTree when restoring.
        (WebCore::CachedFrame::CachedFrame): Tear down the entire FrameTree when caching.
        (WebCore::CachedFrame::destroy): For child frames that are being destroyed while in
          the PageCache, do lightweight cleanup to:
          A - Prevent referring to a stale Page object.
          B - Prevent World Leaks of WebKit objects.

        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::stopAllLoaders): stopAllLoaders() should never be called on Frames that are
          in the PageCache. ASSERT that fact.
        (WebCore::FrameLoader::open): Remove a bogus release-build workaround, as the comment right above it
          explains it is not effective, and it'd be better to see the crash locally instead of downstream.
        (WebCore::FrameLoader::closeAndRemoveChild): Make sure the owner element has a page pointer before
          referencing it.
        (WebCore::FrameLoader::detachFromParent): Use the new detachViewsAndDocumentLoader() call
        (WebCore::FrameLoader::detachViewsAndDocumentLoader): Does lightweight cleanup of client (WebKit) objects.
        * loader/FrameLoader.h:

        * page/Frame.cpp:
        (WebCore::Frame::detachFromPage): Simply clear the Page pointer without doing any other work.
        (WebCore::Frame::pageDestroyed): Use the new detachFromPage().
        * page/Frame.h:

2009-10-08  David Kilzer  <ddkilzer@apple.com>

        Part 7 of 12: <rdar://problem/4948442> Sub-TLF: iPhone: Safari needs to support more page types in its back forward cache (Frames, Java, etc.)

        Merged ToT WebKit r47990.

    2009-09-02  Brady Eidson  <beidson@apple.com>

        Forget to rename openInFrameloader() to open(), which was requested in Darin's review of my last patch.

        * history/CachedFrame.cpp:
        (WebCore::CachedFrameBase::restore):
        (WebCore::CachedFrame::open):
        * history/CachedFrame.h:
        * history/CachedPage.cpp:
        (WebCore::CachedPage::restore):

2009-10-08  David Kilzer  <ddkilzer@apple.com>

        Part 6 of 12: <rdar://problem/4948442> Sub-TLF: iPhone: Safari needs to support more page types in its back forward cache (Frames, Java, etc.)

        Merged ToT WebKit r47989.

    2009-09-02  Brady Eidson  <beidson@apple.com>

        Reviewed by Darin Adler.

        In http://trac.webkit.org/changeset/47943 I added new header dependencies to FrameLoader.h.
        Removing them is a little trouble, but worth it going forward.
        The pattern of creating a "CachedFrameBase" as the interface CachedFrame provides to FrameLoader
        was suggested by Darin Adler.

        No new tests. (No change in behavior)

        Make CachedFrame inherit privately from CachedFrameBase, which becomes the interface FrameLoader uses:
        * history/CachedFrame.cpp:
        (WebCore::CachedFrameBase::CachedFrameBase):
        (WebCore::CachedFrameBase::~CachedFrameBase):
        (WebCore::CachedFrameBase::restore):
        (WebCore::CachedFrame::CachedFrame):
        (WebCore::CachedFrame::openInFrameLoader):
        * history/CachedFrame.h:
        (WebCore::CachedFrameBase::document):
        (WebCore::CachedFrameBase::view):
        (WebCore::CachedFrameBase::domWindow):
        (WebCore::CachedFrame::create):
        (WebCore::CachedFrame::documentLoader):
        (WebCore::CachedFrame::mousePressNode):

        Call the new ::openInFrameLoader() method on the CachedFrame, as CachedFrameBase is now the only
        thing capable of interacting with FrameLoader::open(CachedFrameBase):
        * history/CachedPage.cpp:
        (WebCore::CachedPage::restore):
        * history/CachedPage.h:
        (WebCore::CachedPage::documentLoader):

        Make ::open(CachedFrame) public, and change it to ::open(CachedFrameBase):
        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::open):
        * loader/FrameLoader.h:

2009-10-08  David Kilzer  <ddkilzer@apple.com>

        Part 5 of 12: <rdar://problem/4948442> Sub-TLF: iPhone: Safari needs to support more page types in its back forward cache (Frames, Java, etc.)

        Merged ToT WebKit r47985.

    2009-09-02  Brady Eidson  <beidson@apple.com>

        Reviewed by Sam Weinig.

        More partial work towards "Page Cache should support pages with Frames"
        https://bugs.webkit.org/show_bug.cgi?id=13631

        This patch is primarily about the "CachedFrame tree" and making slightly different decisions
        based on whether a CachedFrame is the main frame or a subframe.

        - Store whether a CachedFrame represents the main frame or a subframe.
        - "Chop off the frame tree" for the main frame when creating its CachedFrame, as main frames
          are reused and need to start new page loads with an empty frame tree.
        - Reattach the frame tree to the main frame when restoring it.
        - open() the cached subframes in their respective loaders when restoring.
        - Properly clear() and destroy() cached subframes.
        - When committing to a new page load, and after caching the previous page, only clear the
          FrameView for the main frame.

        Note that all of above will eventually be necessary as I continue to land this work in pieces,
        but doesn't actually change any behavior right now because we still refuse to even *try* to
        cache pages with frames.

        No new tests. No change in behavior, and current tests continue to pass.

        * history/CachedFrame.cpp:
        (WebCore::CachedFrame::CachedFrame):
        (WebCore::CachedFrame::restore):
        (WebCore::CachedFrame::clear):
        (WebCore::CachedFrame::destroy):
        * history/CachedFrame.h:
        (WebCore::CachedFrame::isMainFrame):

        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::clear):
        (WebCore::FrameLoader::open):
        * loader/FrameLoader.h:

2009-10-08  David Kilzer  <ddkilzer@apple.com>

        Part 4 of 12: <rdar://problem/4948442> Sub-TLF: iPhone: Safari needs to support more page types in its back forward cache (Frames, Java, etc.)

        Merged ToT WebKit r47943.

    2009-09-01  Brady Eidson  <beidson@apple.com>

        Reviewed by Sam Weinig.

        Page Cache should support pages with frames
        https://bugs.webkit.org/show_bug.cgi?id=13631

        Things learned in the full task that this patch addresses:
        - The notions of clearing a CachedFrame and destroying a CachedFrame were two concepts that
          needed to be managed separately.
        - Once we start restoring pages with multiple CachedFrames, we'll have to be calling
          FrameLoader::open(CachedFrame&) multiple times with different CachedFrames, and this process
          will be guided by the CachedFrames themselves.

        No new tests. (No change in behavior, current layout tests pass)

        * history/CachedFrame.cpp:
        (WebCore::CachedFrame::CachedFrame):
        (WebCore::CachedFrame::~CachedFrame):
        (WebCore::CachedFrame::clear): Only clear pointers out.
        (WebCore::CachedFrame::destroy): Perform the destructive cleanup work here - Things that shouldn't
          occur simply by navigating back to a page with a CachedFrame.
        * history/CachedFrame.h:

        * history/CachedPage.cpp:
        (WebCore::CachedPage::~CachedPage):
        (WebCore::CachedPage::restore): Call clear() after restoring.
        (WebCore::CachedPage::clear):
        (WebCore::CachedPage::destroy):
        * history/CachedPage.h:

        * history/PageCache.cpp:
        (WebCore::PageCache::releaseAutoreleasedPagesNow): destroy() CachedPages that are being pruned,
          instead of clearing them.

        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::commitProvisionalLoad): Let the CachedPage clear() itself after restoring.
        (WebCore::FrameLoader::open): Don't ::open() the CachedFrame, as the CachedPage does that now.
        * loader/FrameLoader.h:  Add the friending so CachedPage and CachedFrame can better guide the process.
          Even though CachedFrame::restore() isn't used for now, it will be soon.

2009-10-08  David Kilzer  <ddkilzer@apple.com>

        Part 2 of 2: <rdar://problem/6531205> iPhone: Implement pageshow and pagehide events for b/f cache

        Merged ToT WebKit r47824.

    2009-08-26  Alexey Proskuryakov  <ap@apple.com>

        Reviewed by Adele Peterson.

        https://bugs.webkit.org/show_bug.cgi?id=28758
        <rdar://problem/6440869> Implement pageshow and pagehide events for b/f cache (28758)

        Tests: fast/events/pageshow-pagehide-on-back-cached.html
               fast/events/pageshow-pagehide-on-back-uncached.html
               fast/events/pageshow-pagehide.html

        * loader/FrameLoader.cpp: (WebCore::FrameLoader::stopLoading): Dispatch pagehide event
        (this function is called both when a document goes away, and when it goes to b/f cache).

        * page/DOMWindow.cpp:
        (WebCore::DOMWindow::dispatchAllPendingUnloadEvents): Dispatch pagehide right before unload.
        (WebCore::DOMWindow::dispatchPageTransitionEvent): Do what it takes to add a new event handler
        that can be installed on Window object.
        (WebCore::DOMWindow::onpagehide): Ditto.
        (WebCore::DOMWindow::setOnpagehide): Ditto.
        (WebCore::DOMWindow::onpageshow): Ditto.
        (WebCore::DOMWindow::setOnpageshow): Ditto.

        * history/CachedFrame.cpp: (WebCore::CachedFrame::restore): Dispatch pageshow for a page
        that isn't being restored from cache.

        * dom/PageTransitionEvent.cpp: Added.
        (WebCore::PageTransitionEvent::PageTransitionEvent):
        (WebCore::PageTransitionEvent::~PageTransitionEvent):
        (WebCore::PageTransitionEvent::initPageTransitionEvent):
        * dom/PageTransitionEvent.h: Added.
        (WebCore::PageTransitionEvent::create):
        (WebCore::PageTransitionEvent::isPageTransitionEvent):
        (WebCore::PageTransitionEvent::persisted):
        * dom/PageTransitionEvent.idl: Added.
        Add event class implementation.

        * html/HTMLBodyElement.cpp: (WebCore::HTMLBodyElement::parseMappedAttribute): Support
        inline listener definition (note that adding listeners to document.body programmatically
        is not supported, matching Firefox).

        * dom/Document.cpp:
        (WebCore::Document::implicitClose): Dispatch pageshow event right before load event.
        (WebCore::Document::dispatchPageTransitionEvent): Do what it takes to add a new event for
        Docuemnt.
        (WebCore::Document::createEvent): Ditto.

        * dom/Document.h: Added dispatchPageTransitionEvent.

        * DerivedSources.make:
        * GNUmakefile.am:
        * WebCore.gypi:
        * WebCore.pro:
        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.xcodeproj/project.pbxproj:
        * WebCoreSources.bkl:
        * bindings/js/JSEventCustom.cpp: (WebCore::toJS):
        * dom/Event.cpp: (WebCore::Event::isPageTransitionEvent):
        * dom/Event.h:
        * dom/EventNames.h:
        * html/HTMLAttributeNames.in:
        * page/DOMWindow.h:
        * page/DOMWindow.idl:
        Do what it takes to add a new event type.

2009-10-08  David Kilzer  <ddkilzer@apple.com>

        Part 3 of 12: <rdar://problem/4948442> Sub-TLF: iPhone: Safari needs to support more page types in its back forward cache (Frames, Java, etc.)

        Merged ToT WebKit r47772.

    2009-08-25  Dmitry Titov  <dimich@chromium.org>

        Reviewed by Brady Eidson.

        Timers from cached pages fire instantly rather than the after the specified timeout delay
        https://bugs.webkit.org/show_bug.cgi?id=28683

        Test: fast/dom/Window/timer-resume-on-navigation-back.html

        * history/CachedPage.cpp:
        (WebCore::CachedPage::restore): Remove duplicated Frame::restore() call, since
            it should be done only once in FrameLoader::open(cachedFrame)
        * page/DOMTimer.cpp: Added a debug-only flag and ASSERT to catch out-of-order suspense/restore.
        (WebCore::DOMTimer::DOMTimer): Ditto.
        (WebCore::DOMTimer::suspend): Ditto.
        (WebCore::DOMTimer::resume): Ditto.
        * page/DOMTimer.h: Ditto.

2009-10-08  David Kilzer  <ddkilzer@apple.com>

        Part 2 of 12: <rdar://problem/4948442> Sub-TLF: iPhone: Safari needs to support more page types in its back forward cache (Frames, Java, etc.)

        Merged ToT WebKit r47722.

    2009-08-24  Ada Chan  <adachan@apple.com>

        Reviewed by Steve Falkenburg.

        Make sure we use the current FrameView's frame rect when
        going back to a cached page.

        https://bugs.webkit.org/show_bug.cgi?id=28659

        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::open):

2009-10-08  David Kilzer  <ddkilzer@apple.com>

        Part 1 of 12: <rdar://problem/4948442> Sub-TLF: iPhone: Safari needs to support more page types in its back forward cache (Frames, Java, etc.)

        Merged ToT WebKit r47407.

    2009-08-17  Brady Eidson  <beidson@apple.com>

        Reviewed by Sam Weinig.

        Some cleanup towards https://bugs.webkit.org/show_bug.cgi?id=13631
        Page Cache should support pages with frames.

        - Re-factor all remaining page cache code out of DocumentLoader, as CachedPage/CacheFrame loads
          are solely the responsibility of FrameLoader.
        - Enhance some page cache related Logging to help development.

        * inspector/InspectorController.cpp:
        (WebCore::InspectorController::didCommitLoad):
        (WebCore::InspectorController::identifierForInitialRequest):

        * loader/DocumentLoader.cpp:
        (WebCore::DocumentLoader::DocumentLoader):
        * loader/DocumentLoader.h:

        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::FrameLoader):
        (WebCore::FrameLoader::commitProvisionalLoad):
        (WebCore::FrameLoader::continueLoadAfterWillSubmitForm):
        (WebCore::FrameLoader::loadProvisionalItemFromCachedPage):
        * loader/FrameLoader.h:
        (WebCore::FrameLoader::isLoadingFromCachedPage):

2009-10-07  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by David Kilzer.

        Now only WK* code (and WAKClipView) access WKClipViewRef directly.

        * WebCore.iPhone.exp:
        * platform/iphone/ScrollViewIPhone.mm:
        * wak/WAKScrollView.mm:
        (-[WAKScrollView documentVisibleRect]):
        (-[WAKScrollView documentView]):
        * wak/WKClipView.c:

2009-10-06  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Dave Kilzer.

        <rdar://problem/7282019> Cache contents purged after every paint in the simulator

        Fix integer overflow in hasEnoughMemoryFor(), which caused the sim to report
        that there was never enough memory, and purge the cache on every paint.

        * platform/iphone/SystemMemoryIPhone.cpp:
        (WebCore::hasEnoughMemoryFor):

2009-10-06  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by David Kilzer.

        Add -[WAKWindow makeKeyWindow]. Nothing calls it yet, but it will be used.

        * wak/WAKWindow.h:
        * wak/WAKWindow.mm:
        (-[WAKWindow isKeyWindow]):
        (-[WAKWindow makeKeyWindow]):

2009-10-06  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by Simon Fraser.

        Remove calls to NSWindow private methods that were removed from WAKWindow.

        * platform/iphone/WidgetIPhone.mm:
        (WebCore::safeRemoveFromSuperview):
        (WebCore::Widget::addToSuperview):

2009-10-06  Antti Koivisto  <antti@apple.com>

        Reviewed by Dave Carson, Dave Kilzer, Greg Bolsinga.

        <rdar://problem/7229725> DOM API for evaluation link element media queries

        [DOMHTMLLinkElement _mediaQueryMatchesForOrientation:] returns true if the
        media query evaluates true for a given orientation. Orientation is one of

        WebMediaQueryOrientationCurrent (the real UI orientation at the moment)
        WebMediaQueryOrientationPortrait
        WebMediaQueryOrientationLandscape

        * bindings/objc/DOM.mm:
        (-[DOMHTMLLinkElement _mediaQueryMatchesForOrientation:]):
        * bindings/objc/DOMPrivate.h:

2009-10-06  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by Aaron Golden.

        Remove WAKWindow methods that are not needed.

        * wak/WAKWindow.h: Remove unused methods.
        * wak/WAKWindow.mm: Remove unused methods.
        (-[WAKWindow dealloc]): Clean up formatting.
        (-[WAKWindow isKeyWindow]): Ditto.
        (-[WAKWindow keyViewSelectionDirection]): Ditto.

2009-10-02  Justin Garcia  <justin.garcia@apple.com>

        Reviewed by Brad Moore.

        <rdar://problem/7063918> REGRESSION: MERGE: Cannot move insertion point to first character in a note

        The WebKit merge brought with it heavily refactored positionForCoordinates functions, so the code
        that constrained positions to the nearest editable region no longer had a home.

        * rendering/RenderBlock.cpp:
        (WebCore::positionForPointRespectingEditingBoundaries):
        (WebCore::RenderBlock::positionForPointWithInlineChildren):

2009-10-02  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7087972> REGRESSION (2.2.1-3.0): UIWebView document preview should work with data as well as URL requests

        Reviewed by Greg Bolsinga and David Carson.

        * loader/MainResourceLoader.cpp:
        (WebCore::MainResourceLoader::loadNow): Added code to create a
        ResourceHandle and clear m_substituteData if the user tried to
        load a document that needs to be converted by MobileQuickLook.
        * platform/network/iphone/MobileQuickLook.h:
        (WebCore::registerQLPreviewConverterIfNeeded): Added.
        * platform/network/iphone/MobileQuickLook.mm:
        (WebCore::registerQLPreviewConverterIfNeeded): Added.  Returns a
        ResourceRequest object and does the necessary setup if the data
        being loaded needs to be converted, else returns 0.
        * platform/network/iphone/WebCoreURLResponseIPhone.h: Make
        header safe for including in C++ source.

2009-10-01  Eric Carlson  <eric.carlson@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/6732624> Sub-TLF: <video> tag should playback video in the context of a web page

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::HTMLMediaElement): Remove m_inFullScreen.
        (WebCore::HTMLMediaElement::pausedForUserInteraction): Remove iPhone specific code, we don't
        require fullscreen for playback any more.
        (WebCore::HTMLMediaElement::deliverNotification): Don't track fullscreen state.
        * html/HTMLMediaElement.h:

        * platform/graphics/iphone/MediaPlayerPrivateIPhone.mm:
        (WebCore::MediaPlayerPrivateiPhone::paused): Don't restrict playback to fullscreen.
        (WebCore::MediaPlayerPrivateiPhone::rate): Ditto.
        (WebCore::MediaPlayerPrivateiPhone::setRate): Always pass requested rate to the media engine.
        (WebCore::mimeTypeCache): Update MIME types list to everything currently supported by the
        media engine. Only initialize the list once.
        (WebCore::MediaPlayerPrivateiPhone::deliverNotification): We don't require fullscreen to play,
        but an element can only play when it has focus so change ready and network states when we gain
        or lose focus.

        * platform/graphics/mac/MediaPlayerProxy.h: Add MediaPlayerNotificationRateDidChange,
        MediaPlayerNotificationGainFocus, and MediaPlayerNotificationLoseFocus.

2009-10-01  Eric Carlson  <eric.carlson@apple.com>

        Reviewed by David Kilzer & Simon Fraser.

        <rdar://problem/7252009> Implement PassRefPtr<TimeRanges> MediaPlayerPrivateiPhone::buffered() const

        * platform/graphics/iphone/MediaPlayerPrivateIPhone.mm:
        (WebCore::MediaPlayerPrivateiPhone::buffered): Return buffered ranges now that QT plug-in
        implements _bufferedTimeRanges.

2009-10-01  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/7265966> Add WKGetContentsScale instead of using WKGetScreenSize to determine scale

        This is a follow-up. It is the contentsScale property of the CALayer that is SPI that needs to be in WKSI.

        * WebCore.iPhone.exp: Use wkSetLayerContentsScale instead of wkGetContentsScale.
        * platform/iphone/TileCache.mm: Ditto.
        (WebCore::TileCache::Tile::Tile):
        * platform/iphone/WebCoreSystemInterfaceIPhone.mm: Ditto.
        * platform/mac/WebCoreSystemInterface.h:

2009-09-30  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7239662> iPhone: CrashTracer: [USER] 1 crash in Safari at com.apple.WebCore • WebCore::ThreadTimers::fireTimers + 135 • abort() called

        Merged ToT WebKit r48661 and r48687.

    2009-09-23  Darin Adler  <darin@apple.com>

        Reviewed by Sam Weinig.

        Crash when website does a history.back() followed by an alert()
        https://bugs.webkit.org/show_bug.cgi?id=29686
        rdar://problem/6984996

        When loading is deferred, we need to defer timer-based loads
        too, not just networking-driven loads. Otherwise we can get
        syncronouse navigation while running a script, which leads to
        crashes and other badness.

        This patch includes a manual test; an automated test may be
        possible some time in the future.

        * dom/Document.cpp:
        (WebCore::Document::processHttpEquiv): Use scheduleLocationChange
        instead of scheduleHTTPRedirection to implement the navigation
        needed for x-frame-options.

        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::FrameLoader): Updated for data members with
        new names and new data members.
        (WebCore::FrameLoader::setDefersLoading): When turning deferral
        off, call startRedirectionTimer and startCheckCompleteTimer, since
        either of them might have been fired and ignored while defersLoading
        was true.
        (WebCore::FrameLoader::clear): Updated for replacement of the
        m_checkCompletedTimer and m_checkLoadCompleteTimer timers.
        (WebCore::FrameLoader::allAncestorsAreComplete): Added.
        (WebCore::FrameLoader::checkCompleted): Added code to set
        m_shouldCallCheckCompleted to false. Changed code that calls
        startRedirectionTimer to call it unconditionally, since that
        function now knows when to do work and doesn't expect callers
        to handle that any more.
        (WebCore::FrameLoader::checkTimerFired): Added. Replaces the old
        timer fired callbacks. Calls checkCompleted and checkLoadComplete
        as appropriate, but not when defersLoading is true.
        (WebCore::FrameLoader::startCheckCompleteTimer): Added. Replaces
        the two different calls to start timers before. Only starts the
        timers if they are needed.
        (WebCore::FrameLoader::scheduleCheckCompleted): Changed to call
        startCheckCompleteTimer after setting boolean.
        (WebCore::FrameLoader::scheduleCheckLoadComplete): Ditto.
        (WebCore::FrameLoader::scheduleHistoryNavigation): Removed
        canGoBackOrForward check. The logic works more naturally when
        we don't do anything until the timer fires.
        (WebCore::FrameLoader::redirectionTimerFired): Do nothing if
        defersLoading is true. Also moved canGoBackOrForward check here.
        (WebCore::FrameLoader::scheduleRedirection): Changed code that
        calls startRedirectionTimer to do so unconditionally. That
        function now handles the rules about when to start the timer
        rather than expecting the caller to do so.
        (WebCore::FrameLoader::startRedirectionTimer): Added code to
        handle the case where there is no redirection scheduled,
        where the timer is already active, or where this is a classic
        redirection and there is an ancestor that has not yet completed
        loading.
        (WebCore::FrameLoader::completed): Call startRedirectionTimer
        here directly instead of calling a cover named parentCompleted.
        Hooray! One less function in the giant FrameLoader class!
        (WebCore::FrameLoader::checkLoadComplete): Added code to set
        m_shouldCallCheckLoadComplete to false.

        * loader/FrameLoader.h: Replaced the two functions
        checkCompletedTimerFired and checkLoadCompleteTimerFired with
        one function, checkTimerFired. Removed the parentCompleted
        function. Added the startCheckCompleteTimer and
        allAncestorsAreComplete functions. Replaced the
        m_checkCompletedTimer and m_checkLoadCompleteTimer data
        members with m_checkTimer, m_shouldCallCheckCompleted, and
        m_shouldCallCheckLoadComplete.

        * manual-tests/go-back-after-alert.html: Added.
        * manual-tests/resources/alert-and-go-back.html: Added.

    2009-09-22  Darin Adler  <darin@apple.com>

        Reviewed by Sam Weinig.

        Tighten up the ScheduledRedirection machinery to prepare for a bug fix
        https://bugs.webkit.org/show_bug.cgi?id=29663

        * loader/FrameLoader.cpp:
        (WebCore::ScheduledRedirection::ScheduledRedirection): Added a boolean,
        initialized to false, to keep track if the redirection has been
        communicated to the client.
        (WebCore::FrameLoader::stopLoading): Tweaked a comment.
        (WebCore::FrameLoader::cancelRedirection): Removed code to clear
        m_scheduledRedirection.clear since stopRedirectionTimer does that now.
        (WebCore::FrameLoader::allChildrenAreComplete): Added.
        (WebCore::FrameLoader::checkCompleted): Use allChildrenAreComplete
        function for clarity.
        (WebCore::FrameLoader::checkCallImplicitClose): Ditto.
        (WebCore::FrameLoader::scheduleRedirection): Changed to take a PassOwnPtr.
        (WebCore::FrameLoader::startRedirectionTimer): Added code to set the
        toldClient flag and not call clientRedirected a second time if it is set.
        (WebCore::FrameLoader::stopRedirectionTimer): Changed so this can be safely
        called multiple times and it will call clientRedirectCancelledOrFinished
        only once.

        * loader/FrameLoader.h: Changed scheduleRedirection to be a PassOwnPtr.
        Added allChildrenAreComplete function.

2009-09-30  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/7265966> Add WKGetContentsScale instead of using WKGetScreenSize to determine scale

        * WebCore.iPhone.exp: Add wkGetContentsScale.
        * platform/iphone/TileCache.mm: Use the new wkGetContentsScale.
        (WebCore::TileCache::Tile::Tile):
        * platform/iphone/WebCoreSystemInterfaceIPhone.mm: Define wkGetContentsScale.
        * platform/mac/WebCoreSystemInterface.h: Declare wkGetContentsScale.

2009-09-30  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/7265725> Move uses of GSGetDeviceName and GSGetMainScreenSize to WKSI

        Remove unused WebCore::isWildcat() since it is not used. Add and use wkGetScreenSize
        in place of calling GSGetMainScreenSize.

        * WebCore.iPhone.exp: Remove WebCore::isWildcat, add wkGetScreenSize
        * config.h: Remove WebCore::isWildcat.
        * dom/Document.cpp: Use wkGetScreenSize.
        (WebCore::setViewportFeature):
        * platform/iphone/PlatformScreenIPhone.mm: Use wkGetScreenSize. Remove WebCore::isWildcat()
        (WebCore::screenRect):
        * platform/iphone/TileCache.mm: Use wkGetScreenSize.
        (WebCore::TileCache::Tile::Tile):
        * platform/iphone/WebCoreSystemInterfaceIPhone.mm: Define wkGetScreenSize.
        * platform/mac/WebCoreSystemInterface.h: Declare wkGetScreenSize.

2009-09-29  David Kilzer  <ddkilzer@apple.com>

        Part 2: <rdar://problem/7255392> WebCore change to enable llvm-gcc compilation

        Reviewed by David Carson.

        * wak/WebCoreThread.mm:
        (RunWebThread): Added a bogus return statement to make llvm-gcc
        even happier than it was without the NO_RETURN attribute.

2009-09-29  Antti Koivisto  <antti@apple.com>

        Reviewed by Greg Bolsinga.

        Remove WKWindowSetOffscreen(), it is not used for anything.

        * WebCore.iPhone.exp:
        * wak/WKWindow.h:
        * wak/WKWindow.mm:
        (WKWindowCreate):

2009-09-29  Antti Koivisto  <antti@apple.com>

        Reviewed Greg Bolsinga.

        <rdar://problem/7261867> Mouse down events hit tested twice for WKView

        Move the event handling out from WKWindow, thinning it further. Clean up the code.

        * wak/WAKWindow.h:
        * wak/WAKWindow.mm:
        (-[WAKWindow sendEvent:]):
        (+[WAKWindow currentEvent]):
        * wak/WKWindow.mm:
        (WKWindowSendEvent):
        (WKEventGetCurrentEvent):

2009-09-29  Ken Kocienda  <kocienda@apple.com>

        Fix for this bug:
        <rdar://problem/7237745> spelling correction - should have a way to identify words that are not in the dictionary

        Reviewed by Brad Moore and Cameron Zwarich.

        * WebCore.iPhone.exp: Export markMisspellingsAfterTypingToPosition and isContinuousSpellCheckingEnabled
          functions. Remove obsolete addAutoCorrectMarker function.
        * WebCore.xcodeproj/project.pbxproj: Add SpellingDot.png graphic so iPhone can draw AppKit-style spelling marker.
        * dom/Document.cpp: Remove obsolete iPhone-only addition: addAutoCorrectMarker.
        * dom/Document.h: Ditto.
        * editing/Editor.cpp:
        (WebCore::Editor::markMisspellingsAfterTypingToPosition): Enable continuous spellchecking code. All that
          is required is to move some preprocessor directives to get existing code to run on the iPhone.
        (WebCore::Editor::markAllMisspellingsAndBadGrammarInRanges): Ditto.
        (WebCore::Editor::changeBackToReplacedString): Ditto.
        (WebCore::Editor::markMisspellingsAndBadGrammar): Ditto.
        * editing/Editor.h: Ditto.
        * editing/TypingCommand.cpp:
        (WebCore::TypingCommand::markMisspellingsAfterTyping): Ditto. In addition, this function needs to
          take into account that the notion of word boundaries (and the code to implement boundary-finding)
          is different on iPhone than it is on the desktop.
        * page/EditorClient.h: Ditto.
        * page/Frame.cpp:
        (WebCore::Frame::respondToChangedSelection): Ditto. In addition, as with TypingCommand.cpp, this function needs to
          take into account that the notion of word boundaries (and the code to implement boundary-finding)
          is different on iPhone than it is on the desktop.
        * rendering/InlineTextBox.cpp:
        (WebCore::InlineTextBox::paint): Remove iPhone-only change which disabled this code.
          iPhone will now run the same code as other platforms.


2009-09-25  Brad Moore  <bradm@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/6501422> TLF: "public" keyboard API

        Adding a bit more functionality on WebVisiblePosition to match suggested text input changes.

        * WebCore.iPhone.exp:  Exporting WebCore::VisiblePosition::right()

2009-09-26  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7255392> WebCore change to enable llvm-gcc compilation

        Reviewed by Greg Bolsinga.

        * wak/WebCoreThread.mm:
        (RunWebThread): Added __llvm__ check around NO_RETURN attribute
        to make llvm-gcc happy.

2009-09-25  Antti Koivisto  <antti@apple.com>

        Reviewed by Dave Kilzer and Dave Carson.

        <rdar://problem/7255013> Make tile grid centering work when tile size is smaller than the visible rect

        Make the centering function more generic.

        * platform/iphone/TileCache.mm:
        (WebCore::TileCache::centerTileGridOrigin):

2009-09-25  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7238269> iPhone: Crash when clicking link in unload handler (29525)

        Merged ToT WebKit r48572.

    2009-09-20  Adam Barth  <abarth@webkit.org>

        Reviewed by Maciej Stachowiak.

        Crash when clicking link in unload handler
        https://bugs.webkit.org/show_bug.cgi?id=29525

        Test that the first navigation always wins when the page tries to start
        a new navigation in an unload handler.

        Tests: fast/loader/unload-form-about-blank.html
               fast/loader/unload-form-post-about-blank.html
               fast/loader/unload-form-post.html
               fast/loader/unload-form.html
               fast/loader/unload-hyperlink.html
               fast/loader/unload-javascript-url.html
               fast/loader/unload-reload.html
               fast/loader/unload-window-location.html

        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::loadURL):
        (WebCore::FrameLoader::loadWithDocumentLoader):

2009-09-25  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7227626> iPhone: Assorted FTPDirectoryParser vulnerabilities (29294)

        Merged ToT WebKit r48725.

    2009-09-24  Brady Eidson  <beidson@apple.com>

        Reviewed by Sam Weinig.

        Merge changes from Mozilla's FTP directory parser.
        <rdar://problem/7227620> and https://bugs.webkit.org/show_bug.cgi?id=29294

        FTP layout tests not possible at this time.
        https://bugs.webkit.org/show_bug.cgi?id=29719 tracks making them possible.

        * loader/FTPDirectoryParser.cpp:
        (WebCore::ParsingFailed):
        (WebCore::parseOneFTPLine):

2009-09-24  Simon Fraser  <simon.fraser@apple.com>

        Rubber-stamped by Dave Kilzer.

        Merge TOT WebKit r48596

    2009-09-21  Eric Carlson  <eric.carlson@apple.com>

            Reviewed by Brady Eidson.

            HTMLMediaElement: media file should not reload when page comes out of page cache
            https://bugs.webkit.org/show_bug.cgi?id=29604

            Test: media/restore-from-page-cache.html

            * html/HTMLMediaElement.cpp:
            (WebCore::HTMLMediaElement::userCancelledLoad): Do nothing unless the element
            is still loading. Only fire an 'emptied' event if the readyState is HAVE_NOTHING,
            otherwise set the network state to NETWORK_IDLE.

2009-09-24  Simon Fraser  <simon.fraser@apple.com>

        Rubber-stamped by Dave Kilzer.

        Merge TOT WebKit r48519

    2009-09-18  Eric Carlson  <eric.carlson@apple.com>

            Reviewed by Darin Adler.

            NULL check HTMLMediaElement::m_playedTimeRanges.
            Fix for https://bugs.webkit.org/show_bug.cgi?id=29494

            * html/HTMLMediaElement.cpp:
            (WebCore::HTMLMediaElement::addPlayedRange): New. Create m_playedTimeRanges if
            necessary, add range specified.
            (WebCore::HTMLMediaElement::seek): Use addPlayedRange.
            (WebCore::HTMLMediaElement::played): Use addPlayedRange. Change time comparison
            to be more readable.
            (WebCore::HTMLMediaElement::updatePlayState): Ditto.
            * html/HTMLMediaElement.h:

2009-09-24  Simon Fraser  <simon.fraser@apple.com>

        Rubber-stamped by Dave Kilzer.

        Merge TOT WebKit r45879

    2009-07-14  Brent Fulgham  <bfulgham@webkit.org>

            Correct failing tests after r45875.  The original patch did not
            test the m_player member for null, causing crashes.  This will
            happen fairly frequently in real use.  Was this original patch
            ever tested?
            https://bugs.webkit.org/show_bug.cgi?id=27246

            Test via existing media tests.

            * html/HTMLMediaElement.cpp:
            (WebCore::HTMLMediaElement::supportsFullscreen): Check for null pointer.
            (WebCore::HTMLMediaElement::supportsSave): Check for null pointer.

2009-09-24  Simon Fraser  <simon.fraser@apple.com>

        Rubber-stamped by Dave Kilzer.

        Merge TOT WebKit r45875

    2009-07-14  Albert J. Wong  <ajwong@chromium.org>

            Reviewed by Darin Adler.

            Add HTMLMediaElement::supportSave() and a
            HitTestResult::absoluteMediaURL() functions
            https://bugs.webkit.org/show_bug.cgi?id=27246

            Added an implementation of supportsSave() into HTMLMediaElement
            that delegates to MediaPlayerPrivateImpl so that the media engine
            is able to signal whether or not a media source supports saving.

            Also added a function to HitTestResult that allows for retrieval
            of the currentSrc associated with the "hit" media element.

            These functions are just pipeing with no visible UI change so there
            are no related layout test changes.

            * html/HTMLMediaElement.cpp:
            (WebCore::HTMLMediaElement::supportsFullscreen):
            (WebCore::HTMLMediaElement::supportsSave):
            * html/HTMLMediaElement.h:
            * platform/graphics/MediaPlayer.cpp:
            (WebCore::MediaPlayer::supportsSave):
            * platform/graphics/MediaPlayer.h:
            * platform/graphics/MediaPlayerPrivate.h:
            (WebCore::MediaPlayerPrivateInterface::supportsFullscreen):
            (WebCore::MediaPlayerPrivateInterface::supportsSave):
            * rendering/HitTestResult.cpp:
            (WebCore::HitTestResult::altDisplayString):
            (WebCore::HitTestResult::absoluteMediaURL):
            * rendering/HitTestResult.h:

2009-09-24  Simon Fraser  <simon.fraser@apple.com>

        Rubber-stamped by Dave Kilzer.

        Merge TOT WebKit r48267

    2009-09-10  Alpha Lam  <hclam@chromium.org>

            Reviewed by Eric Carlson.

            HTMLMediaElement buffered attribute should report a list of time ranges
            https://bugs.webkit.org/show_bug.cgi?id=29041

            Changed MediaPlayerPrivateInterface and MediaPlayer's definition to
            report a list of buffered time ranges as WebCore::TimeRanges. This
            change also got rid of the maxTimeBuffered() method.

            No new tests since this is a API change.

            * html/HTMLMediaElement.cpp:
            (WebCore::HTMLMediaElement::percentLoaded):
            Use MediaPlaier::buffered() instead of maxTimeBuffered().
            (WebCore::HTMLMediaElement::buffered):
            ditto.
            * platform/graphics/MediaPlayer.cpp:
            (WebCore::NullMediaPlayerPrivate::buffered):
            Use MediaPlayerPrivateInterface::buffered() instead of maxTimeBuffered().
            (WebCore::MediaPlayer::buffered):
            ditto.
            * platform/graphics/MediaPlayer.h:
            Removed maxTimeBuffered() and defines PassRefPtr<TimeRanges> buffered().
            * platform/graphics/MediaPlayerPrivate.h:
            ditto.
            * platform/graphics/gtk/MediaPlayerPrivateGStreamer.cpp:
            Implements PassRefPtr<TimeRanges> buffered();
            * platform/graphics/gtk/MediaPlayerPrivateGStreamer.h:
            Removed maxTimeBuffered() and defines PassRefPtr<TimeRanges> buffered().
            * platform/graphics/mac/MediaPlayerPrivateQTKit.h:
            Removed maxTimeBuffered() and defines PassRefPtr<TimeRanges> buffered().
            * platform/graphics/mac/MediaPlayerPrivateQTKit.mm:
            (WebCore::MediaPlayerPrivate::buffered):
            Implementation of buffered().
            * platform/graphics/qt/MediaPlayerPrivatePhonon.cpp:
            Implements PassRefPtr<TimeRanegs> buffered().
            * platform/graphics/qt/MediaPlayerPrivatePhonon.h:
            Removed maxTimeBuffered() and defines PassRefPtr<TimeRanges> buffered().
            * platform/graphics/win/MediaPlayerPrivateQuickTimeWin.cpp:
            Implements PassRefPtr<TimeRanges> buffered().
            * platform/graphics/win/MediaPlayerPrivateQuickTimeWin.h:
            Removed maxTimeBuffered() and defines PassRefPtr<TimeRanges> buffered().
            * platform/graphics/wince/MediaPlayerPrivateWince.h:
            ditto.
            * rendering/RenderThemeChromiumMac.mm:
            (WebCore::RenderThemeChromiumMac::paintMediaSliderTrack):
            Use buffered() instead of maxTimeBuffered().
            * rendering/RenderThemeChromiumSkia.cpp:
            ditto.
            * rendering/RenderThemeMac.mm:
            (WebCore::RenderThemeMac::paintMediaSliderTrack):
            ditto.

2009-09-24  Simon Fraser  <simon.fraser@apple.com>

        Rubber-stamped by Dave Kilzer.

        Merge TOT WebKit r46581

    2009-07-30  Eric Carlson  <eric.carlson@apple.com>

            Reviewed by Simon Fraser.

            Video elements fires another "load" event when attached to DOM
            https://bugs.webkit.org/show_bug.cgi?id=27623

            Test: media/media-load-event.html

            * html/HTMLMediaElement.cpp:
            (WebCore::HTMLMediaElement::insertedIntoDocument):
                Only schedule load when element's network state is NETWORK_EMPTY.

2009-09-24  Simon Fraser  <simon.fraser@apple.com>

        Rubber-stamped by Dave Kilzer.

        Merge TOT WebKit r47431

    2009-08-18  Eric Carlson  <eric.carlson@apple.com>

            Reviewed by Simon Fraser.

            HTMLMediaElement should fire 'progress' event before 'load'
            https://bugs.webkit.org/show_bug.cgi?id=28314

            Test: media/progress-event-at-least-one.html

            * html/HTMLMediaElement.cpp:
            (WebCore::HTMLMediaElement::setNetworkState):
                Schedule 'progress' event before 'load'.

2009-09-24  Simon Fraser  <simon.fraser@apple.com>

        Rubber-stamped by Dave Kilzer.

        Merge TOT WebKit r47459

    2009-08-18  Anders Carlsson  <andersca@apple.com>

            Reviewed by Adele Peterson.

            <rdar://problem/7135588> HTMLMediaElement should ask WebPolicyLoadDelegate before loading resource

            * html/HTMLMediaElement.cpp:
            (WebCore::HTMLMediaElement::isSafeToLoadURL):
            Call FrameLoaderClient::shouldLoadMediaElementURL.

            * loader/FrameLoaderClient.h:
            (WebCore::FrameLoaderClient::shouldLoadMediaElementURL):
            Return true by default.

2009-09-24  Simon Fraser  <simon.fraser@apple.com>

        Rubber-stamped by Dave Kilzer.

        Merge TOT WebKit r47515

    2009-08-19  Eric Carlson  <eric.carlson@apple.com>

            Reviewed by Eric Seidel.

            Sound button appears in controller with movies that have no audio
            https://bugs.webkit.org/show_bug.cgi?id=28464

            Test: media/video-no-audio.html

            * html/HTMLMediaElement.cpp:
            * html/HTMLMediaElement.h:
            (WebCore::HTMLMediaElement::hasAudio):
                Added hasAudio.

            * platform/graphics/MediaPlayer.h:
            * platform/graphics/MediaPlayer.cpp:
            (WebCore::NullMediaPlayerPrivate::hasAudio):
            (WebCore::MediaPlayer::hasVideo):
                Make const.
            (WebCore::MediaPlayer::hasAudio):
                Added hasAudio.

            * platform/graphics/MediaPlayerPrivate.h:
                Add hasAudio.

            * platform/graphics/gtk/MediaPlayerPrivateGStreamer.h:
            * platform/graphics/gtk/MediaPlayerPrivateGStreamer.cpp:
            (WebCore::MediaPlayerPrivate::hasAudio):
                Ditto.

            * platform/graphics/mac/MediaPlayerPrivateQTKit.h:
            * platform/graphics/mac/MediaPlayerPrivateQTKit.mm:
            (WebCore::MediaPlayerPrivate::hasAudio):
                Ditto.

            * platform/graphics/qt/MediaPlayerPrivatePhonon.h:
            * platform/graphics/qt/MediaPlayerPrivatePhonon.cpp:
            (WebCore::MediaPlayerPrivate::hasAudio):
                Ditto.

            * platform/graphics/win/MediaPlayerPrivateQuickTimeWin.h:
            * platform/graphics/win/MediaPlayerPrivateQuickTimeWin.cpp:
            (WebCore::MediaPlayerPrivate::hasAudio):
                Ditto.

            * platform/graphics/win/QTMovieWin.h:
            * platform/graphics/win/QTMovieWin.cpp:
            (QTMovieWin::hasAudio):
                Ditto.

            * rendering/MediaControlElements.cpp:
            (WebCore::MediaControlMuteButtonElement::disabled):
                New, return true if media element doesn't have audio.
            (WebCore::MediaControlMuteButtonElement::rendererIsNeeded):
                Renderer is not needed if element has no audio.
            * rendering/MediaControlElements.h:
            (WebCore::MediaControlInputElement::disabled):

            * rendering/RenderThemeMac.mm:
            (WebCore::getMediaUIPartStateFlags):
                Return MediaUIPartDisabledFlag if node is disabled.

2009-09-24  Simon Fraser  <simon.fraser@apple.com>

        Rubber-stamped by Dave Kilzer.

        Merge TOT WebKit r47579

    2009-08-20  Eric Carlson  <eric.carlson@apple.com>

            Reviewed by Anders Carlsson.

            HTML5 media elements must fire 'loadend' progress event
            https://bugs.webkit.org/show_bug.cgi?id=28419

            * dom/EventNames.h:
                Define loadend.

            * html/HTMLMediaElement.cpp:
            (WebCore::HTMLMediaElement::parseMappedAttribute):
                Deal with onloadend.
            (WebCore::HTMLMediaElement::loadInternal):
                Post 'loadend' immediately after 'abort'.
            (WebCore::HTMLMediaElement::noneSupported):
                Post 'loadend' immediately after 'error'.
            (WebCore::HTMLMediaElement::mediaEngineError):
                Ditto.
            (WebCore::HTMLMediaElement::setNetworkState):
                Post 'loadend' immediately after 'load'.
            (WebCore::HTMLMediaElement::userCancelledLoad):
                Post 'loadend' immediately after 'abort'.

2009-09-24  Simon Fraser  <simon.fraser@apple.com>

        Rubber-stamped by Dave Kilzer.

        Merge TOT WebKit r47619

    2009-08-20  Albert J. Wong  <ajwong@chromium.org>

            Reviewed by David Levin.

            HTML5 media elements do not fire waiting events correctly
            https://bugs.webkit.org/show_bug.cgi?id=28335

            Fire the waiting event before seeking, and fix a case where firing of
            the seeked event is missed when the ready state is changed during
            a seek.

            Added video-waiting-seeking.html into manual tests because not
            all platforms allow seeking into non-buffered ranges.

            * html/HTMLMediaElement.cpp:
            (WebCore::HTMLMediaElement::setReadyState): add support for
            waiting event when seeking.
            (WebCore::HTMLMediaElement::finishSeek): send seeked event
            whenever seeking finishes.
            (WebCore::HTMLMediaElement::mediaPlayerTimeChanged): dispatch to
            new function.
            * html/HTMLMediaElement.h:
            * manual-tests/video-waiting-seeking.html: Added.

2009-09-24  Simon Fraser  <simon.fraser@apple.com>

        Rubber-stamped by Dave Kilzer.

        Merge TOT WebKit r47801

    2009-08-26  Eric Carlson  <eric.carlson@apple.com>

            Reviewed by Simon Fraser.

            HTMLMediaElement sometimes loses events
            https://bugs.webkit.org/show_bug.cgi?id=28762
            <rdar://problem/7172437>

            A media element triggers the resource selection algorithm if 
            play() is called when the networkState attribute is NETWORK_EMPTY, but
            it also immediately queues 'play' and either 'waiting' or 'playing' events.
            One of the steps in preparing to load is to flush pending events, so those 
            events were lost if the load timer fired quickly enough. Fixed by deleting
            pending events before scheduling the load timer.

            Test: media/audio-play-event.html

            * html/HTMLMediaElement.cpp:
            (WebCore::HTMLMediaElement::scheduleLoad):
                Do nothing if the load timer is already scheduled. Call prepareForLoad so queue of
                pending events is flushed immediately.
            (WebCore::HTMLMediaElement::scheduleNextSourceChild):
                New, start the load timer without flushing pending events.
            (WebCore::HTMLMediaElement::load):
                Call prepareForLoad();
            (WebCore::HTMLMediaElement::prepareForLoad):
                New, load setup code moved from loadInternal.
            (WebCore::HTMLMediaElement::loadInternal):
                Moved some setup code to prepareForLoad so it can be invoked immediately before
                arming the load timer.
            (WebCore::HTMLMediaElement::setNetworkState):
                Call scheduleNextSourceChild instead of scheduleLoad as the later now clears
                pending events.
            * html/HTMLMediaElement.h:
                Declare scheduleNextSourceChild.

2009-09-24  Simon Fraser  <simon.fraser@apple.com>

        Rubber-stamped by Dave Kilzer.

        Merge TOT WebKit r46547

    2009-07-29  Chris Marrin  <cmarrin@apple.com>

            Reviewed by Simon Fraser.

            Adding -webkit-animation-play-state back in
            https://bugs.webkit.org/show_bug.cgi?id=26867

            We've decided to keep -webkit-animation-play-state. So this
            just adds back in the code from https://bugs.webkit.org/show_bug.cgi?id=22907.

            Test: animations/play-state.html

            * css/CSSComputedStyleDeclaration.cpp:
            (WebCore::):
            (WebCore::CSSComputedStyleDeclaration::getPropertyCSSValue):
            * css/CSSParser.cpp:
            (WebCore::CSSParser::parseValue):
            (WebCore::CSSParser::parseAnimationPlayState):
            (WebCore::CSSParser::parseAnimationProperty):
            * css/CSSParser.h:
            * css/CSSPropertyNames.in:
            * css/CSSStyleSelector.cpp:
            (WebCore::CSSStyleSelector::applyProperty):
            (WebCore::CSSStyleSelector::mapAnimationPlayState):
            * css/CSSStyleSelector.h:
            * platform/animation/Animation.h:
            * rendering/style/RenderStyleConstants.h:
            (WebCore::):

2009-09-23  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7239366> iPhone: Don't re-enter JavaScript after performing access checks (29531)

        Merged ToT WebKit r48619.

        Note that only the non-V8 files were merged.

    2009-09-21  Adam Barth  <abarth@webkit.org>

        Reviewed by Sam Weinig.

        Don't re-enter JavaScript after performing access checks
        https://bugs.webkit.org/show_bug.cgi?id=29531

        Moved the access check slightly later in this functions to avoid
        re-entering the JavaScript interpreter (typically via toString)
        after performing the access check.

        I can't really think of a meaningful test for this change.  It's more
        security hygiene.

        * bindings/js/JSDOMWindowCustom.cpp:
        (WebCore::JSDOMWindow::setLocation):
        (WebCore::JSDOMWindow::open):
        (WebCore::JSDOMWindow::showModalDialog):
        * bindings/js/JSLocationCustom.cpp:
        (WebCore::JSLocation::setHref):
        (WebCore::JSLocation::replace):
        (WebCore::JSLocation::assign):
        * bindings/v8/custom/V8DOMWindowCustom.cpp:
        (WebCore::V8Custom::WindowSetTimeoutImpl):
        (WebCore::if):
        (CALLBACK_FUNC_DECL):
        (V8Custom::WindowSetLocation):
        (V8Custom::ClearTimeoutImpl):
        * bindings/v8/custom/V8LocationCustom.cpp:
        (WebCore::ACCESSOR_SETTER):
        (WebCore::CALLBACK_FUNC_DECL):

2009-09-23  Simon Fraser  <simon.fraser@apple.com>

        Rubber-stamped by Dave Kilzer.

        Merge TOT WebKit r48599

        2009-09-21  Simon Fraser  <simon.fraser@apple.com>

                Reviewed by Dan Bernstein.

                Incorrect clipping with accelerated compositing content, and position:fixed
                https://bugs.webkit.org/show_bug.cgi?id=29347

                Fix the compositing clipping logic to behave correctly when position:fixed
                elements clip, by using the new backgroundClipRect() method to determine
                when we need to clip, and to compute the clipping layer position.

                Test: compositing/overflow/fixed-position-ancestor-clip.html

                * rendering/RenderLayerBacking.cpp:
                (WebCore::RenderLayerBacking::updateGraphicsLayerGeometry):
                * rendering/RenderLayerCompositor.cpp:
                (WebCore::RenderLayerCompositor::clippedByAncestor):

2009-09-23  Simon Fraser  <simon.fraser@apple.com>

        Rubber-stamped by Dave Kilzer.

        Merge TOT WebKit r48562

        2009-09-19  Simon Fraser  <simon.fraser@apple.com>

                Reviewed by Dan Bernstein.

                Incorrect animation with scale(0) transform (singular matrix)
                https://bugs.webkit.org/show_bug.cgi?id=29465

                Make accelerated scale() and translate() animations go through the component animation
                path (rather than just matrix animation) to avoid problems with singular scale matrices,
                and be slightly more efficient.

                Test: compositing/transitions/singular-scale-transition.html

                * platform/graphics/mac/GraphicsLayerCA.mm:
                (WebCore::getTransformFunctionValue):
                (WebCore::getValueFunctionNameForTransformOperation):

2009-09-23  Simon Fraser  <simon.fraser@apple.com>

        Rubber-stamped by Dave Kilzer.

        Merge TOT WebKit r48546 and r48547

        2009-09-18  Simon Fraser  <simon.fraser@apple.com>

                Reviewed by Dan Bernstein.

                Element is misplaced during opacity transition with certain configuration of transform-origin and clipping
                https://bugs.webkit.org/show_bug.cgi?id=29495

                If an element has zero size, but has a transform origin with absolute values,
                then the transform origin would not be applied because it is implemented via
                anchorPoint, which is expressed as a fraction of the layer size.

                Work around this by artificially inflating the size of the backing store when we need to.

                Test: compositing/geometry/transfrom-origin-on-zero-size-layer.html

                * rendering/RenderLayerBacking.h:
                * rendering/RenderLayerBacking.cpp:
                (WebCore::RenderLayerBacking::RenderLayerBacking):
                Init m_artificiallyInflatedBounds to false.

                (WebCore::hasNonZeroTransformOrigin):
                Utility function that describes whether the transform-origin contains non-percentage
                x or y offsets.

                (WebCore::RenderLayerBacking::updateCompositedBounds):
                New wrapper method around setCompositedBounds() that applies the size inflation
                when necessary, setting the m_artificiallyInflatedBounds as appropriate.

                (WebCore::RenderLayerBacking::updateAfterLayout): Call updateCompositedBounds().
                (WebCore::RenderLayerBacking::updateGraphicsLayerGeometry): Ditto

                * rendering/RenderLayerCompositor.cpp:
                (WebCore::RenderLayerCompositor::rebuildCompositingLayerTree): Ditto
                (WebCore::RenderLayerCompositor::updateCompositingDescendantGeometry): Ditto

2009-09-23  Simon Fraser  <simon.fraser@apple.com>

        Rubber-stamped by Dave Kilzer.

        Merge TOT WebKit r48526

        2009-09-18  Simon Fraser  <simon.fraser@apple.com>

                Reviewed by Dave Hyatt.

                Compositing layers are incorrectly positioned after scrolling with position:fixed
                https://bugs.webkit.org/show_bug.cgi?id=29262

                When scrolling a page with compositing layers inside a position:fixed element,
                we need to update the compositing layer positions when the scroll position changes.

                Test: compositing/geometry/fixed-position.html

                * WebCore.base.exp:
                Export FrameView::scrollPositionChanged()

                * page/FrameView.h:
                * page/FrameView.cpp:
                (WebCore::FrameView::scrollPositionChanged):
                New method that sends the scroll event, and updates compositing layers positions if necessary.

2009-09-23  Simon Fraser  <simon.fraser@apple.com>

        Rubber-stamped by Dave Kilzer.

        Merge TOT WebKit r48524

        2009-09-18  Simon Fraser  <simon.fraser@apple.com>

                Reviewed by Dave Hyatt.

                Transformed elements inside position:fixed container are clipped incorrectly
                https://bugs.webkit.org/show_bug.cgi?id=29346

                Fix clipping and hit testing on transformed elements inside a position:fixed element.
                Previously, the code used the overflowClipRect of the parent clip rects, but
                this is not correct for fixed postion elements. Instead, share code that is
                already present in calculateRects() to get the correct rect.

                Test: fast/overflow/position-fixed-transform-clipping.html

                * rendering/RenderLayer.h:
                * rendering/RenderLayer.cpp:
                (WebCore::RenderLayer::paintLayer):
                (WebCore::RenderLayer::hitTestLayer):
                Call the new backgroundClipRect() to get the correct clipRect.

                (WebCore::RenderLayer::backgroundClipRect):
                New method, factored out of calculateRects(), that computes the clip rect,
                doing the right thing for fixed position elements.

                (WebCore::RenderLayer::calculateRects):
                Call the new backgroundClipRect() method.

2009-09-23  Simon Fraser  <simon.fraser@apple.com>

        Rubber-stamped by Dave Kilzer.

        Merge TOT WebKit r48489

        2009-09-17  Simon Fraser  <simon.fraser@apple.com>

                Reviewed by Dave Hyatt.

                Hardware-accelerated opacity transition on inline asserts
                https://bugs.webkit.org/show_bug.cgi?id=29342

                Remove an erroneous toRenderBox() that could be called on a RenderInline; we can just
                pass an empty size, because the box size is only required for transform animations.

                Test: compositing/transitions/opacity-on-inline.html

                * rendering/RenderLayerBacking.cpp:
                (WebCore::RenderLayerBacking::startTransition):

2009-09-23  Simon Fraser  <simon.fraser@apple.com>

        Rubber-stamped by Dave Kilzer.

        Merge TOT WebKit r48470

        2009-09-16  Simon Fraser  <simon.fraser@apple.com>

                Reviewed by Dan Bernstein.

                Elements appear behind <video> when they should be in front sometimes
                https://bugs.webkit.org/show_bug.cgi?id=29314

                r45598 added logic that tests for overlap with <video> to determine when to throw
                a layer into compositing mode. That logic was incorrect in some cases, and this patch
                fixes it. When testing overlap, the layer needs to be composited iff some previous layer
                is composited (which adds a rect to the overlay map), and there is overlap.

                Test: compositing/geometry/video-opacity-overlay.html

                * rendering/RenderLayerCompositor.cpp:
                (WebCore::CompositingState::CompositingState):
                (WebCore::RenderLayerCompositor::computeCompositingRequirements):

2009-09-23  Simon Fraser  <simon.fraser@apple.com>

        Rubber-stamped by Dave Kilzer.

        Merge TOT WebKit r47905

        2009-08-31  Simon Fraser  <simon.fraser@apple.com>

                Reviewed by Dan Bernstein.

                Compositing layer size needs to take into account software reflections on children.
                https://bugs.webkit.org/show_bug.cgi?id=28837

                When computing the bounds of a composited layer, take software-rendered
                reflections into account.

                Test: compositing/reflections/reflection-in-composited.html

                * rendering/RenderLayerCompositor.cpp:
                (WebCore::RenderLayerCompositor::calculateCompositedBounds):

2009-09-23  Simon Fraser  <simon.fraser@apple.com>

        Rubber-stamped by Dave Kilzer.

        Merge TOT WebKit r47900

        2009-08-28  Simon Fraser  <simon.fraser@apple.com>

                Reviewed by Dan Bernstein.

                Fix positioning error when a compositing, absolutely-positioned element has an ancestor with opacity.
                https://bugs.webkit.org/show_bug.cgi?id=28754

                For absolutely-positioned layers, convertToLayerCoords() jumps to the positioned
                ancestor, since the layer x and y are relative to that ancestor. However, this could
                skip over the ancestorLayer, thus giving the wrong result.

                Fix by duplicating the enclosingPositionedAncestor() logic in convertToLayerCoords(),
                and checking for ancestorLayer along the way. If found, compute offset of both to
                the enclosingPositionedAncestor() and subtract.

                This also fixes a positioning bug with abs. positioned elements in reflections,
                so there is a new reflection test with a pixel result.

                Tests: compositing/geometry/abs-position-inside-opacity.html
                       fast/reflections/abs-position-in-reflection.html

                * rendering/RenderLayer.cpp:
                (WebCore::isPositionedContainer):
                (WebCore::RenderLayer::enclosingPositionedAncestor):
                (WebCore::RenderLayer::enclosingTransformedAncestor):
                (WebCore::RenderLayer::convertToLayerCoords):

2009-09-23  Simon Fraser  <simon.fraser@apple.com>

        Rubber-stamped by Dave Kilzer.

        Merge TOT WebKit r47410

        2009-08-17  Simon Fraser  <simon.fraser@apple.com>

                Reviewed by Dave Hyatt.

                Render -webkit-mask via compositing layers when possible
                https://bugs.webkit.org/show_bug.cgi?id=28414

                Implement accelerated compositing of -webkit-mask, when combined
                with already-composited content.

                RenderLayerBacking now creates an additional GraphicsLayer for the mask contents,
                and sets this as the mask on another GraphicsLayer via the setMaskLayer() method.
                GraphicsLayerCA then applies the mask using -[CALayer setMask:].

                The enum values for GraphicsLayerPaintingPhase were renamed to avoid the
                confusion with "mask", and a new value, GraphicsLayerPaintMask, was added which
                indicates that just the mask is painting.

                When painting the composited mask, we need to paint with the normal compositing
                mode rather than CompositeDestinationIn, so InlineFlowBox and RenderBox now consult
                layer()->hasCompositedMask() to pick the mode. If the mask is composited, they no longer
                need to make transparency layers.

                We no longer have to throw video rendering into software because of masks.

                When a masked element has composited descendants, that element needs to
                become composited so that the mask can be applied via compositing.

                Tests: compositing/masks/masked-ancestor.html
                       compositing/masks/simple-composited-mask.html

                * platform/graphics/GraphicsLayer.cpp:
                (WebCore::GraphicsLayer::GraphicsLayer):
                * platform/graphics/GraphicsLayer.h:
                (WebCore::GraphicsLayer::maskLayer):
                (WebCore::GraphicsLayer::setMaskLayer):
                (WebCore::GraphicsLayer::paintingPhase):
                (WebCore::GraphicsLayer::setPaintingPhase):
                * platform/graphics/GraphicsLayerClient.h:
                (WebCore::):
                * platform/graphics/mac/GraphicsLayerCA.h:
                (WebCore::GraphicsLayerCA::):
                * platform/graphics/mac/GraphicsLayerCA.mm:
                (WebCore::GraphicsLayerCA::setMaskLayer):
                (WebCore::GraphicsLayerCA::recursiveCommitChanges):
                (WebCore::GraphicsLayerCA::commitLayerChanges):
                (WebCore::GraphicsLayerCA::updateMaskLayer):
                * rendering/InlineFlowBox.cpp:
                (WebCore::InlineFlowBox::paintMask):
                * rendering/RenderBox.cpp:
                (WebCore::RenderBox::paintMaskImages):
                * rendering/RenderLayer.cpp:
                (WebCore::RenderLayer::hasCompositedMask):
                * rendering/RenderLayer.h:
                (WebCore::RenderLayer::hasCompositedMask):
                * rendering/RenderLayerBacking.cpp:
                (WebCore::RenderLayerBacking::~RenderLayerBacking):
                (WebCore::RenderLayerBacking::destroyGraphicsLayer):
                (WebCore::RenderLayerBacking::updateGraphicsLayerConfiguration):
                (WebCore::RenderLayerBacking::updateGraphicsLayerGeometry):
                (WebCore::RenderLayerBacking::updateForegroundLayer):
                (WebCore::RenderLayerBacking::updateMaskLayer):
                (WebCore::RenderLayerBacking::paintingPhaseForPrimaryLayer):
                (WebCore::RenderLayerBacking::setContentsNeedDisplay):
                (WebCore::RenderLayerBacking::setContentsNeedDisplayInRect):
                (WebCore::RenderLayerBacking::paintIntoLayer):
                (WebCore::RenderLayerBacking::paintContents):
                * rendering/RenderLayerBacking.h:
                (WebCore::RenderLayerBacking::hasMaskLayer):
                * rendering/RenderLayerCompositor.cpp:
                (WebCore::RenderLayerCompositor::computeCompositingRequirements):
                (WebCore::RenderLayerCompositor::canAccelerateVideoRendering):
                (WebCore::RenderLayerCompositor::requiresCompositingWhenDescendantsAreCompositing):
                * rendering/RenderLayerCompositor.h:

2009-09-23  Simon Fraser  <simon.fraser@apple.com>

        Rubber-stamped by Dave Kilzer.

        Merge TOT WebKit r47409

        2009-08-17  Simon Fraser  <simon.fraser@apple.com>

                Reviewed by Dave Hyatt.

                Layer content misplaced with compositing, z-index and overflow
                https://bugs.webkit.org/show_bug.cgi?id=28361

                The foreground GraphicsLayer (used to render element foreground when the element has
                negative z-order children) was misplaced when there is a clipping layer (which clips
                children). The foreground layer is parented under the clipping layer so that the foreground
                depth-sorts with the layer's children, so its geometry needs to be computed relative to
                that clipping layer.

                Also clarified some FIXME comments, and corrected a debug-only layer name.

                Test: compositing/geometry/clipping-foreground.html

                * platform/graphics/mac/GraphicsLayerCA.mm:
                (WebCore::GraphicsLayerCA::updateSublayerList):
                * rendering/RenderLayerBacking.cpp:
                (WebCore::RenderLayerBacking::updateGraphicsLayerGeometry):
                (WebCore::RenderLayerBacking::updateForegroundLayer):
                * rendering/RenderLayerCompositor.cpp:
                (WebCore::RenderLayerCompositor::rebuildCompositingLayerTree):

2009-09-23  Simon Fraser  <simon.fraser@apple.com>

        Rubber-stamped by Dave Kilzer.

        Merge TOT WebKit r47370

        2009-08-17  Simon Fraser  <simon.fraser@apple.com>

                Reviewed by Eric Seidel.

                Use OwnPtrs for GraphicsLayers
                https://bugs.webkit.org/show_bug.cgi?id=28399

                Convert RenderLayerBacking and RenderLayerCompositor to use OwnPtrs
                for their references to GraphicsLayers.

                * platform/graphics/GraphicsLayer.h:
                * platform/graphics/mac/GraphicsLayerCA.mm:
                (WebCore::GraphicsLayer::create):
                * rendering/RenderLayerBacking.cpp:
                (WebCore::RenderLayerBacking::RenderLayerBacking):
                (WebCore::RenderLayerBacking::createGraphicsLayer):
                (WebCore::RenderLayerBacking::destroyGraphicsLayer):
                (WebCore::RenderLayerBacking::updateGraphicsLayerGeometry):
                (WebCore::RenderLayerBacking::updateInternalHierarchy):
                (WebCore::RenderLayerBacking::updateClippingLayers):
                (WebCore::RenderLayerBacking::updateForegroundLayer):
                (WebCore::RenderLayerBacking::setContentsNeedDisplayInRect):
                * rendering/RenderLayerBacking.h:
                (WebCore::RenderLayerBacking::graphicsLayer):
                (WebCore::RenderLayerBacking::clippingLayer):
                (WebCore::RenderLayerBacking::ancestorClippingLayer):
                (WebCore::RenderLayerBacking::foregroundLayer):
                (WebCore::RenderLayerBacking::parentForSublayers):
                (WebCore::RenderLayerBacking::childForSuperlayers):
                * rendering/RenderLayerCompositor.cpp:
                (WebCore::RenderLayerCompositor::~RenderLayerCompositor):
                (WebCore::RenderLayerCompositor::rootPlatformLayer):
                (WebCore::RenderLayerCompositor::didMoveOnscreen):
                (WebCore::RenderLayerCompositor::ensureRootPlatformLayer):
                (WebCore::RenderLayerCompositor::destroyRootPlatformLayer):
                * rendering/RenderLayerCompositor.h:

2009-09-23  Simon Fraser  <simon.fraser@apple.com>

        Rubber-stamped by Dave Kilzer.

        Merge TOT WebKit r47332

        2009-08-15  Simon Fraser  <simon.fraser@apple.com>

                Reviewed by Anders Carlsson.

                Implement animations of multiple text-shadows and -webkit-box-shadows.
                https://bugs.webkit.org/show_bug.cgi?id=28266

                Test: transitions/multiple-shadow-transitions.html

                * page/animation/AnimationBase.cpp:
                (WebCore::PropertyWrapperShadow::equals):
                (WebCore::PropertyWrapperShadow::blend):

2009-09-23  Simon Fraser  <simon.fraser@apple.com>

        Rubber-stamped by Dave Kilzer.

        Merge TOT WebKit r47331

        2009-08-15  Simon Fraser  <simon.fraser@apple.com>

                Reviewed by Anders Carlsson.

                Make transitions work for position and size of multiple backgrounds and masks.
                https://bugs.webkit.org/show_bug.cgi?id=28266

                Make background-position, background-size, -webkit-mask-position and -webkit-mask-size
                properties animatable with multiple backgrounds, rather than just animating the first one.

                Tests: transitions/multiple-background-size-transitions.html
                       transitions/multiple-background-transitions.html
                       transitions/multiple-mask-transitions.html

                * page/animation/AnimationBase.cpp:
                (WebCore::FillLayerPropertyWrapperBase::FillLayerPropertyWrapperBase):
                (WebCore::FillLayerPropertyWrapperBase::~FillLayerPropertyWrapperBase):
                (WebCore::FillLayerPropertyWrapperGetter::FillLayerPropertyWrapperGetter):
                (WebCore::FillLayerPropertyWrapperGetter::equals):
                (WebCore::FillLayerPropertyWrapper::FillLayerPropertyWrapper):
                (WebCore::FillLayerPropertyWrapper::blend):
                (WebCore::FillLayersPropertyWrapper::FillLayersPropertyWrapper):
                (WebCore::FillLayersPropertyWrapper::equals):
                (WebCore::FillLayersPropertyWrapper::blend):
                (WebCore::ensurePropertyMap):
                * rendering/style/FillLayer.h:
                (WebCore::FillLayer::setXPosition):
                (WebCore::FillLayer::setYPosition):
                (WebCore::FillLayer::setSize):

2009-09-23  Simon Fraser  <simon.fraser@apple.com>

        Rubber-stamped by Dave Kilzer.

        Merge TOT WebKit r47333

        2009-08-15  Simon Fraser  <simon.fraser@apple.com>

                Reviewed by Dave Hyatt

                Optimize updateFillImages() to not add/remove clients every time
                https://bugs.webkit.org/show_bug.cgi?id=28334

                Optimize the case where old and new just have a single layer pointing to the same (or no)
                image.

                * rendering/RenderObject.cpp:
                (WebCore::RenderObject::updateFillImages):

2009-09-23  Simon Fraser  <simon.fraser@apple.com>

        Rubber-stamped by Dave Kilzer.

        Merge TOT WebKit r47305

        2009-08-14  Simon Fraser  <simon.fraser@apple.com>

                Reviewed by Dave Hyatt.

                Fix an assertion when bringing up the Inspector.
                https://bugs.webkit.org/show_bug.cgi?id=28318

                The fix for bug 28295 assumed that image clients count the number of times
                addClient/removeClient is called. That was true for CachedResource clients,
                but not StyleGeneratedImage clients, which pass the call onto CSSImageGeneratorValue.

                Fix by making CSSImageGeneratorValue count the number of times a client is
                added/removed.

                * css/CSSCanvasValue.cpp:
                (WebCore::CSSCanvasValue::canvasChanged):
                (WebCore::CSSCanvasValue::canvasResized):
                * css/CSSImageGeneratorValue.cpp:
                (WebCore::CSSImageGeneratorValue::addClient):
                (WebCore::CSSImageGeneratorValue::removeClient):
                (WebCore::CSSImageGeneratorValue::getImage):
                * css/CSSImageGeneratorValue.h:

2009-09-23  Simon Fraser  <simon.fraser@apple.com>

        Rubber-stamped by Dave Kilzer.

        Merge TOT WebKit r47270

        2009-08-13  Simon Fraser  <simon.fraser@apple.com>

                Reviewed by Dan Bernstein.

                Fix logic in RenderObject::updateFillImages() that led to incorrect client
                counts if an image was used twice in the background-image property.
                https://bugs.webkit.org/show_bug.cgi?id=28295

                Test: fast/backgrounds/multiple-backgrounds-assert.html

                * rendering/RenderObject.cpp:
                (WebCore::RenderObject::updateFillImages):
                Simplify the logic to call addClient()/removeClient() for every background
                image, but go through the new layers first to avoid removing all the
                clients of an image.

2009-09-23  Simon Fraser  <simon.fraser@apple.com>

        Rubber-stamped by Dave Kilzer.

        Merge TOT WebKit r47260

        2009-08-13  Simon Fraser  <simon.fraser@apple.com>

                Reviewed by Dan Bernstein.

                Fix crash when removing reflection on an absolutely-positioned image.
                https://bugs.webkit.org/show_bug.cgi?id=28289

                Make sure we clean up the reflection layer when removing the reflection,
                so that the RenderLayer tree does not contain pointers to deleted layers.

                Test: fast/reflections/reflected-img-crash.html

                * rendering/RenderLayer.cpp:
                (WebCore::RenderLayer::~RenderLayer):
                (WebCore::RenderLayer::styleChanged):
                (WebCore::RenderLayer::removeReflection):
                * rendering/RenderLayer.h:

2009-09-23  Simon Fraser  <simon.fraser@apple.com>

        Rubber-stamped by Dave Kilzer.

        Merge TOT WebKit r46776

        2009-08-04  Simon Fraser  <simon.fraser@apple.com>

                Reviewed by Dave Hyatt.

                Add support for transitions/animations of text-indent.

                Test: transitions/text-indent-transition.html

                * page/animation/AnimationBase.cpp:
                (WebCore::ensurePropertyMap):

2009-09-23  Simon Fraser  <simon.fraser@apple.com>

        Rubber-stamped by Dave Kilzer.

        Merge TOT WebKit r46773

        2009-08-04  Simon Fraser  <simon.fraser@apple.com>

                Reviewed by Dave Hyatt.

                Add support for transitions of min- and max-width, and min- and max-height.
                https://bugs.webkit.org/show_bug.cgi?id=27990

                Test: transitions/min-max-width-height-transitions.html

                * page/animation/AnimationBase.cpp:
                (WebCore::ensurePropertyMap):

2009-09-23  Simon Fraser  <simon.fraser@apple.com>

        Rubber-stamped by Dave Kilzer.

        Merge TOT WebKit r46727

        2009-08-03  Simon Fraser  <simon.fraser@apple.com>

                Reviewed by Dan Bernstein.

                Make the DRT APIs to pause transitions and animations work for accelerated animations
                <https://bugs.webkit.org/show_bug.cgi?id=27627>
                <rdar://problem/6442932>

                Fix the 'pauseAnimationAtTimeOnElementWithId' and 'pauseTransitionAtTimeOnElementWithId' APIs
                available to LayoutTests to work with accelerated animations and transitions. Done by sending
                the pause time down to the GraphicsLayer, and using it to stop time on the layer.

                I also added an assertion to check that the animation has actually started when we
                try to pause it, to check that the pause time we compute is valid. This revealed a number
                of tests that tried to pause before animations started, required some amount of test fixing.

                * page/animation/AnimationBase.cpp:
                (WebCore::AnimationBase::freezeAtTime):
                * page/animation/AnimationBase.h:
                * page/animation/CompositeAnimation.cpp:
                (WebCore::CompositeAnimation::pauseAnimationAtTime):
                (WebCore::CompositeAnimation::pauseTransitionAtTime):
                * platform/graphics/GraphicsLayer.cpp:
                (WebCore::GraphicsLayer::suspendAnimations):
                * platform/graphics/GraphicsLayer.h:
                * platform/graphics/mac/GraphicsLayerCA.h:
                * platform/graphics/mac/GraphicsLayerCA.mm:
                (WebCore::GraphicsLayerCA::suspendAnimations):
                * rendering/RenderLayerBacking.cpp:
                (WebCore::RenderLayerBacking::suspendAnimations):
                * rendering/RenderLayerBacking.h:

2009-09-23  Simon Fraser  <simon.fraser@apple.com>

        Rubber-stamped by Dave Kilzer.

        Merge TOT WebKit r46645

        2009-07-31  Simon Fraser  <simon.fraser@apple.com>

                Reviewed by Anders Carlsson.

                Accelerated animations stutter on pages with lots of animations and 3d transforms
                https://bugs.webkit.org/show_bug.cgi?id=27884

                This patch changes the strategy for synchronizing painting view the view,
                and compositing layer updates. Previously the strategy was to disable screen
                updates between the time we updated the layer tree, and painted the view. That
                left screen updates disabled for too long (hundreds of milliseconds) in some
                cases, causing animation stutter.

                The new strategy is to batch up changes to the CA layer tree, and commit them
                all at once just before painting happens (referred to as a "sync" in the code).
                GraphicsLayerCA now keeps a bitmask of changed properties, and then migrates
                the values stored in GraphicsLayer into the CA layer tree at commit time.

                Compositing layers are then synced in FrameView::paintContents(). However, not
                all style/layout changes will result in painting; to deal with style changes that
                touch only compositing properties, we set up a runloop observer that takes care
                of comitting layer changes when no painting happens.

                * WebCore.base.exp: Export FrameView::syncCompositingStateRecursive()

                * loader/EmptyClients.h: scheduleViewUpdate() renamed to syncCompositingStateRecursive()
                * page/ChromeClient.h: scheduleViewUpdate() renamed to syncCompositingStateRecursive()

                * page/FrameView.h:
                * page/FrameView.cpp:
                (WebCore::FrameView::syncCompositingStateRecursive): syncCompositingState() on the
                view and all subviews. Like layoutIfNeededRecursive(). If layout is pending, does not
                sync and returns false, since we only want to sync when layout is done.

                (WebCore::FrameView::paintContents): syncCompositingState() before painting.

                * page/animation/KeyframeAnimation.cpp:
                (WebCore::KeyframeAnimation::endAnimation):
                Call animationPaused() to notify the graphics layers about animation pausing.

                * platform/graphics/FloatPoint3D.h:
                (WebCore::operator==):
                (WebCore::operator!=):
                Add missing comparison operators.

                * platform/graphics/GraphicsLayer.cpp:
                (WebCore::GraphicsLayer::setOpacity):
                (WebCore::GraphicsLayer::setBackgroundColor): Simple setters no longer care about animation info.

                (WebCore::GraphicsLayer::paintGraphicsLayerContents): Null-check client.

                * platform/graphics/GraphicsLayer.h:
                (WebCore::AnimationValue:):
                (WebCore::TransformAnimationValue:):
                (WebCore::KeyframeValueList:):
                (WebCore::KeyframeValueList::insert):
                Cleaned up versions of FloatValue and TransformValue, used to store information
                about keyframes values.

                (WebCore::GraphicsLayer::contentsRect):
                (WebCore::GraphicsLayer::setContentsRect):
                ContentsRect is now a simple setter.

                (WebCore::GraphicsLayer::addAnimation):
                (WebCore::GraphicsLayer::removeAnimationsForProperty):
                (WebCore::GraphicsLayer::removeAnimationsForKeyframes):
                (WebCore::GraphicsLayer::pauseAnimation):
                Simplified animation api.

                (WebCore::GraphicsLayer::setGeometryOrientation):
                (WebCore::GraphicsLayer::geometryOrientation):
                setGeometryOrientation is now just a normal member variable.

                (WebCore::GraphicsLayer::contentsOrientation): add a getter.
                (WebCore::GraphicsLayer::syncCompositingState): Entry into the layer sync code.

                * platform/graphics/GraphicsLayerClient.h: scheduleViewUpdate() renamed to syncCompositingStateRecursive)

                * platform/graphics/mac/GraphicsLayerCA.h:
                * platform/graphics/mac/GraphicsLayerCA.mm:
                Lots of cleanup and refactoring. Main points:
                - Layer changes are all batched, and only committed to the CA layer on syncCompositingState().
                - Bitmask is used to store which properties have changed. More efficient than before.
                - Simpler animation interface; simple setters are no longer confounded with animations.
                - Refactored code that creates CA animations, and stores which animations are running.

                * platform/graphics/transforms/TransformOperations.h:
                (WebCore::TransformOperations::size):
                (WebCore::TransformOperations::at): Useful accessors for size and indexed access.

                * rendering/RenderLayerBacking.h:
                * rendering/RenderLayerBacking.cpp:
                Renamed 'contentsLayer' to 'foregroundLayer' to avoid confusion with GraphicsLayer's
                contentsLayer.
                Adapt to GraphicsLayer's simpler animation API.
                Pass animation pausing through to the graphics layers.
                contentsBox() is no longer a callback via GraphicsLayerClient.

                * rendering/RenderLayerCompositor.h:
                * rendering/RenderLayerCompositor.cpp:
                (WebCore::RenderLayerCompositor::setCompositingLayersNeedRebuild):
                (WebCore::RenderLayerCompositor::scheduleSync):
                (WebCore::RenderLayerCompositor::rebuildCompositingLayerTree):
                scheduleViewUpdate() is no longer required. Instead, we plumb through "compositingLayerSync"
                notifications, which travel up to WebKit and set up a runloop observer.

2009-09-23  Simon Fraser  <simon.fraser@apple.com>

        Rubber-stamped by Dave Kilzer.

        Merge TOT WebKit r46606

        2009-07-30  Simon Fraser  <simon.fraser@apple.com>

                Minor change to earlier commit suggested by Darin Adler.
                Use the variable rather than dereferencing 'it' again.

                * css/CSSStyleSelector.cpp:
                (WebCore::CSSStyleSelector::keyframeStylesForAnimation):

2009-09-23  Simon Fraser  <simon.fraser@apple.com>

        Rubber-stamped by Dave Kilzer.

        Merge TOT WebKit r46603

        2009-07-30  Simon Fraser  <simon.fraser@apple.com>

                Reviewed by Dan Bernstein.

                Animation with a timing function property in a keyframe eats CPU
                https://bugs.webkit.org/show_bug.cgi?id=27856
                <rdar://problem/7104476> Animation demo uses lots of CPU

                Don't include animation-timing-function in the list of properties to
                animate in a keyframe animation, because this property is not animated;
                instead, it describes the timing function to apply to this keyframe.

                This prevents the animation code from thinking that there's a property
                that it has to software-animate, and thus firing the animation timer frequently.

                Not testable because there is no visible impact.

                * css/CSSStyleSelector.cpp:
                (WebCore::CSSStyleSelector::keyframeStylesForAnimation): Don't add
                CSSPropertyWebkitAnimationTimingFunction to the list of properties to animate.

                * page/animation/KeyframeAnimation.cpp
                (WebCore::KeyframeAnimation::getKeyframeAnimationInterval): Add a comment

2009-09-23  Simon Fraser  <simon.fraser@apple.com>

        Rubber-stamped by Dave Kilzer.

        Merge TOT WebKit r46549

        2009-07-29  Simon Fraser  <simon.fraser@apple.com>

                Reviewed by Dan Bernstein.

                Fix crash when an element with display: table-row is composited (e.g. via a 3d-transform)
                https://bugs.webkit.org/show_bug.cgi?id=27796

                Avoid repainting when a layer becomes composited if the renderer is not parented
                yet, because it makes no sense to do so.

                If the table row is a repaint container, default to the RenderBox implementation
                of clippedOverflowRectForRepaint(), because we cannot hand off the repaint rect
                computation to something that is above the repaint container.

                Test: fast/table/table-row-compositing-repaint-crash.html

                * rendering/RenderLayerCompositor.cpp:
                (WebCore::RenderLayerCompositor::repaintOnCompositingChange):
                * rendering/RenderTableRow.cpp:
                (WebCore::RenderTableRow::clippedOverflowRectForRepaint):

2009-09-23  Simon Fraser  <simon.fraser@apple.com>

        Rubber-stamped by Dave Kilzer.

        Merge TOT WebKit r46291 and r46293

        2009-07-23  Simon Fraser  <simon.fraser@apple.com>

                Reviewed by Adele Peterson.

                3d-transforms media query needs to look check that accelerated compositing is enabled
                https://bugs.webkit.org/show_bug.cgi?id=27621

                When evaluating a media query with '-webkit-transform-3d', we need to check the
                runtime switch that toggles accererated compositing, and therefore 3D.

                No test because we can't disable the pref dynamically in DRT.

                * css/MediaQueryEvaluator.cpp:
                (WebCore::transform_3dMediaFeatureEval):

2009-09-23  Simon Fraser  <simon.fraser@apple.com>

        Rubber-stamped by Dave Kilzer.

        Merge TOT WebKit r45986

        2009-07-16  Simon Fraser  <simon.fraser@apple.com>

                Reviewed by Darin Adler.

                Video size sometimes jumps just after the video starts loading
                https://bugs.webkit.org/show_bug.cgi?id=27352

                Ensure that the media player is at or after the 'HaveMetadata' state so that
                the instrinsic size is known before we create the layer for video. This avoids
                a flash caused by computing the video rect using the default intrinsic size, and then
                re-computing it when that size changes.

                * platform/graphics/mac/MediaPlayerPrivateQTKit.h:
                * platform/graphics/mac/MediaPlayerPrivateQTKit.mm:
                (WebCore::MediaPlayerPrivate::isReadyForRendering):
                (WebCore::MediaPlayerPrivate::updateStates):
                (WebCore::MediaPlayerPrivate::supportsAcceleratedRendering):

2009-09-23  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7241653> Changes to export files not always picked up

        Merged ToT WebKit r48686 from <http://webkit.org/b/29660>.

        * WebCore.PluginHostProcess.exp: Renamed from WebCore/WebCore.LP64.base.exp.

    2009-09-23  David Kilzer  <ddkilzer@apple.com>

        <http://webkit.org/b/29660> Move "Generate 64-bit Export File" build phase script into DerivedSources.make

        Reviewed by Mark Rowe.

        The "Generate 64-bit Export File" build phase script generated
        the WebCore.LP64.exp export file used to link 64-bit WebCore.
        Instead of having a separate build phase script, move its
        generation into DerivedSources.make where WebCore.exp is
        generated.

        * DerivedSources.make: Added a rule to make WebCore.LP64.exp.
        Added code to append WebCore.PluginHostProcess.exp to
        $(WEBCORE_EXPORT_DEPENDENCIES) when WTF_USE_PLUGIN_HOST_PROCESS
        is set to 1.
        * WebCore.PluginHostProcess.exp: Renamed from WebCore/WebCore.LP64.exp.
        * WebCore.xcodeproj/project.pbxproj: Removed the "Generate
        64-bit Export File" build phase script. Renamed WebCore.LP64.exp
        to WebCore.PluginHostProcess.exp.

2009-09-23  Antti Koivisto  <antti@apple.com>

        Reviewed by Dave Kilzer.

        <rdar://problem/7244355> SMS app crashes on Apex100

        TileCache may be null so add checks everywhere.

        * wak/WAKWindow.mm:
        (-[WAKWindow initWithFrame:]):
        (-[WAKWindow layoutTiles]):
        (-[WAKWindow layoutTilesNow]):
        (-[WAKWindow setNeedsDisplay]):
        (-[WAKWindow setNeedsDisplayInRect:]):
        (-[WAKWindow tilesOpaque]):
        (-[WAKWindow setTilesOpaque:]):
        (-[WAKWindow tileMinificationFilter]):
        (-[WAKWindow setTileMinificationFilter:]):
        (-[WAKWindow removeAllNonVisibleTiles]):
        (-[WAKWindow removeAllTiles]):
        (-[WAKWindow setTilingMode:]):
        (-[WAKWindow tilingMode]):
        (-[WAKWindow hasPendingDraw]):

2009-09-23  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by David Kilzer.

        Use `/usr/bin/gcc` instead of `gcc` to determine what is ENABLEd.

        * DerivedSources.make:

2009-09-22  David Kilzer  <ddkilzer@apple.com>

        BUILD FIX: Fix Wildcat hardware buildbot

        * DerivedSources.make: Fix check for ENABLE_ORIENTATION_EVENTS
        to use preprocessed Platform.h rather than Xcode variables since
        that's where it's defined.  I'm not sure why the Apex buildbot
        did not fail in the same way.

2009-09-22  David Kilzer  <ddkilzer@apple.com>

        Another attempt to fix: <rdar://problem/7241653> Changes to export files not always picked up

        Reviewed by Greg Bolsinga.

        Moving WebKit.LP64.exp generation into DerivedSources.make
        should make dependency testing much more reliable.

        See also: <http://webkit.org/b/29660> Move "Generate 64-bit Export File" build phase script into DerivedSources.make

        The "Generate 64-bit Export File" build phase script built the
        WebCore.LP64.exp export file used to link 64-bit WebCore.
        Instead of having a separate build phase script, move its
        generation into DerivedSources.make where WebCore.exp is
        generated.  Note that because of VPATH usage in
        DerivedSources.make WebCore.LP64.exp had to be renamed to
        WebCore.LP64.base.exp.

        * DerivedSources.make: Added a rule to make WebCore.LP64.exp.
        * WebCore.LP64.base.exp: Renamed from WebCore/WebCore.LP64.exp.
        * WebCore.xcodeproj/project.pbxproj: Removed the "Generate
        64-bit Export File" build phase script.

2009-09-22  Antti Koivisto  <antti@apple.com>

        Reviewed by Simon Fraser.

        <rdar://problem/6747614> -nodeRespondingToClickEvents does 40 hit tests on the main thread, taking over a second

        Reduce the amount of hit tests done (41 -> 13 in no-hits case) on a touch.
        - Use a test pattern with less points. In practice it should still catch almost everything the old one did.
        - Bail out early when a match is found (but still find best match within a radius).
        - Some cleanups.

        * page/Frame.h:
        * page/iphone/FrameIPhone.mm:
        (WebCore::Frame::betterApproximateNode):
        (WebCore::Frame::qualifyingNodeAtViewportLocation):

2009-09-22  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7241653> Changes to export files not always picked up

        Reviewed by Paul Knight.

        The bug fix was to move the "Generate 64-bit Export file" build
        phase script before the "Link binary With Libraries (4)" target
        to make sure WebCore.LP64.exp, which is used by iPhone OS
        builds, is always regenerated before linking.

        * WebCore.xcodeproj/project.pbxproj: Fixed order of build phase
        scripts to match ToT WebKit.

2009-09-21  Greg Bolsinga  <bolsinga@apple.com>

        Merged TOT WebKit r48609.

        Thsi brings over the Open Source change for
        ENABLE(ORIENTATION_EVENTS), and removes the previous
        portions that do not apply and fixes bugs.

        * DerivedSources.make:
        * WebCore.iPhone.exp:
        * WebCore.xcodeproj/project.pbxproj:
        * dom/Document.idl:
        * dom/Element.idl:
        * dom/EventNames.h:
        * dom/Node.cpp:
        (WebCore::Node::addEventListener):
        (WebCore::Node::removeEventListener):
        * dom/Node.h:
        * html/HTMLAttributeNames.in:
        * html/HTMLBodyElement.cpp:
        (WebCore::HTMLBodyElement::parseMappedAttribute):
        (WebCore::HTMLBodyElement::onorientationchange):
        (WebCore::HTMLBodyElement::setOnorientationchange):
        * html/HTMLBodyElement.h:
        * html/HTMLBodyElement.idl:
        * html/HTMLFrameSetElement.cpp:
        (WebCore::HTMLFrameSetElement::parseMappedAttribute):
        (WebCore::HTMLFrameSetElement::onorientationchange):
        (WebCore::HTMLFrameSetElement::setOnorientationchange):
        * html/HTMLFrameSetElement.h:
        * html/HTMLFrameSetElement.idl:
        * page/DOMWindow.cpp:
        (WebCore::DOMWindow::orientation):
        (WebCore::DOMWindow::captureEvents):
        (WebCore::DOMWindow::releaseEvents):
        * page/DOMWindow.h:
        * page/DOMWindow.idl:
        * page/Frame.cpp:
        (WebCore::Frame::Frame):
        (WebCore::Frame::sendOrientationChangeEvent):
        * page/Frame.h:
        (WebCore::Frame::orientation):
        * page/iphone/FrameIPhone.mm:
        (WebCore::Frame::initWithSimpleHTMLDocument):

2009-09-18  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7168536> Switch WebKit to use GSCapabilities constant for 'isWildcat'

        Reviewed by Aaron Golden.

        * platform/iphone/PlatformScreenIPhone.mm: Cleaned up #import
        statements.
        (WebCore::isWildcat): Updated to use GSSystemHasCapability().
        I left this method here for legacy reasons and since I couldn't
        find a better home for it.

2009-09-18  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7188681> iPhone: EventConstructor is being shared between documents (26868)

        Merged ToT WebKit r46068.

        Updated Touch and TouchList constructor classes, too.

        * bindings/js/JSTouchConstructor.cpp:
        (WebCore::JSTouchConstructor::JSTouchConstructor):
        * bindings/js/JSTouchListConstructor.cpp:
        (WebCore::JSTouchListConstructor::JSTouchListConstructor):

    2009-07-14  Eric Seidel  <eric@webkit.org>

        Reviewed by Adam Barth.

        Some constructor objects exposed on Window have the wrong prototype chain
        https://bugs.webkit.org/show_bug.cgi?id=27276

        Several Constructor classes were already being passed a global object
        during construction, but they were ignoring it for prototype lookup.
        I've fixed those to use the passed global object instead.

        Most of these Constructor classes should just be auto-generated, but I
        refrained from changing them over to auto-gen in this patch.

        Fixed CodeGeneratorJS to pass a global object to getDOMConstructor when
        available, otherwise default to deprecatedGlobalObjectForPrototype(exec)
        to match existing behavior.

        Test: fast/dom/prototype-inheritance.html

        * bindings/js/JSAudioConstructor.cpp:
        (WebCore::JSAudioConstructor::JSAudioConstructor): use the existing globalObject pointer for prototype lookup
        * bindings/js/JSDOMBinding.h:
        (WebCore::deprecatedGlobalObjectForPrototype): Make it easy to detect where the wrong global object is being used.
        (WebCore::deprecatedGetDOMStructure):
        * bindings/js/JSDOMGlobalObject.h: remove error-prone getDOMConstructor, require passing JSDOMGlobalObject*
        * bindings/js/JSDOMWindowCustom.cpp:
        (WebCore::JSDOMWindow::webKitPoint): pass "this" for the global object.
        (WebCore::JSDOMWindow::webKitCSSMatrix): pass "this" for the global object.
        (WebCore::JSDOMWindow::xsltProcessor): pass "this" for the global object.
        (WebCore::JSDOMWindow::worker): pass "this" for the global object.
        * bindings/js/JSImageConstructor.cpp:
        (WebCore::JSImageConstructor::JSImageConstructor): use the existing globalObject pointer for prototype lookup
        * bindings/js/JSMessageChannelConstructor.cpp:
        (WebCore::JSMessageChannelConstructor::JSMessageChannelConstructor): use the existing globalObject pointer for prototype lookup
        * bindings/js/JSOptionConstructor.cpp:
        (WebCore::JSOptionConstructor::JSOptionConstructor): use the existing globalObject pointer for prototype lookup
        * bindings/js/JSWebKitCSSMatrixConstructor.cpp:
        (WebCore::JSWebKitCSSMatrixConstructor::JSWebKitCSSMatrixConstructor): add new globalObject parameter and use it
        * bindings/js/JSWebKitCSSMatrixConstructor.h:
        * bindings/js/JSWebKitPointConstructor.cpp:
        (WebCore::JSWebKitPointConstructor::JSWebKitPointConstructor): add new globalObject parameter and use it
        * bindings/js/JSWebKitPointConstructor.h:
        * bindings/js/JSWorkerConstructor.cpp:
        (WebCore::JSWorkerConstructor::JSWorkerConstructor): add new globalObject parameter and use it
        * bindings/js/JSWorkerConstructor.h:
        * bindings/js/JSXMLHttpRequestConstructor.cpp:
        (WebCore::JSXMLHttpRequestConstructor::JSXMLHttpRequestConstructor): use the existing globalObject pointer for prototype lookup
         -- XMLHttpRequest constructor was also missing a length.  Added one.
        * bindings/js/JSXSLTProcessorConstructor.cpp:
        (WebCore::JSXSLTProcessorConstructor::JSXSLTProcessorConstructor):
        * bindings/js/JSXSLTProcessorConstructor.h:
        * bindings/scripts/CodeGeneratorJS.pm:

2009-09-18  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7188681> iPhone: EventConstructor is being shared between documents (26868)

        Merged ToT WebKit r45938.

        In addition to XMLHttpRequest, this also includes fixes for:
        - Touch
        - TouchList

        * bindings/js/JSTouchConstructor.cpp:
        (WebCore::JSTouchConstructor::JSTouchConstructor):
        * bindings/js/JSTouchConstructor.h:
        * bindings/js/JSTouchListConstructor.cpp:
        (WebCore::JSTouchListConstructor::JSTouchListConstructor):
        * bindings/js/JSTouchListConstructor.h:

    2009-07-15  Yuzo Fujishima  <yuzo@google.com>

        Reviewed by Darin Adler.

        Test: fast/js/instanceof-operator.html

        Fix for: Bug 25205 -  XMLHttpRequest instance is not an instanceof XMLHttpRequest
        https://bugs.webkit.org/show_bug.cgi?id=25205

        In addition to for XMLHttpRequest, this also fixes for:
        - Audio
        - Image
        - MessageChannel
        - Option
        - WebKitCSSMatrix
        - WebKitPoint
        - Worker
        - XSLTProcessor

        * bindings/js/JSAudioConstructor.cpp:
        (WebCore::JSAudioConstructor::JSAudioConstructor):
        * bindings/js/JSAudioConstructor.h:
        * bindings/js/JSDOMBinding.h:
        (WebCore::DOMConstructorObject::createStructure):
        (WebCore::DOMConstructorObject::DOMConstructorObject):
        * bindings/js/JSImageConstructor.cpp:
        (WebCore::JSImageConstructor::JSImageConstructor):
        * bindings/js/JSImageConstructor.h:
        * bindings/js/JSMessageChannelConstructor.cpp:
        (WebCore::JSMessageChannelConstructor::JSMessageChannelConstructor):
        * bindings/js/JSMessageChannelConstructor.h:
        * bindings/js/JSOptionConstructor.cpp:
        (WebCore::JSOptionConstructor::JSOptionConstructor):
        * bindings/js/JSOptionConstructor.h:
        * bindings/js/JSWebKitCSSMatrixConstructor.cpp:
        (WebCore::JSWebKitCSSMatrixConstructor::JSWebKitCSSMatrixConstructor):
        * bindings/js/JSWebKitCSSMatrixConstructor.h:
        * bindings/js/JSWebKitPointConstructor.cpp:
        (WebCore::JSWebKitPointConstructor::JSWebKitPointConstructor):
        * bindings/js/JSWebKitPointConstructor.h:
        * bindings/js/JSWorkerConstructor.cpp:
        (WebCore::JSWorkerConstructor::JSWorkerConstructor):
        * bindings/js/JSWorkerConstructor.h:
        * bindings/js/JSXMLHttpRequestConstructor.cpp:
        (WebCore::JSXMLHttpRequestConstructor::JSXMLHttpRequestConstructor):
        * bindings/js/JSXMLHttpRequestConstructor.h:
        * bindings/js/JSXSLTProcessorConstructor.cpp:
        (WebCore::JSXSLTProcessorConstructor::JSXSLTProcessorConstructor):
        * bindings/js/JSXSLTProcessorConstructor.h:

2009-09-17  Antti Koivisto  <antti@apple.com>

        Reviewed by Dave Carson.

        Some refactoring, no functional changes.

        - Rename TiledSurface to TileCache. This name is a better description of what it actually does.
        - Refactor some "surface like" features out from the TileCache and into WAKWindow. The host layer
          is now owned by WAKWindow. The visibleRect() function implementation moves to WAKWindow as well.
        - Move ownership of TileCache to WAKWindow (from WKWindow). Not much left there, we can soon
          eliminate WKWindow completely.

        * WebCore.xcodeproj/project.pbxproj:
        * platform/iphone/TileCache.h: Copied from WebCore/platform/iphone/TiledSurface.h.
        (WebCore::TileCache::Tile::create):
        (WebCore::TileCache::TileIndex::operator==):
        * platform/iphone/TileCache.mm: Copied from WebCore/platform/iphone/TiledSurface.mm.
        (-[TileLayer initWithTileCache:WebCore::]):
        (-[TileLayer removeFromSuperlayer]):
        (-[TileLayer display]):
        (-[TileLayer drawInContext:]):
        (-[WebThreadCaller initWithTileCache:WebCore::]):
        (-[WebThreadCaller resetTileCache]):
        (WebCore::TileCache::Tile::Tile):
        (WebCore::TileCache::Tile::~Tile):
        (WebCore::TileCache::Tile::invalidateRect):
        (WebCore::TileCache::Tile::setRect):
        (WebCore::TileCache::TileCache):
        (WebCore::TileCache::~TileCache):
        (WebCore::TileCache::hostLayer):
        (WebCore::TileCache::bounds):
        (WebCore::TileCache::visibleRect):
        (WebCore::TileCache::tileCount):
        (WebCore::TileCache::tilesOpaque):
        (WebCore::TileCache::setTilesOpaque):
        (WebCore::TileCache::tileMinificationFilter):
        (WebCore::TileCache::setTileMinificationFilter):
        (WebCore::TileCache::tileForIndex):
        (WebCore::TileCache::tileRectForIndex):
        (WebCore::TileCache::tileIndexForPoint):
        (WebCore::TileCache::pointsOnSameTile):
        (WebCore::TileCache::centerTileGridOrigin):
        (WebCore::TileCache::tileForPoint):
        (WebCore::TileCache::tilesCover):
        (WebCore::TileCache::adjustForPageBounds):
        (WebCore::TileCache::checkDoSingleTileLayout):
        (WebCore::TileCache::calculateCoverAndKeepRectForMemoryLevel):
        (WebCore::TileCache::doLayoutTiles):
        (WebCore::TileCache::layoutTiles):
        (WebCore::TileCache::layoutTilesNow):
        (WebCore::TileCache::removeAllNonVisibleTiles):
        (WebCore::TileCache::removeAllTiles):
        (WebCore::TileCache::createTiles):
        (WebCore::TileCache::tileCreationTimerFired):
        (WebCore::TileCache::dropInvalidTiles):
        (WebCore::TileCache::dropTilesOutsideRect):
        (WebCore::TileCache::drawLayer):
        (WebCore::TileCache::setNeedsDisplay):
        (WebCore::TileCache::setNeedsDisplayInRect):
        (WebCore::TileCache::invalidateTiles):
        (WebCore::TileCache::isTileCreationSuspended):
        (WebCore::TileCache::isPaintingSuspended):
        (WebCore::TileCache::tilingMode):
        (WebCore::TileCache::updateTilingMode):
        (WebCore::TileCache::setTilingMode):
        (WebCore::TileCache::flushSavedDisplayRects):
        (WebCore::TileCache::hasPendingDraw):
        (WebCore::TileCache::prepareToDraw):
        * platform/iphone/TiledSurface.h: Removed.
        * platform/iphone/TiledSurface.mm: Removed.
        * wak/WAKWindow.h:
        * wak/WAKWindow.mm:
        (-[WAKWindow initWithLayer:]):
        (-[WAKWindow initWithFrame:]):
        (-[WAKWindow dealloc]):
        (-[WAKWindow setContentView:]):
        (-[WAKWindow contentView]):
        (-[WAKWindow close]):
        (-[WAKWindow firstResponder]):
        (-[WAKWindow setFrame:display:]):
        (-[WAKWindow _windowRef]):
        (-[WAKWindow sendEvent:]):
        (-[WAKWindow layoutTiles]):
        (-[WAKWindow layoutTilesNow]):
        (-[WAKWindow setNeedsDisplay]):
        (-[WAKWindow setNeedsDisplayInRect:]):
        (-[WAKWindow tilesOpaque]):
        (-[WAKWindow setTilesOpaque:]):
        (-[WAKWindow tileMinificationFilter]):
        (-[WAKWindow setTileMinificationFilter:]):
        (-[WAKWindow visibleRect]):
        (-[WAKWindow removeAllNonVisibleTiles]):
        (-[WAKWindow removeAllTiles]):
        (-[WAKWindow setTilingMode:]):
        (-[WAKWindow tilingMode]):
        (-[WAKWindow hasPendingDraw]):
        (-[WAKWindow setUseOrientationDependentFontAntialiasing:]):
        (-[WAKWindow useOrientationDependentFontAntialiasing]):
        (-[WAKWindow hostLayer]):
        * wak/WKView.mm:
        * wak/WKWindow.h:
        * wak/WKWindow.mm:
        (WKWindowSetNeedsDisplay):
        (WKWindowSetNeedsDisplayInRect):

2009-09-18  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7095256> -finalizeForWebScript sent unexpectedly

        Merged ToT WebKit r48513.

        - Changed RuntimeObjectImp::m_instance variable back to
          'instance' since we haven't renamed it yet.
        - Didn't remove createWrapperCacheWithIntegerKeys from
          DOMInternal.{h|mm} since we don't have the reworked RGBColor
          wrappers yet.
        - Changed use of JSLock lock(SilenceAssertionsOnly) back to
          JSLock lock(false) since we don't have the enum values yet.

    2009-09-18  Darin Adler  <darin@apple.com>

        Reviewed by Sam Weinig.

        Each wrapped Objective-C object should use a single RuntimeObjectImp
        https://bugs.webkit.org/show_bug.cgi?id=29351
        rdar://problem/7142294

        * WebCore.base.exp: Added a newly-needed exported symbol.

        * bindings/objc/DOMInternal.h: Eliminated unused
        createWrapperCacheWithIntegerKeys; it has not been needed since the
        RGBColor wrappers were reworked.
        * bindings/objc/DOMInternal.mm: Ditto.

        * bridge/objc/objc_instance.h: Made the create function non-inline.
        * bridge/objc/objc_instance.mm:
        (createInstanceWrapperCache): Added. Creates an appropriate map table.
        (ObjcInstance::create): Moved here from header. Uses NSMapGet and
        NSMapInsert to cache the instance in a map table.
        (ObjcInstance::~ObjcInstance): Added a call to NSMapRemove to remove
        the instance from the map table.

        * bridge/qt/qt_instance.cpp:
        (JSC::Bindings::QtInstance::~QtInstance): Remove unneeded code to remove
        the instance from cachedObjects, which no longer exists.
        (JSC::Bindings::QtInstance::newRuntimeObject): Renamed to overload new
        bottleneck. Caching is now handled by the base class.

        * bridge/runtime.cpp:
        (JSC::Bindings::Instance::Instance): Initialize m_runtimeObject to 0.
        (JSC::Bindings::Instance::~Instance): Assert m_runtimeObject is 0.
        (JSC::Bindings::Instance::createRuntimeObject): Use m_runtimeObject
        if it's already set. Set m_runtimeObject and call addRuntimeObject
        if it's not.
        (JSC::Bindings::Instance::newRuntimeObject): Added. Virtual function,
        used only by createRuntimeObject.
        (JSC::Bindings::Instance::willDestroyRuntimeObject): Added.
        Calls removeRuntimeObject and then clears m_runtimeObject.
        (JSC::Bindings::Instance::willInvalidateRuntimeObject): Added.
        Clears m_runtimeObject.

        * bridge/runtime.h: Made createRuntimeObject non-virtual. Added
        willDestroyRuntimeObject, willInvalidateRuntimeObject,
        newRuntimeObject, and m_runtimeObject.

        * bridge/runtime_object.cpp:
        (JSC::RuntimeObjectImp::RuntimeObjectImp): Removed addRuntimeObject
        call, now handled by caller.
        (JSC::RuntimeObjectImp::~RuntimeObjectImp): Replaced removeRuntimeObject
        call with willDestroyRuntimeObject call; the latter nows calls
        removeRuntimeObject.
        (JSC::RuntimeObjectImp::invalidate): Added willInvalidateRuntimeObject
        call.

        * bridge/runtime_object.h: Made invalidate non-virtual.

2009-09-17  Chris Fleizach  <cfleizach@apple.com>

        Reviewed by Beth Dakin.

        <rdar://problem/7083866> Using VoiceOver on iPhone, it is difficult to select some web page elements by touch.

        This change makes it so that if you touch on a <label> it will return the control element (like it should)

        Also seen in https://bugs.webkit.org/show_bug.cgi?id=29335

        * accessibility/AccessibilityObject.h:
        (WebCore::AccessibilityObject::correspondingControlForLabelElement):
        * accessibility/AccessibilityRenderObject.cpp:
        (WebCore::AccessibilityRenderObject::accessibilityIsIgnored):
        (WebCore::AccessibilityRenderObject::doAccessibilityHitTest):
        (WebCore::AccessibilityRenderObject::correspondingControlForLabelElement):
        * accessibility/AccessibilityRenderObject.h:

2009-09-16  Antti Koivisto  <antti@apple.com>

        Reviewed by Dave Kilzer and Dave Carson.

        <rdar://problem/7229329> Generate cached tiles one by one instead of putting them all in a single CA transaction.

        We currently generate the tile needed to cover the visible area in one CA transaction. Then we do another
        transaction to generate all the non-visible tiles we want to cache. This can involve painting many (for example 8)
        tiles and can take a substantial amount of time. If a user scrolls while this is happening she will see a checker pattern.

        With this change we instead generate tiles one by one, starting from those closest to the the viewport.
        This make it less likely that user will see checkers (after a zoom/scroll combo especially).
        This also improves browser responsiveness by shortening periods when web thread is blocked on painting.

        - Switch the tile data structure from vector of vectors to a hash map indexeed with tile coordinates.
          This simplifies a lot of code.
        - Add timer to create tiles asynchronously. The tiles are cached starting from the closest to the
          viewport (with currently visible tiles created first).
        - The distance calculation is biased to prefer tiles above/below the viewport with those below having the highest
          priority.

        * platform/iphone/TiledSurface.h:
        (WebCore::TiledSurface::TileIndex::TileIndex):
        (WebCore::TiledSurface::TileIndex::operator==):
        (WebCore::TiledSurface::TileIndex::x):
        (WebCore::TiledSurface::TileIndex::y):
        (WebCore::TiledSurface::TileIndexHash::hash):
        (WebCore::TiledSurface::TileIndexHash::equal):
        (WebCore::TiledSurface::TileIndexHashTraits::emptyValue):
        (WebCore::TiledSurface::TileIndexHashTraits::constructDeletedValue):
        (WebCore::TiledSurface::TileIndexHashTraits::isDeletedValue):
        * platform/iphone/TiledSurface.mm:
        (WebCore::TiledSurface::Tile::Tile):
        (WebCore::TiledSurface::Tile::~Tile):
        (WebCore::TiledSurface::TiledSurface):
        (WebCore::TiledSurface::tileCount):
        (WebCore::TiledSurface::setTilesOpaque):
        (WebCore::TiledSurface::setTileMinificationFilter):
        (WebCore::TiledSurface::tileForIndex):
        (WebCore::TiledSurface::tileRectForIndex):
        (WebCore::TiledSurface::tileIndexForPoint):
        (WebCore::TiledSurface::pointsOnSameTile):
        (WebCore::TiledSurface::centerTileGridOrigin):
        (WebCore::TiledSurface::tileForPoint):
        (WebCore::TiledSurface::checkDoSingleTileLayout):
        (WebCore::TiledSurface::doLayoutTiles):
        (WebCore::TiledSurface::layoutTiles):
        (WebCore::TiledSurface::layoutTilesNow):
        (WebCore::TiledSurface::removeAllNonVisibleTiles):
        (WebCore::TiledSurface::removeAllTiles):
        (WebCore::tileDistance2):
        (WebCore::TiledSurface::createTiles):
        (WebCore::TiledSurface::tileCreationTimerFired):
        (WebCore::TiledSurface::dropInvalidTiles):
        (WebCore::TiledSurface::dropTilesOutsideRect):
        (WebCore::TiledSurface::invalidateTiles):

2009-09-16  Greg Bolsinga  <bolsinga@apple.com>

        Merged TOT WebKit r48430.

        This basically brings over the Open Source change for
        ENABLE_INSPECTOR, and removes the previous portions
        that do not apply (FeatureDefines.xcconfig, build-webkit,
        and EXCLUDED_SOURCE_FILE_NAMES changes).

        The changes are slightly different here. There apparently
        have been Inspector changes between the last iPhone merge
        and when this landed in Open Source.

        * Configurations/FeatureDefines.xcconfig:
        * Configurations/WebCore.xcconfig:
        * DerivedSources.make:
        * WebCore.Inspector.exp:
        * WebCore.xcodeproj/project.pbxproj:
        * bindings/js/JSDOMWindowBase.cpp:
        (WebCore::JSDOMWindowBase::supportsProfiling):
        * bindings/js/JSInspectedObjectWrapper.cpp:
        * bindings/js/JSInspectorCallbackWrapper.cpp:
        * bindings/js/JSInspectorControllerCustom.cpp:
        * bindings/js/ScriptObjectQuarantine.cpp:
        * html/HTMLDocument.cpp:
        (WebCore::HTMLDocument::createTokenizer):
        * inspector/ConsoleMessage.cpp:
        (WebCore::ConsoleMessage::ConsoleMessage):
        (WebCore::ConsoleMessage::isEqual):
        * inspector/ConsoleMessage.h:
        * inspector/InspectorController.cpp:
        * inspector/InspectorController.idl:
        * inspector/InspectorDOMStorageResource.cpp:
        * inspector/InspectorDatabaseResource.cpp:
        * inspector/InspectorFrontend.cpp:
        * inspector/InspectorJSONObject.cpp:
        * inspector/InspectorResource.cpp:
        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::continueLoadAfterNavigationPolicy):
        * page/Console.cpp:
        (WebCore::Console::addMessage):
        * page/Page.cpp:
        (WebCore::Page::Page):
        * platform/ContextMenu.cpp:
        (WebCore::ContextMenu::checkOrEnableIfNeeded):
        * workers/WorkerContext.cpp:
        (WebCore::WorkerContext::importScripts):

2009-09-16  Greg Bolsinga  <bolsinga@apple.com>

        Merged TOT WebKit r48429.

        This basically brings over the Open Source change for
        ENABLE_CONTEXT_MENUS, and removes the previous portions
        that do not apply (FeatureDefines.xcconfig, build-webkit,
        and EXCLUDED_SOURCE_FILE_NAMES changes).

        * Configurations/FeatureDefines.xcconfig:
        * Configurations/WebCore.xcconfig:
        * DerivedSources.make:
        * WebCore.ContextMenus.exp: Renamed from WebCore/WebCore.ContextMenu.exp.
        * WebCore.xcodeproj/project.pbxproj:
        * dom/Node.cpp:
        (WebCore::Node::defaultEventHandler):
        * loader/EmptyClients.h:
        * page/ContextMenuController.cpp:
        * page/EventHandler.cpp:
        * page/EventHandler.h:
        * page/Page.cpp:
        (WebCore::Page::Page):
        * page/Page.h:
        * page/mac/EventHandlerMac.mm:
        * page/mac/WebCoreViewFactory.h:
        * platform/ContextMenu.cpp:
        * platform/LocalizedStrings.h:
        * platform/mac/ContextMenuItemMac.mm:
        * platform/mac/ContextMenuMac.mm:
        * platform/mac/LocalizedStringsMac.mm:
        * svg/graphics/SVGImage.cpp:
        (WebCore::SVGImage::dataChanged):

2009-09-16  Greg Bolsinga  <bolsinga@apple.com>

        Fix build break by passing the SDKROOT to gcc when
        seeing if ENABLE_DRAG_SUPPORT is on or not.

        * DerivedSources.make:

2009-09-16  Greg Bolsinga  <bolsinga@apple.com>

        Merged TOT WebKit r46437.

        This basically brings over the Open Source change for
        ENABLE_DRAG_SUPPORT, and removes the previous portions
        that do not apply (FeatureDefines.xcconfig, build-webkit,
        and EXCLUDED_SOURCE_FILE_NAMES changes).

        * Configurations/FeatureDefines.xcconfig:
        * Configurations/WebCore.xcconfig:
        * DerivedSources.make:
        * WebCore.DragSupport.exp:
        * WebCore.xcodeproj/project.pbxproj:
        * dom/Clipboard.h:
        * page/DragController.cpp:
        * page/EventHandler.cpp:
        * page/EventHandler.h:
        * page/Page.cpp:
        (WebCore::Page::Page):
        * page/mac/DragControllerMac.mm:
        * page/mac/EventHandlerMac.mm:
        (WebCore::EventHandler::passSubframeEventToSubframe):
        * platform/DragData.cpp:
        * platform/DragImage.cpp:
        * platform/mac/ClipboardMac.h:
        * platform/mac/ClipboardMac.mm:
        * platform/mac/DragDataMac.mm:
        * platform/mac/DragImageMac.mm:
        * svg/graphics/SVGImage.cpp:
        (WebCore::SVGImage::dataChanged):

2009-09-15  Greg Bolsinga  <bolsinga@apple.com>

        <rdar://problem/7219163> Mobile Safari Crashes During Data Entry

        Merged TOT WebKit r46437.

    2009-07-27  Ojan Vafai  <ojan@chromium.org>

        Reviewed by Darin Adler.

        https://bugs.webkit.org/show_bug.cgi?id=27474
        Fixes crashes due to renderer getting destroyed in updateLayout.
        We need to call updateLayout before we call into the renderer.
        Removed the updateLayout call from RenderTextControl and moved it
        into the calling sites.

        Also changes updateLayout to updateLayoutIgnorePendingStylesheets so
        this works with pending stylesheets. Unfortunately, this seems to be
        untestable. Loading an external stylesheet and then having an inline
        script hit this code did not result in an pending stylesheets.

        The are other cases of this bug in the rendering code. I'll file a
        followup bug to audit the calls to updateLayout.

        Test: fast/dom/text-control-crash-on-select.html

        * dom/Document.h:
        (WebCore::Document::inStyleRecalc): Added so the ASSERTs in updateFocusAppearance
            and setSelectionRange could deal with cases of reentrancy into updateLayout
            calls. This happens in a couple layout tests.
        * dom/InputElement.cpp:
        (WebCore::InputElement::updateSelectionRange):
        * html/HTMLInputElement.cpp:
        (WebCore::isTextFieldWithRendererAfterUpdateLayout):
        (WebCore::HTMLInputElement::setSelectionStart):
        (WebCore::HTMLInputElement::setSelectionEnd):
        (WebCore::HTMLInputElement::select):
        * html/HTMLTextAreaElement.cpp:
        (WebCore::rendererAfterUpdateLayout):
        (WebCore::HTMLTextAreaElement::setSelectionStart):
        (WebCore::HTMLTextAreaElement::setSelectionEnd):
        (WebCore::HTMLTextAreaElement::select):
        (WebCore::HTMLTextAreaElement::setSelectionRange):
        (WebCore::HTMLTextAreaElement::updateFocusAppearance):
        * rendering/RenderTextControl.cpp:
        (WebCore::RenderTextControl::setSelectionRange):

2009-09-14  Antti Koivisto  <antti@apple.com>

        Reviewed by Dave Carson.

        <rdar://problem/7217310> Apex8A91 / Zooming in Safari has a slight hang when you stop zooming

        Re-center the tile grid origin on synchronous tile layout. This way only a single
        tile (vs often 4 tiles) needs to be painted synchronously and the blocking time is way shorter.

        * platform/iphone/TiledSurface.mm:
        (WebCore::TiledSurface::centerTileGridOrigin):
        (WebCore::TiledSurface::layoutTilesNow):

2009-09-14  Chris Fleizach  <cfleizach@apple.com>

        Reviewed by Greg Bolsinga.

        <rdar://problem/7217701> AX: ignored images should not be returned when asking for line

        When returning lines through accessibility, ignored elements should not be returned.

        Test: platform/iphone-simulator/accessibility/text-line-no-ignored-elements.html

        * accessibility/iphone/AccessibilityObjectWrapperIPhone.mm:
        (-[AccessibilityObjectWrapper arrayOfTextForTextMarkers:]):
        (-[AccessibilityObjectWrapper elementsForRange:]):

2009-09-11  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by David Carson.

        <rdar://problem/6732593> Add ENABLE(CONTEXT_MENU)

        * Configurations/FeatureDefines.xcconfig: Set up defaults for ENABLE_CONTEXT_MENU (off for iPhone, on for Mac OS X)
        * DerivedSources.make: Use new WebCore.ContextMenu.exp file if ENABLE_DRAG_SUPPORT.
        * WebCore.base.exp: Remove commented out ContextMenu only exports that have moved to WebCore.ContextMenu.exp.
        * WebCore.xcodeproj/project.pbxproj: Add WebCore.ContextMenu.exp.
        * dom/Node.cpp: Use ENABLE(CONTEXT_MENU) where applicable.
        (WebCore::Node::defaultEventHandler): Ditto.
        * loader/EmptyClients.h:
        * page/ContextMenuController.cpp: This file is not compiled for PLATFORM(IPHONE), so remove wrappers.
        (WebCore::ContextMenuController::contextMenuItemSelected):
        * page/EventHandler.cpp: Use ENABLE(CONTEXT_MENU) where applicable.
        * page/EventHandler.h: Ditto.
        * page/Page.cpp: Ditto.
        (WebCore::Page::Page):
        * page/Page.h: Ditto.
        * page/mac/WebCoreViewFactory.h: Ditto.
        * platform/ContextMenu.cpp: This file is not compiled for PLATFORM(IPHONE), so remove wrappers.
        (WebCore::ContextMenu::checkOrEnableIfNeeded):
        * platform/ContextMenuItem.h: Ditto.
        * platform/LocalizedStrings.h: Use ENABLE(CONTEXT_MENU) where applicable.
        * platform/mac/LocalizedStringsMac.mm: Ditto.

2009-09-11  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by David Carson.

        <rdar://problem/6732599> Add ENABLE(DRAG_SUPPORT)

        * Configurations/FeatureDefines.xcconfig: Set up defaults for ENABLE_DRAG_SUPPORT (off for iPhone, on for Mac OS X)
        * DerivedSources.make: Use new WebCore.DragSupport.exp file if ENABLE_DRAG_SUPPORT.
        * WebCore.base.exp: Remove commented out DragSupport only exports that have moved to WebCore.DragSupport.exp.
        * WebCore.xcodeproj/project.pbxproj: Add WebCore.DragSupport.exp.
        * loader/EmptyClients.h: Use ENABLE(DRAG_SUPPORT) where applicable.
        * page/DragController.h: This file is not applicable to PLATFORM(IPHONE), so remove wrappers.
        * page/EventHandler.cpp: Use ENABLE(DRAG_SUPPORT) where applicable. More of these methods are compiled out since they are do nothing code.
        (WebCore::EventHandler::EventHandler):
        (WebCore::EventHandler::clear):
        (WebCore::EventHandler::handleMousePressEvent):
        (WebCore::EventHandler::handleMouseDraggedEvent):
        (WebCore::EventHandler::eventMayStartDrag):
        (WebCore::EventHandler::handleMouseReleaseEvent):
        (WebCore::EventHandler::allowDHTMLDrag):
        (WebCore::EventHandler::handleMouseMoveEvent):
        (WebCore::EventHandler::freeClipboard):
        (WebCore::EventHandler::shouldDragAutoNode):
        * page/EventHandler.h: Ditto.
        * page/Page.cpp: Use ENABLE(DRAG_SUPPORT) where applicable.
        (WebCore::Page::Page): Ditto.
        * page/Page.h:
        * platform/DragImage.cpp: This file is not compiled for PLATFORM(IPHONE), so remove wrappers.
        (WebCore::createDragImageForSelection):
        * rendering/RenderLayer.cpp: Use ENABLE(DRAG_SUPPORT) where applicable.
        (WebCore::RenderLayer::autoscroll):
        * rendering/RenderObject.cpp: Ditto.
        * rendering/RenderObject.h: Ditto.

2009-09-10  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by Cameron Zwarich.

        <rdar://problem/6732605> Add ENABLE(INSPECTOR)

        * Configurations/FeatureDefines.xcconfig: Set up defaults for ENABLE_INSPECTOR (off for iPhone, on for Mac OS X)
        * Configurations/WebCore.xcconfig: Turn off some Inspector files for iPhone only.
        * DerivedSources.make: Use new WebCore.Inspector.exp file if ENABLE_INSPECTOR.
        * WebCore.base.exp: Remove commented out Inspector only exports that have moved to WebCore.Inspector.exp.
        * WebCore.xcodeproj/project.pbxproj: Add WebCore.Inspector.exp.
        * bindings/js/JSDOMWindowBase.cpp: Use ENABLE(INSPECTOR) where applicable.
        (WebCore::JSDOMWindowBase::supportsProfiling):
        * bindings/js/ScriptObject.cpp: Ditto.
        (WebCore::ScriptGlobalObject::set):
        * dom/Document.cpp: Ditto.
        (WebCore::Document::addMessage):
        (WebCore::Document::resourceRetrievedByXMLHttpRequest): Remove incorrect UNUSED_PARAM for PLATFORM(IPHONE)
        (WebCore::Document::scriptImported):
        * dom/ScriptExecutionContext.h: Use ENABLE(INSPECTOR) where applicable.
        (WebCore::):
        * html/HTMLDocument.cpp: Ditto.
        (WebCore::HTMLDocument::createTokenizer):
        * loader/EmptyClients.h: Ditto.
        * loader/FrameLoader.cpp: Ditto.
        (WebCore::FrameLoader::detachFromParent):
        (WebCore::FrameLoader::continueLoadAfterNavigationPolicy):
        (WebCore::FrameLoader::loadedResourceFromMemoryCache):
        (WebCore::FrameLoader::dispatchWindowObjectAvailable):
        (WebCore::FrameLoader::dispatchDidCommitLoad):
        (WebCore::FrameLoader::dispatchAssignIdentifierToInitialRequest):
        (WebCore::FrameLoader::dispatchWillSendRequest):
        (WebCore::FrameLoader::dispatchDidReceiveResponse):
        (WebCore::FrameLoader::dispatchDidReceiveContentLength):
        (WebCore::FrameLoader::dispatchDidFinishLoading):
        * page/Chrome.cpp: Ditto.
        (WebCore::Chrome::mouseDidMoveOverElement):
        * page/Console.cpp: Use ENABLE(INSPECTOR) where applicable. More of these methods are compiled out since they are do nothing code.
        (WebCore::Console::addMessage):
        (WebCore::Console::count):
        (WebCore::Console::profile):
        (WebCore::Console::profileEnd):
        (WebCore::Console::time):
        (WebCore::Console::timeEnd):
        (WebCore::Console::group):
        (WebCore::Console::groupEnd):
        * page/ContextMenuController.cpp: Use ENABLE(INSPECTOR) where applicable.
        (WebCore::ContextMenuController::handleContextMenuEvent):
        (WebCore::ContextMenuController::contextMenuItemSelected):
        * page/DOMWindow.cpp: Ditto.
        (WebCore::DOMWindow::sessionStorage):
        (WebCore::DOMWindow::localStorage):
        * page/EventHandler.cpp: Ditto.
        (WebCore::EventHandler::handleMousePressEvent):
        * page/Page.cpp: Ditto.
        (WebCore::Page::Page):
        (WebCore::Page::~Page):
        * page/Page.h: Ditto.
        * platform/ContextMenu.cpp: Ditto.
        (WebCore::ContextMenu::addInspectElementItem):
        * platform/ContextMenuItem.h: Ditto.
        (WebCore::):
        * storage/Database.cpp: Ditto.
        (WebCore::Database::openDatabase):
        * workers/WorkerContext.cpp: Ditto.
        (WebCore::WorkerContext::importScripts):
        * xml/XMLHttpRequest.cpp: Ditto.
        (WebCore::XMLHttpRequest::didFinishLoading):

2009-09-10  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7152902> iPhone: Cross-site XMLHTTP enables CSRF attacks on otherwise secure web applications

        Merged ToT WebKit r47494.

        * xml/XMLHttpRequest.cpp:
        (WebCore::XMLHttpRequest::makeCrossOriginAccessRequestWithPreflight):
        Don't copy headers to OPTIONS request. The spec is vague about this, but the intention was
        that they shouldn't be sent, and Firefox doesn't send them.

    2009-08-18  Alexey Proskuryakov  <ap@webkit.org>

        Reviewed by Maciej Stachowiak.

        https://bugs.webkit.org/show_bug.cgi?id=28446
        Custom request headers shouldn't be sent with cross-origin preflight request

        Tests: http/tests/xmlhttprequest/access-control-preflight-headers-async.html
               http/tests/xmlhttprequest/access-control-preflight-headers-sync.html

        * loader/DocumentThreadableLoader.cpp:
        (WebCore::DocumentThreadableLoader::makeCrossOriginAccessRequestWithPreflight):
        Don't copy headers to OPTIONS request. The spec is vague about this, but the intention was
        that they shouldn't be sent, and Firefox doesn't send them.

2009-09-08  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by David Kilzer.

        Use <GraphicsServices/GraphicsServices.h> exclusively.

        * bindings/objc/DOMPrivate.h:
        * dom/Document.cpp:
        * page/NavigatorBase.cpp:
        * platform/graphics/mac/FontCustomPlatformData.h:
        * platform/graphics/mac/FontMac.mm:
        * platform/graphics/mac/FontPlatformData.h:
        * platform/iphone/TiledSurface.mm:
        * platform/iphone/WebFontCacheIPhone.mm:
        * platform/mac/WebCoreSystemInterface.h:
        * platform/mac/WebFontCache.h:
        * wak/WAKStringDrawing.h:

2009-09-08  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by David Kilzer.

        Replace uses of WKScreen* with GSMainScreenSize where applicable.

        * WebCore.iPhone.exp: Remove WKScreenGetMainScreenFrame.
        * WebCore.xcodeproj/project.pbxproj: Remove WKScreen.*
        * platform/iphone/PlatformScreenIPhone.mm:
        (WebCore::screenRect): Use GSMainScreenSize. Use framework umbrella header.
        (WebCore::screenAvailableRect): Implement using screenRect(), since it is the same.
        * wak/WKScreen.c: Removed.
        * wak/WKScreen.h: Removed.

2009-09-03  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by Justin Garcia.

        Need to retain the Objective C objects that the properties indicate will be retained!

        * platform/iphone/WebEvent.mm:
        (-[WebEvent initWithTouchEventType:withTimeStamp:withLocation:withTouchCount:withTouchLocations:withTouchGlobalLocations:withTouchIdentifiers:withGestureChanged:withGestureScale:withGestureRotation:]):
        (-[WebEvent initWithKeyEventType:withTimeStamp:withCharacters:withCharactersIgnoringModifiers:withModifiers:isRepeating:withKeyCode:isTabKey:withCharacterSet:]):
        (-[WebEvent dealloc]):

2009-09-03  Greg Bolsinga  <bolsinga@apple.com>

        Update comment per David Kilzer's request.

        * dom/Document.cpp:
        * platform/iphone/TiledSurface.mm:

2009-09-02  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by David Kilzer and Brad Moore.

        <rdar://problem/6881868> Need to modernize the event interface between UIKit and WebKit

        In summary, this replaces all uses of GSEventRef with the new WebEvent. This way any
        changes to GSEventRef or event delivery will not affect WebKit.

        WebEvent is a catch all for all events. However, it ensures that certain WebEvents properties
        apply to the given event type in DEBUG builds. (For example, getting the modifiers of a
        touch event will ASSERT.)

        Here is a summary of the DOM Events sent on iPhone from user events. Note that there may
        be additional events sent by WebCore to itself. These are the events that come from outside.
        These facts are true before and after this particular change.

        - Mouse Events
         - Down, Up, Moved
         - No modifiers
         - Always left button
         - All click count of 1
        - Scroll Wheel Events
         - No modifiers
        - Touch Events (Gestures are a subset)
         - Begin, Change, End, Cancel
         - No modifiers

        * WebCore.Touch.exp: Replace GSEventRef with WebEvent.
        * WebCore.iPhone.exp: Ditto.
        * WebCore.xcodeproj/project.pbxproj: Add WebEvent.h to PrivateHeaders and add WebEvent.m to build.
        * page/EventHandler.h: Replace GSEventRef with WebEvent.
        * page/iphone/EventHandlerIPhone.mm: Replace GSEventRef with WebEvent.
        (WebCore::currentEventSlot):
        (WebCore::EventHandler::currentEvent):
        (WebCore::CurrentEventScope::CurrentEventScope):
        (WebCore::CurrentEventScope::~CurrentEventScope):
        (WebCore::EventHandler::wheelEvent):
        (WebCore::EventHandler::touchEvent):
        (WebCore::EventHandler::currentKeyboardEvent):
        (WebCore::EventHandler::keyEvent):
        (WebCore::lastEventIsMouseUp):
        (WebCore::EventHandler::passMouseDownEventToWidget):
        (WebCore::EventHandler::eventLoopHandleMouseUp):
        (WebCore::EventHandler::passSubframeEventToSubframe):
        (WebCore::EventHandler::passWheelEventToWidget):
        (WebCore::EventHandler::mouseDown):
        (WebCore::EventHandler::mouseUp):
        (WebCore::EventHandler::mouseMoved):
        (WebCore::EventHandler::currentPlatformMouseEvent):
        * platform/PlatformKeyboardEvent.h: Replace GSEventRef with WebEvent.
        (WebCore::PlatformKeyboardEvent::event):
        * platform/PlatformMouseEvent.h: Replace GSEventRef with WebEvent.
        * platform/PlatformTouchEvent.h: Replace GSEventRef with WebEvent.
        * platform/PlatformWheelEvent.h: Replace GSEventRef with WebEvent.
        * platform/iphone/KeyEventIPhone.mm:
        (WebCore::keyIdentifierForKeyEvent): Replace GSEventRef with WebEvent. -characters does not copy.
        (WebCore::PlatformKeyboardEvent::PlatformKeyboardEvent): Replace GSEventRef with WebEvent.
        * platform/iphone/PlatformMouseEventIPhone.mm: Replace GSEventRef with WebEvent.
        (WebCore::pointForEvent):
        (WebCore::globalPointForEvent):
        (WebCore::mouseEventForEvent):
        (WebCore::PlatformMouseEvent::PlatformMouseEvent):
        * platform/iphone/PlatformTouchEventIPhone.mm: Replace GSEventRef with WebEvent.
        (WebCore::PlatformTouchEvent::PlatformTouchEvent):
        * platform/iphone/TiledSurface.mm: Add GSEvent.h include.
        * platform/iphone/WheelEventIPhone.mm: Replace GSEventRef with WebEvent.
        (WebCore::PlatformWheelEvent::PlatformWheelEvent):
        * wak/WAKResponder.h: Replace GSEventRef with WebEvent.
        * wak/WAKResponder.m: Replace GSEventRef with WebEvent.
        (-[WAKResponder handleEvent:]):
        (-[WAKResponder _forwardEvent:]):
        (-[WAKResponder scrollWheel:]):
        (-[WAKResponder mouseEntered:]):
        (-[WAKResponder mouseExited:]):
        (-[WAKResponder mouseMoved:]):
        (-[WAKResponder keyDown:]):
        (-[WAKResponder keyUp:]):
        (-[WAKResponder touch:]):
        (-[WAKResponder mouseUp:]):
        (-[WAKResponder mouseDown:]):
        * wak/WAKScrollView.mm: Replace GSEventRef with WebEvent.
        (WAKScrollViewScrollWheel):
        (-[WAKScrollView scrollWheel:]):
        * wak/WAKView.mm: Replace GSEventRef with WebEvent.
        (eventCallback):
        (-[WAKView _handleEvent:]):
        * wak/WAKViewPrivate.h: Replace GSEventRef with WebEvent.
        * wak/WAKWindow.h: Replace GSEventRef with WebEvent.
        * wak/WAKWindow.mm: Replace GSEventRef with WebEvent.
        (-[WAKWindow sendEvent:]):
        (-[WAKWindow sendEvent:contentChange:]):
        * wak/WKScrollView.mm: Replace GSEventRef with WebEvent.
        (_eventCallback):
        * wak/WKView.h: Replace GSEventRef with WebEvent.
        * wak/WKView.mm: Replace GSEventRef with WebEvent.
        (_WKViewHandleEvent):
        * wak/WKViewPrivate.h: Replace GSEventRef with WebEvent.
        * wak/WKWindow.h: Replace GSEventRef with WebEvent.
        * wak/WKWindow.mm: Replace GSEventRef with WebEvent.
        (WKWindowSendEvent):
        (WKEventGetCurrentEvent):
        * wak/WebCoreThreadSafe.h: Replace GSEventRef with WebEvent.

2009-09-02  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/7191450> kGSEventScrollWheel is not sent to PlatformMouseEvent

        Don't check for this unsent event type.

        * platform/iphone/PlatformMouseEventIPhone.mm:
        (WebCore::mouseEventForGSEvent):

2009-09-02  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by David Carson.

        <rdar://problem/7190860> PlatformKeyboardEvent.isKeypad is always false on iPhone

        This removes the only use of kGSEventFlagsChanged. That is <rdar://problem/7188674>.
        Filed <rdar://problem/7190835> WebCore needs to distinguish between keyboard standard and numpad

        * platform/iphone/KeyEventIPhone.mm:
        (WebCore::PlatformKeyboardEvent::PlatformKeyboardEvent):

2009-09-01  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by David Carson.

        <rdar://problem/7189106> mouse/wheel events do not have any modifiers on iPhone

        Remove logic for PLATFORM(IPHONE) where mouse or wheel events have modifiers.

        * platform/iphone/PlatformMouseEventIPhone.mm:
        (WebCore::PlatformMouseEvent::PlatformMouseEvent):
        * platform/iphone/WheelEventIPhone.mm:
        (WebCore::PlatformWheelEvent::PlatformWheelEvent):

2009-09-01  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by Cameron Zwarich.

        <rdar://problem/7188997> clickCount is always 1 on iPhone

        Don't bother calling to GS, nor logic where it is not 1.

        * page/iphone/EventHandlerIPhone.mm:
        (WebCore::EventHandler::passMouseDownEventToWidget):
        (WebCore::EventHandler::mouseUp):
        * platform/iphone/PlatformMouseEventIPhone.mm:
        (WebCore::clickCountForEvent):

2009-09-01  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by Cameron Zwarich.

        <rdar://problem/7186948> GS MouseDragged is mapping to MouseMoved in WebCore

        1) MouseDragged events are not sent by UIKit to WebKit.
        2) Even if they were they were mapped to MouseMoved!
        It appears maybe panning once worked this way, but now it is all in the UIKit
        side. So this removes all PLATFORM(IPHONE) MouseDragged remnants.

        * WebCore.iPhone.exp:
        * page/EventHandler.h:
        * page/iphone/EventHandlerIPhone.mm:
        (WebCore::EventHandler::eventActivatedView):
        (WebCore::EventHandler::passSubframeEventToSubframe):
        * platform/iphone/PlatformMouseEventIPhone.mm:
        (WebCore::mouseButtonForEvent):
        (WebCore::mouseEventForGSEvent):
        * wak/WAKResponder.h:
        * wak/WAKResponder.m:
        * wak/WAKView.mm:
        (-[WAKView _handleEvent:]):
        * wak/WKScrollView.h:
        * wak/WKScrollView.mm:
        (_eventCallback):
        * wak/WKWindow.mm:
        (WKWindowSendEvent):

2009-09-01  Brad Moore  <bradm@apple.com>

        Reviewed by Greg Bolsinga.

        <rdar://problem/7187083> ASSERT in toRenderBlock(); investigate toRenderBlock usage

        The semantics of toRenderBlock changed in the merge; it can now be called only on
        render blocks.  Adding appropriate guards.

        * bindings/objc/DOMUIKitExtensions.mm:
        (-[DOMNode containsOnlyInlineObjects]):
        (-[DOMNode isSelectableBlock]):

2009-08-31  Andrew Platzer  <aep@apple.com>

        Reviewed by Greg Bolsinga.

        <rdar://problem/6862236> Leak in WebThreadCurrentContext?

        Clean up thread context data.

        * wak/WebCoreThread.mm:
        (FreeThreadContext):
        (InitThreadContextKey):

2009-08-30  David Kilzer  <ddkilzer@apple.com>

        Make Mac OS X WebKit build from iPhone WebKit sources

        Reviewed by Greg Bolsinga.

        * Configurations/WebCore.xcconfig: Added missing iPhone-only
        source files to EXCLUDED_SOURCE_FILE_NAMES_macosx.
        * DerivedSources.make: Added WebCore.macosx.exp to
        WEBCORE_EXPORT_DEPENDENCIES and a rule to create
        WebCore.macosx.exp from commented-out lines in WebCore.base.exp.
        * accessibility/AXObjectCache.cpp:
        (WebCore::AXObjectCache::textMarkerDataForVisiblePosition):
        Fixed missing 'const' from a previous merge.
        * accessibility/AXObjectCache.h:
        (WebCore::AXObjectCache::textMarkerDataForVisiblePosition): Ditto.
        * accessibility/mac/AccessibilityObjectWrapper.mm:
        (textMarkerForVisiblePosition): Fixed incorrect class name from
        a previous merge.
        (visiblePositionForTextMarker): Ditto.
        * page/Geolocation.cpp:
        (WebCore::Geolocation::setIsAllowed): Fixed botched paste
        operation from a previous merge.
        * platform/graphics/mac/GraphicsLayerCA.mm: Moved
        QuartzCore/QuartzCorePrivate.h to be an iPhone-only import.
        * scrub-ifdefs.pl: Updated %keep_ifdefs and %delete_ifdefs to be
        defined correctly when building with a macosx SDK.

2009-08-28  Chris Fleizach  <cfleizach@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/7159401> AX: cache some more values in AXObjectWrapper to avoid computation

        This patch caches some very frequently used (but unchanging) accesssibility values
        so they need to not be recomputed every time asked for.
        35% speedup achieved when VoiceOver performs a search.

        * accessibility/iphone/AccessibilityObjectWrapperIPhone.h:
        * accessibility/iphone/AccessibilityObjectWrapperIPhone.mm:
        (-[AccessibilityObjectWrapper initWithAccessibilityObject:]):
        (-[AccessibilityObjectWrapper accessibilityTraits]):
        (-[AccessibilityObjectWrapper determineIsAccessibilityElement]):
        (-[AccessibilityObjectWrapper isAccessibilityElement]):
        (-[AccessibilityObjectWrapper _accessibilityWebDocumentView]):

2009-08-27  Chris Fleizach  <cfleizach@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/7141353> AX: identify lists and tables

        Identify the first element in a table and in a list so VoiceOver can quickly
        jump to them.

        Tests: platform/iphone-simulator/accessibility/tables-lists.html
               platform/iphone-simulator/accessibility/text-marker-list-item.html

        * accessibility/AccessibilityObject.h:
        (WebCore::AccessibilityObject::isTable):
        * accessibility/AccessibilityTable.cpp:
        (WebCore::AccessibilityTable::AccessibilityTable):
        (WebCore::AccessibilityTable::determineAccessibilityExposibility):
        * accessibility/AccessibilityTable.h:
        (WebCore::AccessibilityTable::isTable):
        (WebCore::AccessibilityTable::isTableExposableThroughAccessibility):
        * accessibility/iphone/AccessibilityObjectWrapperIPhone.mm:
        (-[AccessibilityObjectWrapper firstAccessibilityElementOfAncestor:]):
        (-[AccessibilityObjectWrapper _accessibilityTraitsFromAncestors]):
        (-[AccessibilityObjectWrapper accessibilityTraits]):
        (-[AccessibilityObjectWrapper textMarkerForPosition:]):

2009-08-27  Greg Bolsinga  <bolsinga@apple.com>

        Build Fix. Use extern "C".

        * wak/WKScrollView.mm:

2009-08-27  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by David Kilzer.

        These files are going to have to handle some ObjC shortly, so they were renamed.

        * WebCore.xcodeproj/project.pbxproj:
        * wak/WKScrollView.mm: Renamed from WebCore/wak/WKScrollView.c.
        * wak/WKView.mm: Renamed from WebCore/wak/WKView.cpp.
        * wak/WKWindow.mm: Renamed from WebCore/wak/WKWindow.cpp.

2009-08-27  Antti Koivisto  <antti@apple.com>

        Merge http://trac.webkit.org/changeset/47835

    2009-08-27  Antti Koivisto  <antti@apple.com>

            Reviewed by Dave Kilzer.

            https://bugs.webkit.org/show_bug.cgi?id=28784

            Add an exported method to flush pending repaints.

            * WebCore.base.exp:
            * page/FrameView.cpp:
            (WebCore::FrameView::layoutIfNeededRecursive):
            (WebCore::FrameView::flushDeferredRepaints):
            * page/FrameView.h:

2009-08-26  David Kilzer  <ddkilzer@apple.com>

        Remove unused and empty WKGraphicsPrivate.h

        Reviewed by Greg Bolsinga.

        * WebCore.xcodeproj/project.pbxproj: Removed WKGraphicsPrivate.h
        from the project.
        * wak/WKGraphics.mm: Removed WKGraphicsPrivate.h.  Reordered
        headers.
        * wak/WKGraphicsPrivate.h: Removed.
        * wak/WKView.cpp: Removed WKGraphicsPrivate.h.  Reordered
        headers.

2009-08-26  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by David Kilzer.

        Be explicit about what GraphicsServices headers are included.
        Remove unnecessary includes of GraphicsServices headers as well.

        * dom/Document.cpp:
        (WebCore::setViewportFeature):
        * page/Frame.h:
        * page/mac/FrameMac.mm:
        * page/mac/WebEventRegion.mm:
        * platform/graphics/Image.cpp:
        * platform/graphics/mac/FontMac.mm:
        * platform/iphone/KeyEventIPhone.mm:
        * platform/iphone/PlatformMouseEventIPhone.mm:
        * platform/iphone/WheelEventIPhone.mm:
        * platform/mac/WebCoreSystemInterface.h:
        * wak/WAKResponder.h:
        * wak/WAKStringDrawing.h:
        * wak/WAKView.mm:
        * wak/WKScrollView.c:
        * wak/WKView.h:
        * wak/WKWindow.cpp:
        * wak/WKWindow.h:
        * wak/WebCoreThread.h:
        * wak/WebCoreThreadSafe.h:

2009-08-26  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by David Kilzer.

        More GSEventRef clean up before replacing it altogether.

        * page/mac/EventHandlerMac.mm: Remove ENABLE(TOUCH_EVENTS) block.
        * platform/iphone/PlatformMouseEventIPhone.mm: Rename mouseEventForNSEvent() to mouseEventForGSEvent().
        (WebCore::mouseEventForGSEvent):
        (WebCore::PlatformMouseEvent::PlatformMouseEvent):
        * platform/iphone/PlatformTouchEventIPhone.mm: PLATFORM(IPHONE) not needed in iPhone-only file.
        (WebCore::PlatformTouchEvent::PlatformTouchEvent):

2009-08-26  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7171919> Copy externally-used WebCore headers to WebKit

        Reviewed by Greg Bolsinga.

        * platform/iphone/ScrollViewIPhone.mm: Added import of
        WAKClipView.h since it was removed from WAKScrollView.h in favor
        of an @class predeclaration so WAKClipView.h doesn't need to be
        copied to WebKit.
        * wak/WAKView.mm: Ditto.
        * wak/WAKWindow.mm: Reordered headers.  Removed unneeded import
        of WKWindow.h as that's covered by WKWindowPrivate.h.

        Updated copyrights, added header guards and reorganized
        #include/#import statements in all of the WebCore/wak/*.h files.
        Also removed #import <JavaScriptCore/Platform.h> statements.

        * wak/WAKAppKitStubs.h:
        * wak/WAKClipView.h:
        * wak/WAKResponder.h:
        * wak/WAKScrollView.h:
        * wak/WAKStringDrawing.h:
        * wak/WAKView.h:
        * wak/WAKViewPrivate.h:
        * wak/WAKWindow.h:
        * wak/WAKWindowPrivate.h:
        * wak/WKClipView.h:
        * wak/WKContentObservation.h:
        * wak/WKGraphics.h:
        * wak/WKGraphicsPrivate.h:
        * wak/WKScreen.h:
        * wak/WKScrollView.h:
        * wak/WKTypes.h:
        * wak/WKUtilities.h:
        * wak/WKView.h:
        * wak/WKViewPrivate.h:
        * wak/WKWindow.h:
        * wak/WKWindowPrivate.h:
        * wak/WebCoreTelephoneParser.h:
        * wak/WebCoreThread.h:
        * wak/WebCoreThreadMessage.h:
        * wak/WebCoreThreadSafe.h:

2009-08-26  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by David Kilzer.

        Wack -[WAKWindow currentEvent], as it is unused.

        * wak/WAKWindow.h:
        * wak/WAKWindow.mm:

2009-08-26  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by David Kilzer.

        Use EventHandlerIPhone.mm instead of EventHandlerMac.mm on iPhone.
        Remove the iPhone code from the Mac file, and the Mac code from the
        iPhone file. Be sure to ignore the file not needed on each platform.

        * Configurations/WebCore.xcconfig:
        * WebCore.xcodeproj/project.pbxproj:
        * page/iphone/EventHandlerIPhone.mm:
        (WebCore::EventHandler::wheelEvent):
        (WebCore::EventHandler::currentKeyboardEvent):
        (WebCore::EventHandler::keyEvent):
        (WebCore::lastEventIsMouseUp):
        (WebCore::EventHandler::passMouseDownEventToWidget):
        (WebCore::EventHandler::eventActivatedView):
        (WebCore::EventHandler::eventLoopHandleMouseDragged):
        (WebCore::EventHandler::eventLoopHandleMouseUp):
        (WebCore::EventHandler::passSubframeEventToSubframe):
        (WebCore::EventHandler::passWheelEventToWidget):
        (WebCore::EventHandler::mouseUp):
        (WebCore::EventHandler::currentPlatformMouseEvent):
        * page/mac/EventHandlerMac.mm:
        (WebCore::CurrentEventScope::~CurrentEventScope):
        (WebCore::EventHandler::wheelEvent):
        (WebCore::EventHandler::currentKeyboardEvent):
        (WebCore::EventHandler::needsKeyboardEventDisambiguationQuirks):
        (WebCore::EventHandler::keyEvent):
        (WebCore::lastEventIsMouseUp):
        (WebCore::EventHandler::passMouseDownEventToWidget):
        (WebCore::EventHandler::eventActivatedView):
        (WebCore::EventHandler::eventLoopHandleMouseDragged):
        (WebCore::EventHandler::createDraggingClipboard):
        (WebCore::EventHandler::eventLoopHandleMouseUp):
        (WebCore::EventHandler::passSubframeEventToSubframe):
        (WebCore::selfRetainingNSScrollViewScrollWheel):
        (WebCore::EventHandler::passWheelEventToWidget):
        (WebCore::EventHandler::mouseUp):
        (WebCore::EventHandler::sendFakeEventsAfterWidgetTracking):
        (WebCore::EventHandler::currentPlatformMouseEvent):
        (WebCore::EventHandler::eventMayStartDrag):

2009-08-26  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by David Kilzer.

        Rename EventHandlerIPhone.cpp to EventHandlerIPhoneTouch.cpp in
        preparation for more cleanup.

        * WebCore.xcodeproj/project.pbxproj:
        * page/iphone/EventHandlerIPhoneTouch.cpp: Renamed from WebCore/page/iphone/EventHandlerIPhone.cpp.
        (WebCore::EventHandler::dispatchTouchEvent):
        (WebCore::EventHandler::dispatchGestureEvent):
        (WebCore::getTargetTouches):
        (WebCore::EventHandler::handleTouchEvent):

2009-08-25  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by Antti Koivisto.

        Made PlatformTouchEvent match PlatformMouseEvent style, in that
        it has its own instance variables that are cross platform, and the
        constructor pulls all the data out of the platform specific data.

        Also renamed scaleAbsolute() and rotationAbsolute() to scale() and
        rotation(), respectively.

        * page/iphone/EventHandlerIPhone.cpp:
        (WebCore::EventHandler::handleTouchEvent):
        * platform/PlatformTouchEvent.h:
        (WebCore::PlatformTouchEvent::eventType):
        (WebCore::PlatformTouchEvent::touchCount):
        (WebCore::PlatformTouchEvent::touchLocationAtIndex):
        (WebCore::PlatformTouchEvent::globalTouchLocationAtIndex):
        (WebCore::PlatformTouchEvent::touchIdentifierAtIndex):
        (WebCore::PlatformTouchEvent::gestureChanged):
        (WebCore::PlatformTouchEvent::scale):
        (WebCore::PlatformTouchEvent::rotation):
        * platform/iphone/PlatformTouchEventIPhone.mm:
        (WebCore::PlatformTouchEvent::PlatformTouchEvent):

2009-08-25  Antti Koivisto  <antti@apple.com>

        Reviewed by Cameron Zwarich.

        Update simulator pretend memory size to 256MB. Increment the simulated memory level so things behave
        more like device on normal state.

        * platform/iphone/SystemMemoryIPhone.cpp:
        (WebCore::systemMemoryLevel):
        (WebCore::systemTotalMemory):

2009-08-25  Antti Koivisto  <antti@apple.com>

        Reviewed by Greg Bolsinga.

        <rdar://problem/7040047> Sometimes the bottom of the screen renders noticeably before the top of the screen

        Add new tiles after the earlier ones in the sublayer array. This way they paint in correct
        order (but still stay behind any non-tile layers).

        * platform/iphone/TiledSurface.h:
        * platform/iphone/TiledSurface.mm:
        (WebCore::TiledSurface::Tile::Tile):
        (WebCore::TiledSurface::Tile::~Tile):
        (WebCore::TiledSurface::TiledSurface):

2009-08-25  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by Antti Koivisto.

        Just a clean up of ENABLE(TOUCH_EVENTS) code.

        * dom/Node.cpp: Remove unneeded #include.
        * page/EventHandler.h: The const PlatformTouchEvent& parameters passed
            to dispatchTouchEvent() and dispatchGestureEvent() are unused.
        * page/iphone/EventHandlerIPhone.cpp:
        (WebCore::EventHandler::dispatchTouchEvent):The const PlatformTouchEvent& parameter
            is unused.
        (WebCore::EventHandler::dispatchGestureEvent): ditto.
        (WebCore::EventHandler::handleTouchEvent): Not necessary to pass the PlatformTouchEvent.
        * platform/PlatformTouchEvent.h: The timestamp() method is unused.
        * platform/iphone/PlatformTouchEventIPhone.mm: ditto.

2009-08-25  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by David Kilzer.

        Remove an unused GSEventRef using method.

        * platform/PlatformTouchEvent.h:

2009-08-25  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7165294> Need IS_WILDCAT() runtime check for WebKit

        Reviewed by Cameron Zwarich.

        * WebCore.iPhone.exp: Exported WebCore::isWildcat().
        * config.h: Declared WebCore::isWildcat() and IS_WILDCAT().
        * platform/iphone/PlatformScreenIPhone.mm:
        (WebCore::initializeIsWildcat): Added.
        (WebCore::isWildcat): Added.

2009-08-24  Antti Koivisto  <antti@apple.com>

        <rdar://problem/7126822> Reproducible assertion failure on cnn.com

        Merge r47737 from open source TOT.

    2009-08-24  Antti Koivisto  <antti@apple.com>

            Reviewed by Simon Fraser.

            https://bugs.webkit.org/show_bug.cgi?id=28698
            Avoid unnecessary transformations for the window resizer rect.

            * platform/Scrollbar.cpp:
            (WebCore::Scrollbar::setFrameRect):

2009-08-24  Brad Moore  <bradm@apple.com>

        Reviewed by Justin Garcia.

        <rdar://problem/7141614> Crash or hang when deleting the chars in the Add to Home pop-over

        VisiblePosition canonicalization gets in the way of start/endOfDocument() finding valid
        visible positions in relation to the document's root element.  This caused us to loop forever
        looking for the start of the document.

        * editing/visible_units.cpp:
        (WebCore::startOfDocument):
        (WebCore::endOfDocument):

2009-08-24  David Kilzer  <ddkilzer@apple.com>

        Remove use of GSColorCreateWithDeviceWhite()

        Reviewed by Greg Bolsinga.

        * WebCore.iPhone.exp: Exported
        WebCore::createCGColorWithDeviceWhite().
        * platform/graphics/Color.h:
        (WebCore::createCGColorWithDeviceWhite): Added declaration.
        * platform/graphics/cg/ColorCG.cpp:
        (WebCore::createCGColorWithDeviceWhite): Added.

2009-08-24  David Kilzer  <ddkilzer@apple.com>

        Remove GSColorSetColor() and GSColorSetSystemColor()

        Reviewed by Greg Bolsinga.

        GSColor APIs will be deprecated, so use of GSColorSetColor()
        and GSColorSetSystemColor() must be removed.  Unfortunately,
        WAK* and WK* classes use CGContextRef directly instead of using
        WebCore::GraphicsContext.  That means setStrokeAndFillColor()
        doesn't really belong in GraphicsContext.h, but someday it will
        be refactored into a method that does fit.

        * WebCore.iPhone.exp: Added export of
        WebCore::setStrokeAndFillColor().
        * platform/graphics/GraphicsContext.h:
        (WebCore::setStrokeAndFillColor): Added declaration.
        * platform/graphics/cg/GraphicsContextCG.cpp:
        (WebCore::setStrokeAndFillColor): Added.  Makes the same calls
        as GSColorSetColor().

2009-08-24  David Kilzer  <ddkilzer@apple.com>

        Remove WebCore::GetSharedColorSpace()

        Reviewed by Greg Bolsinga.

        * platform/graphics/Color.h: Added CGColorSpaceRef declaration.
        (WebCore::deviceRGBColorSpace): Added declaration.
        * platform/graphics/cg/ColorCG.cpp:
        (WebCore::deviceRGBColorSpace): Removed static keyword.
        * platform/graphics/cg/GraphicsContextCG.cpp:
        (WebCore::GetSharedColorSpace): Removed.  This method was meant
        to get the device RGB color space only once, but failed because
        sharedColorSpace lacked the static keyword.
        (WebCore::GraphicsContext::drawAxialGradient): Switched from
        using GetSharedColorSpace() to deviceRGBColorSpace().  Also
        switched to use RetainPtr<> and removed CFRelease() call.
        (WebCore::GraphicsContext::drawRadialGradient): Ditto.

2009-08-24  David Kilzer  <ddkilzer@apple.com>

        Remove unused GraphicsContext::setPenFromCGColor()

        Reviewed by Greg Bolsinga.

        * platform/graphics/GraphicsContext.h:
        (GraphicsContext::setPenFromCGColor): Removed.
        * platform/graphics/mac/GraphicsContextMac.mm:
        (GraphicsContext::setPenFromCGColor): Removed.

2009-08-24  David Kilzer  <ddkilzer@apple.com>

        Remove use of GSColorGetRGBAComponents()

        Reviewed by Greg Bolsinga.

        * WebCore.iPhone.exp: Exported
        WebCore::Color::Color(CGColorRef).
        * platform/graphics/cg/ColorCG.cpp:
        (WebCore::deviceRGBColorSpace): Extracted from
        createCGColorWithDeviceRGBA().
        (WebCore::createCGColorWithDeviceRGBA): Added overloaded method
        that takes a CGColorRef.
        (WebCore::Color::Color): Updated to correct the CGColorRef for
        the device RGB before extracting its components.
        * platform/graphics/mac/GraphicsContextMac.mm:
        (WebCore::GraphicsContext::setPenFromCGColor): Switched to use
        Color::Color(CGColorRef) since it now corrects for device RGB on
        iPhone OS.

2009-08-24  David Kilzer  <ddkilzer@apple.com>

        Move createCGColor() from ColorMac.mm to ColorCG.cpp

        Reviewed by Greg Bolsinga.

        * Configurations/WebCore.xcconfig: Added ColorMac.mm to
        EXCLUDED_SOURCE_FILE_NAMES_iphoneos.
        * platform/graphics/cg/ColorCG.cpp:
        (WebCore::createCGColorWithDeviceRGBA): Added.  Moved from
        ColorMac.mm.
        (WebCore::createCGColor): Ditto.  Changed use of unsigned type
        to RGBA32.
        * platform/graphics/mac/ColorMac.h: Added comment after #endif.
        * platform/graphics/mac/ColorMac.mm: Removed iPhone-specific
        changes since the code was moved to ColorCG.cpp.

2009-08-24  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7161780> WebCore and WebKit: Switch from GSColorForSystemColor() to CGColor APIs

        Reviewed by Greg Bolsinga.

        * platform/graphics/Color.h:
        (Color::cyan): Added.  Based on kGSCyanColor definition.
        * platform/graphics/mac/ColorMac.mm:
        (WebCore::createCGColorWithDeviceRGBA): Added.  Returns a
        CGColorRef corrected for the device RGB color space.
        (WebCore::createCGColor): Switched from using
        GSColorForSystemColor() to createCGColorWithDeviceRGBA().  Also
        changed cachedColors to be an array of RetainPtr<CGColorRef>
        objects to reduce the need for explicit CGColorRetain and
        CGColorRelease calls.

2009-08-24  David Kilzer  <ddkilzer@apple.com>

        Remove unused WKViewCreateImage() method and GSColor.h import statements

        Reviewed by Greg Bolsinga.

        * WebCore.iPhone.exp: Removed export of _WKViewCreateImage.
        * wak/WKScrollView.c: Removed unused #import
        <GraphicsServices/GSColor.h> statement.
        * wak/WKView.cpp: Ditto.
        (WKViewCreateImage): Removed.
        * wak/WKView.h:
        (WKViewCreateImage): Removed.

2009-08-19  Chris Fleizach  <cfleizach@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/7135709> AX: return list marker data in arrayOfTextForTextMarkers
        This patch allow the bullet items in front of a <li> item to be returned as part of the text of a line for VoiceOver.

        * accessibility/iphone/AccessibilityObjectWrapperIPhone.mm:
        (-[AccessibilityObjectWrapper arrayOfTextForTextMarkers:]):
        (-[AccessibilityObjectWrapper stringForRange:]):

2009-08-18  Chris Fleizach  <cfleizach@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/7135703> merge r47076 for Apex from open source

        Merging accessibility code which returns the list item text marker string.

        * accessibility/AccessibilityObject.cpp:
        (WebCore::AccessibilityObject::renderListItemContainerForNode):
        (WebCore::AccessibilityObject::listMarkerTextForNodeAndPosition):
        (WebCore::AccessibilityObject::stringForVisiblePositionRange):
        * accessibility/AccessibilityObject.h:
        * accessibility/mac/AccessibilityObjectWrapper.mm:
        (-[AccessibilityObjectWrapper doAXAttributedStringForTextMarkerRange:]):
        (-[AccessibilityObjectWrapper accessibilityParameterizedAttributeNames]):
        (-[AccessibilityObjectWrapper accessibilityAttributeValue:forParameter:]):

2009-08-18  Chris Fleizach  <cfleizach@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/7151108> AX: crash at -[AccessibilityObjectWrapper accessibilityObjectForTextMarker:]
        An AX object needed to be checked for nil before proceeding.

        * accessibility/iphone/AccessibilityObjectWrapperIPhone.mm:
        (-[AccessibilityObjectWrapper accessibilityObjectForTextMarker:]):

2009-08-17  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7146656> WebCore-564 causes build failures when including headers

        Reviewed by BUILD FIX.

        * platform/graphics/mac/MediaPlayerProxy.h: Removed #include
        <wtf/Platform.h> since that broke QuickTimeBrowserPlugin.  The
        PLATFORM(IPHONE) check gets stripped by scrub-ifdefs.pl anyway.
        Changed #import "WAKAppKitStubs.h" to #import
        <Foundation/NSGeometry.h>, since that's the only part of the
        other header that was being used.

2009-08-16  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6649712> Replace MAX()/MIN() Foundation preprocessor macros with std::max()/std::min()

        Merged ToT WebKit r47341.

        * rendering/RenderBlock.cpp:
        (WebCore::oneLineTextMultiplier): Added.  Converted from
        #define ONE_LINE_TEXT_MULTIPLIER macro.  Changed MAX() to max().
        (WebCore::textMultiplier): Added.  Converted from
        #define TEXT_MULTIPLIER macro.  Changed MAX() to max().
        (WebCore::RenderBlock::adjustComputedFontSizes): Changed MIN()
        to min().
        * rendering/RenderButton.cpp:
        (WebCore::RenderButton::layout): Added using namespace std;
        statement.  Changed MIN() to min().

    2009-08-16  David Kilzer  <ddkilzer@apple.com>

        <http://webkit.org/b/28355> Replace MAX()/MIN() macros with type-safe std::max()/min() templates

        Reviewed by Dan Bernstein.

        * accessibility/mac/AccessibilityObjectWrapper.mm:
        (AXAttributeStringSetSpelling): Changed MIN() to min().
        * platform/graphics/mac/FontMacATSUI.mm:
        (WebCore::Font::selectionRectForComplexText): Changed MAX() to
        max() and MIN() to min().
        (WebCore::Font::floatWidthForComplexText): Ditto.
        * platform/graphics/mac/SimpleFontDataMac.mm: Added using
        std::max statement.
        (WebCore::SimpleFontData::platformInit): Changed MAX() to max().
        * platform/text/mac/TextCodecMac.cpp:
        (WebCore::TextCodecMac::decode): Changed MIN() to min().

2009-08-16  David Kilzer  <ddkilzer@apple.com>

        Remove #import "WAKAppKitStubs.h" from WebCorePrefix.h

        Reviewed by Greg Bolsinga.

        The #import "WAKAppKitStubs.h" statement is replaced by #import
        <Foundation/Foundation.h> since that most closely matches what
        #import <Cocoa/Cocoa.h> does on Mac OS X.  The remaining changes
        are from WAKAppKitStubs.h not being implicitly imported into
        every Obj-C and Obj-C++ source file.

        * WebCorePrefix.h: Removed #import "WAKAppKitStubs.h".  Added
        #import <Foundation/Foundation.h>.
        * editing/TextAffinity.h: Added #import "WAKAppKitStubs.h" when
        compiling for Obj-C and Obj-C++.
        * page/EventHandler.h: Ditto.
        * page/mac/WebEventRegion.h: Added import statements for
        <CoreGraphics/CGGeometry.h> and <Foundation/NSObject.h>.  Added
        missing header guard.
        * page/mac/WebEventRegion.mm: Added missing #import "config.h".
        Removed redundant #import <CoreGraphics/CGGeometry.h>
        * platform/ScrollView.h: Added class/@class declarations for
        WAKView.  Added #define macros to rename NSScrollView to
        WAKScrollView.
        * platform/graphics/iphone/MediaPlayerPrivateIPhone.mm: Added
        #include "WAKAppKitStubs.h".
        * platform/graphics/mac/MediaPlayerProxy.h: Added #import
        "WAKAppKitStubs.h" when compiling for Obj-C and Obj-C++.
        * platform/iphone/KeyEventIPhone.mm: Added #import
        "WAKAppKitStubs.h".  Reordered #import statements.
        * platform/iphone/ScrollViewIPhone.mm: Ditto.
        * platform/network/iphone/NSURLConnectionIPhone.m: Added missing
        #import "config.h".  Added #import <Foundation/NSInvocation.h>.
        * wak/WAKAppKitStubs.h: Reordered #import statements.  Added
        separate #ifndef checks for each NS* class that is renamed to a
        WAK* class.
        * wak/WAKScrollView.mm: Added missing #import "config.h".  Added
        #import "WAKAppKitStubs.h".
        * wak/WAKView.mm: Added missing #import "config.h".  Reordered
        #import statements.

2009-08-16  David Kilzer  <ddkilzer@apple.com>

        Remove #import "WebCoreMessageThread.h" from WebCorePrefix.h

        Reviewed by Greg Bolsinga.

        The #import "WebCoreMessageThread.h" statement in
        WebCorePrefix.h was hiding a bug in CodeGeneratorObjC.pm which
        wasn't adding an #import statement to generated DOM*.mm source
        files that were derived from *.idl files that used the
        [IPhoneApplyOnWebThread] attribute.  (Note that the generated
        code was correct before this change--it was just missing an
        #import statement.)

        The other source files were relying on WebCorePrefix.h to import
        WebCoreThreadMessage.h instead of doing it themselves.

        * WebCorePrefix.h: Removed #import "WebCoreThreadMessage.h".
        * bindings/scripts/CodeGeneratorObjC.pm:
        (GenerateImplementation): Moved code that checked
        $needIPhoneWebCoreThreadMessageHeader to the end of the method
        since $needIPhoneWebCoreThreadMessageHeader is not set until the
        implementation is generated.  Used a new variable named
        @implConditionalIncludes to hold the conditional include
        statements.
        (WriteData): Print out @implConditionalIncludes in the correct
        location for the generated source.
        * platform/graphics/mac/GraphicsLayerCA.mm: Added #import
        "WebCoreThreadMessage.h".
        * platform/iphone/GeolocationServiceCoreLocation.mm: Replaced
        #import "WebCoreThread.h" with #import "WebCoreThreadMessage.h".
        * platform/iphone/TiledSurface.mm: Added #import
        "WebCoreThreadMessage.h".  Reordered #import statements.
        * platform/network/mac/ResourceHandleMac.mm: Added #import
        "WebCoreThreadMessage.h".

2009-08-16  David Kilzer  <ddkilzer@apple.com>

        Remove unused #include "WKTypes.h" from WebCorePrefix.h

        Reviewed by Greg Bolsinga.

        * WebCorePrefix.h: Removed unused #include "WKTypes.h".

2009-08-16  David Kilzer  <ddkilzer@apple.com>

        Move definition of _DONT_USE_CTYPE_INLINE_ to wtf/DisallowCType.h

        Reviewed by Greg Bolsinga.

        All source files fail to build for the iPhone OS SDK and the
        iPhone Simulator SDK unless _DONT_USE_CTYPE_INLINE_ is defined
        before including <ctype.h>.  Instead of defining it in
        WebCorePrefix.h and WebKitPrefix.h, move the definition to
        DisallowCType.h since that header is already included in
        WebCore/config.h and WebKit/WebKitPrefix.h.

        * WebCorePrefix.h: Removed #define _DONT_USE_CTYPE_INLINE_ for
        PLATFORM(IPHONE).

2009-08-14  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6794574> WebThreadCreateNSInvocation should not have "Create" in its name

        Reviewed by Greg Bolsinga.

        Because WebThreadCreateNSInvocation() doesn't follow the create
        rule for CoreFoundation methods, the static analyzer complains
        that the method doesn't return a retained object.  Renaming it
        to WebThreadMakeNSInvocation() fixes this warning and lets the
        static analyzer do its job.

        A workaround is included to WebCoreThreadMessage.h for projects
        that haven't updated to the new method name yet.

        * WebCore.iPhone.exp: Changed export from
        _WebThreadCreateNSInvocation to _WebThreadMakeNSInvocation.
        * bindings/scripts/CodeGeneratorObjC.pm: Switched to using
        WebThreadMakeNSInvocation().
        * platform/iphone/GeolocationServiceCoreLocation.mm: Ditto.
        (-[GeoLocationManager sendLocation:]):
        (-[GeoLocationManager sendError:withString:]):
        * platform/iphone/TiledSurface.mm: Ditto.
        (-[WebThreadCaller doLayoutTiles]):
        (-[WebThreadCaller updateTilingMode]):
        * platform/network/mac/ResourceHandleMac.mm: Ditto.
        (WebCore::ResourceHandle::start):
        * wak/WAKWindow.mm: Ditto.
        (-[WAKWindow sendGSEvent:]):
        (-[WAKWindow sendGSEvent:contentChange:]):
        * wak/WebCoreThread.mm: Ditto.
        (invocationForPostNotification):
        (WebThreadCreateNSInvocation): Removed.
        (WebThreadMakeNSInvocation): Added.  Renamed from
        WebThreadCreateNSInvocation().
        * wak/WebCoreThreadMessage.h: Renamed
        WebThreadCreateNSInvocation() to WebThreadMakeNSInvocation().
        Added workaround for existing clients that haven't switched yet.

2009-08-13  Andrew Platzer  <aep@apple.com>

        Reviewed by Greg Bolsinga & Antti Koivisto.

        Interim changes needed to support HiDPI.

        * dom/Document.cpp:
        (WebCore::setViewportFeature):
        * platform/iphone/TiledSurface.mm:
        (WebCore::TiledSurface::Tile::Tile):

2009-08-13  Chris Fleizach  <cfleizach@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/7140166> AX: expose nextMarker/prevMarker for accessibility

        Expose existing WebKit functionality through iPhone AX wrappers.

        * accessibility/iphone/AccessibilityObjectWrapperIPhone.mm:
        (-[AccessibilityObjectWrapper nextMarkerForMarker:]):
        (-[AccessibilityObjectWrapper previousMarkerForMarker:]):

2009-08-12  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by Brad Moore.

        <rdar://problem/7138422> zoomToNode zooms to the selected DOMNode, not the DOMNode given

        Add Frame::rectForSelection(), which is used to implement Frame:rectForScrollToVisible().

        * WebCore.iPhone.exp:
        * page/Frame.h:
        * page/iphone/FrameIPhone.mm:
        (WebCore::Frame::rectForScrollToVisible):
        (WebCore::Frame::rectForSelection):

2009-08-12  Chris Fleizach  <cfleizach@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/7137731> AX: need to return any element type when returning line text markers
        Allow for heading elements to be returned independently of text when "lines" are returned by
        WebCore through accessibility.

        No way yet to test the content of TextMarkers through DRT.

        * accessibility/AccessibilityObject.cpp:
        (WebCore::AccessibilityObject::headingElementForNode):
        * accessibility/AccessibilityObject.h:
        * accessibility/iphone/AccessibilityObjectWrapperIPhone.mm:
        (-[AccessibilityObjectWrapper isAccessibilityElement]):
        (-[AccessibilityObjectWrapper _addAccessibilityObject:toTextMarkerArray:]):
        (-[AccessibilityObjectWrapper arrayOfTextForTextMarkers:]):

2009-08-11  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6917864> Make FontCache::requiresCustomFallbackFont() static and move it up to be inlined

        Reviewed by NOBODY (OOPS!).

        * platform/graphics/FontCache.h:
        (WebCore::FontCache::requiresCustomFallbackFont): Removed.
        * platform/graphics/mac/FontCacheMac.mm:
        (WebCore::requiresCustomFallbackFont): Made static and moved up
        in the source file so it may be inlined.
        (WebCore::FontCache::requiresCustomFallbackFont): Removed.

2009-08-11  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by Antti Koivisto.

        <rdar://problem/7132401> REGRESSION: MobileSafari doesn't allow scrollTo in link in Northstar

        Backout https://svn.apple.com/trac/puzzlebox/changeset/98989, which was the change for:
        <rdar://problem/6879674> UIWebView jscript window.Scrollby doesn't work properly on iphone sdk 3.0 beta 5

        * page/DOMWindow.cpp:
        (WebCore::DOMWindow::scrollBy):
        (WebCore::DOMWindow::scrollTo):
        * platform/ScrollView.h:
        * platform/iphone/ScrollViewIPhone.mm:
        (WebCore::ScrollView::actualVisibleContentRect):
        * wak/WAKScrollView.h:
        * wak/WAKScrollView.mm:
        (-[WAKScrollView actualDocumentVisibleRect]):

2009-08-11  Ian Henderson  <ihenderson@apple.com>

        Reviewed by Greg Bolsinga.

        <rdar://problem/7127858> WKEventGetCurrentEvent sometimes returns NULL during DumpRenderTree mouse event

        * page/mac/EventHandlerMac.mm:
        (WebCore::lastEventIsMouseUp):

2009-08-10  Chris Fleizach  <cfleizach@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/7130916> Safari: Secure text fields are not indicated as such

        Test: platform/iphone-simulator/accessibility/secure-text-field.html

        * accessibility/iphone/AccessibilityObjectWrapperIPhone.mm:
        (-[AccessibilityObjectWrapper accessibilityTraits]):

2009-08-10  Chris Fleizach  <cfleizach@apple.com>

        Reviewed by Justin Garcia.

        <rdar://problem/7132325> move iphone AX files into accessibility folder

        * WebCore.xcodeproj/project.pbxproj:
        * accessibility/iphone: Added.
        * accessibility/iphone/AccessibilityObjectIPhone.mm: Copied from WebCore/page/iphone/AccessibilityObjectIPhone.mm.
        * accessibility/iphone/AccessibilityObjectWrapperIPhone.h: Copied from WebCore/page/iphone/AccessibilityObjectWrapperIPhone.h.
        * accessibility/iphone/AccessibilityObjectWrapperIPhone.mm: Copied from WebCore/page/iphone/AccessibilityObjectWrapperIPhone.mm.
        * page/iphone/AccessibilityObjectIPhone.mm: Removed.
        * page/iphone/AccessibilityObjectWrapperIPhone.h: Removed.
        * page/iphone/AccessibilityObjectWrapperIPhone.mm: Removed.

2009-08-10  David Kilzer  <ddkilzer@apple.com>

        Don't copy Coordinates.idl as a resource into WebCore.frameworks

        Reviewed by Cameron Zwarich.

        * WebCore.xcodeproj/project.pbxproj: Removed Coordinates.idl
        from Resources.

2009-08-07  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7128246> Soft link MobileQuickLook only once

        Reviewed by Cameron Zwarich.

        * WebCore.iPhone.exp: Added export of
        WebCore::QLPreviewGetSupportedMIMETypesSet() for WebKit.
        * WebCore.xcodeproj/project.pbxproj: Added MobileQuickLook.h and
        MobileQuickLook.mm to the project.
        * loader/FrameLoader.cpp: Switched to USE(MOBILE_QUICK_LOOK)
        macro.
        (WebCore::FrameLoader::checkNavigationPolicy): Switched to
        QLPreviewProtocol() instead of hard-coded "x-apple-ql-id" string.
        (WebCore::FrameLoader::dispatchWillSendRequest): Ditto.
        * loader/loader.cpp:
        (WebCore::Loader::Host::servePendingRequests): Switched to
        USE(MOBILE_QUICK_LOOK) macro.
        * platform/network/ResourceHandle.h: Removed QL-related methods
        that were moved to MobileQuickLook.h.
        * platform/network/iphone/MobileQuickLook.h: Added.
        * platform/network/iphone/MobileQuickLook.mm: Added.
        (WebCore::QLPreviewConverterClass): Added.
        (WebCore::QLTypeCopyBestMimeTypeForURLAndMimeType): Added.
        (WebCore::QLPreviewGetSupportedMIMETypesSet): Moved from
        ResourceHandleMac.mm.
        (QLPreviewConverterDictionary): Ditto.
        (WebCore::addQLPreviewConverterForURL): Ditto.
        (WebCore::removeQLPreviewConverterForURL): Ditto.
        (WebCore::safeQLURLForDocumentURLAndResourceURL): Ditto.
        (createQLPreviewProtocol): Added.
        (WebCore::QLPreviewProtocol): Added.
        * platform/network/iphone/WebCoreURLResponseIPhone.h: Added
        #if USE(MOBILE_QUICK_LOOK) / #endif macros.
        * platform/network/iphone/WebCoreURLResponseIPhone.mm: Removed
        soft linking of MobileQuickLook framework.
        (sniffMIMEType): Added #if USE(MOBILE_QUICK_LOOK) / #endif
        macros.
        * platform/network/mac/ResourceHandleMac.mm: Removed soft
        linking of MobileQuickLook framework.  Moved most QL-related
        methods to MobileQuickLook.mm.  Replaced PLATFORM(IPHONE) with
        USE(MOBILE_QUICK_LOOK).
        (-[WebCoreResourceHandleAsDelegate initWithHandle:]):
        (-[WebCoreResourceHandleAsDelegate connection:didReceiveResponse:]):
        (-[WebCoreResourceHandleAsDelegate connection:didReceiveData:lengthReceived:]):
        (-[WebCoreResourceHandleAsDelegate connectionDidFinishLoading:]):
        (-[WebCoreResourceHandleAsDelegate connection:didFailWithError:]):

2009-08-08  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6721845> Xcode/build-webkit always rebuilds most of the WebKit subproject every time

        Reviewed by Simon Fraser.

        The WebKit rebuilds were caused by three WebCore headers that
        were modified every time WebCore was built:
        NetworkStateNotifier.h, ScrollTypes.h and WebCoreFrameView.h.
        Each file was touched by the scrub-ifdefs.pl script because they
        all still contained "PLATFORM(IPHONE)" even after being scrubbed
        once.

        The fix for ScrollTypes.h and WebCoreFrameView.h was to change
        comments containing "PLATFORM(IPHONE)" to "WTF_PLATFORM_IPHONE".

        The fix for NetworkStateNotifier.h was to improve the
        scrub-ifdefs.pl script to do a better job of scrubbing an #if
        macro containing multiple expressions joined by logical &&
        operators.

        * page/mac/WebCoreFrameView.h: Replaced "PLATFORM(IPHONE)" with
        "WTF_PLATFORM_IPHONE" in comments.
        * platform/ScrollTypes.h: Ditto.
        * scrub-ifdefs.pl:
        (process): Fixed #if macro expressions with multiple terms to be
        processed correctly.  Expressions using only && operators with a
        negative term (like !PLATFORM(IPHONE)) meant that the whole
        expression is false and that its contents should be removed.
        Expressions using only || operators with a positive term (like
        PLATFORM(IPHONE)) meant that the whole expression is true and
        that its contents should be kept.  Also tightened up other
        regular expressions by adding an end-of-line anchor ('$') to
        them.

2009-08-07  Brad Moore  <bradm@apple.com>

        Reviewed by NOBODY (OOPS!).

        Noticed WebCore was returning incorrect answers in visible_units for certain runs of Japanese text.
        It was using an overly simplistic boundary search function because it was examining the complexity
        of the wrong character.  Fixed as a sub-task of:

        <rdar://problem/6501422> TLF: public keyboard API


        * WebCore.iPhone.exp:
        * platform/text/mac/TextBoundaries.mm:
        (WebCore::findWordBoundary):

2009-08-07  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/7123689> Wildcat: No action from drop down menu/picker

        Force the behavior to be as it was before, namely all changes are assumed to be user driven.
        This will be fixed after <rdar://problem/5808484> is fixed.

        * html/HTMLSelectElement.cpp:
        (WebCore::HTMLSelectElement::setSelectedIndex):

2009-08-06  Justin Garcia  <justin.garcia@apple.com>

        Reviewed by Brad Moore.

        <rdar://problem/7090942>

        * bindings/objc/DOMUIKitExtensions.h:
        * bindings/objc/DOMUIKitExtensions.mm:
        (-[DOMRange move:inDirection:]):

2009-08-05  David Kilzer  <ddkilzer@apple.com>

        Part of: <rdar://problem/7090413> Remove visible rect change which causes wiggles when scrolling PDF documents

        Merged r104215 from the Northstar branch to trunk.

        Note that the original issue still needs to be fixed.

    2009-07-24  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6987309> Regression: PDF page indicator wiggles up and down while scrolling

        Reviewed by David Carson.

        Backed out iPhone WebKit trunk r95230 to fix the wiggling.

        * platform/iphone/TiledSurface.h:
        * platform/iphone/TiledSurface.mm:
        (WebCore::TiledSurface::visibleRect):
        (WebCore::TiledSurface::layoutTiles):
        (WebCore::TiledSurface::layoutTilesNow):

2009-08-03  Brad Moore  <bradm@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/7114425> Last letter of password field is visible after redo

        Don't allow redo to momentarily reveal the last character.

        * editing/InsertIntoTextNodeCommand.cpp:
        (WebCore::InsertIntoTextNodeCommand::doReapply):
        * editing/InsertIntoTextNodeCommand.h:

2009-08-04  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by Cameron Zwarich and David Carson.

        <rdar://problem/7115038> Checkbox and radio button form elements missing

        WTF_USE_NEW_THEME should not be defined when PLATFORM(IPHONE).

        * config.h:

2009-08-04  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7013903> Remove non-CoreText code paths in WebCore

        Reviewed by Greg Bolsinga.

        * platform/graphics/Font.cpp:
        (WebCore::Font::drawText):
        (WebCore::Font::floatWidth):
        (WebCore::Font::selectionRectForText):
        (WebCore::Font::offsetForPosition):
        * platform/graphics/Font.h: Ditto.
        * platform/graphics/mac/FontPlatformData.h:
        * platform/graphics/mac/FontPlatformDataMac.mm:

2009-08-04  David Kilzer  <ddkilzer@apple.com>

        Removed non-existent files from WebCore.xcconfig

        Reviewed by Greg Bolsinga and Cameron Zwarich.

        * Configurations/WebCore.xcconfig: Removed references to source
        files that no longer exist.
        (EXCLUDED_SOURCE_FILE_NAMES_iphoneos): Removed MainThreadMac.mm,
        PlatformScrollBarMac.mm and WebCoreTextRenderer.mm.
        (EXCLUDED_SOURCE_FILE_NAMES_macosx): Removed
        WebCoreNSURLResponseWrapper.m.

2009-08-04  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6668627> Replace #define macros with #import of NSGeometry.h in WAKAppKitStubs.h

        Reviewed by Greg Bolsinga.

        * wak/WAKAppKitStubs.h: Added #import <Foundation/NSGeometry.h>
        and removed hacks.

2009-08-03  David Carson  <dacarson@apple.com>

        Rubber stamped by David Kilzer

        Fix development runtime asserts in fonts.

        * ChangeLog-PEP:
        * platform/graphics/Font.cpp:
        (WebCore::Font::setShouldUseSmoothing):
        * platform/graphics/FontFallbackList.h:
        (WebCore::FontFallbackList::primarySimpleFontData):
        * platform/graphics/FontFastPath.cpp:
        (WebCore::Font::glyphDataForCharacter):

2009-08-03  David Carson  <dacarson@apple.com>

        Reviewed by NOBODY (OOPS!).

        Need a short description and bug URL (OOPS!)

        No new tests. (OOPS!)

        * platform/graphics/Font.cpp:
        (WebCore::Font::setShouldUseSmoothing):
        * platform/graphics/FontFallbackList.h:
        (WebCore::FontFallbackList::primarySimpleFontData):
        * platform/graphics/FontFastPath.cpp:
        (WebCore::Font::glyphDataForCharacter):

2009-08-03  David Carson  <dacarson@apple.com>

        Reviewed by David Kilzer

        Development build (linker) fix.

        * platform/iphone/LocalizedStringsIPhone.mm:
        (WebCore::mediaElementLoadingStateText):
        (WebCore::mediaElementLiveBroadcastStateText):

2009-08-03  David Carson  <dacarson@apple.com>

        Reviewed by David Kilzer

        Development build fix.

        No new tests. (OOPS!)

        * platform/network/iphone/WebCoreURLResponseIPhone.mm:
        (swizzleMIMETypeMethodIfNecessary):

2009-08-02  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6907691> TLF: Merge Safari 4.0.3 SnowLeopard GM2 release (Rocket)

        Merged ToT WebKit r45764-r46452 on safari-4-branch (Safari Rocket branch).

        276 files changed, 4992 insertions(+), 3928 deletions(-)

2009-08-02  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6907691> TLF: Merge Safari 4.0.3 SnowLeopard GM2 release (Rocket)

        Merged ToT WebKit r43832-r45704 on trunk (up to the Rocket branch point).

        3104 files changed, 429041 insertions(+), 273643 deletions(-)

2009-07-30  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by David Carson.

        <rdar://problem/7059197> Remove exit(0) on kGSEventApplicationSuspend

        kGSEventApplicationSuspend is simply never sent to WKWindowSendEvent, so get rid of this code.

        * wak/WKWindow.cpp:
        (WKWindowSendEvent):

2009-07-30  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/7102447> WebCore should migrate to new CoreLocation APIs

        Fix a linking problem.

        * platform/iphone/GeolocationServiceCoreLocation.mm:
        (-[GeoLocationManager start]):

2009-07-30  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/7102447> WebCore should migrate to new CoreLocation APIs

        locationServicesEnabled as an instance property of CLLocationManager
        was deprecated in favor of a class method.

        * platform/iphone/GeolocationServiceCoreLocation.mm:
        (-[GeoLocationManager start]):

2009-07-29  Chris Fleizach  <cfleizach@apple.com>

        Reviewed by Justin Garcia.

        <rdar://problem/7100732> AX: allow ability to use text markers in WebKit

        Makes available some of the Text Marker functionality available on the desktop so
        that accessibility clients can access line, sentence, paragraph information in WebCore.

        Test: platform/iphone-simulator/accessibility/text-marker-validation.html

        * page/AXObjectCache.cpp:
        (WebCore::AXObjectCache::visiblePositionForTextMarkerData):
        (WebCore::AXObjectCache::textMarkerDataForVisiblePosition):
        * page/AXObjectCache.h:
        * page/AccessibilityObject.cpp:
        (WebCore::AccessibilityObject::anchorElementForNode):
        * page/AccessibilityObject.h:
        * page/iphone/AccessibilityObjectWrapperIPhone.mm:
        (-[AccessibilityTextMarker initWithTextMarker:]):
        (-[AccessibilityTextMarker initWithData:]):
        (+[AccessibilityTextMarker textMarkerWithVisiblePosition:]):
        (-[AccessibilityTextMarker dataRepresentation]):
        (-[AccessibilityTextMarker visiblePosition]):
        (-[AccessibilityTextMarker description]):
        (-[AccessibilityObjectWrapper _convertIntRectToScreenCoordinates:]):
        (-[AccessibilityObjectWrapper accessibilityFrame]):
        (-[AccessibilityObjectWrapper arrayOfTextForTextMarkers:]):
        (-[AccessibilityObjectWrapper _convertToNSRange:]):
        (-[AccessibilityObjectWrapper _convertToDOMRange:]):
        (-[AccessibilityObjectWrapper positionForTextMarker:]):
        (-[AccessibilityObjectWrapper textMarkerRange]):
        (-[AccessibilityObjectWrapper elementTextRange]):
        (-[AccessibilityObjectWrapper accessibilityObjectForTextMarker:]):
        (-[AccessibilityObjectWrapper textMarkerForPosition:]):
        (-[AccessibilityObjectWrapper selectedTextMarker]):
        (-[AccessibilityObjectWrapper lineEndMarkerForMarker:]):
        (-[AccessibilityObjectWrapper lineStartMarkerForMarker:]):
        (-[AccessibilityObjectWrapper frameForTextMarkers:]):
        * page/mac/AccessibilityObjectWrapper.mm:
        (textMarkerForVisiblePosition):
        (visiblePositionForTextMarker):
        (AXAttributedStringAppendText):

2009-07-29  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by David Carson, Antti Koivisto.

        Eclair layers don't show any content, and crash on device rotation or scaling.
        <rdar://problem/7082861>

        Remove our custom 'contentsScale' implementation, and instead use QuartzCore's new private
        contentsScale property on CALayer, which behaves in the same way. It just needs a
        -setNeedsDisplay to get the layer to show the new scale.

        * platform/graphics/mac/GraphicsLayerCA.mm:
        (WebCore::GraphicsLayerCA::setContentsScale):
        * platform/graphics/mac/WebLayer.h:
        * platform/graphics/mac/WebLayer.mm:
        (-[WebLayer initWithLayer:]):
        (-[WebLayer setNeedsDisplayInRect:]):
        * platform/graphics/mac/WebTiledLayer.mm:

2009-07-27  David Kilzer  <ddkilzer@apple.com>

        BUILD FIX: Don't define HAVE_CG_INTERPOLATION_MEDIUM for Wildcat

        * platform/graphics/cg/GraphicsContextCG.cpp: Added
        !PLATFORM(IPHONE) to the original set of conditions that
        included PLATFORM(MAC) so that HAVE_CG_INTERPOLATION_MEDIUM is
        really only defined for Apex builds.

2009-07-26  David Kilzer  <ddkilzer@apple.com>

        BUILD FIX: CoreGraphics-359.78 causes build failure in GraphicsContextCG.cpp

        After CoreGraphics from SnowLeopard was submitted to Apex, the
        following build failure occurs in WebCore:

            cc1plus: warnings being treated as errors
            WebCore/platform/graphics/cg/GraphicsContextCG.cpp: In member function 'WebCore::InterpolationQuality WebCore::GraphicsContext::imageInterpolationQuality() const':
            WebCore/platform/graphics/cg/GraphicsContextCG.cpp:1291: warning: enumeration value 'kCGInterpolationMedium' not handled in switch

        * platform/graphics/cg/GraphicsContextCG.cpp: Enable
        HAVE_CG_INTERPOLATION_MEDIUM in Apex or later.

2009-07-24  David Carson  <dacarson@apple.com>

        <rdar://problem/7064844> iPhone Mail app crashes in 3.1 Beta 2

        Reviewed by David Kilzer

        Move the iPhone only check for m_reachedTerminalState to
        immediately after willSendRequest(), as that method can stop
        the load. In willSendRequest() there is similar check noting
        that assignIdentifierToInitialRequest() can stop the load.
        m_reachedTerminalState is set to true in ResourceLoader::releaseResources()
        which also set the m_frame to zero. Subsequent calls to
        FrameLoader* ResourceLoader::frameLoader() will result in a null
        FrameLoader*, which will cause the crash shown in radar mentioned
        above.

        * loader/ResourceLoader.cpp:
        (WebCore::ResourceLoader::load):

2009-07-24  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7089845> FontPlatformData constructor in FontPlatformData.h should set GSFontRef on m_font not m_gsFont

        Reviewed by David Carson.

        * platform/graphics/mac/FontPlatformData.h:
        (WebCore::FontPlatformData::FontPlatformData): Set m_font
        instead of m_gsFont during construction.  The m_gsFont member
        variable is currently unused in this class.

2009-07-21  Chris Fleizach  <cfleizach@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/7077213> some elements are inaccessible on www.whitepages.com.au

        Test: platform/iphone-simulator/accessibility/no-child-link-header.html

        * page/iphone/AccessibilityObjectWrapperIPhone.mm:
        (-[AccessibilityObjectWrapper isAccessibilityElement]):

2009-07-16  David Kilzer  <ddkilzer@apple.com>

        BUILD FIXES for UIKit after iPhone WebKit r103025

        See: <rdar://problem/6696081> Merge iPhone WebKit to Safari 4.0 Final (Jetstream branch)

        * WebCore.xcodeproj/project.pbxproj: Added
        DOMHTMLInputElementPrivate.h and DOMHTMLTextAreaElementPrivate.h
        to Copy Generated Headers build phase.

2009-07-14  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by David Carson.

        <rdar://problem/7057504> Remove void sendFakeEventsAfterWidgetTracking(GSEventRef initiatingEvent)

        This is unused on PLATFORM(IPHONE), as the sole caller is not built for PLATFORM(IPHONE).

        * page/EventHandler.h:
        * page/mac/EventHandlerMac.mm:

2009-07-13  Greg Bolsinga  <bolsinga@apple.com>

        Rubber Stamped by David Carson.

        <rdar://problem/7054380> Merge Open Source https://bugs.webkit.org/show_bug.cgi?id=27153

        This is the actual merge, and also has iPhone call the UIKitDelegate for form and focus.

        * html/HTMLFormControlElement.cpp:
        (WebCore::HTMLFormControlElement::dispatchFocusEvent):
        (WebCore::HTMLFormControlElement::dispatchBlurEvent):
        * html/HTMLFormControlElement.h:
        * loader/EmptyClients.h:
        (WebCore::EmptyChromeClient::formDidFocus):
        (WebCore::EmptyChromeClient::formDidBlur):
        * page/ChromeClient.h:

2009-07-10  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by David Carson.

        <rdar://problem/7054380> Merge Open Source https://bugs.webkit.org/show_bug.cgi?id=27153

        Remove PLATFORM(IPHONE) code in preparation for merging https://bugs.webkit.org/show_bug.cgi?id=27153

        * dom/Document.cpp:
        (WebCore::Document::detach): For this one, need to check "refreshing when editing forms" after the merge.
        * html/HTMLFormControlElement.cpp:
        * html/HTMLFormControlElement.h:
        * loader/EmptyClients.h:
        * page/ChromeClient.h:
        * page/Frame.cpp:
        * page/Frame.h:

2009-07-10  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by David Carson.

        <rdar://problem/7046518> Replace use of ChromeClient::formElementDidSetValue with ChromeClient::formStateDidChange

        Remove PLATFORM(IPHONE) code and use an OpenSource path instead.

        * html/HTMLInputElement.cpp:
        (WebCore::HTMLInputElement::setValue):
        * html/HTMLTextAreaElement.cpp:
        (WebCore::HTMLTextAreaElement::setValue):
        * loader/EmptyClients.h:
        * page/ChromeClient.h:
        * page/Frame.cpp:
        * page/Frame.h:

2009-07-09  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by Simon Fraser.

        <rdar://problem/7046748> Move some form methods from EditorClient to ChromeClient

        Form code in Open Source is in the ChromeClient, not the EditorClient, so
        matching that design for consistency.

        * loader/EmptyClients.h:
        (WebCore::EmptyChromeClient::formElementDidSetValue):
        (WebCore::EmptyChromeClient::formElementDidFocus):
        (WebCore::EmptyChromeClient::formElementDidBlur):
        (WebCore::EmptyChromeClient::suppressFormNotifications):
        (WebCore::EmptyChromeClient::restoreFormNotifications):
        * page/ChromeClient.h:
        * page/EditorClient.h:
        * page/Frame.cpp:
        (WebCore::Frame::formElementDidSetValue):
        (WebCore::Frame::formElementDidFocus):
        (WebCore::Frame::formElementDidBlur):

2009-07-08  Greg Bolsinga  <bolsinga@apple.com>

        <rdar://problem/7038294> Simplify "userGesture" code in WebCore/WebKit

        Merged ToT WebKit r45634.

        2009-07-08  Greg Bolsinga  <bolsinga@apple.com>

                Reviewed by Darin Adler.

                Add -[WebView _isProcessingUserGesture]
                https://bugs.webkit.org/show_bug.cgi?id=27084

                Rename FrameLoader::userGestureHint() to FrameLoader::isProcessingUserGesture()
                for clarity.

                * WebCore.base.exp: Add WebCore::FrameLoader::isProcessingUserGesture()
                * html/HTMLMediaElement.cpp:
                (WebCore::HTMLMediaElement::processingUserGesture):
                * loader/FrameLoader.cpp:
                (WebCore::FrameLoader::requestFrame):
                (WebCore::FrameLoader::isProcessingUserGesture):
                * loader/FrameLoader.h:

2009-07-08  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/7038294> Simplify "userGesture" code in WebCore/WebKit

        Remove PLATFORM(IPHONE) code concerning the userGesture. It will be
        simpler to use the new OpenSource change for
        https://bugs.webkit.org/show_bug.cgi?id=27084.

        * bindings/js/JSDOMWindowBase.cpp:
        (WebCore::createWindow):
        * loader/EmptyClients.h:
        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::createWindow):
        (WebCore::FrameLoader::urlSelected):
        (WebCore::FrameLoader::redirectionTimerFired):
        (WebCore::FrameLoader::loadFrameRequest):
        * loader/FrameLoader.h:
        * page/Chrome.cpp:
        (WebCore::Chrome::focus):
        (WebCore::Chrome::createWindow):
        * page/Chrome.h:
        * page/ChromeClient.h:
        * page/ContextMenuController.cpp:
        (WebCore::openNewWindow):
        * page/Frame.cpp:
        (WebCore::Frame::focusWindow):

2009-07-07  Paul Knight  <pknight@apple.com>

        Rubber stamped by Aaron Golden.

        <rdar://problem/5329923> Frameset navigation doesn't add history items to the BackForwardList

        * history/BackForwardList.cpp:
        (WebCore::BackForwardList::addItem):
            Delete urlString check that was preventing HistoryItems for frame navigations from being added
            to the BackForwardList. May need to reinvestigate the issue this workaround was trying to address
            (see 4900342, 7038586).

2009-07-02  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/7006918> Merge: aria-hidden, aria-disabled, aria-readonly need to be implemeted

        Merged ToT WebKit r45295.

    2009-06-26  Chris Fleizach  <cfleizach@apple.com>

        Reviewed by Oliver Hunt.

        Bug 26725: aria-hidden, aria-disabled, aria-readonly need to be implemented
        https://bugs.webkit.org/show_bug.cgi?id=26725

        Tests: accessibility/aria-disabled.html
               accessibility/aria-hidden.html
               accessibility/aria-readonly.html

        * accessibility/AccessibilityRenderObject.cpp:
        (WebCore::AccessibilityRenderObject::ariaIsHidden):
        (WebCore::AccessibilityRenderObject::accessibilityIsIgnored):
        (WebCore::AccessibilityRenderObject::isEnabled):
        (WebCore::AccessibilityRenderObject::canSetValueAttribute):
        * accessibility/AccessibilityRenderObject.h:
        * html/HTMLAttributeNames.in:

2009-07-02  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6989168> Merge: iPhone: parent and top cross domain bypass (26554)

        Merged ToT WebKit r44906.

    2009-06-20  Sam Weinig  <sam@webkit.org>

        Reviewed by Adam Barth.

        Fix for https://bugs.webkit.org/show_bug.cgi?id=26554
        Shadowing of top and parent

        * page/DOMWindow.idl:

2009-07-02  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6979902> Merge: iPhone: Off-by-one memory corruption with long hexadecimal entity (26454)

        Merged ToT WebKit r44799.

    2009-06-18  Chris Evans  <scarybeasts@gmail.com>

        Reviewed by Adam Barth.

        Fix 8-digit long hex entities. Fixes bug 26454
        https://bugs.webkit.org/show_bug.cgi?id=26454

        Test: fast/parser/eightdigithexentity.html

        * html/HTMLTokenizer.cpp: fix off-by-ones.

2009-06-26  Antti Koivisto  <antti@apple.com>

        Reviewed by Simon Fraser.

        <rdar://problem/6945995> Tiles sometimes not redrawn in GMail for Safari on iPhone (7A341)

        This fix is bit speculative as the problem is difficult to catch in debugger.

        If the view shrunk and then was immediately resized larger, some tiles might never be
        invalidated and would still have old content on them.

        If the view shrinks, drop the tiles outside the view synchronously. Also fix
        reversed single-tile exit condition in removeAllNonVisibleTiles().

        *  WebCore/platform/iphone/TiledSurface.h:
        *  WebCore/platform/iphone/TiledSurface.mm:

2009-06-24  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by Brad Moore and Simon Fraser.

        <rdar://problem/6987842> IPhone Safari Crash after click a url

        If there are no quads, return emptyQuad() and do not dereference the Vector.

        To learn why there are no quads, I filed: <rdar://problem/7005278>

        * bindings/objc/DOM.mm:
        (-[DOMNode absoluteQuad]):

2009-06-24  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6930369> Simulator should build with MACOSX_DEPLOYMENT_TARGET=10.5 on SnowLeopard

        Reviewed by Cameron Zwarich.

        * Configurations/DebugRelease.xcconfig: Set
        MACOSX_DEPLOYMENT_TARGET=10.5 when building for iphoneos and
        iphonesimulator platforms.

2009-06-24  David Kilzer  <ddkilzer@apple.com>

        Disable -Wmissing-prototypes when compiling for iphoneos

        Reviewed by Cameron Zwarich.

        This is a workaround for: <rdar://problem/6930844> SnowLeopard+Kirkwood: cc1plus: warning: command line option "-Wmissing-prototypes" is valid for C/ObjC but not for C++

        * Configurations/Base.xcconfig: Disable -Wmissing-prototypes
        when compiling for iphoneos.

2009-06-23  Cameron Zwarich  <zwarich@apple.com>

        Not reviewed.

        Roll out r99816, as the isInitialScale property was being tracked by code
        that didn't show up on a search.

        *  history/HistoryItem.cpp:
        *  history/HistoryItem.h:

2009-06-22  Cameron Zwarich  <zwarich@apple.com>

        Reviewed by Scott Goodson.

        <rdar://problem/6996893> Remove unused HistoryItem isInitialScale tracking

        *  history/HistoryItem.cpp:
        *  history/HistoryItem.h:

2009-06-22  Brad Moore  <bradm@apple.com>

        Reviewed by Drew Wilson.

        The DOMUIKitExtensions header should import its dependencies.

        * bindings/objc/DOMUIKitExtensions.h:

2009-06-19  Antti Koivisto  <antti@apple.com>

        Reviewed by Brad Moore.

        <rdar://problem/6988927> Text rendering problems when UITextView is scaled down

        Default to kCAFilterLinear minification filter. Safari and UIWebView set the kCAFilterNearest explicitly.

        * platform/iphone/TiledSurface.h:
        * platform/iphone/TiledSurface.mm:
        (WebCore::TiledSurface::Tile::Tile):
        (WebCore::TiledSurface::TiledSurface):
        (WebCore::TiledSurface::tileMinificationFilter):
        (WebCore::TiledSurface::setTileMinificationFilter):
        * wak/WAKWindow.h:
        * wak/WAKWindow.mm:
        (-[WAKWindow tileMinificationFilter]):
        (-[WAKWindow setTileMinificationFilter:]):

2009-06-19  Cameron Zwarich  <zwarich@apple.com>

        Reviewed by Antti Koivisto.

        When we suspend CoreLocation updates from the web thread, we queue the
        same selector to be called on the main thread after we return to the
        run loop. In the mean time, CoreLocation could deliver location updates
        that trigger arbitrary JavaScript execution even after we have suspended
        all active DOM objects. This is not very easy to reproduce in practice,
        but I believe I successfully reproduced it in the simulator with a heavy
        geolocation stress test.

        The fix is to keep our own boolean in GeoLocationManager that tracks
        whether we are suspended and to never deliver any updates to WebCore
        if we are suspended.

        This problem was discovered while investigating <rdar://problem/6982174>.

        * platform/iphone/GeolocationServiceCoreLocation.mm:
        (-[GeoLocationManager initWithAccuracy:withCallback:]):
        (-[GeoLocationManager start]):
        (-[GeoLocationManager suspend]):
        (-[GeoLocationManager resume]):
        (-[GeoLocationManager sendLocation:]):
        (-[GeoLocationManager sendError:withString:]):
        (-[GeoLocationManager locationManager:didUpdateToLocation:fromLocation:]):
        (-[GeoLocationManager locationManager:didFailWithError:]):

2009-06-19  Brad Moore  <bradm@apple.com>

        Reviewed by Justin Garcia.

        <rdar://problem/6988782> Password recovery security flaw

        Adding the ability to optionally disable the behavior that momentarily reveals the last
        character in secure text, and doing so in undo commands.  Yikes.

        * dom/CharacterData.cpp:
        (WebCore::CharacterData::insertData):
        * dom/CharacterData.h:
        * editing/DeleteFromTextNodeCommand.cpp:
        (WebCore::DeleteFromTextNodeCommand::doUnapply):
        * editing/SplitTextNodeCommand.cpp:
        (WebCore::SplitTextNodeCommand::doUnapply):

2009-06-18  Brad Moore  <bradm@apple.com>

        Adding methods to allow DOMRanges to be manipulated more like selections, and others making
        it easier to work with visible positions.

        Brings us closer to <rdar://problem/6501422> TLF: "public" keyboard API

        * WebCore.iPhone.exp:
        * bindings/objc/DOMUIKitExtensions.h: range
        * bindings/objc/DOMUIKitExtensions.mm:
        (-[DOMRange move:inDirection:]):
        (-[DOMRange extend:inDirection:]):
        * dom/Position.h:
        (WebCore::operator<):
        (WebCore::operator>):
        (WebCore::operator>=):
        (WebCore::operator<=):
        * dom/Range.cpp:
        (WebCore::Range::create):
        * dom/Range.h:
        * editing/SelectionController.cpp:
        * editing/VisiblePosition.h:
        (WebCore::operator<):
        (WebCore::operator>):
        (WebCore::operator<=):
        (WebCore::operator>=):

2009-06-16  Antti Koivisto  <antti@apple.com>

        Reviewed by Cameron Zwarich.

        <rdar://problem/6879674> UIWebView jscript window.Scrollby doesn't work properly on iphone sdk 3.0 beta 5

        Put the support for js scrolling back in. It was lost in refactoring/merge.

        * page/DOMWindow.cpp:
        (WebCore::DOMWindow::scrollBy):
        (WebCore::DOMWindow::scrollTo):
        * platform/ScrollView.h:
        * platform/iphone/ScrollViewIPhone.mm:
        (WebCore::ScrollView::setActualScrollPosition):
        * wak/WAKScrollView.h:
        * wak/WAKScrollView.mm:
        (-[WAKScrollView actualDocumentVisibleRect]):
        (-[WAKScrollView setActualScrollPosition:]):

2009-06-16  Andre Boule  <aboule@apple.com>

        Reviewed by Dan Bernstein, Cameron Zwarich

        <rdar://problem/6967975> crash with NSString drawAtPoint

        Prevent a nil-dereference for an object that is always created and non-nil
        when FontCache is used in a web page, but isn't necessarily when in the
        context of UIStringDrawing.

        Also landed to TOT WebKit as r44703

        * ChangeLog-PEP:
        * platform/graphics/FontCache.cpp: nil check
        (WebCore::FontCache::purgeInactiveFontData):

2009-06-14  Cameron Zwarich  <zwarich@apple.com>

        Reviewed by Simon Fraser.

        <rdar://problem/6817270> Incorrect usage of PassRefPtr in Editor.cpp

        The WebKit coding style is that PassRefPtr is only used for function
        arguments and return values. In a function body, the use of RefPtr and
        the release method allows for the same efficiency as PassRefPtr with
        more clear semantics.

        As far as I can tell, these are all of the places where PassRefPtr
        was misused in Editor.cpp.

        * editing/Editor.cpp:
        (WebCore::ClearTextCommand::CreateAndApply): change a use of PassRefPtr
        to use RefPtr and RefPtr::release() instead.
        (WebCore::Editor::increaseSelectionListLevelOrdered): ditto.
        (WebCore::Editor::increaseSelectionListLevelUnordered): ditto.

2009-06-08  David Carson  <dacarson@apple.com>

        Reviewed by Greg Bolsinga

        <rdar://problem/6900019> input type=range has no renderer

        Change code so that range appears as a text input, this
        is the default fallback for browsers that don't support that
        type.

        * css/html4.css: Added input[type='range'] to the TEXT style block,
                         and disabled it's custom style on iPhone.
        * html/HTMLInputElement.cpp:
        (WebCore::HTMLInputElement::setInputType): Changed range to TEXT type.

2009-06-06  David Kilzer  <ddkilzer@apple.com>

        Fix obviously-wrong #elif preprocessor macro

        * config.h: Removed stray "#if" from #elif macro
        for WTF_USE_ACCELERATED_COMPOSITING.

2009-06-03  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6921240> iPhone: postMessage origin should follow lexical scope (26004)

        Merged ToT WebKit r44124, r44125, r44133, r44134.

    2009-05-25  Adam Barth  <abarth@webkit.org>

        Reviewed by Maciej Stachowiak.

        https://bugs.webkit.org/show_bug.cgi?id=26004

        The origin for postMessage should follow lexical scope, not dynamic
        scope.  Yes, this is a super-obscure corner case.

        Test: http/tests/security/postMessage/origin-follows-lexical-scope.html

        * bindings/js/JSDOMWindowCustom.cpp:
        (WebCore::JSDOMWindow::postMessage):
        * bindings/v8/custom/V8DOMWindowCustom.cpp:
        (WebCore::CALLBACK_FUNC_DECL):

2009-06-03  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6830711> JavascriptCore fails to verify when built armv5

        Patch by Anthony O'Blennis Yvanovich.  Reviewed by David Kilzer.

        * Configurations/Base.xcconfig: Added
        GCC_GENERATE_DEBUGGING_SYMBOLS_armv5.
        * Configurations/WebCore.xcconfig: Added
        EXPORTED_SYMBOLS_FILE_armv5.

2009-06-01  Cameron Zwarich  <zwarich@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/6888365> CrashTracer: [USER] 1 crash in MobileSafari at WebCore • WebCore::JSEventTargetNode::getOwnPropertySlot + 9

        When using WebKit in threaded mode on iPhone, JavaScriptCore runs in the
        web thread, which is a secondary thread and thus has 512 kb of stack space
        by default. The relatively low amount of stack space was causing stack
        overflows when approaching the JavaScriptCore reentrancy limit. The solution
        is to simultaneously decrease the reentrancy limit while increasing the
        amount of stack space available for the web thread.

        * wak/WebCoreThread.mm:
        (StartWebThread): increase the size of the stack available to the web thread
        from 512 kb to 800 kb. This is the practical limit that I found by testing the
        offending page on both the simulator and the device, and the limit is essentially
        the same for both. Since stack pages are lazily committed, this extra stack space
        will only be used if WebKit would have otherwise crashed with a stack overflow.

2009-05-29  David Kilzer  <ddkilzer@apple.com>

        Make WebCore compile with SnowLeopard+Kirkwood

        Reviewed by Simon Fraser.

        gcc-4.2 in SnowLeopard is much more pedantic when using
        -Wmissing-prototypes.  This uncovered unused methods,
        opportunities to make some methods static, missing #include
        statements and a mismatched prototype.

        * bindings/objc/DOMHTML.mm: Added missing #import of
        DOMHTMLCollectionInternal.h to pick up the prototype for
        kitClass(WebCore::HTMLCollection*).
        * page/iphone/AccessibilityObjectWrapperIPhone.mm: Removed
        unused methods.  Despite the comment, there were no link
        failures after removing them.
        (WebCore::AXUncheckedCheckBoxActionVerb): Deleted.
        (WebCore::AXButtonActionVerb): Deleted.
        (WebCore::AXTextFieldActionVerb): Deleted.
        (WebCore::AXRadioButtonActionVerb): Deleted.
        (WebCore::AXCheckedCheckBoxActionVerb): Deleted.
        (WebCore::AXLinkActionVerb): Deleted.
        * platform/graphics/transforms/TransformationMatrix.cpp:
        (WebCore::makeMapBetweenRects): Deleted unused method.
        * platform/iphone/SystemMemoryIPhone.cpp: Added missing #include
        of SystemMemory.h.
        * platform/iphone/SystemTimeIPhone.cpp:
        (WebCore::currentTime): Removed duplicate method which wasn't
        declared in SystemTime.h.  An identical method exists in
        JavaScriptCore/wtf/CurrentTime.{h|cpp}.
        * platform/iphone/TiledSurface.mm:
        (WebCore::canTileAggresively): Made static since it's not used
        outside this file.
        * platform/mac/WebCoreTextRenderer.h:
        (WebCoreTextFloatWidth): Changed third argument of prototype
        from CGFontRef to GSFontRef to match the implementation.
        * wak/WKContentObservation.cpp: Rearranged #include statements.
        (WebThreadGetObservedContentModifiers): Made static since it's
        not used outside this file.
        * wak/WKView.cpp:
        (_WKViewDraw): Made static since it's not used outside this
        file.

2009-05-26  Cameron Zwarich  <zwarich@apple.com>

        Reviewed by Paul Knight.

        <rdar://problem/6924087> merge back JPEG optimization in ImageSource::frameHasAlphaAtIndex()

        Modify our version of ImageSource::frameHasAlphaAtIndex() to match the
        one I landed in open source as <http://trac.webkit.org/changeset/44176>.
        There are no code changes, only formatting changes.

        * platform/graphics/cg/ImageSourceCG.cpp:
        (WebCore::ImageSource::frameHasAlphaAtIndex):

2009-05-26  Cameron Zwarich  <zwarich@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/6850757> CGImageSourceGetType image source parameter is nil

        * platform/graphics/cg/ImageSourceCG.cpp:
        (WebCore::ImageSource::frameHasAlphaAtIndex): add a check for whether
        m_decoder is null, and if so return false.

2009-05-21  David Kilzer  <ddkilzer@apple.com>

        Clean up merge turds

        Reviewed by Cameron Zwarich.

        These changes do two things:
        - Remove differences between iPhone WebKit and ToT WebKit in
          code not used by iPhone WebKit.
        - Add PLATFORM(IPHONE) to iPhone-only code that was missing it.

        * bridge/npapi.h: Removed #include <wtf/Platform.h> not in ToT.
        * editing/SelectionController.cpp:
        (WebCore::SelectionController::paintCaret): Restored code in ToT
        version of the source code.
        * platform/graphics/SimpleFontData.cpp:
        (WebCore::SimpleFontData::SimpleFontData): Added
        #if PLATFORM(IPHONE) to iPhone-only code.
        * platform/graphics/mac/FontPlatformDataMac.mm:
        (WebCore::FontPlatformData::operator=): Changed
        #if !PLATFORM(MAC) that should have been #if !PLATFORM(IPHONE).
        * platform/text/mac/TextBoundaries.mm: Moved header inside
        #if PLATFORM(IPHONE).
        * plugins/PluginDatabase.h: Removed method declaration that was
        removed on ToT.
        * plugins/PluginPackage.h: Ditto.
        * plugins/win/PluginPackageWin.cpp: Removed method that was
        removed on ToT.
        * rendering/RenderTextFragment.cpp: Removed execute permissions
        from source file.

2009-05-21  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6904095> iPhone: REGRESSION: Query parameters are sometimes incorrect in URL

        Merged ToT WebKit r43876, r43880.

    2009-05-19  Antti Koivisto  <antti@apple.com>

        I can't figure out how to make this not timing dependent, making it manual test instead.

        * manual-tests/preload-scanner-entities.html: Added.

    2009-05-19  Antti Koivisto  <antti@apple.com>

        Reviewed by Darin Adler).

        <rdar://problem/6902674> REGRESSION: Query parameters are sometimes incorrect in URL (23135)

        Push characters back in correct order when entity parsing fails after 3 characters.

        Test: fast/tokenizer/preload-scanner-entities.html

        * html/PreloadScanner.cpp:
        (WebCore::PreloadScanner::consumeEntity):

2009-05-20  Cameron Zwarich  <zwarich@apple.com>

        Reviewed by Antti Koivisto.

        Clean up code in preparation for
        <rdar://problem/6908023> merge back meta tag handling code

        * dom/Document.cpp:
        (WebCore::Document::processArguments): Change 'assert' to 'ASSERT'.
        (WebCore::Document::processViewport): ditto.
        (WebCore::Document::processFormatDetection): ditto.

2009-05-20  Cameron Zwarich  <zwarich@apple.com>

        Reviewed by Antti Koivisto.

        * html/HTMLMetaElement.cpp:
        (WebCore::HTMLMetaElement::parseMappedAttribute): there is no need to call
        process() after reading name="viewport", because process() will be called
        when the content attribute is read; process() gets the name attribute itself
        regardless and does nothing if there is no content yet.

2009-05-19  Cameron Zwarich  <zwarich@apple.com>

        Reviewed by Justin Garcia.

        <rdar://problem/6904357> Phone numbers not tappable after visiting a Google search results page

        r61372 made telephone number parsing a WebPreference and a Setting, but
        it also changed meta tag parsing directly modify the Setting.

        In general, Settings are not reset when creating a new Document. Since
        telephone number parsing should be reset to the value of the WebPreference
        when visiting a new page, make a bool on the Document for storing the
        telephone number setting for every page and use this instead of the Setting
        when deciding whether to parse telephone numbers.

        * dom/Document.cpp:
        (WebCore::Document::Document): initialize m_isTelephoneNumberParsingEnabled to
        false and restore it to the value of the corresponding Setting if any Settings
        are available from a Frame.
        (WebCore::Document::setIsTelephoneNumberParsingEnabled): added.
        (WebCore::Document::isTelephoneNumberParsingEnabled): added.
        (WebCore::setParserFeature): use the Document's telephone parsing preference
        rather than the one in the Document's Settings.
        * dom/Document.h: add an m_isTelephoneNumberParsingEnabled member variable to
        Document.
        * html/HTMLParser.cpp:
        (WebCore::HTMLParser::insertNode): use the Document's telephone parsing preference
        rather than the one in the Document's Settings.

2009-05-19  Justin Garcia  <justin.garcia@apple.com>

        Reviewed by Ken Kocienda.

        <rdar://problem/6903468> Remove rangeAtSentenceStart: since it's no longer used

        * WebCore.iPhone.exp:
        * editing/SelectionController.cpp:
        * editing/SelectionController.h:

2009-05-15  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6892976> iPhone: Safari shouldn't send password as part of referer (25796)

        Merged ToT WebKit r43719.

    2009-05-14  Alexey Proskuryakov  <ap@webkit.org>

        Reviewed by Darin Adler.

        Patch originally by Darin Adler.

        https://bugs.webkit.org/show_bug.cgi?id=25796
        <rdar://problem/6886654> Shouldn't set referer and origin in Loader::Host::servePendingRequests().

        Test: http/tests/security/credentials-in-referer.html

        * loader/loader.cpp: (WebCore::Loader::Host::servePendingRequests): This will be done in
        SubresourceLoader::create() anyway.

2009-05-15  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6649936> Add *.exp export files to WebCore Xcode project

        Merged ToT WebKit r43786.

        * WebCore.xcodeproj/project.pbxproj: Added WebCore.Touch.exp,
        WebCore.iPhone.exp and WebCore.iPhonePPT.exp.

    2009-05-15  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6649936> Add *.exp export files to WebCore Xcode project

        Reviewed by Darin Adler and Timothy Hatcher.

        * WebCore.xcodeproj/project.pbxproj: Added Exports group, moved
        WebCore.base.exp into the group, and added 10 other *.exp files
        in WebCore.

2009-05-15  Antti Koivisto  <antti@apple.com>

        Reviewed by Justin Garcia.

        <rdar://problem/6796290> Acid3: Tests 77 and 78 fail (external svg fonts)

        Disable support for downloadable fonts correctly.

        * WebCore.base.exp:
        * css/CSSFontFaceSource.cpp:
        (WebCore::CSSFontFaceSource::CSSFontFaceSource):

2009-05-15  Antti Koivisto  <antti@apple.com>

        Merge r43783 from WebKit tot.

    2009-05-15  Antti Koivisto  <antti@apple.com>

            Reviewed by Dave Kilzer.

            Add a settings entry to en/disable web font support
            https://bugs.webkit.org/show_bug.cgi?id=25239

        * css/CSSFontSelector.cpp:
        (WebCore::CSSFontSelector::addFontFaceRule):
        * page/Settings.cpp:
        (WebCore::Settings::Settings):
        (WebCore::Settings::setDownloadableBinaryFontsEnabled):
        * page/Settings.h:
        (WebCore::Settings::downloadableBinaryFontsEnabled):

2009-05-15  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by Antti Koivisto.

        <rdar://problem/6892209> Log more info when there are delegate problems

        * wak/WebCoreThread.mm:
        (SendDelegateMessage):

2009-05-14  Antti Koivisto  <antti@apple.com>

        Reviewed by Dave Carson.

        <rdar://problem/6796274> Acid3: Test 46 fails (zero sized iframe is incorrectly resized)

        - zero sized iframes should never be resized to the content
        - update the content layout if a frame switches dynamically out from the resize-to-content mode

        * rendering/RenderPartObject.cpp:
        (WebCore::RenderPartObject::RenderPartObject):
        (WebCore::RenderPartObject::shouldResizeFrameToContent):
        (WebCore::RenderPartObject::layout):
        * rendering/RenderPartObject.h:

2009-05-13  Brad Moore  <bradm@apple.com>

        Reviewed by Justin Garcia.

        Adding a method to fix up typing commands that are out-of-sync with the current selection.

        <rdar://problem/6857224> [Keyboard] CZ/Czech:7A318: When performing UNDO after typing some text, the undoing stops at the first accented character encountered

        * WebCore.iPhone.exp:
        * editing/Editor.cpp:
        (WebCore::Editor::ensureLastEditCommandHasCurrentSelectionIfOpenForMoreTyping):
        * editing/Editor.h:

2009-05-13  Antti Koivisto  <antti@apple.com>

        Reviewed by Dave Kilzer and Greg Bolsinga.

        <rdar://problem/6884598> Tile fails to paint until finger is lifted on sites that have script that queries view position from a scroll even handler

        - use TiledSurface::visibleRect() to get the view rect, no need to juggle threads
        - rename actualVisualContentRect -> actualVisibleContentRect for consistency
        - remove [WAKScrollView contentsPoint]

        * page/DOMWindow.cpp:
        (WebCore::DOMWindow::innerHeight):
        (WebCore::DOMWindow::innerWidth):
        (WebCore::DOMWindow::scrollX):
        (WebCore::DOMWindow::scrollY):
        * platform/ScrollView.h:
        * platform/iphone/ScrollViewIPhone.mm:
        (WebCore::ScrollView::actualVisibleContentRect):
        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::scrollRectToVisible):
        * wak/WAKScrollView.h:
        * wak/WAKScrollView.mm:
        (-[WAKScrollView actualDocumentVisibleRect]):

2009-05-12  Antti Koivisto  <antti@apple.com>

        Reviewed by Dave Kilzer.

        <rdar://problem/6867620> REGRESSION (SUTimberline-Kirkwood): Scrolling becomes choppy

        Getting the current visible rect ends up generating a CA commit (this is CA bug
        <rdar://problem/6876361> CALayerMapGeometry should not create a transaction).
        Commit may take locks and perform CA housekeeping. Doing this in low priority
        web thread could cause visible stutter.

        This patch moves visible rect computation to main thread, reducing web thread work
        during scrolling.

        * platform/iphone/TiledSurface.h:
        * platform/iphone/TiledSurface.mm:
        (WebCore::TiledSurface::visibleRect):
        (WebCore::TiledSurface::updateVisibleRect):
        (WebCore::TiledSurface::layoutTiles):
        (WebCore::TiledSurface::layoutTilesNow):

2009-05-12  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6875908> REGRESSION (2.2-3.0): CrashTracer: [USER] 1 crash in MobileSafari at WebCore - WebCore::Timer<WebCore::FrameView>::fired + 43

        Reviewed by Antti Koivisto.

        * dom/Tokenizer.h:
        (WebCore::Tokenizer::parsePending): Removed.
        * html/HTMLTokenizer.cpp:
        (WebCore::HTMLTokenizer::parsePending): Removed.
        * html/HTMLTokenizer.h:
        (WebCore::HTMLTokenizer::parsePending): Removed.
        * page/FrameView.cpp:
        (WebCore::FrameView::layoutTimerFired): Removed call to
        parsePending() that was causing the crash.

2009-05-12  Greg Bolsinga  <bolsinga@apple.com>

    <rdar://problem/5327885> No apparent way to get alternate keyboards / entry methods on iPhone MobileSafari

    Merge -r43267 from WebKit Open Source

    Reviewed by Brad Moore.

    2009-05-05  Greg Bolsinga  <bolsinga@apple.com>

            Reviewed by Sam Weinig.

            https://bugs.webkit.org/show_bug.cgi?id=25554

            Support HTML5 text control input types: email, number, tel, url

            Test: fast/html/text-field-input-types.html

            * bindings/objc/DOMHTML.mm:
            (-[DOMHTMLInputElement _isTextField]): Call HTMLInputElement::isTextField directly.
            * html/HTMLInputElement.cpp: Use the new types where appropriate.
            (WebCore::HTMLInputElement::setInputType):
            (WebCore::HTMLInputElement::type):
            (WebCore::HTMLInputElement::saveState):
            (WebCore::HTMLInputElement::restoreState):
            (WebCore::HTMLInputElement::accessKeyAction):
            (WebCore::HTMLInputElement::rendererIsNeeded):
            (WebCore::HTMLInputElement::createRenderer):
            (WebCore::HTMLInputElement::appendFormData):
            (WebCore::HTMLInputElement::valueWithDefault):
            (WebCore::HTMLInputElement::storesValueSeparateFromAttribute):
            (WebCore::HTMLInputElement::defaultEventHandler):
            * html/HTMLInputElement.h: Ditto.
            (WebCore::HTMLInputElement::):
            (WebCore::HTMLInputElement::isTextField):

2009-05-09  Antti Koivisto  <antti@apple.com>

        Reviewed by Dave Kilzer.

        <rdar://problem/6871297> REGRESSION: news.yahoo.com is slow in MobileSafari when zooming

        Increase the threshold of using memory optimized (but slow) tile drawing path.

        It is not clear why this seems slower than on SUTimberline. In any case this is a safe change,
        the previous values were very conservative.

        * platform/graphics/Image.cpp:
        (WebCore::Image::drawTiled):

2009-05-02  Antti Koivisto  <antti@apple.com>

        Reviewed by Dave Carson.

        <rdar://problem/6795709> (REGRESSION timerline-kirkwood): scrolling just a little bit on marketwatch.com results in many checkerboard tiles

        - Provide finer grained steps for low memory states. New states for memory levels 16-20 and 21-25
          make tiling aggresiveness ramp down smoother.
        - Change tile grid centering to happen only if all corners of the view fall on different tiles. This reduces
          checkers when panning sideways in low memory states (<=20).

        * platform/iphone/TiledSurface.mm:
        (WebCore::TiledSurface::centerTileGridOrigin):
        (WebCore::TiledSurface::calculateCoverAndKeepRectForMemoryLevel):

2009-05-02  Antti Koivisto  <antti@apple.com>

        <rdar://problem/6631735> Crash in WebCore::CSSStyleSelector::applyProperty(int, WebCore::CSSValue*) (RenderStyle.h:454)

        Merged r43152 from the open source tree.

    2009-05-02  Antti Koivisto  <antti@apple.com>

            Reviewed by Dan Bernstein.

            <rdar://problem/6631735> Crash in WebCore::CSSStyleSelector::applyProperty(int, WebCore::CSSValue*) (RenderStyle.h:454)

            Avoid re-entering style selector from load delegates by not issuing resource loads synchronously during attach().

        * dom/ContainerNode.cpp:
        (WebCore::ContainerNode::suspendPostAttachCallbacks):
        (WebCore::ContainerNode::resumePostAttachCallbacks):
        (WebCore::ContainerNode::attach):
        * dom/Element.cpp:
        (WebCore::Element::attach):
        * loader/loader.cpp:
        (WebCore::Loader::Loader):
        (WebCore::Loader::servePendingRequests):
        (WebCore::Loader::suspendPendingRequests):
        (WebCore::Loader::resumePendingRequests):
        (WebCore::Loader::Host::servePendingRequests):
        * loader/loader.h:
        (WebCore::Loader::isSuspendingPendingRequests):

2009-05-01  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6842937> WebKit should automatically validate requests for QuickLook resources

        Original patch by Philippe Champeaux.  Reviewed by Antti Koivisto.

        --- Submission Information ---
        - Risk level: Medium
        - Risk details: Bypass some delegate checks when loading
          subresources for documents converted by MobileQuickLook.
        - Code reviewed by: Antti Koivisto.
        - Testing details: Ran layout tests.  Verified basic browsing
          was unaffected.  Verified Numbers and MS Excel documents were
          viewable in MobileMail, MobileSafari and "Files lite"
          third-party app.

        * loader/FrameLoader.cpp: Defined cMobileQuickLookProtocol.
        (WebCore::FrameLoader::checkNavigationPolicy): If the URL is a
        MobileQuickLook URL, skip the DecidePolicyForNavigationAction
        step and just continue loading with the PolicyUse policy.
        (WebCore::FrameLoader::dispatchWillSendRequest): Just return
        earily if the URL is a MobileQuickLook URL.

2009-05-01  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6823547> 7A300/N72 Particular email sucks all CPU when displayed

        Reviewed by Greg Bolsinga.

        Part 2 of 2.

        --- Submission Information ---
        - Risk level: Medium
        - Risk details: Implemented HTMLParserQuirks delegate for
          MobileMail which ignores redundant, nested <div> tags when
          parsing.
        - Code reviewed by: Greg Bolsinga.
        - Testing details: Ran layout tests.  Verified basic browsing
          was unaffected.  Verified two test messages are both viewable
          on N45 and N88.

        Mac OS X Mail regularly exercised a WebKit bug (see WebKit ToT
        r42722 and <rdar://problem/6102483>) where extraneous <div>
        elements were inserted into messages with content that was
        copied and pasted.  Over time this built up to intolerable
        levels of nested tags.

        The solution is to consolidate nested <div> tags when this
        situation is encountered when parsing HTML within MobileMail.
        Note that because these HTML documents are still well-formed, we
        count the number of <div> tags removed so that we may ignore the
        same number of mismatched </div> tags on the way out, thus
        preserving the formatting of the message.

        * Configurations/WebCore.xcconfig: Added
        HTMLParserQuirksMobileMailIPhone.cpp and
        RuntimeApplicationChecksIPhone.mm to
        EXCLUDED_SOURCE_FILE_NAMES_macosx.
        * WebCore.iPhone.exp: Added exports for the constructor for
        WebCore::HTMLParserQuirksMobileMailIPhone and the
        WebCore::applicationIsMobileMail() method.
        * WebCore.xcodeproj/project.pbxproj: Added
        HTMLParserQuirksMobileMailIPhone.{h|cpp} and
        RuntimeApplicationChecksIPhone.{h|mm}.
        * page/iphone/HTMLParserQuirksMobileMailIPhone.cpp: Added.
        (WebCore::HTMLParserQuirksMobileMailIPhone::reset):
        (WebCore::isMacOSXMailDivNode):
        (WebCore::isUninterestingDivNode):
        (WebCore::HTMLParserQuirksMobileMailIPhone::shouldInsertNode):
        (WebCore::HTMLParserQuirksMobileMailIPhone::shouldPopBlock):
        * page/iphone/HTMLParserQuirksMobileMailIPhone.h: Added.
        (WebCore::HTMLParserQuirksMobileMailIPhone::HTMLParserQuirksMobileMailIPhone):
        (WebCore::HTMLParserQuirksMobileMailIPhone::~HTMLParserQuirksMobileMailIPhone):
        * platform/RuntimeApplicationChecksIPhone.h: Added.
        * platform/RuntimeApplicationChecksIPhone.mm: Added.
        (WebCore::applicationIsMobileMail):

2009-04-30  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by Brad Moore.

        <rdar://problem/6837477> [Binary Compatibility]: Regression: "Toilet Rush 衝廁" cannot locate toilets nearby

        --- Submission Information ---
        - Risk level: Medium
        - Risk details: If the user Resets Location Warnings, the web site cache isn't cleared anymore.
        - Code reviewed by: Brad Moore
        - Testing details: Toilet Rush, MobileSafari

        Do no call CoreLocation SPI; this prevents the Seatbelt warning in 3rd party applications, and when it
        was being called anyways was useless, as it was in a CoreLocation location callback, and once the code
        reaches that point, the user has already approved.

        * platform/iphone/GeolocationServiceCoreLocation.mm:
        (-[GeoLocationManager sendLocation:]):

2009-04-30  Ken Kocienda  <kocienda@apple.com>

        Fix for this bug:

        <rdar://problem/6845166> Code which detects selection autoexpansion directionality needs to be smarter

        Export a Selection function.

        --- Submission Information ---
        - Risk level: low
        - Risk details: There's not much risk here. Either the selection
          will expand in the direction you want, or it won't. This change
          makes it more likely that you'll get what you expect.
        - Code reviewed by: Brad Moore
        - Testing details: I did a lot of testing, and I gave Richard
          and Brad a chance to try it out for themselves.

        * WebCore.iPhone.exp

2009-04-30  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6823547> 7A300/N72 Particular email sucks all CPU when displayed

        Merged ToT WebKit r43092, r43101.

        Part 1 of 2.

        --- Submission Information ---
        - Risk level: Low
        - Risk details: Added delegate to HTMLParser and hooks to change
          parsing behavior on MobileMail.
        - Code reviewed by: David Hyatt.
        - Testing details: Ran layout tests.  Verified basic browsing
          was unaffected.

    2009-04-30  David Kilzer  <ddkilzer@apple.com>

        Use OwnPtr<HTMLParserQuirks> for m_parserQuirks

        Reviewed by Geoff Garen.

        * html/HTMLParser.cpp:
        (WebCore::HTMLParser::~HTMLParser): Removed unneeded code.
        * html/HTMLParser.h: Made m_parserQuirks an OwnPtr.

    2009-04-30  David Kilzer  <ddkilzer@apple.com>

        Provide a mechanism to create a quirks delegate for HTMLParser

        Reviewed by David Hyatt.

        No tests since there is no change in behavior.

        HTMLParserQuirks.h defines an abstract base class that may be
        extended as needed.  The ChromeClient::createHTMLParserQuirks()
        factory method should be used to return an HTMLParserQuirks
        subclassed object when needed.

        * WebCore.xcodeproj/project.pbxproj: Added HTMLParserQuirks.h.
        * html/HTMLParser.cpp:
        (WebCore::HTMLParser::HTMLParser): Initialize m_parserQuirks
        using ChromeClient::createHTMLParserQuirks().
        (WebCore::HTMLParser::~HTMLParser): Delete m_parserQuirks if
        set.
        (WebCore::HTMLParser::reset): Call HTMLParserQuirks::reset() if
        m_parserQuirks is set.
        (WebCore::HTMLParser::insertNode): Call
        HTMLParserQuirks::shouldInsertNode() if m_parserQuirks is set,
        and return early if it returns false.
        (WebCore::HTMLParser::popBlock): Call
        HTMLParserQuirks::shouldPopBlock() if m_parserQuirks is set, and
        return early if it returns false.
        * html/HTMLParser.h: Added m_parserQuirks.
        * html/HTMLParserQuirks.h: Added.
        (WebCore::HTMLParserQuirks::HTMLParserQuirks):
        (WebCore::HTMLParserQuirks::~HTMLParserQuirks):
        * loader/EmptyClients.h:
        (WebCore::EmptyChromeClient::createHTMLParserQuirks): Added.
        * page/ChromeClient.h:
        (WebCore::ChromeClient::createHTMLParserQuirks): Added.

2009-04-30  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Greg Bolsinga

        <rdar://problem/6841269> Should not dirty the touch event listeners from FrameView::paintContents on every paint

        Remove the call to setTouchEventListenersDirty(true) from FrameView::paintContents().
        Also only dirty event regions in RenderLayer::styleChanged() when we know a transform or layout
        change happend, i.e. when the style diff is a RecompositeLayer, StyleDifferenceLayoutPositionedMovementOnly
        or StyleDifferenceLayout.

        --- Submission Information ---
        - Risk level: Low
        - Risk details: Reduce the number of times event regions will be recomputed; there is no need
        to recompute them when painting happens.
        - Code reviewed by: Greg Bolsinga
        - Testing details: Tested touch-aware content that repaints a lot, Dashcode content,
        the User Guide and Google image search (all of which use touch events). Verified that basic browsing works OK.

        * page/FrameView.cpp:
        (WebCore::FrameView::paintContents):
        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::styleChanged):

2009-04-29  Justin Garcia  <justin.garcia@apple.com>

        Reviewed by Simon Fraser and Ken Kocienda.

        <rdar://problem/6840874> Selection looks a line larger than it actually is (selection painting issue)
        <rdar://problem/6768703> Text selected below the tap and drag area

        Code in collectSelectionRects (and addLineBoxRects, where we pulled the iteration code from) assumed
        that the Range started in a leaf.  If the Range didn't start in a leaf, we'd iterate over and include rects
        for too many objects.

        This brings us in sync with the way opensource WebKit iterates as of http://trac.webkit.org/changeset/42974.
        We can bring the rest of that change (mostly renaming) over later.  It also greatly simplifies collectSelectionRect's
        iteration code.

        Verified that all the bugs that were fixed by changes to collectSelectionRects are still fixed.

        * dom/Range.cpp:
        (WebCore::Range::addLineBoxRects):
        (WebCore::Range::collectSelectionRects):

2009-04-29  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Brad Moore

        <rdar://problem/6838823> VoiceOver does not take into account transforms when drawing outlines

        Tweak the fix so that theme()->adjustRepaintRect(obj, r) gets called for the first rect.
        Issue discovered by LayoutTest failure on WebKit ToT.

        --- Submission Information ---
        - Risk level: Low
        - Risk details: Making accessibility work with CSS-transformed content. Similar to
        existing code used elsewhere.
        - Code reviewed by: Brad Moore
        - Testing details: Tested the User Guide and other content with transforms
        with accessibility enabled. Tested on desktop with LayoutTests.

        * page/AccessibilityRenderObject.cpp:
        (WebCore::AccessibilityRenderObject::boundingBoxRect):

2009-04-29  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Brad Moore

        <rdar://problem/6838823> VoiceOver does not take into account transforms when drawing outlines

        Use transform-aware code to get a bounding rect for accessibility, following
        the pattern of RenderObject::absoluteBoundingBoxRect().

        --- Submission Information ---
        - Risk level: Low
        - Risk details: Making accessibility work with CSS-transformed content. Similar to
        existing code used elsewhere.
        - Code reviewed by: Brad Moore
        - Testing details: Tested the User Guide and other content with transforms
        with accessibility enabled.

        * page/AccessibilityRenderObject.cpp:
        (WebCore::AccessibilityRenderObject::boundingBoxRect):

2009-04-29  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6836543> Build system issues with ENABLE_RESPECT_EXIF_ORIENTATION

        Reviewed by Greg Bolsinga.

        --- Submission Information ---
        - Risk level: Low
        - Risk details: Removed unneeded FEATURE_DEFINES from *.xcconfig
          files and build-webkit.  Does not affect B&I builds.
        - Code reviewed by: Greg Bolsinga.
        - Testing details: Built Development and Deployment_Hardware
          configurations using build-webkit.

        * Configurations/WebCore.xcconfig: Removed unneeded
        ENABLE_RESPECT_EXIF_ORIENTATION from FEATURE_DEFINES.

2009-04-29  David Carson  <dacarson@apple.com>

        Reviewed by David Kilzer

        <rdar://problem/6743722> Image display in Mail/Safari is blurry on 3.0

        Merged ToT WebKit http://trac.webkit.org/changeset/42987

        --- Submission Information ---
        - Risk level: Low
        - Risk details: Change destination rect to align to pixel boundaries for images
        - Code reviewed by: David Hyatt, merge reviewed by David Kilzer
        - Testing details: Integrated and reviewed on Desktop Safari, ran desktop pixel tests

    2009-04-28  David Carson  <dacarson@apple.com>

            Reviewed by David Hyatt.

            Restore alignment to device pixel boundaries.
            https://bugs.webkit.org/show_bug.cgi?id=25458

            Adjust the adjusted destination rect to be device pixel aligned.

            * platform/graphics/cg/ImageCG.cpp:
            (WebCore::BitmapImage::draw):


2009-04-28  Brad Moore  <bradm@apple.com>

        Reviewed by Justin Garcia.

        Since we presently have to manipulate the frame's selection controller to get a caret rect,
        we need to suppress typing typing closures in addition to selection notifications.

        <rdar://problem/6809515> Undo should undo the whole character not just the last stroke

        --- Submission Information ---
        - Risk level: Low
        - Risk details: Removing unwanted side-effects from what should be a simple getter.
        - Code reviewed by: Justin Garcia
        - Testing details: Tested undo while in composition of Chinese handwriting and pinyin
        keyboards.

        * editing/SelectionController.h:
        (WebCore::SelectionController::suppressCloseTyping):
        (WebCore::SelectionController::restoreCloseTyping):
        * page/iphone/FrameIPhone.mm:
        (WebCore::Frame::rectForScrollToVisible):

2009-04-28  Brad Moore  <bradm@apple.com>

        Reviewed by Justin Garcia.

        Don't let undo leave a stale composition.

        <rdar://problem/6831637> Undoing marked text deletes a few extra characters after the marked text

        --- Submission Information ---
        - Risk level: Low
        - Risk details: Throwing away state the moment it becomes stale.
        - Code reviewed by: Justin Garcia
        - Testing details: Tested undo while in composition of Kana, Pinyin keyboards.

        * editing/EditCommand.cpp:
        (WebCore::EditCommand::unapply):

2009-04-28  Greg Bolsinga  <bolsinga@apple.com>

        <rdar://problem/6832549> REGR: Canvas is busted
        --- Submission Information ---
        - Risk level: Medium
        - Risk details: Images could still be screwed up somehow in a way not yet found.
        - Code reviewed by: David Kilzer
        - Testing details: The canvas example in the bug and photos copied from Photos to Mail to verify the bug that broke canvas still works.

        * Configurations/WebCore.xcconfig: Add ENABLE_RESPECT_EXIF_ORIENTATION
        * platform/graphics/BitmapImage.h:
        (WebCore::FrameData::FrameData):
        * platform/graphics/cg/ImageCG.cpp:
        (WebCore::FrameData::clear):
        (WebCore::BitmapImage::checkForSolidColor):

2009-04-28  David Carson  <dacarson@apple.com>

        Reviewed by Antti Koivisto

        <rdar://problem/6817946> Page layout with plugins broken

        We were only walking down one branch of child views
        when invalidating their state. So we would invalidate
        the first plugin view, but never the second.

        * wak/WKView.cpp:
        (_WKViewRecursivelyInvalidateGState):

2009-04-28  Justin Garcia  <justin.garcia@apple.com>

        Reviewed by Greg Bolsinga and Ken Kocienda.

        <rdar://problem/6832113> Double-tap in space between words selects both

        * platform/text/mac/TextBoundaries.mm:
        (WebCore::findSimpleWordBoundary): Remove odd code that steps past the word boundary if we're already
        at the start of a word.  Even if we want this behavior in certain instances this is the wrong level to do it.

2009-04-28  Justin Garcia  <justin.garcia@apple.com>

        Reviewed by Brad Moore.

        <rdar://problem/6790411> Smart delete/copy doesn't work at the end of a paragraph

        This happens because wordRangeForCaretSelection changes the current selection.  In this particular case
        it by doing so also changes the Frame's selection granularity, preventing smart delete/copy.

        Also fixes some of <rdar://problem/6656149>.  Changes to the way that detached SelectionControllers
        work need to be made before the rest of the selection utility functions can be fixed.

        These functions are iPhone only at the moment so this isn't a change that will receive
        an opensource review.

        * editing/SelectionController.cpp:
        (WebCore::SelectionController::expandSelectionToWordContainingCaretSelection):
        (WebCore::SelectionController::wordRangeContainingCaretSelection):
        (WebCore::SelectionController::expandSelectionToStartOfWordContainingCaretSelection):
        (WebCore::SelectionController::wordSelectionContainingCaretSelection):
        * editing/SelectionController.h:

2009-04-27  Antti Koivisto  <antti@apple.com>

        Reviewed by Dave Carson.

        <rdar://problem/6798835> Sometimes web content tiles are not replaced after zooming.

        - remove unnecessary and potentially buggy invalidateContent() function
        - make prepareToDraw() flush any pending repaints
        - make removeAllNonVisibleTiles() only ever drop tiles, never create or resize
        - go back to deleting/re-recreating tiles instead of resizing them. The CA
          bug that forced this was fixed and this is simpler and safer.

        * platform/iphone/TiledSurface.h:
        * platform/iphone/TiledSurface.mm:
        (WebCore::TiledSurface::Tile::invalidateRect):
        (WebCore::TiledSurface::removeAllNonVisibleTiles):
        (WebCore::TiledSurface::coverWithTiles):
        (WebCore::TiledSurface::invalidateTiles):
        (WebCore::TiledSurface::prepareToDraw):
        * wak/WKView.cpp:
        (WKViewSetScale):

2009-04-27  Ken Kocienda  <kocienda@apple.com>

        Fix for this bug:

        <rdar://problem/6638204> Expand to word feature for ranged selection should be sensitive to direction of movement

        --- Submission Information ---
        - Risk level: low
        - Risk details: Affects how the selection expands when you release
          one the selection grabbers after altering a selection.
        - Code reviewed by: Brad Moore.
        - Testing details: Brad and I have been living on this. Gave a demo to Scott
          and he approved the behavior.

        * WebCore.iPhone.exp
        * page/Frame.h
        * page/iphone/FrameIPhone.mm
        (WebCore::Frame::clearRangedSelectionInitialExtent)
        (WebCore::Frame::setRangedSelectionInitialExtentToCurrentSelectionStart)
        (WebCore::Frame::setRangedSelectionInitialExtentToCurrentSelectionEnd)
        (WebCore::Frame::rangedSelectionInitialExtent)

2009-04-25  Brad Moore  <bradm@apple.com>

        Reviewed by Justin Garcia and Ken Kocienda.

		<rdar://problem/6824650> Press Hold Scrub causes rapid unexpected switching between Group Selection and Word Selection

		Hit testing (via -[WebView elementAtPoint]) can fail to return a text node when the point
		lies between lines of text spread apart ("exploded") by custom vertical alignment or
		line-height.  Adding a mechanism to more thoroughly search the result of a hit test for
		exploded text nodes at a point.

		--- Submission Information ---
		- Risk level: Low
		- Risk details: This adds a single style computation to every web selection hit test, but
		the more expensive and complicated machinery only comes into play in sites that use custom
		line height.
		- Code reviewed by: Justin Garcia and Ken Kocienda.
		- Testing details: Used selection in reduced test case and gizmodo.

        * WebCore.xcodeproj/project.pbxproj:
        * bindings/objc/DOMUIKitExtensions.h:
        * bindings/objc/DOMUIKitExtensions.mm:
        (-[DOMNode findExplodedTextNodeAtPoint:]):

2009-04-27  Antti Koivisto  <antti@apple.com>

        Reviewed by Greg Bolsinga.

        <rdar://problem/6817341> Many apps crashing calling -[UIFieldEditor text] in secondary thread

        Add WebThreadLockFromAnyThread/WebThreaUnlockFromAnyThread. These calls must be paired.

        * WebCore.iPhone.exp:
        * wak/WebCoreThread.h:
        * wak/WebCoreThread.mm:
        (WebThreadLockFromAnyThread):
        (WebThreadUnlockFromAnyThread):
        (WebThreadIsLocked):

2009-04-27  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by David Carson.

        <rdar://problem/6829935> MERGE: Hit testing with transforms and perspective is broken

        Merged ToT WebKit r42872.

        --- Submission Information ---
        - Risk level: Low
        - Risk details: Fix hit testing with transforms and perspective
        - Testing details: Ran testcase on device and simulator, tested general browsing
        and transform samples.

    2009-04-25  Simon Fraser  <simon.fraser@apple.com>

            Reviewed by Darin Adler

            https://bugs.webkit.org/show_bug.cgi?id=25390

            Fix point mapping and hit testing through transforms and perspective
            with ENABLE_3D_RENDERING. Previously the code did the more efficient
            move(), rather than getTransformFromContainer(), when the object had
            no transform. However, this skipped the application of perspective
            when the immediate child of the perspective element had no transform
            itself.

            Test: transforms/3d/point-mapping/3d-point-mapping-3.html

            * rendering/RenderBox.cpp:
            (WebCore::RenderBox::mapLocalToContainer):
            (WebCore::RenderBox::mapAbsoluteToLocalPoint):
            * rendering/RenderLayer.cpp:
            (WebCore::RenderLayer::createLocalTransformState):
            Call shouldUseTransformFromContainer() to determine if we need to
            go through the more expensive getTransformFromContainer() code
            path.

            * rendering/RenderObject.h:
            * rendering/RenderObject.cpp:
            (WebCore::RenderObject::shouldUseTransformFromContainer):
            New method that indicates whether we need use getTransformFromContainer()
            when mapping points through renderers, and hit testing.

2009-04-26  Paul Knight  <pknight@apple.com>

        Reviewed by Antti Koivisto.

        <rdar://problem/6827885> Images with exif rotation being drawn squished

        Correct the calculation of the FrameData's m_scale for rotated images.

        * platform/graphics/cg/ImageSourceCG.cpp:
        (WebCore::ImageSource::createFrameAtIndex):

2009-04-26  Paul Knight  <pknight@apple.com>

        Reviewed by David Carson.

        Part of <rdar://problem/6492776> Memory limits on N88 should be looser

        Increase the single image limit to 3MP for all devices so photos taken with N88 will work.

        * page/Settings.cpp:
        (WebCore::Settings::Settings):

2009-04-24  Paul Knight  <pknight@apple.com>

        Reviewed by Antti Koivisto.

        <rdar://problem/6804229> Animated GIFs stop animating when page is scrolled

        Always invalidate the image. Rely on other suppressions of drawing to prevent unecessary
        animation. Maintain frame-to-frame timings rather than skip ahead to maintain absolute
        image sync.

        --- Submission Information ---
        - Risk level: Medium
        - Risk details: Avoids a check that would prevent the drawing of the next frame of an animated GIF.
        - Code reviewed by: Antti Koivisto.
        - Testing details: Ensured images that were in suspended tabs or scrolled far off screen did not
          draw. Ensured they animated again after resuming tab or scrolling them back in. Ensured images
          continued to animate after scrolling.

        * platform/graphics/BitmapImage.cpp:
        (WebCore::BitmapImage::startAnimation):
        (WebCore::BitmapImage::internalAdvanceAnimation):

2009-04-24  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6725385> Content view in mail does not extend to the edge of its containing scroll view

        Merged ToT WebKit r41096.

        --- Submission Information ---
        - Risk level: Low
        - Risk details: Merges well-tested code in ToT WebKit that
          prevents a crash when the MessageUI fix for this radar is
          applied.
        - Code reviewed by: Sam Weinig.  Patch by Dan Bernstein.
        - Testing details: Ran layout tests.  Verified basic browsing
          was unaffected.  Verified crash was fixed.

    2009-02-19  Dan Bernstein  <mitz@apple.com>

        Reviewed by Sam Weinig.

        - WebCore part of fixing https://bugs.webkit.org/show_bug.cgi?id=24027
          Do not send loader callbacks during CSS styling

        Undo the iChat-specific quirk added in
        <http://trac.webkit.org/changeset/41071>. Instead, always suspend memory
        cache client callbacks during attach() and recalcStyle().

        * WebCore.base.exp: Removed
        Settings::setNeedsIChatMemoryCacheCallsQuirk().
        * dom/ContainerNode.cpp:
        (WebCore::ContainerNode::suspendPostAttachCallbacks): Disable memory
        cache client callbacks and remember to enable them afterwards if needed.
        (WebCore::ContainerNode::resumePostAttachCallbacks): Re-enable memory
        cache client callbacks if they were disabled in
        suspendPostAttachCallbacks().
        (WebCore::ContainerNode::attach): Use suspendPostAttachCallbacks() and
        resumePostAttachCallbacks().
        * dom/ContainerNode.h: Made suspendPostAttachCallbacks()
        and resumePostAttachCallbacks() non-static.
        * dom/Document.cpp:
        (WebCore::Document::dispatchImageLoadEventsNow): Reverted iChat-specific
        workaround.
        * page/Settings.cpp: Removed m_needsIChatMemoryCacheCallsQuirk and
        related code.
        (WebCore::Settings::Settings):
        * page/Settings.h:

2009-04-24  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6629763> Update MobileSafari version string to match Safari 4 Public Beta on Leopard

        Merged ToT WebKit r42449.

        --- Submission Information ---
        - Risk level: Low
        - Risk details: Added check for another script that doesn't
          work corectly when navigator.appVersion returns "4.0".
        - Code reviewed by: Sam Weinig.  Patch by Dan Bernstein.
        - Testing details: Ran layout tests.  Verified basic browsing
          was unaffected.

    2009-04-13  Dan Bernstein  <mitz@apple.com>

        Reviewed by Sam Weinig.

        - fix <rdar://problem/6404439> REGRESSION: Overlapping text and other
          layout issues in View Sample feature of MYOB FIrstEdge v3

        * page/Navigator.cpp:
        (WebCore::shouldHideFourDot): Added "tdqm_loader.js" to the list of
        JavaScript files this quirk applies to.

2009-04-23  Justin Garcia  <justin.garcia@apple.com>

        Reviewed by Drew Wilson.

        <rdar://problem/6809739> REGRESSION: Caret appears over password dot or too far away from it for 't' and 'm'

        This works in password fields that automatically adjust their text size to fit, but not others.  In the working
        case we appear to just get lucky.  The respondToChangedSelection call we added to secureLastCharacter is made
        before a layout actually changes the width of the text, so it draws the old invalid caret.  But as a side effect
        respondToChangedSelection triggers a later call to -[UITextField layoutSubviews], which, in the working case
        triggers a layout for some unrelated reason, layouts the new text, and again for unrelated reasons, updates the selection.

        Fix is to dirty the selection in secureLastCharacter after we modify the RenderText, so that when we call up to
        UIKit with respondToChangedSelection, it will get the correct caret rect when it asks for it.

        Also instead of calling Editor::respondToChangedSelection, which just calls EditorClient::respondToChangedSelection,
        I call the EditorClient version so that what we are doing (calling up to UIKit) is more clear.

        Also the Frame's Editor and SelectionController can never be null.

        * rendering/RenderText.cpp:
        (WebCore::RenderText::secureLastCharacter):

2009-04-23  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6786698> MERGE: iPhone: REGRESSION (Safari 3-4): XML parsing in WebKit permits local file theft and network proxying (25164)

        Merged ToT WebKit r42738.

        --- Submission Information ---
        - Risk level: Low
        - Risk details: Enforce the same-origin policy when a DocLoader
          is present in the XMLTokenizer.
        - Code reviewed by: Darin Adler.  Patch by Mark Rowe.
        - Testing details: Ran layout tests.  Verified basic browsing
          was unaffected.

    2009-04-21  Mark Rowe  <mrowe@apple.com>

        Reviewed by Darin Adler.

        Fix <https://bugs.webkit.org/show_bug.cgi?id=25164> / <rdar://problem/6786319>.

        We need to ensure that XMLTokenizer sets the current DocLoader before calling in to
        any libxml2 methods that may trigger a load.  The presence of a DocLoader indicates
        that the load was originated by WebCore's use of libxml2 and that we should enforce
        the same-origin policy on it.  XMLTokenizer::initializeParserContext,
        XMLTokenizer::doWrite and XMLTokenizer::doEnd were three methods that were not setting
        the current DocLoader when they should have.

        The XMLTokenizerScope class is introduced to simplify the pattern of saving, setting and
        restoring the current DocLoader and libxml2 error handlers.  The DocLoader and error handlers
        are saved and set when the scope is allocated, and restored to their previous values when
        the scope is exited.

        Test: http/tests/security/xss-DENIED-xml-external-entity.xhtml

        * GNUmakefile.am:
        * WebCore.pro:
        * WebCore.scons:
        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.xcodeproj/project.pbxproj:
        * dom/XMLTokenizer.cpp:
        * dom/XMLTokenizer.h:
        * dom/XMLTokenizerLibxml2.cpp:
        (WebCore::matchFunc):
        (WebCore::shouldAllowExternalLoad):
        (WebCore::openFunc):
        (WebCore::XMLTokenizer::doWrite):
        (WebCore::XMLTokenizer::initializeParserContext):
        (WebCore::XMLTokenizer::doEnd):
        (WebCore::xmlDocPtrForString):
        * dom/XMLTokenizerScope.cpp:
        (WebCore::XMLTokenizerScope::XMLTokenizerScope):
        (WebCore::XMLTokenizerScope::~XMLTokenizerScope):
        * dom/XMLTokenizerScope.h:
        * xml/XSLStyleSheet.cpp:
        (WebCore::XSLStyleSheet::parseString):
        * xml/XSLTProcessor.cpp:

2009-04-23  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6015692> iPhone: Add PasswordServer to blocked port list

        Merged ToT WebKit r42737.

        --- Submission Information ---
        - Risk level: Low
        - Risk details: Added one port number to an existing black list.
        - Code reviewed by: Dan Bernstein.  Patch by Sam Weinig.
        - Testing details: Ran layout tests.  Verified basic browsing
          was unaffected.

    2009-04-21  Sam Weinig  <sam@webkit.org>

        Reviewed by Dan Bernstein.

        Fix for <rdar://problem/5874009>
        Add port 3659 (apple-sasl / PasswordServer) to the list of blocked ports.

        * platform/network/ResourceHandle.cpp:
        (WebCore::portAllowed):

2009-04-22  Justin Garcia  <justin.garcia@apple.com>

        <rdar://problem/6808229> Can't delete the line break after an image in Messages

        Merged http://trac.webkit.org/changeset/42763

        2009-04-22  Justin Garcia  <justin.garcia@apple.com>

            Reviewed by Darin Adler.

            https://bugs.webkit.org/show_bug.cgi?id=25322
            Can't delete empty paragraph after a block image

            Empty paragraph removal would have been handled by mergeParagraphs, but we stopped short
            because of some code that avoided problems that would arise from Positions that would go
            bad during deletion.

            We have several checks that prevent us from using bad Positions, this one in particular
            was added to avoid bad Positions that result from text removal.  So, I removed the check
            and started correctly updating m_downstreamEnd during text removal so that it doesn't go
            bad.  m_upstreamStart doesn't need to be updated during text removal, since only text
            after it will ever be removed.

            * editing/DeleteSelectionCommand.cpp:
            (WebCore::DeleteSelectionCommand::deleteTextFromNode):
            (WebCore::DeleteSelectionCommand::handleGeneralDelete):
            (WebCore::DeleteSelectionCommand::mergeParagraphs):

2009-04-22  Andre Boule  <aboule@apple.com>

        Reviewed by pknight
        OOPS fixing typo for previous checkin.
        --- Submission Information ---
        - Risk level: low
        - Risk details: no change to code
        - Code reviewed by: pknight
        - Testing details: no testing necessary. Typo.

        * platform/graphics/GlyphPageTreeNode.cpp:
        (WebCore::GlyphPageTreeNode::initializePage):

2009-04-22  Andre Boule  <aboule@apple.com>

        Change by Dan Bernstein.
        Reviewed by me.
        <rdar://problem/6814152> AB: Any diacritical in Arabic text, is displayed with a last resort character in Arabic web pages

        --- Submission Information ---
        - Risk level: med
        - Risk details: Affects font fallback for text drawing
        - Code reviewed by: me (change by Dan Bernstein)
        - Testing details: Test display of various languages and fonts, especially Arabic and special fonts like the LCD font.

        * platform/graphics/FontFastPath.cpp:
        (WebCore::Font::glyphDataForCharacter):
        * platform/graphics/GlyphPageTreeNode.cpp:
        (WebCore::GlyphPageTreeNode::initializePage):

2009-04-22  Eric Carlson  <eric.carlson@apple.com>

        Reviewed by Simon Fraser.

        <rdar://problem/6812012> Cannot change <video> source more than once once playback has occured

        The QT plug-in, used as the media engine for the <video> element is now able to do validation
        on demand so there is no need to restrict loading. Removing also allowing the 'src'
        attribute to be changed when not in fullscreen mode.

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::HTMLMediaElement): Remove m_allowOneLoad.
        (WebCore::HTMLMediaElement::attributeChanged): Ditto.
        (WebCore::HTMLMediaElement::load): Don't restrict loading.
        (WebCore::HTMLMediaElement::loadInternal): Remove m_allowOneLoad.
        (WebCore::HTMLMediaElement::play): Bail unless the element is in the document.
        (WebCore::HTMLMediaElement::playInternal): Remove m_allowOneLoad.
        * html/HTMLMediaElement.h: Remove m_allowOneLoad.

2009-04-22  Ken Kocienda  <kocienda@apple.com>

        Fix for this bug:

        <rdar://problem/6759514> Cannot input text with international keyboards after delete text with 'X'

        --- Submission Information ---
        - Risk level: low
        - Risk details: Problem was stale composition/markedText state. This is now properly cleaned up
          in two places in the code. Affects input-method-based keyboards.
        - Code reviewed by: Justin Garcia
        - Testing details: I tested in Maps, Safari, and Spotlight.

        * editing/Editor.cpp:
        (WebCore::ClearTextCommand::CreateAndApply)
        (WebCore::Editor::setTextAsChildOfElement)

2009-04-22  Eric Carlson  <eric.carlson@apple.com>

        Reviewed by Simon Fraser.

        <rdar://problem/6803012> Bipbop movie from devimages plays even after coming out of safari

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::setNetworkState):
        Try to load the next <source> element when one fails to load as the plug-in is able to validate
        on demand now.

        (WebCore::HTMLMediaElement::deliverNotification):
        m_inFullScreen is iPhone only so wrap access to it in #if PLATFORM(IPHONE). Pause playback
        when going out of full screen so 'potentiallyPlaying()' will never return true. Clear m_error
        when a movie validates so spurious errors don't prevent playback.

        * platform/graphics/iphone/MediaPlayerPrivateIPhone.mm:
        (WebCore::MediaPlayerPrivateiPhone::deliverNotification):
        Don't report errors we find out about after exiting from fullscreen.

2009-04-21  David Carson  <dacarson@apple.com>

        Reviewed by Justin Garcia

        <rdar://problem/6815245> Image squished http://www.remodelingthislife.com/2009/04/19/self-portrait/

        Some images that have been rotated still have an EXIF orientation entry but it contains
        an invalid value. This change tests for out of range orientation values and resets
        it to the default.

        * platform/graphics/cg/ImageSourceCG.cpp:
        (WebCore::ImageSource::orientationAtIndex): add validation

2009-04-21  Justin Garcia  <justin.garcia@apple.com>

        <rdar://problem/6806475> REGRESSION: Crash in splitTextElementAtStartIfNeeded( switching to the Hebrew keyboard in Mail

        Merged http://trac.webkit.org/changeset/42735

        2009-04-21  Justin Garcia  <justin.garcia@apple.com>

            Reviewed by Dan Bernstein.

            https://bugs.webkit.org/show_bug.cgi?id=25320
            Crash when changing block styles in a root that contains no visible content (but contains nodes with renderers)

            * editing/CompositeEditCommand.cpp:
            (WebCore::CompositeEditCommand::moveParagraphContentsToNewBlockIfNecessary): If the enclosing block is the
            root editable element and it contains no visible content, create a new block but don't try and move
            content into it, since there's nothing for moveParagraphs to move.

2009-04-21  Aaron Golden  <agolden@apple.com>

        Reviewed by Brad Moore.

        <rdar://problem/6803433> REGRESSION: Undo - undoes auto-correction (correct) and selects the misspelled word (incorrect?)

        * WebCore.iPhone.exp:
        * editing/EditCommand.h:
        * editing/TypingCommand.cpp:
        (WebCore::TypingCommand::setEndingSelectionOnLastInsertCommand):
        * editing/TypingCommand.h:

2009-04-21  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/6813377> HistoryItem's iPhone specific code is incomplete

        Correct some incomplete and incorrect C++ code.

        * history/HistoryItem.cpp:
        (WebCore::HistoryItem::HistoryItem):
        * history/HistoryItem.h:

2009-04-21  Justin Garcia  <justin.garcia@apple.com>

        <rdar://problem/6810584> Select All + Cut + Paste in Mail indents everything slightly

        Merged http://trac.webkit.org/changeset/42722

        2009-04-21  Justin Garcia  <justin.garcia@apple.com>

            Reviewed by Darin Adler.

            https://bugs.webkit.org/show_bug.cgi?id=19644
            Text copied with Select All pastes with a indent but shouldn't
            <rdar://problem/6102483>
            Pasting the content of an HTML message in Mail causes addition nested <div> elements to be added

            To improve selectall/copy/paste fidelity of certain pages, we began wrapping copied content with
            a div that held properties and attributes from the fully selected body.  To fix the above issues,
            only do this if if the body has certain properties or attributes.  We'll begin adding to this list as
            necessary.  For now it's just background colors and images.  Tested copy/paste of nytimes, wired,
            arstechnica, and several others.

            Massive nesting can still happen, it will just be much less common.

            * editing/markup.cpp:
            (WebCore::createMarkup):

2009-04-21  Brad Moore  <bradm@apple.com>

        Reviewed by Scott Goodson.

		Since RenderTable returns true to childrenInline even though its children aren't
		inline, add an explicit table check.

		<rdar://problem/6800720> Page loses selection and scrolls to the top

		--- Submission Information ---
		- Risk level: Low
		- Risk details: At worst, we won't get text-only selection mode when expected.
		- Code reviewed by: Scott Goodson
		- Testing details: Selected across several web pages.

        * bindings/objc/DOMUIKitExtensions.mm:
        (-[DOMNode containsOnlyInlineObjects]):

2009-04-20  Paul Knight  <pknight@apple.com>

        Reviewed by Andre Boule and Greg Bolsinga.

        <rdar://problem/6646657> AT&T originated QC 69331 ATT: Animated Gifs not animating

        Allow images with decoded sizes > 2MB to animate. Don't cache frames when cache would be > 2MB.
        Don't skip frames when rendering in an attempt to keep up with the animation times.

        --- Submission Information ---
        - Risk level: med
        - Risk details: Allows many more animated GIFs to animate. Does
          not cache decoded frames if decoded size would be greater than
          2MB. Does not skip frames to "catch up" with the animation, as
          we would be dropping frames on older hardware.
        - Code reviewed by: Andre Boule and Greg Bolsinga.
        - Testing details: All animated GIF images linked on
          http://pknight.apple.com/memorylimits/ now animate. Left page
          in 4812660 open for 10 minutes on M68 and observed no memory
          bloat.

        * platform/graphics/BitmapImage.cpp:
        (WebCore::BitmapImage::destroyDecodedDataIfNecessary):
        (WebCore::BitmapImage::shouldAnimate):
        * platform/graphics/Image.cpp:
        (WebCore::Image::drawTiled):
        * platform/graphics/cg/ImageCG.cpp:
        (WebCore::BitmapImage::checkForSolidColor):

2009-04-20  Justin Garcia  <justin.garcia@apple.com>

        <rdar://problem/6804912> REGRESSION (280-293): Caret positioned such that it completely overlaps previous RTL character

        Merged http://trac.webkit.org/changeset/42685

        2009-04-20  Justin Garcia  <justin.garcia@apple.com>

            Reviewed by Dan Bernstein.

            https://bugs.webkit.org/show_bug.cgi?id=25299
            Don't bound caret to root line box if it is still inside its containing block

            Can't yet test changes to behavior with non-standard caret widths.

            * rendering/RenderText.cpp:
            (WebCore::RenderText::localCaretRect):

2009-04-20  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6595855> MERGE: iPhone: Safari memory consumption DoS

        Merged ToT WebKit r42664.

        --- Submission Information ---
        - Risk level: Low
        - Risk details: Clear unused image data when an error happens on
          load.
        - Code reviewed by: Antti Koivisto and Darin Adler.  Patch by
          Oliver Hunt.
        - Testing details: Ran layout tests.  Verified basic browsing
          was unaffected.

    2009-04-19  Oliver Hunt  <oliver@apple.com>

        Reviewed by Antti Koivisto and Darin Adler.

        <rdar://problem/6127705> Excessive memory consumption on image load failure

        When we fail to decode an image we clear most of the image data, but not the
        input data itself, which can be backed by a CFData object that itself holds onto
        a few hundred Kbs of memory.  This patch merely ensures that this buffer gets
        cleared.

        * loader/CachedImage.cpp:
        (WebCore::CachedImage::error):

2009-04-20  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6254544> MERGE: iPhone OS 2.1: Unbounded memory growth when churning elements with anonymous event handler functions

        Merged ToT WebKit r42017, r42018, r42019, r42021, r42235, r42256.

        --- Submission Information ---
        - Risk level: Medium
        - Risk details: Applied a series of patches from ToT WebKit to
          iPhone WebKit that make Node event listeners, "use marking
          instead of GC protection".
        - Code reviewed by: Darin Adler, Geoff Garen and Sam Weinig.
          Patches by Darin Adler and Geoff Garen.
        - Testing details: Ran layout tests.  Verified basic browsing
          was unaffected.  Specific test case that caused memory
          consumption was verified to be fixed with the changes.

    2009-04-06  Geoffrey Garen  <ggaren@apple.com>

        Reviewed by Darin Adler.

        Fixed https://bugs.webkit.org/show_bug.cgi?id=21260
        Unbounded memory growth when churning elements with anonymous event handler functions

        The problem was that a protected event listener's scope chain would end
        up with a reference to the Node protecting it, causing a cycle. The
        solution is to stop protecting event listeners and rely on marking instead.

        This patch converts most Node event listeners to use marking instead of
        GC protection.

        * bindings/js/JSDOMBinding.cpp:
        (WebCore::isObservableThroughDOM):
        (WebCore::markDOMNodesForDocument): Refactored the test for whether a Node
        needs marking, and added a case for marking the node in order to mark its
        event listeners.

        * bindings/js/JSNodeCustom.cpp:
        (WebCore::markEventListeners):
        (WebCore::JSNode::addEventListener):
        (WebCore::JSNode::removeEventListener):
        (WebCore::JSNode::mark): Added code to mark a Node's event listeners when
        marking the Node. Changed code using protected event listeners to use event
        listeners.

        * dom/Node.idl: Changed code using protected event listeners to use event
        listeners.

    2009-04-05  Geoffrey Garen  <ggaren@apple.com>

        [Originally] Reviewed by Sam Weinig.

        Rolled back in r42214 with crashes fixed.

        [Removed irrelevant ExecState* parameter from event handler registration code.]

        [No change in behavior.]

        * bindings/js/JSDOMApplicationCacheCustom.cpp:
        (WebCore::JSDOMApplicationCache::addEventListener):
        (WebCore::JSDOMApplicationCache::removeEventListener):
        * bindings/js/JSDOMGlobalObject.cpp:
        (WebCore::JSDOMGlobalObject::findOrCreateJSProtectedEventListener):
        (WebCore::JSDOMGlobalObject::findJSEventListener):
        (WebCore::JSDOMGlobalObject::findOrCreateJSEventListener):
        * bindings/js/JSDOMGlobalObject.h:
        * bindings/js/JSDOMWindowCustom.cpp:
        (WebCore::JSDOMWindow::addEventListener):
        * bindings/js/JSMessagePortCustom.cpp:
        (WebCore::JSMessagePort::addEventListener):
        (WebCore::JSMessagePort::removeEventListener):
        * bindings/js/JSNodeCustom.cpp:
        (WebCore::JSNode::addEventListener):
        * bindings/js/JSSVGElementInstanceCustom.cpp:
        (WebCore::JSSVGElementInstance::addEventListener):
        * bindings/js/JSWorkerContextCustom.cpp:
        (WebCore::JSWorkerContext::addEventListener):
        (WebCore::JSWorkerContext::removeEventListener):
        * bindings/js/JSWorkerCustom.cpp:
        (WebCore::JSWorker::addEventListener):
        (WebCore::JSWorker::removeEventListener):
        * bindings/js/JSXMLHttpRequestCustom.cpp:
        (WebCore::JSXMLHttpRequest::addEventListener):
        (WebCore::JSXMLHttpRequest::removeEventListener):
        * bindings/js/JSXMLHttpRequestUploadCustom.cpp:
        (WebCore::JSXMLHttpRequestUpload::addEventListener):
        (WebCore::JSXMLHttpRequestUpload::removeEventListener):
        * bindings/scripts/CodeGeneratorJS.pm:

    2009-03-26  Darin Adler  <darin@apple.com>

        Reviewed by Geoff Garen.

        Removed code that casts EventListener down to derived classes
        without type checking. A crash could happen if you added event
        listeners with Objective-C and then manipulated the class with
        JavaScript.

        * bindings/js/JSDOMApplicationCacheCustom.cpp:
        (WebCore::JSDOMApplicationCache::mark): Removed all the casts
        and used the markIfNotNull function and mark functions on
        EventListener instead.
        * bindings/js/JSMessagePortCustom.cpp:
        (WebCore::JSMessagePort::mark): Ditto.
        * bindings/js/JSWorkerContextCustom.cpp:
        (WebCore::JSWorkerContext::mark): Ditto.
        * bindings/js/JSWorkerCustom.cpp:
        (WebCore::JSWorker::mark): Ditto.
        * bindings/js/JSXMLHttpRequestCustom.cpp:
        (WebCore::JSXMLHttpRequest::mark): Ditto.
        * bindings/js/JSXMLHttpRequestUploadCustom.cpp:
        (WebCore::JSXMLHttpRequestUpload::mark): Ditto.

        * bindings/js/JSEventListener.cpp:
        (WebCore::JSAbstractEventListener::handleEvent): Used function,
        the new name for what used to be called listenerObj.
        (WebCore::JSAbstractEventListener::virtualIsInline): Renamed since
        this doesn't need to be virtual for callers who have a pointer to
        this class, not the base class.
        (WebCore::JSEventListener::function): Renamed from listenerObj.
        (WebCore::JSProtectedEventListener::function): Ditto.

        * bindings/js/JSEventListener.h: Removed unneeded forward class
        declarations. Made all virtual functions private since there's no
        need to call any of them on a particular derived class, only on
        EventListener. Explicitly declare JSEventListener::mark as virtual
        since it's now overriding a function in the EventListener base class.
        Made JSProtectedEventListener::m_globalObject protected so the
        JSLazyEventListener derived class can use it directly instead of using
        a virtual function to get the pointer.

        * bindings/js/JSLazyEventListener.cpp:
        (WebCore::JSLazyEventListener::parseCode): Use m_globalObject instead
        of globalObject since the latter is a virtual function and there's no
        need to pay virtual function overhead.
        (WebCore::JSLazyEventListener::function): Renamed from listenerObj.

        * bindings/js/JSLazyEventListener.h: Moved forward declaration of the
        Node class here from JSEventListener.h.

        * bindings/scripts/CodeGeneratorJS.pm: Removed now-unneeded cast to
        JSEventListener when getting the script object from a listener.

        * dom/EventListener.h: Added virtual function and mark functions
        so we can extract the JavaScript function object or mark a JavaScript
        event listener in a type safe manner.

    2009-03-26  Darin Adler  <darin@apple.com>

        Reviewed by Geoff Garen.

        Split JSLazyEventListener out into its own separate source file.
        We'll be removing JSAbstractEventListener and JSProtectedEventListener soon,
        so leave those in the same file with JSEventListener.

        * GNUmakefile.am: Added JSLazyEventListener.
        * WebCore.pro: Ditto.
        * WebCore.scons: Ditto.
        * WebCore.vcproj/WebCore.vcproj: Ditto.
        * WebCore.xcodeproj/project.pbxproj: Ditto.
        * WebCoreSources.bkl: Ditto.

        * bindings/js/JSEventListener.cpp: Removed the JSLazyEventListener part.
        Removed unneeded includes. Removed incorrect ASSERT_CLASS_FITS_IN_CELL, since
        JSAbstractEventListener is not derived from JSCell.

        * bindings/js/JSEventListener.h: Removed the JSLazyEventListener part
        and the now-unneeded include of PlatformString.h.

        * bindings/js/JSLazyEventListener.cpp: Copied from bindings/js/JSEventListener.cpp.
        Kept only the JSLazyEventListener part.
        (WebCore::eventParameterName): Made this have internal linkage by adding "static".
        Also moved the default case out of the switch statement so we will get a warning
        if we omit any cases in the future.

        * bindings/js/JSLazyEventListener.h: Copied from bindings/js/JSEventListener.h.
        Kept only the JSLazyEventListener part.

        * bindings/js/ScriptController.cpp: Removed unneeded includes and sorted the
        remanining ones. Include JSLazyEventListener.h instead of JSEventListener.h.

    2009-03-26  Darin Adler  <darin@apple.com>

        Reviewed by Geoff Garen.

        Merge r40374.

        Renamed JSUnprotectedEventListener to JSEventListener.
        And related renames.

        Soon Geoff will make all JavaScript event listeners use mark instead
        of protect, so there's no need to emphasize "unprotected".

        * bindings/js/JSDOMApplicationCacheCustom.cpp:
        (WebCore::JSDOMApplicationCache::mark):
        (WebCore::JSDOMApplicationCache::addEventListener):
        (WebCore::JSDOMApplicationCache::removeEventListener):
        * bindings/js/JSDOMGlobalObject.cpp:
        (WebCore::JSDOMGlobalObject::~JSDOMGlobalObject):
        (WebCore::JSDOMGlobalObject::findJSEventListener):
        (WebCore::JSDOMGlobalObject::findOrCreateJSEventListener):
        (WebCore::JSDOMGlobalObject::jsEventListeners):
        (WebCore::JSDOMGlobalObject::jsInlineEventListeners):
        * bindings/js/JSDOMGlobalObject.h:
        * bindings/js/JSDOMWindowBase.h:
        * bindings/js/JSEventListener.cpp:
        (WebCore::JSEventListener::JSEventListener):
        (WebCore::JSEventListener::~JSEventListener):
        (WebCore::JSEventListener::listenerObj):
        (WebCore::JSEventListener::globalObject):
        (WebCore::JSEventListener::clearGlobalObject):
        (WebCore::JSEventListener::mark):
        * bindings/js/JSEventListener.h:
        (WebCore::JSEventListener::create):
        * bindings/js/JSMessagePortCustom.cpp:
        (WebCore::JSMessagePort::mark):
        (WebCore::JSMessagePort::addEventListener):
        (WebCore::JSMessagePort::removeEventListener):
        * bindings/js/JSWorkerContextCustom.cpp:
        (WebCore::JSWorkerContext::mark):
        (WebCore::JSWorkerContext::addEventListener):
        (WebCore::JSWorkerContext::removeEventListener):
        * bindings/js/JSWorkerCustom.cpp:
        (WebCore::JSWorker::mark):
        (WebCore::JSWorker::addEventListener):
        (WebCore::JSWorker::removeEventListener):
        * bindings/js/JSXMLHttpRequestCustom.cpp:
        (WebCore::JSXMLHttpRequest::mark):
        (WebCore::JSXMLHttpRequest::addEventListener):
        (WebCore::JSXMLHttpRequest::removeEventListener):
        * bindings/js/JSXMLHttpRequestUploadCustom.cpp:
        (WebCore::JSXMLHttpRequestUpload::mark):
        (WebCore::JSXMLHttpRequestUpload::addEventListener):
        (WebCore::JSXMLHttpRequestUpload::removeEventListener):
        * bindings/scripts/CodeGeneratorJS.pm:
        All just renaming.

    2009-03-26  Darin Adler  <darin@apple.com>

        Reviewed by Geoff Garen.

        Renamed JSEventListener to JSProtectedEventListener.
        And related renames.

        Soon Geoff will make all JavaScript event listeners use mark instead
        of protect, and so this class will be be obsolete. We will rename
        JSUnrpotectedEventListener to JSEventListener in the next check-in,
        since that one will remain.

        * bindings/js/JSDOMGlobalObject.cpp:
        (WebCore::JSDOMGlobalObject::~JSDOMGlobalObject):
        (WebCore::JSDOMGlobalObject::findJSProtectedEventListener):
        (WebCore::JSDOMGlobalObject::findOrCreateJSProtectedEventListener):
        (WebCore::JSDOMGlobalObject::jsProtectedEventListeners):
        (WebCore::JSDOMGlobalObject::jsProtectedInlineEventListeners):
        * bindings/js/JSDOMGlobalObject.h:
        * bindings/js/JSDOMWindowBase.h:
        * bindings/js/JSDOMWindowCustom.cpp:
        (WebCore::JSDOMWindow::addEventListener):
        (WebCore::JSDOMWindow::removeEventListener):
        * bindings/js/JSEventListener.cpp:
        (WebCore::JSProtectedEventListener::JSProtectedEventListener):
        (WebCore::JSProtectedEventListener::~JSProtectedEventListener):
        (WebCore::JSProtectedEventListener::listenerObj):
        (WebCore::JSProtectedEventListener::globalObject):
        (WebCore::JSProtectedEventListener::clearGlobalObject):
        (WebCore::JSLazyEventListener::JSLazyEventListener):
        (WebCore::JSLazyEventListener::parseCode):
        * bindings/js/JSEventListener.h:
        (WebCore::JSProtectedEventListener::create):
        * bindings/js/JSNodeCustom.cpp:
        (WebCore::JSNode::addEventListener):
        (WebCore::JSNode::removeEventListener):
        * bindings/js/JSSVGElementInstanceCustom.cpp:
        (WebCore::JSSVGElementInstance::addEventListener):
        (WebCore::JSSVGElementInstance::removeEventListener):
        All just renaming.

2009-04-19  Justin Garcia  <justin.garcia@apple.com>

        Reviewed by Antti Koivisto.

        <rdar://problem/6725389> Text selection tint confused by images

        * rendering/RenderImage.cpp:
        (WebCore::RenderImage::collectSelectionRects): Implemented.  A little flaky for floating/positioned
        images but WebCore doesn't handle those properly yet when creating selections anyway, and they are
        rare or nonexistent where we need collectSelectionRects (web pages that are mostly text and in Mail/SMS).
        * rendering/RenderImage.h:

2009-04-20  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Greg Bolsinga

        <rdar://problem/6795948> Copy and Paste needs to support CSS-transformed HTML content

        Put back the 'true' boolean argument to absoluteBoundingBoxRect() in -[DOMNode boundingBox],
        which got lost in r91839, with a comment to make it more obvious. This fixes the
        selection highlight in transformed content.

        --- Submission Information ---
        - Risk level: Low
        - Risk details: Pass a 'true' parameter to absoluteBoundingBoxRect() to have it
        respect transforms; was added in r87641, but mistakenly removed in r91839.
        - Code reviewed by: Greg Bolsinga
        - Testing details: Tested selection on transformed content.

        * bindings/objc/DOM.mm:
        (-[DOMNode boundingBox]):

2009-04-18  Antti Koivisto  <antti@apple.com>

        Reviewed by Dave Kilzer.

        <rdar://problem/6652071> Typing in email with many photos is very, very slow (N82)

        Restore the image subsampling feature that got lost in the merge.

        * platform/graphics/BitmapImage.cpp:
        (WebCore::BitmapImage::destroyMetadataAndNotify):
        (WebCore::BitmapImage::cacheFrame):
        (WebCore::BitmapImage::frameAtIndex):
        * platform/graphics/cg/ImageCG.cpp:
        (WebCore::BitmapImage::checkForSolidColor):

2009-04-18  Antti Koivisto  <antti@apple.com>

        Reviewed by Dave Kilzer.

        <rdar://problem/6792148> UITextView displays text vertically for short text.

        Make initial document view size the scroll view size instead of zero. This way early layouts
        are done against sensible view size too.

        Tested with Safari and bunch of internal and external app. No obvious regressions seen.

        * wak/WKScrollView.c:
        (WKScrollViewCreateWithFrame):

2009-04-18  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6200204> MERGE: iPhone: Recursive mutation events can cause stack corruption

        Merged ToT WebKit r42532.

        --- Submission Information ---
        - Risk level: Low
        - Risk details: Use a RefPtr to hold the m_head ivar.
        - Code reviewed by: Darin Adler.  Patch by Sam Weinig.
        - Testing details: Ran layout tests.  Verified basic browsing
          was unaffected.

    2009-04-14  Sam Weinig  <sam@webkit.org>

        Reviewed by Darin Adler.

        Part of <rdar://problem/6150868>
        Fix incorrect handling of content that needs to go into the head element
        once the head element has been removed.

        Test: fast/parser/head-content-after-head-removal.html

        * html/HTMLParser.cpp:
        (WebCore::HTMLParser::HTMLParser): Remove unneeded initializer of m_head.
        (WebCore::HTMLParser::handleError): Update since m_head is now a RefPtr.
        (WebCore::HTMLParser::createHead): Ditto.
        * html/HTMLParser.h: Make m_head a RefPtr.

2009-04-18  Justin Garcia  <justin.garcia@apple.com>

        <rdar://problem/6800956> In a UITextField, caret can be thinner/invisible in certain cases
        <rdar://problem/6804912> REGRESSION (280-293): Caret positioned such that it completely overlaps previous RTL character

        Merged http://trac.webkit.org/changeset/42634

        2009-04-17  Justin Garcia  <justin.garcia@apple.com>

            Reviewed by Dan Bernstein.

            https://bugs.webkit.org/show_bug.cgi?id=25277
            If there is no line wrapping, a caret can leave its containing block but it shouldn't leave its root line box

            * rendering/RenderText.cpp:
            (WebCore::RenderText::localCaretRect): Distribute a caret's width to either side of the offset,
            so that a caret between two characters doesn't hang over one character more than another.
            Handle the no wrap case.  If there is no wrapping, the caret can leave its containing block, but
            not its root line box.

2009-04-17  Simon Fraser  <simon.fraser@apple.com>

        Rubber-stamped by David Kilzer

        Merged ToT WebKit r42533.

        --- Submission Information ---
        - Risk level: Low
        - Risk details: Merge WebKit ToT security fix for local file
        loading by video element.
        - Code reviewed by: Alexey Proskuryakov.
        - Testing details: tested video elements on the device.

    2009-04-14  Eric Carlson  <eric.carlson@apple.com>

            Reviewed by Alexey Proskuryakov.

            Fix <rdar://problem/6755724> <audio> and <video> elements can reference local
            file:/// URLs from remote in Safari

            Tests: http/tests/security/local-video-poster-from-remote.html
                   http/tests/security/local-video-source-from-remote.html
                   http/tests/security/local-video-src-from-remote.html

            * html/HTMLMediaElement.cpp:
            (WebCore::HTMLMediaElement::loadResource): Don't pass url to media engine unless loader->canLoad()
            says it is OK.

2009-04-17  Greg Bolsinga  <bolsinga@apple.com>

        Bug 25210: don't use ObjC methods to wrap/unwrap DOM objects with ObjC
        https://bugs.webkit.org/show_bug.cgi?id=25210

        Merged http://trac.webkit.org/changeset/42618

        This reduces the WebCore cstring section significantly.

        --- Submission Information ---
        - Risk level: Medium
        - Risk details: This change makes the DOM ObjC bindings behave differently.
        - Code reviewed by: Open Source and David Kilzer.
        - Testing details: Ran the DRT.

        2009-04-17  Darin Adler  <darin@apple.com>

                Reviewed by Antti Koivisto.

                Bug 25210: don't use ObjC methods to wrap/unwrap DOM objects with ObjC
                https://bugs.webkit.org/show_bug.cgi?id=25210

                * WebCore.base.exp: Export the core and kit function overloads that are used
                in WebKit. Also resorted this file.

                * WebCore.xcodeproj/project.pbxproj: Re-added DOMHTMLCanvasElement.h to fix
                a strange problem with the file type.

                * bindings/objc/DOM.mm: Removed the many extraneous includes. Added new includes
                so we can use and implement the new core and kit functions. Import DOMInternal.h
                first so it can do its public/private magic.
                (-[DOMNode _rootObject]): Changed to use early-return style.
                (kitClass): Added. Tells the wrapper generator what kind of node class to create
                to wrap DOM nodes. This has the code that used to be in the _wrapNode method.
                (kit): Added. Takes an EventTarget and makes the appropriate type of wrapper,
                dpending on whether it's a Node or an SVGElementInstance. This replace methods
                that used to be on both of those classes.
                (-[DOMNode boundingBox]): Changed to use early return, and the core function.
                (-[DOMNode lineBoxRects]): Ditto.
                (-[DOMNode renderedImage]): Ditto.
                (-[DOMRange boundingBox]): Ditto.
                (-[DOMRange lineBoxRects]): Ditto.
                (-[DOMElement image]): Ditto.
                (-[DOMElement _font]): Ditto.
                (-[DOMElement _imageTIFFRepresentation]): Ditto.
                (-[DOMElement _getURLAttribute:]): Ditto.
                (-[DOMElement isFocused]): Ditto.
                (kit): Hand-wrote the version of this for NodeFilter, since it's a protocol,
                not a class in the binding.
                (core): Ditto.
                (-[DOMNodeFilter acceptNode:]): Use core.

                * bindings/objc/DOMAbstractView.mm:
                (-[DOMAbstractView document]): Use kit.
                (-[DOMAbstractView _disconnectFrame]): Call removeDOMWrapper, which is no longer
                in the WebCore namespace, since it's headed for WebKit in the future.
                (core): Hand-wrote the version of this for DOMAbstractView.mm, since we store
                a pointer to the Frame, not the DMWindow.
                (kit): Ditto.

                * bindings/objc/DOMCSS.mm:
                (kitClass): Added. Tells the wrapper generator what kind of node class to create
                to wrap CSS objects. This has the code that used to be in the _wrapStyleSheet,
                _wrapCSSRule, and _wrapCSSValue methods.

                * bindings/objc/DOMEvents.mm:
                (kitClass): Added. Tells the wrapper generator what kind of node class to create
                to wrap event objects. This has the code that used to be in the _wrapEvent methods.

                * bindings/objc/DOMHTML.mm:
                (-[DOMHTMLDocument createDocumentFragmentWithMarkupString:baseURL:]): Use kit and core.
                (-[DOMHTMLDocument createDocumentFragmentWithText:]): Ditto.
                (-[DOMHTMLDocument _createDocumentFragmentWithMarkupString:baseURLString:]): Ditto.
                (-[DOMHTMLInputElement _rectOnScreen]): Ditto.
                (-[DOMHTMLInputElement _replaceCharactersInRange:withString:selectingFromIndex:]): Ditto.
                (-[DOMHTMLInputElement _selectedRange]): Ditto.
                (-[DOMHTMLInputElement _setAutofilled:]): Ditto.
                (-[DOMHTMLSelectElement _activateItemAtIndex:]): Ditto.
                (-[DOMHTMLInputElement _isEdited]): Ditto.
                (-[DOMHTMLTextAreaElement _isEdited]): Ditto.
                (kitClass): Added. Gives HTMLOptionCollection objects an appropriate wrapper.

                * bindings/objc/DOMInternal.h: Removed most of the imports. There's no reason
                to have this header include all the other internal DOM headers. Removed unneeded
                interfaces, including the redeclaration of _init in DOMObject, since it's already
                inherited from WebScriptObject. Moved all the functions out of the WebCore
                namespace since this code is destined for WebKit, which doesn't use a namespace.
                Added kit and core functions for the two classes that live in this header.

                * bindings/objc/DOMInternal.mm:
                (-[WebScriptObject _initializeScriptDOMNodeImp]): Use core.

                * bindings/objc/DOMObject.h: Made the _internal field be private instead of
                protected. This also allows the "#define private public" trick to be used to
                make the field accessible inside the bindings code.

                * bindings/objc/DOMObject.mm:
                (-[DOMObject dealloc]): Updated for namespace change.
                (-[DOMObject sheet]): Use core and kit functions.

                * bindings/objc/DOMRGBColor.mm:
                (-[DOMRGBColor dealloc]): Updated for namespace change.
                (-[DOMRGBColor red]): Use kit function.
                (-[DOMRGBColor green]): Ditto.
                (-[DOMRGBColor blue]): Ditto.
                (-[DOMRGBColor alpha]): Ditto.
                (core): Added. Replaces the _RGBColor method.
                (kit): Added. Replaces the _wrapRGBColor method.

                * bindings/objc/DOMSVGPathSegInternal.mm:
                (kitClass): Added. Replaces the _wrapSVGPathSeg method.

                * bindings/objc/DOMUtility.mm:
                (JSC::createDOMWrapper): Use kit function.
                (createDOMWrapper): Ditto.

                * bindings/objc/DOMXPath.mm:
                (core): Added. Replaces the _xpathNSResolver method.
                (kit): Added. Replaces the _wrapXPathNSResolver method.

                * bindings/objc/ObjCEventListener.mm:
                (WebCore::ObjCEventListener::find): Changed to use early return.
                (WebCore::ObjCEventListener::handleEvent): Use kit function.

                * bindings/objc/ObjCNodeFilterCondition.mm:
                (WebCore::ObjCNodeFilterCondition::acceptNode): Use kit function.

                * bindings/objc/WebScriptObject.mm:
                (+[WebScriptObject scriptObjectForJSObject:originRootObject:rootObject:]):
                Updated for namespace change.

                * bindings/scripts/CodeGeneratorObjC.pm: Changed spelling of "license"
                to U.S. spelling. Removed GetObjCTypeMaker, GetObjCTypeGetterName,
                GetInternalTypeGetterSignature, and GetInternalTypeMakerSignature.
                Changed includes to conform to new scheme. Generate core and kit
                functions instead of methods and calls to those functions. Added a new
                attribute, Polymorphic, to indicate classes that have derived subclasses.
                Removed the old ObjCCustomInternalImpl attribute.

                * css/CSSRule.idl: Use Polymorphic attribute, so core and kit functions
                will be generated, with kit calling kitClass. This requires less hand-
                written code than the old ObjCCustomInternalImpl.
                * css/CSSValue.idl: Ditto.
                * css/StyleSheet.idl: Ditto.
                * dom/Event.idl: Ditto.
                * dom/Node.idl: Ditto.
                * html/HTMLCollection.idl: Ditto.
                * svg/SVGPathSeg.idl: Ditto.

                * editing/TextAffinity.h: Moved kit and core functions out of the
                WebCore namespace since this code is destined for WebKit, which
                doesn't use a namespace

                * platform/mac/ClipboardMac.mm:
                (WebCore::ClipboardMac::declareAndWriteDragImage): Use kit function.

                * platform/mac/DragDataMac.mm:
                (WebCore::DragData::asFragment): Use core function.

                * platform/mac/PasteboardMac.mm:
                (WebCore::Pasteboard::writeSelection): Use kit function.

                * svg/SVGElementInstance.idl: Removed now-unneeded ObjCCustomInternalImpl
                function. This can be generated in a standard way now.
                * svg/SVGViewSpec.idl: Ditto.

2009-04-17  David Carson  <dacarson@apple.com>

        Reviewed by David Kilzer, Richard Williamson

        <rdar://problem/6674885> Pasted image from Camera album is rotated

        Read the orientation from the image data and make it available to
        the drawing code. When drawing the image, orientate the image
        according to the EXIF orientation code.
        This patch is a copy of the patch attached to WebKit bug:
        https://bugs.webkit.org/show_bug.cgi?id=19688

        --- Submission Information ---
        - Risk level: Med
        - Risk details: Web sites could have mis-matched orientation
          data. Though, I could not find any such site.
        - Code reviewed by: David Kilzer, Richard Williamson
        - Testing details: Tested pasting images into mail that
          were taken with the iPhone camera. Tested photo sites
          flickr.com, picasaweb.google.com and MobileMe.

        * platform/graphics/BitmapImage.cpp:
        (WebCore::BitmapImage::cacheFrame):
        (WebCore::BitmapImage::frameOrientationAtIndex):
        * platform/graphics/BitmapImage.h:
        * platform/graphics/ImageSource.h:
        * platform/graphics/cg/ImageCG.cpp:
        (WebCore::BitmapImage::checkForSolidColor):
        * platform/graphics/cg/ImageSourceCG.cpp:
        (WebCore::ImageSource::frameSizeAtIndex):
        (WebCore::ImageSource::orientationAtIndex):

2009-04-17  Drew Wilson  <amw@apple.com>

        Reviewed by Debbie Goldsmith, Dan Berstein, and Brad Moore.

        iPhone support for CFStringTokenizer to support Thai, Japanese, and Chinese word boundaries.
        <rdar://problem/6712808> Double-click selects entire sentence for Japanese|Chinese|Thai
        Fix VisiblePosition.characterAfter to handle Unicode surrogate pairs.

        --- Submission Information ---
        - Risk level: medium
        - Risk details: new functionality is restricted to "complex" text, which is Thai, Japanese, and Chinese.
        - Code reviewed by: Dan Berstein, Debbie Goldsmith, Brad Moore
        - Testing details: passed existing Layout tests, tested with mixed Thai, English, Japanese, and Arabic text on device and simulator.

        * editing/VisiblePosition.cpp:
        (WebCore::VisiblePosition::characterAfter):
        * editing/VisiblePosition.h:
        (WebCore::VisiblePosition::characterBefore):
        * editing/visible_units.cpp:
        (WebCore::endOfFirstWordBoundaryContext):
        (WebCore::startOfLastWordBoundaryContext):
        (WebCore::previousBoundary):
        (WebCore::nextBoundary):
        (WebCore::startWordBoundary):
        (WebCore::endWordBoundary):
        (WebCore::previousWordPositionBoundary):
        (WebCore::nextWordPositionBoundary):
        * page/iphone/FrameIPhone.mm:
        (WebCore::Frame::moveSelectionToStartOrEndOfCurrentWord):
        * platform/text/TextBoundaries.h:
        (WebCore::requiresContextForWordBoundary):
        * platform/text/mac/TextBoundaries.mm:
        (WebCore::tokenizerForString):
        (WebCore::findSimpleWordBoundary):
        (WebCore::findComplexWordBoundary):
        (WebCore::findWordBoundary):

2009-04-17  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6756213> QLPreviewConverter resources not validated by safeRequestForRequest:

        Reviewed by David Carson.

        --- Submission Information ---
        - Risk level: Low
        - Risk details: Fixes a security issue where remote resources
          could be loaded by HTML documents that were disguised as MS
          Office documents in email attachments.  (Large-scale ERP/CRM
          software apparently disguises documents like this frequently.)
          MobileQuickLook now returns the HTML, but this bug fix is
          required to prevent external resources from being loaded,
          specifically JavaScript resources since JavaScript is enabled
          for all MobileQuickLook-converted documents.
        - Code reviewed by: David Carson.
        - Testing details: Stepped through debugger to make sure the
          -safeRequestForRequest: method was being called properly.
          Opened manual test case in MobileMail and MobileSafari to make
          sure the fix worked.  Ran layout tests.  Verified basic
          browsing was unaffected.

        * loader/loader.cpp:
        (WebCore::Loader::Host::servePendingRequests): Use the URL from
        the response object (which contains the MobileQuickLook URL if
        it was a converted document) when calling
        WebCore::safeQLURLForDocumentURLAndResourceURL().
        * platform/network/ResourceHandle.h:
        (WebCore::safeQLURLForURL): Removed.
        (WebCore::safeQLURLForDocumentURLAndResourceURL): Added.
        * platform/network/mac/ResourceHandleMac.mm:
        (WebCore::safeQLURLForURL): Renamed to
        safeQLURLForDocumentURLAndResourceURL().
        (WebCore::safeQLURLForDocumentURLAndResourceURL): Added another
        parameter to pass in the document's URL, which we use to look up
        the QLPreviewConverter in the dictionary.
        (-[WebCoreResourceHandleAsDelegate connection:didReceiveResponse:]):
        Removed redundant comment.

2009-04-17  Andre Boule  <aboule@apple.com>

        Reviewed by Dan Bernstein.
        <rdar://problem/6797126> iPhoneOS 3.0b3 - UILabel Font changes after a ':' in UILabel.text
        Horrible regression in font fallback
        --- Submission Information ---
        - Risk level: med-low
        - Risk details: Affects (or rather, fixes!) font fall back with potential rippling effects throughout the iPhone Font Universe
        - Code reviewed by: Dan Bernstein
        - Testing details: Test rendering Arabic which is directly relevant here, a bunch of different languages, the test cases attached to the bug

        * platform/graphics/FontFastPath.cpp:
        (WebCore::Font::glyphDataForCharacter):

2009-04-16  Justin Garcia  <justin.garcia@apple.com>

        <rdar://problem/6792793> Unwanted newline being added to new SMS/MMS messages when writing direction becomes RTL

        Merged http://trac.webkit.org/changeset/42600

        2009-04-16  Justin Garcia  <justin.garcia@apple.com>

            Reviewed by Dan Bernstein.

            Performing a block style change in an editable root that contains only a br adds a newline
            https://bugs.webkit.org/show_bug.cgi?id=25256

            * editing/CompositeEditCommand.cpp:
            (WebCore::CompositeEditCommand::moveParagraphContentsToNewBlockIfNecessary): Fix a bad check for an root
            block that didn't handle a root that contained a placeholder.

2009-04-16  David Carson  <dacarson@apple.com>

        Reviewed by Antii and Justin.

        <rdar://problem/6780524> Font of the title of a note switches several times while editing/reading notes

        Content being passed to WebKit has \r\n seperators.
        The method that takes the plain text and builds the DOM nodes:
            void Editor::setTextAsChildOfElement(const String& text, Element* elem, bool breakLines)
        expects only \n as block seperators. The \r remained in the content. As \r
        is not renderable, the behaviour is undefined. What appears to happen is
        all the text of the block is rendered in the fallback font.
        I believe that it is safe to convert the content from \r\n to \n and \r to \n
        as when a note is edited and new lines are added to it, and the plain text
        is retrieved from the note, new lines are always \n. So this conversion
        ensures that it does not contain a mixture of \r\n pairs and \n in the content.
        Also, if the content is not changed the Notes app does not update the note
        in it's storage, and thus it will remain the unchanged.

        * editing/Editor.cpp:
        (WebCore::Editor::setTextAsChildOfElement):

2009-04-16  Greg Bolsinga  <bolsinga@apple.com>

        Merged ToT WebKit r42592.

        <rdar://problem/6766969> Text does not display in JavaScript prompt textfield

        2009-04-16  Greg Bolsinga  <bolsinga@apple.com>

                Reviewed by Antti Koivisto.

                Fix <rdar://problem/6766969>

                When deferred repaints are enabled and being reset and there is a active
                timer, stop the timer and do the deferred repaints immediately.

                * page/FrameView.cpp:
                (WebCore::FrameView::resetDeferredRepaintDelay):

2009-04-16  Justin Garcia  <justin.garcia@apple.com>

        <rdar://problem/6734853> Caret at the beginning of right-aligned text field is mostly clipped out

        Merged http://trac.webkit.org/changeset/42585

        2009-04-16  Xiaomei Ji  <xji@chromium.org>

            Reviewed by Simon Fraser.

            Fix https://bugs.webkit.org/show_bug.cgi?id=24527
            caret does not paint the first time you focus on a 0px right padding RTL div

            Test: fast/forms/caret-rtl.html
            * rendering/RenderFlow.cpp:
            (WebCore::RenderFlow::localCaretRect): When computing the x coordinate of
            the caret rect for a right aligned block we need to subtract the width of
            the caret so that the caret is actually inside the block.

2009-04-16  Antti Koivisto  <antti@apple.com>

        Reviewed by Dave Kilzer.

        <rdar://problem/6574155> WebBrowser crashes if user attempts to interact with contents before load completes

        Ensure tile indexes can't underflow.

        * platform/iphone/TiledSurface.mm:
        (WebCore::TiledSurface::tileIndexForPoint):

2009-04-16  Justin Garcia  <justin.garcia@apple.com>

        <rdar://problem/6590646> REGRESSION: Caret is thinner than normal when at the beginning of a field

        Merge http://trac.webkit.org/changeset/42583 and change caret width for the phone.  We were accidently
        getting a caret of the right width because of this WebCore bug.  The caret width should be down in
        WebCore instead of inflating in UIKit because WebCore needs to know the width in more places than
        just painting.  Revealing a selection is one of those places.  This will let us get rid of the
        "adjust for purple caret" business down in WebCore.

        2009-04-16  Justin Garcia  <justin.garcia@apple.com>

            Reviewed by Simon Fraser.

            https://bugs.webkit.org/show_bug.cgi?id=25228
            SelectionController::absoluteCaretBounds returns an inflated caret (the caret repaint rect)

            Return the bounds of the transformed caret, not the transformed repaint rect for the caret (which is inflated).

            * editing/SelectionController.cpp:
            (WebCore::SelectionController::localCaretRect):
            (WebCore::SelectionController::absoluteBoundsForLocalRect):
            (WebCore::SelectionController::caretRepaintRect):
            (WebCore::SelectionController::recomputeCaretRect):
            * editing/SelectionController.h:

2009-04-15  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Ken Kocienda

        <rdar://problem/6795948> Copy and Paste needs to support CSS-transformed HTML content

        The collectSelectionRects() methods that were added to support iPhone selection
        were transform-unaware. This patch fixes RenderText::collectSelectionRects() to
        compute bounding boxes for transformed, selected text, and
        RenderContainer::collectSelectionRects() to compute quads, and then use their
        bounding boxes. With this patch, selection endpoints display correctly in rotated,
        scaled text, and can be moved around reasonably accurately.

        --- Submission Information ---
        - Risk level: Low
        - Risk details: Use transform-aware ways of computing bounding boxes for selection.
        Should have no impact on all non-transformed content.
        - Code reviewed by:
        - Testing details: Tested selection in nytimes.com and other popular web sites,
        and on transformed content, on simulator and device.

        * rendering/RenderContainer.cpp:
        (WebCore::RenderContainer::collectSelectionRects):
        * rendering/RenderText.cpp:
        (WebCore::RenderText::collectSelectionRects):

2009-04-15  Brad Moore  <bradm@apple.com>

        Reviewed by Justin Garcia.

		WebCore support for:

		<rdar://problem/6723926> Consider using font size (after scaling) to determine initial selection mode

		Get line heights from text nodes.

        --- Submission Information ---
        - Risk level: Low
        - Risk details: More frequently selecting a word rather than a block, per HI recommendation.
		I'm not convinced it's more usable, but it will be easy to revert or change the threshold
		later on with very little risk.
        - Code reviewed by: Drew Wilson and Justin Garcia
        - Testing details: Tested selection in nytimes.com and other popular web sites.

        * bindings/objc/DOMUIKitExtensions.h:
        * bindings/objc/DOMUIKitExtensions.mm:
        (-[DOMNode textHeight]):

2009-04-11  Brad Moore  <bradm@apple.com>

		Delaying content change notifications until the new composition text has been marked.

		<rdar://problem/6761075> setComposition send notification before markedText is updated

        --- Submission Information ---
        - Risk level: Low
        - Risk details: This change affects CJK input only.
        - Code reviewed by: Justin Garcia and George Dicker.
        - Testing details: Typed in all text widgets.  Verified they still
        behave correctly.

        * editing/Editor.cpp:
        (WebCore::Editor::setComposition):
        * loader/EmptyClients.h:
        (WebCore::EmptyEditorClient::startDelayingAndCoalescingContentChangeNotifications):
        (WebCore::EmptyEditorClient::stopDelayingAndCoalescingContentChangeNotifications):
        * page/EditorClient.h:

2009-04-15  Chris Fleizach  <cfleizach@apple.com>

        Reviewed by Greg Bolsinga.

        <rdar://problem/6794995> AX: AX hit testing doesn't work when there are frames

        Added AX support for frames. This involved added some AX methods onto WAKViews and
        recognizing when AXobjects were really attachments.

        * WebCore.xcodeproj/project.pbxproj:
        * page/AccessibilityObject.h:
        * page/iphone/AccessibilityObjectIPhone.mm: Added.
        (-[WAKView accessibilityIsIgnored]):
        (WebCore::AccessibilityObject::accessibilityIgnoreAttachment):
        * page/iphone/AccessibilityObjectWrapperIPhone.h:
        * page/iphone/AccessibilityObjectWrapperIPhone.mm:
        (AccessibilityUnignoredAncestor):
        (-[AccessibilityObjectWrapper accessibilityElementCount]):
        (-[AccessibilityObjectWrapper accessibilityElementAtIndex:]):
        (-[AccessibilityObjectWrapper indexOfAccessibilityElement:]):
        (-[AccessibilityObjectWrapper isAttachment]):
        (-[AccessibilityObjectWrapper attachmentView]):

2009-04-15  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6469642> @font-face rule with unicode range shows garbage on initial page load

        Reviewed by Andre Boule.

        --- Submission Information ---
        - Risk level: Low
        - Risk details: Fixed GlyphPage::fill() implemtation for iPhone.
          Removed duplicate code in favor of reusing Leopard code path.
        - Code reviewed by: Andre Boule
        - Testing details: Ran layout tests.  Verified basic browsing
          was unaffected.

        Tests: fast/css/font-face-implicit-local-font.html
               fast/css/font-face-locally-installed.html

        * platform/graphics/mac/GlyphPageTreeNodeMac.cpp:
        (WebCore::GlyphPage::fill): The iPhone-only code path was
        ignoring the offset and length parameters, which broke segmented
        fonts, e.g., CSS fonts which define a unicode-range for one font
        with a fallback font for other characters.

2009-04-15  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6469771> Fix -[WebFontCache getTraits:inFamily:]

        Reviewed by Andre Boule.

        --- Submission Information ---
        - Risk level: Low
        - Risk details: Fixed -getTraits:inFamily: to set traits
          properly for fonts.
        - Code reviewed by: Andre Boule
        - Testing details: Ran layout tests.  Verified basic browsing
          was unaffected.

        * platform/iphone/WebFontCacheIPhone.mm:
        (+[WebFontCache getTraits:inFamily:]): Set traits mask using
        GSFontGetTraitsForName().  Use a Vector<char, 256> to prevent
        allocating too much memory on the stack.  Return early if an
        array of zero length is returned.

2009-04-15  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by David Kilzer

        <rdar://problem/6796023> Phishing Vulnerability: Transforms on
        <iframe>s, and transformed content of iframes displays incorrectly

        Reinstate some code from old Eclair that sizes the root layer for frames
        and iframes according to the FrameView size, rather than the RenderView's
        document size. This prevents transformed content in subframes from spilling
        outside the frame.

        --- Submission Information ---
        - Risk level: Low
        - Risk details: Reinstate some code that was present in Timerbline
        - Code reviewed by: David Kilzer
        - Testing details: Tested various combinations of frames and iframes,
        and normal pages.

        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::updateRootLayerPosition):

2009-04-15  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Greg Bolsinga, Antti Koivisto

        <rdar://problem/6745974>

        When a WAKView is resized in the web thread, send out the
        WAKViewFrameSizeDidChangeNotification asynchronously. If we sent it synchronously,
        we have to release the web thread lock in order to proxy the notification to the
        main thread, and this can give the main thread a chance to run other code, like
        a CA commit. Committing at this point is bad, because the WAKView resize can happen
        just after layout, but before layers (and Eclair layers) have been resized, causing
        flashes of bad rendering.

        --- Submission Information ---
        - Risk level: Low
        - Risk details: Delay some notifications from the web thread to the main thread
        to avoid bad rendering.
        - Code reviewed by: Greg Bolsinga, Antti Koivisto
        - Testing details: Tested general browsering in the simulator and on the device,
        in MobileSafari, Web.app, and a UIWebView app, as well as content that uses
        Eclair layers.

        * wak/WAKView.mm:
        (notificationCallback):
        * wak/WebCoreThread.mm:
        (invocationForPostNotification):
        (WebThreadPostNotification):
        (WebThreadPostNotificationAsync):
        * wak/WebCoreThreadMessage.h:

2009-04-15  Justin Garcia  <justin.garcia@apple.com>

        <rdar://problem/6721169> Copy/pasted string doesn't connect ligature at boundary

        Merged http://trac.webkit.org/changeset/42549

        2009-04-15  Justin Garcia  <justin.garcia@apple.com>

            Reviewed by Dan Bernstein.

            https://bugs.webkit.org/show_bug.cgi?id=25204
            Create a fast path for ReplaceSelectionCommand that merges text nodes

            During simple pastes, where we're just pasting a text node into a run of text, we would split the current
            text and insert the new node in between.  This is slow and we hit this bug:

            https://bugs.webkit.org/show_bug.cgi?id=6148

            in the layout and rendering code where adjacent text nodes don't shape correctly in Arabic.

            This change creates a fast path for ReplaceSelectionCommand that inserts text directly into the
            text node that holds the selection (very similar to the fast path we wrote for InsertTextCommand).

            * editing/ReplaceSelectionCommand.cpp:
            (WebCore::ReplaceSelectionCommand::doApply):
            (WebCore::ReplaceSelectionCommand::performTrivialReplace):
            * editing/ReplaceSelectionCommand.h:

2009-04-14  Chris Fleizach  <cfleizach@apple.com>

        Reviewed by David Kilzer, Justin Garcia.

        <rdar://problem/6789180> Exception loading frameset page in MobileSafari with accessibility enabled

        The WebView needs to be able to return its UIKit delegate (the UIWebDocumentView). We cannot
        overload superview on WebView however to return this. It should instead rely on accessibilityContainer.

        * page/iphone/AccessibilityObjectWrapperIPhone.mm:
        (-[AccessibilityObjectWrapper _accessibilityWebDocumentView]):

2009-04-14  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Greg Bolsinga, Antti Koivisto

        <rdar://problem/6791199>

        Be sure to take the web thread lock in the Eclair tiled layer
        drawing callback. We have to lock here because CA calls the CATiledLayer
        drawInContext: on the main thread even when changes are made on the web
        thread, so the lock may not have been taken for the current run loop on
        the main thread yet.

        --- Submission Information ---
        - Risk level: Low
        - Risk details: Reinstate some code that was present in Timberline
        - Code reviewed by: Greg Bolsinga
        - Testing details: Tested content with Eclair tiled layers in the simulator
        and on the device.

        * platform/graphics/mac/WebTiledLayer.mm:
        (-[WebTiledLayer drawInContext:]):

2009-04-14  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6789884> "error: macro names must be identifiers" when running build script when building webcore

        Reviewed by Andre Boule's rubber-stamp.

        --- Submission Information ---
        - Risk level: Low
        - Risk details: This change only affected verification of the
          public DOM API provided by WebKit on Mac OS X.  We still run
          the verification step on iPhone WebKit when building, but
          since we don't provide a public API for WebKit, this didn't
          really affect anything.  It does fix hundreds of errors
          reported by Xcode when building WebCore in the build phase
          script that generates Objective-C DOM bindings.
        - Code reviewed by: Andre Boule's rubber stamp.
        - Testing details: Built WebCore.  Verified no warning messages
          were printed out.

        * bindings/scripts/CodeGeneratorObjC.pm: When generating a list
        of macros to define for the gcc command, split on / +/ instead
        of just / / so that we don't generate a list of command-line
        switches like "-DENABLE_FOO -D -DENABLE_BAR".  This was caused
        by r90411 because FEATURE_DEFINES may now contain more than one
        space between macros if one macro is disabled.

2009-04-14  Aaron Golden  <agolden@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/6185852> localStorage does not persist between sessions

        Adding a 5 MB per origin quota for local storage on the iPhone.

        * dom/DOMCoreException.idl:
        * dom/ExceptionCode.cpp:
        (WebCore::):
        * dom/ExceptionCode.h:
        (WebCore::):
        * storage/StorageArea.cpp:
        (WebCore::StorageArea::internalSetItem):
        * storage/StorageMap.cpp:
        (WebCore::StorageMap::StorageMap):
        (WebCore::StorageMap::copy):
        (WebCore::StorageMap::setItem):
        (WebCore::StorageMap::removeItem):
        (WebCore::StorageMap::importItem):
        * storage/StorageMap.h:
        (WebCore::StorageMap::totalUsage):

2009-04-14  Justin Garcia  <justin.garcia@apple.com>

        <rdar://problem/6777744> Extra (partial) layout on first keypress in text fields (problem in InsertTextCommand::input)

        Merged http://trac.webkit.org/changeset/42507

        2009-04-13  Justin Garcia  <justin.garcia@apple.com>

            Reviewed by Eric Seidel.

            https://bugs.webkit.org/show_bug.cgi?id=25172
            Extra partial layout during the first keypress in an empty block

            Determining if a placeholder needs to be removed requires the creation of a VisiblePosition
            which was triggering layout before we were finished modifying the DOM for the insert operation.

            Find out if we need to remove a placeholder near the start of the operation, and if we do remember
            where it's located.  Then, later, remove it along with all of the other DOM operations we perform.

            Renamed lineBreakExistsAtPosition to lineBreakExistsAtVisiblePosition and added a lineBreakExistsAtPosition
            that takes in a Position.  In InsertTextCommand, we can use the latter, since we normalize manually.

            removePlaceholderAt now takes in a Position that it assumes has already been checked for a placeholder.

            No test added as this only effects performance.

            * editing/BreakBlockquoteCommand.cpp:
            (WebCore::BreakBlockquoteCommand::doApply):
            * editing/CompositeEditCommand.cpp:
            (WebCore::CompositeEditCommand::removePlaceholderAt):
            (WebCore::CompositeEditCommand::moveParagraphs):
            (WebCore::CompositeEditCommand::breakOutOfEmptyMailBlockquotedParagraph):
            (WebCore::CompositeEditCommand::positionAvoidingSpecialElementBoundary):
            * editing/CompositeEditCommand.h:
            * editing/DeleteSelectionCommand.cpp:
            (WebCore::DeleteSelectionCommand::calculateTypingStyleAfterDelete):
            (WebCore::DeleteSelectionCommand::doApply):
            * editing/FormatBlockCommand.cpp:
            (WebCore::FormatBlockCommand::doApply):
            * editing/InsertLineBreakCommand.cpp:
            (WebCore::InsertLineBreakCommand::doApply):
            * editing/InsertParagraphSeparatorCommand.cpp:
            (WebCore::InsertParagraphSeparatorCommand::doApply):
            * editing/InsertTextCommand.cpp:
            (WebCore::InsertTextCommand::input):
            * editing/htmlediting.cpp:
            (WebCore::lineBreakExistsAtVisiblePosition):
            (WebCore::lineBreakExistsAtPosition):
            * editing/htmlediting.h:

2009-04-13  Ken Kocienda  <kocienda@apple.com>

        Fix for this bug:

        <rdar://problem/6781333> REGRESSION: Rect inappropriately extends to end-of line

        --- Submission Information ---
        - Risk level: Low
        - Risk details: Small modification to selection calculation code.
        - Code reviewed by: Brad Moore and Justin Garcia
        - Testing details: We have been building up a set of test cases
          through finding and fixing bugs of this type. I fixed the issue
          in this bug, and ensured that none of the other cases regressed.

        * dom/Range.cpp:
        (WebCore::Range::collectSelectionRects)

2009-04-13  Ken Kocienda  <kocienda@apple.com>

        Fix for these bugs:

        <rdar://problem/6753055> REGRESSION: Tap-and-a-half start word remains unstable.
        <rdar://problem/6772124> Selections which include blank lines are not stable during modification

        Added new functions for setting the "base" ranged selection that will
        be used to apply selection changes as the user drags the selection
        dot to change a selection. Using a selection, rather than a point as
        we did before, increases the stability of the updates.

        --- Submission Information ---
        - Risk level: low
        - Risk details: Changed the way we update ranged selections.
        - Code reviewed by: Brad Moore.
        - Testing details: Tested that dragging on the selection dot, double-tap-drag,
          and autoscrolling all work (and work better as a result of the change).

        * WebCore.iPhone.exp
        * page/Frame.h
        * page/iphone/FrameIPhone.mm
        (WebCore::Frame::setRangedSelectionBaseToCurrentSelection)
        (WebCore::Frame::setRangedSelectionBaseToCurrentSelectionStart)
        (WebCore::Frame::setRangedSelectionBaseToCurrentSelectionEnd)
        (WebCore::Frame::rangedSelectionBase)

2009-04-13  Antti Koivisto  <antti@apple.com>

        Merged ToT WebKit r42457.

        2009-04-13  Antti Koivisto  <antti@apple.com>

            Reviewed by Darin Adler.

            <rdar://problem/6740294> Increase the connection count per host

            Try to use six connections per host if possible.

        * WebCore.base.exp:
        * loader/loader.cpp:
        (WebCore::Loader::Loader):
        * platform/mac/WebCoreSystemInterface.h:
        * platform/mac/WebCoreSystemInterface.mm:
        * platform/network/ResourceRequestBase.cpp:
        (WebCore::initializeMaximumHTTPConnectionCountPerHost):
        * platform/network/ResourceRequestBase.h:
        * platform/network/mac/ResourceRequestMac.mm:
        (WebCore::initializeMaximumHTTPConnectionCountPerHost):

2009-04-13  Justin Garcia  <justin.garcia@apple.com>

        <rdar://problem/6748324> REGRESSION (Kirkwood): Can't type in Netflix search field

        Merging http://trac.webkit.org/changeset/42456

        2009-04-13  Justin Garcia  <justin.garcia@apple.com>

            Reviewed by Adele Peterson.

            https://bugs.webkit.org/show_bug.cgi?id=25153
            Can't place the caret into text field that scrolls the window on focus

            We refetch the target node in the shadow node case, and when we do so the window coordinate for the mouse event may
            be invalid because of scrolling that the focus handler did.  Cache the document point (that we derived from the window
            coordinate) and use that any time we refetch.

            * page/EventHandler.cpp:
            (WebCore::documentPointForWindowPoint):
            (WebCore::EventHandler::handleMousePressEvent):
            (WebCore::EventHandler::prepareMouseEvent):

2009-04-13  Greg Bolsinga  <bolsinga@apple.com>

    <rdar://problem/6672275> timeout expires while "Safari wants to use your location" dialog is up

    Merged ToT WebKit r42445.

        --- Submission Information ---
        - Risk level: Low
        - Risk details: none.
        - Code reviewed by: Sam Weinig.
        - Testing details: Timers now start at a logical point in time.

    2009-04-13  Greg Bolsinga  <bolsinga@apple.com>

            Reviewed by Sam Weinig.

            https://bugs.webkit.org/show_bug.cgi?id=25149

            The Geolocation timer needs to start after the UA has granted permission.

            * bindings/js/JSGeolocationCustom.cpp: Use PassRefPtr<PositionOptions>
            (WebCore::JSGeolocation::getCurrentPosition):
            (WebCore::JSGeolocation::watchPosition):
            * page/Geolocation.cpp: Add a RefPtr<PositionOptions> so it can be used
            later when the timer is started. Change PositionOptions* to PassRefPtr<PositionOptions>
            where needed.
            (WebCore::Geolocation::GeoNotifier::GeoNotifier):
            (WebCore::Geolocation::GeoNotifier::startTimer):
            (WebCore::Geolocation::getCurrentPosition):
            (WebCore::Geolocation::watchPosition):
            (WebCore::Geolocation::setIsAllowed): Start the timer is the UA allows
            (WebCore::Geolocation::startTimer):
            (WebCore::Geolocation::startTimersForOneShots):
            (WebCore::Geolocation::startTimersForWatchers):
            (WebCore::Geolocation::startTimers):
            * page/Geolocation.h:
            (WebCore::Geolocation::GeoNotifier::create):

2009-04-13  Greg Bolsinga  <bolsinga@apple.com>

    <rdar://problem/6713745> geolocation: simulator returns -1 instead of null

    Merged ToT WebKit r42437.

        --- Submission Information ---
        - Risk level: Low
        - Risk details: none.
        - Code reviewed by: Darin Adler.
        - Testing details: Ran test case and verified that Coordinates properties that cannot be obtained are null.

    2009-04-13  Greg Bolsinga  <bolsinga@apple.com>

            Reviewed by Darin Adler.

            https://bugs.webkit.org/show_bug.cgi?id=24770

            Add custom code for Coordinates that returns null when required by the
            Geolocation spec.

            http://dev.w3.org/geo/api/spec-source.html#coordinates

            * WebCore.xcodeproj/project.pbxproj:
            * bindings/js/JSCoordinatesCustom.cpp: Added.
            (WebCore::JSCoordinates::altitude): returns null if the value cannot be provided.
            (WebCore::JSCoordinates::altitudeAccuracy): Ditto
            (WebCore::JSCoordinates::heading): Ditto
            (WebCore::JSCoordinates::speed): Ditto
            * page/Coordinates.h:
            (WebCore::Coordinates::create): Add 'canProvide' parameters and values
            (WebCore::Coordinates::canProvideAltitude):
            (WebCore::Coordinates::canProvideAltitudeAccuracy):
            (WebCore::Coordinates::canProvideHeading):
            (WebCore::Coordinates::canProvideSpeed):
            (WebCore::Coordinates::Coordinates):
            * page/Coordinates.idl: specify custom getters
            * platform/mac/GeolocationServiceMac.mm: Set the values correctly if they cannot be provided.
            (-[WebCoreCoreLocationObserver locationManager:didUpdateToLocation:fromLocation:]):

2009-04-12  Drew Wilson  <amw@apple.com>

        Reviewed by Ken, Brad, and Justin.

        <rdar://problem/6660412> REGRESSION: The caret was in the middle of the password dot while I was typing

        message editor when secureLastCharacter timer fires.

        --- Submission Information ---
        - Risk level: low
        - Risk details: fixes display issue only applicable to password fields
        - Code reviewed by: Ken, Brad, and Justin.
        - Testing details: Ran in simulator w/ several languages and keyboards.

        * rendering/RenderText.cpp:
        (WebCore::RenderText::secureLastCharacter):

2009-04-12  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6756213> QLPreviewConverter resources not validated by safeRequestForRequest:

        Reviewed by Greg Bolsinga.

        --- Submission Information ---
        - Risk level: Low
        - Risk details: For documents converted by MobileQuickLook,
          subresource URLs are replaced by QL URLs so that remote
          resources can not be loaded.
        - Code reviewed by: Greg Bolsinga.
        - Testing details: Ran layout tests.  Verified attachments with
          local resources were displayed in MobileMail and MobileSafari.
          Verified attachments with remote resources were NOT displayed.
          Verified basic browsing was unaffected.

        The -[QLPreviewConverter safeRequestForRequest:] method was not
        being called because the WebCoreResourceHandleAsDelegate object
        only lived as long as the main request.  Instead we move the
        check to WebCore::Loader::Host::servePendingRequests() using a
        new helper function named WebCore::safeQLURLForURL().

        * loader/loader.cpp:
        (WebCore::Loader::Host::servePendingRequests): Added iPhone-only
        call to safeQLURLForURL() when creating the ResourceRequest.
        * platform/network/ResourceHandle.h:
        (WebCore::safeQLURLForURL): Added declaration.
        * platform/network/mac/ResourceHandleMac.mm:
        (WebCore::safeQLURLForURL): Added.  Returns a new subresource
        URL if the main document was originally converted by
        MobileQuickLook.
        (-[WebCoreResourceHandleAsDelegate connection:willSendRequest:redirectResponse:]):
        Removed unused call to -[QLPreviewConverter safeRequestForRequest:].

2009-04-10  Justin Garcia  <justin.garcia@apple.com>

        <rdar://problem/6781957> Pasting content in an empty paragraph can put it on the wrong line

        * editing/ReplaceSelectionCommand.cpp:
        (WebCore::ReplaceSelectionCommand::doApply): Displacing the start block is another instance where inserted
        content may end up in the previous paragraph, handle it the way we handle insertion before the start block.

2009-04-10  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6599907> iPhone: ZDI-CAN-430: Apple WebKit dir Attribute Freeing Dangling Object Pointer Vulnerability

        Merged ToT WebKit r40881.

        --- Submission Information ---
        - Risk level: Low
        - Risk details: Devirtualizes methods on RenderBox.
        - Code reviewed by: Simon Fraser.  Patch by David Hyatt.
        - Testing details: Ran layout tests.  Verified PoC test case
          does not crash.  Verified basic browsing was unaffected.

    2009-02-11  David Hyatt  <hyatt@apple.com>

        Remove all of the inline box wrapper functions from RenderObject, since they only apply to RenderBox.  Devirtua
        Patch all of the call sites to convert to a RenderBox.

        Reviewed by Simon Fraser

        * dom/Position.cpp:
        (WebCore::nextRenderedEditable):
        (WebCore::previousRenderedEditable):
        (WebCore::Position::getInlineBoxAndOffset):
        * rendering/InlineBox.cpp:
        (WebCore::InlineBox::deleteLine):
        (WebCore::InlineBox::extractLine):
        (WebCore::InlineBox::attachLine):
        * rendering/RenderLineBoxList.cpp:
        (WebCore::RenderLineBoxList::dirtyLinesFromChangedChild):
        * rendering/RenderObject.cpp:
        * rendering/RenderObject.h:
        * rendering/RenderObjectChildList.cpp:
        (WebCore::RenderObjectChildList::removeChildNode):
        * rendering/RenderTextControl.cpp:
        (WebCore::RenderTextControl::textWithHardLineBreaks):

2009-04-10  Antti Koivisto  <antti@apple.com>

        Reviewed by Greg Bolsinga.

        <rdar://problem/6723838> Ugly flicker when scrolling in Kiwi

        Use same keepRect in layoutTilesNow as in doLayoutTiles so we don't
        end up with unlimited amount of tiles if tiling is done excusively
        with layoutTilesNow.

        --- Submission Information ---
        - Risk level: medium
        - Risk details: Change UIWebView tiling behavior (though just to match Timberline)
        - Code reviewed by: Greg Bolsinga.
        - Testing details: some 3rd party apps, legal view in preferences,  general browsing in safari.

        * platform/iphone/TiledSurface.mm:
        (WebCore::TiledSurface::calculateCoverAndKeepRectForMemoryLevel):
        (WebCore::TiledSurface::doLayoutTiles):
        (WebCore::TiledSurface::layoutTilesNow):

2009-04-10  Simon Fraser  <simon.fraser@apple.com>

        Merged ToT WebKit r42415

        --- Submission Information ---
        - Risk level: low
        - Risk details: fix an issue that caused animation-delay to not work
        on reload.
        - Code reviewed by: Patch by Chris Marrin, reviewed by Simon Fraser
        - Testing details: ran animation testcases on phone and sim

    2009-04-10  Chris Marrin  <cmarrin@apple.com>

            Reviewed by Simon Fraser.

            Fixed https://bugs.webkit.org/show_bug.cgi?id=25137

            If we reload, the animation controller sticks around and has
            a stale animation time. So the needed delay is computed wrong.
            I added a reset of the animation timer on load.

            I did not do a test case because this only happens on reload so I
            couldn't make an automated test. I tried using an iframe and using
            reload() but that doesn't tickle the bug.

            * dom/Document.cpp:
            (WebCore::Document::implicitOpen):

2009-04-10  Simon Fraser  <simon.fraser@apple.com>

        Merged ToT WebKit r42410, fixing timer issue with demo.webapp-net.com

        --- Submission Information ---
        - Risk level: low
        - Risk details: fix an issue that could cause the animation timer
        to keep firing after animations had finished.
        - Code reviewed by: Dan Bernstein
        - Testing details: ran animation testcases on phone and sim

    2009-04-10  Chris Marrin  <cmarrin@apple.com>

            Reviewed by Dan Bernstein

            https://bugs.webkit.org/show_bug.cgi?id=25108

            If you remove a class with a transition while that transition is running
            the animation timer will continue to fire after the transition is finished.
            This has no visual indication, but it does drain the processor. And in some
            cases it might even cause a glitch in future animations. Unfortunately there
            is no way to test this without putting in printfs.

            This happens because the animation logic is never traversed after a transition
            is removed, so we never get a chance to cleanup. So I added cleanup in the logic
            that fires the dispatch of the last style change when the animation finishes.

            Test: transitions/remove-transition-style.html

            * page/animation/AnimationController.cpp:
            (WebCore::AnimationControllerPrivate::updateStyleIfNeededDispatcherFired):
            * page/animation/CompositeAnimation.cpp:
            (WebCore::CompositeAnimation::updateTransitions):
            (WebCore::CompositeAnimation::animate):
            (WebCore::CompositeAnimation::cleanupFinishedAnimations):
            * page/animation/CompositeAnimation.h:

2009-04-10  Simon Fraser  <simon.fraser@apple.com>

        Merged ToT WebKit r42406, fixing <rdar://problem/6779573>

        --- Submission Information ---
        - Risk level: low
        - Risk details: fix animations under suspend/resume while scrolling,
        and going into and out of tabs.
        - Code reviewed by: Patch by Chris Marrin, reviewed by Simon Fraser
        - Testing details: ran animation testcases on phone and sim

    2009-04-10  Chris Marrin  <cmarrin@apple.com>

            Reviewed by Simon Fraser.

            Fixed https://bugs.webkit.org/show_bug.cgi?id=25134

            This both fixes a bug where I was not sending in the right time
            to continue the animation and was not recomputing current time
            when coming out of suspend.

            * page/animation/AnimationBase.cpp:
            (WebCore::AnimationBase::updateStateMachine):
            * page/animation/AnimationController.cpp:
            (WebCore::AnimationControllerPrivate::suspendAnimations):
            (WebCore::AnimationControllerPrivate::resumeAnimations):

2009-04-10  Simon Fraser  <simon.fraser@apple.com>

        Merged ToT WebKit r42360.

        --- Submission Information ---
        - Risk level: low
        - Risk details: merge some method renaming, and unnecessary layering
        code from WebKit TOT.
        - Code reviewed by: Darin Adler
        - Testing details: ran animation testcases on phone and sim

    2009-04-09  Simon Fraser  <simon.fraser@apple.com>

            Reviewed by Darin Adler

            https://bugs.webkit.org/show_bug.cgi?id=25109

            Eliminate CompositeAnimationPrivate, which was a needless level
            of abstraction. Remove the methods like addToStyleAvailableWaitList()
            that simply turn around and call the animation controller.

            Rename animationControllerPriv() to animationController().
            Rename willNeedService() to timeToNextService().

            * page/animation/AnimationBase.cpp:
            (WebCore::AnimationBase::~AnimationBase):
            (WebCore::AnimationBase::updateStateMachine):
            (WebCore::AnimationBase::timeToNextService):
            (WebCore::AnimationBase::beginAnimationUpdateTime):
            * page/animation/AnimationBase.h:
            * page/animation/AnimationController.cpp:
            (WebCore::AnimationControllerPrivate::updateAnimationTimer):
            * page/animation/CompositeAnimation.cpp:
            (WebCore::CompositeAnimation::~CompositeAnimation):
            (WebCore::CompositeAnimation::clearRenderer):
            (WebCore::CompositeAnimation::updateTransitions):
            (WebCore::CompositeAnimation::updateKeyframeAnimations):
            (WebCore::CompositeAnimation::animate):
            (WebCore::CompositeAnimation::getAnimatedStyle):
            (WebCore::CompositeAnimation::setAnimating):
            (WebCore::CompositeAnimation::timeToNextService):
            (WebCore::CompositeAnimation::getAnimationForProperty):
            (WebCore::CompositeAnimation::cleanupFinishedAnimations):
            (WebCore::CompositeAnimation::suspendAnimations):
            (WebCore::CompositeAnimation::resumeAnimations):
            (WebCore::CompositeAnimation::overrideImplicitAnimations):
            (WebCore::CompositeAnimation::resumeOverriddenImplicitAnimations):
            (WebCore::CompositeAnimation::isAnimatingProperty):
            (WebCore::CompositeAnimation::pauseAnimationAtTime):
            (WebCore::CompositeAnimation::pauseTransitionAtTime):
            (WebCore::CompositeAnimation::numberOfActiveAnimations):
            * page/animation/CompositeAnimation.h:
            (WebCore::CompositeAnimation::animationController):
            (WebCore::CompositeAnimation::isSuspended):
            (WebCore::CompositeAnimation::hasAnimations):
            (WebCore::CompositeAnimation::CompositeAnimation):
            * page/animation/ImplicitAnimation.cpp:
            (WebCore::ImplicitAnimation::sendTransitionEvent):
            (WebCore::ImplicitAnimation::timeToNextService):
            * page/animation/ImplicitAnimation.h:
            * page/animation/KeyframeAnimation.cpp:
            (WebCore::KeyframeAnimation::sendAnimationEvent):
            (WebCore::KeyframeAnimation::timeToNextService):
            * page/animation/KeyframeAnimation.h:

2009-04-10  Simon Fraser  <simon.fraser@apple.com>

        Merged ToT WebKit r42346.

        --- Submission Information ---
        - Risk level: low
        - Risk details: fix method signature to ensure that overrides get called.
        Fixes some CSS animation issues.
        - Code reviewed by: Cameron Zwarich
        - Testing details: ran animation testcases on phone and sim

    2009-04-08  Simon Fraser  <simon.fraser@apple.com>

            Reviewed by Cameron Zwarich

            https://bugs.webkit.org/show_bug.cgi?id=25106

            Fix signature of virtual function on AnimationBase so that it matches
            those in the derived classes, by removing unused parameter.

            * page/animation/AnimationBase.h:
            (WebCore::AnimationBase::endAnimation):

2009-04-10  Justin Garcia  <justin.garcia@apple.com>

        Reviewed by Ken Kocienda.

        <rdar://problem/6776450> Implement smart delete

        --- Submission Information ---
        - Risk level: low
        - Risk details: just exposing a function
        - Code reviewed by: Ken Kocienda.
        - Testing details: tested editing in form fields, notes, mail, and safari.

        * WebCore.base.exp: Export Frame::setSelectionGranularity.

2009-04-10  Ken Kocienda  <kocienda@apple.com>

        Fix for these bugs:

        <rdar://problem/6778007> REGR: Can't adjust end of selection and end lollipop is way to long
        <rdar://problem/6778027> REGR: Selection end goes too far and selection tint includes way too much in web form fields

        These bugs are recent regressions caused by a change to the way that selection
        range are traversed while build selection rectangles. It turns out that we
        need a yet one more check in the rules to determine when to stop the iteration
        over document content.

        --- Submission Information ---
        - Risk level: low
        - Risk details: The worst thing that could happen are glitches with making selections.
        - Code reviewed by: Justin Garcia and Brad Moore
        - Testing details: Tested against the four relevant bugs. The two fixed here, and the
          two whose fix caused these regressions.

        * dom/Range.cpp:
        (WebCore::Range::collectSelectionRects)

2009-04-09  Brad Moore  <bradm@apple.com>

		Making sure we're using range-compatible visible positions.  rangeOfContainingParagraph is
		used more heavily in pending changes to:

		<rdar://problem/6716996> Some html text blocks in Safari can only be selected in their entirety

		and we sometimes hit invalid cases without this fix.

        --- Submission Information ---
        - Risk level: Low
        - Risk details: Fixes potential for invalid ranged selection by.
        - Code reviewed by: Justin Garcia.
        - Testing details: Selected while browsing across known problematic sites.

        * bindings/objc/DOMUIKitExtensions.mm:
        (-[DOMNode rangeOfContainingParagraph]):

2009-04-09  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6762863> MERGE: JavaScript SVG Introspection Crashes Webkit

        Merged ToT WebKit r42374.

        --- Submission Information ---
        - Risk level: Low
        - Risk details: Adds null check and early return.
        - Code reviewed by: Simon Fraser.  Patch by Eric Seidel.
        - Testing details: Ran layout tests, including new test for
          this fix.  Verified basic browsing was unaffected.

    2009-04-09  Eric Seidel  <eric@webkit.org>

        Reviewed by Simon Fraser.

        Crash when accessing svg.viewport on a detached SVGSVGElement
        https://bugs.webkit.org/show_bug.cgi?id=25105

        * svg/SVGSVGElement.cpp:
        (WebCore::SVGSVGElement::isOutermostSVG): return "true" that we are the "outermost" SVG element if we have no parent.  (The spec is unclear as to what behavior we should have in this case, and I doubt anyone cares for now).

2009-04-09  Ken Kocienda  <kocienda@apple.com>

        Fix for this bug:

        This isn't perfect. During testing, I discovered some situations
        where nested divs still result in overpainting on the first and
        last lines. I tried to come up with something simple to make
        that go away, but I couldn't. The line-oriented method I'm using
        is not sufficiently powerful for more complex web content. I
        have opened another bug to make more improvements for Apex.

        --- Submission Information ---
        - Risk level: low
        - Risk details: This change affects selection painting. The worst
          thing that could happen are visual glitches.
        - Code reviewed by: Justin Garcia
        - Testing details: See above

        * dom/Range.cpp:
        (WebCore::Range::collectSelectionRects)

2009-04-09  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6015955> MERGE: iPhone: Cross-site scripting possible with a combination of onunload and alert

        Merged ToT WebKit r42365.

        --- Submission Information ---
        - Risk level: Low
        - Risk details: Adds internal check for when onunload events are
          being dispatched, and prevents stopping of the new load inside
          the unload event.
        - Code reviewed by: Geoffrey "Big Boy" Garen.  Patch by Sam Weinig.
        - Testing details: Ran layout tests, including new tests for
          this fix.  Verified basic browsing was unaffected.

    2009-04-08  Sam Weinig  <sam@webkit.org>

        Reviewed by Geoffrey "Big Boy" Garen.

        Fix for <rdar://problem/5745677> Possible to stop load during an unload event
        Also fixes https://bugs.webkit.org/show_bug.cgi?id=20605

        Tests: fast/events/stop-load-in-unload-handler-using-document-write.html
               fast/events/stop-load-in-unload-handler-using-window-stop.html

        Don't allow calling methods that would stop the new load inside the unload
        event.

        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::FrameLoader):
        (WebCore::FrameLoader::stopLoading):
        (WebCore::FrameLoader::stopAllLoaders):
        * loader/FrameLoader.h:

2009-04-09  Simon Fraser  <simon.fraser@apple.com>

        Merged ToT WebKit r42371.

        --- Submission Information ---
        - Risk level: Low
        - Risk details: flush out deferred repaints before drawing.
        - Code reviewed by: Antti Koivisto.
        - Testing details: Tested Eclair samples, which showed flashing because
        of the bug, on device and sim, with good results.

    2009-04-09  Simon Fraser  <simon.fraser@apple.com>

            Reviewed by Antti Koivisto

            https://bugs.webkit.org/show_bug.cgi?id=25122

            If deferred repainting is active, we need to ensure that there are no repaints
            pending at the end of layoutIfNeededRecursive, which is called just before
            painting via -viewWillDraw.

            * page/FrameView.cpp:
            (WebCore::FrameView::layoutIfNeededRecursive):

2009-04-09  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6595864> MERGE: iPhone: address "clickjacking"

        Merged ToT WebKit r42333.

        --- Submission Information ---
        - Risk level: Low
        - Risk details: Recognizes new x-frame-options HTTP header to
          help prevent "clickjacking" scenarios.  Changes resource
          loader behavior since it may stop the loading of a resource as
          soon as a security issue is detected.
        - Code reviewed by: Anders Carlsson.  Patch by Sam Weinig.
        - Testing details: Ran layout tests, including new tests for
          this fix.  Verified basic browsing was unaffected.

    2009-04-08  Sam Weinig  <sam@webkit.org>

        Reviewed by Anders Carlsson.

        Fix for <rdar://problem/6226200> Implement Microsoft's X-FRAME-OPTIONS anti-framing defense

        Tests: http/tests/security/XFrameOptions/x-frame-options-deny-meta-tag-in-body.html
               http/tests/security/XFrameOptions/x-frame-options-deny-meta-tag-parent-same-origin-allow.html
               http/tests/security/XFrameOptions/x-frame-options-deny-meta-tag-parent-same-origin-deny.html
               http/tests/security/XFrameOptions/x-frame-options-deny-meta-tag.html
               http/tests/security/XFrameOptions/x-frame-options-deny.html
               http/tests/security/XFrameOptions/x-frame-options-parent-same-origin-allow.html
               http/tests/security/XFrameOptions/x-frame-options-parent-same-origin-deny.html

        * dom/Document.cpp:
        (WebCore::Document::processHttpEquiv): Stop the current load and redirect to about:blank
        if an X-FRAME-OPTIONS <meta> tag http-equiq dictates we should.
        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::shouldInterruptLoadForXFrameOptions): Add logic to parse
        the X-FRAME-OPTIONS parameter.
        * loader/FrameLoader.h:
        * loader/MainResourceLoader.cpp:
        (WebCore::MainResourceLoader::didReceiveResponse): Stop the current load if framed and
        a X-FRAME-OPTIONS header and its parameter dictate that we should.

2009-04-08  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6718589> Turn off SVG DOM Objective-C bindings in WebCore and WebKit

        Merged ToT WebKit r42345.

        --- Submission Information ---
        - Risk level: Medium
        - Risk details: Disabling a feature that has been present since
          BigBear (iPhone OS 2.0).
        - Code reviewed by: Darin Adler and Maciej Stachowiak.
        - Testing details: Built Development, Deployment,
          Development_Hardware and Deployment_Hardware configurations of
          JavaScriptCore, WebCore and WebKit.  Verified basic browsing
          was unaffected.

        * bindings/objc/DOMPrivate.h: Switched from using ENABLE(SVG) to
        using ENABLE(SVG_DOM_OBJC_BINDINGS).
        * bindings/objc/DOMUIKitExtensions.mm: Ditto.
        (-[DOMNode boundingBoxes]):
        (-[DOMNode absoluteQuads]):

    2009-04-08  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6718589> Option to turn off SVG DOM Objective-C bindings

        Reviewed by Darin Adler and Maciej Stachowiak.

        Introduce the ENABLE_SVG_DOM_OBJC_BINDINGS feature define so
        that SVG DOM Objective-C bindings may be optionally disabled.

        * Configurations/WebCore.xcconfig: Added
        ENABLE_SVG_DOM_OBJC_BINDINGS variable and use it in
        FEATURE_DEFINES and EXCLUDED_SOURCE_FILE_NAMES.  When SVG DOM
        Objective-C bindings are disabled, two generated header files no
        longer exist and none of the generated DOMSVG*.mm files should
        be compiled.
        * DerivedSources.make: All of the WebCore.SVG*.exp files contain
        SVG DOM Objective-C bindings classes, so exclude them unless
        ENABLE_SVG_DOM_OBJC_BINDINGS is set.
        * bindings/objc/DOM.mm: Switched from using ENABLE(SVG) to using
        ENABLE(SVG_DOM_OBJC_BINDINGS).
        (WebCore::createElementClassMap):
        (+[DOMNode _wrapNode:WebCore::]):
        * bindings/objc/DOMCSS.mm: Ditto.
        (+[DOMCSSValue _wrapCSSValue:WebCore::]):
        * bindings/objc/DOMEvents.mm: Ditto.
        (+[DOMEvent _wrapEvent:WebCore::]):
        * bindings/objc/DOMInternal.h: Ditto.
        * bindings/objc/ExceptionHandlers.mm: Added use of
        ENABLE(SVG_DOM_OBJC_BINDINGS).
        (WebCore::raiseDOMException):
        * html/HTMLEmbedElement.idl: Excluded -getSVGDocument method
        in generated Objective-C DOM classes if SVG DOM Objective-C
        bindings are disabled.
        * html/HTMLFrameElement.idl: Ditto.
        * html/HTMLIFrameElement.idl: Ditto.
        * html/HTMLObjectElement.idl: Ditto.

2009-04-08  Simon Fraser  <simon.fraser@apple.com>

        Rubber stamped Dave Kilzer

        Merge r41983 from WebKit TOT

        --- Submission Information ---
        - Risk level: low
        - Risk details: fixing some Coverty-discovered issues that have had
        testing on WebKit TOT for several weks.
        - Code reviewed by: me, patch by Eric Seidel
        - Testing details: tested CSS animations/transitions in the simulator.

    2009-03-24  Eric Seidel  <eric@webkit.org>

            Reviewed by Simon Fraser.

            Coverty inspired fixes in Animations/Transforms
            https://bugs.webkit.org/show_bug.cgi?id=24684

            * page/animation/AnimationBase.h:
              Fix animate() signatures to match so that the virtual methods actually override one another. :)
            * page/animation/AnimationController.cpp:
            (WebCore::AnimationControllerPrivate::removeFromStartTimeResponseWaitList):
              Attempt to fix this method, prevAnimation was never set to anything but NULL,
              as far as I can tell the author originally intended to update it at the end
              of the loop, which is what I changed this code to do.
            * page/animation/ImplicitAnimation.cpp:
            (WebCore::ImplicitAnimation::animate):
              Make method signature match AnimationBase::animate
            * page/animation/ImplicitAnimation.h:
            * page/animation/KeyframeAnimation.cpp:
            (WebCore::KeyframeAnimation::animate):
              Make method signature match AnimationBase::animate
            * page/animation/KeyframeAnimation.h:
            * platform/graphics/transforms/PerspectiveTransformOperation.cpp:
            (WebCore::PerspectiveTransformOperation::blend):
              if (blendToIdentity) already returned above.
            * platform/graphics/transforms/RotateTransformOperation.cpp:
            (WebCore::RotateTransformOperation::blend):
              if (blendToIdentity) already returned above.

2009-04-08  Justin Garcia  <justin.garcia@apple.com>

        <rdar://problem/6650032> Thai: Keyboard extremely slow after typing a paragraph

        Merged http://trac.webkit.org/changeset/42341

        2009-04-08  Dan Bernstein  <mitz@apple.com>

            Reviewed by Dave Hyatt.

            - fix <rdar://problem/6771547> Appending to a RenderText causes all its
              lines to be dirtied

            Test: fast/repaint/text-append-dirty-lines.html

            * rendering/RenderText.cpp:
            (WebCore::RenderText::setTextWithOffset): If no text boxes intersected
            with or came after the new text, dirty the last root box, since the new
            text may begin there. Having at least one dirty line prevents the
            incorrect dirtying of all lines later during layoutInlineChildren().

2009-04-08  Chris Fleizach  <cfleizach@apple.com>

        <rdar://problem/6771795> AX: radio buttons not read correctly by VO
        Radio buttons should be treated like checkboxes, in that they have on/off states.

        Reviewed by Greg Bolsinga.

        * page/iphone/AccessibilityObjectWrapperIPhone.mm:
        (-[AccessibilityObjectWrapper accessibilityTraits]):
        (-[AccessibilityObjectWrapper accessibilityValue]):

2009-04-08  Brad Moore  <bradm@apple.com>

		Reviewed by Scott Goodson.

		WebCore extension to get a paragraph from text DOMNode.  This facilitates:

		<rdar://problem/6772488> Support sub-element selection blocks

        * bindings/objc/DOMUIKitExtensions.h:
        * bindings/objc/DOMUIKitExtensions.mm:
        (-[DOMNode rangeOfContainingParagraph]):

2009-04-08  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6771164> MERGE: Fix for glaring LocalStorage problems

        Merged ToT WebKit r42277.

        --- Submission Information ---
        - Risk level: Low
        - Risk details: Fixes obvious localStorage implementation bugs.
        - Code reviewed by: Darin Adler.  Patch written by Brady Eidson.
        - Testing details: Ran layout tests.

    2009-04-07  Brady Eidson  <beidson@apple.com>

        Reviewed by Darin Adler

        While working on <rdar://problem/5968249>, noticed some glaring problems with LocalStorage.

        * page/DOMWindow.cpp:
        (WebCore::DOMWindow::localStorage): Return the cached m_localStorage object if it exists to
          avoid creating multiple representations for the same underlying StorageArea.
        * page/DOMWindow.h:
        (WebCore::DOMWindow::optionalLocalStorage): Return m_localStorage, not m_sessionStorage.

2009-04-08  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6770772> MERGE: Bug 24656: cacheControlContainsNoCache() in ResourceResponseBase.h is wrong

        Merged ToT WebKit r42319.

        --- Submission Information ---
        - Risk level: Low
        - Risk details: Fixes resource caching behavior in WebCore.
        - Code reviewed by: David Kilzer.  Patch written by Alexey Proskuryakov.
        - Testing details: Ran layout tests.  Verified general browsing is unaffected.

    2009-04-08  Alexey Proskuryakov  <ap@webkit.org>

        Reviewed by David Kilzer. Based on a patch by Grace Kloba.

        https://bugs.webkit.org/show_bug.cgi?id=24656
        cacheControlContainsNoCache() in ResourceResponseBase.h is wrong

        * platform/network/ResourceResponseBase.cpp:
        (WebCore::ResourceResponseBase::parseCacheControlDirectives): Removed misused code for
        parsing directive values, fixing parsing of directives that we care about.

        * platform/network/ResourceResponseBase.h:
        (WebCore::ResourceResponseBase::cacheControlContainsNoCache): Fixed a copy/paste mistake,
        m_cacheControlContainsMustRevalidate was returned instead of m_cacheControlContainsNoCache.

2009-04-08  Ken Kocienda  <kocienda@apple.com>

        Fix for these bugs:

        <rdar://problem/6768703> Text selected below the tap and drag area
        <rdar://problem/6768577> End of selection drawn in the wrong place if selection ends in an empty paragraph at the end of the document

        --- Submission Information ---
        - Risk level: low
        - Risk details: Only affects selection drawing.
        - Code reviewed by: Brad Moore
        - Testing details: Tested very simple scenarios described in bugs. Also checked
        a variety of other content to see that nothing went amiss.

        * dom/Range.cpp:
        (WebCore::Range::collectSelectionRects)

2009-04-07  Justin Garcia  <justin.garcia@apple.com>

        <rdar://problem/6759298> Unnecessary nesting of divs after copy/paste in Notes

        * editing/ReplaceSelectionCommand.cpp:
        (WebCore::ReplaceSelectionCommand::doApply): Don't nest when inserting into an empty block, unless that block
        has a border, is floating, etc.

2009-04-07  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6766720> MERGE: iPhone: Thai word selection misbehaves for the last sentence in the document

        Merged ToT WebKit r42280.

    2009-04-07  Dan Bernstein  <mitz@apple.com>

        Reviewed by Darin Adler.

        - fix <rdar://problem/6764359> Thai word selection misbehaves for the
          last sentence in the document

        Test: editing/selection/thai-word-at-document-end.html

        * editing/visible_units.cpp:
            - Added a BoundarySearchContextAvailability enum used to indicate
            whether the caller to a boundary search function may be able to provide
            additional text in the search direction and call again.
            - Added a named type for the boundary search function signature. Changed
            the signature to take a context availability parameter and a boolean
            out parameter indicating whether more context is needed to perform
            the search.
        (WebCore::previousBoundary): If the beginning of the range was reached
            but the last search wanted more context, perform the search again, this
            time indicating that there is no earlier text.
        (WebCore::nextBoundary): Similarly, in the other direction.
        (WebCore::startWordBoundary): Check whether more context may be available
            and ask for more context if needed.
        (WebCore::endWordBoundary): Ditto.
        (WebCore::previousWordPositionBoundary): Ditto.
        (WebCore::nextWordPositionBoundary): Ditto.
        (WebCore::startSentenceBoundary):  Updated signature.
        (WebCore::endSentenceBoundary): Ditto.
        (WebCore::previousSentencePositionBoundary): Ditto.
        (WebCore::nextSentencePositionBoundary): Ditto.

2009-04-07  Antti Koivisto  <antti@apple.com>

        Reviewed by Simon Fraser.

        <rdar://problem/6561689> REGRESSION: Page transitions can look ugly

        Suspend resizing, painting and tile creation between page commit and first visual layout for the new page.

        - add new tiling mode that disables repaints
        - flush pending repaints when new tiles are created to ensure that all tiles are showing the same content.

        * platform/iphone/TiledSurface.h:
        (WebCore::TiledSurface::):
        * platform/iphone/TiledSurface.mm:
        (WebCore::TiledSurface::TiledSurface):
        (WebCore::TiledSurface::coverWithTiles):
        (WebCore::TiledSurface::setNeedsDisplayInRect):
        (WebCore::TiledSurface::invalidateTiles):
        (WebCore::TiledSurface::isTileCreationSuspended):
        (WebCore::TiledSurface::isPaintingSuspended):
        (WebCore::TiledSurface::updateTilingMode):
        (WebCore::TiledSurface::flushSavedDisplayRects):
        (WebCore::TiledSurface::hasPendingDraw):
        * wak/WAKWindow.h:
        * wak/WAKWindow.mm:
        (-[WAKWindow hasPendingDraw]):

2009-04-07  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Antti Koivisto

        <rdar://problem/6738519> Ensure that font antialiasing settings match
        between TiledSurface and eclair layers

        * WebCore.xcodeproj/project.pbxproj:
        Made WKGraphics a .mm file.

        * platform/graphics/mac/WebLayer.mm:
        (+[WebLayer drawContents:WebCore::ofLayer:intoContext:]):
        Use WKFontAntialiasingStateSaver to setup and restore the antialiasing state.
        Also call CGContextSetShouldAntialias(context, NO), as TiledSurface does.

        * platform/iphone/TiledSurface.mm:
        (WebCore::TiledSurface::drawLayer):
        Use WKFontAntialiasingStateSaver to setup and restore the antialiasing state.

        * wak/WKGraphics.cpp: Removed.
        * wak/WKGraphics.mm: Added.
        * wak/WKGraphics.h:
        (WKFontAntialiasingStateSaver::WKFontAntialiasingStateSaver):
        (WKFontAntialiasingStateSaver::setup):
        (WKFontAntialiasingStateSaver::restore):
        New object to save and retore font antialiasing settings.

2009-04-07  Simon Fraser  <simon.fraser@apple.com>

        Rubber stamped Dave Kilzer

        Merge r41900 from WebKit TOT:

    2009-03-22  Simon Fraser  <simon.fraser@apple.com>

            Reviewed by Dan Bernstein

            https://bugs.webkit.org/show_bug.cgi?id=24743

            Fix hit testing regression from r41840. We need to pass the temporary
            HitTestResult when testing sublayers, then only copy to 'result' when
            the layer is known to have been hit.

            Test: fast/layers/zindex-hit-test.html

            * rendering/RenderLayer.cpp:
            (WebCore::RenderLayer::hitTestLayer):

2009-04-07  Simon Fraser  <simon.fraser@apple.com>

        Rubber stamped Dave Kilzer

        Merge r42291  from WebKit TOT:

    2009-04-07  Simon Fraser  <simon.fraser@apple.com>

            Reviewed by Dan Bernstein

            https://bugs.webkit.org/show_bug.cgi?id=25082

            Clean up repaint logic when RenderLayers become and stop being composited.

            * rendering/RenderLayer.h:
            * rendering/RenderLayer.cpp:
            (WebCore::RenderLayer::rendererContentChanged):
            (WebCore::RenderLayer::repaintIncludingNonCompositingDescendants):
            New compositing-only method that repaints a layer and all its non-composited descendants.
            Takes a repaintContainer for performance; all the repaints necessarily share the same
            repaintContainer.

            * rendering/RenderLayerCompositor.h:
            * rendering/RenderLayerCompositor.cpp:
            (WebCore::RenderLayerCompositor::updateLayerCompositingState):
            Rather than use calculateCompositedBounds() to compute the repaint rect (which gave
            the wrong answer when the composited layer tree was in flux), use the new
            repaintOnCompositingChange() method.

            (WebCore::RenderLayerCompositor::repaintOnCompositingChange):
            Call repaintIncludingNonCompositingDescendants(), and if necessary make sure
            that the view/layer drawing synchronization happens.

            (WebCore::RenderLayerCompositor::computeCompositingRequirements):
            Do a repaintOnCompositingChange() when a layer is going to be composited. This is
            a good place because we haven't started to change the compositing tree.

            (WebCore::RenderLayerCompositor::rebuildCompositingLayerTree):
            After we've finished updating all the descendant layers, we can do a repaint for
            layers that ceased compositing.

2009-04-07  Simon Fraser  <simon.fraser@apple.com>

        Rubber stamped Dave Kilzer

        Merge r42271  from WebKit TOT:

    2009-04-07  Simon Fraser  <simon.fraser@apple.com>

            Reviewed by Dave Hyatt

            https://bugs.webkit.org/show_bug.cgi?id=25069

            Clean up the accelerated compositing code that determines the format of
            the GraphicsLayer hierarchy, being more explicit about which parts have
            to happen before and after descendant layers have been updated. Also remove
            some unhelpful caching of state.

            * dom/Document.cpp:
            (WebCore::Document::recalcStyle):
            Only call updateCompositingLayers() if we know we're not going to be
            doing a layout soon.

            * platform/graphics/mac/GraphicsLayerCA.mm:
            (WebCore::GraphicsLayerCA::setDrawsContent):
            Toggling drawsContent from false to true should do a setNeedsDisplay().

            * rendering/RenderLayer.cpp:
            (WebCore::RenderLayer::styleChanged):
            updateLayerCompositingState() no longer updates the layer geometry, so
            do that here if we're not going to rebuild layers anyway.
            Also, updateLayerCompositingState() no longer does a setContentsNeedDisplay,
            so do that if the style change indicates that a repaint is required.

            * rendering/RenderLayerBacking.h:
            * rendering/RenderLayerBacking.cpp:
            (WebCore::RenderLayerBacking::RenderLayerBacking):
            (WebCore::RenderLayerBacking::updateAfterLayout):
            The 'drawing optimizations' logic has been rolled into updateGraphicsLayerConfiguration()
            and updateGraphicsLayerGeometry().

            (WebCore::RenderLayerBacking::updateGraphicsLayerConfiguration):
            Group that code that decides what GraphicsLayers are needed into this method,
            which deals with clipping layers and 'direct compositing': images that can be
            rendered via the compositor.

            (WebCore::RenderLayerBacking::updateGraphicsLayerGeometry):
            Call setDrawsContent() if updateGraphicsLayerConfiguration() didn't already
            figure it out for image layers.

            (WebCore::RenderLayerBacking::isSimpleContainerCompositingLayer):
            Remove the m_simpleCompositingLayerStatusDirty cache indicator, since we just
            computed it every time anyway.

            * rendering/RenderLayerCompositor.h:
            * rendering/RenderLayerCompositor.cpp:
            (WebCore::RenderLayerCompositor::updateLayerCompositingState):
            updateGraphicsLayers() was renamed to updateGraphicsLayerConfiguration(),
            which calls clippedByAncestor() etc. itself rather than having everything passed in.
            Repaints are taken care of by styleChanged() and setDrawsContent().

            (WebCore::RenderLayerCompositor::calculateCompositedBounds):
            !layer->isComposited() && layer->transform() is a synonym for paintsWithTransform().

            (WebCore::RenderLayerCompositor::setCompositingParent):
            No need to call updateGraphicsLayerGeometry() here, because we're going to
            rebuild layers anyway.

            (WebCore::RenderLayerCompositor::rebuildCompositingLayerTree):
            Add comments, and test layerBacking instead of layer->isComposited().

2009-04-07  Ken Kocienda  <kocienda@apple.com>

        Reviewed by Brad Moore

        <rdar://problem/6757712> Backspace will delete image to the right of IP

        Support code to detect when the insertion point is in front of an element
        with display:block style.

        * WebCore.iPhone.exp
        * editing/SelectionController.cpp
        (WebCore::SelectionController::selectionIsCaretInDisplayBlockElementAtOffset)
        * editing/SelectionController.h

2009-04-07  David Carson  <dacarson@apple.com>

        Wrap the AA call in #if PLATFORM(IPHONE)

        * platform/graphics/cg/ImageCG.cpp:
        (WebCore::BitmapImage::checkForSolidColor):

2009-04-07  David Carson  <dacarson@apple.com>

        Reviewed by Antti Koivisto, Richard Williamson

        <rdar://problem/6743722> Image display in Mail/Safari is blurry on 3.0
        <rdar://problem/6575237> Regression: Hairline cracks between tiles

        Turn off anti-aliasing when drawing images. As the context is saved
        before AA is turned off, when the context is restored, the AA state
        will be restored.

        * platform/graphics/cg/ImageCG.cpp:
        (WebCore::BitmapImage::checkForSolidColor):

2009-04-07  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6729094> MERGE: iPhone: Crash submitting a form when parsing a document (22378)

        Merged ToT WebKit r42055, r42056, r42057, r42061, r42082,
        r42083, r42089, r42093, r42094, r42108, r42119, r42158.

    2009-04-01  Darin Adler  <darin@apple.com>

        Reviewed by Geoff Garen.

        Bug 22378: Crash submitting a form when parsing an XHTML document
        https://bugs.webkit.org/show_bug.cgi?id=22378
        rdar://problem/6388377

        Tests: fast/loader/submit-form-while-parsing-1.xhtml
               fast/loader/submit-form-while-parsing-2.html

        * WebCore.base.exp: Updated.

        * history/HistoryItem.cpp:
        (WebCore::HistoryItem::HistoryItem): Renamed m_subItems to m_children.
        Used uncheckedAppend because we reserveInitialCapacity.
        (WebCore::HistoryItem::addChildItem): Renamed m_subItems to m_children.
        Added an assertion that this is only used to add items that don't have
        duplicate frame names.
        (WebCore::HistoryItem::setChildItem): Added. Replaces an existing item
        if any, preserving the isTargetItem flag.
        (WebCore::HistoryItem::childItemWithTarget): Renamed from childItemWithName
        for consistency with the other functions here that all call the frame name the
        "target". Also updated for rename of m_subItems to m_children.
        (WebCore::HistoryItem::findTargetItem): Renamed from recurseToFindTargetItem.
        Removed unneeded size check.
        (WebCore::HistoryItem::targetItem): Changed to always return the top item
        if no item has the isTargetItem flag set. The old version would instead return
        0 in some cases, but return the top item if it had no children.
        (WebCore::HistoryItem::children): Renamed m_subItems to m_children.
        (WebCore::HistoryItem::hasChildren): Ditto.
        (WebCore::HistoryItem::showTreeWithIndent): Ditto.

        * history/HistoryItem.h: Name changes.

        * html/HTMLFormElement.cpp:
        (WebCore::HTMLFormElement::submit): Create and pass a FormState instead of
        attaching "recorded form values" and "form about to be submitted" to the frame
        loader. Parameter work fine for this; there's no need to store state on the
        FrameLoader.

        * loader/FormState.cpp:
        (WebCore::FormState::FormState): Adopt a vector instead of copying a hash map.
        (WebCore::FormState::create): Ditto.
        * loader/FormState.h: Update to use a vector that we adopt instead of hash map
        that we copy for auto-fill text field values.

        * loader/FrameLoader.cpp:
        (WebCore::ScheduledRedirection::ScheduledRedirection): Added a new case for
        form submissions and turned the "wasDuringLoad" state into a separate boolean
        instead of using a special redirection type to track it.
        (WebCore::FrameLoader::createWindow): Updated for name and argument change of
        loadFrameRequest.
        (WebCore::FrameLoader::urlSelected): Ditto.
        (WebCore::FrameLoader::submitForm): Removed the "deferred form submission"
        machinery, replacing it with the "scheduled redirection" mechanism, shared
        with other kinds of redirection and navigation. Moved frame targeting here
        so we can schedule the redirection on the right frame. Moved the multiple
        form submission protection here. Moved the code to implement the rule that
        m_navigationDuringLoad was used for here too.
        (WebCore::FrameLoader::didOpenURL): Use the new wasDuringLoad flag instead
        of the locationChangeDuringLoad type to detect location change during a load.
        (WebCore::FrameLoader::executeScript): Removed call to now-obsolete function,
        submitFormAgain.
        (WebCore::FrameLoader::scheduleLocationChange): Moved the code to stop loading
        out of this function into scheduleRedirection, so it can be shared with the
        new scheduleFormSubmission function.
        (WebCore::FrameLoader::scheduleFormSubmission): Added. Almost the same as
        scheduleLocationChange, but with the arguments for a form submission.
        (WebCore::FrameLoader::scheduleRefresh): Updated for the change to the
        duringLoad flag.
        (WebCore::FrameLoader::isLocationChange): Added case for formSubmission
        and removed case for locationChangeDuringLoad.
        (WebCore::FrameLoader::redirectionTimerFired): Ditto. Also removed unneeded
        completeURL call and just use KURL constructor to match the other cases.
        (WebCore::FrameLoader::provisionalLoadStarted): Removed the code to set up
        the m_navigationDuringLoad, which is no longer needed. The new version of
        this is in the submitForm function and sets the lockHistory boolean.
        (WebCore::FrameLoader::scheduleRedirection): Moved the code to stop a load
        in here that used to be in scheduleLocationChange.
        (WebCore::FrameLoader::startRedirectionTimer): Added case for formSubmission
        and removed case for locationChangeDuringLoad.
        (WebCore::FrameLoader::stopRedirectionTimer): Ditto.
        (WebCore::FrameLoader::completed): Removed call to now-obsolete function,
        submitFormAgain.
        (WebCore::FrameLoader::loadFrameRequest): Renamed from
        loadFrameRequestWithFormAndValues. Replaced form element and form values
        argument with a single FormState argument. Changed frame targeting code
        to use the source frame in the case of a form submission to better match
        the actual target frame.
        (WebCore::FrameLoader::loadURL): Don't search for existing frames in the
        form submission case since we already did that in the submitForm function.
        (WebCore::FrameLoader::clientRedirected): Changed to work with the
        m_isExecutingJavaScriptFormAction data member directly instead of taking
        it as a function parameter.
        (WebCore::FrameLoader::loadPostRequest): Don't search for existing frames
        in the form submission case since we already did that in the submitForm
        function.
        (WebCore::FrameLoader::addBackForwardItemClippedAtTarget): Moved comment
        in here that was misplaced elsewhere in the file.
        (WebCore::FrameLoader::findFrameForNavigation): Changed to use the early
        return idiom.
        (WebCore::FrameLoader::recursiveGoToItem): Updated for HistoryItem changes.
        (WebCore::FrameLoader::childFramesMatchItem): Ditto.
        (WebCore::FrameLoader::updateHistoryForStandardLoad): Removed the
        m_navigationDuringLoad logic; that's now handled by setting lockHistory
        to true in the submitForm function.
        (WebCore::FrameLoader::updateHistoryForRedirectWithLockedBackForwardList):
        Use the new setChildItem function so we don't get multiple items for the
        same frame name in the history item tree in the back/forward list.

        * loader/FrameLoader.h: Renamed loadFrameRequestWithFormAndValues to
        loadFrameRequest and made it take a form state object instead of the
        form element and form values. Removed the unused functions
        loadEmptyDocumentSynchronously, provisionalDocumentLoader,
        notifyIconChnaged, and updateBaseURLForEmptyDocument. Changed the
        submitForm function to take a form state argument. Eliminated the
        clearRecordedFormValues, setFormAboutToBeSubmitted, and recordFormValue
        functions, which are replaced by the form state arguments to submitForm
        and loadFrameRequest. Removed the isJavaScriptFormAction argument from
        the clientRedirected function; instead it looks at a data member directly.
        Eliminated the submitFormAgain and overload of the submitForm function;
        these are now subsumed into the remaining submitForm function and the
        scheduleFormSubmission function. Removed unused and obsolete data
        members m_navigationDuringLoad, m_deferredFormSubmission,
        m_formAboutToBeSubmitted and m_formValuesAboutToBeSubmitted.

        * page/ContextMenuController.cpp:
        (WebCore::ContextMenuController::contextMenuItemSelected):
        Updated for name and argument change of loadFrameRequest.

        * page/Frame.cpp:
        (WebCore::Frame::~Frame): Removed call to the now-unneeded
        clearRecordedFormValues function.

    2009-03-30  Darin Adler  <darin@apple.com>

        Reviewed by Adam Roben.

        Bug 24916: REGRESSION: NavigationAction policy dispatch broken
        https://bugs.webkit.org/show_bug.cgi?id=24916

        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::loadURL): Rearrange the code so that the "event" PassRefPtr
        is not used twice. This also optimizes the case where a frame name is specified,
        but it's the name of the frame being loaded. Also called release in all the final
        uses of FormState.

    2009-03-29  Darin Adler  <darin@apple.com>

        Fix build again.

        * loader/EmptyClients.h: Fix typo in name of FormState.h.

    2009-03-29  Darin Adler  <darin@apple.com>

        Try to fix the release build.

        * history/CachedPage.cpp: Make include unconditional, not debug-only.

    2009-03-29  Darin Adler  <darin@apple.com>

        Try to fix the Windows build.

        * loader/EmptyClients.h: Added include of FormState.h.
        * loader/MainResourceLoader.cpp: Ditto.

    2009-03-27  Darin Adler  <darin@apple.com>

        Reviewed by Sam Weinig.

        Get mailto code out of FrameLoader.

        * html/HTMLFormElement.cpp:
        (WebCore::transferMailtoPostFormDataToURL): Added. Factored out the mailto
        logic so HTMLFormElement::submit isn't full of ugly bits. This includes the
        part of the logic that involves transformeing the URL that was previously
        inside FrameLoader.
        (WebCore::HTMLFormElement::submit): Call transferMailtoPostFormDataToURL and
        also release the data for slightly less refcount churn.

        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::submitForm): Removed all the special casing for mailto,
        since HTMLFormElement now properly prepares both the URL and the form data.

    2009-03-27  Darin Adler  <darin@apple.com>

        Reviewed by Sam Weinig.

        To prepare for work on a form loading fix, remove some unused functions,
        consolidate some functions, and make many more functions private in
        FrameLoader.

        * WebCore.base.exp: Remove some unused entry points, update another.

        * dom/Document.cpp:
        (WebCore::Document::detach): Clear m_frame directly instead of using
        clearFramePointer.
        * dom/Document.h: Ditto.

        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::urlSelected): Consolidate the two functions
        of this name into a single function. Also changed the event argument
        to be PassRefPtr<Event>.
        (WebCore::FrameLoader::submitForm): Changed the event argument to
        be PassRefPtr<Event>.
        (WebCore::FrameLoader::scheduleLocationChange): Call completeURL
        explicitly so we can remove the version of changeLocation that does
        completeURL for us.
        (WebCore::FrameLoader::redirectionTimerFired): Ditto.
        (WebCore::FrameLoader::loadURLIntoChildFrame): Set m_provisionalHistoryItem
        directly so we don't need a setProvisionalHistoryItem function.
        (WebCore::FrameLoader::canCachePageContainingThisFrame): Get at
        m_quickRedirectComing directly so we don't need a isQuickRedirectComing
        function.
        (WebCore::FrameLoader::logCanCacheFrameDecision): Ditto.
        (WebCore::FrameLoader::loadFrameRequestWithFormAndValues): Changed the
        event argument to be PassRefPtr<Event>.
        (WebCore::FrameLoader::loadURL): Move the logic of the continueLoadWithData
        function here because this is the only caller. If we want to make the
        resulting function smaller we should refactor some other way. Also
        streamlined the user-chosen encoding logic, but did not change what it does.
        (WebCore::FrameLoader::finishedLoadingDocument): Changed the event argument
        to be PassRefPtr<Event>.
        (WebCore::FrameLoader::loadPostRequest): Ditto.
        (WebCore::FrameLoader::receivedMainResourceError): Moved the logic from
        the didNotOpenURL function here, since this was the only caller.

        * loader/FrameLoader.h: Removed include of FormState.h and used a forward
        declaration instead. Removed unneeded forward declation of Element.
        Moved many functions into the private section, and removed some other
        unused or uneeded functions.

2009-04-07  Justin Garcia  <justin.garcia@apple.com>

        <rdar://problem/6390294> REGRESSION (Kirkwood): Typing a space in a full text field scrolls the field back to the beginning

        Merged Dan's patch <http://trac.webkit.org/projects/webkit/changeset/42265>.

        * rendering/bidi.cpp:
        (WebCore::RenderBlock::computeHorizontalPositionsForLine):
        (WebCore::RenderBlock::layoutInlineChildren):

2009-04-07  Ken Kocienda  <kocienda@apple.com>

        Reviewed by Brad Moore

        <rdar://problem/6760949> Keyboard starts forward deleting email
        <rdar://problem/6743384> Punctuation mark do not get deleted when press-and-hold Delete

        Recent merges to improve visible units calculations for
        international text caused some regressions in iPhone-only code
        in SelectionController. Fortunately, they are relative simple to
        fix. In both cases, there's now code to prevent undesirable
        expansions or contractions of selections for iPhone editing.

        * editing/SelectionController.cpp
        (WebCore::operator<)
        (WebCore::operator>)
        (WebCore::SelectionController::expandSelectionToStartOfWordContainingCaretSelection)
        (WebCore::SelectionController::_wordSelectionContainingCaretSelection)

2009-04-06  Justin Garcia  <justin.garcia@apple.com>

        Reviewed by Beth Dakin.

        <rdar://problem/6733974> Can't paste into text fields at http://transit.yahoo.co.jp/

        * editing/ReplaceSelectionCommand.cpp:
        (WebCore::ReplacementFragment::insertFragmentForTestRendering): Added a workaround for <rdar://problem/6761932>.

2009-04-06  Simon Fraser  <simon.fraser@apple.com>

        Rubber stamped Dave Kilzer

        Merge r42222 from WebKit TOT:

    2009-04-03  Chris Marrin  <cmarrin@apple.com>

            Reviewed by Simon Fraser.

            Test: transitions/bad-transition-shorthand-crash.html

            Fixed https://bugs.webkit.org/show_bug.cgi?id=24787.

            We were starting transitions with 0 duration and delay, which is
            useless. With accelerated compositing on, this went through a code
            path that tried to use m_toStyle, which never got set because the
            transitions was short circuited before it had a chance to. So I
            both protect against using that null pointer and avoid starting
            the transition in the first place.

            * page/animation/CompositeAnimation.cpp:
            (WebCore::CompositeAnimationPrivate::updateTransitions):
            * page/animation/ImplicitAnimation.cpp:
            (WebCore::ImplicitAnimation::blendPropertyValueInStyle):

2009-04-06  Simon Fraser  <simon.fraser@apple.com>

        Rubber stamped Dave Kilzer

        Merge r42246 from WebKit TOT:

    2009-04-06  Simon Fraser  <simon.fraser@apple.com>

            Reviewed by Darin Adler

            https://bugs.webkit.org/show_bug.cgi?id=25052

            Pull the call to updateGraphicsLayerGeometry() out of updateGraphicsLayers(),
            because we need to call it at the end of rebuildCompositingLayerTree() once
            we've determined which descendant layers are composited, otherwise
            calculateCompositedBounds() can give the wrong answer.

            Now that updateLayerCompositingState() doesn't end up calling updateGraphicsLayerGeometry(),
            call that explicitly from styleChanged(), if we know a layer update is not pending,
            and similarly from updateAfterLayout().

            Test: compositing/overflow/overflow-positioning.html

            * rendering/RenderLayer.cpp:
            (WebCore::RenderLayer::styleChanged):
            * rendering/RenderLayerBacking.cpp:
            (WebCore::RenderLayerBacking::updateAfterLayout):
            (WebCore::RenderLayerBacking::updateGraphicsLayers):
            (WebCore::RenderLayerBacking::updateGraphicsLayerGeometry):
            * rendering/RenderLayerCompositor.cpp:
            (WebCore::RenderLayerCompositor::rebuildCompositingLayerTree):

2009-04-06  Antti Koivisto  <antti@apple.com>

        Reviewed by Simon Fraser.

        <rdar://problem/6714711> Kirkwood slower to load trekweb.com than 2.2

        Bunch of tiling efficiency and correctness improvements:

        - Don't adjust the cover rect for constant pixel count in minimal tiling mode (during loading). This
          keeps us from creating extra tiles during loading.
        - Remove call to redo tile layout from WKView setBounds. The main view size is currently managed by
          UIKit which makes calls to adjust tile layout when needed. This removes unnecessary work and
          fixes some synchronization problems.
        - Resize tiles by resizing, not deleting and recreating. This was not atomic in CA.
        - Don't wipe out tiles when visibile rect becomes empty.
        - Do only minimal tiling with layoutTilesNow()
        - Some cleanups.

        * platform/ScrollView.h:
        * platform/iphone/TiledSurface.h:
        * platform/iphone/TiledSurface.mm:
        (WebCore::TiledSurface::Tile::setRect):
        (WebCore::TiledSurface::adjustForPageBounds):
        (WebCore::TiledSurface::doLayoutTiles):
        (WebCore::TiledSurface::layoutTilesNow):
        (WebCore::TiledSurface::coverWithTiles):
        * wak/WKView.cpp:
        (WKViewSetBoundsSize):

2009-04-06  Ken Kocienda  <kocienda@apple.com>

        Rolling out this change. Patch caused layout test failures.
        I'll need to investigate further before trying again to fix the bug.

        <rdar://problem/6756547> Typing in wrong spot after inserting image

2009-04-05  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6758073> iPhone: REGRESSION (Leopard-Snow Leopard): Cannot use the mouse to place the insertion point inside a Thai character

        Merged ToT WebKit r41477 and r42227.

    2009-04-04  Dan Bernstein  <mitz@apple.com>

        Reviewed by Mark Rowe.

        - fix <rdar://problem/6757862> REGRESSION: Cannot use the mouse to place
          the insertion point inside a Thai character

        Test: fast/text/international/thai-offsetForPosition-inside-character.html

        * platform/graphics/mac/CoreTextController.cpp:
        (WebCore::CoreTextController::offsetForPosition): Changed to use
        cursorMovementIterator instead of characterBreakIterator, allowing this
        function to return a valid cursor position even if it is not at
        a character boundary.

    2009-03-06  Hironori Bono  <hbono@chromium.org>

        Reviewed by Alexey Proskuryakov.

        https://bugs.webkit.org/show_bug.cgi?id=24342
        Cannot insert a Thai character after a Thai prepend character when using ICU 4.0

        This change creates a new break iterator "cursorMovementIterator" for
        moving cursors and use it when moving an input cursor.
        In "TextBreakIteratorICU.cpp", this break iterator uses custom ruleset
        based on the one of ICU 3.8.
        On the other hand, in "TextBreakIteratorQt.cpp", this break iterator
        just calls the characterBreakIterator() function.

        Test: editing/inserting/insert-thai-characters-001.html

        * platform/text/TextBreakIterator.h: Added a new function cursorMovementIterator().
        * platform/text/TextBreakIteratorICU.cpp: Implemented the cursorMovementIterator() function for ICU.
        (WebCore::setUpIteratorWithRules): Ditto.
        (WebCore::cursorMovementIterator): Ditto.
        * platform/text/qt/TextBreakIteratorQt.cpp: Implemented the cursorMovementIterator() function for Qt.
        (WebCore::cursorMovementIterator): Ditto.
        * rendering/RenderText.cpp: Call the cursorMovementIterator() function when moving an input cursor.
        (WebCore::RenderText::previousOffset): Ditto.
        (WebCore::RenderText::nextOffset): Ditto.

2009-04-05  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6757549> Hang then crash in Mobile Notes while moving cursor around Thai cluster

        Merged ToT WebKit r42226.

    2009-04-04  Dan Bernstein  <mitz@apple.com>

        Reviewed by Mark Rowe.

        - fix an assertion failure when clicking at the beginning of a
          glyph cluster at the beginning of a text run

        Test: fast/text/offsetForPosition-cluster-at-zero.html

        * platform/graphics/mac/CoreTextController.cpp:
        (WebCore::CoreTextController::offsetForPosition): Corrected the bound
        check on firstGlyphBeforeCluster, letting it be 0 or -1, but not less
        than -1.

2009-04-04  Ken Kocienda  <kocienda@apple.com>

        Reviewed by Brad Moore

        <rdar://problem/6726125> BIDI: Select all selects past the last line

        This code improves the way line ends are found to properly account for bidi layout.

        * dom/Range.cpp
        (WebCore::Range::collectSelectionRects)
        * platform/SelectionRect.cpp
        (WebCore::SelectionRect::SelectionRect)
        * platform/SelectionRect.h
        (WebCore::SelectionRect::lineNumber)
        (WebCore::SelectionRect::setLineNumber)
        * rendering/RenderText.cpp
        (WebCore::RenderText::collectSelectionRects)

2009-04-04  Ken Kocienda  <kocienda@apple.com>

        Reviewed by Brad Moore

        <rdar://problem/6756547> Typing in wrong spot after inserting image

        Code now handles replaced elements with display:block.

        * editing/TextIterator.cpp:
        (WebCore::TextIterator::handleReplacedElement)

2009-04-03  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6742135> Build WebKit with updated order file

        Reviewed by Greg Bolsinga.

        * WebCore.xcodeproj/project.pbxproj: Removed SECTORDER_FLAGS
        from Deployment and Deployment_Hardware configurations.  We only
        support linking with the WebCore/WebCore.iPhone.order file for
        Production_Deployment and Production_Hardware configurations in
        B&I and SECTORDER_FLAGS should only be set in
        WebCore/Configurations/Base.xcconfig.

2009-04-03  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6511168> MERGE: iPhone: Thai text selection in Safari is incorrect

        Merged ToT WebKit r41607.

    2009-03-11  Dan Bernstein  <mitz@apple.com>

        Reviewed by Darin Adler.

        - WebCore part of fixing <rdar://problem/3919124> Thai text selection
          in Safari is incorrect

        Test: platform/mac/editing/selection/word-thai.html

        Tested on Mac, but should work on all ICU platforms (or more precisely
        on all platforms that implement
        WTF::Unicode::hasLineBreakingPropertyComplexContext() correctly).

        * editing/TextIterator.cpp:
        (WebCore::BackwardsCharacterIterator::BackwardsCharacterIterator):
        Added.
        (WebCore::BackwardsCharacterIterator::range): Added.
        (WebCore::BackwardsCharacterIterator::advance): Added.

        * editing/TextIterator.h: Added BackwardsCharacterIterator with the
        minimal functionality required for this patch.
        (WebCore::BackwardsCharacterIterator::atEnd): Added.

        * editing/visible_units.cpp:
        (WebCore::firstNonComplexContextLineBreak): Added this helper function
        that returns the index of the first character in the string whose
        Unicode line breaking property value is not SA ("Complex Context"), or
        the length of the string if there is no such character.
        (WebCore::lastNonComplexContextLineBreak): Added this helper function
        that returns the index of the last character in the string whose
        Unicode line breaking property value is not SA ("Complex Context"), or
        -1 if there is no such character.
        (WebCore::previousBoundary): Changed the signature of the search
        function to include an offset parameter. Renamed the 'exception' local
        variable to 'ec' and changed its type to ExceptionCode. Extend the
        string forwards until the first character with Unicode line breaking
        property value other than SA. This gives the boundary search function
        enough context in the forward direction. Changed to use a
        BackwardsCharacterIterator for translating the backwards offset into
        a position.
        (WebCore::nextBoundary): Changed the signature of the search
        function to include an offset parameter. Extend the string backwards
        until the first character with Unicode line breaking property value
        other than SA. This gives the boundary search function enough context in
        the backwards direction. Restricted the workaround for <rdar://5192593>
        only to the line break case, because it was causing an extra character
        to be selected following a word that ended with a combining mark.
        (WebCore::startWordBoundary): Added an offset parameter. Check that
        going backwards from the given offset, there is a character with Unicode
        line breaking property value other than SA, and otherwise return 0 to
        request more context.
        (WebCore::endWordBoundary): Similar, but in reverse.
        (WebCore::previousWordPositionBoundary): Similar.
        (WebCore::nextWordPositionBoundary): Similar.
        (WebCore::startSentenceBoundary): Updated for the new search function
        signature.
        (WebCore::endSentenceBoundary): Ditto.
        (WebCore::previousSentencePositionBoundary): Ditto.
        (WebCore::nextSentencePositionBoundary): Ditto.

2009-04-03  Simon Fraser  <simon.fraser@apple.com>

        <rdar://problem/6752922> Optimize eventRegionsChanged

        Export IntRect::contains(const IntRect&) for the event
        region code.

        Remove point-in-quad code in WebEventRegion which is now
        implemented in FloatQuad, and use FloatQuad internally
        to do this test.

        * WebCore.iPhone.exp:
        * page/iphone/EventHandlerIPhone.cpp:
        (WebCore::EventHandler::handleTouchEvent):
        * page/mac/WebEventRegion.mm:
        (-[WebEventRegion hitTest:]):
        (-[WebEventRegion quad]):

2009-04-03  Simon Fraser  <simon.fraser@apple.com>

        Rubber stamped by Dave Kilzer

        Merge r42208 from WebKit TOT:

    2009-04-03  Chris Marrin  <cmarrin@apple.com>

            Reviewed by David Hyatt.

            Fixed https://bugs.webkit.org/show_bug.cgi?id=24941

            This fix essentially does a -viewWillDraw call for layout. It adds
            a CFRunLoopObserver which performs layout just before drawing on the
            Mac platform. This makes sure layout is complete before rendering and
            avoids a flash.

            * page/ChromeClient.h:
            (WebCore::ChromeClient::scheduleViewUpdate):
            * rendering/RenderLayerCompositor.cpp:
            (WebCore::RenderLayerCompositor::setCompositingLayersNeedUpdate):
            (WebCore::RenderLayerCompositor::scheduleViewUpdate):
            * rendering/RenderLayerCompositor.h:

2009-04-03  Simon Fraser  <simon.fraser@apple.com>

        Rubber stamped by Dave Kilzer

        Merge r42207 from WebKit TOT:

    2009-04-02  Simon Fraser  <simon.fraser@apple.com>

            Reviewed by Dan Bernstein

            https://bugs.webkit.org/show_bug.cgi?id=24648

            Optimize mapPoint(), mapRect() and mapQuad() for identity matrix and translations.

            * platform/graphics/transforms/TransformationMatrix.cpp:
            (WebCore::TransformationMatrix::mapPoint):
            (WebCore::TransformationMatrix::mapRect):
            (WebCore::TransformationMatrix::mapQuad):
            * platform/graphics/transforms/TransformationMatrix.h:
            (WebCore::TransformationMatrix::mapPoint):

2009-04-03  Simon Fraser  <simon.fraser@apple.com>

        Rubber stamped by Dave Kilzer

        Merge r42206 from WebKit TOT:

    2009-04-02  Simon Fraser  <simon.fraser@apple.com>

            Reviewed by Dan Bernstein

            https://bugs.webkit.org/show_bug.cgi?id=25018

            Add containsPoint() and containsQuad() methods to FloatQuad.

            * platform/graphics/FloatQuad.cpp:
            (WebCore::dot):
            (WebCore::isPointInTriangle):
            (WebCore::FloatQuad::containsPoint):
            (WebCore::FloatQuad::containsQuad):
            * platform/graphics/FloatQuad.h:

2009-04-03  Simon Fraser  <simon.fraser@apple.com>

        Rubber stamped by Dave Kilzer

        Merge r42198 from WebKit TOT:

    2009-04-02  Simon Fraser  <simon.fraser@apple.com>

            Reviewed by Dan Bernstein

            https://bugs.webkit.org/show_bug.cgi?id=25021

            Fix repainting an element with a reflection and transform after layout.
            Telling the reflection to repaint directly is wrong, because, with
            LayoutState enabled, it only takes the reflection's transform into account,
            not that of the element. We can fix this, and keep the benefits of LayoutState,
            by computing the reflected repaint rect, and repainting that using the original
            renderer.

            Test: fast/repaint/reflection-repaint-test.html

            * rendering/RenderBlock.cpp:
            (WebCore::RenderBlock::layoutBlock):

2009-04-03  Simon Fraser  <simon.fraser@apple.com>

        Rubber stamped by Dave Kilzer

        Merge r42197 from WebKit TOT:

    2009-04-02  Simon Fraser  <simon.fraser@apple.com>

            Reviewed by Dan Bernstein

            https://bugs.webkit.org/show_bug.cgi?id=23307

            When repainting during layout (when LayoutState is enabled), we need
            to apply the transform to the dirty rect, before applying x(), y() and
            the offset storted in the LayoutState.

            Also bypass LayoutState in mapLocalToContainer() if we have a repaintContainer,
            since LayoutState is always root-relative.

            Test: fast/repaint/transform-layout-repaint.html

            * rendering/RenderBox.cpp:
            (WebCore::RenderBox::mapLocalToContainer):
            (WebCore::RenderBox::computeRectForRepaint):

2009-04-02  David Kilzer  <ddkilzer@apple.com>

        BUILD FIX:  Remove category from DOMHTMLBlockquoteElement

        * bindings/objc/DOMUIKitExtensions.mm: Removed category on
        DOMHTMLBlockquoteElement that was added in r89427 as this
        DOM class isn't even compiled on ToT or iPhone WebKit.

2009-04-02  Brad Moore  <bradm@apple.com>

		Reviewed by Greg Bolsinga.

        Exposing some hooks for UIKit to better compute a document's textiness.  Needs to be in
        WebCore in order to get at the render tree.

		<rdar://problem/6660808> Be smarter about differentiating between text-only and web content.

        * bindings/objc/DOMUIKitExtensions.h:
        * bindings/objc/DOMUIKitExtensions.mm:
        (-[DOMHTMLElement structuralComplexityContribution]):

2009-04-02  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6599354> MERGE: iPhone: frame busting + prototype.js = XSS (23148)

        Applied future ToT WebKit fix.

        The following iPhone-only constructors also had to be updated.

        * bindings/js/JSTouchConstructor.cpp:
        (WebCore::JSTouchConstructor::JSTouchConstructor):
        * bindings/js/JSTouchListConstructor.cpp:
        (WebCore::JSTouchListConstructor::JSTouchListConstructor):

    2009-04-01  Sam Weinig  <sam@webkit.org>

        Reviewed by Oliver Hunt.

        Fix for <rdar://problem/6476356>
        Cross-origin prototype tainting for location and history objects.
        https://bugs.webkit.org/show_bug.cgi?id=23148

        - Use the window object the Location and History objects are directly associated with
          instead of the lexical global object to pick the object prototype to serve as the
          base of the their respective prototype chains.
        - Re-factor as necessary to allow passing the correct global object to the createPrototype
          functions.

        Tests: http/tests/security/cross-frame-access-history-prototype.html
               http/tests/security/cross-frame-access-location-prototype.html

        * bindings/js/JSAudioConstructor.cpp:
        (WebCore::JSAudioConstructor::JSAudioConstructor):
        * bindings/js/JSDOMBinding.cpp:
        (WebCore::getCachedDOMStructure):
        (WebCore::cacheDOMStructure):
        * bindings/js/JSDOMBinding.h:
        (WebCore::getDOMStructure):
        (WebCore::getDOMPrototype):
        * bindings/js/JSDOMWindowCustom.cpp:
        (WebCore::JSDOMWindow::history):
        (WebCore::JSDOMWindow::location):
        * bindings/js/JSDocumentCustom.cpp:
        (WebCore::JSDocument::location):
        * bindings/js/JSImageConstructor.cpp:
        (WebCore::JSImageConstructor::JSImageConstructor):
        * bindings/js/JSMessageChannelConstructor.cpp:
        (WebCore::JSMessageChannelConstructor::JSMessageChannelConstructor):
        * bindings/js/JSNamedNodesCollection.h:
        (WebCore::JSNamedNodesCollection::createPrototype):
        * bindings/js/JSOptionConstructor.cpp:
        (WebCore::JSOptionConstructor::JSOptionConstructor):
        * bindings/js/JSRGBColor.h:
        (WebCore::JSRGBColor::createPrototype):
        * bindings/js/JSWebKitCSSMatrixConstructor.cpp:
        (WebCore::JSWebKitCSSMatrixConstructor::JSWebKitCSSMatrixConstructor):
        * bindings/js/JSWebKitPointConstructor.cpp:
        (WebCore::JSWebKitPointConstructor::JSWebKitPointConstructor):
        * bindings/js/JSWorkerConstructor.cpp:
        (WebCore::JSWorkerConstructor::JSWorkerConstructor):
        * bindings/js/JSXMLHttpRequestConstructor.cpp:
        (WebCore::JSXMLHttpRequestConstructor::JSXMLHttpRequestConstructor):
        * bindings/js/JSXSLTProcessorConstructor.cpp:
        (WebCore::JSXSLTProcessorConstructor::JSXSLTProcessorConstructor):
        * bindings/scripts/CodeGeneratorJS.pm:
        * bridge/objc/objc_runtime.h:
        (JSC::Bindings::ObjcFallbackObjectImp::createPrototype):
        * bridge/runtime_array.h:
        (JSC::RuntimeArray::createPrototype):
        * bridge/runtime_method.h:
        (JSC::RuntimeMethod::createPrototype):
        * bridge/runtime_object.h:
        (JSC::RuntimeObjectImp::createPrototype):
        * page/DOMWindow.idl:

2009-04-02  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6596405> MERGE: iPhone: UXSS after navigation via directly referencing document (21456)

        Applied future ToT WebKit fix.

    2009-03-30  Sam Weinig  <sam@webkit.org>

        Reviewed by Darin Adler.

        <rdar://problem/6330929>
        https://bugs.webkit.org/show_bug.cgi?id=21456

        Don't update the document pointer for all inactive windows on navigations.
        This change causes us to differ slightly from Firefox when accessing the
        document from within a closure tied to a navigated context, but as all
        browsers differ on this edge case, I don't foresee compatibility issues.

        * bindings/js/JSDOMWindowBase.cpp:
        (WebCore::JSDOMWindowBase::~JSDOMWindowBase):
        * bindings/js/ScriptController.cpp:
        (WebCore::ScriptController::clearWindowShell):
        (WebCore::ScriptController::initScript):
        (WebCore::ScriptController::updateDocument):
        * bindings/js/ScriptController.h:

2009-04-02  Antti Koivisto  <antti@apple.com>

        Reviewed by Simon Fraser.

        <rdar://problem/6751710> ASSERTION FAILED: m_timersPausedCount

        Synchronization problem with Safari and WebKit state. Remove assert, ignore unpause
        of a frame that has not been paused.

        * page/iphone/FrameIPhone.mm:
        (WebCore::Frame::setTimersPaused):

2009-04-02  Eric Carlson  <eric.carlson@apple.com>

        Reviewed by Simon Fraser.

        <rdar://problem/6751915> [video] always allow load() to run when in fullscreen

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::load): Allow when in fullscreen.

        * platform/graphics/iphone/MediaPlayerPrivateIPhone.mm:
        (WebCore::mimeTypeCache): Update with new MIME types supported by plug-in.

2009-04-02  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6743899> WebCore should not dlopen MobileQuickLook on local stylesheets containing file:/// references

        Reviewed by David Carson.

        This particular issue happened when local stylesheets loaded PNG
        images which then caused MobileQuickLook to be soft-linked into
        memory.  The fix is to check the existing MIME type to determine
        if MobileQuickLook should be used.  Since image/png is a
        supported image type, MobileQuickLook will not be soft-linked.

        * WebCore.xcodeproj/project.pbxproj: Added references to new
        WebCoreURLResponseIPhone.h header file.
        * platform/network/iphone/WebCoreURLResponseIPhone.h: Added.
        (WebCore::shouldUseQuickLookForMIMEType): Extracted inline
        method from sniffMIMEType() that determines whether we should
        use MobileQuickLook to verify the MIME type.
        * platform/network/iphone/WebCoreURLResponseIPhone.mm:
        (sniffMIMEType): Use shouldUseQuickLookForMIMEType().
        * platform/network/mac/ResourceHandleMac.mm:
        (-[WebCoreResourceHandleAsDelegate connection:didReceiveResponse:]):
        Use shouldUseQuickLookForMIMEType() before soft-linking
        MobileQuickLook to prevent unnecessary dlopen() overhead.

2009-04-02  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6746155> WebCore and WebKit Development_Hardware ARCHS seems wrong.

        Reviewed by Simon Fraser.

        This change only affects local Development[_Hardware] and
        Deployment[_Hardware] builds using Xcode, whose configurations
        are based on DebugRelease.xcconfig.

        * Configurations/Base.xcconfig: Moved ARCHS definition from here...
        * Configurations/DebugRelease.xcconfig: ...to here and used
        $(ARCHS_STANDARD_32_BIT) for iphoneos platform instead of
        hard-coding "armv6".

2009-04-02  Simon Fraser  <simon.fraser@apple.com>

        Rubber stamped Dave Kilzer

        Merge r42174  from WebKit TOT:

    2009-04-02  Simon Fraser  <simon.fraser@apple.com>

            Reviewed by Darin Adler

            https://bugs.webkit.org/show_bug.cgi?id=24999

            Optimize hit testing with transforms.

            * rendering/RenderBox.cpp:
            (WebCore::RenderBox::mapLocalToContainer):
            (WebCore::RenderBox::mapAbsoluteToLocalPoint):
            getTransformFromContainer() change to return the matrix by reference.

            * rendering/RenderLayer.cpp:
            (WebCore::RenderLayer::update3DTransformedDescendantStatus):
            The method failed to set m_3DTransformedDescendantStatusDirty to false,
            so did the work every time.

            (WebCore::RenderLayer::createLocalTransformState):
            Only call the expensive getTransformFromContainer() if there is a transform,
            otherwise we just have a translation.

            * rendering/RenderObject.cpp:
            (WebCore::RenderObject::getTransformFromContainer):
            * rendering/RenderObject.h:
            Change transformFromContainer() to getTransformFromContainer(), and return
            the matrix by reference to reduce copying.
            New enum values for arguments for readability.

            * rendering/TransformState.cpp:
            (WebCore::TransformState::move):
            (WebCore::TransformState::applyTransform):
            (WebCore::HitTestingTransformState::translate):
            New method that adds a translation to the accumulated matrix, optionally
            without flattening. Cheaper than applyTransform().

            (WebCore::HitTestingTransformState::applyTransform):
            (WebCore::HitTestingTransformState::flatten):
            (WebCore::HitTestingTransformState::flattenWithTransform):
            Add flattenWithTransform(), which is a helper that allows us to
            avoid doing the inverse() twice.

            * rendering/TransformState.h:
            (WebCore::TransformState::):
            (WebCore::TransformState::move):
            (WebCore::HitTestingTransformState::):
            New method on HitTestingTransformState that adds a translation to the
            accumulated matrix, optionally without flattening. Cheaper than applyTransform().
            New enum values for arguments for readability.

2009-04-02  Simon Fraser  <simon.fraser@apple.com>

        Rubber stamped Dave Kilzer

        Fix up merge of 41531 from WebKit TOT.

        * rendering/RenderBox.cpp:
        (WebCore::RenderBox::mapLocalToContainer):
        (WebCore::RenderBox::mapAbsoluteToLocalPoint):

2009-04-02  Simon Fraser  <simon.fraser@apple.com>

        Rubber stamped Dave Kilzer

        Merge r42172 from WebKit TOT:

    2009-04-02  Simon Fraser  <simon.fraser@apple.com>

            Reviewed by Dan Bernstein

            https://bugs.webkit.org/show_bug.cgi?id=24648

            Optimize common code paths in TransformationMatrix.

            * platform/graphics/transforms/TransformationMatrix.cpp:
            (WebCore::TransformationMatrix::translate):
            (WebCore::TransformationMatrix::translate3d):
            Optimize to avoid matrix copy.

            (WebCore::TransformationMatrix::isInvertible):
            Test for identity and translation matrices before computing
            the determinant.

            (WebCore::TransformationMatrix::inverse):
            Optimize for identity matrix and translations.

            * platform/graphics/transforms/TransformationMatrix.h:
            (WebCore::TransformationMatrix::isIdentityOrTranslation):
            Utility method.

2009-04-01  Antti Koivisto  <antti@apple.com>

        Reviewed by Simon Fraser, Dave Kilzer.

        <rdar://problem/6561721> TiledSurface should defer document timers during scrolling

        Also made Frame::setTimersPaused() count the pauses/unpauses so that multiple clients
        using it at the same time won't confuse it.

        * page/Frame.cpp:
        (WebCore::Frame::Frame):
        * page/Frame.h:
        (WebCore::Frame::timersPaused):
        * page/iphone/FrameIPhone.mm:
        (WebCore::Frame::setTimersPaused):
        * platform/iphone/TiledSurface.h:
        * platform/iphone/TiledSurface.mm:
        (WebCore::TiledSurface::TiledSurface):
        (WebCore::TiledSurface::updateTilingMode):

2009-04-01  Antti Koivisto  <antti@apple.com>

        Merged open source r42161 plus a minor adaptation to FrameIPhone.

    2009-04-01  Antti Koivisto  <antti@apple.com>

            Reviewed by Darin Adler.

            <rdar://problem/6748609> Use ActiveDOMObject to suspend marquees

            Make marquees ActiveDOMObjects, get rid of the special suspension code.

        * html/HTMLMarqueeElement.cpp:
        (WebCore::HTMLMarqueeElement::HTMLMarqueeElement):
        (WebCore::HTMLMarqueeElement::canSuspend):
        (WebCore::HTMLMarqueeElement::suspend):
        (WebCore::HTMLMarqueeElement::resume):
        * html/HTMLMarqueeElement.h:
        * page/Frame.cpp:
        (WebCore::Frame::clearTimers):
        * page/iphone/FrameIPhone.mm:
        (WebCore::Frame::setTimersPaused):
        * rendering/RenderLayer.cpp:
        * rendering/RenderLayer.h:
        (WebCore::RenderLayer::marquee):

2009-04-01  David Kilzer  <ddkilzer@apple.com>

        Remove unused WebCoreNSURLResponseWrapper.{h|m} files

        These files should have been removed in r86725 for
        <rdar://problem/6684080>, but were only removed from the Xcode
        project file due to PEBKAC.

        * platform/network/iphone/WebCoreNSURLResponseWrapper.h: Removed.
        * platform/network/iphone/WebCoreNSURLResponseWrapper.m: Removed.

2009-04-01  Aaron Golden  <agolden@apple.com>

        Reviewed by Brad Moore.

        <rdar://problem/6571313> UITextField clear button click is not undoable
        <rdar://problem/6744725> TOT UIKit asserts while trying to use the clear button in Spotlight's search field

        * editing/DeleteSelectionCommand.h:
        * editing/EditAction.h:
        * editing/Editor.cpp:
        * editing/Editor.h:
        * editing/EditorCommand.cpp:

2009-04-01  Greg Bolsinga  <bolsinga@apple.com>

        Rubber stamped by David Kilzer.

        <rdar://problem/6735979> Update order file for WebCore one more time with a UITextField typing scenario

        * WebCore.iPhone.order:

2009-03-31  Antti Koivisto  <antti@apple.com>

        Reviewed by Greg Bolsinga.

        <rdar://problem/6586319> REGRESSION: No body text displayed in Advent

        Does not fix anything but makes us crash out immediately with a log message
        if someone tries to obtain the web lock from a secondary thread. This is
        better than hanging doing nothing.

        * wak/WebCoreThread.mm:
        (_WebTryThreadLock):

2009-03-31  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6015593> MERGE: iPhone: taintscan:integer overflow in WebCore::HTMLTokenizer::enlargeBuffer(int) and WebCore::HTMLTokenizer::enlargeScriptBuffer(int)

        Merged patch from ToT WebKit radar.

    2009-03-30  Darin Adler  <darin@apple.com>

        Reviewed by Sam Weinig.

        <rdar://problem/5908616> enlargeBuffer needs additional checks for theoretical edge cases

        These never happen for multiple reasons, but better safe than sorry.

        * html/HTMLTokenizer.cpp:
        (WebCore::HTMLTokenizer::enlargeBuffer): Add check and CRASH.
        (WebCore::HTMLTokenizer::enlargeScriptBuffer): Ditto.

2009-03-31  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Antti Koivisto

        Make WKGraphics.cpp a cpp file.

        * WebCore.xcodeproj/project.pbxproj:
        * wak/WKGraphics.c: Removed.
        * wak/WKGraphics.cpp: Added.
        (_FillRectsUsingOperation):
        (WKReleasePatternBitmap):
        Need to use reinterpret_cast to keep us honest.

2009-03-31  Simon Fraser  <simon.fraser@apple.com>

        Patch by Eric Carlson, reviewed by Simon Fraser

        <rdar://problem/6549020>

        Update media element to the latest spec: merge changes from WebKit ToT,
        and fix up MediaPlayerPrivateiPhone accordingly.

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::HTMLMediaElement):
        (WebCore::HTMLMediaElement::attributeChanged):
        (WebCore::HTMLMediaElement::insertedIntoDocument):
        (WebCore::HTMLMediaElement::load):
        (WebCore::HTMLMediaElement::loadInternal):
        (WebCore::HTMLMediaElement::setNetworkState):
        (WebCore::HTMLMediaElement::playInternal):
        (WebCore::HTMLMediaElement::pauseInternal):
        (WebCore::HTMLMediaElement::potentiallyPlaying):
        (WebCore::HTMLMediaElement::pausedForUserInteraction):
        (WebCore::HTMLMediaElement::updatePlayState):
        (WebCore::HTMLMediaElement::deliverNotification):
        (WebCore::HTMLMediaElement::setMediaPlayerProxy):
        * html/HTMLMediaElement.h:
        * platform/ContentType.cpp: Added.
        (WebCore::ContentType::ContentType):
        (WebCore::ContentType::parameter):
        (WebCore::ContentType::type):
        * platform/ContentType.h: Added.
        (WebCore::ContentType::raw):
        * platform/graphics/iphone/MediaPlayerPrivateIPhone.h:
        * platform/graphics/iphone/MediaPlayerPrivateIPhone.mm:
        (WebCore::MediaPlayerPrivateiPhone::MediaPlayerPrivateiPhone):
        (WebCore::MediaPlayerPrivateiPhone::rate):
        (WebCore::MediaPlayerPrivateiPhone::setRate):
        (WebCore::MediaPlayerPrivateiPhone::deliverNotification):

2009-03-31  Simon Fraser  <simon.fraser@apple.com>

        Rubber stamped Dave Kilzer

        Merge the following commits from WebKit TOT:

    r41942:
    2009-03-24  Eric Carlson  <eric.carlson@apple.com>

            Fix layout tests broken by r41907.

            * html/HTMLMediaElement.cpp:
            (WebCore::HTMLMediaElement::setReadyState): Don't set "was playing" based on the new ready state

2009-03-31  Simon Fraser  <simon.fraser@apple.com>

        Rubber stamped Dave Kilzer

        Merge the following commits from WebKit TOT:

    r42144:
    2009-03-31  Eric Carlson  <eric.carlson@apple.com>

            Reviewed by Simon Fraser.

            https://bugs.webkit.org/show_bug.cgi?id=24965
            Bug 24965: HTMLMediaElement: network state changes can be missed

            * html/HTMLMediaElement.cpp:
            (WebCore::HTMLMediaElement::setNetworkState): Always update m_networkState when the
            state changes, even when no event needs to be fired.

2009-03-31  Simon Fraser  <simon.fraser@apple.com>

        Rubber stamped Dave Kilzer

        Merge the following commits from WebKit TOT:

    r42143:
    2009-03-31  Eric Carlson  <eric.carlson@apple.com>

            Reviewed by Darin Adler.

            https://bugs.webkit.org/show_bug.cgi?id=24964
            Bug 24964: HTMLMediaElement: 'waiting' event may fire twice

            * html/HTMLMediaElement.cpp:
            (WebCore::HTMLMediaElement::setReadyState): Only fire 'waiting' event once when ready state
            drops below HAVE_FUTURE_DATA.

2009-03-31  Simon Fraser  <simon.fraser@apple.com>

        Rubber stamped Dave Kilzer

        Merge the following commits from WebKit TOT:

    r42141:
    2009-03-31  Eric Carlson  <eric.carlson@apple.com>

            Reviewed by Darin Adler.

            https://bugs.webkit.org/show_bug.cgi?id=24846
            Bug 24846: HTMLMediaElement should implement 'autobuffer' attribute

            Add 'autobuffer' attrubute to media element. 'autobuffer' is a hint that
            the author recommends downloading the entire resource optimistically, so the
            attribute is made available to the media engine to use if it is able.

            Test: media/video-dom-autobuffer.html

            * html/HTMLAttributeNames.in: Add autobuffer.

            * html/HTMLMediaElement.cpp:
            (WebCore::HTMLMediaElement::parseMappedAttribute): New.
            (WebCore::HTMLMediaElement::autobuffer): Ditto.
            (WebCore::HTMLMediaElement::setAutobuffer): Ditto.

            * html/HTMLMediaElement.h: Declare autobuffer and setAutobuffer.

            * html/HTMLMediaElement.idl: Add autobuffer.

            * platform/graphics/MediaPlayer.cpp:
            (WebCore::MediaPlayer::MediaPlayer): Initialize m_autobuffer.
            (WebCore::MediaPlayer::autobuffer): New.
            (WebCore::MediaPlayer::setAutobuffer): Ditto.
            * platform/graphics/MediaPlayer.h: Declare m_autobuffer, autobuffer and setAutobuffer

            * platform/graphics/MediaPlayerPrivate.h:
            (WebCore::MediaPlayerPrivateInterface::setAutobuffer): Declare setAutobuffer.

2009-03-31  Simon Fraser  <simon.fraser@apple.com>

        Rubber stamped Dave Kilzer

        Merge the following commits from WebKit TOT:

    r42029:
    2009-03-26  Eric Carlson  <eric.carlson@apple.com>

            Reviewed by Simon Fraser.

            https://bugs.webkit.org/show_bug.cgi?id=24874
            24874: HTMLMediaElement: 'duration' defaults to NaN, deal with it

            The 'duration' attribute is NaN when no media is available, so the
            media element should take care when comparing with duration().

            * html/HTMLMediaElement.cpp:
            (WebCore::HTMLMediaElement::mediaPlayerTimeChanged): Don't compare with duration when
            it is NaN.
            (WebCore::HTMLMediaElement::endedPlayback): Ditto.

2009-03-31  Simon Fraser  <simon.fraser@apple.com>

        Rubber stamped Dave Kilzer

        Merge the following commits from WebKit TOT:

    r41907:
    2009-03-23  Eric Carlson  <eric.carlson@apple.com>

            Reviewed by Adele Peterson.

            https://bugs.webkit.org/show_bug.cgi?id=24588

            Update media element implementation to current HTML5 spec

            New tests:
                   media/media-constants.html
                   media/video-seek-no-src-exception.html
                   media/video-source-add-src.html
                   media/video-src-invalid-remove.html
                   media/video-src-plus-source.html
                   media/video-timeupdate-during-playback.html

            * dom/EventNames.h: Remove obsolute events, add new ones.
            * html/HTMLMediaElement.cpp:
            (WebCore::HTMLMediaElement::HTMLMediaElement): Initialize new member vars.
            (WebCore::HTMLMediaElement::attributeChanged): Trigger load() only when we don't
            have a source.
            (WebCore::HTMLMediaElement::removedFromDocument): Deal with state name changes.
            (WebCore::HTMLMediaElement::scheduleProgressEvent): New, create a progress event and
            add it to the event queue to be dispatch when the timer fires.
            (WebCore::HTMLMediaElement::scheduleEvent): New, create a generic event and add
            it to the event queue to be dispatch when the timer fires.
            (WebCore::HTMLMediaElement::enqueueEvent): Add an event to the queue and ticke the
            asynch event timer.
            (WebCore::HTMLMediaElement::asyncEventTimerFired): Dispatch all pending events.
            (WebCore::HTMLMediaElement::loadTimerFired): Either trigger the initial load or
            try to load the next <source> url.
            (WebCore::HTMLMediaElement::load): Minor style change.
            (WebCore::HTMLMediaElement::loadInternal): The first part of the spec load algorithm, cleanup
            the current load (if any) and set up state for a new load.
            (WebCore::HTMLMediaElement::selectMediaResource): Deal with no 'src' or <source>, post 'loadstart'
            event, and initiate load from 'src' if present.
            (WebCore::HTMLMediaElement::loadNextSourceChild): Initiate load from next <source> url, or trigger
            noneSupported() if no more to consider.
            (WebCore::HTMLMediaElement::loadResource): Instantiate a new MediaPlayer and ask it to load a url.
            (WebCore::HTMLMediaElement::startProgressEventTimer): Start the repeating progress event timer.
            (WebCore::HTMLMediaElement::noneSupported): Post error event and set up state when no valid
            media url was found.
            (WebCore::HTMLMediaElement::mediaEngineError): Post error event and set up state when no valid
            media engine failed with a decode error or a network error.
            (WebCore::HTMLMediaElement::mediaPlayerNetworkStateChanged):
            (WebCore::HTMLMediaElement::setNetworkState): Updated for new spec network states.
            (WebCore::HTMLMediaElement::mediaPlayerReadyStateChanged):
            (WebCore::HTMLMediaElement::setReadyState): Updated for new spec ready state.
            (WebCore::HTMLMediaElement::progressEventTimerFired): Bail if the network is not active.
            (WebCore::HTMLMediaElement::seek): Return INVALID_STATE_ERR exception if state is too low or
            if player hasn't been set up yet. This is necessary becase load() is async. Clear the flag
            we use to guard against sending 'ended' more than once.
            (WebCore::HTMLMediaElement::duration): Don't bother calling media engine before it has metadata.
            (WebCore::HTMLMediaElement::setDefaultPlaybackRate): Remove exception param, 0 is no longer an
            invalid rate.
            (WebCore::HTMLMediaElement::setPlaybackRate): Remove exception param, 0 is no longer an
            invalid rate. Cache rate being set so we can use it later if media engine isn't ready now.
            (WebCore::HTMLMediaElement::play): Remove exception param, play() before load() now just
            starts loading asynchronously.
            (WebCore::HTMLMediaElement::playInternal): Remove exception param. Fire 'waiting' or 'playing'
            event depending on current state.
            (WebCore::HTMLMediaElement::pause): Remove exception param, pause() before load() now just
            starts loading asynchronously.
            (WebCore::HTMLMediaElement::pauseInternal): Remove exception param.
            (WebCore::HTMLMediaElement::setVolume): dispatchEventAsync -> scheduleEvent
            (WebCore::HTMLMediaElement::setMuted): dispatchEventAsync -> scheduleEvent
            (WebCore::HTMLMediaElement::togglePlayState): Remove exception param.
            (WebCore::HTMLMediaElement::beginScrubbing): pause() doesn't take an exception param.
            (WebCore::HTMLMediaElement::startPlaybackProgressTimer): New, starts timer that fires 4 times per
            second when the movie is playing to timeupdate so we can post 'timeupdate' events.
            (WebCore::HTMLMediaElement::playbackProgressTimerFired): Timer proc.
            (WebCore::HTMLMediaElement::scheduleTimeupdateEvent): Bottleneck around scheduling a 'timeupdate'
            event because we both fire them them when the spec says we should and when the media engine
            says that time has jumped, but we don't want to fire more than one at a given movie time. We also
            use this bottleneck to keep track of the last time one was posted so we won't fire too often
            during playback.
            (WebCore::HTMLMediaElement::canPlay): readyState now tracks whether or not we have metadata.
            (WebCore::HTMLMediaElement::havePotentialSourceChild): New, checks to see if there are a <source>
            element with a 'src' attribute that we have not tried to load yet.
            (WebCore::HTMLMediaElement::nextSourceChild): New, returns the url and content type of the next
            <source> element that we haven't tried to load.
            (WebCore::HTMLMediaElement::mediaPlayerTimeChanged): Schedule 'seeked' event when seeking completes.
            Set a flag when we post the 'ended' event, clear it when time changed and we aren't at the end since
            some media engines call this proc more than once when playback reaches the end and stops, but we
            don't want to post 'ended' more than once.
            (WebCore::HTMLMediaElement::mediaPlayerDurationChanged): New, added so media engine can inform
            when the movie duration changes and we can post 'durationchanged' event.
            (WebCore::HTMLMediaElement::mediaPlayerRateChanged): New, added so media engine can inform when
            the rate changed and we can updated our cached rate. This is useful because we only want to know
            post periodic 'timeupdate' events when the movie is actually playing, and because we want to know
            the actual playback rate when it differs from what we tried to set.
            (WebCore::HTMLMediaElement::mediaPlayerSizeChanged): New, added so media engine can inform when
            a movie's intrinsic size changes and we can inform the renderer.
            (WebCore::HTMLMediaElement::potentiallyPlaying): Renamed from activelyPlaying since the spec now
            uses "actively playing" for this concept. Update logic for new state names and un-comment calls
            to stoppedDueToErrors() and pausedForUserInteraction() since the spec says those condiditons
            are part of the answer.
            (WebCore::HTMLMediaElement::endedPlayback): Update logic for new state names.
            (WebCore::HTMLMediaElement::stoppedDueToErrors): New, spec says this logic should be part of
            the determination of "potentially playing".
            (WebCore::HTMLMediaElement::pausedForUserInteraction): New, placeholder for when (if) user
            agent supports this spec concept.
            (WebCore::HTMLMediaElement::updatePlayState): Stop timer used to fire periodic 'timeupdate'
            events when we pauses the movie. Set the media engine rate before calling play() in case it
            wasn't set up when the rate was changed.
            (WebCore::HTMLMediaElement::stopPeriodicTimers): New, stop the progress event and 'timeupate'
            event timers.
            (WebCore::HTMLMediaElement::userCancelledLoad): New, logic pulled out of documentWillBecomeInactive
            and updated for the current spec.
            (WebCore::HTMLMediaElement::documentWillBecomeInactive): Moved some logic to userCancelledLoad.
            (WebCore::HTMLMediaElement::documentDidBecomeActive): Update comments.
            (WebCore::HTMLMediaElement::initialURL): Update for refactoring of code that determines the
            initial url.
            * html/HTMLMediaElement.h: Change ReadyState and NetworkState enums to match names in the spec,
            update for changes in .cpp.
            (WebCore::HTMLMediaElement::):

            * html/HTMLMediaElement.idl: Update ready state and network state constants for spec changes.
            defaultPlaybackRate, playbackRate, play(), and pause() no longer raise exceptions.

            * html/HTMLSourceElement.cpp:
            (WebCore::HTMLSourceElement::insertedIntoDocument): Update for network state name changes.

            * html/HTMLVideoElement.cpp:
            (WebCore::HTMLVideoElement::updatePosterImage): Update for ready state name changes.

            * html/MediaError.h:
            (WebCore::MediaError::): add MEDIA_ERR_NONE_SUPPORTED.

            * html/MediaError.idl: add MEDIA_ERR_NONE_SUPPORTED.

            * loader/MediaDocument.cpp:
            (WebCore::MediaDocument::defaultEventHandler): play() and pause() don't take an exception.

            * platform/graphics/MediaPlayer.cpp:
            (WebCore::NullMediaPlayerPrivate::readyState): Update for newtork state name changes.
            (WebCore::MediaPlayer::sizeChanged): New, so engine can report intrinsic size changes.
            (WebCore::MediaPlayer::rateChanged): New, so engine can report rate changes.
            (WebCore::MediaPlayer::durationChanged): New, so engine can report duration changes.
            * platform/graphics/MediaPlayer.h: Update NetworkState and ReadyState enum names to match spec
            states.
            (WebCore::MediaPlayerClient::mediaPlayerDurationChanged): New.
            (WebCore::MediaPlayerClient::mediaPlayerRateChanged): New.
            (WebCore::MediaPlayerClient::mediaPlayerSizeChanged): New.
            (WebCore::MediaPlayer::):

            * platform/graphics/gtk/MediaPlayerPrivateGStreamer.cpp:
            (WebCore::MediaPlayerPrivate::MediaPlayerPrivate): Update for network/ready state name changes.
            (WebCore::MediaPlayerPrivate::load): Ditto.
            (WebCore::MediaPlayerPrivate::updateStates): Ditto.
            (WebCore::MediaPlayerPrivate::loadingFailed): Ditto.

            * platform/graphics/mac/MediaPlayerPrivateQTKit.h: Update for network/ready state name changes.
            Remove endPointTimer, it is no longer necessary. Add m_enabledTrackCount and m_duration.
            (WebCore::MediaPlayerPrivate::metaDataAvailable):
            * platform/graphics/mac/MediaPlayerPrivateQTKit.mm:
            (WebCore::MediaPlayerPrivate::MediaPlayerPrivate): No more m_endPointTimer or m_endTime. Initialize
            m_enabledTrackCount and m_duration. Update for network/ready state name changes.
            (WebCore::MediaPlayerPrivate::load): Update for network/ready state name changes.
            (WebCore::MediaPlayerPrivate::play): No more m_endPointTimer.
            (WebCore::MediaPlayerPrivate::pause): Ditto.
            (WebCore::MediaPlayerPrivate::currentTime): No more m_endTime.
            (WebCore::MediaPlayerPrivate::seek): Ditto.
            (WebCore::MediaPlayerPrivate::doSeek): Ditto, plus don't call setRate(0) when the rate is
            already zero.
            (WebCore::MediaPlayerPrivate::setEndTime): No more m_endTime.
            (WebCore::MediaPlayerPrivate::updateStates): Update for network/ready state name changes. Return
            different errors depending on what causes a failure. Watch for and report duration changes.
            (WebCore::MediaPlayerPrivate::rateChanged): Report rate changes.
            (WebCore::MediaPlayerPrivate::sizeChanged): Report size changes.
            (WebCore::MediaPlayerPrivate::didEnd): No more endpoint timer.
            (WebCore::MediaPlayerPrivate::setVisible): Update for network/ready state name changes.
            (WebCore::MediaPlayerPrivate::disableUnsupportedTracks): Don't return number of unsupported
            tracks, store in m_enabledTrackCount so we can use it to help determine causes of failure.

            * platform/graphics/qt/MediaPlayerPrivatePhonon.cpp:
            (WebCore::MediaPlayerPrivate::MediaPlayerPrivate): Update for network/ready state name changes.
            (WebCore::MediaPlayerPrivate::load): Ditto.
            (WebCore::MediaPlayerPrivate::duration): Ditto.
            (WebCore::MediaPlayerPrivate::updateStates): Ditto.
            (WebCore::MediaPlayerPrivate::naturalSize): Ditto.

            * platform/graphics/win/MediaPlayerPrivateQuickTimeWin.cpp:
            (WebCore::MediaPlayerPrivate::MediaPlayerPrivate): No more m_endPointTimer. Update for
            network/ready state name changes.
            (WebCore::MediaPlayerPrivate::load): Update for network/ready state name changes. No more
            m_endPointTimer.
            (WebCore::MediaPlayerPrivate::play): No more m_endPointTimer.
            (WebCore::MediaPlayerPrivate::pause): Ditto.
            (WebCore::MediaPlayerPrivate::setEndTime): Ditto.
            (WebCore::MediaPlayerPrivate::updateStates): Update for network/ready state name changes.
            (WebCore::MediaPlayerPrivate::didEnd): No more m_endPointTimer.
            * platform/graphics/win/MediaPlayerPrivateQuickTimeWin.h:

            * rendering/MediaControlElements.cpp:
            (WebCore::MediaControlPlayButtonElement::defaultEventHandler): Update for network/ready state
            name changes.
            (WebCore::MediaControlSeekButtonElement::defaultEventHandler): Ditto.

2009-03-31  Simon Fraser  <simon.fraser@apple.com>

        Rubber stamped Dave Kilzer

        Merge the following commits from WebKit TOT:

    r41487:
    2009-03-06  Eric Carlson  <eric.carlson@apple.com>

            Reviewed by Simon Fraser.

            Build fix, no review

            * platform/graphics/chromium/MediaPlayerPrivateChromium.h: fix setSize declaration

    r41486:
    2009-03-06  Eric Carlson  <eric.carlson@apple.com>

            Reviewed by Simon Fraser.

            https://bugs.webkit.org/show_bug.cgi?id=22790
            Bug 22790: [Transforms] MediaPlayer::setRect() makes no sense with transforms
            Replace media engine setRect with setSize since they don't use about the
            position anyway.

            * platform/graphics/MediaPlayer.cpp:
            (WebCore::NullMediaPlayerPrivate::setSize): Changed from setRect.
            (WebCore::MediaPlayer::setSize): Ditto.
            * platform/graphics/MediaPlayer.h:
            (WebCore::MediaPlayer::size): Changed from rect().

            * platform/graphics/MediaPlayerPrivate.h: Changed setRect to setSize.

            * platform/graphics/chromium/MediaPlayerPrivateChromium.h: Ditto.

            * platform/graphics/gtk/MediaPlayerPrivateGStreamer.cpp:
            (WebCore::MediaPlayerPrivate::MediaPlayerPrivate): Initialize m_size instead of m_rect
            (WebCore::MediaPlayerPrivate::setSize): Changed from setRect
            (WebCore::MediaPlayerPrivate::paint): update comment
            * platform/graphics/gtk/MediaPlayerPrivateGStreamer.h: m_rect -> m_size.

            * platform/graphics/mac/MediaPlayerPrivateQTKit.h:  m_rect
            * platform/graphics/mac/MediaPlayerPrivateQTKit.mm:
            (WebCore::MediaPlayerPrivate::MediaPlayerPrivate): Initialize m_rect.
            (WebCore::MediaPlayerPrivate::createQTMovieView): setRect-> setSize.
            (WebCore::MediaPlayerPrivate::setSize): Changed from setRect
            (WebCore::MediaPlayerPrivate::paint): Call view:setFrame: when in a media document so
            the movie is drawn in the correct location.

            * platform/graphics/qt/MediaPlayerPrivatePhonon.cpp:
            (WebCore::MediaPlayerPrivate::setSize):  Changed from setRect
            * platform/graphics/qt/MediaPlayerPrivatePhonon.h:

            * platform/graphics/win/MediaPlayerPrivateQuickTimeWin.cpp:
            (WebCore::MediaPlayerPrivate::setSize):  Changed from setRect
            * platform/graphics/win/MediaPlayerPrivateQuickTimeWin.h:

            * rendering/RenderVideo.cpp:
            (WebCore::RenderVideo::updatePlayer): Call setSize instead of setRect.

2009-03-31  Simon Fraser  <simon.fraser@apple.com>

        Rubber stamped Dave Kilzer

        Merge the following commits from WebKit TOT:

    r41461:
    2009-03-05  Eric Carlson  <eric.carlson@apple.com>

            Reviewed by Simon Fraser.

            https://bugs.webkit.org/show_bug.cgi?id=24400
            Bug 24400: Remove "start", "end", "loopStart", "loopEnd", "currentLoop", and "playCount"
            media element attributes

            Test: media/video-loop.html

            * html/HTMLMediaElement.cpp:
            (WebCore::HTMLMediaElement::HTMLMediaElement):
            (WebCore::HTMLMediaElement::loadInternal):
            (WebCore::HTMLMediaElement::setNetworkState):
            (WebCore::HTMLMediaElement::seek):
            (WebCore::HTMLMediaElement::playInternal):
            (WebCore::HTMLMediaElement::loop):
            (WebCore::HTMLMediaElement::setLoop):
            (WebCore::HTMLMediaElement::mediaPlayerTimeChanged):
            (WebCore::HTMLMediaElement::endedPlayback):
            (WebCore::HTMLMediaElement::updatePlayState):
            * html/HTMLMediaElement.h:
            * html/HTMLMediaElement.idl:

2009-03-31  Simon Fraser  <simon.fraser@apple.com>

        Rubber stamped Dave Kilzer

        Merge the following commits from WebKit TOT:

    r41448:
    2009-03-05  Eric Carlson  <eric.carlson@apple.com>

            Reviewed by Darin Adler

            https://bugs.webkit.org/show_bug.cgi?id=24387
            Remove media element bufferingRate attribute. No test necessary as there
            were none for this attribute.

            * html/HTMLMediaElement.cpp:
            (WebCore::HTMLMediaElement::HTMLMediaElement): Don't initialize m_bufferingRate.
            (WebCore::HTMLMediaElement::loadInternal): Ditto.
            (WebCore::HTMLMediaElement::setNetworkState): Ditto.
            (WebCore::HTMLMediaElement::progressEventTimerFired): Don't calculate m_bufferingRate.
            * html/HTMLMediaElement.h: Remove m_bufferingRate.
            * html/HTMLMediaElement.idl: Ditto.

2009-03-31  Simon Fraser  <simon.fraser@apple.com>

        Rubber stamped Dave Kilzer

        Merge the following commits from WebKit TOT:

    r41432:
    2009-03-04  Eric Carlson  <eric.carlson@apple.com>

            Reviewed by Antti Koivisto.

            https://bugs.webkit.org/show_bug.cgi?id=24364
            Add support for HTMLMediaElement canPlayType method. Make
            MediaPlayer::supportsType take a ContentType instead of a
            separate mime type and codecs parameter.

            Test: media/video-can-play-type.html

            * dom/DOMImplementation.cpp:
            (WebCore::DOMImplementation::createDocument):
            * html/HTMLMediaElement.cpp:
            (WebCore::HTMLMediaElement::canPlayType): Add canPlayType method.
            (WebCore::HTMLMediaElement::loadInternal): selectMediaURL returns a ContentType.
            (WebCore::HTMLMediaElement::selectMediaURL): Return a ContentType instead of raw MIME type.
            (WebCore::HTMLMediaElement::initialURL): selectMediaURL returns a ContentType.
            * html/HTMLMediaElement.h: Add prototype.
            * html/HTMLMediaElement.idl: Ditto.
            * platform/graphics/MediaPlayer.cpp:
            (WebCore::MediaPlayer::load): Take a ContentType instead of raw MIME type.
            (WebCore::MediaPlayer::supportsType): Ditto.
            * platform/graphics/MediaPlayer.h:

2009-03-31  Simon Fraser  <simon.fraser@apple.com>

        Rubber stamped Dave Kilzer

        Merge the following commits from WebKit TOT:

        r41115:
        2009-02-20  Dimitri Glazkov  <dglazkov@chromium.org>

                Reviewed by Sam Weinig.

                https://bugs.webkit.org/show_bug.cgi?id=23999
                Change license headers to accurately reflect code history.

                * platform/ContentType.cpp:
                * platform/ContentType.h:

        r41113:
        2009-02-18  Dimitri Glazkov  <dglazkov@chromium.org>

                Reviewed by Antti Koivisto.

                https://bugs.webkit.org/show_bug.cgi?id=23999
                Split off MIME type parsing into its own class.

                * GNUmakefile.am: Added ContentType sources.
                * WebCore.pro: Ditto.
                * WebCore.scons: Ditto.
                * WebCore.vcproj/WebCore.vcproj: Ditto.
                * WebCore.xcodeproj/project.pbxproj: Ditto.
                * WebCoreSources.bkl: Ditto.
                * html/HTMLMediaElement.cpp: Changed to use ContentType.
                (WebCore::HTMLMediaElement::selectMediaURL):
                * platform/ContentType.cpp: Added.
                (WebCore::ContentType::ContentType):
                (WebCore::ContentType::parameter):
                (WebCore::ContentType::type):
                * platform/ContentType.h: Added.
                (WebCore::ContentType::raw):
                * platform/MIMETypeRegistry.cpp:
                * platform/MIMETypeRegistry.h:
                * platform/graphics/MediaPlayer.cpp:
                (WebCore::MediaPlayer::load):
                * rendering/style/ContentData.h: Renamed ContentType to StyleContentType.
                * rendering/style/RenderStyleConstants.h: Ditto.
                (WebCore::):

2009-03-31  Antti Koivisto  <antti@apple.com>

        Rubber stamped by Greg Bolsinga.

        Followup to <rdar://problem/6699741> Brief flash of the page when switching fields on facebook.com

        Use the existing setProhibitsScrolling() mechanism, get rid of setIsSetScrollPositionEnabled() which
        did the same thing.

        * dom/Element.cpp:
        (WebCore::Element::focus):
        * platform/ScrollView.h:
        * platform/iphone/ScrollViewIPhone.mm:
        (WebCore::ScrollView::platformInit):
        (WebCore::ScrollView::platformSetScrollPosition):

2009-03-31  Ken Kocienda  <kocienda@apple.com>

        Reviewed by Brad Moore

        Fix for this bug:

        <rdar://problem/6714409> Insertion point next to a picture does not correctly indicate its position

        The images attached in an MMS are added with the display:block style. I
        followed the directions given in the bug, and I generated this tree
        dump.

        #text	0x67f8cc0 "Test"
        Mar 29 09:15:41 argo UIKitApplication:com.apple.MobileSMS[0x544a][3303]:  DIV 0x67f73f0
        Mar 29 09:15:41 argo UIKitApplication:com.apple.MobileSMS[0x544a][3303]: *    IMG 0x6788bc0 STYLE=display:block;margin-left:-6px;padding-top:5px;padding-bottom:3px
        Mar 29 09:15:41 argo UIKitApplication:com.apple.MobileSMS[0x544a][3303]:      BR 0x67d5e30

        The code in RenderReplaced.cpp which determines where to put the
        insertion point does not handle block-level elements. Before my patch,
        if the element did not have an inline box wrapper, it simply returned
        the position before the element. This matches the behavior described in
        the bug. With this change, as you can see, there is no longer an early
        return if the element is not inline.

        * rendering/RenderReplaced.cpp:
        (WebCore::RenderReplaced::positionForCoordinates)

2009-03-31  Greg Bolsinga  <bolsinga@apple.com>

        <rdar://problem/6678126> REGR: [UIWebView reload] doesn't set the UIWebViewNavigationType correctly for the shouldStartLoadWithRequest delegate callback

        Bring over http://trac.webkit.org/changeset/42120

        Rubber stamped by David Kilzer

    2009-03-30  Darin Adler  <darin@apple.com>

            Reviewed by Sam Weinig.

            Bug 24594: PolicyDelegate NavigationAction is WebNavigationTypeOther instead of WebNavigationTypeReload
            https://bugs.webkit.org/show_bug.cgi?id=24594
            rdar://problem/6682110

            Test: fast/loader/reload-policy-delegate.html

            * loader/FrameLoader.cpp:
            (WebCore::FrameLoader::loadWithDocumentLoader): Set the triggering action here where we know it's
            the policy loader and can use m_policyLoadType rather than letting it get set inside
            checkNavigationPolicy.

2009-03-30  Antti Koivisto  <antti@apple.com>

        Reviewed by Greg Bolsinga.

        <rdar://problem/6667752> Vanishing text in IM+ (3rd party app) when rotating from portait -> landscape

        If the view is smaller than one tile, keep it always fully covered. This way things don't get confused
        when the view switches back and forth being visible and invisble.

        * platform/iphone/TiledSurface.h:
        * platform/iphone/TiledSurface.mm:
        (WebCore::TiledSurface::checkDoSingleTileLayout):
        (WebCore::TiledSurface::doLayoutTiles):
        (WebCore::TiledSurface::shrinkToMinimalTiles):

2009-03-30  Antti Koivisto  <antti@apple.com>

        Reviewed by Greg Bolsinga.

        <rdar://problem/6699741> Brief flash of the page when switching fields on facebook.com

        Surpress scroll position setting when focusing a form element. The focusing itself
        triggers an UI animation that gives us a good scroll position.

        * dom/Element.cpp:
        (WebCore::Element::focus):
        * platform/ScrollView.cpp:
        * platform/ScrollView.h:
        (WebCore::ScrollView::setIsSetScrollPositionEnabled):
        * platform/iphone/ScrollViewIPhone.mm:
        (WebCore::ScrollView::platformInit):
        (WebCore::ScrollView::platformDestroy):
        (WebCore::ScrollView::platformSetScrollPosition):

2009-03-30  Greg Bolsinga  <bolsinga@apple.com>

        Bring over fixes for https://bugs.webkit.org/show_bug.cgi?id=24938

        Rubber stamped by David Kilzer

    2009-03-30  Greg Bolsinga  <bolsinga@apple.com>

            Reviewed by Simon Fraser.

            https://bugs.webkit.org/show_bug.cgi?id=24938

            Sort alphabetically.

            * css/CSSComputedStyleDeclaration.cpp:
            (WebCore::CSSComputedStyleDeclaration::getPropertyCSSValue):

    2009-03-30  Greg Bolsinga  <bolsinga@apple.com>

            Reviewed by Simon Fraser.

            https://bugs.webkit.org/show_bug.cgi?id=24938

            Build fixes for building --3d-rendering and --no-svg

            * rendering/RenderLayerBacking.cpp:

    2009-03-30  Greg Bolsinga  <bolsinga@apple.com>

            Reviewed by Simon Fraser.

            https://bugs.webkit.org/show_bug.cgi?id=24938

            Build fixes when building --no-svg

            * css/CSSComputedStyleDeclaration.cpp:
            (WebCore::CSSComputedStyleDeclaration::getPropertyCSSValue): Add missing CSS properties
            * css/CSSCursorImageValue.cpp:
            (WebCore::CSSCursorImageValue::updateIfSVGCursorIsUsed): Handle unused param
            * css/CSSParser.cpp:
            (WebCore::CSSParser::parseValue): Add missing CSS properties
            * css/CSSStyleSelector.cpp:
            (WebCore::CSSStyleSelector::applyProperty): Add missing CSS properties
            * dom/Node.cpp:
            (WebCore::updateSVGElementInstancesAfterEventListenerChange): Handle unused param
            * platform/graphics/Font.cpp:
            (WebCore::Font::floatWidth): Handle unused param
            * platform/graphics/SimpleFontData.cpp:
            (WebCore::SimpleFontData::SimpleFontData): Handle unused param

2009-03-29  Antti Koivisto  <antti@apple.com>

        Reviewed by Dave Kilzer.

        <rdar://problem/6667648> REGRESSION: Sometimes text is on top of other text in WebMD

        Clear saved repaint rects only when scaling level actually changes.

        * platform/iphone/TiledSurface.h:
        * platform/iphone/TiledSurface.mm:
        (WebCore::TiledSurface::setTilingMode):
        (WebCore::TiledSurface::invalidateContent):
        * wak/WKView.cpp:
        (WKViewSetScale):

2009-03-29  Antti Koivisto  <antti@apple.com>

        Reviewed by Dave Kilzer.

        <rdar://problem/6682506> Mail accumulates TileLayers scrolling through message, eventually jetsams

        Remember to actually update the m_tileCoveredRect member.

        * platform/iphone/TiledSurface.mm:
        (WebCore::TiledSurface::coverWithTiles):

2009-03-30  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6732236> WebCore copies Inspector images to the device

        Reviewed by David Carson.

        Cleans up WebCore build issues:
        - Define SECTORDER_FLAGS like ToT WebKit (see ToT r42105).
        - Don't install Web Inspector resources.
        - Don't install *.tiff images.
        - Make Deployment and Deployment_Hardware configurations based
          on DebugRelease.xcconfig to match the Release configuration in
          ToT WebKit.
        - TiledSurface.h should be installed in PrivateHeaders not
          Headers.

        * Configurations/Base.xcconfig: Moved Production definition of
        SECTORDER_FLAGS to here from WebCore.xcconfig.
        * Configurations/DebugRelease.xcconfig: Override SECTORDER_FLAGS
        in Base.xcconfig to the empty string since it is not used for
        Development and Deployment configurations.
        * Configurations/WebCore.xcconfig: Removed definition of
        SECTORDER_FLAGS in favor of defining it in Base.xcconfig and
        DebugRelease.xcconfig.  Updated EXCLUDED_SOURCE_FILE_NAMES_iphoneos
        to include *.tiff files and for renaming of
        InspectorLocalizedStrings.js to localizedStrings.js.  Removed
        "inspector" from EXCLUDED_SOURCE_FILE_NAMES_iphoneos since those
        files are now copied in two build phase scripts (see below).
        * WebCore.xcodeproj/project.pbxproj:
        - Made TiledSurface.h private, not public.
        - Added code to "Copy Inspector Resources" and "Streamline
        Inspector Source" build phase scripts so that they don't run for
        either the iphoneos or the iphonesimulator platform.
        - Made Deployment and Deployment_Hardware build configurations
        based on DebugRelease.xcconfig instead of Base.xcconfig.

2009-03-29  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6733652> MERGE: iPhone: CrashTracer: [USER] 49 crashes in Safari at com.apple.WebCore: WebCore::StringImpl::create + 137

        Merged ToT WebKit r42081.

    2009-03-29  Darin Adler  <darin@apple.com>

        Reviewed by Dan Bernstein.

        <rdar://problem/6015407> attr parsing should allow only identifiers

        Test: fast/css/attr-parsing.html

        * css/CSSParser.cpp:
        (WebCore::CSSParser::parseContent): Allow only CSS_IDENT, and filter out
        identifiers that start with "-".
        * css/CSSPrimitiveValue.cpp:
        (WebCore::CSSPrimitiveValue::cssText): Added a case for CSS_ATTR so the test
        case works. This has the pleasant side effect of fixing a bug too.

2009-03-29  David Kilzer  <ddkilzer@apple.com>

        Bug 23676: Speed up uses of reserveCapacity on new vectors by adding a new reserveInitialCapacity

        <https://bugs.webkit.org/show_bug.cgi?id=23676>

        Merged ToT WebKit r40501.  Needed to fix <rdar://problem/6733652>.

    2009-02-02  Darin Adler  <darin@apple.com>

        Reviewed by Dave Hyatt.

        Bug 23676: Speed up uses of reserveCapacity on new vectors by adding a new reserveInitialCapacity
        https://bugs.webkit.org/show_bug.cgi?id=23676

        * bindings/js/JSCSSStyleDeclarationCustom.cpp:
        (WebCore::cssPropertyName):
        * css/CSSMutableStyleDeclaration.cpp:
        (WebCore::CSSMutableStyleDeclaration::CSSMutableStyleDeclaration):
        (WebCore::CSSMutableStyleDeclaration::removePropertiesInSet):
        * css/CSSPrimitiveValue.cpp:
        (WebCore::CSSPrimitiveValue::cssText):
        * css/CSSStyleDeclaration.cpp:
        (WebCore::CSSStyleDeclaration::copyPropertiesInSet):
        * css/CSSStyleSelector.cpp:
        (WebCore::CSSStyleSelector::sortMatchedRules):
        * dom/Document.cpp:
        (WebCore::Document::formElementsState):
        * dom/NamedAttrMap.h:
        (WebCore::NamedAttrMap::reserveInitialCapacity):
        * editing/TextIterator.cpp:
        (WebCore::CharacterIterator::string):
        (WebCore::SearchBuffer::SearchBuffer):
        (WebCore::plainTextToMallocAllocatedBuffer):
        * editing/markup.cpp:
        (WebCore::joinMarkups):
        * history/HistoryItem.cpp:
        (WebCore::HistoryItem::HistoryItem):
        * html/HTMLTokenizer.cpp:
        (WebCore::Token::addAttribute):
        * loader/appcache/DOMApplicationCache.cpp:
        (WebCore::DOMApplicationCache::items):
        * page/SecurityOrigin.cpp:
        (WebCore::SecurityOrigin::toString):
        * page/mac/AccessibilityObjectWrapper.mm:
        (convertToVector):
        * platform/graphics/FontCache.cpp:
        (WebCore::FontCache::purgeInactiveFontData):
        (WebCore::FontCache::invalidate):
        * platform/network/FormData.cpp:
        (WebCore::FormData::deepCopy):
        * platform/network/HTTPHeaderMap.cpp:
        (WebCore::HTTPHeaderMap::copyData):
        * platform/network/ResourceRequestBase.cpp:
        (WebCore::ResourceRequestBase::copyData):
        * platform/network/mac/FormDataStreamMac.mm:
        (WebCore::formCreate):
        * xml/XPathNodeSet.cpp:
        (WebCore::XPath::NodeSet::sort):
        Use reserveInitialCapacity instead of of reserveCapacity in all these call sites,
        which are working on new vectors that are guaranteed not to be empty.

2009-03-29  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6599356> MERGE: iPhone: xmlhttprequest redirection allows custom header injection

        Merged ToT WebKit r42078, r42079.

    2009-03-29  Alexey Proskuryakov  <ap@webkit.org>

        <rdar://problem/6492712> Cross-origin redirects are not handled correctly.

        Forgot to save the file after applying changes for review comments.

        * platform/network/cf/ResourceHandleCFNet.cpp:
        (WebCore::willSendRequest):
        (WebCore::didReceiveResponse):
        (WebCore::didReceiveData):
        (WebCore::didSendBodyData):
        (WebCore::didFinishLoading):
        (WebCore::didFail):
        (WebCore::willCacheResponse):
        (WebCore::didReceiveChallenge):
        (WebCore::WebCoreSynchronousLoader::willSendRequest):
        (WebCore::WebCoreSynchronousLoader::didReceiveResponse):
        (WebCore::WebCoreSynchronousLoader::didReceiveData):
        (WebCore::WebCoreSynchronousLoader::didFinishLoading):
        (WebCore::WebCoreSynchronousLoader::didFail):
        (WebCore::WebCoreSynchronousLoader::didReceiveChallenge):

    2009-03-28  Alexey Proskuryakov  <ap@webkit.org>

        Reviewed by Darin Adler.

        <rdar://problem/6492712> Cross-origin redirects are not handled correctly.

        Test: http/tests/xmlhttprequest/redirect-cross-origin-tripmine.html

        * platform/network/cf/ResourceHandleCFNet.cpp:
        (WebCore::WebCoreSynchronousLoader::WebCoreSynchronousLoader):
        (WebCore::ResourceHandle::loadResourceSynchronously):
        (WebCore::WebCoreSynchronousLoader::willSendRequest):
        (WebCore::WebCoreSynchronousLoader::didReceiveResponse):
        (WebCore::WebCoreSynchronousLoader::didReceiveData):
        (WebCore::WebCoreSynchronousLoader::didFinishLoading):
        (WebCore::WebCoreSynchronousLoader::didFail):
        (WebCore::WebCoreSynchronousLoader::didReceiveChallenge):
        (WebCore::WebCoreSynchronousLoader::load):
        Match Mac behavior more closely - we shouldn't rely on underlying library handling of
        synchronous requests.

        * loader/DocumentThreadableLoader.cpp: (WebCore::DocumentThreadableLoader::willSendRequest):
        -[NSURLConnection cancel] doesn't fully cancel the connection if called from willSendRequest
        delegate method for a redirect.

        * platform/network/mac/ResourceHandleMac.mm:
        (-[WebCoreSynchronousLoader connection:willSendRequest:redirectResponse:]):
        Match async behavior more closely.

2009-03-29  David Carson  <dacarson@apple.com>

        Reviewed by Antti Koivisto, Greg Bolsinga

        <rdar://problem/6707056> WebCore loads TimesNewRoman.ttf when not needed

        Helvetica is the default font for the iPhone. Added font-family:Helvetica to
        the default field editor CSS style.

        * page/iphone/FrameIPhone.mm:
        (WebCore::Frame::createDefaultFieldEditorDocumentStructure):

2009-03-28  Antti Koivisto  <antti@apple.com>

        Reviewed by Greg Bolsinga, Dave Carson.

        <rdar://problem/6609124> UITextView/UITextViewLegacy take 24 ms more to init in KW over TL

        Implement fast path for constructing WebView initialized with simple document structure.

        This speeds up UITextView/UITextViewLegacy construction by ~90ms (first) and ~40ms (subsequent)
        It also speeds up UIFieldEditor construction (which has a fast path already) by ~30ms.

        * WebCore.iPhone.exp:
        * bindings/objc/DOM.mm:
        (WebCore::createElementClassMap):
        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::initForSynthesizedDocument):
        * loader/FrameLoader.h:
        * page/Frame.cpp:
        (WebCore::Frame::Frame):
        (WebCore::Frame::init):
        * page/Frame.h:
        * page/iphone/FrameIPhone.mm:
        (WebCore::Frame::initWithSimpleHTMLDocument):
        (WebCore::Frame::createDefaultFieldEditorDocumentStructure):

2009-03-29  Greg Bolsinga  <bolsinga@apple.com>

        Fix build break.

        * platform/network/mac/ResourceHandleMac.mm:
        (-[WebCoreResourceHandleAsDelegate connection:didReceiveResponse:]):

2009-03-29  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/6734424> Update order file for WebCore

        There is now a iPhone-specific order file.

        * Configurations/WebCore.xcconfig:
        * WebCore.iPhone.order: Added.
        * WebCore.xcodeproj/project.pbxproj:

2009-03-29  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6704380> Use Mobile Quick Look SPI to convert documents to HTML

        Reviewed by David Carson.

        This change switches previewing of iWork and MS Office documents
        from the MobileQuickLook.webplugin back into WebCore and WebKit
        with an assist from QLPreviewConverter from the MobileQuickLook
        framework.

        The main difference between this implementation and the one used
        in iPhone OS 2.x is that the original documents are streamed
        into QLPreviewConverter through WebCoreResourceHandleAsDelegate
        and the HTML from the converted documents is streamed back out
        through the same objects.  This makes the conversion process
        feel much faster.

        * WebCore.iPhone.exp: Exported
        WebCore::removeQLPreviewConverterForURL(NSURL *) for use in
        -[WebDataSource dealloc].
        * platform/network/ResourceHandle.h:
        (WebCore::addQLPreviewConverterForURL): Added declaration.
        (WebCore::removeQLPreviewConverterForURL): Ditto.
        * platform/network/mac/ResourceHandleMac.mm: Soft link the
        MobileQuickLook framework.
        (WebCore::QLPreviewConverterDictionary): Static method that
        returns an NSMutableDictionary.  This object holds on to
        QLPreviewConverter objects by unique URL.  Each converter object
        must stay alive while the page is loading so that it may return
        related resources (images, CSS, JavaScript, iframe content).
        (WebCore::QLPreviewGetSupportedMIMETypesSet): Cached the NSSet
        in a static value so we don't have to call out to
        MobileQuickLook every time.
        (WebCore::addQLPreviewConverterForURL): Added.  Called from
        -[WebCoreResourceHandleAsDelegate connection:didReceiveResponse:].
        (WebCore::removeQLPreviewConverterForURL): Added.  Called from
        -[WebDataSource dealloc].
        (-[WebCoreResourceHandleAsDelegate initWithHandle:]): Set new
        m_converter and m_finishedLoadingDataIntoConverter ivars to
        default values.
        (-[WebCoreResourceHandleAsDelegate dealloc]): Release
        m_converter ivar.
        (-[WebCoreResourceHandleAsDelegate connection:willSendRequest:redirectResponse:]):
        If QLPreviewConverter is being used, convert the URL in the
        NSURLRequest into a new request that is relative to the
        generated URL of the main document.
        (-[WebCoreResourceHandleAsDelegate connection:didReceiveResponse:]):
        If QLPreviewConverter will handle the MIME type returned,
        instantiate a converter and store it in m_converter.  Replace
        the current NSURLResponse with a new object containing a
        generated URL, and add the converter and generated URL to the
        QLPreviewConverterDictionary.
        (-[WebCoreResourceHandleAsDelegate connection:didReceiveData:lengthReceived:]):
        If we are converting the incoming bytes into HTML and we have
        not started receiving the HTML, append the incoming data to the
        converter and return early.
        (-[WebCoreResourceHandleAsDelegate connectionDidFinishLoading:]):
        If we are converting the incoming bytes into HTML and we have
        not started receiving the HTML, this delegate call signifies
        that we're done with the original incoming bytes, so tell the
        converter to start sending the converted HTML back and set
        m_finishedLoadingDataIntoConverter to YES to signal the state
        change.
        (-[WebCoreResourceHandleAsDelegate connection:didFailWithError:]):
        If we were converting the incoming bytes into HTML and an error
        occurred, remove the converter from QLPreviewConverterDictionary,
        tell the converter to stop what it's doing and then release it.

2009-03-27  Chris Fleizach  <cfleizach@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/6729334> AX: add visited link trait

        Adds a visited trait for visited links.
        Also removes the simulator vs. device differences, since Accessibility code is building for the simulator now.

        * page/iphone/AccessibilityObjectWrapperIPhone.mm:
        (-[AccessibilityObjectWrapper accessibilityTraits]):

2009-03-27  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/6726823> iPhone WebKit often has empty Obj-C methods

        Remove Drag, ContextMenu, and Inspector support. Remove unused WebKit classes from build as well.
        Clean up PLATFORM(IPHONE) in these unbuilt on iPhone files.

        * Configurations/WebCore.xcconfig:
        * WebCore.base.exp:
        * WebCore.xcodeproj/project.pbxproj:
        * bindings/js/JSDOMWindowBase.cpp:
        (WebCore::JSDOMWindowBase::supportsProfiling):
        * dom/Document.cpp:
        (WebCore::Document::setFocusedNode):
        (WebCore::Document::addMessage):
        (WebCore::Document::resourceRetrievedByXMLHttpRequest):
        * dom/EventTargetNode.cpp:
        (WebCore::EventTargetNode::defaultEventHandler):
        * dom/ScriptExecutionContext.h:
        (WebCore::):
        * loader/EmptyClients.h:
        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::detachFromParent):
        (WebCore::FrameLoader::loadedResourceFromMemoryCache):
        (WebCore::FrameLoader::loadItem):
        * page/AXObjectCache.h:
        * page/Chrome.cpp:
        (WebCore::Chrome::mouseDidMoveOverElement):
        * page/Console.cpp:
        (WebCore::Console::count):
        (WebCore::Console::profile):
        (WebCore::Console::profileEnd):
        (WebCore::Console::time):
        (WebCore::Console::timeEnd):
        (WebCore::Console::group):
        (WebCore::Console::groupEnd):
        * page/DragController.cpp:
        * page/EventHandler.cpp:
        (WebCore::EventHandler::handleMousePressEvent):
        * page/Page.cpp:
        (WebCore::Page::Page):
        (WebCore::Page::~Page):
        * page/Page.h:
        * page/mac/AXObjectCacheMac.mm:
        * page/mac/AccessibilityObjectWrapper.mm:
        (+[AccessibilityObjectWrapper initialize]):
        * page/mac/DragControllerMac.mm:
        * page/mac/WebCoreViewFactory.h:
        * platform/LocalizedStrings.h:
        * platform/iphone/ContextMenuIPhone.mm: Removed.
        * platform/iphone/ContextMenuItemIPhone.mm: Removed.
        * platform/iphone/DragImageIPhone.mm: Removed.
        * platform/iphone/LocalizedStringsIPhone.mm:
        * platform/mac/DragDataMac.mm:
        * rendering/RenderTextControlSingleLine.cpp:
        (WebCore::RenderTextControlSingleLine::itemText):
        * storage/Database.cpp:
        (WebCore::Database::openDatabase):
        * svg/graphics/SVGImage.cpp:
        (WebCore::SVGImage::dataChanged):
        * xml/XMLHttpRequest.cpp:
        (WebCore::XMLHttpRequest::didFinishLoading):

2009-03-27  Andre Boule  <aboule@apple.com>

        Reviewed by Dan Bernstein.
        <rdar://problem/6577605> AB: Any diacritical in Arabic text, is displayed with a last resort character in Arabic web pages
        Force Arabic text to go to the system fallback font.

        * platform/graphics/FontFastPath.cpp:
        (WebCore::Font::glyphDataForCharacter):

2009-03-26  Justin Garcia  <justin.garcia@apple.com>

        Rubber stamped by Brad Moore.

        <rdar://problem/6722992> After sending a text message, shaking offers "Undo typing" even though there is nothing to undo

        Any time text is programmatically changed we want to clear the Undo stack.  This will both fix problems like this one
        and avoid corrupting the Undo stack by performing non-Undoable operations on the DOM.

        * editing/Editor.cpp:
        (WebCore::Editor::setTextAsChildOfElement):

2009-03-26  Simon Fraser  <simon.fraser@apple.com>

        Rubber stamped by Dave Kilzer

        Merge WebKit ToT r42024

        2009-03-26  Simon Fraser  <simon.fraser@apple.com>

                Reviewed by Dave Hyatt

                https://bugs.webkit.org/show_bug.cgi?id=24864

                Change the terminology from "inner content layer" to "direct compositing"
                for cases where we can push an image directly over to the compositing system,
                without having to draw it.

                Clean up much of the code which looks at style to determine if this is possible,
                and fix some bugs when backgrounds change dynamically.

                * rendering/RenderLayerBacking.cpp:
                (WebCore::hasBorderOutlineOrShadow):
                (WebCore::hasBoxDecorations):
                (WebCore::hasBoxDecorationsWithBackgroundImage):
                (WebCore::RenderLayerBacking::canBeSimpleContainerCompositingLayer):
                (WebCore::RenderLayerBacking::canUseDirectCompositing):
                (WebCore::RenderLayerBacking::detectDrawingOptimizations):
                (WebCore::RenderLayerBacking::rendererContentChanged):
                (WebCore::RenderLayerBacking::updateImageContents):
                * rendering/RenderLayerBacking.h:

2009-03-26  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6727687> MERGE: iPhone: BidiResolver::createBidiRunsForLine can create runs extending beyond the end

        Merged ToT WebKit r42013.

    2009-03-26  Dan Bernstein  <mitz@apple.com>

        Reviewed by Anders Carlsson.

        - fix <rdar://problem/6725042> BidiResolver::createBidiRunsForLine can
          create runs extending beyond the end

        No test because Safari does not use this version of
        createBidiRunsForLine() with the end iterator not pointing to the end
        of the text run.

        * platform/text/BidiResolver.h:
        (WebCore::BidiResolver::appendRun): Cap the end of the run at the end
        of the line and set the reachedEndOfLine flag. This mirrors the logic
        in the specialized version of appendRun() in bidi.cpp, which is why the
        problem did not show up in HTML. Also avoid creating empty runs.

2009-03-26  Simon Fraser  <simon.fraser@apple.com>

        Rubber stamped by Dave Kilzer

        Merge WebKit ToT r41996

        2009-03-25  Dean Jackson  <dino@apple.com>

                Reviewed by Simon Fraser

                https://bugs.webkit.org/show_bug.cgi?id=23361

                When using hardware compositing, some images can be directly
                rendered by the hardware - no need to draw them into a separate
                context, therefore saving memory.
                Only images with certain style properties can be directly
                composited - basically anything that is not a simple image requires
                the usual rendering path (eg. if the image has borders).

                Test: compositing/direct-image-compositing.html

                * manual-tests/resources/simple_image.png: Added.
                * manual-tests/simple-image-compositing.html: Added.
                * platform/graphics/Image.h:
                (WebCore::Image::startAnimation):
                    - move this to public
                * rendering/RenderImage.cpp:
                (WebCore::RenderImage::imageChanged):
                    - poke compositing layer if image has changed
                (WebCore::RenderImage::notifyFinished):
                    - let the compositing layer know that it can render the image
                * rendering/RenderImage.h:
                * rendering/RenderLayer.cpp:
                (WebCore::RenderLayer::rendererContentChanged):
                * rendering/RenderLayer.h:
                * rendering/RenderLayerBacking.cpp:
                (WebCore::RenderLayerBacking::canUseInnerContentLayer):
                (WebCore::RenderLayerBacking::detectDrawingOptimizations):
                (WebCore::RenderLayerBacking::rendererContentChanged):
                * rendering/RenderLayerBacking.h:
                    - code to hook up direct compositing of images where
                      possible

2009-03-26  Simon Fraser  <simon.fraser@apple.com>

        Merge WebKit ToT r42009

        2009-03-26  Simon Fraser  <simon.fraser@apple.com>

                Reviewed by Dave Hyatt

                https://bugs.webkit.org/show_bug.cgi?id=23914

                Tests: compositing/overflow/ancestor-overflow.html
                       compositing/overflow/parent-overflow.html

                * rendering/RenderLayer.cpp:
                (WebCore::RenderLayer::calculateClipRects):
                * rendering/RenderLayer.h:
                (WebCore::ClipRects::infiniteRect):
                New static method that returns a large rect that is used by the clipping
                logic.

                * rendering/RenderLayerBacking.cpp:
                (WebCore::RenderLayerBacking::updateGraphicsLayerGeometry):
                Use parentClipRects(), rather than calculateRects(), to compute the overflow
                rect that we'll use to create a masking layer for composited clipping.

                * rendering/RenderLayerCompositor.cpp:
                (WebCore::RenderLayerCompositor::clippedByAncestor):
                Use parentClipRects() to see whether there's a layer between us and our
                compositing ancestor which applies clipping.

                (WebCore::RenderLayerCompositor::clipsCompositingDescendants):
                A layer which imposes clipping to its children doesn't have to be a stacking
                context; it might be a normal flow layer; in either case, we can rely on the
                hasCompositingDescendant() bit.

2009-03-26  Justin Garcia  <justin.garcia@apple.com>

        <rdar://problem/6701560> RenderBox::height can't assert isRenderInline()

        Merged http://trac.webkit.org/changeset/40864

        2009-02-11  Sam Weinig  <sam@webkit.org>

            Reviewed by David Hyatt.

            Remove unneeded ASSERTS.

            * rendering/RenderBox.h:
            (WebCore::RenderBox::width):
            (WebCore::RenderBox::height):
            (WebCore::RenderBox::size):
            (WebCore::RenderBox::frameRect):

2009-03-25  Justin Garcia  <justin.garcia@apple.com>

        Rubber stamped by Ken.

        <rdar://problem/6657859> [UIFieldEditor setText] test app regressed 1.57s -> 2.12s from Timberline

        Eliminate some selection related work in setTextAsChildOfElement, and eliminate an unnecessary
        respondToChangedContents call.  New time should be ~1.5s.

        * editing/Editor.cpp:
        (WebCore::Editor::setTextAsChildOfElement): As a side effect this function sets a caret selection after
        the inserted content.  Much of what this function does is more expensive if there is a selection, so clear
        it since it's going to change anyway.
        Remove a call to WebEditorClient::respondToChangedContents near the beginning of this function.  It's
        expensive and we call it at the end of the function, when all the DOM modifications are complete.  This
        matches the behavior of editing operations.
        Added a note about removing the body during this function, which seems dangerous and more expensive
        in the common case where we're inserting just one item.

2009-03-25  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by David Kilzer and Antti Koivisto.

        <rdar://problem/6717589> Crash restoring tabs

        The timeouts are now paused from the web thread, preventing the crash from happening.
        In addition, investigation showed that the timers are paused state was the same as
        the window is suspended state, so that state moved into WebCore::Frame from WKWindow.
        In addition this code was cleaned up to be more WebCore like.

        Also be sure to initialize m_singleLineSelectionBehavior.

        * WebCore.iPhone.exp:
        * bindings/js/JSDOMWindowBase.cpp:
        (WebCore::JSDOMWindowBase::installTimeout):
        * page/DOMTimer.cpp:
        (WebCore::DOMTimer::fired):
        * page/Frame.cpp:
        (WebCore::Frame::Frame):
        * page/Frame.h:
        (WebCore::Frame::timersPaused):
        * page/iphone/FrameIPhone.mm:
        (WebCore::Frame::setTimersPaused):
        * platform/ScrollView.h:
        * platform/iphone/ScrollViewIPhone.mm:
        * rendering/RenderObject.cpp:
        (WebCore::RenderObject::willRenderImage):
        * wak/WKWindow.cpp:
        (WKWindowCreate):
        * wak/WKWindow.h:

2009-03-25  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6099988> Attached e-mail crashes Mail on viewing (recursion; stack blown)

        Merged ToT WebKit r41938.

        Test: platform/iphone-simulator/fast/parser/block-nesting-cap-iphone.html

        Because iPhone WebKit parses on a secondary thread, the
        cMaxBlockDepth threshold value was changed from 4096 to 768 to
        prevent crashes.

    2009-03-24  Dan Bernstein  <mitz@apple.com>

        Reviewed by Darin Adler.

        - fix <rdar://problem/6107874> by capping the nesting depth of
          "block-level" elements generated by the parser

        Test: fast/parser/block-nesting-cap.html

        * html/HTMLParser.cpp:
        (WebCore::HTMLParser::HTMLParser):
        (WebCore::HTMLParser::insertNode):
        (WebCore::HTMLParser::pushBlock):
        (WebCore::HTMLParser::popOneBlockCommon):
        (WebCore::HTMLParser::freeBlock):
        * html/HTMLParser.h:

2009-03-24  Justin Garcia  <justin.garcia@apple.com>

        Reviewed by Brad Moore.

        * editing/Selection.cpp:
        (WebCore::Selection::adjustForEditableContent): Early return in a common case to avoid the expense
        of computing highestEditableRoot.

2009-03-24  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6261352> Bogus "Cannot open page" dialog when clicking on Yahoo! TV page (Kirkwood only)

        Merged ToT WebKit r41953.

    2009-03-24  David Kilzer  <ddkilzer@apple.com>

        Bug 23310: Setting an absolute path (/abs) on an <iframe> with no src doesn't resolve the URL properly

        <https://bugs.webkit.org/show_bug.cgi?id=23310>

        Reviewed by Darin Adler.

        Test: fast/frames/iframe-no-src-set-location.html

        * dom/Document.cpp:
        (WebCore::Document::completeURL): If m_baseURL is empty or is
        about:blank and we have a parent document, use the parent
        document's URL for the base when completing a new URL.

2009-03-24  Simon Fraser  <simon.fraser@apple.com>

    Rubber-stamped by David Kilzer

    Merge ToT WebKit r41952

    2009-03-24  Simon Fraser  <simon.fraser@apple.com>

            Reviewed by Dave Hyatt

            https://bugs.webkit.org/show_bug.cgi?id=24659

            When hit-testing 3d-transformed layers, it doesn't make sense to project the hitTestRect
            into the coordinate space of the layer, and doing so can result in pathalogical quads
            that break hit testing. In that case, simply use the same bounds as used for painting,
            which are the composited bounds for this layer.

            Test: transforms/3d/hit-testing/rotated-hit-test.html

            * rendering/RenderLayer.cpp:
            (WebCore::RenderLayer::hitTestLayer):

2009-03-24  Simon Fraser  <simon.fraser@apple.com>

    Rubber-stamped by David Kilzer

    Merge ToT WebKit r41951

    2009-03-24  Simon Fraser  <simon.fraser@apple.com>

            Reviewed by Dave Hyatt

            https://bugs.webkit.org/show_bug.cgi?id=24436

            When compositing is enabled, painting and hit testing end up using different
            clipping roots, because, for painting, every composited layer is a clipping root,
            but for hit testing only layers with transforms are. To fix this, we use
            temporary clip rects for hit testing, if the page is in compositing mode.

            * rendering/RenderLayer.cpp:
            (WebCore::RenderLayer::paintLayer):
            (WebCore::RenderLayer::hitTestLayer):
            (WebCore::RenderLayer::parentClipRects):
            (WebCore::RenderLayer::calculateRects):
            * rendering/RenderLayer.h:

2009-03-24  Justin Garcia  <justin.garcia@apple.com>

        <rdar://problem/6574033> Web form elements (text fields and text areas) do not support selection/cut/copy/etc. and don't display the caret

        * editing/Editor.cpp:
        (WebCore::Editor::canCut): We can cut as long as we can delete.  Copy is handled in UIKit.
        (WebCore::Editor::cut): Don't do any of the pasteboard related work on the phone, that's handled in UIKit.
        * editing/EditorCommand.cpp:
        (WebCore::executeCut): Do Editor::cut() on all platforms.

2009-03-24  Antti Koivisto  <antti@apple.com>

        Rubber stamped by Andre Boule.

        <rdar://problem/6567288> REGRESSION: Bring back different text anti-aliasing in landscape vs. portrait

        * platform/iphone/TiledSurface.mm:
        (WebCore::TiledSurface::drawLayer):
        * wak/WAKWindow.h:
        * wak/WAKWindow.mm:
        (-[WAKWindow setUseOrientationDependentFontAntialiasing:]):
        (-[WAKWindow useOrientationDependentFontAntialiasing]):
        (+[WAKWindow setOrientationProvider:]):
        (+[WAKWindow hasLandscapeOrientation]):
        * wak/WKWindow.h:

2009-03-23  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by David Kilzer.

        https://bugs.webkit.org/show_bug.cgi?id=24771

        GeoLocation timestamp is bogus

        * platform/iphone/GeolocationServiceCoreLocation.mm:
        (-[GeoLocationManager sendLocation:]):

2009-03-23  David Kilzer  <ddkilzer@apple.com>

        Follow-up fix to <rdar://problem/6668238> WebCore is registering text encodings needlessly from KURL constuctor

        Merged ToT WebKit r41916.

    2009-03-23  Darin Adler  <darin@apple.com>

        Reviewed by Antti Koivisto.

        Based on a patch by Nico Weber <nicolasweber@gmx.de>

        Bug 24755: LayoutTests/http/tests/misc/url-in-utf16le.html regression
        https://bugs.webkit.org/show_bug.cgi?id=24755

        * platform/text/TextEncoding.cpp:
        (WebCore::TextEncoding::isUTF7Encoding): Added. Checks if the current encoding
        is UTF7 without loading extended codecs.
        (WebCore::TextEncoding::encodingForFormSubmission): Use isUTF7Encoding() instead
        of comparing with UTF7Encoding(). Eliminate the explicit check of
        noExtendedTextEncodingNameUsed() because that's now handled by the functions
        that this function calls instead.

        * platform/text/TextEncoding.h: Added isUTF7Encoding function.
        Also tweaked formatting a bit.

2009-03-23  Antti Koivisto  <antti@apple.com>

        Reviewed by Dave Carson.

        <rdar://problem/6702258> Page collapses to width of screen on forward navigation

        Export stuff.

        * WebCore.iPhone.exp:

2009-03-23  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Brad Moore, Greg Bolsinga

        <rdar://problem/6642170>

        Fix the initial Copy box to respect CSS transforms, by making -[DOMNode boundingBox]
        respect transforms.

        * bindings/objc/DOM.mm:
        (-[DOMNode boundingBox]):

2009-03-23  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by David Kilzer & Brad Moore.

        <rdar://problem/6711263> crash in WebCore _WAKCopyWrapper after tapping on address view

        Handle NULL cases

        * wak/WAKView.mm:
        (_WAKCopyWrapper):
        (-[WAKView subviews]):

2009-03-23  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6464366> REGRESSION: Fix Debug Console message printed for slow script (10 second) timeout

        Merged ToT WebKit r41912.

    2009-03-23  David Kilzer  <ddkilzer@apple.com>

        Provide JavaScript exception information after slow script timeout

        Reviewed by Oliver Hunt.

        * bindings/js/ScriptController.cpp:
        (WebCore::ScriptController::evaluate): Changed to report
        exceptions for the Interrupted completion type as well.

2009-03-23  Ken Kocienda  <kocienda@apple.com>

        Reviewed by Brad Moore

        Fix for this bug:

        <rdar://problem/6656449> RTL: Implement basics of RTL cursor movement, selection, and cut/copy/paste

        This is the last bit of work to get over the "basics" threshold.
        With this change, ranged selection grabbers (i.e. lollipops) now
        draw in the right place in bidirectional text with base writing
        direction set to RTL.

        * dom/Range.cpp:
        (WebCore::Range::collectSelectionRects): Turn off containsStart/containsEnd bits which are
        not in the startContainer or endContainer.
        * platform/SelectionRect.cpp:
        (WebCore::SelectionRect::SelectionRect): Add containsStart/containsEnd bits so that we
        can rack the right place to draw ranged selection grabbers.
        * platform/SelectionRect.h:
        (WebCore::SelectionRect::containsStart): New bits.
        (WebCore::SelectionRect::containsEnd): Ditto.
        (WebCore::SelectionRect::setContainsStart): Ditto.
        (WebCore::SelectionRect::setContainsEnd): Ditto.
        * rendering/RenderText.cpp:
        (WebCore::RenderText::collectSelectionRects): Set containsStart/containsEnd bits
        if the passed-in start/end match the indices for the inline text box being
        examined.

2009-03-22  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by David Kilzer and Antti Koivisto.

        <rdar://problem/6709763> Cannot set autocapitalize or autocorrect attributes via JavaScript

        These attributes were implemented in quite a non-standard fashion. This adds them to the IDL,
        which makes them settable. HTML can also now set these properties on the <form> tag, and all
        INPUT and TEXTAREA therein will pick up the <form>'s state. This also removes the custom
        stuff for this in DOMUIKitExtensions, as these are now created via the standard DOM ObjC
        path.

        * WebCore.xcodeproj/project.pbxproj:
        * bindings/objc/DOMUIKitExtensions.h:
        * bindings/objc/DOMUIKitExtensions.mm:
        * html/HTMLFormControlElement.cpp:
        (WebCore::HTMLFormControlElement::HTMLFormControlElement):
        (WebCore::HTMLFormControlElement::parseMappedAttribute):
        (WebCore::HTMLFormControlElement::autocorrect):
        (WebCore::HTMLFormControlElement::setAutocorrect):
        (WebCore::HTMLFormControlElement::autocapitalize):
        (WebCore::HTMLFormControlElement::setAutocapitalize):
        * html/HTMLFormControlElement.h:
        * html/HTMLFormElement.cpp:
        (WebCore::HTMLFormElement::autocorrect):
        (WebCore::HTMLFormElement::setAutocorrect):
        (WebCore::HTMLFormElement::autocapitalize):
        (WebCore::HTMLFormElement::setAutocapitalize):
        * html/HTMLFormElement.h:
        * html/HTMLFormElement.idl:
        * html/HTMLInputElement.idl:
        * html/HTMLTextAreaElement.idl:

2009-03-22  Brad Moore  <bradm@apple.com>

		Reviewed by Ken.

		collectSelectionRects was bailing before it found any rects.

		<rdar://problem/6703813> REGRESSION: Precision web selection can easily extend outside of containing block.

        * dom/Range.cpp:
        (WebCore::Range::collectSelectionRects):

2009-03-22  Brad Moore  <bradm@apple.com>

        Reviewed by Greg Bolinga.

		<rdar://problem/6697659> Enable selection during a page load.

		Send a message to the chrome client after every layout.

        * Info.plist:
        * WebCore.xcodeproj/project.pbxproj:
        * loader/EmptyClients.h:
        * page/ChromeClient.h:
        * page/FrameView.cpp:
        (WebCore::FrameView::layout):

2009-03-21  David Carson  <dacarson@apple.com>

        <rdar://problem/6690977> Add anchor tags to the CSS fast path

        Merged ToT WebKit r41796.

    2009-03-17  David Carson  <dacarson@apple.com>

        Reviewed by David Hyatt.

        Add anchor elements to the simple style sheet so that applications that
        are using WebKit just for simple text and links will also take advantage
        of the fast path.

        * css/CSSStyleSelector.cpp:
        (WebCore::elementCanUseSimpleDefaultStyle):

2009-03-21  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by Antti Koivisto.

        <rdar://problem/6689614> REGRESSION: the :focus CSS pseudo-class is not applied

        -[WAKWindow isKeyWindow] now alwasys returns YES, instead of always returning NO
        Add dummy -[WAKWindow attachedSheet] so some WebKit code can compile w/o the preprocessor.

        * html/HTMLFrameElementBase.cpp:
        (WebCore::HTMLFrameElementBase::isFocusable):
        * wak/WAKWindow.h:
        * wak/WAKWindow.mm:
        (-[WAKWindow attachedSheet]):

2009-03-21  Ken Kocienda  <kocienda@apple.com>

        Reviewed by Richard Williamson

        * WebCore.iPhone.exp: Add a couple of additional exports for WebKit's use.
        * editing/Editor.h:
        * editing/iphone/EditorIPhone.mm:
        (WebCore::Editor::setTextAlignmentForChangedBaseWritingDirection):
        New function to change the paragraph-level text alignment when the writing
        direction changes. This is necessary for iPhone since UIKit imposes a top-level
        text alignment in the enclosing div for all text in the standard widgets
        (our public API allows developers to control alignment on a widget-level basis).

2009-03-21  Antti Koivisto  <antti@apple.com>

        Reviewed by Yosen Lin.

        <rdar://problem/6290163> WebCore::hasEnoughMemoryFor uses incorrect methodology to determine available memory

        Add purgeable pages to the free count.

        * platform/iphone/SystemMemoryIPhone.cpp:
        (WebCore::hasEnoughMemoryFor):

2009-03-20  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/6604373> Mail crashed on N88 with 7A213

        Make this method much less insane. It doesn't allocate 2 by
        512*4 bytes arrays on the stack. It also doesn't iterate over
        the arrays twice, nor copy them 2 times.

        * wak/WAKView.mm:
        (_WAKCopyWrapper):
        (-[WAKView subviews]):

2009-03-20  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6702593> iPhone: ZDI-CAN-464: Apple Safari Malformed SVGList Parsing Code Execution Vulnerability

        Applied future ToT WebKit fix.

    2009-03-19  Oliver Hunt  <oliver@apple.com>

        Reviewed by NOBODY (OOPS!).

        <rdar://problem/6702386> Incorrect bound check in SVGList::insertItemBefore

        SVGList::insertItemBefore would not perform a bounds check on the
        index it was provided, potentially leading to a buffer overflow.

        Test: svg/dom/svglist-exception-on-out-bounds-error.html

        * svg/SVGList.h:
        (WebCore::SVGList::insertItemBefore):

2009-03-20  Antti Koivisto  <antti@apple.com>

        <rdar://problem/6617939> REGRESSION: Failure in LayoutTests/fast/encoding/char-decoding.html

         Merged ToT WebKit r41807.

    2009-03-18  Mark Rowe  <mrowe@apple.com>

            Reviewed by Alexey Proskuryakov.

            Fix fast/encoding/char-decoding.html with recent ICU.

        * platform/text/TextCodecICU.cpp:
        (WebCore::TextCodecICU::decode):

2009-03-20  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6508707> iPhone: DoS setting large value for HTMLSelectElement.length

        Merged ToT WebKit r41741.

    2009-03-16  Sam Weinig  <sam@webkit.org>

        Reviewed by Anders Carlsson.

        Fix for <rdar://problem/6320555>
        Add an upper limit for setting HTMLSelectElement.length.

        Test: fast/forms/select-max-length.html

        * html/HTMLSelectElement.cpp:
        (WebCore::HTMLSelectElement::setOption):
        (WebCore::HTMLSelectElement::setLength):

2009-03-20  Antti Koivisto  <antti@apple.com>

        Reviewed by Dave Carson.

        <rdar://problem/6702258> Page collapses to width of screen on forward navigation

        We are firing the didReceiveDocType delegate too early when page is restored from
        the cache. The frame still has the previous document at that point. Since google
        page uses mobile doctype, it will get special handling that gets applied on a
        wrong page.

        Fix by moving the firing to later point in time.

        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::transitionToCommitted):
        (WebCore::FrameLoader::opened):

2009-03-20  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by Antti Koivisto and Dave Carson.

        <rdar://problem/6706632> ASSERT in WebCore::HTMLTokenizer::~HTMLTokenizer

        When the page is stopping, end this tokenization gracefully... with a goto.

        * html/HTMLTokenizer.cpp:
        (WebCore::HTMLTokenizer::write):

2009-03-19  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/5660638> PURPLE FIXME: Enable use of CGContextDrawTiledImage instead of CGPattern

        Reviewed by Simon Fraser.

        * platform/graphics/cg/ImageCG.cpp:
        (WebCore::BitmapImage::checkForSolidColor): With the fix for
        <rdar://problem/6695595> in CoreGraphics, we may now enable
        the optimized path that uses CGContextDrawTiledImage().

2009-03-19  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6685956> iPhone: Access control checks are different in cached and uncached cases (24614)

        Merged ToT WebKit r41548, 41701 and r41759.

    2009-03-17  Alexey Proskuryakov  <ap@webkit.org>

        Reviewed by Sam Weinig.

        https://bugs.webkit.org/show_bug.cgi?id=24614
        Access control checks are different in cached and uncached cases

        Test: http/tests/xmlhttprequest/access-control-basic-non-simple-deny-cached.html

        * loader/CrossOriginAccessControl.cpp:
        (WebCore::isOnAccessControlSimpleRequestMethodWhitelist): Factored out simple method
        check for use in both cached and uncached cases. In cached case, an old definition that
        omitted HEAD was still used.
        (WebCore::isOnAccessControlSimpleRequestHeaderWhitelist): Check that content type has an
        allowed value. This is needed in all call sites. Also changed to compare MIME type, not
        content type.
        (WebCore::isSimpleCrossOriginAccessRequest): Use the above methods.

        * loader/CrossOriginAccessControl.h: Expose isOnAccessControlSimpleRequestMethodWhitelist.

        * loader/CrossOriginPreflightResultCache.cpp:
        (WebCore::CrossOriginPreflightResultCacheItem::allowsCrossOriginMethod):
        (WebCore::CrossOriginPreflightResultCacheItem::allowsCrossOriginHeaders):
        Use the new checks for simple method and header.

    2009-03-14  Alexey Proskuryakov  <ap@webkit.org>

        Reviewed by Darin Adler.

        https://bugs.webkit.org/show_bug.cgi?id=24545
        Make cross-site XHR simple request definition match current spec draft

        Tests: http/tests/xmlhttprequest/access-control-basic-post-fail-non-simple-content-type.html
               http/tests/xmlhttprequest/access-control-basic-whitelist-request-headers.html

        * loader/CrossOriginAccessControl.cpp:
        (WebCore::isOnAccessControlSimpleRequestHeaderWhitelist): Added Content-Language.
        (WebCore::isSimpleCrossOriginAccessRequest): Added HEAD. Restricted content types to those
        that could be sent via form submission.

    2009-03-10  Alexey Proskuryakov  <ap@webkit.org>

        Reviewed by Darin Adler.

        https://bugs.webkit.org/show_bug.cgi?id=24462
        Move cross-origin access control code out of XMLHttpRequest

        Step 1: move preflight result cache and access control helper functions.

        No change in behavior, so no test.

        * GNUmakefile.am:
        * WebCore.pro:
        * WebCore.scons:
        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.xcodeproj/project.pbxproj:
        * WebCoreSources.bkl:
        * loader/CrossOriginAccessControl.cpp: Added.
        (WebCore::isOnAccessControlSimpleRequestHeaderWhitelist):
        (WebCore::isSimpleCrossOriginAccessRequest):
        (WebCore::createAllowedCrossOriginResponseHeadersSet):
        (WebCore::isOnAccessControlResponseHeaderWhitelist):
        (WebCore::passesAccessControlCheck):
        * loader/CrossOriginAccessControl.h: Added.
        * loader/CrossOriginPreflightResultCache.cpp: Added.
        (WebCore::parseAccessControlMaxAge):
        (WebCore::addToAccessControlAllowList):
        (WebCore::parseAccessControlAllowList):
        (WebCore::CrossOriginPreflightResultCacheItem::parse):
        (WebCore::CrossOriginPreflightResultCacheItem::allowsCrossOriginMethod):
        (WebCore::CrossOriginPreflightResultCacheItem::allowsCrossOriginHeaders):
        (WebCore::CrossOriginPreflightResultCacheItem::allowsRequest):
        (WebCore::CrossOriginPreflightResultCache::shared):
        (WebCore::CrossOriginPreflightResultCache::appendEntry):
        (WebCore::CrossOriginPreflightResultCache::canSkipPreflight):
        * loader/CrossOriginPreflightResultCache.h: Added.
        (WebCore::CrossOriginPreflightResultCacheItem::CrossOriginPreflightResultCacheItem):
        (WebCore::CrossOriginPreflightResultCache::CrossOriginPreflightResultCache):
        * xml/XMLHttpRequest.cpp:
        (WebCore::XMLHttpRequestStaticData::XMLHttpRequestStaticData):
        (WebCore::XMLHttpRequest::createRequest):
        (WebCore::XMLHttpRequest::makeCrossOriginAccessRequest):
        (WebCore::XMLHttpRequest::makeSimpleCrossOriginAccessRequest):
        (WebCore::XMLHttpRequest::makeCrossOriginAccessRequestWithPreflight):
        (WebCore::XMLHttpRequest::didReceiveResponse):
        (WebCore::XMLHttpRequest::didReceiveResponsePreflight):
        * xml/XMLHttpRequest.h:

2009-03-19  Ken Kocienda  <kocienda@apple.com>

        Reviewed by Justin Garcia

        Workaround for this bug:

        <rdar://problem/6701560> RenderBox::height can't assert isRenderInline()

        I removed the asserts and filed the bug. Justin said he would look into
        it further.

        * rendering/RenderBox.h:
        (WebCore::RenderBox::width)
        (WebCore::RenderBox::height)

2009-03-18  Ken Kocienda  <kocienda@apple.com>

        Justin Garcia and Brad Moore

        Part of fix for these bugs:

        <rdar://problem/6645465> Selection anchor jumps on autoscroll
        <rdar://problem/6671047> Overlapping separate selections with rich text in Mail
        <rdar://problem/6630698> RTL: Copy and Paste (Arabic Text + Latin Text)
        <rdar://problem/6630725> RTL: Selection (Arabic Text +Arabic Digits )
        <rdar://problem/6630880> RTL: Selection (Latin+Arabic)
        <rdar://problem/6648049> RTL: Selection handles don't move as expected with right to left text
        <rdar://problem/6671081> Dot on the ending selection handle can get dislodged

        In full, this change improves how ranged selections are set and updated.
        Bidi-savvy selections and better ranged selection highlight rectangles are the main enhancements.

        * WebCore.iPhone.exp: Add a couple SelectionController exports (setBase/setExtent)
        * WebCore.xcodeproj/project.pbxproj: Add SelectionRect class.
        * dom/Range.cpp:
        (WebCore::Range::collectSelectionRects): This function is
          similar in spirit to addLineBoxRects(), but it annotates the
          returned rectangles with additional state which helps the iPhone
          draw selections in its unique way. Uses new SelectionRect to
          bring this information together.
        * dom/Range.h: Ditto.
        * rendering/RenderContainer.cpp:
        (WebCore::RenderContainer::collectSelectionRects): Ditto.
        * rendering/RenderContainer.h: Ditto.
        * rendering/RenderObject.cpp:
        (WebCore::RenderObject::collectSelectionRects): Ditto.
        * rendering/RenderObject.h: Ditto.
        * rendering/RenderText.cpp:
        (WebCore::RenderText::collectSelectionRects): Ditto.
        * rendering/RenderText.h: Ditto.
        * platform/SelectionRect.cpp: Added. New class for encapsulating rectangles with
          rendering information. This is the object used by the various collectSelectionRects
          functions.
        (WebCore::SelectionRect::SelectionRect):
        * platform/SelectionRect.h: Added. Ditto.

2009-03-19  Simon Fraser  <simon.fraser@apple.com>

    Merge ToT WebKit r41840

    2009-03-19  Simon Fraser  <simon.fraser@apple.com>

            Reviewed by Dave Hyatt

            https://bugs.webkit.org/show_bug.cgi?id=24686

            When hit testing a RenderLayer whose parent lives in a preserves-3D hierarchy,
            we need to compare the computed z-offset with the depth-test z-offset before
            deciding that such a RenderLayer was hit. This fixes an issue, tested by the
            3d-point-mapping-overlapping.html test, where the child of a transformed element
            is found by hit testing, even when some other element with greater Z overlaps
            them both.

            Improved the code by adding a utility method, isHitCandidate(), which computes and tests
            z-depth when necessary.

            Tests: transforms/3d/point-mapping/3d-point-mapping-coplanar.html
                   transforms/3d/point-mapping/3d-point-mapping-overlapping.html

            * rendering/RenderLayer.cpp:
            (WebCore::isHitCandidate):
            (WebCore::RenderLayer::hitTestLayer):

2009-03-18  David Carson  <dacarson@apple.com>

        Reviewed by Justin Garcia

        <rdar://problem/6662747> 7A237 / Trying to copy an image from mail is hanging device and never copying

        Add a new method to retrieve the mimetype of the image, and change the signature of the
        createNSDataRepresentation method to now take a boolean indicating if you would like the raw encoded
        image or the decoded image.
        This change now allows access to the encoded native image data, so that we can put it on the pasteboard.

        * bindings/objc/DOMUIKitExtensions.h:
        * bindings/objc/DOMUIKitExtensions.mm:
        (-[DOMHTMLImageElement createNSDataRepresentation:]):
        (-[DOMHTMLImageElement mimeType]):

2009-03-18  Brad Moore  <bradm@apple.com>

        Reviewed by Greg Bolsinga.

		Exporting a bit of information from the render tree to be used for
		web selection.

        * bindings/objc/DOMUIKitExtensions.h:
        * bindings/objc/DOMUIKitExtensions.mm:
        (-[DOMNode containsOnlyInlineObjects]):
        (-[DOMNode isSelectableBlock]):

2009-03-18  Paul Knight  <pknight@apple.com>

        <rdar://problem/6645804> rootEditableElement exposed in JS even though contentEditable is disabled

        Reviewed by David Kilzer.

        * dom/Node.idl:
        Remove rootEditableElement.

2009-03-18  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/5854998> Setting display: none on an <embed> has no effect

        Merged ToT WebKit r41209.

    2009-02-24  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Anders Carlsson

        https://bugs.webkit.org/show_bug.cgi?id=15081

        Make display:none work for applet, emebed and object elements
        by calling rendererIsNeeded() on superclasses.

        Tests: fast/replaced/applet-display-none.html
               fast/replaced/embed-display-none.html
               fast/replaced/object-display-none.html

        * html/HTMLAppletElement.cpp:
        (WebCore::HTMLAppletElement::rendererIsNeeded):
        * html/HTMLElement.cpp:
        (WebCore::HTMLElement::rendererIsNeeded):
        * html/HTMLEmbedElement.cpp:
        (WebCore::HTMLEmbedElement::rendererIsNeeded):
        * html/HTMLObjectElement.cpp:
        (WebCore::HTMLObjectElement::rendererIsNeeded):

2009-03-18  Eric Carlson  <eric.carlson@apple.com>

        Merge r41816.

    2009-03-18  Eric Carlson  <eric.carlson@apple.com>

        Reviewed by Simon Fraser.

        Fix for <rdar://problem/6685235>
        <video> element poster cannot be set dynamically if not originally set up in HTML

        Allocate the media engine immediately so the plug-in proxy is available for
        scripting right away.

        * platform/graphics/MediaPlayer.cpp:
        (WebCore::MediaPlayer::MediaPlayer):

2009-03-18  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/6694713> PlatformMouseEvent::eventNumber() is not needed for iPhone

        Remove this data member the use in EventHandler. mouse events to not activate views
        on iPhone.

        * page/EventHandler.cpp:
        (WebCore::EventHandler::EventHandler):
        * page/EventHandler.h:
        * page/mac/EventHandlerMac.mm:
        (WebCore::EventHandler::eventActivatedView):
        * platform/PlatformMouseEvent.h:
        (WebCore::PlatformMouseEvent::eventNumber):
        * platform/iphone/PlatformMouseEventIPhone.mm:
        (WebCore::PlatformMouseEvent::PlatformMouseEvent):

2009-03-18  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Antti Koivisto

        <rdar://problem/6670378>

        Limit the phone-specific hack that indents rounded borders in by 0.5px, which
        was done to make buttons look prettier on dark backgrounds (<rdar://problem/4947188>),
        to just single line text fields.

        * rendering/RenderBox.cpp:
        (WebCore::RenderBox::paintFillLayerExtended):

2009-03-18  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Greg Bolsinga

        Remove an iphone-specific #include that is no longer needed.

        * rendering/RenderView.cpp:

2009-03-18  Antti Koivisto  <antti@apple.com>

        Reviewed by Dave Kilzer.

        <rdar://problem/6593353> REGRESSION: CSS style visibility:hidden not respected for iframe (wsj.com)

        - add [WAKView _setDrawsOwnDescendants:] to disable automatic subview painting
        - implement Widget::paint for the phone so that subframe painting works like it does on desktop
        - make WKViewDisplayRect simply draw the current view, not the entire hierarchy
        - remove some dead code relating to dirty region tracking in WAKViews

        * WebCore.iPhone.exp:
        * platform/iphone/WidgetIPhone.mm:
        (WebCore::Widget::paint):
        * wak/WAKView.h:
        * wak/WAKView.mm:
        (-[WAKView setNeedsDisplay:]):
        (-[WAKView needsDisplay]):
        (-[WAKView displayIfNeeded]):
        (-[WAKView _setDrawsOwnDescendants:]):
        * wak/WKScrollView.c:
        (_WKScrollViewSetDocumentViewOrigin):
        * wak/WKView.cpp:
        (_WKViewDealloc):
        (WKViewInitialize):
        (WKViewSetNeedsDisplay):
        (WKViewSetNeedsDisplayInRect):
        (_WKViewDraw):
        (WKViewDisplayRect):
        (WKViewSetIsHidden):
        * wak/WKView.h:

2009-03-18  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6693944> WebCore should REALLY stop using GSEventGetEventNumber()

        Reviewed by David Carson.

        * platform/iphone/PlatformMouseEventIPhone.mm:
        (WebCore::PlatformMouseEvent::PlatformMouseEvent): Replaced call
        to GSEventGetEventNumber() with 0.

2009-03-18  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6684080> REGRESSION: DOCX files can't be previewed in MobileSafari with text/plain MIME type

        Reviewed by Antti Koivisto.

        The bug was that ResourceResponse::platformLazyInit() was using
        -[WebNSURLResponse(WebCoreURLResponse) _webcore_MIMEType] to get
        the MIME type for the response and doing a different set of
        MIME-type sniffing than MobileQuickLook was doing.

        The fix is to replace WebCoreURLResponse.mm with an iPhone-only
        version that does the MobileQuickLook MIME type sniffing and to
        remove the NSProxy implementation.  This brings us closer to
        ToT WebKit by using a separate implementation file for the
        NS[HTTP]URLResponse(WebCoreURLResponse) categories.

        * Configurations/WebCore.xcconfig: Added WebCoreURLResponse.mm
        to EXCLUDED_IPHONE_Platform and WebCoreURLResponseIPhone.mm to
        EXCLUDED_MAC_Platform.
        * WebCore.xcodeproj/project.pbxproj: Removed references to
        WebCoreNSURLResponseWrapper.{h|m} and added references to
        WebCoreURLResponseIPhone.mm.

        * platform/network/iphone/WebCoreNSURLResponseWrapper.h: Removed.
        * platform/network/iphone/WebCoreNSURLResponseWrapper.m: Removed.

        * platform/network/iphone/WebCoreURLResponseIPhone.mm: Added.
        (sniffMIMEType): Moved code here from
        -[WebCoreResourceHandleAsDelegate connection:didReceiveResponse:]
        that sniffs the MIME type using MobileQuickLook.
        (-[NSURLResponse(WebCoreURLResponse) _webcore_MIMEType]): Added.
        Calls sniffMIMEType().
        (-[NSHTTPURLResponse(WebCoreURLResponse) _webcore_MIMEType]): Ditto.

        * platform/network/mac/ResourceHandleMac.mm:
        (-[WebCoreResourceHandleAsDelegate connection:didReceiveResponse:]):
        Removed code that does MIME type sniffing and moved it to
        sniffMIMEType() in WebCoreURLResponseIPhone.mm.

        * platform/network/mac/WebCoreURLResponse.mm:
        (-[NSHTTPURLResponse _webcore_MIMEType]): Removed PLATFORM(IPHONE)
        changes since we no longer compile this file on iPhone WebKit.

2009-03-17  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/6692622> Geolocation error callback not invoked when user declines Geolocation

        Use the method, Luke.

        * page/Geolocation.cpp:
        (WebCore::Geolocation::requestPermission):

2009-03-17  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Greg Bolsinga

        <rdar://problem/6661112>

        Reinstate the transformed highlight region and Copy highlight,
        by using a quad when possible.

        * bindings/objc/DOM.mm:
        (-[DOMNode absoluteQuad]):

2009-03-17  Simon Fraser  <simon.fraser@apple.com>

    Rubber-stamped by David Kilzer

    Merge ToT WebKit r41782

    2009-03-17  Simon Fraser  <simon.fraser@apple.com>

            Reviewed by Dave Hyatt

            https://bugs.webkit.org/show_bug.cgi?id=24632

            Fix repaint issues when composited layers come and go (only applies
            when ACCELERATED_COMPOSITING is turned on).

            * rendering/RenderLayer.cpp:
            (WebCore::RenderLayer::RenderLayer):
            * rendering/RenderLayer.h:
            (WebCore::RenderLayer::mustOverlayCompositedLayers):
            (WebCore::RenderLayer::setMustOverlayCompositedLayers):
            * rendering/RenderLayerBacking.cpp:
            (WebCore::RenderLayerBacking::RenderLayerBacking):
            * rendering/RenderLayerBacking.h:

            Move what used to be the 'forceCompositingLayer' flag from RenderLayerBacking
            to RenderLayer, because we don't want the side-effects of creating RenderLayerBacking
            when setting this flag.

            * rendering/RenderLayerCompositor.cpp:
            (WebCore::RenderLayerCompositor::updateLayerCompositingState):
            When a RenderLayer flips into or out of compositing mode, compute a repaint
            rect relative to the containerForRepaint, and repaint it.

            (WebCore::RenderLayerCompositor::computeCompositingRequirements):
            Call layer->setMustOverlayCompositedLayers() rather than setForcedCompositingLayer().

            (WebCore::RenderLayerCompositor::needsToBeComposited):
            (WebCore::RenderLayerCompositor::requiresCompositingLayer):
            (WebCore::RenderLayerCompositor::requiresCompositingForTransform):
            (WebCore::RenderLayerCompositor::requiresCompositingForAnimation):
            * rendering/RenderLayerCompositor.h:

            Rename requiresCompositingLayerForTransform() to requiresCompositingForTransform()
            and make it a class static method to match requiresCompositingForAnimation(). Both
            now take RenderObjects, rathern than RenderLayers.

            * rendering/style/RenderStyle.h:
            (WebCore::InheritedFlags::hasTransformRelatedProperty):
            Minor tidyup using convenience methods added in an earlier commit.

2009-03-17  Simon Fraser  <simon.fraser@apple.com>

    Rubber-stamped by David Kilzer

    Merge ToT WebKit r41780

    2009-03-17  Simon Fraser  <simon.fraser@apple.com>

            Reviewed by Darin Adler

            https://bugs.webkit.org/show_bug.cgi?id=24396

            * config.h:
            Add WTF_USE_ACCELERATED_COMPOSITING, defined to 0 for now, and add some
            comments to make the #ifdefs more readable.

            * css/CSSComputedStyleDeclaration.cpp:
            (WebCore::computedTransform):
            Add a comment to mention that we don't flatten the matrix.

            * css/MediaQueryEvaluator.cpp:
            (WebCore::transform_3dMediaFeatureEval):
            Have the 'transform-3d' media query evaluate to 'true' if 3d-rendering
            is supported.

            * platform/graphics/mac/GraphicsLayerCA.mm:
            (WebCore::GraphicsLayerCA::animateTransform):
            No need for the #ifdef here. If we don't support 3d, we will have already flattened
            the matrix.

            * platform/graphics/transforms/TransformationMatrix.cpp:
            (WebCore::TransformationMatrix::makeAffine):
            * platform/graphics/transforms/TransformationMatrix.h:
            New method to convert the matrix to an affine matrix by throwing a way the non-affine
            parts.

            * rendering/RenderLayer.cpp:
            (WebCore::RenderLayer::updateTransform):
            (WebCore::RenderLayer::currentTransform):
            * rendering/RenderLayerBacking.cpp:
            (WebCore::RenderLayerBacking::updateLayerTransform):
            If 3d rendering is not supported, convert the matrix to an affine matrix
            which can be rendered, and used for hit testing.

            * rendering/RenderLayerCompositor.cpp:
            Change the name of the exported symbol that webkitdirs.pm uses to know if
            3d rendering is supported. There is no other 3d-rendering-specific symbol we can sniff.

            * rendering/RenderObject.cpp:
            (WebCore::RenderObject::transformFromContainer):
            Only take perspective into account if 3d rendering is supported.

            * rendering/RenderObject.h:
            (WebCore::makeMatrixRenderable):
            Utility method that flattens a matrix if 3d rendering is not supported.

2009-03-17  Simon Fraser  <simon.fraser@apple.com>

    Rubber-stamped by David Kilzer

    Merge ToT WebKit r41745

    2009-03-16  Simon Fraser  <simon.fraser@apple.com>

            Reviewed by Eric Seidel

            Clean up a few issues in the Animation code:

            * page/animation/AnimationBase.cpp:
            (WebCore::AnimationBase::updateStateMachine):
            Whitespace

            (WebCore::AnimationBase::willNeedService):
            Don't round to float, use std::max

            * page/animation/AnimationController.cpp:
            (WebCore::AnimationControllerPrivate::startTimeResponse):
            Fix erroneously copied line to null out m_lastResponseWaiter.

2009-03-17  Simon Fraser  <simon.fraser@apple.com>

    Rubber-stamped by David Kilzer

    Merge ToT WebKit r41662

    2009-03-12  Simon Fraser  <simon.fraser@apple.com>

            Reviewed by Mark Rowe

            <rdar://problem/6622300>: Reproducible crash on
            <http://www.editgrid.com/explore/tnc/dave/FusionChart%3A_Candlestick>

            Prevent CSSStyleSheet::checkLoaded() writing to freed memory when it gets
            deleted from under itself. The sheetLoaded() notification can allow scripts
            to run via HTMLTokenizer::executeScriptsWaitingForStylesheets(),
            which can cause the last ref to the CSSStyleSheet to be released.

            * css/CSSStyleSheet.cpp:
            (WebCore::CSSStyleSheet::checkLoaded):

2009-03-17  Simon Fraser  <simon.fraser@apple.com>

    Rubber-stamped by David Kilzer

    Merge ToT WebKit r41644

    2009-03-12  Simon Fraser  <simon.fraser@apple.com>

            Reviewed by Adele Peterson.

            https://bugs.webkit.org/show_bug.cgi?id=24508

            Fix updating of text field with placeholder text when value is set
            by ensuring that updatePlaceholderVisibility() is called after
            the value has been updated, not before.

            Test: fast/forms/placeholder-set-value.html

            * html/HTMLInputElement.cpp:
            (WebCore::HTMLInputElement::setValue):

2009-03-17  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/6661520> getTargetTouches() is leaking

        When the touch ended, a delete of the former TouchSet was missing.

        In addition PlatformTouchEvent only needs to weak access the GSEventRef
        and not retain it.

        * page/iphone/EventHandlerIPhone.cpp:
        (WebCore::EventHandler::handleTouchEvent):
        * platform/PlatformTouchEvent.h:
        * platform/iphone/PlatformTouchEventIPhone.mm:
        (WebCore::PlatformTouchEvent::PlatformTouchEvent):

2009-03-17  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/6690094> Do not show web geolocation permission dialog asynchronously

        This was implemented to address CoreLocation threads. Now CoreLocation is all done
        on the main thread, and this is not necessary.

        * page/Chrome.cpp:
        (WebCore::Chrome::requestGeolocationPermissionForFrame):
        * page/Chrome.h:
        * page/ChromeClient.h:
        (WebCore::ChromeClient::requestGeolocationPermissionForFrame):
        * page/Geolocation.cpp:
        (WebCore::Geolocation::requestPermission):
        (WebCore::Geolocation::geolocationServicePositionChanged):
        * page/Geolocation.h:
        (WebCore::Geolocation::):

2009-03-16  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/6688664> CoreLocation reset doesn't reset Geolocation

        When the user does Settings -> General -> Reset -> Reset Location Warnings
        the web page cache was not also reset. This was lost when I merged with
        OpenSource last week.

        Also stopUpdating if there is an error and there is nothing listening.

        Also consolidate some code in Geolocation when sending errors and positions
        to all of the listeners.

        * page/Geolocation.cpp:
        (WebCore::Geolocation::sendError):
        (WebCore::Geolocation::sendErrorToOneShots):
        (WebCore::Geolocation::sendErrorToWatchers):
        (WebCore::Geolocation::sendPosition):
        (WebCore::Geolocation::sendPositionToOneShots):
        (WebCore::Geolocation::sendPositionToWatchers):
        (WebCore::Geolocation::handleError):
        (WebCore::Geolocation::requestPermission):
        (WebCore::Geolocation::geolocationServicePositionChanged):
        (WebCore::Geolocation::geolocationServiceCachePolicyChanged):
        * page/Geolocation.h:
        * platform/GeolocationService.cpp:
        (WebCore::GeolocationService::cachePolicyChanged):
        * platform/GeolocationService.h:
        (WebCore::GeolocationServiceClient::geolocationServiceCachePolicyChanged):
        (WebCore::GeolocationService::setShouldClearCache):
        (WebCore::GeolocationService::shouldClearCache):
        * platform/iphone/GeolocationServiceCoreLocation.h:
        (WebCore::GeolocationServiceCoreLocation::setShouldClearCache):
        (WebCore::GeolocationServiceCoreLocation::shouldClearCache):
        * platform/iphone/GeolocationServiceCoreLocation.mm:
        (WebCore::GeolocationServiceCoreLocation::GeolocationServiceCoreLocation):
        (-[GeoLocationManager sendLocation:]):

2009-03-16  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/6684559> Deadlock when accessing same CLManager from 2 threads

        If already inited but not running, we have to restart it and some other bugs fixed.

        * platform/iphone/GeolocationServiceCoreLocation.mm:
        (WebCore::GeolocationServiceCoreLocation::startUpdating):
        (-[GeoLocationManager initWithAccuracy:withCallback:]):
        (-[GeoLocationManager createOnMainThread]):
        (-[GeoLocationManager start]):
        (-[GeoLocationManager stop]):
        (-[GeoLocationManager resume]):

2009-03-16  Greg Bolsinga  <bolsinga@apple.com>

        Rubber-stamped by Dave Carson.

        <rdar://problem/6687482> REGR: Buttons on page do not appear when page is loaded as a popup

        Back out the change for <rdar://problem/6683125>, it caused regressions.

        * page/iphone/FrameIPhone.mm:
        (WebCore::Frame::pauseTimeouts):
        (WebCore::Frame::resumeTimeouts):

2009-03-16  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/6684559> Deadlock when accessing same CLManager from 2 threads

        Create CLLocationManager from the main thread. This way its callbacks are
        called from the main thread. These are then pushed over to the Web side
        when needed.

        * platform/iphone/GeolocationServiceCoreLocation.h:
        * platform/iphone/GeolocationServiceCoreLocation.mm:
        (WebCore::GeolocationServiceCoreLocation::GeolocationServiceCoreLocation):
        (WebCore::GeolocationServiceCoreLocation::~GeolocationServiceCoreLocation):
        (WebCore::GeolocationServiceCoreLocation::startUpdating):
        (WebCore::GeolocationServiceCoreLocation::stopUpdating):
        (WebCore::GeolocationServiceCoreLocation::suspend):
        (WebCore::GeolocationServiceCoreLocation::resume):
        (-[GeoLocationManager initWithAccuracy:withCallback:]):
        (-[GeoLocationManager dealloc]):
        (-[GeoLocationManager start]):
        (-[GeoLocationManager stop]):
        (-[GeoLocationManager suspend]):
        (-[GeoLocationManager resume]):
        (-[GeoLocationManager sendLocation:]):
        (-[GeoLocationManager sendError:withString:]):
        (-[GeoLocationManager locationManager:didUpdateToLocation:fromLocation:]):
        (-[GeoLocationManager locationManager:didFailWithError:]):

2009-03-16  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by Andre Boule.

        <rdar://problem/6685994> WebCore uses the obsoleted GSEventGetEventNumber()

        Remove unused code.

        * platform/iphone/PlatformMouseEventIPhone.mm:

2009-03-15  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6679797> iPhone: Cross-origin XMLHttpRequest is always allowed (24575)

        Merged ToT WebKit r41667.

    2009-03-13  Alexey Proskuryakov  <ap@webkit.org>

        Reviewed by Sam Weinig.

        https://bugs.webkit.org/show_bug.cgi?id=24575
        XHR response is incorrect after a network error.

        Tests: http/tests/xmlhttprequest/cross-site-denied-response-sync-2.html
               http/tests/xmlhttprequest/cross-site-denied-response-sync.html
               http/tests/xmlhttprequest/cross-site-denied-response.html

        * xml/XMLHttpRequest.cpp:
        (WebCore::XMLHttpRequest::networkError): Call internalAbort() to fully reset the request.
        (WebCore::XMLHttpRequest::didFailRedirectCheck): No need to call internalAbort() here. Note
        that since internalAbort() can drop GC protection, it is not safe to use the object after
        this call.
        (WebCore::XMLHttpRequest::didReceiveData): Check that the request wasn't aborted, and
        return early if it was. This can happen during sync requests, as the loader does not know
        that it was aborted, and just synthesizes all callbacks.

2009-03-15  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6669336> iPhone: Restrict access to document.cookie when making a cross-site XHR

        Merged ToT WebKit r41577.

    2009-03-10  Alexey Proskuryakov  <ap@webkit.org>

        Reviewed by Sam Weinig.

        <rdar://problem/6123770> Restrict access to document.cookie when making a cross-site XHR

        * xml/XMLHttpRequest.cpp: (WebCore::XMLHttpRequest::responseXML): Removed an incorrect
        comment about cookie support. Firefox doesn't expose cookies on responseXML at all, and
        there are security concerns with exposing them for cross-origin requests, so it's not clear
        if we want to change anything here.

2009-03-15  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/6668875> using geolocation, sometimes speed is reported as -1

        * platform/iphone/GeolocationServiceCoreLocation.mm:
        (-[WebCoreCoreLocationObserver locationManager:didUpdateToLocation:fromLocation:]):

2009-03-15  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by David Kilzer.

        Update ::toString format as suggested by Darin Adler.

        * page/Geoposition.cpp:
        (WebCore::Geoposition::toString):

2009-03-15  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6660553> iPhone: Bring the list of forbidden headers in sync with XMLHttpRequest spec draft (19797)

        Merged ToT WebKit r41547.

    2009-03-10  Alexey Proskuryakov  <ap@webkit.org>

        Reviewed by Darin Adler.

        https://bugs.webkit.org/show_bug.cgi?id=19797
        Bring the list of forbidden headers in sync with XMLHttpRequest spec draft

        Added new checks to http/tests/xmlhttprequest/set-dangerous-headers.html.

        * xml/XMLHttpRequest.cpp:
        (WebCore::XMLHttpRequestStaticData::XMLHttpRequestStaticData): Added all headers from
        XMLHttpRequest 2 draft.

2009-03-15  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6599910> iPhone: Access-Control header names do not match latest spec or Firefox 3.1

        Merged ToT WebKit r41046.

    2009-02-17  Peter Abrahamsen  <rainhead@gmail.com>

        Reviewed by Sam Weinig.

        https://bugs.webkit.org/show_bug.cgi?id=23958
        <rdar://problem/6587815>

        Updated XMLHttpRequest with new header names from the latest Access
        Control draft: http://www.w3.org/TR/access-control/
        - Access-Control-Origin becomes Access-Control-Allow-Origin
        - Access-Control-Credentials becomes Access-Control-Allow-Credentials

        * xml/XMLHttpRequest.cpp:
        (WebCore::XMLHttpRequest::accessControlCheck):

2009-03-15  David Chan  <dmchan@apple.com>

        <rdar://problem/6668238> WebCore is registering text encodings needlessly from KURL constuctor

        Reviewed by Antti Koivisto.

        * platform/text/TextEncoding.cpp:
        (WebCore::TextEncoding::encodingForFormSubmission): Adding a
        check to see if any extended text encodings were loaded before
        checking that the current encoding is extended.

2009-03-15  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6586232> Merge commits on Safari Hurricane branch

        Merged ToT Safari Hurricane branch (webkit/branches/Safari-6528)
        through r41575 on the branch.

        278 files changed, 26981 insertions(+), 16358 deletions(-)

2009-03-14  Greg Bolsinga  <bolsinga@apple.com>

        <rdar://problem/6683465>

        Geolocation has to be able to handle NULL Frames.

        Reviewed by Mark Rowe

2009-03-14  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by David Kilzer.

        Geoposition::toString was missing the Coordinates after the update.

        * page/Geoposition.cpp:
        (WebCore::Geoposition::toString):

2009-03-14  Greg Bolsinga  <bolsinga@apple.com>

    Merge WebKit TOT: http://trac.webkit.org/changeset/41675

    2009-03-13  Greg Bolsinga  <bolsinga@apple.com>

            Reviewed by Simon Fraser.

            Update Geolocation perimission dialogs to be asynchronous.
            https://bugs.webkit.org/show_bug.cgi?id=24505

            Geolocation now requests permission from the Chrome asynchronously.
            The Chrome is passed the Geolocation object, and the Chrome sets the permission
            on the Geolocation. Geolocation also tracks if the Chrome should clear its cache
            of SecurityOrigins with geolocation permission. This is so that the GeolocationService
            can inform the Chrome of its request, and the Chrome is also free to implement its
            own policy.

            * WebCore.base.exp:
            * WebCore.xcodeproj/project.pbxproj:
            * page/Chrome.cpp:
            (WebCore::Chrome::requestGeolocationPermissionForFrame):
            * page/Chrome.h:
            * page/ChromeClient.h:
            (WebCore::ChromeClient::requestGeolocationPermissionForFrame):
            * page/Geolocation.cpp:
            (WebCore::Geolocation::Geolocation):
            (WebCore::Geolocation::getCurrentPosition):
            (WebCore::Geolocation::watchPosition):
            (WebCore::Geolocation::setIsAllowed):
            (WebCore::Geolocation::displayChallengeIfNecessary):
            (WebCore::Geolocation::geolocationServicePositionChanged):
            * page/Geolocation.h:
            (WebCore::Geolocation::isAllowed):
            (WebCore::Geolocation::setShouldClearCache):
            (WebCore::Geolocation::shouldClearCache):
            (WebCore::Geolocation::):

2009-03-14  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/6683125> Frame::pause/unpauseTimeouts need some updating

        When looking at pauseTimeouts for another bug, I decided to find other code
        that calls suspend/resumeActiveDOMObjects. An example is the JavaScriptDebugger.
        There are some other bits to call when pausing JavaScript. In addition, this
        code doesn't need to run when JavaScript is not enabled.

        * page/iphone/FrameIPhone.mm:
        (WebCore::Frame::pauseTimeouts):
        (WebCore::Frame::resumeTimeouts):

2009-03-14  Greg Bolsinga  <bolsinga@apple.com>

    <rdar://problem/6655593> Geolocation in Safari on iPhone OS 3.0 differs from the spec, no Coordinates attribute on Position

    Merge WebKit TOT r41650

    2009-03-12  Greg Bolsinga  <bolsinga@apple.com>

            Reviewed by Antti Koivisto.

            https://bugs.webkit.org/show_bug.cgi?id=24506
            Geolocation in Safari differs from the spec, no Coordinates attribute on Position

            Get up to date.

            * DerivedSources.make:
            * GNUmakefile.am:
            * WebCore.pro:
            * WebCore.scons:
            * WebCore.vcproj/WebCore.vcproj:
            * WebCore.xcodeproj/project.pbxproj:
            * WebCoreSources.bkl:
            * bindings/js/JSGeolocationCustom.cpp:
            (WebCore::createPositionOptions):
            * page/Coordinates.cpp: Added.
            (WebCore::Coordinates::toString):
            * page/Coordinates.h: Added.
            (WebCore::Coordinates::create):
            (WebCore::Coordinates::latitude):
            (WebCore::Coordinates::longitude):
            (WebCore::Coordinates::altitude):
            (WebCore::Coordinates::accuracy):
            (WebCore::Coordinates::altitudeAccuracy):
            (WebCore::Coordinates::heading):
            (WebCore::Coordinates::speed):
            (WebCore::Coordinates::Coordinates):
            * page/Coordinates.idl: Added.
            * page/Geoposition.cpp:
            (WebCore::Geoposition::toString):
            * page/Geoposition.h:
            (WebCore::Geoposition::create):
            (WebCore::Geoposition::coords):
            (WebCore::Geoposition::Geoposition):
            * page/Geoposition.idl:
            * page/PositionOptions.h:
            (WebCore::PositionOptions::create):
            (WebCore::PositionOptions::maximumAge):
            (WebCore::PositionOptions::setMaximumAge):
            (WebCore::PositionOptions::PositionOptions):
            * platform/mac/GeolocationServiceMac.mm:
            (-[WebCoreCoreLocationObserver locationManager:didUpdateToLocation:fromLocation:]):

2009-03-13  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Greg Bolsinga

        <rdar://problem/6298926>

        Remove the bogus roundf(), lroundf(), ceilf() and lceilf() macros
        from config.h, because they were incorrect with negative numbers,
        which caused other bugs (e.g. <rdar://problem/6652693>).

        Fix resulting 64-to-32-bit truncation warnings in two places.

        PLT before the change (mean of 4 runs): 1733.3ms
        PLT after  the change (mean of 4 runs): 1732.9ms

        * config.h:
        * dom/Document.cpp:
        * rendering/RenderBlock.cpp:

2009-03-13  Justin Garcia  <justin.garcia@apple.com>

        Reviewed by Greg Bolsinga.

        Remove the DeleteButtonController to speed up editing, it's used only in Mail on the desktop.

        * dom/ContainerNode.cpp:
        (WebCore::ContainerNode::cloneChildNodes):
        * editing/EditCommand.cpp:
        (WebCore::EditCommand::apply):
        (WebCore::EditCommand::unapply):
        (WebCore::EditCommand::reapply):
        * editing/Editor.cpp:
        (WebCore::Editor::respondToChangedSelection):
        (WebCore::Editor::Editor):
        * editing/markup.cpp:
        (WebCore::createFragmentFromNodes):

2009-03-13  Antti Koivisto  <antti@apple.com>

        Reviewed by Dave Kilzer.

        <rdar://problem/6681040> Synchronous tile creation

        Provide a way to force synchronous tile creation in the main thread. This
        will also result in painting happening in the main thread.

        This can be used to deal with some synchrnonization issues raising from
        the web thread side painting.

        * platform/iphone/TiledSurface.h:
        * platform/iphone/TiledSurface.mm:
        (WebCore::TiledSurface::layoutTilesNow):
        * wak/WAKWindow.h:
        * wak/WAKWindow.mm:
        (-[WAKWindow layoutTilesNow]):

2009-03-13  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by Antti Koivisto.

        <rdar://problem/6681239> WebThreadLockPushModal / WebThreadLockPopModal is busted

        There are no nested CFRunLoops on the Web Thread, so do not count them there.

        * wak/WebCoreThread.mm:
        (WebThreadLockPushModal):
        (WebThreadLockPopModal):

2009-03-13  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6676438> -[WebCoreResourceHandleAsDelegate connection:didReceiveResponse:] should create wrapper when replacing NS[HTTP]URLResponse object

        Reviewed by Antti Koivisto.

        Previously, -connection:didReceiveResponse: was always creating
        an NSURLResponse object, even if the original was an
        NSHTTPURLResponse object.  This caused bugs in XMLHTTPRequests
        since ResourceResponse::platformLazyInit() used -isKindOfClass:
        to determine whether it could set the HTTP status or not.  If
        MobileQuickLook returned a new MIME type for the response, then
        this bug would occur (see <rdar://problem/6673567>).

        The solution is to create a wrapper object
        (WebCoreNSURLResponseWrapper) that preserves the behavior of the
        original response object with the exception of the new MIME type
        being returned.

        * Configurations/WebCore.xcconfig: Exclude
        WebCoreNSURLResponseWrapper.m from Mac OS X builds.
        * WebCore.xcodeproj/project.pbxproj: Added references to
        WebCoreNSURLResponseWrapper.{h|m} files.

        * platform/network/iphone/WebCoreNSURLResponseWrapper.h: Added.
        * platform/network/iphone/WebCoreNSURLResponseWrapper.m: Added.
        (-[WebCoreNSURLResponseWrapper initWithNSURLResponse:withMIMETypeOverride:]): Added.
        (-[WebCoreNSURLResponseWrapper dealloc]): Added.
        (-[WebCoreNSURLResponseWrapper forwardInvocation:]): Added.
        (-[WebCoreNSURLResponseWrapper methodSignatureForSelector:]): Added.
        (-[WebCoreNSURLResponseWrapper expectedContentLength]): Added.
        (-[WebCoreNSURLResponseWrapper MIMEType]): Added.
        (-[WebCoreNSURLResponseWrapper suggestedFilename]): Added.
        (-[WebCoreNSURLResponseWrapper textEncodingName]): Added.
        (-[WebCoreNSURLResponseWrapper URL]): Added.
        (-[WebCoreNSURLResponseWrapper allHeaderFields]): Added.
        (-[WebCoreNSURLResponseWrapper statusCode]): Added.

        * platform/network/mac/ResourceHandleMac.mm:
        (-[WebCoreResourceHandleAsDelegate connection:didReceiveResponse:]):
        Create a WebCoreNSURLResponseWrapper object instead of an
        NSURLRespose object so that the behavior of the original
        response object is preserved by the wrapper.

2009-03-13  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by David Carson

        <rdar://problem/6680773>

        Support 'transparent' and other color keywords for -webkit-tap-highlight-color,
        -webkit-composition-fill-color, and -webkit-composition-frame-color.

        * css/CSSParser.cpp:
        (WebCore::CSSParser::parseValue):

2009-03-13  Justin Garcia  <justin.garcia@apple.com>

        Reviewed by Brad Moore.

        <rdar://problem/6678101> REGRESION: Putting the caret in an empty field or text view puts "Undo set writing direction" on the Undo stack

        We perform an operation to set the base writing direction every time the selection is
        set into an empty paragraph.  Disable this operations if the paragraph's writing direction
        is already correct.

        If the user's base writing direction is RTL, they'll see this issue, but generally only for
        the first paragraph they start editing, since as soon as the writing direction changes to RTL
        it will be propagated to new paragraphs.  Making the change in writing direction transparent
        (not show up on the Undo stack) would be a complicated change and too risky for Kirkwood.

        * editing/Editor.cpp:
        (WebCore::Editor::setBaseWritingDirection):

2009-03-12  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by Antti Koivisto.

        <rdar://problem/6670031> Calling _UIDelegateForwarder can cause the web thread lock to become unlocked

        Add WebThreadLockPopModal and WebThreadLockPushModal so that the MainRunLoopAutoUnlock does not unlock
        when in a nested modal CFRunLoop.

        * WebCore.iPhone.exp:
        * wak/WebCoreThread.h:
        * wak/WebCoreThread.mm:
        (MainRunLoopAutoUnlock):
        (WebThreadLockPushModal):
        (WebThreadLockPopModal):

2009-03-13  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by David Kilzer

        <rdar://problem/6661861>

        Actually draw the repaint counters if SUPPORT_DEBUG_INDICATORS
        is defined; allows them to show in the simulator, if the pref is on.

        * platform/graphics/mac/WebLayer.mm:
        (+[WebLayer drawContents:WebCore::ofLayer:intoContext:]):
        (-[WebLayer setNeedsDisplayInRect:]):

2009-03-13  Andre Boule  <aboule@apple.com>

        Reviewed by george.
        <rdar://problem/6049239> Right and center aligned text should strip spaces from the end of lines
        Test cases added to FastString.app

        * wak/WAKStringDrawing.mm:
        (-[NSString _web_drawInRect:withFont:ellipsis:alignment:lineSpacing:includeEmoji:measureOnly:]):

2009-03-12  Justin Garcia  <justin.garcia@apple.com>

        Reviewed by Brad Moore.

        <rdar://problem/6673939> REGRESSION (r148429): Crash on Undo

        * editing/ApplyStyleCommand.cpp:
        (WebCore::ApplyStyleCommand::applyBlockStyle): The scope of the operation is the highest editable root,
        not the highest ancestor (the document element).  This will speed up this operation and prevent the
        selection after the operation from being in non-editable content in certain situations.

2009-03-12  Antti Koivisto  <antti@apple.com>

        Reviewed by Dave Carson, Dave Kilzer, Greg Bolsinga.

        <rdar://problem/6668780> REGRESSION: objc_msgSend in middle of super hot HTML tokenization loop
        <rdar://problem/6668802> Atomic test and clear operation in middle of super hot HTML tokenization loop

        Removed unneeded atomic operations, inline, move stop testing outside the loop (instead set the suspend bit to
        get out of the loop).

        * WebCore.iPhone.exp:
        * html/HTMLTokenizer.cpp:
        (WebCore::HTMLTokenizer::continueProcessing):
        (WebCore::HTMLTokenizer::write):
        * wak/WebCoreThread.h:
        * wak/WebCoreThread.mm:
        (WebRunLoopUnlock):
        (_WebTryThreadLock):
        (_WebThreadUnlock):

2009-03-12  Simon Fraser  <simon.fraser@apple.com>

    Merge WebKit TOT r41640

    2009-03-12  Dimitri Glazkov  <dglazkov@chromium.org>

            Reviewed by Simon Fraser.

            https://bugs.webkit.org/show_bug.cgi?id=24496
            Fix console logging of non-string values by coercing the argument to
            a string.

            Test: fast/js/console-non-string-values.html

            * bindings/js/ScriptValue.cpp: Removed PlatformString include.
            * bindings/js/ScriptValue.h: Added toString method.
            (WebCore::ScriptValue::toString):
            * page/Console.cpp:
            (WebCore::getFirstArgumentAsString): Changed firstArgumentAsString method to use
                ScriptValue::toString.
            (WebCore::Console::addMessage): added extra ScriptState argument to callsite.
            (WebCore::Console::count): Ditto.

2009-03-12  Simon Fraser  <simon.fraser@apple.com>

    Merge WebKit TOT r41637

    2009-03-12  Simon Fraser  <simon.fraser@apple.com>

            Reviewed by Dave Hyatt

            https://bugs.webkit.org/show_bug.cgi?id=24552

            Test hit testing when there is a normal-flow, self-painting layer
            (e.g. a reflection) in the layer tree.

            * fast/layers/normal-flow-hit-test.html: Added.
            * platform/mac/fast/layers/normal-flow-hit-test-expected.checksum: Added.
            * platform/mac/fast/layers/normal-flow-hit-test-expected.png: Added.
            * platform/mac/fast/layers/normal-flow-hit-test-expected.txt: Added.

2009-03-12  Simon Fraser  <simon.fraser@apple.com>

    Merge WebKit TOT r41603

    2009-03-11  Simon Fraser  <simon.fraser@apple.com>

            Reviewed by Darin Adler

            https://bugs.webkit.org/show_bug.cgi?id=24531

            Make sure that AnimationControllerPrivate::getAnimatedStyleForRenderer() never
            returns a null style if it has a valid renderer, which could happen if a
            CompositeAnimation existed, but wasn't running any animations or transitions.

            * page/animation/AnimationController.cpp:
            (WebCore::AnimationControllerPrivate::getAnimatedStyleForRenderer):

2009-03-12  Simon Fraser  <simon.fraser@apple.com>

    Merge WebKit TOT r41590

    2009-03-11  Simon Fraser  <simon.fraser@apple.com>

            Reviewed by Dan Bernstein

            https://bugs.webkit.org/show_bug.cgi?id=23093

            When the cancel button in the search field is shown or hidden,
            we need to explicitly setStyle() on the cancel button's renderer,
            to ensure that repaint happens. Changing the style without telling
            the renderer won't work.

            Test: fast/repaint/search-field-cancel.html

            * rendering/RenderTextControlSingleLine.cpp:
            (WebCore::RenderTextControlSingleLine::subtreeHasChanged):
            (WebCore::RenderTextControlSingleLine::updateFromElement):
            (WebCore::RenderTextControlSingleLine::createCancelButtonStyle):
            (WebCore::RenderTextControlSingleLine::updateCancelButtonVisibility):
            (WebCore::RenderTextControlSingleLine::visibilityForCancelButton):
            * rendering/RenderTextControlSingleLine.h:

2009-03-12  Simon Fraser  <simon.fraser@apple.com>

    Merge WebKit TOT r41576

    2009-03-10  Simon Fraser  <simon.fraser@apple.com>

            Reviewed by Darin Adler

            https://bugs.webkit.org/show_bug.cgi?id=24503

            Fix hit testing of absolutely positioned single line text controls by
            ensuring that we set result.innerNode() correctly. If the hit node is
            a descendant of the inner text element or if it is the <input> itself,
            then we say we hit the innerTextElement.

            Rename hitInnerTextBlock() to hitInnerTextElement() to match the
            'innerTextElement' terminology used elsewhere.

            Assert that if renderer()->hitTest() returns false, no-one set
            result.innerNode().

            Test: fast/forms/search-abs-pos-cancel-button.html

            * rendering/RenderLayer.cpp:
            (WebCore::RenderLayer::hitTestContents):
            * rendering/RenderTextControl.cpp:
            (WebCore::RenderTextControl::hitInnerTextElement):
            * rendering/RenderTextControl.h:
            * rendering/RenderTextControlMultiLine.cpp:
            (WebCore::RenderTextControlMultiLine::nodeAtPoint):
            * rendering/RenderTextControlSingleLine.cpp:
            (WebCore::RenderTextControlSingleLine::nodeAtPoint):

2009-03-12  Simon Fraser  <simon.fraser@apple.com>

    Merge WebKit TOT r41545

    2009-03-09  Simon Fraser  <simon.fraser@apple.com>

            Reviewed by Dan Bernstein, Oliver Hunt

            https://bugs.webkit.org/show_bug.cgi?id=24475

            When repainting replaced elements, need to union the selection
            and overflow rects because either may extend outside the other.

            Test: fast/repaint/transform-replaced-shadows.html

            * rendering/RenderReplaced.cpp:
            (WebCore::RenderReplaced::clippedOverflowRectForRepaint):

2009-03-12  Simon Fraser  <simon.fraser@apple.com>

    Merge WebKit TOT r41458

    2009-03-05  David Hyatt  <hyatt@apple.com>

            Reviewed by Eric Seidel

            https://bugs.webkit.org/show_bug.cgi?id=24248

            Make sure painting of overflow controls checks that visibility:visible is set on the block before
            painting.  Pixel tests caught this regression.

            Make sure resizer painting pushes a clip of the corner rect.  It was relying on the clip layers happened
            to do to their bounds (which had nothing to do with overflow).

            * rendering/RenderBlock.cpp:
            (WebCore::RenderBlock::paint):
            * rendering/RenderLayer.cpp:
            (WebCore::RenderLayer::paintResizer):

2009-03-12  Simon Fraser  <simon.fraser@apple.com>

    Merge WebKit TOT r41133 and r41134

        2009-02-23  Alexey Proskuryakov  <ap@webkit.org>

            Reviewed by Darin Adler.

            https://bugs.webkit.org/show_bug.cgi?id=15707
            Crash when manipulating document from within an iframe onload function

            Test: fast/dom/onload-open.html

            * dom/ContainerNode.cpp:
            (WebCore::ContainerNode::removeChildren):

2009-03-12  Simon Fraser  <simon.fraser@apple.com>

    Merge WebKit TOT r41090

    2009-02-19  David Hyatt  <hyatt@apple.com>

            Fix a bug where reflections didn't work properly if opacity was < 1.  Make sure that replaced elements
            also consider reflections to be part of their visual overflow.  This had already been done for blocks
            and lines, but it wasn't being done yet for replaced elements.

            Also make sure that when the object being reflected has opacity < 1 that we don't end up popping the outer
            transparency layer early.  Since the reflected object paints twice, we don't want to end the transparency
            layer it pushed until we're done painting the real object (rather than the reflection).

            Reviewed by Dan Bernstein

        Test: fast/reflections/reflection-masks-opacity.html

        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::paintLayer):
        * rendering/RenderPartObject.cpp:
        (WebCore::RenderPartObject::layout):
        * rendering/RenderReplaced.cpp:
        (WebCore::RenderReplaced::layout):
        (WebCore::RenderReplaced::adjustOverflowForBoxShadowAndReflect):
        * rendering/RenderReplaced.h:

2009-03-12  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by me.

        Small readability improvement

        * page/iphone/FrameIPhone.mm:
        (WebCore::ancestorRespondingToClickEvents):
        (WebCore::Frame::betterApproximateNode):
        (WebCore::Frame::qualifyingNodeAtViewportLocation):
        (WebCore::Frame::nodeRespondingToClickEvents):
        (WebCore::Frame::nodeRespondingToScrollWheelEvents):

2009-03-11  Justin Garcia  <justin.garcia@apple.com>

        Reviewed by Brad Moore.

        <rdar://problem/6642913> REGRESSION: Selected text draws in black

        * page/Frame.cpp:
        (WebCore::Frame::selectionLayoutChanged): Avoid all selection related work in the rendering code,
        since we implement selection painting ourselves.

2009-03-11  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by James Howard.

        <rdar://problem/6670365> missing breaks

        * platform/iphone/GeolocationServiceCoreLocation.mm:
        (-[WebCoreCoreLocationObserver locationManager:didFailWithError:]):

2009-03-10  Justin Garcia  <justin.garcia@apple.com>

        Reviewed by Brad Moore.

        <rdar://problem/6668221> Select doesn't work in Mail

        * editing/SelectionController.cpp:
        (WebCore::SelectionController::expandSelectionToWordContainingCaretSelection): We actually want
        to modify the selection here, so don't suppress notifications.
        * page/iphone/FrameIPhone.mm:
        (WebCore::Frame::caretRect): Don't modify the selection!

2009-03-10  Antti Koivisto  <antti@apple.com>

        Reviewed by Mark Rowe.

        <rdar://problem/6668238> WebCore is registering text encodings needlessly from KURL constructor.

        Another case where we would trigger extended encoding loading needlessly.

        * platform/text/TextEncoding.cpp:
        (WebCore::TextEncoding::isNonByteBasedEncoding):

2009-03-10  Justin Garcia  <justin.garcia@apple.com>

    <rdar://problem/6607698> ASSERT in WebCore::Range::compareBoundaryPoints in Notes

    Merged r41562.

    2009-03-10  Darin Adler  <darin@apple.com>

        Reviewed by Alexey Proskuryakov.

        Bug 24494: crash when deleting at end of document and merging paragraphs
        https://bugs.webkit.org/show_bug.cgi?id=24494
        rdar://problem/6571537

        Test: editing/deleting/merge-at-end-of-document.html

        * dom/Range.cpp:
        (WebCore::Range::compareBoundaryPoints): Split out assertion. It's better not to
        use && in assertions since we'd like to know which condition is failing.

        * editing/ApplyStyleCommand.cpp:
        (WebCore::ApplyStyleCommand::applyInlineStyleToRange): Added a null check before
        calling compareBoundaryPoints, since a 0 for the node is ambiguous and so the
        function doesn't know which value to return.

2009-03-10  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by Antti Koivisto.

        <rdar://problem/6655593> Geolocation in Safari on iPhone OS 3.0 differs from the spec, no Coordinates attribute on Position

        Match up with the OpenSource implementation in various compatible ways.

        * page/Geolocation.cpp:
        (WebCore::Geolocation::Geolocation):
        (WebCore::Geolocation::setIsAllowed):
        (WebCore::Geolocation::displayChallengeIfNecessary):
        (WebCore::Geolocation::geolocationServicePositionChanged):
        * page/Geolocation.h:
        (WebCore::Geolocation::):
        * platform/iphone/GeolocationServiceCoreLocation.mm:
        (WebCore::GeolocationServiceCoreLocation::~GeolocationServiceCoreLocation):
        (WebCore::GeolocationServiceCoreLocation::suspend):
        (WebCore::GeolocationServiceCoreLocation::resume):
        (-[WebCoreCoreLocationObserver locationManager:didUpdateToLocation:fromLocation:]):
        (-[WebCoreCoreLocationObserver locationManager:didFailWithError:]):

2009-03-10  Chris Fleizach  <cfleizach@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/6665911> AX: links within headers are not announced
        Headers should not be exposed as elements, instead the objects inside headers should use
        the header traits. The heading level should be returned as the value for these elements.

        * page/iphone/AccessibilityObjectWrapperIPhone.mm:
        (-[AccessibilityObjectWrapper accessibilityTraits]):
        (-[AccessibilityObjectWrapper isAccessibilityElement]):
        (-[AccessibilityObjectWrapper accessibilityLabel]):
        (-[AccessibilityObjectWrapper accessibilityValue]):

2009-03-10  Justin Garcia  <justin.garcia@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/6596102> REGRESSION: When a text field fills up caret is drawn too far to the right, off the edge and over other content

        Merged open source r41566 and added a few PEP-only changes.

        UIKit stopped painting the caret on selection layout changes and when WebCore scrolled to reveal the selection
        after an editing operation.  We care about the latter but not the former.  We don't care about selection layout changes
        because we get everything we need to know from selection/webview change notifications, and notifyRevealedSelectionByScrollingFrame.

        * WebCore.base.exp: Modified for changes to revealSelection declaration.
        * editing/SelectionController.cpp:
        (WebCore::SelectionController::setSelection):
        * loader/EmptyClients.h: Modified for renamed method.
        (WebCore::EmptyChromeClient::notifyRevealedSelectionByScrollingFrame):
        * page/ChromeClient.h:
        * page/Frame.cpp: Removed revealCaret.  revealSelection(..., true) can be called instead.
        (WebCore::Frame::selectionLayoutChanged): UIKit doesn't need to be notified that the selection layout has changed.
        (WebCore::Frame::revealSelection): Changed to take in a boolean for whether or not to reveal the extent (for
        Range selections).  This will let us use revealSelection from setSelection for selection extensions (shift+arrow) on the Mac.
        Modified for renamed notifyRevealedSelectionByScrollingFrame method.
        * page/Frame.h:

2009-03-10  Simon Fraser  <simon.fraser@apple.com>

        Rubber-stamped by Greg Bolsinga.

        <rdar://problem/6661861> Make layer debugging prefs available in release builds

        It's useful for internal content developers to be able to turn on
        the prefs that show Eclair layers visually in the simulator, in
        release builds, so make a new #define SUPPORT_DEBUG_INDICATORS which
        is on for release and debug for the  IPHONE_SIMULATOR platform, and
        just debug elsewhere.

        The zPosition() stuff is unused, but it makes no sense for it to
        be debug-only.

        Also moved the WebThreadLock() in the animationDidStart: callback to
        include the if (m_graphicsLayer) test.

        * platform/graphics/GraphicsLayer.cpp:
        (WebCore::GraphicsLayer::GraphicsLayer):
        (WebCore::GraphicsLayer::setZPosition):
        * platform/graphics/GraphicsLayer.h:
        * platform/graphics/mac/GraphicsLayerCA.h:
        * platform/graphics/mac/GraphicsLayerCA.mm:
        (-[WebAnimationDelegate animationDidStart:]):
        (WebCore::clearBorderColor):
        (WebCore::GraphicsLayerCA::GraphicsLayerCA):
        (WebCore::GraphicsLayerCA::setMasksToBounds):
        (WebCore::GraphicsLayerCA::setDrawsContent):
        (WebCore::GraphicsLayerCA::setZPosition):
        (WebCore::GraphicsLayerCA::swapFromOrToTiledLayer):
        (WebCore::GraphicsLayerCA::setContentsLayer):

2009-03-09  Chris Fleizach  <cfleizach@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/6662988> AX: should properly return checkbox attributes

        * page/iphone/AccessibilityObjectWrapperIPhone.mm:
        (-[AccessibilityObjectWrapper accessibilityTraits]):
        (-[AccessibilityObjectWrapper accessibilityValue]):

2009-03-09  Antti Koivisto  <antti@apple.com>

        Reviewed by Greg Bolsinga.

        <rdar://problem/6649909> Mail doesn't render parts of message until double-tap

        Remove a bogus check for N88.

        * platform/iphone/TiledSurface.mm:
        (WebCore::TiledSurface::updateTilingMode):

2009-03-09  Ken Kocienda  <kocienda@apple.com>

        Reviewed by Justin Garcia

        WebCore side of fix for these bugs:

        <rdar://problem/6638114> Tapping select button on blank line does not work
        <rdar://problem/6642797> The ending selection handle looks funny when an extra return is selected at the end
        <rdar://problem/6482631> Selections ought to highlight where there are returns

        With this change, and an associated UIKit change, empty lines now draw correctly.

        * dom/Range.cpp:
        (WebCore::Range::addLineBoxRects): This function now uses the correct stopping renderer.
        It was going too far before.
        * editing/SelectionController.cpp: New function to expand selection without losing
        granularity. The old way filtered the selection through a range, which lost this
        potentially import data.
        (WebCore::SelectionController::expandSelectionToWordContainingCaretSelection)
        (WebCore::SelectionController::wordRangeContainingCaretSelection)
        (WebCore::SelectionController::expandSelectionToStartOfWordContainingCaretSelection)
        (WebCore::SelectionController::_wordSelectionContainingCaretSelection)
        (WebCore::SelectionController::_wordRangeContainingCaretSelection)
        * editing/SelectionController.h

2009-03-09  Simon Fraser  <simon.fraser@apple.com>

        Build fix, no review.

        No longer export WebCore::RenderObject::localToAbsoluteQuad(WebCore::FloatQuad const&, bool) const,
        which gets inlined.

        * WebCore.base.exp:

2009-03-09  Simon Fraser  <simon.fraser@apple.com>

        Rubber-stamped by David Kilzer

        Merge the following changes from WebKit TOT:
            41530 Fix hit-testing on backface-hidden elements with no transform
            41531 Map quads through 3d transforms

        Test: transforms/3d/hit-testing/backface-no-transform-hit-test.html

        * platform/graphics/transforms/TransformationMatrix.cpp:
        (WebCore::TransformationMatrix::projectQuad):
        (WebCore::TransformationMatrix::translateRight):
        (WebCore::TransformationMatrix::translateRight3d):
        * platform/graphics/transforms/TransformationMatrix.h:
        * rendering/RenderBox.cpp:
        (WebCore::RenderBox::mapLocalToContainer):
        * rendering/RenderBox.h:
        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::createLocalTransformState):
        (WebCore::RenderLayer::hitTestLayer):
        * rendering/RenderLayerCompositor.cpp:
        * rendering/RenderObject.cpp:
        (WebCore::RenderObject::localToAbsolute):
        (WebCore::RenderObject::absoluteToLocal):
        (WebCore::RenderObject::mapLocalToContainer):
        (WebCore::RenderObject::localToContainerQuad):
        * rendering/RenderObject.h:
        * rendering/RenderTableCell.cpp:
        (WebCore::RenderTableCell::mapLocalToContainer):
        * rendering/RenderTableCell.h:
        * rendering/RenderView.cpp:
        (WebCore::RenderView::mapLocalToContainer):
        * rendering/RenderView.h:
        * rendering/TransformState.cpp:
        (WebCore::TransformState::move):
        (WebCore::TransformState::applyTransform):
        (WebCore::TransformState::flatten):
        (WebCore::TransformState::mappedPoint):
        (WebCore::TransformState::mappedQuad):
        (WebCore::TransformState::flattenWithTransform):
        (WebCore::HitTestingTransformState::mappedQuad):
        * rendering/TransformState.h:
        (WebCore::TransformState::TransformState):
        (WebCore::TransformState::move):
        (WebCore::TransformState::lastPlanarPoint):
        (WebCore::TransformState::lastPlanarQuad):
        * rendering/style/RenderStyle.h:
        (WebCore::InheritedFlags::preserves3D):

2009-03-06  Antti Koivisto  <antti@apple.com>

        Reviewed by me.

        <rdar://problem/6657096> Provide a callback to signal that WebKit painted

        * platform/iphone/TiledSurface.mm:
        (WebCore::TiledSurface::drawLayer):

2009-03-06  Ken Kocienda  <kocienda@apple.com>

        Reviewed by Justin Garcia

        Fix for this bug:

        <rdar://problem/6643667> Japanese and Chinese keyboard: the Notes window loses its focus after a long paragraph of text

        * page/iphone/FrameIPhone.mm:
        (WebCore::Frame::rectForScrollToVisible): Give the selection
        controller objects in this function a frame to work with.
        Otherwise, the geometry calculations we're looking for will
        fail. Ideally, we would have a sort offline geometry-only mode
        for selection controllers so we could do this kind of work as
        cheaply as possible.

2009-03-06  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Greg Bolsinga

        Reinstate Eclair-related code to taking transforms into account for
        the tap and image highlight and the selection rectangle.

        * bindings/objc/DOM.mm:
        (WebCore::wkQuadFromFloatQuad):
        (WebCore::kit):
        (-[DOMNode absoluteQuad]):
        (-[DOMNode lineBoxQuads]):
        (-[DOMNode innerFrameQuad]):

2009-03-05  Justin Garcia  <justin.garcia@apple.com>

    <rdar://problem/6611446> Two <returns> in Mail compose moves down one line until character typed

    Merged WebKit r41465, r41466, and r41470

    2009-03-05  Justin Garcia  <justin.garcia@apple.com>

            Reviewed by Darin Adler.

            WebViewDidChangeSelectionNotifications weren't being sent for commands that change the selection's position
            within the document without changing its position in the DOM.  For example, pressing return in (caret marked by ^):
            <div contentEditable="true"><div>^Hello</div></div>
            Undo was being enabled, shouldDeleteDOMRange called, etc. when doing no-op deletes (a delete in an empty document
            for example).

            Changes to layout tests demonstrate fix.

            * editing/EditCommand.cpp:
            (WebCore::EditCommand::apply): Don't call applyEditing for a TypingCommand.  The TypingCommand knows whether or
            not it did work that needs to be applied.
            * editing/Editor.cpp:
            (WebCore::Editor::appliedEditing): Moved code (but did not alter) to changeSelectionAfterCommand.
            (WebCore::Editor::unappliedEditing): Ditto.
            (WebCore::Editor::reappliedEditing): Ditto.
            (WebCore::Editor::changeSelectionAfterCommand): Moved code from *appliedEditing into here.  Also call out to
            EditorClient::respondToChangedSelection() for commands that changed the selection's position in the document
            even if they did not change it's position in the DOM.  Any TypingCommand that gets this far changed it's position
            in the document.
            * editing/Editor.h:
            * editing/TypingCommand.cpp:
            (WebCore::TypingCommand::TypingCommand): Removed unused m_appliedEditing.
            (WebCore::TypingCommand::typingAddedToOpenCommand): Always apply editing.  We won't get this far if we don't need to.
            (WebCore::TypingCommand::deleteKeyPressed): Don't do any of the things that only make sense for Range selections, like
            adding to the killring and responding to a change in selections if the delete was a no-op.
            (WebCore::TypingCommand::forwardDeleteKeyPressed): Ditto.
            * editing/TypingCommand.h:

2009-03-05  Antti Koivisto  <antti@apple.com>

        Reviewed by Dave Hyatt.

        <rdar://problem/6591072> REGRESSION: Bring back repaint throttling during page loading

        Intergrate r41431 from the open source TOT.

        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::checkCompleted):
        * page/EventHandler.cpp:
        (WebCore::EventHandler::dispatchDragEvent):
        (WebCore::EventHandler::dispatchMouseEvent):
        (WebCore::EventHandler::keyEvent):
        (WebCore::EventHandler::handleTextInputEvent):
        * page/FrameView.cpp:
        (WebCore::FrameView::FrameView):
        (WebCore::FrameView::reset):
        (WebCore::FrameView::repaintContentRectangle):
        (WebCore::FrameView::beginDeferredRepaints):
        (WebCore::FrameView::endDeferredRepaints):
        (WebCore::FrameView::checkStopDelayingDeferredRepaints):
        (WebCore::FrameView::doDeferredRepaints):
        (WebCore::FrameView::updateDeferredRepaintDelay):
        (WebCore::FrameView::resetDeferredRepaintDelay):
        (WebCore::FrameView::adjustedDeferredRepaintDelay):
        (WebCore::FrameView::deferredRepaintTimerFired):
        (WebCore::FrameView::paintContents):
        * page/FrameView.h:
        * page/iphone/EventHandlerIPhone.cpp:
        (WebCore::EventHandler::handleTouchEvent):

2009-03-05  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6362881> PURPLE FIXME: Need call to adjustOverflowForBoxShadow() in RenderPartObject::layout()?

        Reviewed by Simon Fraser and rubber-stamped by Greg Bolsinga.

        * rendering/RenderPartObject.cpp:
        (WebCore::RenderPartObject::layout): Added call to
        adjustOverflowForBoxShadow() to match original ToT WebKit code.

2009-03-05  Simon Fraser  <simon.fraser@apple.com>

        Rubber-stamped by David Kilzer

        Reinstate some mipmapping values from the old Eclair code.
        This allows tiled layers to show with different levels of detail
        depending on the scale.

        * platform/graphics/mac/GraphicsLayerCA.mm:
        (WebCore::GraphicsLayerCA::swapFromOrToTiledLayer):

2009-03-05  Simon Fraser  <simon.fraser@apple.com>

        Rubber-stamped by David Kilzer

        Merge the following changes from WebKit TOT:

            41455 Hit test hardware-animating elements
            41441 Don't hit-test back face of backface-hidden elements
            41440 3D transform tests

        Tests: transforms/3d/cssmatrix-3d-interface.xhtml
               transforms/3d/hit-testing/backface-hit-test.html
               transforms/3d/point-mapping/3d-point-mapping-2.html
               transforms/3d/point-mapping/3d-point-mapping-deep.html
               transforms/3d/point-mapping/3d-point-mapping-origins.html
               transforms/3d/point-mapping/3d-point-mapping-preserve-3d.html
               transforms/3d/point-mapping/3d-point-mapping.html

        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::currentTransform):
        (WebCore::RenderLayer::hitTestLayer):
        * rendering/RenderLayer.h:
        * rendering/RenderObject.cpp:
        (WebCore::RenderObject::transformFromContainer):

2009-03-05  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6649082> Remove unused files in WebCore/WebKit

        Rubber-stamped by Simon Fraser.

        Finish the job started by iPhone WebKit r81072 which removed the
        legacy Eclair implementation.  References to these files were
        removed from the Xcode project file, but the actual files were
        not!

        * platform/graphics/Transform3D.cpp: Removed.
        * platform/graphics/Transform3D.h: Removed.
        * platform/graphics/VideoObserver.h: Removed.
        * platform/graphics/layer/LCLayer.h: Removed.
        * platform/graphics/layer/LCLayerCA.h: Removed.
        * platform/graphics/layer/LCLayerCA.mm: Removed.
        * platform/graphics/layer/LCRootLayer.h: Removed.
        * platform/graphics/layer/LCRootLayerCA.mm: Removed.
        * platform/graphics/layer/WKLayer.h: Removed.
        * platform/graphics/layer/WKLayer.mm: Removed.
        * platform/graphics/layer/WKTiledLayer.h: Removed.
        * platform/graphics/layer/WKTiledLayer.mm: Removed.
        * platform/graphics/mac/MediaPlayerPrivate.h: Removed.
        * platform/graphics/mac/MediaPlayerPrivateFig.h: Removed.
        * platform/graphics/mac/MediaPlayerPrivateFig.mm: Removed.
        * platform/graphics/mac/MediaPlayerPrivateFigAVController.mm: Removed.
        * platform/graphics/mac/MediaPlayerPrivateFigPlayer.mm: Removed.
        * rendering/RenderLayerCompositing.cpp: Removed.
        * rendering/RenderLayerCompositing.h: Removed.

2009-03-04  Chris Marrin  <cmarrin@apple.com>

        Reviewed by David Kilzer.

        WARNING: NO TEST CASES ADDED OR CHANGED

        Fixed <rdar://problem/6632775>.

        The problem was that we were calling back into the AnimationController
        from GraphicsLayerCA. This could happen on either thread and the called
        touched an array, which could be accessed by the other thread at the same
        time. I added locks around the callback in GraphicsLayerCA and the problem
        no longer occurs. This is actually a lock that was in the code before the
        merge and got left behind.

        * platform/graphics/mac/GraphicsLayerCA.mm:
        (-[WebAnimationDelegate animationDidStart:]):

2009-03-05  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6649082> Remove unused files in WebCore/WebKit

        Reviewed by Simon Fraser.

        RenderPopupMenu.{cpp|h} were removed in ToT WebKit r17019.  This
        was obviously missed in the first big merge for BigBear, and the
        file has been compiled ever since.  We may also remove the
        iPhone-specific implementation files.

        * WebCore.xcodeproj/project.pbxproj: Removed references to
        deleted files.
        * rendering/RenderPopupMenu.cpp: Removed.
        * rendering/RenderPopupMenu.h: Removed.
        * rendering/RenderPopupMenuIPhone.h: Removed.
        * rendering/RenderPopupMenuIPhone.mm: Removed.
        * rendering/RenderThemeIPhone.cpp: Replaced include of
        RenderPopupMenuIPhone.h with RenderMenuList.h.

2009-03-05  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6645446> JavaScriptCore and WebCore should compile with -Wshorten-64-to-32

        Reviewed by David Carson.

        * Configurations/Base.xcconfig: Added -Wshorten-64-to-32 to
        iphoneos and iphonesimulator builds.

        The rest of the changes below (except where noted) consist of
        appending 'f' to numeric constants, using String::toFloat()
        instead of String::toDouble(), using float versions of methods
        instead of double versions (ceilf() instead of ceil()), and
        using static_cast<>() where appropriate.

        Also replaced use of MAX()/MIN() Foundation macros with
        std::max() and std::min() methods in some files.

        * bindings/objc/DOM.mm:
        (-[DOMNode computedFontSize]):
        * dom/Document.cpp:
        (WebCore::setViewportFeature):
        * history/HistoryItem.cpp:
        (WebCore::HistoryItem::HistoryItem):
        * page/EventHandler.cpp:
        * page/Frame.cpp:
        (WebCore::Frame::checkOverflowScroll):
        * page/Settings.cpp:
        (WebCore::Settings::Settings):
        * page/Settings.h:
        (WebCore::Settings::setMaxParseDuration): Switched argument from
        float to double.
        (WebCore::Settings::maxParseDuration): Return double instead of
        float.
        * page/iphone/EventHandlerIPhone.cpp:
        (WebCore::EventHandler::handleTouchEvent):
        * page/iphone/FrameIPhone.mm:
        (WebCore::Frame::renderRectForPoint):
        * platform/graphics/GraphicsContext.cpp:
        (WebCore::GraphicsContext::drawRaisedEllipse):
        * platform/graphics/SimpleFontData.cpp:
        (WebCore::SimpleFontData::SimpleFontData):
        * platform/graphics/cg/GraphicsContextCG.cpp:
        (WebCore::GraphicsContext::GraphicsContext):
        * platform/graphics/iphone/MediaPlayerPrivateIPhone.mm:
        (WebCore::MediaPlayerPrivateiPhone::duration):
        (WebCore::MediaPlayerPrivateiPhone::currentTime):
        * platform/graphics/mac/ColorMac.mm:
        (WebCore::cgColor):
        * platform/graphics/mac/FontMac.mm:
        (WebCore::Font::drawGlyphs):
        * platform/graphics/mac/SimpleFontDataMac.mm:
        (WebCore::SimpleFontData::platformWidthForGlyph):
        * platform/iphone/ScrollViewIPhone.mm:
        (WebCore::ScrollView::windowToContents):
        * platform/network/mac/ResourceHandleMac.mm:
        (-[WebCoreResourceHandleAsDelegate connection:didReceiveResponse:]):
        * rendering/InlineTextBox.cpp:
        (WebCore::InlineTextBox::paintCompositionBackground):
        * rendering/RenderBox.cpp:
        (WebCore::RenderBox::paintFillLayerExtended):
        * rendering/RenderButton.cpp:
        (WebCore::RenderButton::layout):
        * rendering/RenderThemeIPhone.cpp:
        (WebCore::RenderThemeIPhone::gradientWithName):
        (WebCore::RenderThemeIPhone::shadowColor):
        (WebCore::RenderThemeIPhone::adjustCheckboxStyle):
        (WebCore::shortened):
        (WebCore::RenderThemeIPhone::paintCheckboxDecorations):
        (WebCore::RenderThemeIPhone::adjustRadioStyle):
        (WebCore::RenderThemeIPhone::paintRadioDecorations):
        (WebCore::RenderThemeIPhone::paintTextFieldDecorations):
        (WebCore::RenderThemeIPhone::paintMenuListButtonDecorations):
        (WebCore::RenderThemeIPhone::paintPushButtonDecorations):
        * wak/WAKStringDrawing.mm:
        (-[NSString _web_drawAtPoint:withFont:]):
        (-[NSString _web_sizeWithFont:]):
        (-[NSString _web_sizeWithFont:forWidth:ellipsis:]):
        (-[NSString _web_drawAtPoint:forWidth:withFont:ellipsis:]):
        (-[NSString _web_drawInRect:withFont:ellipsis:alignment:lineSpacing:includeEmoji:measureOnly:]):
        * wak/WAKView.mm:
        (-[WAKView convertSize:toView:]):
        * wak/WKGraphics.c:
        (WKDrawFramedRect):
        (WKDrawFramedRectWithWidthUsingOperation):
        * wak/WKView.cpp:
        (WKViewInitialize):
        (_WKViewAutoresizeCoord): Used (1.0f / 3.0f) instead of 0.333.
        (WKViewCreateImage):

2009-03-04  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by Simon Fraser.

        <rdar://problem/6624250> Hook up event regions to the new eclair code

        * page/iphone/EventHandlerIPhone.cpp:
        (WebCore::EventHandler::dispatchTouchEvent):
        (WebCore::EventHandler::dispatchGestureEvent):
        Fix up fprintfs so they compile
        * page/mac/WebEventRegion.mm:
        (-[WebEventRegion description]):
        Very useful for debugging
        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::scrollToOffset):
        (WebCore::RenderLayer::styleChanged):
        Both inform the Document that touch listeners are now dirty

2009-03-04  Eric Carlson  <eric.carlson@apple.com>

        <rdar://problem/6635497> No movie playback in Safari

        Reviewed by David Kilzer.

        * dom/DOMImplementation.cpp:
        (WebCore::DOMImplementation::createDocument): Never create a
        MediaDocument object on iPhone WebKit since video is handled by
        the QuickTime plugin.

2009-03-04  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Greg Bolsinga

        <rdar://problem/6624278> Tweak the tiled layer numbers of the phone

        Adjust the numbers we use to determine when to fall into CATiledLayer,
        and what tile size to use, for the phone. Reinstates the same
        values used in previous releases.

        * platform/graphics/mac/GraphicsLayerCA.mm:

2009-03-04  Simon Fraser  <simon.fraser@apple.com>

        Rubber-stamped by David Kilzer

        Merge the fix for https://bugs.webkit.org/show_bug.cgi?id=24361,
        hit-testing generated content.

        Test: fast/css-generated-content/hit-test-generated-content.html

        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::hitTestContents):

2009-03-04  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6571915> WebKit-333 doesn't install complete headers during installhdrs

        Merged ToT WebKit r41417.

        * Configurations/Base.xcconfig: Switched from PLATFORM_NAME to
        REAL_PLATFORM_NAME in iPhone-only variables.
        * Configurations/WebCore.xcconfig: Ditto.
        * WebCore.xcodeproj/project.pbxproj: Ditto for "Generate Derived
        Sources" build phase script.

    2009-03-03  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6581203> WebCore and WebKit should install the same set of headers during installhdrs phase as build phase

        Reviewed by Mark Rowe.

        The fix is to add INSTALLHDRS_COPY_PHASE = YES and
        INSTALLHDRS_SCRIPT_PHASE = YES to WebCore.xcconfig, then to make
        sure various build phase scripts work with the installhdrs build
        phase.

        * Configurations/Base.xcconfig: Defined REAL_PLATFORM_NAME
        based on PLATFORM_NAME to work around the missing definition on
        Tiger.
        * Configurations/WebCore.xcconfig: Added
        JAVASCRIPTCORE_PRIVATE_HEADERS_DIR variable to simplify logic in
        the "Generate Derived Sources" script.  Added
        INSTALLHDRS_COPY_PHASE = YES and INSTALLHDRS_SCRIPT_PHASE = YES.

        * WebCore.xcodeproj/project.pbxproj:
        - Added shell code to prevent running "Check For Global
          Initializers", "Check For Exit Time Destructors" and "Check
          For Weak VTables" scripts during the installhdrs build phase.
        - Made "Generate Derived Sources" work for the installhdrs build
          phase.  Also simplified setting of CREATE_HASH_TABLE by using
          JAVASCRIPTCORE_PRIVATE_HEADERS_DIR.

2009-03-03  Simon Fraser  <simon.fraser@apple.com>

        Rubber-stamped by David Kilzer

        Merge the following commits from WebKit TOT, which are needed
        for the Eclair implementation:
            41080 Call documentWillBecomeInactive to stop video
            41154 overflowList -> normalFlowList rename
            41189 Don't trucate event point
            41192 overflow->normalFlow list cleanup
            41195 Float -> double literals cleanup
            41201 Testcase update
            41203 painting order wrong for normal flow elements with overflow: hidden
            41204 LayoutTest updates
            41205 LayoutTest updates
            41208 Map points through 3d:
            41218 Point conversion APIs
            41309 hasTransform fix in RenderLayer
            41310 LayoutTest cleanup
            41311 LayoutTest cleanup
            41379 Single line input hit testing fix
            41385 Multiline input hit testing fix
            41387 Transform code refactor
            41389 Hit testing through 3d transforms
            41396 Fix foo.prototype for a bunch of classes
            41397 WebCoreForceSoftwareAnimation pref

        * DerivedSources.make:
        * GNUmakefile.am:
        * WebCore.base.exp:
        * WebCore.pro:
        * WebCore.scons:
        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.xcodeproj/project.pbxproj:
        * WebCoreSources.bkl:
        * bindings/js/JSAudioConstructor.cpp:
        (WebCore::JSAudioConstructor::JSAudioConstructor):
        * bindings/js/JSDOMWindowBase.cpp:
        (jsDOMWindowBaseWebKitCSSMatrix):
        (jsDOMWindowBaseWebKitPoint):
        (setJSDOMWindowBaseWebKitPoint):
        * bindings/js/JSImageConstructor.cpp:
        (WebCore::JSImageConstructor::JSImageConstructor):
        * bindings/js/JSOptionConstructor.cpp:
        (WebCore::JSOptionConstructor::JSOptionConstructor):
        * bindings/js/JSWebKitCSSMatrixConstructor.cpp:
        (WebCore::JSWebKitCSSMatrixConstructor::JSWebKitCSSMatrixConstructor):
        * bindings/js/JSWebKitCSSMatrixConstructor.h:
        * bindings/js/JSWebKitPointConstructor.cpp:
        (WebCore::JSWebKitPointConstructor::JSWebKitPointConstructor):
        (WebCore::constructWebKitPoint):
        (WebCore::JSWebKitPointConstructor::getConstructData):
        * bindings/js/JSWebKitPointConstructor.h:
        (WebCore::JSWebKitPointConstructor::classInfo):
        * bindings/js/JSWorkerConstructor.cpp:
        (WebCore::JSWorkerConstructor::JSWorkerConstructor):
        * css/CSSComputedStyleDeclaration.cpp:
        (WebCore::CSSComputedStyleDeclaration::getPropertyCSSValue):
        * dom/Document.cpp:
        (WebCore::Document::detach):
        * dom/MouseRelatedEvent.cpp:
        (WebCore::MouseRelatedEvent::receivedTarget):
        * dom/Node.cpp:
        (WebCore::Node::convertToPage):
        (WebCore::Node::convertFromPage):
        * dom/Node.h:
        * page/DOMWindow.cpp:
        (WebCore::DOMWindow::webkitConvertPointFromNodeToPage):
        (WebCore::DOMWindow::webkitConvertPointFromPageToNode):
        * page/DOMWindow.h:
        * page/DOMWindow.idl:
        * page/Page.cpp:
        (WebCore::Page::~Page):
        * page/WebKitPoint.h:
        (WebCore::WebKitPoint::create):
        (WebCore::WebKitPoint::WebKitPoint):
        * page/WebKitPoint.idl:
        * platform/graphics/mac/GraphicsLayerCA.mm:
        (WebCore::forceSoftwareAnimation):
        (WebCore::GraphicsLayer::showDebugBorders):
        (WebCore::GraphicsLayer::showRepaintCounter):
        * platform/graphics/transforms/RotateTransformOperation.cpp:
        (WebCore::RotateTransformOperation::blend):
        * platform/graphics/transforms/TransformationMatrix.cpp:
        (WebCore::TransformationMatrix::translate):
        (WebCore::TransformationMatrix::translate3d):
        (WebCore::TransformationMatrix::translateRight3d):
        * platform/graphics/transforms/TransformationMatrix.h:
        * rendering/InlineFlowBox.cpp:
        (WebCore::InlineFlowBox::nodeAtPoint):
        (WebCore::InlineFlowBox::paint):
        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::repaintOverhangingFloats):
        (WebCore::RenderBlock::paint):
        (WebCore::RenderBlock::paintChildren):
        (WebCore::RenderBlock::paintObject):
        (WebCore::RenderBlock::paintFloats):
        (WebCore::RenderBlock::insertFloatingObject):
        (WebCore::RenderBlock::floatRect):
        (WebCore::RenderBlock::lowestPosition):
        (WebCore::RenderBlock::rightmostPosition):
        (WebCore::RenderBlock::leftmostPosition):
        (WebCore::RenderBlock::addOverhangingFloats):
        (WebCore::RenderBlock::nodeAtPoint):
        (WebCore::RenderBlock::hitTestContents):
        * rendering/RenderBox.cpp:
        (WebCore::RenderBox::hasSelfPaintingLayer):
        (WebCore::RenderBox::nodeAtPoint):
        (WebCore::RenderBox::pushContentsClip):
        (WebCore::RenderBox::popContentsClip):
        (WebCore::RenderBox::mapLocalToAbsolutePoint):
        (WebCore::RenderBox::mapAbsoluteToLocalPoint):
        * rendering/RenderBox.h:
        (WebCore::RenderBox::paintObject):
        * rendering/RenderBoxModelObject.cpp: Added.
        (WebCore::RenderBoxModelObject::RenderBoxModelObject):
        (WebCore::RenderBoxModelObject::~RenderBoxModelObject):
        (WebCore::RenderBoxModelObject::destroy):
        (WebCore::RenderBoxModelObject::hasSelfPaintingLayer):
        (WebCore::RenderBoxModelObject::styleWillChange):
        (WebCore::RenderBoxModelObject::styleDidChange):
        (WebCore::RenderBoxModelObject::updateBoxModelInfoFromStyle):
        (WebCore::RenderBoxModelObject::relativePositionOffsetX):
        (WebCore::RenderBoxModelObject::relativePositionOffsetY):
        (WebCore::RenderBoxModelObject::offsetLeft):
        (WebCore::RenderBoxModelObject::offsetTop):
        (WebCore::RenderBoxModelObject::paddingTop):
        (WebCore::RenderBoxModelObject::paddingBottom):
        (WebCore::RenderBoxModelObject::paddingLeft):
        (WebCore::RenderBoxModelObject::paddingRight):
        (WebCore::RenderBoxModelObject::paintFillLayerExtended):
        (WebCore::RenderBoxModelObject::calculateBackgroundSize):
        (WebCore::RenderBoxModelObject::calculateBackgroundImageGeometry):
        (WebCore::RenderBoxModelObject::verticalPosition):
        (WebCore::RenderBoxModelObject::paintNinePieceImage):
        (WebCore::RenderBoxModelObject::paintBorder):
        (WebCore::RenderBoxModelObject::paintBoxShadow):
        (WebCore::RenderBoxModelObject::containingBlockWidthForContent):
        * rendering/RenderBoxModelObject.h: Added.
        (WebCore::RenderBoxModelObject::relativePositionOffset):
        (WebCore::RenderBoxModelObject::layer):
        (WebCore::RenderBoxModelObject::requiresLayer):
        (WebCore::RenderBoxModelObject::borderTop):
        (WebCore::RenderBoxModelObject::borderBottom):
        (WebCore::RenderBoxModelObject::borderLeft):
        (WebCore::RenderBoxModelObject::borderRight):
        (WebCore::RenderBoxModelObject::hasHorizontalBordersPaddingOrMargin):
        (WebCore::RenderBoxModelObject::hasHorizontalBordersOrPadding):
        (WebCore::RenderBoxModelObject::childBecameNonInline):
        (WebCore::RenderBoxModelObject::isBoxModelObject):
        (WebCore::toRenderBoxModelObject):
        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::RenderLayer):
        (WebCore::RenderLayer::~RenderLayer):
        (WebCore::RenderLayer::updateTransform):
        (WebCore::RenderLayer::setHasVisibleContent):
        (WebCore::RenderLayer::dirty3DTransformedDescendantStatus):
        (WebCore::RenderLayer::update3DTransformedDescendantStatus):
        (WebCore::RenderLayer::perspectiveTransform):
        (WebCore::RenderLayer::perspectiveOrigin):
        (WebCore::RenderLayer::enclosingCompositingLayer):
        (WebCore::RenderLayer::addChild):
        (WebCore::RenderLayer::removeChild):
        (WebCore::RenderLayer::paintLayer):
        (WebCore::RenderLayer::hitTest):
        (WebCore::computeZOffset):
        (WebCore::RenderLayer::createLocalTransformState):
        (WebCore::RenderLayer::hitTestLayer):
        (WebCore::RenderLayer::hitTestContents):
        (WebCore::RenderLayer::dirtyNormalFlowList):
        (WebCore::RenderLayer::updateNormalFlowList):
        (WebCore::RenderLayer::collectLayers):
        (WebCore::RenderLayer::updateLayerListsIfNeeded):
        (WebCore::RenderLayer::shouldBeNormalFlowOnly):
        (WebCore::RenderLayer::isSelfPaintingLayer):
        (WebCore::RenderLayer::styleChanged):
        * rendering/RenderLayer.h:
        (WebCore::RenderLayer::isNormalFlowOnly):
        (WebCore::RenderLayer::normalFlowList):
        (WebCore::RenderLayer::preserves3D):
        (WebCore::RenderLayer::has3DTransform):
        (WebCore::RenderLayer::setHas3DTransformedDescendant):
        (WebCore::RenderLayer::has3DTransformedDescendant):
        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::updateGraphicsLayerGeometry):
        (WebCore::RenderLayerBacking::hasNonCompositingContent):
        (WebCore::RenderLayerBacking::paintIntoLayer):
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::calculateCompositedBounds):
        (WebCore::RenderLayerCompositor::computeCompositingRequirements):
        (WebCore::RenderLayerCompositor::rebuildCompositingLayerTree):
        (WebCore::RenderLayerCompositor::recursiveRepaintLayerRect):
        (WebCore::requiresCompositingLayerForTransform):
        (WebCore::RenderLayerCompositor::layerHas3DContent):
        (WebCore::RenderLayerCompositor::setDocumentScale):
        * rendering/RenderObject.cpp:
        (WebCore::RenderObject::localToAbsolute):
        (WebCore::RenderObject::absoluteToLocal):
        (WebCore::RenderObject::mapLocalToAbsolutePoint):
        (WebCore::RenderObject::mapAbsoluteToLocalPoint):
        (WebCore::RenderObject::transformFromContainer):
        * rendering/RenderObject.h:
        * rendering/RenderTable.cpp:
        (WebCore::RenderTable::paint):
        (WebCore::RenderTable::paintObject):
        (WebCore::RenderTable::nodeAtPoint):
        * rendering/RenderTable.h:
        * rendering/RenderTableCell.cpp:
        (WebCore::RenderTableCell::mapLocalToAbsolutePoint):
        (WebCore::RenderTableCell::mapAbsoluteToLocalPoint):
        (WebCore::RenderTableCell::paint):
        * rendering/RenderTableCell.h:
        * rendering/RenderTableRow.cpp:
        (WebCore::RenderTableRow::nodeAtPoint):
        (WebCore::RenderTableRow::paint):
        * rendering/RenderTableRow.h:
        * rendering/RenderTableSection.cpp:
        (WebCore::RenderTableSection::paint):
        (WebCore::RenderTableSection::paintObject):
        (WebCore::RenderTableSection::nodeAtPoint):
        * rendering/RenderTableSection.h:
        * rendering/RenderTextControlMultiLine.cpp:
        (WebCore::RenderTextControlMultiLine::nodeAtPoint):
        * rendering/RenderTextControlSingleLine.cpp:
        (WebCore::RenderTextControlSingleLine::nodeAtPoint):
        * rendering/RenderTreeAsText.cpp:
        (WebCore::writeLayers):
        * rendering/RenderView.cpp:
        (WebCore::RenderView::mapLocalToAbsolutePoint):
        (WebCore::RenderView::mapAbsoluteToLocalPoint):
        * rendering/RenderView.h:
        * rendering/TransformState.cpp: Added.
        (WebCore::TransformState::move):
        (WebCore::TransformState::applyTransform):
        (WebCore::TransformState::flatten):
        (WebCore::TransformState::mappedPoint):
        (WebCore::HitTestingTransformState::move):
        (WebCore::HitTestingTransformState::applyTransform):
        (WebCore::HitTestingTransformState::flatten):
        (WebCore::HitTestingTransformState::mappedPoint):
        (WebCore::HitTestingTransformState::mappedQuad):
        * rendering/TransformState.h: Added.
        (WebCore::TransformState::):
        (WebCore::TransformState::TransformState):
        (WebCore::TransformState::move):
        (WebCore::HitTestingTransformState::create):
        (WebCore::HitTestingTransformState::move):
        (WebCore::HitTestingTransformState::HitTestingTransformState):
        * rendering/style/RenderStyle.h:
        (WebCore::InheritedFlags::hasPerspective):

2009-03-03  Andre Boule  <aboule@apple.com>

        Reviewed by bradm.
        <rdar://problem/6639063> Calculating the text size with a custom line spacing does not match the drawing

        The size reported by multi-line string drawing (and sizing) is incorrect
        when setting a custom line height. It is drawing the right number of lines
        and truncating correctly, just not reporting the actual size drawn.
        I am special-casing the custom line spacing path to make extra sure the
        common case of default line spacing is not affected.

        * wak/WAKStringDrawing.mm:
        (-[NSString _web_drawInRect:withFont:ellipsis:alignment:lineSpacing:includeEmoji:measureOnly:]):

2009-03-03  Andre Boule  <aboule@apple.com>

        Reviewed by antti.
        <rdar://problem/6623666> Clipped descenders, descender pixels not erased when backspacing
        GSFont reports ascent and descent as a float.
        We were simply assigning it to an int, which is not how the linespace is calculated.
        In the linespace calculation those two metrics are ceiled. Better to do that here too.

        Fix does not affect web layout, does not affect fast string drawing, and fixes both clipped
        characters and left-over pixels when deleting characters.

        * platform/graphics/mac/SimpleFontDataMac.mm:
        (WebCore::SimpleFontData::platformInit):

2009-03-03  Aaron Golden  <agolden@apple.com>

        Reviewed by David Kilzer.

        <rdar://problem/6098731> Safari on iPhone does not work with Juniper SSL-VPN client cert authentication

        * WebCore.iPhone.exp:
        * loader/EmptyClients.h:
        (WebCore::EmptyFrameLoaderClient::canAuthenticateAgainstProtectionSpace):
        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::loadItem):
        * loader/FrameLoader.h:
        * loader/FrameLoaderClient.h:
        * loader/ResourceLoader.cpp:
        (WebCore::ResourceLoader::canAuthenticateAgainstProtectionSpace):
        * loader/ResourceLoader.h:
        (WebCore::ResourceLoader::canAuthenticateAgainstProtectionSpace):
        * platform/network/ProtectionSpace.h:
        (WebCore::):
        * platform/network/ResourceHandle.h:
        * platform/network/ResourceHandleClient.h:
        (WebCore::ResourceHandleClient::canAuthenticateAgainstProtectionSpace):
        * platform/network/mac/AuthenticationMac.mm:
        (WebCore::mac):
        (WebCore::core):
        * platform/network/mac/ResourceHandleMac.mm:
        (WebCore::ResourceHandle::canAuthenticateAgainstProtectionSpace):
        (-[WebCoreResourceHandleAsDelegate connection:canAuthenticateAgainstProtectionSpace:]):

2009-03-02  Andre Boule  <aboule@apple.com>

        Reviewed by george.
        Small change to make word rounding behavior consistent in simulator.
        <rdar://problem/6639182> Word Rounding behavior is broken for apps linked before kirkwood

        * wak/WAKStringDrawing.mm:
        (_web_initWordRoundingEnabled):
        (+[NSString _web_setWordRoundingEnabled:]):

2009-03-02  Andre Boule  <aboule@apple.com>

        Reviewed by rjw (in original patch)
        Accidentally changed this value between the time the previous patch was reviewed and
        when I commited it.
        <rdar://problem/6639182> Word Rounding behavior is broken for apps linked before kirkwood

        * wak/WAKStringDrawing.mm:

2009-03-02  Justin Garcia  <justin.garcia@apple.com>

        Reviewed by Ken Kocienda.

        Speed up editing in plain text regions a bit.

        * editing/CompositeEditCommand.cpp:
        (WebCore::CompositeEditCommand::moveParagraphs): Avoid style related work when moving
        empty paragraphs.
        * editing/ReplaceSelectionCommand.cpp:
        (WebCore::ReplaceSelectionCommand::doApply): Avoid m_matchStyle related work
        in plain text only regions, since the fragments we create for those regions
        lack style and so will automatically match style.
        Also tighten the check that avoids m_preventNesting work.  It is only in regions
        that are both plain text only *and* preserve newline that we create fragments without
        using blocks to hold paragraphs (we separate paragraphs with \ns).

2009-03-02  Greg Bolsinga  <bolsinga@apple.com>

        Rubber stamped by David Kilzer and Antti Koivisto.

        <rdar://problem/6638338> RenderTexts are suddenly split on words

        When removing WKScrollerView, missed one code path when removing methods.
        Ran DRT without new incidents.

        * wak/WKScrollView.c:
        (WKScrollViewTile):
        (WKScrollViewAdjustScrollers):

2009-03-02  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by Antti Koivisto.

        <rdar://problem/6635748> WKScrollerView is not used

        * WebCore.iPhone.exp:
        * WebCore.xcodeproj/project.pbxproj:
        * wak/WAKScrollView.mm:
        (-[WAKScrollView initWithFrame:]):
        (-[WAKScrollView setHasVerticalScroller:]):
        (-[WAKScrollView hasVerticalScroller]):
        (-[WAKScrollView setHasHorizontalScroller:]):
        (-[WAKScrollView hasHorizontalScroller]):
        (-[WAKScrollView setAllowsHorizontalScrolling:]):
        (-[WAKScrollView allowsHorizontalScrolling]):
        (-[WAKScrollView setAllowsVerticalScrolling:]):
        (-[WAKScrollView allowsVerticalScrolling]):
        (-[WAKScrollView setAllowsScrolling:]):
        (-[WAKScrollView allowsScrolling]):
        * wak/WKScrollView.c:
        (_WKScrollViewDocumentScrollableLength):
        (_WKScrollViewDocumentScrolledLength):
        (_WKScrollViewSetDocumentViewOrigin):
        (_WKScrollViewUpdateScrolledPosition):
        (_drawCallback):
        (_WKScrollViewDealloc):
        (WKScrollViewInitialize):
        (WKScrollViewCreateWithFrame):
        (WKScrollViewSetDocumentView):
        (WKScrollViewTile):
        (WKScrollViewAdjustScrollers):
        (_WKScrollViewUpdateScrollerWithDocumentPosition):
        (WKScrollViewScrollToPoint):
        * wak/WKScrollView.h:
        * wak/WKScrollerView.c: Removed.
        * wak/WKScrollerView.h: Removed.
        * wak/WKTypes.h:

2009-03-01  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6548277> Project setting default to Xcode 2.4; need to change to Xcode 3.1

        Reviewed by Andre Boule.

        * WebCore.xcodeproj/project.pbxproj: Switched
        compatibilityVersion from "Xcode 2.4" to "Xcode 3.1".

2009-03-01  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6217293> WebKit projects get warning when building with BlackOpal

        Reviewed by Scott Goodson.

        * WebCore.xcodeproj/project.pbxproj: Changed productType
        back to the non-shallow version.

2009-03-01  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6616973> CrashTracer: [USER] 1 crash in DumpRenderTree at WebCore - WebCore::RenderPartObject::updateWidget

        Reviewed by Greg Bolsinga.

        Covered by these test cases when run under guard malloc:
            fast/dom/HTMLDocument/object-by-name-or-id.html
            fast/dom/HTMLDocument/object-by-name-unknown-child-element.html

        Previously a hack was added to RenderPartObject::updateWidget()
        to prevent re-entry while rendering attachments in mail messages
        in MobileMail.  Unfortunately in one case, the RenderPartObject
        object would get deleted before the original updateWidget()
        method returned, meaning that setting m_updatingWidget to false
        would write to freed memory.

        The solution is to prevent m_updatingWidget from being set in
        the case where the RenderPartObject object is deleted before
        updateWidget() returns.  This is achieved by using a new helper
        class called UpdateWidgetReentryHelper that sets
        RenderPartObject::m_updatingWidget to true when instantiated
        and false when destroyed unless its
        m_isRenderPartObjectDestroyedBeforeExitingUpdateWidget flag is
        set to true.

        * rendering/RenderPartObject.cpp:
        (WebCore::UpdateWidgetReentryHelper::UpdateWidgetReentryHelper): Added.
        Sets RenderPartObject::m_updatingWidget to true.
        (WebCore::UpdateWidgetReentryHelper::~UpdateWidgetReentryHelper): Added.
        Sets RenderPartObject::m_updatingWidget to false only if
        m_isRenderPartObjectDestroyedBeforeExitingUpdateWidget is false.
        (WebCore::UpdateWidgetReentryHelper::setIsRenderPartObjectDestroyedBeforeExitingUpdateWidget): Added.
        (WebCore::RenderPartObject::_updateWidget): Removed this
        renaming of RenderPartObject::updateWidget().
        (WebCore::RenderPartObject::updateWidget): Moved re-entry check
        into this method and instantiated an UpdateWidgetReentryHelper
        object to reset m_updatingWidget on method exit.  Also called
        setIsRenderPartObjectDestroyedBeforeExitingUpdateWidget(true)
        before calling HTMLObjectElement::renderFallbackContent() since
        that method will delete the RenderPartObject object by the time
        it returns.  This is the bug fix that prevents writing to freed
        memory.
        * rendering/RenderPartObject.h:
        (WebCore::RenderPartObject::_updateWidget): Removed.
        (WebCore::RenderPartObject::setUpdatingWidget): Added.

2009-02-28  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6628098> Assertion failure calling clearTimeout() with zero or a negative number

        Reviewed by Simon Fraser.

        Test: platform/iphone-simulator/iphone/fast/js/clearTimeout-crash.html

        * bindings/js/JSDOMWindowCustom.cpp:
        (WebCore::JSDOMWindow::clearTimeout): Added check for positive
        timeoutId before passing it to Document::findTimeout().

2009-02-27  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by Antti KOivisto.

        <rdar://problem/6630797> Dismissing an alert box crashes MobileSafari

        Event Loops may nest, so track & reset to the last event on the way through

        * wak/WKWindow.cpp:
        (WKWindowSendEvent):

2009-02-27  Antti Koivisto  <antti@apple.com>

        Rubber-stamped by Greg Bolsinga and Dave Kilzer.

        <rdar://problem/6632862> Override [CALayer display] in TiledSurface

        John Harper suggested a better approach for ensuring layout is done before draw.

        * platform/iphone/TiledSurface.mm:
        (-[TileLayer display]):

2009-02-27  Chris Marrin  <cmarrin@apple.com>

        Reviewed by Simon Fraser.

        <rdar://problem/6632952>

        This adds a pref to GraphicsLayer: WebCoreForceSoftwareAnimation.
        This could be useful in other places, but I am also using it to
        turn off hardware animation in DRT. This causes all the animation
        and transition tests to pass until we can get the ability to run
        CA rendering in DRT.

        * platform/graphics/mac/GraphicsLayerCA.mm:
        (WebCore::forceSoftwareAnimation):
        (WebCore::GraphicsLayerCA::setOpacity):
        (WebCore::GraphicsLayerCA::animateTransform):
        (WebCore::GraphicsLayerCA::animateFloat):

2009-02-27  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6599278> iPhone: Newline in XMLHttpRequest URL can be used to remove HTTP headers (e.g. Host:) (22731)

        Merged ToT WebKit r41262.

    2009-02-26  Alexey Proskuryakov  <ap@webkit.org>

        Reviewed by Darin Adler.

        https://bugs.webkit.org/show_bug.cgi?id=23500
        KURL::parse() incorrectly compares its result to original string

        * platform/KURL.cpp: (WebCore::KURL::parse): Take string length into account.

2009-02-27  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6629719> CrashTracer: [USER] 1 crash in DumpRenderTree at WebCore - WebCore::KURL::KURL + 125

        Merged ToT WebKit r40669 and r41076.

        This fixes an assertion failure in debug builds when
        constructing new KURL objects.  Many of the storage
        tests and fast/js/exceptions-thrown-in-callbacks.html
        were fixed by this commit.

    2009-02-19  Gustavo Noronha Silva  <gns@gnome.org>

        Reviewed by Alexey Proskuryakov.

        Make setPort remove port if 0 is given to it, as promised by the
        comment in KURL's header.

        * platform/KURL.cpp:
        (WebCore::KURL::setPort):

    2009-02-05  Yael Aharon  <yael.aharon@nokia.com>

        Reviewed by Alexey Proskuryakov.
        Landed by Simon Hausmann.

        https://bugs.webkit.org/show_bug.cgi?id=23733

        Use a 2 arguments constructor for KURL to avoid ASSERT failure.

        * page/SecurityOrigin.cpp:
        (WebCore::SecurityOrigin::createFromDatabaseIdentifier):

2009-02-27  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6629053> Thread deadlock in CGFontCacheLock() below WebCore::Font::drawGlyphs() caused by UI drawing on the Web Thread

        Reviewed by and consensus reached with Greg Bolsinga and Antti Koivisto.

        Previously, some Debug Console status updates ("1 Tip",
        "2 Messages") were being drawn on the Web Thread instead of
        the main thread.  This happened because
        WebThreadCallDelegateAsync() would always invoke the delegate
        method on the current thread instead of the main thread.

        This behavior caused a hang one time when the title of a web
        page was being drawn at the same time the Debug Console status
        was being drawn.  The fix is to make sure that
        WebThreadCallDelegateAsync() always calls the delegate on the
        main thread.

        * wak/WAKStringDrawing.mm:
        (-[NSString _web_drawAtPoint:forWidth:withFont:ellipsis:letterSpacing:includeEmoji:]):
        Added an ASSERT() that this method is never called on the Web
        Thread.  All UI string drawing should be done on the main
        thread.
        * wak/WebCoreThread.mm:
        (WebRunLoopUnlock): Use SendDelegateMessage() to invoke the
        methods on the main thread since using -[NSInvocation invoke]
        here always makes them run on the Web Thread.  The NSInvocation
        object is retained here and released by
        MainThreadAdoptAndRelease() in SendMessage().  Note that this
        code is identical to WebThreadCallDelegate() and reverts a
        change originally made in iPhone WebKit r58192.

2009-02-26  Chris Fleizach  <cfleizach@apple.com>

        Reviewed by Greg Bolsinga, David Kilzer.

        <rdar://problem/6619532> AX: AX traits need to be updated

        * page/iphone/AccessibilityObjectWrapperIPhone.mm:
        (-[AccessibilityObjectWrapper accessibilityTraits]):

2009-02-26  Chris Marrin  <cmarrin@apple.com>

        Reviewed by Antti Koivisto.

        Turn on ACCELERATED_COMPOSITING for the phone

        * config.h:

2009-02-26  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6450203> Start of redirect chain ends up as master entry in Application Cache

        Merged ToT WebKit r41178.

    2009-02-24  Alexey Proskuryakov  <ap@webkit.org>

        Reviewed by Darin Adler.

        https://bugs.webkit.org/show_bug.cgi?id=24091
        <rdar://problem/6468660> Start of redirect chain ends up as master entry in Application Cache

        Test: http/tests/appcache/access-via-redirect.php

        * loader/appcache/ApplicationCacheGroup.cpp:
        (WebCore::ApplicationCacheGroup::finishedLoadingMainResource): Use the URL we ended up with,
        not the original one.

2009-02-25  David Kilzer  <ddkilzer@apple.com>

        <rdar://problem/6624473> Leaks of CTFont objects in WebCore

        Reviewed by Antti Koivisto.

        * platform/graphics/mac/FontPlatformDataMac.mm:
        (WebCore::FontPlatformData::allowsLigatures): Use AdoptCF
        with RetainPtr<CTFontRef> and RetainPtr<CFCharacterSetRef> to
        avoid leaks.

