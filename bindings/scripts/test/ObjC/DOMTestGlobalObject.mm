/*
 * This file is part of the WebKit open source project.
 * This file has been generated by generate-bindings.pl. DO NOT MODIFY!
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE INC. ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE INC. OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 */

#import "config.h"
#import "DOMInternal.h"

#import "DOMTestGlobalObject.h"

#import "DOMNodeInternal.h"
#import "DOMTestGlobalObjectInternal.h"
#import "ExceptionHandlers.h"
#import "JSMainThreadExecState.h"
#import "TestGlobalObject.h"
#import "ThreadCheck.h"
#import "URL.h"
#import "WebCoreObjCExtras.h"
#import "WebScriptObjectPrivate.h"
#import <wtf/GetPtr.h>

#define IMPL reinterpret_cast<WebCore::TestGlobalObject*>(_internal)

@implementation DOMTestGlobalObject

- (void)dealloc
{
    if (WebCoreObjCScheduleDeallocateOnMainThread([DOMTestGlobalObject class], self))
        return;

    if (_internal)
        IMPL->deref();
    [super dealloc];
}

- (NSString *)regularAttribute
{
    WebCore::JSMainThreadNullState state;
    return IMPL->regularAttribute();
}

- (void)setRegularAttribute:(NSString *)newRegularAttribute
{
    WebCore::JSMainThreadNullState state;
    IMPL->setRegularAttribute(newRegularAttribute);
}

- (NSString *)publicAndPrivateAttribute
{
    WebCore::JSMainThreadNullState state;
    return IMPL->publicAndPrivateAttribute();
}

- (void)setPublicAndPrivateAttribute:(NSString *)newPublicAndPrivateAttribute
{
    WebCore::JSMainThreadNullState state;
    IMPL->setPublicAndPrivateAttribute(newPublicAndPrivateAttribute);
}

#if ENABLE(TEST_FEATURE)
- (NSString *)publicAndPrivateConditionalAttribute
{
    WebCore::JSMainThreadNullState state;
    return IMPL->publicAndPrivateConditionalAttribute();
}

- (void)setPublicAndPrivateConditionalAttribute:(NSString *)newPublicAndPrivateConditionalAttribute
{
    WebCore::JSMainThreadNullState state;
    IMPL->setPublicAndPrivateConditionalAttribute(newPublicAndPrivateConditionalAttribute);
}
#endif

#if ENABLE(TEST_FEATURE)
- (NSString *)enabledAtRuntimeAttribute
{
    WebCore::JSMainThreadNullState state;
    return IMPL->enabledAtRuntimeAttribute();
}

- (void)setEnabledAtRuntimeAttribute:(NSString *)newEnabledAtRuntimeAttribute
{
    WebCore::JSMainThreadNullState state;
    IMPL->setEnabledAtRuntimeAttribute(newEnabledAtRuntimeAttribute);
}
#endif

- (void)regularOperation:(NSString *)testParam
{
    WebCore::JSMainThreadNullState state;
    IMPL->regularOperation(testParam);
}


#if ENABLE(TEST_FEATURE)
- (void)enabledAtRuntimeOperation:(NSString *)testParam
{
    WebCore::JSMainThreadNullState state;
    IMPL->enabledAtRuntimeOperation(testParam);
}

#endif


#if ENABLE(TEST_FEATURE)
- (void)enabledAtRuntimeOperation:(int)testParam
{
    WebCore::JSMainThreadNullState state;
    IMPL->enabledAtRuntimeOperation(testParam);
}

#endif

@end

WebCore::TestGlobalObject* core(DOMTestGlobalObject *wrapper)
{
    return wrapper ? reinterpret_cast<WebCore::TestGlobalObject*>(wrapper->_internal) : 0;
}

DOMTestGlobalObject *kit(WebCore::TestGlobalObject* value)
{
    WebCoreThreadViolationCheckRoundOne();
    if (!value)
        return nil;
    if (DOMTestGlobalObject *wrapper = getDOMWrapper(value))
        return [[wrapper retain] autorelease];
    DOMTestGlobalObject *wrapper = [[DOMTestGlobalObject alloc] _init];
    wrapper->_internal = reinterpret_cast<DOMObjectInternal*>(value);
    value->ref();
    addDOMWrapper(wrapper, value);
    return [wrapper autorelease];
}
