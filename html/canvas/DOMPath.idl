/*
 * Copyright (C) 2006 Apple Inc.  All rights reserved.
 * Copyright (C) 2012, 2013 Adobe Systems Incorporated. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1.  Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 * 2.  Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
 * OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
 * TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
 * THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

[
    Constructor,
    Constructor(DOMPath path),
    Constructor(DOMString text),
    ExportMacro=WEBCORE_EXPORT,
    InterfaceName=Path2D,
] interface DOMPath {
    // FIXME: This should be:
    // [Conditional=CANVAS_PATH] void addPath(DOMPath path, optional SVGMatrix transform);
    [Conditional=CANVAS_PATH] void addPath(DOMPath? path);
    [Conditional=CANVAS_PATH] void addPath(DOMPath? path, SVGMatrix transform);

    // FIXME: These methods should be shared with CanvasRenderingContext2D in the CanvasPathMethods interface.
    void closePath();
    void moveTo(optional float x = NaN,
                optional float y = NaN);
    void lineTo(optional float x = NaN,
                optional float y = NaN);
    void quadraticCurveTo(optional float cpx = NaN,
                          optional float cpy = NaN,
                          optional float x = NaN,
                          optional float y = NaN);
    void bezierCurveTo(optional float cp1x = NaN,
                       optional float cp1y = NaN,
                       optional float cp2x = NaN,
                       optional float cp2y = NaN,
                       optional float x = NaN,
                       optional float y = NaN);
    [RaisesException] void arcTo(optional float x1 = NaN,
               optional float y1 = NaN,
               optional float x2 = NaN,
               optional float y2 = NaN,
               optional float radius = NaN);
    void rect(optional float x = NaN,
              optional float y = NaN,
              optional float width = NaN,
              optional float height = NaN);
    [RaisesException] void arc(optional float x = NaN,
                               optional float y = NaN,
                               optional float radius = NaN,
                               optional float startAngle = NaN,
                               optional float endAngle = NaN,
                               optional boolean anticlockwise = false);
    [RaisesException] void ellipse(unrestricted float x, unrestricted float y, unrestricted float radiusX, unrestricted float radiusY, unrestricted float rotation, unrestricted float startAngle, unrestricted float endAngle, optional boolean anticlockwise = false);

};
